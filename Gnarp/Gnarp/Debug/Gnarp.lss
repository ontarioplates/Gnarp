
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00802000  00003542  000035d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000237  0080214c  0080214c  00003722  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000338  00000000  00000000  00003e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ccb  00000000  00000000  000041ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000075ff  00000000  00000000  00004e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000243e  00000000  00000000  0000c477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004394  00000000  00000000  0000e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000930  00000000  00000000  00012c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d12  00000000  00000000  0001357c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cd9  00000000  00000000  0001528e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000f73  00000000  00000000  00017f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000160  00000000  00000000  00018eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_17>
      48:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 e4       	ldi	r30, 0x42	; 66
     18c:	f5 e3       	ldi	r31, 0x35	; 53
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 34       	cpi	r26, 0x4C	; 76
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e4       	ldi	r26, 0x4C	; 76
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a3 38       	cpi	r26, 0x83	; 131
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
     1ae:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
#include <avr/interrupt.h>
#include <avr/io.h>

#include "arpeggiator.h"

ISR(TCC0_CCA_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:

ISR(TCC0_CCD_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:

static uint16_t BPM;

void configure_beat_clock_timer(){
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     226:	20 91 4c 21 	lds	r18, 0x214C
     22a:	30 91 4d 21 	lds	r19, 0x214D
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     306:	80 93 4c 21 	sts	0x214C, r24
     30a:	90 93 4d 21 	sts	0x214D, r25
    configure_beat_clock_timer();
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
}
     33a:	08 95       	ret

0000033c <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     33c:	80 91 4c 21 	lds	r24, 0x214C
     340:	90 91 4d 21 	lds	r25, 0x214D
     344:	08 95       	ret

00000346 <increment_BPM>:

bool increment_BPM(int add_me){
	if (BPM == BPM_MAX)
     346:	20 91 4c 21 	lds	r18, 0x214C
     34a:	30 91 4d 21 	lds	r19, 0x214D
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	20 39       	cpi	r18, 0x90	; 144
     352:	34 07       	cpc	r19, r20
     354:	a1 f0       	breq	.+40     	; 0x37e <increment_BPM+0x38>
	    return 0;
		
    BPM += add_me;
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	80 93 4c 21 	sts	0x214C, r24
     35e:	90 93 4d 21 	sts	0x214D, r25
	if (BPM > BPM_MAX)
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	81 39       	cpi	r24, 0x91	; 145
     366:	92 07       	cpc	r25, r18
     368:	30 f0       	brcs	.+12     	; 0x376 <increment_BPM+0x30>
	    BPM = BPM_MAX;
     36a:	80 e9       	ldi	r24, 0x90	; 144
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	80 93 4c 21 	sts	0x214C, r24
     372:	90 93 4d 21 	sts	0x214D, r25
    configure_beat_clock_timer();
     376:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
	
	return 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	08 95       	ret
    return BPM;
}

bool increment_BPM(int add_me){
	if (BPM == BPM_MAX)
	    return 0;
     37e:	80 e0       	ldi	r24, 0x00	; 0
	if (BPM > BPM_MAX)
	    BPM = BPM_MAX;
    configure_beat_clock_timer();
	
	return 1;
}
     380:	08 95       	ret

00000382 <decrement_BPM>:

bool decrement_BPM(int subtract_me){
     382:	9c 01       	movw	r18, r24
	if (BPM == BPM_MIN)
     384:	80 91 4c 21 	lds	r24, 0x214C
     388:	90 91 4d 21 	lds	r25, 0x214D
     38c:	84 31       	cpi	r24, 0x14	; 20
     38e:	91 05       	cpc	r25, r1
     390:	99 f0       	breq	.+38     	; 0x3b8 <decrement_BPM+0x36>
	    return 0;
		
    BPM -= subtract_me;
     392:	82 1b       	sub	r24, r18
     394:	93 0b       	sbc	r25, r19
     396:	80 93 4c 21 	sts	0x214C, r24
     39a:	90 93 4d 21 	sts	0x214D, r25
	if (BPM < BPM_MIN)
     39e:	84 31       	cpi	r24, 0x14	; 20
     3a0:	91 05       	cpc	r25, r1
     3a2:	30 f4       	brcc	.+12     	; 0x3b0 <decrement_BPM+0x2e>
	    BPM = BPM_MIN;
     3a4:	84 e1       	ldi	r24, 0x14	; 20
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	80 93 4c 21 	sts	0x214C, r24
     3ac:	90 93 4d 21 	sts	0x214D, r25
    configure_beat_clock_timer();
     3b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
	
	return 1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	08 95       	ret
	return 1;
}

bool decrement_BPM(int subtract_me){
	if (BPM == BPM_MIN)
	    return 0;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
	if (BPM < BPM_MIN)
	    BPM = BPM_MIN;
    configure_beat_clock_timer();
	
	return 1;
}
     3ba:	08 95       	ret

000003bc <initialize_hardware_manager>:
#include "hardware.h"

static Hardware_Manager manager;
	
void initialize_hardware_manager(){
	manager.encoder_state = TURN_NONE;
     3bc:	10 92 4e 21 	sts	0x214E, r1
    manager.pushbutton_switch_edge = EDGE_NONE;
     3c0:	10 92 4f 21 	sts	0x214F, r1
    manager.toggle_switch_edge = EDGE_NONE;
     3c4:	10 92 50 21 	sts	0x2150, r1
    manager.encoder_switch_edge = EDGE_NONE;
     3c8:	10 92 51 21 	sts	0x2151, r1
    manager.pushbutton_switch_state = 0;
     3cc:	10 92 52 21 	sts	0x2152, r1
    manager.toggle_switch_state = 0;
     3d0:	10 92 53 21 	sts	0x2153, r1
    manager.encoder_switch_state = 0;
     3d4:	10 92 54 21 	sts	0x2154, r1
	
	for (uint8_t i = 0; i < NUM_POTS; i++)
        manager.pot_values[i] = 0;
     3d8:	10 92 55 21 	sts	0x2155, r1
     3dc:	10 92 56 21 	sts	0x2156, r1
     3e0:	10 92 57 21 	sts	0x2157, r1
     3e4:	10 92 58 21 	sts	0x2158, r1
     3e8:	10 92 59 21 	sts	0x2159, r1
     3ec:	10 92 5a 21 	sts	0x215A, r1
     3f0:	10 92 5b 21 	sts	0x215B, r1
     3f4:	10 92 5c 21 	sts	0x215C, r1
     3f8:	10 92 5d 21 	sts	0x215D, r1
     3fc:	10 92 5e 21 	sts	0x215E, r1
}	
     400:	08 95       	ret

00000402 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return manager.encoder_state;
}
     402:	80 91 4e 21 	lds	r24, 0x214E
     406:	08 95       	ret

00000408 <get_pot_value>:
		manager.pot_values[i] = manager.pot_values[i] + (new_reading - (int16_t) manager.pot_values[i])/POT_FILTER_COEFF;
    }
    
}

uint16_t get_pot_value(uint8_t pot_select, uint16_t output_min, uint16_t output_max){
     408:	6f 92       	push	r6
     40a:	7f 92       	push	r7
     40c:	8f 92       	push	r8
     40e:	9f 92       	push	r9
     410:	af 92       	push	r10
     412:	bf 92       	push	r11
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	00 d0       	rcall	.+0      	; 0x426 <get_pot_value+0x1e>
     426:	00 d0       	rcall	.+0      	; 0x428 <get_pot_value+0x20>
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	4b 01       	movw	r8, r22
     42e:	3a 01       	movw	r6, r20
    //output_max: maximum value to output
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    volatile float temp;
    
    temp = 1.0*manager.pot_values[pot_select]/pot_range;
     430:	e8 2f       	mov	r30, r24
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ee 0f       	add	r30, r30
     436:	ff 1f       	adc	r31, r31
     438:	e2 5b       	subi	r30, 0xB2	; 178
     43a:	fe 4d       	sbci	r31, 0xDE	; 222
     43c:	67 81       	ldd	r22, Z+7	; 0x07
     43e:	70 85       	ldd	r23, Z+8	; 0x08
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	5a e3       	ldi	r21, 0x3A	; 58
     450:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	29 83       	std	Y+1, r18	; 0x01
     45a:	3a 83       	std	Y+2, r19	; 0x02
     45c:	4b 83       	std	Y+3, r20	; 0x03
     45e:	5c 83       	std	Y+4, r21	; 0x04
     460:	54 01       	movw	r10, r8
     462:	cc 24       	eor	r12, r12
     464:	dd 24       	eor	r13, r13
	
	if (ALL_EIGHT_POSITION_SWITCHES && output_max <= 7)
     466:	88 e0       	ldi	r24, 0x08	; 8
     468:	68 16       	cp	r6, r24
     46a:	71 04       	cpc	r7, r1
     46c:	48 f4       	brcc	.+18     	; 0x480 <get_pot_value+0x78>
        temp = temp*(7 - output_min + 1) + output_min;
     46e:	e9 80       	ldd	r14, Y+1	; 0x01
     470:	fa 80       	ldd	r15, Y+2	; 0x02
     472:	0b 81       	ldd	r16, Y+3	; 0x03
     474:	1c 81       	ldd	r17, Y+4	; 0x04
     476:	68 e0       	ldi	r22, 0x08	; 8
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	68 19       	sub	r22, r8
     47c:	79 09       	sbc	r23, r9
     47e:	09 c0       	rjmp	.+18     	; 0x492 <get_pot_value+0x8a>
	else
        temp = temp*(output_max - output_min + 1) + output_min;
     480:	e9 80       	ldd	r14, Y+1	; 0x01
     482:	fa 80       	ldd	r15, Y+2	; 0x02
     484:	0b 81       	ldd	r16, Y+3	; 0x03
     486:	1c 81       	ldd	r17, Y+4	; 0x04
     488:	b3 01       	movw	r22, r6
     48a:	68 19       	sub	r22, r8
     48c:	79 09       	sbc	r23, r9
     48e:	6f 5f       	subi	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     49a:	9b 01       	movw	r18, r22
     49c:	ac 01       	movw	r20, r24
     49e:	c8 01       	movw	r24, r16
     4a0:	b7 01       	movw	r22, r14
     4a2:	0e 94 4b 14 	call	0x2896	; 0x2896 <__mulsf3>
     4a6:	7b 01       	movw	r14, r22
     4a8:	8c 01       	movw	r16, r24
     4aa:	c6 01       	movw	r24, r12
     4ac:	b5 01       	movw	r22, r10
     4ae:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     4b2:	9b 01       	movw	r18, r22
     4b4:	ac 01       	movw	r20, r24
     4b6:	c8 01       	movw	r24, r16
     4b8:	b7 01       	movw	r22, r14
     4ba:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     4be:	9b 01       	movw	r18, r22
     4c0:	ac 01       	movw	r20, r24
     4c2:	29 83       	std	Y+1, r18	; 0x01
     4c4:	3a 83       	std	Y+2, r19	; 0x02
     4c6:	4b 83       	std	Y+3, r20	; 0x03
     4c8:	5c 83       	std	Y+4, r21	; 0x04
		
    if (temp > output_max)
     4ca:	a9 80       	ldd	r10, Y+1	; 0x01
     4cc:	ba 80       	ldd	r11, Y+2	; 0x02
     4ce:	cb 80       	ldd	r12, Y+3	; 0x03
     4d0:	dc 80       	ldd	r13, Y+4	; 0x04
     4d2:	b3 01       	movw	r22, r6
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     4dc:	7b 01       	movw	r14, r22
     4de:	8c 01       	movw	r16, r24
     4e0:	c6 01       	movw	r24, r12
     4e2:	b5 01       	movw	r22, r10
     4e4:	a8 01       	movw	r20, r16
     4e6:	97 01       	movw	r18, r14
     4e8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__gtsf2>
     4ec:	18 16       	cp	r1, r24
     4ee:	24 f4       	brge	.+8      	; 0x4f8 <get_pot_value+0xf0>
        temp = output_max;
     4f0:	e9 82       	std	Y+1, r14	; 0x01
     4f2:	fa 82       	std	Y+2, r15	; 0x02
     4f4:	0b 83       	std	Y+3, r16	; 0x03
     4f6:	1c 83       	std	Y+4, r17	; 0x04
        
    if (temp < output_min)
     4f8:	a9 80       	ldd	r10, Y+1	; 0x01
     4fa:	ba 80       	ldd	r11, Y+2	; 0x02
     4fc:	cb 80       	ldd	r12, Y+3	; 0x03
     4fe:	dc 80       	ldd	r13, Y+4	; 0x04
     500:	b4 01       	movw	r22, r8
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     50a:	7b 01       	movw	r14, r22
     50c:	8c 01       	movw	r16, r24
     50e:	c6 01       	movw	r24, r12
     510:	b5 01       	movw	r22, r10
     512:	a8 01       	movw	r20, r16
     514:	97 01       	movw	r18, r14
     516:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__ltsf2>
     51a:	87 ff       	sbrs	r24, 7
     51c:	04 c0       	rjmp	.+8      	; 0x526 <get_pot_value+0x11e>
        temp = output_min;
     51e:	e9 82       	std	Y+1, r14	; 0x01
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	0b 83       	std	Y+3, r16	; 0x03
     524:	1c 83       	std	Y+4, r17	; 0x04
    
    return (uint16_t) temp;
     526:	69 81       	ldd	r22, Y+1	; 0x01
     528:	7a 81       	ldd	r23, Y+2	; 0x02
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>
}
     532:	cb 01       	movw	r24, r22
     534:	24 96       	adiw	r28, 0x04	; 4
     536:	cd bf       	out	0x3d, r28	; 61
     538:	de bf       	out	0x3e, r29	; 62
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	af 90       	pop	r10
     54e:	9f 90       	pop	r9
     550:	8f 90       	pop	r8
     552:	7f 90       	pop	r7
     554:	6f 90       	pop	r6
     556:	08 95       	ret

00000558 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	fc 01       	movw	r30, r24
     572:	22 e0       	ldi	r18, 0x02	; 2
     574:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     576:	ca e0       	ldi	r28, 0x0A	; 10
     578:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     57a:	73 e0       	ldi	r23, 0x03	; 3
     57c:	c7 2e       	mov	r12, r23
     57e:	d1 2c       	mov	r13, r1
     580:	68 e0       	ldi	r22, 0x08	; 8
     582:	a6 2e       	mov	r10, r22
     584:	b1 2c       	mov	r11, r1
     586:	00 e6       	ldi	r16, 0x60	; 96
     588:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	e5 2e       	mov	r14, r21
     58e:	56 e0       	ldi	r21, 0x06	; 6
     590:	f5 2e       	mov	r15, r21
     592:	40 ef       	ldi	r20, 0xF0	; 240
     594:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     596:	98 e3       	ldi	r25, 0x38	; 56
     598:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     59a:	cf 01       	movw	r24, r30
     59c:	be 01       	movw	r22, r28
     59e:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
     5a2:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     5a4:	30 97       	sbiw	r30, 0x00	; 0
     5a6:	19 f4       	brne	.+6      	; 0x5ae <set_seven_segment_LEDs+0x56>
     5a8:	22 30       	cpi	r18, 0x02	; 2
     5aa:	09 f0       	breq	.+2      	; 0x5ae <set_seven_segment_LEDs+0x56>
            digit = 10;
     5ac:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     5ae:	c9 01       	movw	r24, r18
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
     5b6:	b5 01       	movw	r22, r10
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <set_seven_segment_LEDs+0x66>
     5ba:	66 0f       	add	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	8a 95       	dec	r24
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <set_seven_segment_LEDs+0x62>
     5c2:	d8 01       	movw	r26, r16
     5c4:	16 96       	adiw	r26, 0x06	; 6
     5c6:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     5c8:	d7 01       	movw	r26, r14
     5ca:	16 96       	adiw	r26, 0x06	; 6
     5cc:	9c 92       	st	X, r9
     5ce:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     5d0:	42 95       	swap	r20
     5d2:	40 7f       	andi	r20, 0xF0	; 240
     5d4:	15 96       	adiw	r26, 0x05	; 5
     5d6:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     5d8:	d8 01       	movw	r26, r16
     5da:	15 96       	adiw	r26, 0x05	; 5
     5dc:	8c 92       	st	X, r8
     5de:	15 97       	sbiw	r26, 0x05	; 5
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     5e4:	25 30       	cpi	r18, 0x05	; 5
     5e6:	31 05       	cpc	r19, r1
     5e8:	31 f0       	breq	.+12     	; 0x5f6 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     5ea:	cf 01       	movw	r24, r30
     5ec:	be 01       	movw	r22, r28
     5ee:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
     5f2:	fb 01       	movw	r30, r22
     5f4:	d2 cf       	rjmp	.-92     	; 0x59a <set_seven_segment_LEDs+0x42>
    }
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	08 95       	ret

00000610 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     610:	88 23       	and	r24, r24
     612:	21 f0       	breq	.+8      	; 0x61c <set_LEDs_on+0xc>
        PORTC.OUTCLR = 0x08;
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	e0 e4       	ldi	r30, 0x40	; 64
     618:	f6 e0       	ldi	r31, 0x06	; 6
     61a:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_0)
     61c:	66 23       	and	r22, r22
     61e:	21 f0       	breq	.+8      	; 0x628 <set_LEDs_on+0x18>
        PORTD.OUTSET = 0x04;
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	e0 e6       	ldi	r30, 0x60	; 96
     624:	f6 e0       	ldi	r31, 0x06	; 6
     626:	85 83       	std	Z+5, r24	; 0x05
        
    if (decimal_point_1)
     628:	44 23       	and	r20, r20
     62a:	21 f0       	breq	.+8      	; 0x634 <set_LEDs_on+0x24>
        PORTD.OUTSET = 0x01;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	e0 e6       	ldi	r30, 0x60	; 96
     630:	f6 e0       	ldi	r31, 0x06	; 6
     632:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_2)
     634:	22 23       	and	r18, r18
     636:	21 f0       	breq	.+8      	; 0x640 <set_LEDs_on+0x30>
        PORTD.OUTSET = 0x02;
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	e0 e6       	ldi	r30, 0x60	; 96
     63c:	f6 e0       	ldi	r31, 0x06	; 6
     63e:	85 83       	std	Z+5, r24	; 0x05
     640:	08 95       	ret

00000642 <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     642:	88 23       	and	r24, r24
     644:	21 f0       	breq	.+8      	; 0x64e <set_LEDs_off+0xc>
        PORTC.OUTSET = 0x08;
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	e0 e4       	ldi	r30, 0x40	; 64
     64a:	f6 e0       	ldi	r31, 0x06	; 6
     64c:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_0)
     64e:	66 23       	and	r22, r22
     650:	21 f0       	breq	.+8      	; 0x65a <set_LEDs_off+0x18>
        PORTD.OUTCLR = 0x04;
     652:	84 e0       	ldi	r24, 0x04	; 4
     654:	e0 e6       	ldi	r30, 0x60	; 96
     656:	f6 e0       	ldi	r31, 0x06	; 6
     658:	86 83       	std	Z+6, r24	; 0x06
        
    if (decimal_point_1)
     65a:	44 23       	and	r20, r20
     65c:	21 f0       	breq	.+8      	; 0x666 <set_LEDs_off+0x24>
        PORTD.OUTCLR = 0x01;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	e0 e6       	ldi	r30, 0x60	; 96
     662:	f6 e0       	ldi	r31, 0x06	; 6
     664:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_2)
     666:	22 23       	and	r18, r18
     668:	21 f0       	breq	.+8      	; 0x672 <set_LEDs_off+0x30>
        PORTD.OUTCLR = 0x02;
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	e0 e6       	ldi	r30, 0x60	; 96
     66e:	f6 e0       	ldi	r31, 0x06	; 6
     670:	86 83       	std	Z+6, r24	; 0x06
     672:	08 95       	ret

00000674 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return manager.encoder_switch_state;
}
     674:	80 91 54 21 	lds	r24, 0x2154
     678:	08 95       	ret

0000067a <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return manager.encoder_switch_edge;
}
     67a:	80 91 51 21 	lds	r24, 0x2151
     67e:	08 95       	ret

00000680 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return manager.pushbutton_switch_state;
}
     680:	80 91 52 21 	lds	r24, 0x2152
     684:	08 95       	ret

00000686 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return manager.pushbutton_switch_edge;
}
     686:	80 91 4f 21 	lds	r24, 0x214F
     68a:	08 95       	ret

0000068c <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return manager.toggle_switch_state;
}
     68c:	80 91 53 21 	lds	r24, 0x2153
     690:	08 95       	ret

00000692 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return manager.toggle_switch_edge;
}
     692:	80 91 50 21 	lds	r24, 0x2150
     696:	08 95       	ret

00000698 <initialize_hardware>:

Hardware_Manager* initialize_hardware(){
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
	initialize_hardware_manager();
     69c:	0e 94 de 01 	call	0x3bc	; 0x3bc <initialize_hardware_manager>
        manager.pot_values[i] = 0;
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     6a0:	e0 e4       	ldi	r30, 0x40	; 64
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     6a4:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     6a6:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     6a8:	c0 e5       	ldi	r28, 0x50	; 80
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
     6ac:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     6ae:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     6b0:	a0 e5       	ldi	r26, 0x50	; 80
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     6b4:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     6b6:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     6b8:	98 ed       	ldi	r25, 0xD8	; 216
     6ba:	15 c0       	rjmp	.+42     	; 0x6e6 <initialize_hardware+0x4e>
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     6bc:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     6be:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     6c0:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     6c2:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     6c6:	70 91 51 00 	lds	r23, 0x0051
     6ca:	73 ff       	sbrs	r23, 3
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <initialize_hardware+0x2e>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     6ce:	15 96       	adiw	r26, 0x05	; 5
     6d0:	3c 93       	st	X, r19
     6d2:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     6d4:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     6d8:	70 91 51 00 	lds	r23, 0x0051
     6dc:	74 ff       	sbrs	r23, 4
     6de:	fc cf       	rjmp	.-8      	; 0x6d8 <initialize_hardware+0x40>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     6e0:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     6e2:	80 93 40 00 	sts	0x0040, r24
        manager.pot_values[i] = 0;
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     6e6:	70 91 40 00 	lds	r23, 0x0040
     6ea:	74 30       	cpi	r23, 0x04	; 4
     6ec:	39 f7       	brne	.-50     	; 0x6bc <initialize_hardware+0x24>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     6ee:	f8 94       	cli
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     6f0:	a0 e6       	ldi	r26, 0x60	; 96
     6f2:	b6 e0       	ldi	r27, 0x06	; 6
     6f4:	80 e8       	ldi	r24, 0x80	; 128
     6f6:	15 96       	adiw	r26, 0x05	; 5
     6f8:	8c 93       	st	X, r24
     6fa:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     6fc:	90 e4       	ldi	r25, 0x40	; 64
     6fe:	12 96       	adiw	r26, 0x02	; 2
     700:	9c 93       	st	X, r25
     702:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     704:	11 96       	adiw	r26, 0x01	; 1
     706:	8c 93       	st	X, r24
     708:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     70a:	e0 eb       	ldi	r30, 0xB0	; 176
     70c:	f9 e0       	ldi	r31, 0x09	; 9
     70e:	88 e1       	ldi	r24, 0x18	; 24
     710:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     712:	90 e2       	ldi	r25, 0x20	; 32
     714:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     716:	33 e0       	ldi	r19, 0x03	; 3
     718:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     71a:	8f e2       	ldi	r24, 0x2F	; 47
     71c:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     71e:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     720:	80 91 a2 00 	lds	r24, 0x00A2
     724:	87 68       	ori	r24, 0x87	; 135
     726:	e0 ea       	ldi	r30, 0xA0	; 160
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     72c:	78 94       	sei
turn_state get_encoder(){
    return manager.encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     72e:	c0 e0       	ldi	r28, 0x00	; 0
     730:	d6 e0       	ldi	r29, 0x06	; 6
     732:	89 ef       	ldi	r24, 0xF9	; 249
     734:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     736:	e0 e0       	ldi	r30, 0x00	; 0
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x10;          //ADC to signed mode
     73e:	80 e1       	ldi	r24, 0x10	; 16
     740:	81 83       	std	Z+1, r24	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     742:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     744:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     74a:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     74c:	80 91 00 02 	lds	r24, 0x0200
     750:	81 60       	ori	r24, 0x01	; 1
     752:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     756:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     758:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     75a:	12 a2       	std	Z+34, r1	; 0x22
    if (decimal_point_2)
        PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     75c:	40 e2       	ldi	r20, 0x20	; 32
     75e:	56 e0       	ldi	r21, 0x06	; 6
     760:	8c e0       	ldi	r24, 0x0C	; 12
     762:	fa 01       	movw	r30, r20
     764:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     766:	28 e0       	ldi	r18, 0x08	; 8
     768:	80 e8       	ldi	r24, 0x80	; 128
     76a:	96 e0       	ldi	r25, 0x06	; 6
     76c:	fc 01       	movw	r30, r24
     76e:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     770:	fa 01       	movw	r30, r20
     772:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     778:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     77a:	e0 e4       	ldi	r30, 0x40	; 64
     77c:	f6 e0       	ldi	r31, 0x06	; 6
     77e:	88 ef       	ldi	r24, 0xF8	; 248
     780:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     782:	8f e3       	ldi	r24, 0x3F	; 63
     784:	11 96       	adiw	r26, 0x01	; 1
     786:	8c 93       	st	X, r24
     788:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     78a:	88 e3       	ldi	r24, 0x38	; 56
     78c:	15 96       	adiw	r26, 0x05	; 5
     78e:	8c 93       	st	X, r24
     790:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     792:	90 ef       	ldi	r25, 0xF0	; 240
     794:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     796:	16 96       	adiw	r26, 0x06	; 6
     798:	8c 93       	st	X, r24
     79a:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     79c:	87 e0       	ldi	r24, 0x07	; 7
     79e:	16 96       	adiw	r26, 0x06	; 6
     7a0:	8c 93       	st	X, r24
     7a2:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     7a4:	25 83       	std	Z+5, r18	; 0x05
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
	return &manager;
}
     7a6:	8e e4       	ldi	r24, 0x4E	; 78
     7a8:	91 e2       	ldi	r25, 0x21	; 33
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <read_hardware>:

void read_hardware(){
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <read_hardware+0x20>
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     7d6:	80 91 88 06 	lds	r24, 0x0688
     7da:	86 95       	lsr	r24
     7dc:	86 95       	lsr	r24
     7de:	86 95       	lsr	r24
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <read_hardware+0x36>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     7e6:	80 91 28 06 	lds	r24, 0x0628
     7ea:	86 95       	lsr	r24
     7ec:	86 95       	lsr	r24
     7ee:	80 fd       	sbrc	r24, 0
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <read_hardware+0x46>
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <read_hardware+0x48>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	c8 2e       	mov	r12, r24
     7fa:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     7fc:	80 91 28 06 	lds	r24, 0x0628
     800:	86 95       	lsr	r24
     802:	86 95       	lsr	r24
     804:	86 95       	lsr	r24
     806:	80 fd       	sbrc	r24, 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <read_hardware+0x5e>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	01 c0       	rjmp	.+2      	; 0x810 <read_hardware+0x60>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	c8 2a       	or	r12, r24
     812:	c0 92 64 21 	sts	0x2164, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     816:	60 91 63 21 	lds	r22, 0x2163
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	e0 90 62 21 	lds	r14, 0x2162
     820:	ef e5       	ldi	r30, 0x5F	; 95
     822:	f1 e2       	ldi	r31, 0x21	; 33
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	4c 2d       	mov	r20, r12
     82a:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     830:	88 2e       	mov	r8, r24
     832:	8a 01       	movw	r16, r20
     834:	08 2e       	mov	r0, r24
     836:	02 c0       	rjmp	.+4      	; 0x83c <read_hardware+0x8c>
     838:	15 95       	asr	r17
     83a:	07 95       	ror	r16
     83c:	0a 94       	dec	r0
     83e:	e2 f7       	brpl	.-8      	; 0x838 <read_hardware+0x88>
     840:	db 01       	movw	r26, r22
     842:	08 2e       	mov	r0, r24
     844:	02 c0       	rjmp	.+4      	; 0x84a <read_hardware+0x9a>
     846:	b5 95       	asr	r27
     848:	a7 95       	ror	r26
     84a:	0a 94       	dec	r0
     84c:	e2 f7       	brpl	.-8      	; 0x846 <read_hardware+0x96>
     84e:	0a 17       	cp	r16, r26
     850:	1b 07       	cpc	r17, r27
     852:	21 f4       	brne	.+8      	; 0x85c <read_hardware+0xac>
            switch_history_counts[i]++;                            //increment count        
     854:	a0 81       	ld	r26, Z
     856:	af 5f       	subi	r26, 0xFF	; 255
     858:	a0 83       	st	Z, r26
     85a:	01 c0       	rjmp	.+2      	; 0x85e <read_hardware+0xae>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     85c:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     85e:	a0 81       	ld	r26, Z
     860:	a9 30       	cpi	r26, 0x09	; 9
     862:	60 f0       	brcs	.+24     	; 0x87c <read_hardware+0xcc>
            final_switch_states &= ~(1 << i);
     864:	d9 01       	movw	r26, r18
     866:	02 c0       	rjmp	.+4      	; 0x86c <read_hardware+0xbc>
     868:	aa 0f       	add	r26, r26
     86a:	bb 1f       	adc	r27, r27
     86c:	8a 94       	dec	r8
     86e:	e2 f7       	brpl	.-8      	; 0x868 <read_hardware+0xb8>
     870:	ba 2f       	mov	r27, r26
     872:	b0 95       	com	r27
     874:	eb 22       	and	r14, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     876:	ac 21       	and	r26, r12
     878:	ea 2a       	or	r14, r26
            switch_history_counts[i] = 0;                          //and reset count
     87a:	10 82       	st	Z, r1
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     880:	83 30       	cpi	r24, 0x03	; 3
     882:	91 05       	cpc	r25, r1
     884:	a9 f6       	brne	.-86     	; 0x830 <read_hardware+0x80>
     886:	e0 92 62 21 	sts	0x2162, r14
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     88a:	c0 92 63 21 	sts	0x2163, r12
     88e:	80 91 53 21 	lds	r24, 0x2153
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     892:	e0 fe       	sbrs	r14, 0
     894:	0c c0       	rjmp	.+24     	; 0x8ae <read_hardware+0xfe>
        if (manager.toggle_switch_state)                //if toggle WAS on
     896:	88 23       	and	r24, r24
     898:	19 f0       	breq	.+6      	; 0x8a0 <read_hardware+0xf0>
            manager.toggle_switch_edge = EDGE_NONE;     //no edge
     89a:	10 92 50 21 	sts	0x2150, r1
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <read_hardware+0xf6>
        else                                    //else (toggle WAS off)
            manager.toggle_switch_edge = EDGE_RISE;     //new on
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 50 21 	sts	0x2150, r24
        manager.toggle_switch_state = 1;                //set current value
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 53 21 	sts	0x2153, r24
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <read_hardware+0x112>
    }        
    else{                                       //if toggle IS off
        if (manager.toggle_switch_state)                //if toggle WAS on
     8ae:	88 23       	and	r24, r24
     8b0:	21 f0       	breq	.+8      	; 0x8ba <read_hardware+0x10a>
            manager.toggle_switch_edge = EDGE_FALL;     //new off
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 93 50 21 	sts	0x2150, r24
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <read_hardware+0x10e>
        else                                    //else (toggle WAS off)
            manager.toggle_switch_edge = EDGE_NONE;     //no edge
     8ba:	10 92 50 21 	sts	0x2150, r1
        manager.toggle_switch_state = 0;                //set current value
     8be:	10 92 53 21 	sts	0x2153, r1
     8c2:	80 91 52 21 	lds	r24, 0x2152
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     8c6:	e1 fe       	sbrs	r14, 1
     8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <read_hardware+0x132>
        if (manager.pushbutton_switch_state)                //if pushbutton WAS on
     8ca:	88 23       	and	r24, r24
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <read_hardware+0x124>
            manager.pushbutton_switch_edge = EDGE_NONE;     //no edge
     8ce:	10 92 4f 21 	sts	0x214F, r1
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <read_hardware+0x12a>
        else                                        //else (pushbutton WAS off)
            manager.pushbutton_switch_edge = EDGE_RISE;     //new on
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 4f 21 	sts	0x214F, r24
        manager.pushbutton_switch_state = 1;                //set current value
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 52 21 	sts	0x2152, r24
     8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <read_hardware+0x146>
    }        
    else{                                           //if pushbutton IS off
        if (manager.pushbutton_switch_state)                //if pushbutton WAS on
     8e2:	88 23       	and	r24, r24
     8e4:	21 f0       	breq	.+8      	; 0x8ee <read_hardware+0x13e>
            manager.pushbutton_switch_edge = EDGE_FALL;     //new off
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 93 4f 21 	sts	0x214F, r24
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <read_hardware+0x142>
        else                                        //else (pushbutton WAS off)
            manager.pushbutton_switch_edge = EDGE_NONE;     //no edge
     8ee:	10 92 4f 21 	sts	0x214F, r1
        manager.pushbutton_switch_state = 0;                //set current value
     8f2:	10 92 52 21 	sts	0x2152, r1
     8f6:	80 91 54 21 	lds	r24, 0x2154
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     8fa:	e2 fe       	sbrs	r14, 2
     8fc:	0c c0       	rjmp	.+24     	; 0x916 <read_hardware+0x166>
        if (manager.encoder_switch_state)                //if encoder WAS on
     8fe:	88 23       	and	r24, r24
     900:	19 f0       	breq	.+6      	; 0x908 <read_hardware+0x158>
            manager.encoder_switch_edge = EDGE_NONE;     //no edge
     902:	10 92 51 21 	sts	0x2151, r1
     906:	03 c0       	rjmp	.+6      	; 0x90e <read_hardware+0x15e>
        else                                     //else (encoder WAS off)
            manager.encoder_switch_edge = EDGE_RISE;     //new on
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 51 21 	sts	0x2151, r24
        manager.encoder_switch_state = 1;                //set current value
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 54 21 	sts	0x2154, r24
     914:	0a c0       	rjmp	.+20     	; 0x92a <read_hardware+0x17a>
    }        
    else{                                        //if encoder IS off
        if (manager.encoder_switch_state)                //if encoder WAS on
     916:	88 23       	and	r24, r24
     918:	21 f0       	breq	.+8      	; 0x922 <read_hardware+0x172>
            manager.encoder_switch_edge = EDGE_FALL;     //new off
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	80 93 51 21 	sts	0x2151, r24
     920:	02 c0       	rjmp	.+4      	; 0x926 <read_hardware+0x176>
        else                                     //else (encoder WAS off)
            manager.encoder_switch_edge = EDGE_NONE;     //no edge
     922:	10 92 51 21 	sts	0x2151, r1
        manager.encoder_switch_state = 0;                //set current value
     926:	10 92 54 21 	sts	0x2154, r1
    volatile uint8_t i;
	volatile int16_t new_reading;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     92a:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     92c:	e1 2c       	mov	r14, r1
     92e:	42 e0       	ldi	r20, 0x02	; 2
     930:	f4 2e       	mov	r15, r20
     932:	73 c0       	rjmp	.+230    	; 0xa1a <read_hardware+0x26a>
     934:	80 91 23 02 	lds	r24, 0x0223
     938:	81 60       	ori	r24, 0x01	; 1
     93a:	f7 01       	movw	r30, r14
     93c:	83 a3       	std	Z+35, r24	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     93e:	80 91 21 02 	lds	r24, 0x0221
     942:	87 7c       	andi	r24, 0xC7	; 199
     944:	81 a3       	std	Z+33, r24	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     946:	20 91 21 02 	lds	r18, 0x0221
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	03 96       	adiw	r24, 0x03	; 3
     950:	33 e0       	ldi	r19, 0x03	; 3
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	3a 95       	dec	r19
     958:	e1 f7       	brne	.-8      	; 0x952 <read_hardware+0x1a2>
     95a:	28 2b       	or	r18, r24
     95c:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     95e:	80 91 20 02 	lds	r24, 0x0220
     962:	80 68       	ori	r24, 0x80	; 128
     964:	80 a3       	std	Z+32, r24	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     966:	80 91 23 02 	lds	r24, 0x0223
     96a:	80 ff       	sbrs	r24, 0
     96c:	fc cf       	rjmp	.-8      	; 0x966 <read_hardware+0x1b6>

        //load ADC value into the new variable
        new_reading = ADCA.CH0.RESL;
     96e:	80 91 24 02 	lds	r24, 0x0224
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	9b 83       	std	Y+3, r25	; 0x03
        new_reading |= ADCA.CH0.RESH << 8;
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	20 91 25 02 	lds	r18, 0x0225
     980:	52 2e       	mov	r5, r18
     982:	44 24       	eor	r4, r4
     984:	84 29       	or	r24, r4
     986:	95 29       	or	r25, r5
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	9b 83       	std	Y+3, r25	; 0x03
		
		if (new_reading < POT_MIN)
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	9b 81       	ldd	r25, Y+3	; 0x03
     990:	97 ff       	sbrs	r25, 7
     992:	03 c0       	rjmp	.+6      	; 0x99a <read_hardware+0x1ea>
            new_reading = POT_MIN;
     994:	1a 82       	std	Y+2, r1	; 0x02
     996:	1b 82       	std	Y+3, r1	; 0x03
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <read_hardware+0x1f2>
        else
            new_reading = new_reading - POT_MIN;
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	9b 81       	ldd	r25, Y+3	; 0x03
     99e:	8a 83       	std	Y+2, r24	; 0x02
     9a0:	9b 83       	std	Y+3, r25	; 0x03
		
		//LPF on new value to reduce noise
		manager.pot_values[i] = manager.pot_values[i] + (new_reading - (int16_t) manager.pot_values[i])/POT_FILTER_COEFF;
     9a2:	09 81       	ldd	r16, Y+1	; 0x01
     9a4:	e9 81       	ldd	r30, Y+1	; 0x01
     9a6:	ca 80       	ldd	r12, Y+2	; 0x02
     9a8:	db 80       	ldd	r13, Y+3	; 0x03
     9aa:	79 80       	ldd	r7, Y+1	; 0x01
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	00 0f       	add	r16, r16
     9b0:	11 1f       	adc	r17, r17
     9b2:	02 5b       	subi	r16, 0xB2	; 178
     9b4:	1e 4d       	sbci	r17, 0xDE	; 222
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	e2 5b       	subi	r30, 0xB2	; 178
     9be:	fe 4d       	sbci	r31, 0xDE	; 222
     9c0:	67 81       	ldd	r22, Z+7	; 0x07
     9c2:	70 85       	ldd	r23, Z+8	; 0x08
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatunsisf>
     9cc:	4b 01       	movw	r8, r22
     9ce:	5c 01       	movw	r10, r24
     9d0:	e7 2d       	mov	r30, r7
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e2 5b       	subi	r30, 0xB2	; 178
     9da:	fe 4d       	sbci	r31, 0xDE	; 222
     9dc:	87 81       	ldd	r24, Z+7	; 0x07
     9de:	90 85       	ldd	r25, Z+8	; 0x08
     9e0:	c8 1a       	sub	r12, r24
     9e2:	d9 0a       	sbc	r13, r25
     9e4:	b6 01       	movw	r22, r12
     9e6:	88 27       	eor	r24, r24
     9e8:	77 fd       	sbrc	r23, 7
     9ea:	80 95       	com	r24
     9ec:	98 2f       	mov	r25, r24
     9ee:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__floatsisf>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 ea       	ldi	r20, 0xA0	; 160
     9f8:	51 e4       	ldi	r21, 0x41	; 65
     9fa:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__divsf3>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	c5 01       	movw	r24, r10
     a04:	b4 01       	movw	r22, r8
     a06:	0e 94 ed 13 	call	0x27da	; 0x27da <__addsf3>
     a0a:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fixunssfsi>
     a0e:	f8 01       	movw	r30, r16
     a10:	67 83       	std	Z+7, r22	; 0x07
     a12:	70 87       	std	Z+8, r23	; 0x08
    volatile uint8_t i;
	volatile int16_t new_reading;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	85 30       	cpi	r24, 0x05	; 5
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <read_hardware+0x272>
     a20:	89 cf       	rjmp	.-238    	; 0x934 <read_hardware+0x184>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     a22:	80 91 28 06 	lds	r24, 0x0628
     a26:	41 e0       	ldi	r20, 0x01	; 1
     a28:	80 fd       	sbrc	r24, 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     a2c:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     a30:	84 2f       	mov	r24, r20
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	20 91 65 21 	lds	r18, 0x2165
     a38:	51 e0       	ldi	r21, 0x01	; 1
     a3a:	25 27       	eor	r18, r21
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	82 23       	and	r24, r18
     a40:	93 23       	and	r25, r19
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	59 f0       	breq	.+22     	; 0xa5c <read_hardware+0x2ac>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     a46:	86 2f       	mov	r24, r22
     a48:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     a4a:	80 fd       	sbrc	r24, 0
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <read_hardware+0x2a4>
            manager.encoder_state = TURN_CW;    //CW        
     a4e:	50 93 4e 21 	sts	0x214E, r21
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <read_hardware+0x2b0>
        else
            manager.encoder_state = TURN_CCW;    //CCW
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	80 93 4e 21 	sts	0x214E, r24
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <read_hardware+0x2b0>
    }
    else
        manager.encoder_state = TURN_NONE;   
     a5c:	10 92 4e 21 	sts	0x214E, r1
    last_a = current_a;
     a60:	40 93 65 21 	sts	0x2165, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     a64:	23 96       	adiw	r28, 0x03	; 3
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	7f 90       	pop	r7
     a84:	5f 90       	pop	r5
     a86:	4f 90       	pop	r4
     a88:	08 95       	ret

00000a8a <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
    
    //set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     a8a:	08 95       	ret

00000a8c <__vector_91>:

static Sequencer sequencer;
static MidiDevice midi_device;
static Hardware_Manager* manager_ptr;

ISR(USARTD1_RXC_vect){
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
    midi_device_input(&midi_device,1,&(USARTD1.DATA));
     ab2:	c2 e9       	ldi	r28, 0x92	; 146
     ab4:	d2 e2       	ldi	r29, 0x22	; 34
     ab6:	ce 01       	movw	r24, r28
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	40 eb       	ldi	r20, 0xB0	; 176
     abc:	59 e0       	ldi	r21, 0x09	; 9
     abe:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_process(&midi_device);
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 43 12 	call	0x2486	; 0x2486 <midi_device_process>
}
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <__vector_17>:

//interrupt to start the next note
ISR(TCC0_CCB_vect){
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(&sequencer, 0);
     b10:	88 e6       	ldi	r24, 0x68	; 104
     b12:	91 e2       	ldi	r25, 0x21	; 33
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	0e 94 89 0a 	call	0x1512	; 0x1512 <continue_sequencer>
}
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(&sequencer, 0);
     b5e:	88 e6       	ldi	r24, 0x68	; 104
     b60:	91 e2       	ldi	r25, 0x21	; 33
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	0e 94 47 0c 	call	0x188e	; 0x188e <stop_sequencer>
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <fake_midi_noteon_input>:


void fake_midi_noteon_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <fake_midi_noteon_input+0xa>
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	8c 01       	movw	r16, r24
     b9c:	6a 83       	std	Y+2, r22	; 0x02
     b9e:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteon_byte1 = 144;
     ba0:	80 e9       	ldi	r24, 0x90	; 144
     ba2:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteon_byte1);
     ba4:	c8 01       	movw	r24, r16
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	ae 01       	movw	r20, r28
     baa:	4f 5f       	subi	r20, 0xFF	; 255
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     bb2:	c8 01       	movw	r24, r16
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	ae 01       	movw	r20, r28
     bb8:	4e 5f       	subi	r20, 0xFE	; 254
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     bc0:	c8 01       	movw	r24, r16
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	ae 01       	movw	r20, r28
     bc6:	4d 5f       	subi	r20, 0xFD	; 253
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_process(midi_device);
     bce:	c8 01       	movw	r24, r16
     bd0:	0e 94 43 12 	call	0x2486	; 0x2486 <midi_device_process>
}
     bd4:	23 96       	adiw	r28, 0x03	; 3
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <fake_midi_noteff_input>:

void fake_midi_noteff_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <fake_midi_noteff_input+0xa>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	8c 01       	movw	r16, r24
     bf6:	6a 83       	std	Y+2, r22	; 0x02
     bf8:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteoff_byte1 = 128;
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteoff_byte1);
     bfe:	c8 01       	movw	r24, r16
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	ae 01       	movw	r20, r28
     c04:	4f 5f       	subi	r20, 0xFF	; 255
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     c0c:	c8 01       	movw	r24, r16
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	ae 01       	movw	r20, r28
     c12:	4e 5f       	subi	r20, 0xFE	; 254
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     c1a:	c8 01       	movw	r24, r16
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	ae 01       	movw	r20, r28
     c20:	4d 5f       	subi	r20, 0xFD	; 253
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	0e 94 bc 10 	call	0x2178	; 0x2178 <midi_device_input>
    midi_device_process(midi_device);
     c28:	c8 01       	movw	r24, r16
     c2a:	0e 94 43 12 	call	0x2486	; 0x2486 <midi_device_process>
}
     c2e:	23 96       	adiw	r28, 0x03	; 3
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <main>:

int main(void) {
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
    const uint16_t initial_BPM = 120;
	
	uint16_t BPM_add;
	
    manager_ptr = initialize_hardware();
     c42:	0e 94 4c 03 	call	0x698	; 0x698 <initialize_hardware>
     c46:	80 93 66 21 	sts	0x2166, r24
     c4a:	90 93 67 21 	sts	0x2167, r25
	
    initialize_sequencer(&sequencer);
     c4e:	88 e6       	ldi	r24, 0x68	; 104
     c50:	91 e2       	ldi	r25, 0x21	; 33
     c52:	0e 94 43 0a 	call	0x1486	; 0x1486 <initialize_sequencer>
	
	initialize_serial_midi(&midi_device, &sequencer);
     c56:	82 e9       	ldi	r24, 0x92	; 146
     c58:	92 e2       	ldi	r25, 0x22	; 34
     c5a:	68 e6       	ldi	r22, 0x68	; 104
     c5c:	71 e2       	ldi	r23, 0x21	; 33
     c5e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <initialize_serial_midi>
	
    initialize_beat_clock(initial_BPM);
     c62:	88 e7       	ldi	r24, 0x78	; 120
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
	
    set_seven_segment_LEDs(get_BPM());
     c6a:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     c6e:	0e 94 ac 02 	call	0x558	; 0x558 <set_seven_segment_LEDs>
	
	read_hardware();
     c72:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <read_hardware>
	
	if (get_toggle_switch_state())
     c76:	0e 94 46 03 	call	0x68c	; 0x68c <get_toggle_switch_state>
     c7a:	88 23       	and	r24, r24
     c7c:	21 f0       	breq	.+8      	; 0xc86 <main+0x48>
	    enable_sequencer(&sequencer);
     c7e:	88 e6       	ldi	r24, 0x68	; 104
     c80:	91 e2       	ldi	r25, 0x21	; 33
     c82:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <enable_sequencer>
		}				    
    }*/
	
    
    while(1){
        read_hardware();
     c86:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <read_hardware>
		
		if (get_encoder_switch_state())
     c8a:	0e 94 3a 03 	call	0x674	; 0x674 <get_encoder_switch_state>
     c8e:	88 23       	and	r24, r24
     c90:	19 f0       	breq	.+6      	; 0xc98 <main+0x5a>
		    BPM_add = 5;
     c92:	c5 e0       	ldi	r28, 0x05	; 5
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <main+0x5e>
		else
		    BPM_add = 1;
     c98:	c1 e0       	ldi	r28, 0x01	; 1
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
        
        if (get_encoder() == TURN_CW){
     c9c:	0e 94 01 02 	call	0x402	; 0x402 <get_encoder>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	21 f4       	brne	.+8      	; 0xcac <main+0x6e>
            if (increment_BPM(BPM_add)){
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 a3 01 	call	0x346	; 0x346 <increment_BPM>
     caa:	07 c0       	rjmp	.+14     	; 0xcba <main+0x7c>
			    bpm_change_postprocess(&sequencer);
                set_seven_segment_LEDs(get_BPM());
			}				
        }
        else if (get_encoder() == TURN_CCW){
     cac:	0e 94 01 02 	call	0x402	; 0x402 <get_encoder>
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	69 f4       	brne	.+26     	; 0xcce <main+0x90>
            if (decrement_BPM(BPM_add)){
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 c1 01 	call	0x382	; 0x382 <decrement_BPM>
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	41 f0       	breq	.+16     	; 0xcce <main+0x90>
			    bpm_change_postprocess(&sequencer);
     cbe:	88 e6       	ldi	r24, 0x68	; 104
     cc0:	91 e2       	ldi	r25, 0x21	; 33
     cc2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <bpm_change_postprocess>
                set_seven_segment_LEDs(get_BPM());
     cc6:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     cca:	0e 94 ac 02 	call	0x558	; 0x558 <set_seven_segment_LEDs>
			}				
        }
        
        if (get_pushbutton_switch_edge() == EDGE_RISE)
     cce:	0e 94 43 03 	call	0x686	; 0x686 <get_pushbutton_switch_edge>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	29 f4       	brne	.+10     	; 0xce0 <main+0xa2>
            continue_sequencer(&sequencer, 1);
     cd6:	88 e6       	ldi	r24, 0x68	; 104
     cd8:	91 e2       	ldi	r25, 0x21	; 33
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	0e 94 89 0a 	call	0x1512	; 0x1512 <continue_sequencer>
			
		if (get_toggle_switch_edge() == EDGE_FALL)
     ce0:	0e 94 49 03 	call	0x692	; 0x692 <get_toggle_switch_edge>
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <main+0xb2>
            disable_sequencer(&sequencer);
     ce8:	88 e6       	ldi	r24, 0x68	; 104
     cea:	91 e2       	ldi	r25, 0x21	; 33
     cec:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <disable_sequencer>
			
		if (get_toggle_switch_edge() == EDGE_RISE)
     cf0:	0e 94 49 03 	call	0x692	; 0x692 <get_toggle_switch_edge>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	39 f6       	brne	.-114    	; 0xc86 <main+0x48>
     cf8:	c2 cf       	rjmp	.-124    	; 0xc7e <main+0x40>

00000cfa <initialize_note_list>:
    note->previous_note_by_trigger = NULL;
}

//Reset all data in the note list
//Reset all data in each note of the list 
void initialize_note_list(NoteList* note_list){
     cfa:	fc 01       	movw	r30, r24
    uint8_t i;

    note_list->length = 0;
     cfc:	10 82       	st	Z, r1
    note_list->head_pitch = NULL;
     cfe:	dc 01       	movw	r26, r24
     d00:	af 54       	subi	r26, 0x4F	; 79
     d02:	bf 4f       	sbci	r27, 0xFF	; 255
     d04:	1d 92       	st	X+, r1
     d06:	1c 92       	st	X, r1
    note_list->tail_pitch = NULL;
     d08:	dc 01       	movw	r26, r24
     d0a:	ad 54       	subi	r26, 0x4D	; 77
     d0c:	bf 4f       	sbci	r27, 0xFF	; 255
     d0e:	1d 92       	st	X+, r1
     d10:	1c 92       	st	X, r1
    note_list->head_trigger = NULL;
     d12:	dc 01       	movw	r26, r24
     d14:	ab 54       	subi	r26, 0x4B	; 75
     d16:	bf 4f       	sbci	r27, 0xFF	; 255
     d18:	1d 92       	st	X+, r1
     d1a:	1c 92       	st	X, r1
    note_list->tail_trigger = NULL;
     d1c:	dc 01       	movw	r26, r24
     d1e:	a9 54       	subi	r26, 0x49	; 73
     d20:	bf 4f       	sbci	r27, 0xFF	; 255
     d22:	1d 92       	st	X+, r1
     d24:	1c 92       	st	X, r1
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	80 e1       	ldi	r24, 0x10	; 16
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     d2a:	12 82       	std	Z+2, r1	; 0x02
    note->velocity = 0;
     d2c:	13 82       	std	Z+3, r1	; 0x03
    note->status = 0;
     d2e:	11 82       	std	Z+1, r1	; 0x01
    note->next_note_by_pitch = NULL;
     d30:	14 82       	std	Z+4, r1	; 0x04
     d32:	15 82       	std	Z+5, r1	; 0x05
    note->previous_note_by_pitch = NULL;
     d34:	16 82       	std	Z+6, r1	; 0x06
     d36:	17 82       	std	Z+7, r1	; 0x07
    note->next_note_by_trigger = NULL;
     d38:	10 86       	std	Z+8, r1	; 0x08
     d3a:	11 86       	std	Z+9, r1	; 0x09
    note->previous_note_by_trigger = NULL;
     d3c:	12 86       	std	Z+10, r1	; 0x0a
     d3e:	13 86       	std	Z+11, r1	; 0x0b
     d40:	81 50       	subi	r24, 0x01	; 1
     d42:	3b 96       	adiw	r30, 0x0b	; 11
    note_list->head_pitch = NULL;
    note_list->tail_pitch = NULL;
    note_list->head_trigger = NULL;
    note_list->tail_trigger = NULL;

    for(i = 0; i<MAX_LIST_NOTES; i++)
     d44:	88 23       	and	r24, r24
     d46:	89 f7       	brne	.-30     	; 0xd2a <initialize_note_list+0x30>
        free_note(&(note_list->note_bank[i]));
}
     d48:	08 95       	ret

00000d4a <remove_note_by_pitch>:
}

//Search for note by pitch in the note list
//If it is found, adjust surrounding pointers
//And remove and free the note
bool remove_note_by_pitch(NoteList* note_list, uint8_t pitch){
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     d4e:	fc 01       	movw	r30, r24
     d50:	ef 54       	subi	r30, 0x4F	; 79
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	01 90       	ld	r0, Z+
     d56:	f0 81       	ld	r31, Z
     d58:	e0 2d       	mov	r30, r0
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <remove_note_by_pitch+0x1e>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     d5c:	21 81       	ldd	r18, Z+1	; 0x01
     d5e:	26 17       	cp	r18, r22
     d60:	30 f4       	brcc	.+12     	; 0xd6e <remove_note_by_pitch+0x24>
            break;

        target_note = target_note->next_note_by_pitch;
     d62:	03 80       	ldd	r0, Z+3	; 0x03
     d64:	f4 81       	ldd	r31, Z+4	; 0x04
     d66:	e0 2d       	mov	r30, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     d68:	30 97       	sbiw	r30, 0x00	; 0
     d6a:	c1 f7       	brne	.-16     	; 0xd5c <remove_note_by_pitch+0x12>
     d6c:	51 c0       	rjmp	.+162    	; 0xe10 <remove_note_by_pitch+0xc6>
    //note not found (reached the end of the note list)
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
     d6e:	26 17       	cp	r18, r22
     d70:	09 f0       	breq	.+2      	; 0xd74 <remove_note_by_pitch+0x2a>
     d72:	4e c0       	rjmp	.+156    	; 0xe10 <remove_note_by_pitch+0xc6>
        return 0;
        
    //otherwise, the note was found and ready to be removed
    note_list->length += -1;
     d74:	dc 01       	movw	r26, r24
     d76:	2c 91       	ld	r18, X
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	2c 93       	st	X, r18
    
    //check for empty list
    if (note_list->length == 0){
     d7c:	22 23       	and	r18, r18
     d7e:	19 f4       	brne	.+6      	; 0xd86 <remove_note_by_pitch+0x3c>
        initialize_note_list(note_list);
     d80:	0e 94 7d 06 	call	0xcfa	; 0xcfa <initialize_note_list>
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <remove_note_by_pitch+0xc2>
    }
    
    //adjust surrounding pointers
    //set new heads and tails if necessary
    
    if (dead_note->previous_note_by_pitch)
     d86:	a5 81       	ldd	r26, Z+5	; 0x05
     d88:	b6 81       	ldd	r27, Z+6	; 0x06
     d8a:	23 81       	ldd	r18, Z+3	; 0x03
     d8c:	34 81       	ldd	r19, Z+4	; 0x04
     d8e:	10 97       	sbiw	r26, 0x00	; 0
     d90:	29 f0       	breq	.+10     	; 0xd9c <remove_note_by_pitch+0x52>
        dead_note->previous_note_by_pitch->next_note_by_pitch = dead_note->next_note_by_pitch;
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	2d 93       	st	X+, r18
     d96:	3c 93       	st	X, r19
     d98:	14 97       	sbiw	r26, 0x04	; 4
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <remove_note_by_pitch+0x5c>
    else
        note_list->head_pitch = dead_note->next_note_by_pitch;
     d9c:	ec 01       	movw	r28, r24
     d9e:	cf 54       	subi	r28, 0x4F	; 79
     da0:	df 4f       	sbci	r29, 0xFF	; 255
     da2:	28 83       	st	Y, r18
     da4:	39 83       	std	Y+1, r19	; 0x01
    
    if (dead_note->next_note_by_pitch)
     da6:	c3 81       	ldd	r28, Z+3	; 0x03
     da8:	d4 81       	ldd	r29, Z+4	; 0x04
     daa:	20 97       	sbiw	r28, 0x00	; 0
     dac:	19 f0       	breq	.+6      	; 0xdb4 <remove_note_by_pitch+0x6a>
        dead_note->next_note_by_pitch->previous_note_by_pitch = dead_note->previous_note_by_pitch;
     dae:	ad 83       	std	Y+5, r26	; 0x05
     db0:	be 83       	std	Y+6, r27	; 0x06
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <remove_note_by_pitch+0x74>
    else
        note_list->tail_pitch = dead_note->previous_note_by_pitch;
     db4:	ec 01       	movw	r28, r24
     db6:	cd 54       	subi	r28, 0x4D	; 77
     db8:	df 4f       	sbci	r29, 0xFF	; 255
     dba:	a8 83       	st	Y, r26
     dbc:	b9 83       	std	Y+1, r27	; 0x01
        
    if (dead_note->previous_note_by_trigger)
     dbe:	a1 85       	ldd	r26, Z+9	; 0x09
     dc0:	b2 85       	ldd	r27, Z+10	; 0x0a
     dc2:	27 81       	ldd	r18, Z+7	; 0x07
     dc4:	30 85       	ldd	r19, Z+8	; 0x08
     dc6:	10 97       	sbiw	r26, 0x00	; 0
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <remove_note_by_pitch+0x8a>
        dead_note->previous_note_by_trigger->next_note_by_trigger = dead_note->next_note_by_trigger;
     dca:	17 96       	adiw	r26, 0x07	; 7
     dcc:	2d 93       	st	X+, r18
     dce:	3c 93       	st	X, r19
     dd0:	18 97       	sbiw	r26, 0x08	; 8
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <remove_note_by_pitch+0x94>
    else
        note_list->head_trigger = dead_note->next_note_by_trigger;
     dd4:	ec 01       	movw	r28, r24
     dd6:	cb 54       	subi	r28, 0x4B	; 75
     dd8:	df 4f       	sbci	r29, 0xFF	; 255
     dda:	28 83       	st	Y, r18
     ddc:	39 83       	std	Y+1, r19	; 0x01
    
    if (dead_note->next_note_by_trigger)
     dde:	c7 81       	ldd	r28, Z+7	; 0x07
     de0:	d0 85       	ldd	r29, Z+8	; 0x08
     de2:	20 97       	sbiw	r28, 0x00	; 0
     de4:	19 f0       	breq	.+6      	; 0xdec <remove_note_by_pitch+0xa2>
        dead_note->next_note_by_trigger->previous_note_by_trigger = dead_note->previous_note_by_trigger;
     de6:	a9 87       	std	Y+9, r26	; 0x09
     de8:	ba 87       	std	Y+10, r27	; 0x0a
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <remove_note_by_pitch+0xac>
    else
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
     dec:	89 54       	subi	r24, 0x49	; 73
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	ec 01       	movw	r28, r24
     df2:	a8 83       	st	Y, r26
     df4:	b9 83       	std	Y+1, r27	; 0x01
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     df6:	11 82       	std	Z+1, r1	; 0x01
    note->velocity = 0;
     df8:	12 82       	std	Z+2, r1	; 0x02
    note->status = 0;
     dfa:	10 82       	st	Z, r1
    note->next_note_by_pitch = NULL;
     dfc:	13 82       	std	Z+3, r1	; 0x03
     dfe:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     e00:	15 82       	std	Z+5, r1	; 0x05
     e02:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     e04:	17 82       	std	Z+7, r1	; 0x07
     e06:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     e08:	11 86       	std	Z+9, r1	; 0x09
     e0a:	12 86       	std	Z+10, r1	; 0x0a
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <remove_note_by_pitch+0xc8>
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
        return 0;
     e10:	80 e0       	ldi	r24, 0x00	; 0
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <insert_note>:
}

//insert new note in complete order
//return 0 if unsuccessful (no free note banks)
//return 1 if successful
bool insert_note(NoteList* note_list, uint8_t pitch, uint8_t velocity){
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     e22:	dc 01       	movw	r26, r24
     e24:	af 54       	subi	r26, 0x4F	; 79
     e26:	bf 4f       	sbci	r27, 0xFF	; 255
     e28:	0d 90       	ld	r0, X+
     e2a:	bc 91       	ld	r27, X
     e2c:	a0 2d       	mov	r26, r0
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <insert_note+0x2a>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	8c 91       	ld	r24, X
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	86 17       	cp	r24, r22
     e38:	30 f4       	brcc	.+12     	; 0xe46 <insert_note+0x2e>
            break;

        target_note = target_note->next_note_by_pitch;
     e3a:	13 96       	adiw	r26, 0x03	; 3
     e3c:	0d 90       	ld	r0, X+
     e3e:	bc 91       	ld	r27, X
     e40:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     e42:	10 97       	sbiw	r26, 0x00	; 0
     e44:	a9 f7       	brne	.-22     	; 0xe30 <insert_note+0x18>
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	8c 91       	ld	r24, X
     e4a:	11 97       	sbiw	r26, 0x01	; 1
     e4c:	86 17       	cp	r24, r22
     e4e:	09 f0       	breq	.+2      	; 0xe52 <insert_note+0x3a>
     e50:	55 c0       	rjmp	.+170    	; 0xefc <insert_note+0xe4>
    return 1;
}

//Change the velocity of an existing note
static Note* update_note_velocity(Note* note, uint8_t velocity){
    note->velocity = velocity;
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	4c 93       	st	X, r20
     e56:	12 97       	sbiw	r26, 0x02	; 2
//Place note at the end of the trigger order
//If the note is the only member of the note_list, assign it to the head    
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is already at the tail (also catches the case of a single-member list)
    if (note_list->tail_trigger == note)
     e58:	ef 01       	movw	r28, r30
     e5a:	c9 54       	subi	r28, 0x49	; 73
     e5c:	df 4f       	sbci	r29, 0xFF	; 255
     e5e:	88 81       	ld	r24, Y
     e60:	99 81       	ldd	r25, Y+1	; 0x01
     e62:	8a 17       	cp	r24, r26
     e64:	9b 07       	cpc	r25, r27
     e66:	09 f4       	brne	.+2      	; 0xe6a <insert_note+0x52>
     e68:	ed c0       	rjmp	.+474    	; 0x1044 <insert_note+0x22c>
        return;
            
    //check for head
    if (note_list->head_trigger == note){
     e6a:	cf 01       	movw	r24, r30
     e6c:	8b 54       	subi	r24, 0x4B	; 75
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	ec 01       	movw	r28, r24
     e72:	28 81       	ld	r18, Y
     e74:	39 81       	ldd	r19, Y+1	; 0x01
     e76:	2a 17       	cp	r18, r26
     e78:	3b 07       	cpc	r19, r27
     e7a:	51 f4       	brne	.+20     	; 0xe90 <insert_note+0x78>
        //update head and remove note
        note_list->head_trigger = note->next_note_by_trigger;
     e7c:	17 96       	adiw	r26, 0x07	; 7
     e7e:	2d 91       	ld	r18, X+
     e80:	3c 91       	ld	r19, X
     e82:	18 97       	sbiw	r26, 0x08	; 8
     e84:	28 83       	st	Y, r18
     e86:	39 83       	std	Y+1, r19	; 0x01
        note_list->head_trigger->previous_note_by_trigger = NULL;
     e88:	e9 01       	movw	r28, r18
     e8a:	19 86       	std	Y+9, r1	; 0x09
     e8c:	1a 86       	std	Y+10, r1	; 0x0a
     e8e:	12 c0       	rjmp	.+36     	; 0xeb4 <insert_note+0x9c>
    }
    else{
        //otherwise remove note normally
        note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     e90:	19 96       	adiw	r26, 0x09	; 9
     e92:	2d 91       	ld	r18, X+
     e94:	3c 91       	ld	r19, X
     e96:	1a 97       	sbiw	r26, 0x0a	; 10
     e98:	17 96       	adiw	r26, 0x07	; 7
     e9a:	8d 91       	ld	r24, X+
     e9c:	9c 91       	ld	r25, X
     e9e:	18 97       	sbiw	r26, 0x08	; 8
     ea0:	e9 01       	movw	r28, r18
     ea2:	8f 83       	std	Y+7, r24	; 0x07
     ea4:	98 87       	std	Y+8, r25	; 0x08
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     ea6:	17 96       	adiw	r26, 0x07	; 7
     ea8:	8d 91       	ld	r24, X+
     eaa:	9c 91       	ld	r25, X
     eac:	18 97       	sbiw	r26, 0x08	; 8
     eae:	ec 01       	movw	r28, r24
     eb0:	29 87       	std	Y+9, r18	; 0x09
     eb2:	3a 87       	std	Y+10, r19	; 0x0a

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     eb4:	80 81       	ld	r24, Z
     eb6:	ef 01       	movw	r28, r30
     eb8:	c9 54       	subi	r28, 0x49	; 73
     eba:	df 4f       	sbci	r29, 0xFF	; 255
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	79 f4       	brne	.+30     	; 0xede <insert_note+0xc6>
        note_list->tail_trigger = note;
     ec0:	a8 83       	st	Y, r26
     ec2:	b9 83       	std	Y+1, r27	; 0x01
        note_list->head_trigger = note;
     ec4:	eb 54       	subi	r30, 0x4B	; 75
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	a0 83       	st	Z, r26
     eca:	b1 83       	std	Z+1, r27	; 0x01
        note->next_note_by_trigger = NULL;
     ecc:	17 96       	adiw	r26, 0x07	; 7
     ece:	1d 92       	st	X+, r1
     ed0:	1c 92       	st	X, r1
     ed2:	18 97       	sbiw	r26, 0x08	; 8
        note->previous_note_by_trigger = NULL;
     ed4:	19 96       	adiw	r26, 0x09	; 9
     ed6:	1d 92       	st	X+, r1
     ed8:	1c 92       	st	X, r1
     eda:	1a 97       	sbiw	r26, 0x0a	; 10
     edc:	b6 c0       	rjmp	.+364    	; 0x104a <insert_note+0x232>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     ede:	17 96       	adiw	r26, 0x07	; 7
     ee0:	1d 92       	st	X+, r1
     ee2:	1c 92       	st	X, r1
     ee4:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = note_list->tail_trigger;
     ee6:	e8 81       	ld	r30, Y
     ee8:	f9 81       	ldd	r31, Y+1	; 0x01
     eea:	19 96       	adiw	r26, 0x09	; 9
     eec:	ed 93       	st	X+, r30
     eee:	fc 93       	st	X, r31
     ef0:	1a 97       	sbiw	r26, 0x0a	; 10
    note_list->tail_trigger->next_note_by_trigger = note;
     ef2:	a7 83       	std	Z+7, r26	; 0x07
     ef4:	b0 87       	std	Z+8, r27	; 0x08
    note_list->tail_trigger = note;
     ef6:	a8 83       	st	Y, r26
     ef8:	b9 83       	std	Y+1, r27	; 0x01
     efa:	a4 c0       	rjmp	.+328    	; 0x1044 <insert_note+0x22c>
     efc:	ef 01       	movw	r28, r30
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    note->previous_note_by_trigger = note_list->tail_trigger;
    note_list->tail_trigger->next_note_by_trigger = note;
    note_list->tail_trigger = note;
     f02:	28 2f       	mov	r18, r24
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     f04:	39 81       	ldd	r19, Y+1	; 0x01
     f06:	33 23       	and	r19, r19
     f08:	e1 f4       	brne	.+56     	; 0xf42 <insert_note+0x12a>
            note_list->note_bank[i].status = 1;
     f0a:	0b e0       	ldi	r16, 0x0B	; 11
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	80 9f       	mul	r24, r16
     f10:	e0 01       	movw	r28, r0
     f12:	81 9f       	mul	r24, r17
     f14:	d0 0d       	add	r29, r0
     f16:	90 9f       	mul	r25, r16
     f18:	d0 0d       	add	r29, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	ce 0f       	add	r28, r30
     f1e:	df 1f       	adc	r29, r31
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
            return &(note_list->note_bank[i]);
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	20 9f       	mul	r18, r16
     f28:	e0 01       	movw	r28, r0
     f2a:	21 9f       	mul	r18, r17
     f2c:	d0 0d       	add	r29, r0
     f2e:	30 9f       	mul	r19, r16
     f30:	d0 0d       	add	r29, r0
     f32:	11 24       	eor	r1, r1
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
//return NULL otherwise
static Note* add_note_at_previous_pitch(NoteList* note_list, Note* target_note, uint8_t pitch, uint8_t velocity){
    Note* new_note = allocate_note(note_list);
    
    //return NULL if there are no more notes
    if (new_note == NULL)
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	39 f4       	brne	.+14     	; 0xf4e <insert_note+0x136>
     f40:	83 c0       	rjmp	.+262    	; 0x1048 <insert_note+0x230>
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	2b 96       	adiw	r28, 0x0b	; 11
//Iterate through the bank of notes to find an available note to use
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     f46:	80 31       	cpi	r24, 0x10	; 16
     f48:	91 05       	cpc	r25, r1
     f4a:	d9 f6       	brne	.-74     	; 0xf02 <insert_note+0xea>
     f4c:	7d c0       	rjmp	.+250    	; 0x1048 <insert_note+0x230>
    
    //return NULL if there are no more notes
    if (new_note == NULL)
        return NULL;
    
    note_list->length += 1;
     f4e:	50 81       	ld	r21, Z
     f50:	5f 5f       	subi	r21, 0xFF	; 255
     f52:	50 83       	st	Z, r21
    
    //set data of new note
    new_note->pitch = pitch;
     f54:	ce 0f       	add	r28, r30
     f56:	df 1f       	adc	r29, r31
     f58:	6a 83       	std	Y+2, r22	; 0x02
    new_note->velocity = velocity;
     f5a:	4b 83       	std	Y+3, r20	; 0x03
    
    //new_note is the only member of the list
    if (note_list->length == 1){
     f5c:	51 30       	cpi	r21, 0x01	; 1
     f5e:	69 f4       	brne	.+26     	; 0xf7a <insert_note+0x162>
        new_note->next_note_by_pitch = NULL;
     f60:	1c 82       	std	Y+4, r1	; 0x04
     f62:	1d 82       	std	Y+5, r1	; 0x05
        new_note->previous_note_by_pitch = NULL;
     f64:	1e 82       	std	Y+6, r1	; 0x06
     f66:	1f 82       	std	Y+7, r1	; 0x07
        note_list->head_pitch = new_note;
     f68:	df 01       	movw	r26, r30
     f6a:	af 54       	subi	r26, 0x4F	; 79
     f6c:	bf 4f       	sbci	r27, 0xFF	; 255
     f6e:	8d 93       	st	X+, r24
     f70:	9c 93       	st	X, r25
        note_list->tail_pitch = new_note;
     f72:	df 01       	movw	r26, r30
     f74:	ad 54       	subi	r26, 0x4D	; 77
     f76:	bf 4f       	sbci	r27, 0xFF	; 255
     f78:	23 c0       	rjmp	.+70     	; 0xfc0 <insert_note+0x1a8>
        return new_note;        
    }
    
    //if new_note isn't the only note, but target_note is NULL, new_note is at the tail pitch
    if (target_note == NULL){
     f7a:	10 97       	sbiw	r26, 0x00	; 0
     f7c:	71 f4       	brne	.+28     	; 0xf9a <insert_note+0x182>
        new_note->previous_note_by_pitch = note_list->tail_pitch;
     f7e:	df 01       	movw	r26, r30
     f80:	ad 54       	subi	r26, 0x4D	; 77
     f82:	bf 4f       	sbci	r27, 0xFF	; 255
     f84:	4d 91       	ld	r20, X+
     f86:	5c 91       	ld	r21, X
     f88:	11 97       	sbiw	r26, 0x01	; 1
     f8a:	4e 83       	std	Y+6, r20	; 0x06
     f8c:	5f 83       	std	Y+7, r21	; 0x07
        new_note->next_note_by_pitch = NULL;
     f8e:	1c 82       	std	Y+4, r1	; 0x04
     f90:	1d 82       	std	Y+5, r1	; 0x05
        note_list->tail_pitch->next_note_by_pitch = new_note;
     f92:	ea 01       	movw	r28, r20
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <insert_note+0x1a8>
        note_list->tail_pitch = new_note;
        return new_note;
    }
    
    //otherwise, adjust pointers
    new_note->next_note_by_pitch = target_note;
     f9a:	ac 83       	std	Y+4, r26	; 0x04
     f9c:	bd 83       	std	Y+5, r27	; 0x05
    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     f9e:	15 96       	adiw	r26, 0x05	; 5
     fa0:	4d 91       	ld	r20, X+
     fa2:	5c 91       	ld	r21, X
     fa4:	16 97       	sbiw	r26, 0x06	; 6
     fa6:	4e 83       	std	Y+6, r20	; 0x06
     fa8:	5f 83       	std	Y+7, r21	; 0x07
    target_note->previous_note_by_pitch = new_note;
     faa:	15 96       	adiw	r26, 0x05	; 5
     fac:	8d 93       	st	X+, r24
     fae:	9c 93       	st	X, r25
     fb0:	16 97       	sbiw	r26, 0x06	; 6

    //check for head
    if (new_note->previous_note_by_pitch == NULL)
     fb2:	ae 81       	ldd	r26, Y+6	; 0x06
     fb4:	bf 81       	ldd	r27, Y+7	; 0x07
     fb6:	10 97       	sbiw	r26, 0x00	; 0
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <insert_note+0x1b0>
        note_list->head_pitch = new_note;
     fba:	df 01       	movw	r26, r30
     fbc:	af 54       	subi	r26, 0x4F	; 79
     fbe:	bf 4f       	sbci	r27, 0xFF	; 255
     fc0:	8d 93       	st	X+, r24
     fc2:	9c 93       	st	X, r25
     fc4:	11 97       	sbiw	r26, 0x01	; 1
     fc6:	46 c0       	rjmp	.+140    	; 0x1054 <insert_note+0x23c>
    else
        new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     fc8:	13 96       	adiw	r26, 0x03	; 3
     fca:	8d 93       	st	X+, r24
     fcc:	9c 93       	st	X, r25
     fce:	14 97       	sbiw	r26, 0x04	; 4
     fd0:	41 c0       	rjmp	.+130    	; 0x1054 <insert_note+0x23c>
//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
        note_list->tail_trigger = note;
     fd2:	df 01       	movw	r26, r30
     fd4:	a9 54       	subi	r26, 0x49	; 73
     fd6:	bf 4f       	sbci	r27, 0xFF	; 255
     fd8:	8d 93       	st	X+, r24
     fda:	9c 93       	st	X, r25
        note_list->head_trigger = note;
     fdc:	df 01       	movw	r26, r30
     fde:	ab 54       	subi	r26, 0x4B	; 75
     fe0:	bf 4f       	sbci	r27, 0xFF	; 255
     fe2:	8d 93       	st	X+, r24
     fe4:	9c 93       	st	X, r25
        note->next_note_by_trigger = NULL;
     fe6:	8b e0       	ldi	r24, 0x0B	; 11
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	28 9f       	mul	r18, r24
     fec:	d0 01       	movw	r26, r0
     fee:	29 9f       	mul	r18, r25
     ff0:	b0 0d       	add	r27, r0
     ff2:	38 9f       	mul	r19, r24
     ff4:	b0 0d       	add	r27, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	ae 0f       	add	r26, r30
     ffa:	bf 1f       	adc	r27, r31
     ffc:	18 96       	adiw	r26, 0x08	; 8
     ffe:	1d 92       	st	X+, r1
    1000:	1c 92       	st	X, r1
    1002:	19 97       	sbiw	r26, 0x09	; 9
        note->previous_note_by_trigger = NULL;
    1004:	1a 96       	adiw	r26, 0x0a	; 10
    1006:	1d 92       	st	X+, r1
    1008:	1c 92       	st	X, r1
    100a:	1b 97       	sbiw	r26, 0x0b	; 11
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <insert_note+0x22c>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    100e:	4b e0       	ldi	r20, 0x0B	; 11
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	24 9f       	mul	r18, r20
    1014:	d0 01       	movw	r26, r0
    1016:	25 9f       	mul	r18, r21
    1018:	b0 0d       	add	r27, r0
    101a:	34 9f       	mul	r19, r20
    101c:	b0 0d       	add	r27, r0
    101e:	11 24       	eor	r1, r1
    1020:	ae 0f       	add	r26, r30
    1022:	bf 1f       	adc	r27, r31
    1024:	18 96       	adiw	r26, 0x08	; 8
    1026:	1d 92       	st	X+, r1
    1028:	1c 92       	st	X, r1
    102a:	19 97       	sbiw	r26, 0x09	; 9
    note->previous_note_by_trigger = note_list->tail_trigger;
    102c:	e9 54       	subi	r30, 0x49	; 73
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	c0 81       	ld	r28, Z
    1032:	d1 81       	ldd	r29, Z+1	; 0x01
    1034:	1a 96       	adiw	r26, 0x0a	; 10
    1036:	cd 93       	st	X+, r28
    1038:	dc 93       	st	X, r29
    103a:	1b 97       	sbiw	r26, 0x0b	; 11
    note_list->tail_trigger->next_note_by_trigger = note;
    103c:	8f 83       	std	Y+7, r24	; 0x07
    103e:	98 87       	std	Y+8, r25	; 0x08
    note_list->tail_trigger = note;
    1040:	80 83       	st	Z, r24
    1042:	91 83       	std	Z+1, r25	; 0x01
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	01 c0       	rjmp	.+2      	; 0x104a <insert_note+0x232>
    }
    else{
        //if the note is new, add it in the proper pitch position
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
    1048:	80 e0       	ldi	r24, 0x00	; 0
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
    1054:	40 81       	ld	r20, Z
    1056:	41 30       	cpi	r20, 0x01	; 1
    1058:	d1 f6       	brne	.-76     	; 0x100e <insert_note+0x1f6>
    105a:	bb cf       	rjmp	.-138    	; 0xfd2 <insert_note+0x1ba>

0000105c <calculate_start_time_increment>:
	uint16_t final_velocity;
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	return (uint8_t) final_velocity;
}

static void calculate_start_time_increment(Sequencer* sequencer){
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <calculate_start_time_increment+0xa>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <calculate_start_time_increment+0xc>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
    106e:	80 91 28 08 	lds	r24, 0x0828
    1072:	90 91 29 08 	lds	r25, 0x0829
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	ab 83       	std	Y+3, r26	; 0x03
    1080:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
    1082:	f8 01       	movw	r30, r16
    1084:	80 89       	ldd	r24, Z+16	; 0x10
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	81 f0       	breq	.+32     	; 0x10aa <calculate_start_time_increment+0x4e>
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	30 f4       	brcc	.+12     	; 0x109a <calculate_start_time_increment+0x3e>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	61 f1       	breq	.+88     	; 0x10ea <calculate_start_time_increment+0x8e>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	09 f0       	breq	.+2      	; 0x1098 <calculate_start_time_increment+0x3c>
    1096:	6e c0       	rjmp	.+220    	; 0x1174 <calculate_start_time_increment+0x118>
    1098:	5e c0       	rjmp	.+188    	; 0x1156 <calculate_start_time_increment+0xfa>
    109a:	85 30       	cpi	r24, 0x05	; 5
    109c:	c9 f0       	breq	.+50     	; 0x10d0 <calculate_start_time_increment+0x74>
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	68 f1       	brcs	.+90     	; 0x10fc <calculate_start_time_increment+0xa0>
    10a2:	86 30       	cpi	r24, 0x06	; 6
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <calculate_start_time_increment+0x4c>
    10a6:	66 c0       	rjmp	.+204    	; 0x1174 <calculate_start_time_increment+0x118>
    10a8:	47 c0       	rjmp	.+142    	; 0x1138 <calculate_start_time_increment+0xdc>
		//quarter note
        case 0:    break;
        
		//dotted eighth
        case 3: new_start_time_increment *= 3;
    10aa:	29 81       	ldd	r18, Y+1	; 0x01
    10ac:	3a 81       	ldd	r19, Y+2	; 0x02
    10ae:	4b 81       	ldd	r20, Y+3	; 0x03
    10b0:	5c 81       	ldd	r21, Y+4	; 0x04
    10b2:	da 01       	movw	r26, r20
    10b4:	c9 01       	movw	r24, r18
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	a4 1f       	adc	r26, r20
    10c4:	b5 1f       	adc	r27, r21
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	ab 83       	std	Y+3, r26	; 0x03
    10cc:	bc 83       	std	Y+4, r27	; 0x04
    10ce:	43 c0       	rjmp	.+134    	; 0x1156 <calculate_start_time_increment+0xfa>
                new_start_time_increment /= 4;
                break;
        
		//quarter triplet
        case 5: new_start_time_increment *= 2;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	aa 1f       	adc	r26, r26
    10de:	bb 1f       	adc	r27, r27
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	ab 83       	std	Y+3, r26	; 0x03
    10e6:	bc 83       	std	Y+4, r27	; 0x04
    10e8:	27 c0       	rjmp	.+78     	; 0x1138 <calculate_start_time_increment+0xdc>
                new_start_time_increment /= 3;
                break;
        
		//eighth
        case 1: new_start_time_increment /= 2;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	ab 81       	ldd	r26, Y+3	; 0x03
    10f0:	bc 81       	ldd	r27, Y+4	; 0x04
    10f2:	b6 95       	lsr	r27
    10f4:	a7 95       	ror	r26
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	38 c0       	rjmp	.+112    	; 0x116c <calculate_start_time_increment+0x110>
                break;
                
		//dotted 16th
        case 4: new_start_time_increment *= 3;
    10fc:	29 81       	ldd	r18, Y+1	; 0x01
    10fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1100:	4b 81       	ldd	r20, Y+3	; 0x03
    1102:	5c 81       	ldd	r21, Y+4	; 0x04
    1104:	da 01       	movw	r26, r20
    1106:	c9 01       	movw	r24, r18
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	aa 1f       	adc	r26, r26
    110e:	bb 1f       	adc	r27, r27
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	a4 1f       	adc	r26, r20
    1116:	b5 1f       	adc	r27, r21
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	ab 83       	std	Y+3, r26	; 0x03
    111e:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	ab 81       	ldd	r26, Y+3	; 0x03
    1126:	bc 81       	ldd	r27, Y+4	; 0x04
    1128:	33 e0       	ldi	r19, 0x03	; 3
    112a:	b6 95       	lsr	r27
    112c:	a7 95       	ror	r26
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	3a 95       	dec	r19
    1134:	d1 f7       	brne	.-12     	; 0x112a <calculate_start_time_increment+0xce>
    1136:	1a c0       	rjmp	.+52     	; 0x116c <calculate_start_time_increment+0x110>
                break;
        
		//eighth triplet
        case 6: new_start_time_increment /= 3;
    1138:	69 81       	ldd	r22, Y+1	; 0x01
    113a:	7a 81       	ldd	r23, Y+2	; 0x02
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	23 e0       	ldi	r18, 0x03	; 3
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodsi4>
    114c:	29 83       	std	Y+1, r18	; 0x01
    114e:	3a 83       	std	Y+2, r19	; 0x02
    1150:	4b 83       	std	Y+3, r20	; 0x03
    1152:	5c 83       	std	Y+4, r21	; 0x04
                break;
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <calculate_start_time_increment+0x118>
        
		//sixteenth                
        case 2: new_start_time_increment /= 4;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	ab 81       	ldd	r26, Y+3	; 0x03
    115c:	bc 81       	ldd	r27, Y+4	; 0x04
    115e:	22 e0       	ldi	r18, 0x02	; 2
    1160:	b6 95       	lsr	r27
    1162:	a7 95       	ror	r26
    1164:	97 95       	ror	r25
    1166:	87 95       	ror	r24
    1168:	2a 95       	dec	r18
    116a:	d1 f7       	brne	.-12     	; 0x1160 <calculate_start_time_increment+0x104>
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	ab 83       	std	Y+3, r26	; 0x03
    1172:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
    1174:	69 81       	ldd	r22, Y+1	; 0x01
    1176:	7a 81       	ldd	r23, Y+2	; 0x02
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	f8 01       	movw	r30, r16
    117e:	20 85       	ldd	r18, Z+8	; 0x08
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	44 27       	eor	r20, r20
    1188:	37 fd       	sbrc	r19, 7
    118a:	40 95       	com	r20
    118c:	54 2f       	mov	r21, r20
    118e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodsi4>
    1192:	29 83       	std	Y+1, r18	; 0x01
    1194:	3a 83       	std	Y+2, r19	; 0x02
    1196:	4b 83       	std	Y+3, r20	; 0x03
    1198:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	ab 81       	ldd	r26, Y+3	; 0x03
    11a0:	bc 81       	ldd	r27, Y+4	; 0x04
    11a2:	f8 01       	movw	r30, r16
    11a4:	82 87       	std	Z+10, r24	; 0x0a
    11a6:	93 87       	std	Z+11, r25	; 0x0b
}
    11a8:	24 96       	adiw	r28, 0x04	; 4
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <calculate_stop_time_increment>:

static void calculate_stop_time_increment(Sequencer* sequencer){
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <calculate_stop_time_increment+0xa>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <calculate_stop_time_increment+0xc>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	8c 01       	movw	r16, r24
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    11ca:	fc 01       	movw	r30, r24
    11cc:	67 85       	ldd	r22, Z+15	; 0x0f
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	22 85       	ldd	r18, Z+10	; 0x0a
    11d6:	33 85       	ldd	r19, Z+11	; 0x0b
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsi3>
    11e0:	69 83       	std	Y+1, r22	; 0x01
    11e2:	7a 83       	std	Y+2, r23	; 0x02
    11e4:	8b 83       	std	Y+3, r24	; 0x03
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    11e8:	69 81       	ldd	r22, Y+1	; 0x01
    11ea:	7a 81       	ldd	r23, Y+2	; 0x02
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	2f ef       	ldi	r18, 0xFF	; 255
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodsi4>
    11fc:	29 83       	std	Y+1, r18	; 0x01
    11fe:	3a 83       	std	Y+2, r19	; 0x02
    1200:	4b 83       	std	Y+3, r20	; 0x03
    1202:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	ab 81       	ldd	r26, Y+3	; 0x03
    120a:	bc 81       	ldd	r27, Y+4	; 0x04
    120c:	f8 01       	movw	r30, r16
    120e:	84 87       	std	Z+12, r24	; 0x0c
    1210:	95 87       	std	Z+13, r25	; 0x0d
}
    1212:	24 96       	adiw	r28, 0x04	; 4
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <build_play_list>:
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8c 01       	movw	r16, r24
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    
    return;
}
    124c:	2d b6       	in	r2, 0x3d	; 61
    124e:	3e b6       	in	r3, 0x3e	; 62
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    Note* current_note;
    
    uint8_t note_list_size = note_list->length;
    1250:	fc 01       	movw	r30, r24
    1252:	ef 58       	subi	r30, 0x8F	; 143
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	90 80       	ld	r9, Z
	
    uint8_t random_order[note_list_size];
    1258:	69 2c       	mov	r6, r9
    125a:	77 24       	eor	r7, r7
    125c:	8d b7       	in	r24, 0x3d	; 61
    125e:	9e b7       	in	r25, 0x3e	; 62
    1260:	86 19       	sub	r24, r6
    1262:	97 09       	sbc	r25, r7
    1264:	8d bf       	out	0x3d, r24	; 61
    1266:	9e bf       	out	0x3e, r25	; 62
    1268:	ed b6       	in	r14, 0x3d	; 61
    126a:	fe b6       	in	r15, 0x3e	; 62
    126c:	08 94       	sec
    126e:	e1 1c       	adc	r14, r1
    1270:	f1 1c       	adc	r15, r1
	
    bool mirror = 0;
    uint8_t pattern = 0;
	
	
    switch(sequencer->pattern){
    1272:	d8 01       	movw	r26, r16
    1274:	1e 96       	adiw	r26, 0x0e	; 14
    1276:	8c 91       	ld	r24, X
    1278:	1e 97       	sbiw	r26, 0x0e	; 14
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	f0 f4       	brcc	.+60     	; 0x12ba <build_play_list+0x98>
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	fc 01       	movw	r30, r24
    1282:	e0 5e       	subi	r30, 0xE0	; 224
    1284:	ff 4d       	sbci	r31, 0xDF	; 223
    1286:	80 80       	ld	r8, Z
		    pattern = 5;
			mirror = 0;
			break;
	}

    switch(pattern){
    1288:	88 5d       	subi	r24, 0xD8	; 216
    128a:	9f 4d       	sbci	r25, 0xDF	; 223
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	09 f4       	brne	.+2      	; 0x1296 <build_play_list+0x74>
    1294:	41 c0       	rjmp	.+130    	; 0x1318 <build_play_list+0xf6>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	30 f4       	brcc	.+12     	; 0x12a6 <build_play_list+0x84>
    129a:	88 23       	and	r24, r24
    129c:	79 f0       	breq	.+30     	; 0x12bc <build_play_list+0x9a>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <build_play_list+0x82>
    12a2:	a9 c0       	rjmp	.+338    	; 0x13f6 <build_play_list+0x1d4>
    12a4:	22 c0       	rjmp	.+68     	; 0x12ea <build_play_list+0xc8>
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	09 f4       	brne	.+2      	; 0x12ac <build_play_list+0x8a>
    12aa:	4d c0       	rjmp	.+154    	; 0x1346 <build_play_list+0x124>
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <build_play_list+0x90>
    12b0:	a2 c0       	rjmp	.+324    	; 0x13f6 <build_play_list+0x1d4>
    12b2:	57 01       	movw	r10, r14
    12b4:	f7 01       	movw	r30, r14
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	5f c0       	rjmp	.+190    	; 0x1378 <build_play_list+0x156>
	
    bool mirror = 0;
    uint8_t pattern = 0;
	
	
    switch(sequencer->pattern){
    12ba:	88 24       	eor	r8, r8
	}

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    12bc:	f8 01       	movw	r30, r16
    12be:	ee 5d       	subi	r30, 0xDE	; 222
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	a0 81       	ld	r26, Z
    12c4:	b1 81       	ldd	r27, Z+1	; 0x01
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    12c6:	80 e0       	ldi	r24, 0x00	; 0
	}

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <build_play_list+0xc2>
                sequencer->play_list[play_list_index++] = current_note;
    12ca:	e8 2f       	mov	r30, r24
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e0 0f       	add	r30, r16
    12d4:	f1 1f       	adc	r31, r17
    12d6:	a1 8b       	std	Z+17, r26	; 0x11
    12d8:	b2 8b       	std	Z+18, r27	; 0x12
    12da:	8f 5f       	subi	r24, 0xFF	; 255
	}

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    12dc:	13 96       	adiw	r26, 0x03	; 3
    12de:	0d 90       	ld	r0, X+
    12e0:	bc 91       	ld	r27, X
    12e2:	a0 2d       	mov	r26, r0
    12e4:	10 97       	sbiw	r26, 0x00	; 0
    12e6:	89 f7       	brne	.-30     	; 0x12ca <build_play_list+0xa8>
    12e8:	87 c0       	rjmp	.+270    	; 0x13f8 <build_play_list+0x1d6>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    12ea:	f8 01       	movw	r30, r16
    12ec:	ec 5d       	subi	r30, 0xDC	; 220
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	a0 81       	ld	r26, Z
    12f2:	b1 81       	ldd	r27, Z+1	; 0x01
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    12f4:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    12f6:	0d c0       	rjmp	.+26     	; 0x1312 <build_play_list+0xf0>
                sequencer->play_list[play_list_index++] = current_note;
    12f8:	e8 2f       	mov	r30, r24
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	e0 0f       	add	r30, r16
    1302:	f1 1f       	adc	r31, r17
    1304:	a1 8b       	std	Z+17, r26	; 0x11
    1306:	b2 8b       	std	Z+18, r27	; 0x12
    1308:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    130a:	15 96       	adiw	r26, 0x05	; 5
    130c:	0d 90       	ld	r0, X+
    130e:	bc 91       	ld	r27, X
    1310:	a0 2d       	mov	r26, r0
    1312:	10 97       	sbiw	r26, 0x00	; 0
    1314:	89 f7       	brne	.-30     	; 0x12f8 <build_play_list+0xd6>
    1316:	70 c0       	rjmp	.+224    	; 0x13f8 <build_play_list+0x1d6>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1318:	f8 01       	movw	r30, r16
    131a:	ea 5d       	subi	r30, 0xDA	; 218
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	a0 81       	ld	r26, Z
    1320:	b1 81       	ldd	r27, Z+1	; 0x01
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    1322:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <build_play_list+0x11e>
                sequencer->play_list[play_list_index++] = current_note;
    1326:	e8 2f       	mov	r30, r24
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	e0 0f       	add	r30, r16
    1330:	f1 1f       	adc	r31, r17
    1332:	a1 8b       	std	Z+17, r26	; 0x11
    1334:	b2 8b       	std	Z+18, r27	; 0x12
    1336:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1338:	17 96       	adiw	r26, 0x07	; 7
    133a:	0d 90       	ld	r0, X+
    133c:	bc 91       	ld	r27, X
    133e:	a0 2d       	mov	r26, r0
    1340:	10 97       	sbiw	r26, 0x00	; 0
    1342:	89 f7       	brne	.-30     	; 0x1326 <build_play_list+0x104>
    1344:	59 c0       	rjmp	.+178    	; 0x13f8 <build_play_list+0x1d6>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1346:	f8 01       	movw	r30, r16
    1348:	e8 5d       	subi	r30, 0xD8	; 216
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	a0 81       	ld	r26, Z
    134e:	b1 81       	ldd	r27, Z+1	; 0x01
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    1350:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1352:	0d c0       	rjmp	.+26     	; 0x136e <build_play_list+0x14c>
                sequencer->play_list[play_list_index++] = current_note;
    1354:	e8 2f       	mov	r30, r24
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	e0 0f       	add	r30, r16
    135e:	f1 1f       	adc	r31, r17
    1360:	a1 8b       	std	Z+17, r26	; 0x11
    1362:	b2 8b       	std	Z+18, r27	; 0x12
    1364:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1366:	19 96       	adiw	r26, 0x09	; 9
    1368:	0d 90       	ld	r0, X+
    136a:	bc 91       	ld	r27, X
    136c:	a0 2d       	mov	r26, r0
    136e:	10 97       	sbiw	r26, 0x00	; 0
    1370:	89 f7       	brne	.-30     	; 0x1354 <build_play_list+0x132>
    1372:	42 c0       	rjmp	.+132    	; 0x13f8 <build_play_list+0x1d6>
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
    1374:	81 93       	st	Z+, r24
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	89 15       	cp	r24, r9
    137a:	e0 f3       	brcs	.-8      	; 0x1374 <build_play_list+0x152>
    137c:	67 01       	movw	r12, r14
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    137e:	59 2c       	mov	r5, r9
    1380:	44 24       	eor	r4, r4
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <build_play_list+0x182>
    1384:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <rand>
				temp = random_order[i];
    1388:	d6 01       	movw	r26, r12
    138a:	2c 91       	ld	r18, X
        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    138c:	65 2d       	mov	r22, r5
    138e:	74 2d       	mov	r23, r4
    1390:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
				temp = random_order[i];
				random_order[i] = random_order[j];
    1394:	f7 01       	movw	r30, r14
    1396:	e8 0f       	add	r30, r24
    1398:	f1 1d       	adc	r31, r1
    139a:	80 81       	ld	r24, Z
    139c:	d6 01       	movw	r26, r12
    139e:	8d 93       	st	X+, r24
    13a0:	6d 01       	movw	r12, r26
				random_order[j] = temp;
    13a2:	20 83       	st	Z, r18

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
    13a4:	8c 2d       	mov	r24, r12
    13a6:	8e 19       	sub	r24, r14
    13a8:	89 15       	cp	r24, r9
    13aa:	60 f3       	brcs	.-40     	; 0x1384 <build_play_list+0x162>
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    13ac:	b8 01       	movw	r22, r16
    13ae:	6f 5e       	subi	r22, 0xEF	; 239
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	c3 01       	movw	r24, r6
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	41 96       	adiw	r24, 0x11	; 17
    13ba:	80 0f       	add	r24, r16
    13bc:	91 1f       	adc	r25, r17
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
    13be:	98 01       	movw	r18, r16
    13c0:	2e 5d       	subi	r18, 0xDE	; 222
    13c2:	3e 4f       	sbci	r19, 0xFE	; 254
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <build_play_list+0x1ca>
    13c6:	f9 01       	movw	r30, r18
    13c8:	a0 81       	ld	r26, Z
    13ca:	b1 81       	ldd	r27, Z+1	; 0x01
				for (j = 0; j < random_order[i]; j++)
    13cc:	f5 01       	movw	r30, r10
    13ce:	51 91       	ld	r21, Z+
    13d0:	5f 01       	movw	r10, r30
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <build_play_list+0x1be>
				    current_note = current_note->next_note_by_pitch;
    13d6:	13 96       	adiw	r26, 0x03	; 3
    13d8:	0d 90       	ld	r0, X+
    13da:	bc 91       	ld	r27, X
    13dc:	a0 2d       	mov	r26, r0
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
				for (j = 0; j < random_order[i]; j++)
    13de:	4f 5f       	subi	r20, 0xFF	; 255
    13e0:	45 17       	cp	r20, r21
    13e2:	c8 f3       	brcs	.-14     	; 0x13d6 <build_play_list+0x1b4>
				    current_note = current_note->next_note_by_pitch;
				sequencer->play_list[play_list_index++] = current_note;
    13e4:	fb 01       	movw	r30, r22
    13e6:	a1 93       	st	Z+, r26
    13e8:	b1 93       	st	Z+, r27
    13ea:	bf 01       	movw	r22, r30
				j = rand() % note_list_size;
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
    13ec:	68 17       	cp	r22, r24
    13ee:	79 07       	cpc	r23, r25
    13f0:	51 f7       	brne	.-44     	; 0x13c6 <build_play_list+0x1a4>
    13f2:	89 2d       	mov	r24, r9
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <build_play_list+0x1d6>
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    
    uint8_t play_list_index = 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
		//case 5:
		    
    }

    //option to mirror the pattern
    if (mirror){
    13f8:	88 20       	and	r8, r8
    13fa:	41 f1       	breq	.+80     	; 0x144c <build_play_list+0x22a>
        uint8_t edge_scale;
        uint8_t k;

        if (MIRROR_EDGE_DOUBLE == true){
            //double edge
            mirrored_length = play_list_index*2;
    13fc:	e8 2e       	mov	r14, r24
    13fe:	ee 0c       	add	r14, r14
            else{
                mirrored_length = play_list_index*2 - 2;
                edge_scale = 0;
            }
        }
        if (mirrored_length){
    1400:	29 f1       	breq	.+74     	; 0x144c <build_play_list+0x22a>
            play_list_index += -1;
    1402:	81 50       	subi	r24, 0x01	; 1
            for (k = 1; play_list_index + k < mirrored_length; k++){
    1404:	cc 24       	eor	r12, r12
    1406:	c3 94       	inc	r12
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	4e 2d       	mov	r20, r14
    140c:	50 e0       	ldi	r21, 0x00	; 0
                sequencer->play_list[play_list_index + k] = sequencer->play_list[play_list_index - k + edge_scale];
    140e:	9c 01       	movw	r18, r24
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
                edge_scale = 0;
            }
        }
        if (mirrored_length){
            play_list_index += -1;
            for (k = 1; play_list_index + k < mirrored_length; k++){
    1414:	12 c0       	rjmp	.+36     	; 0x143a <build_play_list+0x218>
                sequencer->play_list[play_list_index + k] = sequencer->play_list[play_list_index - k + edge_scale];
    1416:	aa 0f       	add	r26, r26
    1418:	bb 1f       	adc	r27, r27
    141a:	a0 0f       	add	r26, r16
    141c:	b1 1f       	adc	r27, r17
    141e:	f9 01       	movw	r30, r18
    1420:	e6 1b       	sub	r30, r22
    1422:	f7 0b       	sbc	r31, r23
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	e0 0f       	add	r30, r16
    142a:	f1 1f       	adc	r31, r17
    142c:	61 89       	ldd	r22, Z+17	; 0x11
    142e:	72 89       	ldd	r23, Z+18	; 0x12
    1430:	51 96       	adiw	r26, 0x11	; 17
    1432:	6d 93       	st	X+, r22
    1434:	7c 93       	st	X, r23
    1436:	52 97       	sbiw	r26, 0x12	; 18
                edge_scale = 0;
            }
        }
        if (mirrored_length){
            play_list_index += -1;
            for (k = 1; play_list_index + k < mirrored_length; k++){
    1438:	c3 94       	inc	r12
    143a:	6c 2d       	mov	r22, r12
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	db 01       	movw	r26, r22
    1440:	a8 0f       	add	r26, r24
    1442:	b9 1f       	adc	r27, r25
    1444:	a4 17       	cp	r26, r20
    1446:	b5 07       	cpc	r27, r21
    1448:	34 f3       	brlt	.-52     	; 0x1416 <build_play_list+0x1f4>
    144a:	8e 2d       	mov	r24, r14
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index - 1;
    144c:	81 50       	subi	r24, 0x01	; 1
    144e:	d8 01       	movw	r26, r16
    1450:	17 96       	adiw	r26, 0x07	; 7
    1452:	8c 93       	st	X, r24
    1454:	17 97       	sbiw	r26, 0x07	; 7
    
    //check if the list is now shorter than the current note_index
//    while (sequencer->note_index > sequencer->note_max)
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    1456:	13 96       	adiw	r26, 0x03	; 3
    1458:	1c 92       	st	X, r1
    145a:	13 97       	sbiw	r26, 0x03	; 3
    
    return;
}
    145c:	2d be       	out	0x3d, r2	; 61
    145e:	3e be       	out	0x3e, r3	; 62
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	7f 90       	pop	r7
    147a:	6f 90       	pop	r6
    147c:	5f 90       	pop	r5
    147e:	4f 90       	pop	r4
    1480:	3f 90       	pop	r3
    1482:	2f 90       	pop	r2
    1484:	08 95       	ret

00001486 <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    148c:	e0 e0       	ldi	r30, 0x00	; 0
    148e:	f8 e0       	ldi	r31, 0x08	; 8
    1490:	80 91 01 08 	lds	r24, 0x0801
    1494:	8f 7d       	andi	r24, 0xDF	; 223
    1496:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    1498:	80 91 01 08 	lds	r24, 0x0801
    149c:	8f 7b       	andi	r24, 0xBF	; 191
    149e:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    14a0:	80 91 07 08 	lds	r24, 0x0807
    14a4:	8f 7c       	andi	r24, 0xCF	; 207
    14a6:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    14a8:	80 91 07 08 	lds	r24, 0x0807
    14ac:	80 62       	ori	r24, 0x20	; 32
    14ae:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    14b0:	80 91 07 08 	lds	r24, 0x0807
    14b4:	83 7f       	andi	r24, 0xF3	; 243
    14b6:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    14b8:	80 91 07 08 	lds	r24, 0x0807
    14bc:	88 60       	ori	r24, 0x08	; 8
    14be:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    14c0:	ce 01       	movw	r24, r28
    14c2:	8f 58       	subi	r24, 0x8F	; 143
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    14ca:	fe 01       	movw	r30, r28
    14cc:	71 96       	adiw	r30, 0x11	; 17
    14ce:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    14d0:	11 92       	st	Z+, r1
    14d2:	11 92       	st	Z+, r1
    14d4:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <initialize_sequencer+0x4a>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    14d8:	1c 82       	std	Y+4, r1	; 0x04
    sequencer->octave_index = 0;
    14da:	1e 82       	std	Y+6, r1	; 0x06
    sequencer->repeat_index = 0;
    14dc:	1d 82       	std	Y+5, r1	; 0x05
    sequencer->note_max = 0;
    14de:	1f 82       	std	Y+7, r1	; 0x07
    sequencer->repeat_max = 0;
    14e0:	18 86       	std	Y+8, r1	; 0x08
    sequencer->octave_max = 0;
    14e2:	19 86       	std	Y+9, r1	; 0x09
    sequencer->start_time_increment = 0;
    14e4:	1a 86       	std	Y+10, r1	; 0x0a
    14e6:	1b 86       	std	Y+11, r1	; 0x0b
    sequencer->stop_time_increment = 0;
    14e8:	1c 86       	std	Y+12, r1	; 0x0c
    14ea:	1d 86       	std	Y+13, r1	; 0x0d
    sequencer->pattern = 0;
    14ec:	1e 86       	std	Y+14, r1	; 0x0e
    sequencer->duration = 0;
    14ee:	1f 86       	std	Y+15, r1	; 0x0f
    sequencer->division = 0;
    14f0:	18 8a       	std	Y+16, r1	; 0x10
    sequencer->play_status = 0;
    14f2:	1a 82       	std	Y+2, r1	; 0x02
    sequencer->enable = 0;
    14f4:	18 82       	st	Y, r1
    sequencer->rebuild_play_list = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    14fa:	ce 01       	movw	r24, r28
    14fc:	0e 94 2e 08 	call	0x105c	; 0x105c <calculate_start_time_increment>
    calculate_stop_time_increment(sequencer);
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <calculate_stop_time_increment>
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <set_rebuild_play_list>:
    return;
}


void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    150c:	fc 01       	movw	r30, r24
    150e:	63 83       	std	Z+3, r22	; 0x03
}
    1510:	08 95       	ret

00001512 <continue_sequencer>:
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment || restart)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	61 97       	sbiw	r28, 0x11	; 17
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	8c 01       	movw	r16, r24
    152a:	f6 2e       	mov	r15, r22
	if (!(sequencer->enable))
    152c:	dc 01       	movw	r26, r24
    152e:	8c 91       	ld	r24, X
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <continue_sequencer+0x24>
    1534:	a2 c1       	rjmp	.+836    	; 0x187a <continue_sequencer+0x368>
	    return;
	
    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	f8 e0       	ldi	r31, 0x08	; 8
    153a:	80 91 01 08 	lds	r24, 0x0801
    153e:	8f 7d       	andi	r24, 0xDF	; 223
    1540:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    1542:	80 91 01 08 	lds	r24, 0x0801
    1546:	8f 7b       	andi	r24, 0xBF	; 191
    1548:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    154a:	80 91 0c 08 	lds	r24, 0x080C
    154e:	80 62       	ori	r24, 0x20	; 32
    1550:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1552:	80 91 0c 08 	lds	r24, 0x080C
    1556:	80 64       	ori	r24, 0x40	; 64
    1558:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    155a:	f8 01       	movw	r30, r16
    155c:	ef 58       	subi	r30, 0x8F	; 143
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	88 23       	and	r24, r24
    1564:	09 f4       	brne	.+2      	; 0x1568 <continue_sequencer+0x56>
    1566:	89 c1       	rjmp	.+786    	; 0x187a <continue_sequencer+0x368>
        return;
    
    current_time = (uint32_t) TCC0.CNT;
    1568:	80 91 20 08 	lds	r24, 0x0820
    156c:	90 91 21 08 	lds	r25, 0x0821
    1570:	a0 e0       	ldi	r26, 0x00	; 0
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	8e 83       	std	Y+6, r24	; 0x06
    1576:	9f 83       	std	Y+7, r25	; 0x07
    1578:	a8 87       	std	Y+8, r26	; 0x08
    157a:	b9 87       	std	Y+9, r27	; 0x09
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    157c:	f8 01       	movw	r30, r16
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	88 23       	and	r24, r24
    1582:	59 f1       	breq	.+86     	; 0x15da <continue_sequencer+0xc8>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    1584:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1588:	d8 01       	movw	r26, r16
    158a:	14 96       	adiw	r26, 0x04	; 4
    158c:	ec 91       	ld	r30, X
    158e:	14 97       	sbiw	r26, 0x04	; 4
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	e0 0f       	add	r30, r16
    1598:	f1 1f       	adc	r31, r17
    159a:	01 88       	ldd	r0, Z+17	; 0x11
    159c:	f2 89       	ldd	r31, Z+18	; 0x12
    159e:	e0 2d       	mov	r30, r0
    15a0:	16 96       	adiw	r26, 0x06	; 6
    15a2:	4c 91       	ld	r20, X
    15a4:	16 97       	sbiw	r26, 0x06	; 6
    15a6:	2c e0       	ldi	r18, 0x0C	; 12
    15a8:	42 9f       	mul	r20, r18
    15aa:	a0 01       	movw	r20, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	21 81       	ldd	r18, Z+1	; 0x01
    15b0:	42 0f       	add	r20, r18
    15b2:	51 1d       	adc	r21, r1
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <continue_sequencer+0xa8>
	while (final_pitch > 255)
	        final_pitch -= 12;
    15b6:	4c 50       	subi	r20, 0x0C	; 12
    15b8:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    15ba:	4f 3f       	cpi	r20, 0xFF	; 255
    15bc:	51 05       	cpc	r21, r1
    15be:	09 f0       	breq	.+2      	; 0x15c2 <continue_sequencer+0xb0>
    15c0:	d0 f7       	brcc	.-12     	; 0x15b6 <continue_sequencer+0xa4>
    
    current_time = (uint32_t) TCC0.CNT;
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	22 81       	ldd	r18, Z+2	; 0x02
    15c6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	0e 94 21 03 	call	0x642	; 0x642 <set_LEDs_off>
        sequencer->play_status = 0;
    15d6:	f8 01       	movw	r30, r16
    15d8:	12 82       	std	Z+2, r1	; 0x02
}


static void set_sequencer_parameters(Sequencer* sequencer, bool restart){
    //read the new values from the pots
    volatile uint8_t octave_max_new = get_pot_value(POT_SEL_OCTAVE, POT_MIN_OCTAVE, POT_MAX_OCTAVE);
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	47 e0       	ldi	r20, 0x07	; 7
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 04 02 	call	0x408	; 0x408 <get_pot_value>
    15e8:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t repeat_max_new = get_pot_value(POT_SEL_REPEAT, POT_MIN_REPEAT, POT_MAX_REPEAT);
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	47 e0       	ldi	r20, 0x07	; 7
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	0e 94 04 02 	call	0x408	; 0x408 <get_pot_value>
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint8_t division_new = get_pot_value(POT_SEL_DIVISION, POT_MIN_DIVISION, POT_MAX_DIVISION);
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	46 e0       	ldi	r20, 0x06	; 6
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	0e 94 04 02 	call	0x408	; 0x408 <get_pot_value>
    1608:	8b 83       	std	Y+3, r24	; 0x03
    volatile uint8_t duration_new = get_pot_value(POT_SEL_DURATION, POT_MIN_DURATION, POT_MAX_DURATION);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	6b e0       	ldi	r22, 0x0B	; 11
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	4f ef       	ldi	r20, 0xFF	; 255
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	0e 94 04 02 	call	0x408	; 0x408 <get_pot_value>
    1618:	8c 83       	std	Y+4, r24	; 0x04
    volatile uint8_t pattern_new = get_pot_value(POT_SEL_PATTERN, POT_MIN_PATTERN, POT_MAX_PATTERN);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	44 e0       	ldi	r20, 0x04	; 4
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	0e 94 04 02 	call	0x408	; 0x408 <get_pot_value>
    1628:	8d 83       	std	Y+5, r24	; 0x05
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    162a:	d8 01       	movw	r26, r16
    162c:	18 96       	adiw	r26, 0x08	; 8
    162e:	2c 91       	ld	r18, X
    1630:	18 97       	sbiw	r26, 0x08	; 8
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	50 96       	adiw	r26, 0x10	; 16
    1638:	3c 91       	ld	r19, X
    163a:	50 97       	sbiw	r26, 0x10	; 16
    163c:	38 17       	cp	r19, r24
    163e:	29 f4       	brne	.+10     	; 0x164a <continue_sequencer+0x138>
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment || restart)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	29 17       	cp	r18, r25
    1644:	19 f4       	brne	.+6      	; 0x164c <continue_sequencer+0x13a>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	01 c0       	rjmp	.+2      	; 0x164c <continue_sequencer+0x13a>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	f8 01       	movw	r30, r16
    1650:	27 85       	ldd	r18, Z+15	; 0x0f
    1652:	29 17       	cp	r18, r25
    1654:	11 f4       	brne	.+4      	; 0x165a <continue_sequencer+0x148>
    1656:	e8 2e       	mov	r14, r24
    1658:	02 c0       	rjmp	.+4      	; 0x165e <continue_sequencer+0x14c>
        update_stop_time_increment = 1;
    165a:	ee 24       	eor	r14, r14
    165c:	e3 94       	inc	r14
    }
    
    if (sequencer->pattern != pattern_new){
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	d8 01       	movw	r26, r16
    1662:	1e 96       	adiw	r26, 0x0e	; 14
    1664:	2c 91       	ld	r18, X
    1666:	1e 97       	sbiw	r26, 0x0e	; 14
    1668:	29 17       	cp	r18, r25
    166a:	21 f0       	breq	.+8      	; 0x1674 <continue_sequencer+0x162>
        sequencer->rebuild_play_list = 1;
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	13 96       	adiw	r26, 0x03	; 3
    1670:	9c 93       	st	X, r25
    1672:	13 97       	sbiw	r26, 0x03	; 3
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	f8 01       	movw	r30, r16
    1678:	91 87       	std	Z+9, r25	; 0x09
    sequencer->repeat_max = repeat_max_new;
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	90 87       	std	Z+8, r25	; 0x08
    sequencer->division = division_new;
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	90 8b       	std	Z+16, r25	; 0x10
    sequencer->duration = duration_new;
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	97 87       	std	Z+15, r25	; 0x0f
    sequencer->pattern = pattern_new;
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	96 87       	std	Z+14, r25	; 0x0e
    
    if (update_start_time_increment || restart)
    168a:	88 23       	and	r24, r24
    168c:	11 f4       	brne	.+4      	; 0x1692 <continue_sequencer+0x180>
    168e:	ff 20       	and	r15, r15
    1690:	19 f0       	breq	.+6      	; 0x1698 <continue_sequencer+0x186>
        calculate_start_time_increment(sequencer);
    1692:	c8 01       	movw	r24, r16
    1694:	0e 94 2e 08 	call	0x105c	; 0x105c <calculate_start_time_increment>
    if (update_stop_time_increment || restart)
    1698:	ee 20       	and	r14, r14
    169a:	11 f4       	brne	.+4      	; 0x16a0 <continue_sequencer+0x18e>
    169c:	ff 20       	and	r15, r15
    169e:	19 f0       	breq	.+6      	; 0x16a6 <continue_sequencer+0x194>
        calculate_stop_time_increment(sequencer);
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <calculate_stop_time_increment>
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer, restart);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	48 85       	ldd	r20, Y+8	; 0x08
    16ac:	59 85       	ldd	r21, Y+9	; 0x09
    16ae:	d8 01       	movw	r26, r16
    16b0:	1a 96       	adiw	r26, 0x0a	; 10
    16b2:	8d 91       	ld	r24, X+
    16b4:	9c 91       	ld	r25, X
    16b6:	1b 97       	sbiw	r26, 0x0b	; 11
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	82 0f       	add	r24, r18
    16be:	93 1f       	adc	r25, r19
    16c0:	a4 1f       	adc	r26, r20
    16c2:	b5 1f       	adc	r27, r21
    16c4:	8a 87       	std	Y+10, r24	; 0x0a
    16c6:	9b 87       	std	Y+11, r25	; 0x0b
    16c8:	ac 87       	std	Y+12, r26	; 0x0c
    16ca:	bd 87       	std	Y+13, r27	; 0x0d
    next_stop_time = current_time + sequencer->stop_time_increment;
    16cc:	2e 81       	ldd	r18, Y+6	; 0x06
    16ce:	3f 81       	ldd	r19, Y+7	; 0x07
    16d0:	48 85       	ldd	r20, Y+8	; 0x08
    16d2:	59 85       	ldd	r21, Y+9	; 0x09
    16d4:	f8 01       	movw	r30, r16
    16d6:	84 85       	ldd	r24, Z+12	; 0x0c
    16d8:	95 85       	ldd	r25, Z+13	; 0x0d
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	a4 1f       	adc	r26, r20
    16e4:	b5 1f       	adc	r27, r21
    16e6:	8e 87       	std	Y+14, r24	; 0x0e
    16e8:	9f 87       	std	Y+15, r25	; 0x0f
    16ea:	a8 8b       	std	Y+16, r26	; 0x10
    16ec:	b9 8b       	std	Y+17, r27	; 0x11
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    16ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    16f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    16f2:	4c 85       	ldd	r20, Y+12	; 0x0c
    16f4:	5d 85       	ldd	r21, Y+13	; 0x0d
    16f6:	80 91 28 08 	lds	r24, 0x0828
    16fa:	90 91 29 08 	lds	r25, 0x0829
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	82 17       	cp	r24, r18
    1704:	93 07       	cpc	r25, r19
    1706:	a4 07       	cpc	r26, r20
    1708:	b5 07       	cpc	r27, r21
    170a:	90 f4       	brcc	.+36     	; 0x1730 <continue_sequencer+0x21e>
        next_start_time = next_start_time - TCC0.CCA;
    170c:	8a 85       	ldd	r24, Y+10	; 0x0a
    170e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1710:	ac 85       	ldd	r26, Y+12	; 0x0c
    1712:	bd 85       	ldd	r27, Y+13	; 0x0d
    1714:	20 91 28 08 	lds	r18, 0x0828
    1718:	30 91 29 08 	lds	r19, 0x0829
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	82 1b       	sub	r24, r18
    1722:	93 0b       	sbc	r25, r19
    1724:	a4 0b       	sbc	r26, r20
    1726:	b5 0b       	sbc	r27, r21
    1728:	8a 87       	std	Y+10, r24	; 0x0a
    172a:	9b 87       	std	Y+11, r25	; 0x0b
    172c:	ac 87       	std	Y+12, r26	; 0x0c
    172e:	bd 87       	std	Y+13, r27	; 0x0d
    if (next_stop_time > TCC0.CCA)
    1730:	2e 85       	ldd	r18, Y+14	; 0x0e
    1732:	3f 85       	ldd	r19, Y+15	; 0x0f
    1734:	48 89       	ldd	r20, Y+16	; 0x10
    1736:	59 89       	ldd	r21, Y+17	; 0x11
    1738:	80 91 28 08 	lds	r24, 0x0828
    173c:	90 91 29 08 	lds	r25, 0x0829
    1740:	a0 e0       	ldi	r26, 0x00	; 0
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	82 17       	cp	r24, r18
    1746:	93 07       	cpc	r25, r19
    1748:	a4 07       	cpc	r26, r20
    174a:	b5 07       	cpc	r27, r21
    174c:	90 f4       	brcc	.+36     	; 0x1772 <continue_sequencer+0x260>
        next_stop_time = next_stop_time - TCC0.CCA;
    174e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1750:	9f 85       	ldd	r25, Y+15	; 0x0f
    1752:	a8 89       	ldd	r26, Y+16	; 0x10
    1754:	b9 89       	ldd	r27, Y+17	; 0x11
    1756:	20 91 28 08 	lds	r18, 0x0828
    175a:	30 91 29 08 	lds	r19, 0x0829
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	82 1b       	sub	r24, r18
    1764:	93 0b       	sbc	r25, r19
    1766:	a4 0b       	sbc	r26, r20
    1768:	b5 0b       	sbc	r27, r21
    176a:	8e 87       	std	Y+14, r24	; 0x0e
    176c:	9f 87       	std	Y+15, r25	; 0x0f
    176e:	a8 8b       	std	Y+16, r26	; 0x10
    1770:	b9 8b       	std	Y+17, r27	; 0x11
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    1772:	8a 85       	ldd	r24, Y+10	; 0x0a
    1774:	9b 85       	ldd	r25, Y+11	; 0x0b
    1776:	ac 85       	ldd	r26, Y+12	; 0x0c
    1778:	bd 85       	ldd	r27, Y+13	; 0x0d
    177a:	e0 e0       	ldi	r30, 0x00	; 0
    177c:	f8 e0       	ldi	r31, 0x08	; 8
    177e:	82 a7       	std	Z+42, r24	; 0x2a
    1780:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    1782:	8e 85       	ldd	r24, Y+14	; 0x0e
    1784:	9f 85       	ldd	r25, Y+15	; 0x0f
    1786:	a8 89       	ldd	r26, Y+16	; 0x10
    1788:	b9 89       	ldd	r27, Y+17	; 0x11
    178a:	84 a7       	std	Z+44, r24	; 0x2c
    178c:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    178e:	d8 01       	movw	r26, r16
    1790:	13 96       	adiw	r26, 0x03	; 3
    1792:	8c 91       	ld	r24, X
    1794:	13 97       	sbiw	r26, 0x03	; 3
    1796:	88 23       	and	r24, r24
    1798:	19 f0       	breq	.+6      	; 0x17a0 <continue_sequencer+0x28e>
        build_play_list(sequencer);
    179a:	c8 01       	movw	r24, r16
    179c:	0e 94 11 09 	call	0x1222	; 0x1222 <build_play_list>
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    17a0:	ff 20       	and	r15, r15
    17a2:	59 f5       	brne	.+86     	; 0x17fa <continue_sequencer+0x2e8>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    17a4:	f8 01       	movw	r30, r16
    17a6:	85 81       	ldd	r24, Z+5	; 0x05
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	85 83       	std	Z+5, r24	; 0x05
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    17ac:	90 85       	ldd	r25, Z+8	; 0x08
    17ae:	98 17       	cp	r25, r24
    17b0:	20 f4       	brcc	.+8      	; 0x17ba <continue_sequencer+0x2a8>
        sequencer->repeat_index = 0;
    17b2:	15 82       	std	Z+5, r1	; 0x05
        sequencer->note_index += 1;
    17b4:	84 81       	ldd	r24, Z+4	; 0x04
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	84 83       	std	Z+4, r24	; 0x04
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    17ba:	d8 01       	movw	r26, r16
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	9c 91       	ld	r25, X
    17c0:	14 97       	sbiw	r26, 0x04	; 4
    17c2:	17 96       	adiw	r26, 0x07	; 7
    17c4:	8c 91       	ld	r24, X
    17c6:	17 97       	sbiw	r26, 0x07	; 7
    17c8:	89 17       	cp	r24, r25
    17ca:	50 f4       	brcc	.+20     	; 0x17e0 <continue_sequencer+0x2ce>
        sequencer->note_index = 0;
    17cc:	14 96       	adiw	r26, 0x04	; 4
    17ce:	1c 92       	st	X, r1
    17d0:	14 97       	sbiw	r26, 0x04	; 4
        sequencer->octave_index += 1;		
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	8c 91       	ld	r24, X
    17d6:	16 97       	sbiw	r26, 0x06	; 6
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	16 96       	adiw	r26, 0x06	; 6
    17dc:	8c 93       	st	X, r24
    17de:	16 97       	sbiw	r26, 0x06	; 6
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    17e0:	f8 01       	movw	r30, r16
    17e2:	96 81       	ldd	r25, Z+6	; 0x06
    17e4:	81 85       	ldd	r24, Z+9	; 0x09
    17e6:	89 17       	cp	r24, r25
    17e8:	88 f4       	brcc	.+34     	; 0x180c <continue_sequencer+0x2fa>
        sequencer->octave_index = 0;
    17ea:	16 82       	std	Z+6, r1	; 0x06
		
		//build a new random playlist if necessary
		if (sequencer->pattern == 4)
    17ec:	86 85       	ldd	r24, Z+14	; 0x0e
    17ee:	84 30       	cpi	r24, 0x04	; 4
    17f0:	69 f4       	brne	.+26     	; 0x180c <continue_sequencer+0x2fa>
		    build_play_list(sequencer);
    17f2:	c8 01       	movw	r24, r16
    17f4:	0e 94 11 09 	call	0x1222	; 0x1222 <build_play_list>
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <continue_sequencer+0x2fa>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    17fa:	d8 01       	movw	r26, r16
    17fc:	16 96       	adiw	r26, 0x06	; 6
    17fe:	1c 92       	st	X, r1
    1800:	16 97       	sbiw	r26, 0x06	; 6
    sequencer->note_index = 0;
    1802:	14 96       	adiw	r26, 0x04	; 4
    1804:	1c 92       	st	X, r1
    1806:	14 97       	sbiw	r26, 0x04	; 4
    sequencer->repeat_index = 0;
    1808:	15 96       	adiw	r26, 0x05	; 5
    180a:	1c 92       	st	X, r1
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    180c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1810:	d8 01       	movw	r26, r16
    1812:	14 96       	adiw	r26, 0x04	; 4
    1814:	ec 91       	ld	r30, X
    1816:	14 97       	sbiw	r26, 0x04	; 4
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	e0 0f       	add	r30, r16
    1820:	f1 1f       	adc	r31, r17
    1822:	01 88       	ldd	r0, Z+17	; 0x11
    1824:	f2 89       	ldd	r31, Z+18	; 0x12
    1826:	e0 2d       	mov	r30, r0
    1828:	16 96       	adiw	r26, 0x06	; 6
    182a:	4c 91       	ld	r20, X
    182c:	16 97       	sbiw	r26, 0x06	; 6
    182e:	2c e0       	ldi	r18, 0x0C	; 12
    1830:	42 9f       	mul	r20, r18
    1832:	a0 01       	movw	r20, r0
    1834:	11 24       	eor	r1, r1
    1836:	21 81       	ldd	r18, Z+1	; 0x01
    1838:	42 0f       	add	r20, r18
    183a:	51 1d       	adc	r21, r1
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <continue_sequencer+0x330>
	while (final_pitch > 255)
	        final_pitch -= 12;
    183e:	4c 50       	subi	r20, 0x0C	; 12
    1840:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    1842:	4f 3f       	cpi	r20, 0xFF	; 255
    1844:	51 05       	cpc	r21, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <continue_sequencer+0x338>
    1848:	d0 f7       	brcc	.-12     	; 0x183e <continue_sequencer+0x32c>
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	22 81       	ldd	r18, Z+2	; 0x02
    184e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <midi_send_noteon>
    set_LEDs_on(1,0,0,0);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	0e 94 08 03 	call	0x610	; 0x610 <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	f8 01       	movw	r30, r16
    1862:	82 83       	std	Z+2, r24	; 0x02
    
    //set run flag
    sequencer->run_status = 1;
    1864:	81 83       	std	Z+1, r24	; 0x01
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    1866:	e0 e0       	ldi	r30, 0x00	; 0
    1868:	f8 e0       	ldi	r31, 0x08	; 8
    186a:	80 91 01 08 	lds	r24, 0x0801
    186e:	80 62       	ori	r24, 0x20	; 32
    1870:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    1872:	80 91 01 08 	lds	r24, 0x0801
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	81 83       	std	Z+1, r24	; 0x01
}
    187a:	61 96       	adiw	r28, 0x11	; 17
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	08 95       	ret

0000188e <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	16 2f       	mov	r17, r22
	if (!(sequencer->enable))
    1898:	88 81       	ld	r24, Y
    189a:	88 23       	and	r24, r24
    189c:	09 f4       	brne	.+2      	; 0x18a0 <stop_sequencer+0x12>
    189e:	40 c0       	rjmp	.+128    	; 0x1920 <stop_sequencer+0x92>
	    return;
	
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    18a0:	e0 e0       	ldi	r30, 0x00	; 0
    18a2:	f8 e0       	ldi	r31, 0x08	; 8
    18a4:	80 91 01 08 	lds	r24, 0x0801
    18a8:	8f 7d       	andi	r24, 0xDF	; 223
    18aa:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    18ac:	80 91 01 08 	lds	r24, 0x0801
    18b0:	8f 7b       	andi	r24, 0xBF	; 191
    18b2:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    18b4:	80 91 0c 08 	lds	r24, 0x080C
    18b8:	80 64       	ori	r24, 0x40	; 64
    18ba:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	88 23       	and	r24, r24
    18c0:	29 f1       	breq	.+74     	; 0x190c <stop_sequencer+0x7e>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    18c2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    18c6:	ec 81       	ldd	r30, Y+4	; 0x04
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	ec 0f       	add	r30, r28
    18d0:	fd 1f       	adc	r31, r29
    18d2:	01 88       	ldd	r0, Z+17	; 0x11
    18d4:	f2 89       	ldd	r31, Z+18	; 0x12
    18d6:	e0 2d       	mov	r30, r0
    18d8:	4e 81       	ldd	r20, Y+6	; 0x06
    18da:	2c e0       	ldi	r18, 0x0C	; 12
    18dc:	42 9f       	mul	r20, r18
    18de:	a0 01       	movw	r20, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	21 81       	ldd	r18, Z+1	; 0x01
    18e4:	42 0f       	add	r20, r18
    18e6:	51 1d       	adc	r21, r1
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <stop_sequencer+0x60>
	while (final_pitch > 255)
	        final_pitch -= 12;
    18ea:	4c 50       	subi	r20, 0x0C	; 12
    18ec:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    18ee:	4f 3f       	cpi	r20, 0xFF	; 255
    18f0:	51 05       	cpc	r21, r1
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <stop_sequencer+0x68>
    18f4:	d0 f7       	brcc	.-12     	; 0x18ea <stop_sequencer+0x5c>
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    
    //stop the current note if it's playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	22 81       	ldd	r18, Z+2	; 0x02
    18fa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <midi_send_noteoff>
		set_LEDs_off(1,0,0,0);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	0e 94 21 03 	call	0x642	; 0x642 <set_LEDs_off>
        sequencer->play_status = 0;
    190a:	1a 82       	std	Y+2, r1	; 0x02
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, reenable the note on interrupt
    if (full_stop)
    190c:	11 23       	and	r17, r17
    190e:	11 f0       	breq	.+4      	; 0x1914 <stop_sequencer+0x86>
        sequencer->run_status = 0;
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <stop_sequencer+0x92>
    else    
        TCC0.CTRLB |= 0x20;
    1914:	80 91 01 08 	lds	r24, 0x0801
    1918:	80 62       	ori	r24, 0x20	; 32
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f8 e0       	ldi	r31, 0x08	; 8
    191e:	81 83       	std	Z+1, r24	; 0x01
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	08 95       	ret

00001928 <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    1932:	8c 01       	movw	r16, r24
    1934:	0f 58       	subi	r16, 0x8F	; 143
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	c8 01       	movw	r24, r16
    193a:	0e 94 0c 07 	call	0xe18	; 0xe18 <insert_note>
    193e:	88 23       	and	r24, r24
    1940:	51 f0       	breq	.+20     	; 0x1956 <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;   
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	8b 83       	std	Y+3, r24	; 0x03

        if (sequencer->note_list.length == 1)
    1946:	f8 01       	movw	r30, r16
    1948:	80 81       	ld	r24, Z
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	21 f4       	brne	.+8      	; 0x1956 <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    194e:	ce 01       	movw	r24, r28
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	0e 94 89 0a 	call	0x1512	; 0x1512 <continue_sequencer>
					
    }
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	08 95       	ret

00001960 <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	ec 01       	movw	r28, r24
    196c:	f6 2e       	mov	r15, r22
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
	
	//if note is playing, stop it
	if (sequencer->play_list[sequencer->note_index]->pitch == pitch)
    196e:	ec 81       	ldd	r30, Y+4	; 0x04
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	e8 0f       	add	r30, r24
    1978:	f9 1f       	adc	r31, r25
    197a:	01 88       	ldd	r0, Z+17	; 0x11
    197c:	f2 89       	ldd	r31, Z+18	; 0x12
    197e:	e0 2d       	mov	r30, r0
    1980:	81 81       	ldd	r24, Z+1	; 0x01
    1982:	86 17       	cp	r24, r22
    1984:	21 f4       	brne	.+8      	; 0x198e <remove_note_from_arpeggiator+0x2e>
	    stop_sequencer(sequencer,0);
    1986:	ce 01       	movw	r24, r28
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	0e 94 47 0c 	call	0x188e	; 0x188e <stop_sequencer>
		
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    198e:	8e 01       	movw	r16, r28
    1990:	0f 58       	subi	r16, 0x8F	; 143
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	c8 01       	movw	r24, r16
    1996:	6f 2d       	mov	r22, r15
    1998:	0e 94 a5 06 	call	0xd4a	; 0xd4a <remove_note_by_pitch>
    199c:	88 23       	and	r24, r24
    199e:	51 f0       	breq	.+20     	; 0x19b4 <remove_note_from_arpeggiator+0x54>
        sequencer->rebuild_play_list = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	8b 83       	std	Y+3, r24	; 0x03
        
        if (sequencer->note_list.length == 0)
    19a4:	f8 01       	movw	r30, r16
    19a6:	80 81       	ld	r24, Z
    19a8:	88 23       	and	r24, r24
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <remove_note_from_arpeggiator+0x54>
            stop_sequencer(sequencer, 1);
    19ac:	ce 01       	movw	r24, r28
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	0e 94 47 0c 	call	0x188e	; 0x188e <stop_sequencer>
    }	
	
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	08 95       	ret

000019c0 <bpm_change_postprocess>:

void bpm_change_postprocess(Sequencer* sequencer){
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	2c 97       	sbiw	r28, 0x0c	; 12
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	8c 01       	movw	r16, r24
    //if the sequencer is running while the bpm changes, calculate the new start/stop increments and reset the 
	if (!(sequencer->enable) || !(sequencer->run_status))
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	88 23       	and	r24, r24
    19da:	09 f4       	brne	.+2      	; 0x19de <bpm_change_postprocess+0x1e>
    19dc:	a6 c0       	rjmp	.+332    	; 0x1b2a <bpm_change_postprocess+0x16a>
    19de:	81 81       	ldd	r24, Z+1	; 0x01
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <bpm_change_postprocess+0x26>
    19e4:	a2 c0       	rjmp	.+324    	; 0x1b2a <bpm_change_postprocess+0x16a>
	    return;
	
    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    19e6:	e0 e0       	ldi	r30, 0x00	; 0
    19e8:	f8 e0       	ldi	r31, 0x08	; 8
    19ea:	80 91 01 08 	lds	r24, 0x0801
    19ee:	8f 7d       	andi	r24, 0xDF	; 223
    19f0:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    19f2:	80 91 01 08 	lds	r24, 0x0801
    19f6:	8f 7b       	andi	r24, 0xBF	; 191
    19f8:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    19fa:	80 91 0c 08 	lds	r24, 0x080C
    19fe:	80 62       	ori	r24, 0x20	; 32
    1a00:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1a02:	80 91 0c 08 	lds	r24, 0x080C
    1a06:	80 64       	ori	r24, 0x40	; 64
    1a08:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	ef 58       	subi	r30, 0x8F	; 143
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <bpm_change_postprocess+0x58>
    1a16:	89 c0       	rjmp	.+274    	; 0x1b2a <bpm_change_postprocess+0x16a>
        return;
    
    current_time = (uint32_t) TCC0.CNT;
    1a18:	80 91 20 08 	lds	r24, 0x0820
    1a1c:	90 91 21 08 	lds	r25, 0x0821
    1a20:	a0 e0       	ldi	r26, 0x00	; 0
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	ab 83       	std	Y+3, r26	; 0x03
    1a2a:	bc 83       	std	Y+4, r27	; 0x04
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer, restart);
    */
    
	//CALCULATE NEW TIME INCREMENTS
    calculate_start_time_increment(sequencer);
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	0e 94 2e 08 	call	0x105c	; 0x105c <calculate_start_time_increment>
	calculate_stop_time_increment(sequencer);
    1a32:	c8 01       	movw	r24, r16
    1a34:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <calculate_stop_time_increment>
 
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    1a38:	29 81       	ldd	r18, Y+1	; 0x01
    1a3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a3e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a40:	f8 01       	movw	r30, r16
    1a42:	82 85       	ldd	r24, Z+10	; 0x0a
    1a44:	93 85       	ldd	r25, Z+11	; 0x0b
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	a4 1f       	adc	r26, r20
    1a50:	b5 1f       	adc	r27, r21
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	af 83       	std	Y+7, r26	; 0x07
    1a58:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    1a5a:	29 81       	ldd	r18, Y+1	; 0x01
    1a5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a60:	5c 81       	ldd	r21, Y+4	; 0x04
    1a62:	84 85       	ldd	r24, Z+12	; 0x0c
    1a64:	95 85       	ldd	r25, Z+13	; 0x0d
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	82 0f       	add	r24, r18
    1a6c:	93 1f       	adc	r25, r19
    1a6e:	a4 1f       	adc	r26, r20
    1a70:	b5 1f       	adc	r27, r21
    1a72:	89 87       	std	Y+9, r24	; 0x09
    1a74:	9a 87       	std	Y+10, r25	; 0x0a
    1a76:	ab 87       	std	Y+11, r26	; 0x0b
    1a78:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    1a7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a7e:	4f 81       	ldd	r20, Y+7	; 0x07
    1a80:	58 85       	ldd	r21, Y+8	; 0x08
    1a82:	80 91 28 08 	lds	r24, 0x0828
    1a86:	90 91 29 08 	lds	r25, 0x0829
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	82 17       	cp	r24, r18
    1a90:	93 07       	cpc	r25, r19
    1a92:	a4 07       	cpc	r26, r20
    1a94:	b5 07       	cpc	r27, r21
    1a96:	90 f4       	brcc	.+36     	; 0x1abc <bpm_change_postprocess+0xfc>
        next_start_time = next_start_time - TCC0.CCA;
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	af 81       	ldd	r26, Y+7	; 0x07
    1a9e:	b8 85       	ldd	r27, Y+8	; 0x08
    1aa0:	20 91 28 08 	lds	r18, 0x0828
    1aa4:	30 91 29 08 	lds	r19, 0x0829
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	82 1b       	sub	r24, r18
    1aae:	93 0b       	sbc	r25, r19
    1ab0:	a4 0b       	sbc	r26, r20
    1ab2:	b5 0b       	sbc	r27, r21
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	af 83       	std	Y+7, r26	; 0x07
    1aba:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    1abc:	29 85       	ldd	r18, Y+9	; 0x09
    1abe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ac0:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ac2:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ac4:	80 91 28 08 	lds	r24, 0x0828
    1ac8:	90 91 29 08 	lds	r25, 0x0829
    1acc:	a0 e0       	ldi	r26, 0x00	; 0
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	a4 07       	cpc	r26, r20
    1ad6:	b5 07       	cpc	r27, r21
    1ad8:	90 f4       	brcc	.+36     	; 0x1afe <bpm_change_postprocess+0x13e>
        next_stop_time = next_stop_time - TCC0.CCA;
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ae0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ae2:	20 91 28 08 	lds	r18, 0x0828
    1ae6:	30 91 29 08 	lds	r19, 0x0829
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	82 1b       	sub	r24, r18
    1af0:	93 0b       	sbc	r25, r19
    1af2:	a4 0b       	sbc	r26, r20
    1af4:	b5 0b       	sbc	r27, r21
    1af6:	89 87       	std	Y+9, r24	; 0x09
    1af8:	9a 87       	std	Y+10, r25	; 0x0a
    1afa:	ab 87       	std	Y+11, r26	; 0x0b
    1afc:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	af 81       	ldd	r26, Y+7	; 0x07
    1b04:	b8 85       	ldd	r27, Y+8	; 0x08
    1b06:	e0 e0       	ldi	r30, 0x00	; 0
    1b08:	f8 e0       	ldi	r31, 0x08	; 8
    1b0a:	82 a7       	std	Z+42, r24	; 0x2a
    1b0c:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b14:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b16:	84 a7       	std	Z+44, r24	; 0x2c
    1b18:	95 a7       	std	Z+45, r25	; 0x2d
    
    //set run flag
    sequencer->run_status = 1;
    */
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    1b1a:	80 91 01 08 	lds	r24, 0x0801
    1b1e:	80 62       	ori	r24, 0x20	; 32
    1b20:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;	
    1b22:	80 91 01 08 	lds	r24, 0x0801
    1b26:	80 64       	ori	r24, 0x40	; 64
    1b28:	81 83       	std	Z+1, r24	; 0x01
			
        
}
    1b2a:	2c 96       	adiw	r28, 0x0c	; 12
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <disable_sequencer>:

void disable_sequencer(Sequencer* sequencer){
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
	stop_sequencer(sequencer, 1);
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 47 0c 	call	0x188e	; 0x188e <stop_sequencer>
	sequencer->enable = 0;
    1b46:	18 82       	st	Y, r1
	
	//start all currently held notes (enter THRU)
	for (Note* i = sequencer->note_list.head_trigger; i != NULL; i = i->next_note_by_trigger){
    1b48:	ca 5d       	subi	r28, 0xDA	; 218
    1b4a:	de 4f       	sbci	r29, 0xFE	; 254
    1b4c:	09 90       	ld	r0, Y+
    1b4e:	d8 81       	ld	r29, Y
    1b50:	c0 2d       	mov	r28, r0
    1b52:	0a c0       	rjmp	.+20     	; 0x1b68 <disable_sequencer+0x2e>
	    midi_send_noteon(get_midi_device(), MIDI_CHAN, i->pitch, i->velocity);
    1b54:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	49 81       	ldd	r20, Y+1	; 0x01
    1b5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <midi_send_noteon>
void disable_sequencer(Sequencer* sequencer){
	stop_sequencer(sequencer, 1);
	sequencer->enable = 0;
	
	//start all currently held notes (enter THRU)
	for (Note* i = sequencer->note_list.head_trigger; i != NULL; i = i->next_note_by_trigger){
    1b62:	0f 80       	ldd	r0, Y+7	; 0x07
    1b64:	d8 85       	ldd	r29, Y+8	; 0x08
    1b66:	c0 2d       	mov	r28, r0
    1b68:	20 97       	sbiw	r28, 0x00	; 0
    1b6a:	a1 f7       	brne	.-24     	; 0x1b54 <disable_sequencer+0x1a>
	    midi_send_noteon(get_midi_device(), MIDI_CHAN, i->pitch, i->velocity);
	}
	
	serial_midi_config_bypass(get_midi_device());
    1b6c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
    1b70:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <serial_midi_config_bypass>
	
}
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <enable_sequencer>:

void enable_sequencer(Sequencer* sequencer){
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	8c 01       	movw	r16, r24
	serial_midi_config_active(get_midi_device());
    1b84:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
    1b88:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <serial_midi_config_active>
	
	//stop all currently held notes (exit THRU)
	for (Note* i = sequencer->note_list.head_trigger; i != NULL; i = i->next_note_by_trigger){
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	ea 5d       	subi	r30, 0xDA	; 218
    1b90:	fe 4f       	sbci	r31, 0xFE	; 254
    1b92:	c0 81       	ld	r28, Z
    1b94:	d1 81       	ldd	r29, Z+1	; 0x01
    1b96:	0a c0       	rjmp	.+20     	; 0x1bac <enable_sequencer+0x32>
	    midi_send_noteoff(get_midi_device(), MIDI_CHAN, i->pitch, i->velocity);
    1b98:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <get_midi_device>
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	49 81       	ldd	r20, Y+1	; 0x01
    1ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <midi_send_noteoff>

void enable_sequencer(Sequencer* sequencer){
	serial_midi_config_active(get_midi_device());
	
	//stop all currently held notes (exit THRU)
	for (Note* i = sequencer->note_list.head_trigger; i != NULL; i = i->next_note_by_trigger){
    1ba6:	0f 80       	ldd	r0, Y+7	; 0x07
    1ba8:	d8 85       	ldd	r29, Y+8	; 0x08
    1baa:	c0 2d       	mov	r28, r0
    1bac:	20 97       	sbiw	r28, 0x00	; 0
    1bae:	a1 f7       	brne	.-24     	; 0x1b98 <enable_sequencer+0x1e>
	    midi_send_noteoff(get_midi_device(), MIDI_CHAN, i->pitch, i->velocity);
	}
	
    sequencer->enable = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	80 83       	st	Z, r24
	continue_sequencer(sequencer, 1);	
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 89 0a 	call	0x1512	; 0x1512 <continue_sequencer>
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <serial_midi_send>:

MidiDevice* get_midi_device() {
   return stored_midi_device;
}

void serial_midi_send(MidiDevice* midi_device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1bc8:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1bca:	80 91 b1 09 	lds	r24, 0x09B1
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	fc cf       	rjmp	.-8      	; 0x1bca <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    1bd2:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    1bd6:	62 30       	cpi	r22, 0x02	; 2
    1bd8:	70 f0       	brcs	.+28     	; 0x1bf6 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1bda:	80 91 b1 09 	lds	r24, 0x09B1
    1bde:	85 ff       	sbrs	r24, 5
    1be0:	fc cf       	rjmp	.-8      	; 0x1bda <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    1be2:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    1be6:	63 30       	cpi	r22, 0x03	; 3
    1be8:	31 f4       	brne	.+12     	; 0x1bf6 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1bea:	80 91 b1 09 	lds	r24, 0x09B1
    1bee:	85 ff       	sbrs	r24, 5
    1bf0:	fc cf       	rjmp	.-8      	; 0x1bea <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    1bf2:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <noteoff_to_arpeggiator>:
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
}

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
    1bfa:	80 91 7f 23 	lds	r24, 0x237F
    1bfe:	90 91 80 23 	lds	r25, 0x2380
    1c02:	64 2f       	mov	r22, r20
    1c04:	0e 94 b0 0c 	call	0x1960	; 0x1960 <remove_note_from_arpeggiator>
}
    1c08:	08 95       	ret

00001c0a <noteon_to_arpeggiator>:
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1c0a:	64 2f       	mov	r22, r20
    1c0c:	80 91 7f 23 	lds	r24, 0x237F
    1c10:	90 91 80 23 	lds	r25, 0x2380
	if (inByte2 == 0)
    1c14:	22 23       	and	r18, r18
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <noteon_to_arpeggiator+0x14>
	    remove_note_from_arpeggiator(stored_sequencer, inByte1);
    1c18:	0e 94 b0 0c 	call	0x1960	; 0x1960 <remove_note_from_arpeggiator>
    1c1c:	08 95       	ret
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
    1c1e:	42 2f       	mov	r20, r18
    1c20:	0e 94 94 0c 	call	0x1928	; 0x1928 <add_note_to_arpeggiator>
    1c24:	08 95       	ret

00001c26 <get_midi_device>:
static Sequencer* stored_sequencer;
static MidiDevice* stored_midi_device;

MidiDevice* get_midi_device() {
   return stored_midi_device;
}
    1c26:	80 91 81 23 	lds	r24, 0x2381
    1c2a:	90 91 82 23 	lds	r25, 0x2382
    1c2e:	08 95       	ret

00001c30 <initialize_serial_midi>:

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
}

void initialize_serial_midi(MidiDevice* midi_device, Sequencer* sequencer){
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	ec 01       	movw	r28, r24
    1c3a:	8b 01       	movw	r16, r22
   //set up the device
   midi_device_init(midi_device);
    1c3c:	0e 94 8b 10 	call	0x2116	; 0x2116 <midi_device_init>
   
   midi_device_set_send_func(midi_device, serial_midi_send);
    1c40:	ce 01       	movw	r24, r28
    1c42:	64 ee       	ldi	r22, 0xE4	; 228
    1c44:	7d e0       	ldi	r23, 0x0D	; 13
    1c46:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <midi_device_set_send_func>
   midi_register_noteon_callback(midi_device, noteon_to_arpeggiator);
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	65 e0       	ldi	r22, 0x05	; 5
    1c4e:	7e e0       	ldi	r23, 0x0E	; 14
    1c50:	0e 94 53 10 	call	0x20a6	; 0x20a6 <midi_register_noteon_callback>
   midi_register_noteoff_callback(midi_device, noteoff_to_arpeggiator);
    1c54:	ce 01       	movw	r24, r28
    1c56:	6d ef       	ldi	r22, 0xFD	; 253
    1c58:	7d e0       	ldi	r23, 0x0D	; 13
    1c5a:	0e 94 57 10 	call	0x20ae	; 0x20ae <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be sent through to midi out
//   midi_register_fallthrough_callback(midi_device, serial_midi_send);
   
   //store the device and sequencer pointers
   stored_sequencer = sequencer;
    1c5e:	00 93 7f 23 	sts	0x237F, r16
    1c62:	10 93 80 23 	sts	0x2380, r17
   stored_midi_device = midi_device;
    1c66:	c0 93 81 23 	sts	0x2381, r28
    1c6a:	d0 93 82 23 	sts	0x2382, r29
}
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	08 95       	ret

00001c78 <serial_midi_config_active>:

void serial_midi_config_active(MidiDevice* midi_device){
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	ec 01       	movw	r28, r24
    //disable catchall THRU
	midi_register_catchall_callback(midi_device, NULL);
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	0e 94 87 10 	call	0x210e	; 0x210e <midi_register_catchall_callback>
	
	//enable THRU for non-arpeggiator messages
	midi_register_fallthrough_callback(midi_device, serial_midi_send);
    1c86:	ce 01       	movw	r24, r28
    1c88:	64 ee       	ldi	r22, 0xE4	; 228
    1c8a:	7d e0       	ldi	r23, 0x0D	; 13
    1c8c:	0e 94 83 10 	call	0x2106	; 0x2106 <midi_register_fallthrough_callback>
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <serial_midi_config_bypass>:

void serial_midi_config_bypass(MidiDevice* midi_device){
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
	//enable catchall THRU
	midi_register_catchall_callback(midi_device, serial_midi_send);
    1c9c:	64 ee       	ldi	r22, 0xE4	; 228
    1c9e:	7d e0       	ldi	r23, 0x0D	; 13
    1ca0:	0e 94 87 10 	call	0x210e	; 0x210e <midi_register_catchall_callback>
	
	//disable THRU for only non-arpeggiator messages
	midi_register_fallthrough_callback(midi_device, NULL);
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	0e 94 83 10 	call	0x2106	; 0x2106 <midi_register_fallthrough_callback>
	
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <bytequeue_init>:
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	42 83       	std	Z+2, r20	; 0x02
    1cb8:	63 83       	std	Z+3, r22	; 0x03
    1cba:	74 83       	std	Z+4, r23	; 0x04
    1cbc:	11 82       	std	Z+1, r1	; 0x01
    1cbe:	10 82       	st	Z, r1
    1cc0:	08 95       	ret

00001cc2 <bytequeue_enqueue>:
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
    1ccc:	16 2f       	mov	r17, r22
    1cce:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <store_and_clear_interrupt>
    1cd2:	08 2f       	mov	r16, r24
    1cd4:	29 81       	ldd	r18, Y+1	; 0x01
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	c9 01       	movw	r24, r18
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	6a 81       	ldd	r22, Y+2	; 0x02
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
    1ce4:	48 81       	ld	r20, Y
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	84 17       	cp	r24, r20
    1cea:	95 07       	cpc	r25, r21
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <bytequeue_enqueue+0x36>
    1cee:	80 2f       	mov	r24, r16
    1cf0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <restore_interrupt_setting>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	13 c0       	rjmp	.+38     	; 0x1d1e <bytequeue_enqueue+0x5c>
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	10 83       	st	Z, r17
    1d02:	29 81       	ldd	r18, Y+1	; 0x01
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	80 2f       	mov	r24, r16
    1d18:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <restore_interrupt_setting>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <bytequeue_length>:
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
    1d30:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <store_and_clear_interrupt>
    1d34:	29 81       	ldd	r18, Y+1	; 0x01
    1d36:	98 81       	ld	r25, Y
    1d38:	29 17       	cp	r18, r25
    1d3a:	10 f0       	brcs	.+4      	; 0x1d40 <bytequeue_length+0x18>
    1d3c:	12 2f       	mov	r17, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <bytequeue_length+0x1c>
    1d40:	1a 81       	ldd	r17, Y+2	; 0x02
    1d42:	12 0f       	add	r17, r18
    1d44:	19 1b       	sub	r17, r25
    1d46:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <restore_interrupt_setting>
    1d4a:	81 2f       	mov	r24, r17
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	08 95       	ret

00001d54 <bytequeue_get>:
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	86 0f       	add	r24, r22
    1d5c:	91 1d       	adc	r25, r1
    1d5e:	62 81       	ldd	r22, Z+2	; 0x02
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
    1d66:	03 80       	ldd	r0, Z+3	; 0x03
    1d68:	f4 81       	ldd	r31, Z+4	; 0x04
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	e8 0f       	add	r30, r24
    1d6e:	f9 1f       	adc	r31, r25
    1d70:	80 81       	ld	r24, Z
    1d72:	08 95       	ret

00001d74 <bytequeue_remove>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	8c 01       	movw	r16, r24
    1d84:	69 83       	std	Y+1, r22	; 0x01
    1d86:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <store_and_clear_interrupt>
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	20 81       	ld	r18, Z
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	69 81       	ldd	r22, Y+1	; 0x01
    1d94:	26 0f       	add	r18, r22
    1d96:	31 1d       	adc	r19, r1
    1d98:	62 81       	ldd	r22, Z+2	; 0x02
    1d9a:	c9 01       	movw	r24, r18
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divmodhi4>
    1da2:	80 83       	st	Z, r24
    1da4:	84 2f       	mov	r24, r20
    1da6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <restore_interrupt_setting>
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <store_and_clear_interrupt>:
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	08 95       	ret

00001dba <restore_interrupt_setting>:
    1dba:	08 95       	ret

00001dbc <midi_is_statusbyte>:
    1dbc:	88 1f       	adc	r24, r24
    1dbe:	88 27       	eor	r24, r24
    1dc0:	88 1f       	adc	r24, r24
    1dc2:	08 95       	ret

00001dc4 <midi_is_realtime>:
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	88 3f       	cpi	r24, 0xF8	; 248
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <midi_is_realtime+0x8>
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	89 2f       	mov	r24, r25
    1dce:	08 95       	ret

00001dd0 <midi_packet_length>:
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	20 7f       	andi	r18, 0xF0	; 240
    1dd6:	30 70       	andi	r19, 0x00	; 0
    1dd8:	20 3b       	cpi	r18, 0xB0	; 176
    1dda:	31 05       	cpc	r19, r1
    1ddc:	f1 f0       	breq	.+60     	; 0x1e1a <midi_packet_length+0x4a>
    1dde:	21 3b       	cpi	r18, 0xB1	; 177
    1de0:	31 05       	cpc	r19, r1
    1de2:	54 f4       	brge	.+20     	; 0x1df8 <midi_packet_length+0x28>
    1de4:	20 39       	cpi	r18, 0x90	; 144
    1de6:	31 05       	cpc	r19, r1
    1de8:	c1 f0       	breq	.+48     	; 0x1e1a <midi_packet_length+0x4a>
    1dea:	20 3a       	cpi	r18, 0xA0	; 160
    1dec:	31 05       	cpc	r19, r1
    1dee:	a9 f0       	breq	.+42     	; 0x1e1a <midi_packet_length+0x4a>
    1df0:	20 38       	cpi	r18, 0x80	; 128
    1df2:	31 05       	cpc	r19, r1
    1df4:	e9 f4       	brne	.+58     	; 0x1e30 <midi_packet_length+0x60>
    1df6:	11 c0       	rjmp	.+34     	; 0x1e1a <midi_packet_length+0x4a>
    1df8:	20 3d       	cpi	r18, 0xD0	; 208
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	d9 f0       	breq	.+54     	; 0x1e34 <midi_packet_length+0x64>
    1dfe:	21 3d       	cpi	r18, 0xD1	; 209
    1e00:	31 05       	cpc	r19, r1
    1e02:	24 f4       	brge	.+8      	; 0x1e0c <midi_packet_length+0x3c>
    1e04:	20 3c       	cpi	r18, 0xC0	; 192
    1e06:	31 05       	cpc	r19, r1
    1e08:	99 f4       	brne	.+38     	; 0x1e30 <midi_packet_length+0x60>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <midi_packet_length+0x64>
    1e0c:	20 3e       	cpi	r18, 0xE0	; 224
    1e0e:	31 05       	cpc	r19, r1
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <midi_packet_length+0x4a>
    1e12:	20 3f       	cpi	r18, 0xF0	; 240
    1e14:	31 05       	cpc	r19, r1
    1e16:	61 f4       	brne	.+24     	; 0x1e30 <midi_packet_length+0x60>
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <midi_packet_length+0x4e>
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	08 95       	ret
    1e1e:	e8 2f       	mov	r30, r24
    1e20:	e1 5f       	subi	r30, 0xF1	; 241
    1e22:	ef 30       	cpi	r30, 0x0F	; 15
    1e24:	48 f4       	brcc	.+18     	; 0x1e38 <midi_packet_length+0x68>
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	e0 5d       	subi	r30, 0xD0	; 208
    1e2a:	ff 4d       	sbci	r31, 0xDF	; 223
    1e2c:	80 81       	ld	r24, Z
    1e2e:	08 95       	ret
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	08 95       	ret
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	08 95       	ret
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	08 95       	ret

00001e3c <midi_send_cc>:
    1e3c:	0f 93       	push	r16
    1e3e:	36 2f       	mov	r19, r22
    1e40:	54 2f       	mov	r21, r20
    1e42:	02 2f       	mov	r16, r18
    1e44:	3f 70       	andi	r19, 0x0F	; 15
    1e46:	30 6b       	ori	r19, 0xB0	; 176
    1e48:	5f 77       	andi	r21, 0x7F	; 127
    1e4a:	0f 77       	andi	r16, 0x7F	; 127
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	63 e0       	ldi	r22, 0x03	; 3
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	43 2f       	mov	r20, r19
    1e58:	25 2f       	mov	r18, r21
    1e5a:	09 95       	icall
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <midi_send_noteon>:
    1e60:	0f 93       	push	r16
    1e62:	36 2f       	mov	r19, r22
    1e64:	54 2f       	mov	r21, r20
    1e66:	02 2f       	mov	r16, r18
    1e68:	3f 70       	andi	r19, 0x0F	; 15
    1e6a:	30 69       	ori	r19, 0x90	; 144
    1e6c:	5f 77       	andi	r21, 0x7F	; 127
    1e6e:	0f 77       	andi	r16, 0x7F	; 127
    1e70:	dc 01       	movw	r26, r24
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	43 2f       	mov	r20, r19
    1e7c:	25 2f       	mov	r18, r21
    1e7e:	09 95       	icall
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <midi_send_noteoff>:
    1e84:	0f 93       	push	r16
    1e86:	36 2f       	mov	r19, r22
    1e88:	54 2f       	mov	r21, r20
    1e8a:	02 2f       	mov	r16, r18
    1e8c:	3f 70       	andi	r19, 0x0F	; 15
    1e8e:	30 68       	ori	r19, 0x80	; 128
    1e90:	5f 77       	andi	r21, 0x7F	; 127
    1e92:	0f 77       	andi	r16, 0x7F	; 127
    1e94:	dc 01       	movw	r26, r24
    1e96:	ed 91       	ld	r30, X+
    1e98:	fc 91       	ld	r31, X
    1e9a:	63 e0       	ldi	r22, 0x03	; 3
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	43 2f       	mov	r20, r19
    1ea0:	25 2f       	mov	r18, r21
    1ea2:	09 95       	icall
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <midi_send_aftertouch>:
    1ea8:	0f 93       	push	r16
    1eaa:	36 2f       	mov	r19, r22
    1eac:	54 2f       	mov	r21, r20
    1eae:	02 2f       	mov	r16, r18
    1eb0:	3f 70       	andi	r19, 0x0F	; 15
    1eb2:	30 6a       	ori	r19, 0xA0	; 160
    1eb4:	5f 77       	andi	r21, 0x7F	; 127
    1eb6:	0f 77       	andi	r16, 0x7F	; 127
    1eb8:	dc 01       	movw	r26, r24
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fc 91       	ld	r31, X
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	43 2f       	mov	r20, r19
    1ec4:	25 2f       	mov	r18, r21
    1ec6:	09 95       	icall
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <midi_send_pitchbend>:
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	8a 01       	movw	r16, r20
    1ed2:	20 e2       	ldi	r18, 0x20	; 32
    1ed4:	40 30       	cpi	r20, 0x00	; 0
    1ed6:	52 07       	cpc	r21, r18
    1ed8:	3c f4       	brge	.+14     	; 0x1ee8 <midi_send_pitchbend+0x1c>
    1eda:	a0 ee       	ldi	r26, 0xE0	; 224
    1edc:	40 30       	cpi	r20, 0x00	; 0
    1ede:	5a 07       	cpc	r21, r26
    1ee0:	34 f0       	brlt	.+12     	; 0x1eee <midi_send_pitchbend+0x22>
    1ee2:	00 50       	subi	r16, 0x00	; 0
    1ee4:	10 4e       	sbci	r17, 0xE0	; 224
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <midi_send_pitchbend+0x26>
    1ee8:	0f ef       	ldi	r16, 0xFF	; 255
    1eea:	1f e3       	ldi	r17, 0x3F	; 63
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <midi_send_pitchbend+0x26>
    1eee:	00 e0       	ldi	r16, 0x00	; 0
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
    1ef2:	46 2f       	mov	r20, r22
    1ef4:	4f 70       	andi	r20, 0x0F	; 15
    1ef6:	40 6e       	ori	r20, 0xE0	; 224
    1ef8:	20 2f       	mov	r18, r16
    1efa:	2f 77       	andi	r18, 0x7F	; 127
    1efc:	00 0f       	add	r16, r16
    1efe:	01 2f       	mov	r16, r17
    1f00:	00 1f       	adc	r16, r16
    1f02:	11 0b       	sbc	r17, r17
    1f04:	11 95       	neg	r17
    1f06:	0f 77       	andi	r16, 0x7F	; 127
    1f08:	dc 01       	movw	r26, r24
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	09 95       	icall
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <midi_send_programchange>:
    1f1a:	0f 93       	push	r16
    1f1c:	36 2f       	mov	r19, r22
    1f1e:	24 2f       	mov	r18, r20
    1f20:	3f 70       	andi	r19, 0x0F	; 15
    1f22:	30 6c       	ori	r19, 0xC0	; 192
    1f24:	2f 77       	andi	r18, 0x7F	; 127
    1f26:	dc 01       	movw	r26, r24
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	43 2f       	mov	r20, r19
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	09 95       	icall
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <midi_send_channelpressure>:
    1f3a:	0f 93       	push	r16
    1f3c:	36 2f       	mov	r19, r22
    1f3e:	24 2f       	mov	r18, r20
    1f40:	3f 70       	andi	r19, 0x0F	; 15
    1f42:	30 6d       	ori	r19, 0xD0	; 208
    1f44:	2f 77       	andi	r18, 0x7F	; 127
    1f46:	dc 01       	movw	r26, r24
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	43 2f       	mov	r20, r19
    1f52:	00 e0       	ldi	r16, 0x00	; 0
    1f54:	09 95       	icall
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <midi_send_clock>:
    1f5a:	0f 93       	push	r16
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	48 ef       	ldi	r20, 0xF8	; 248
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	00 e0       	ldi	r16, 0x00	; 0
    1f6c:	09 95       	icall
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <midi_send_tick>:
    1f72:	0f 93       	push	r16
    1f74:	dc 01       	movw	r26, r24
    1f76:	ed 91       	ld	r30, X+
    1f78:	fc 91       	ld	r31, X
    1f7a:	61 e0       	ldi	r22, 0x01	; 1
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	49 ef       	ldi	r20, 0xF9	; 249
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	00 e0       	ldi	r16, 0x00	; 0
    1f84:	09 95       	icall
    1f86:	0f 91       	pop	r16
    1f88:	08 95       	ret

00001f8a <midi_send_start>:
    1f8a:	0f 93       	push	r16
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	4a ef       	ldi	r20, 0xFA	; 250
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	00 e0       	ldi	r16, 0x00	; 0
    1f9c:	09 95       	icall
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <midi_send_continue>:
    1fa2:	0f 93       	push	r16
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	ed 91       	ld	r30, X+
    1fa8:	fc 91       	ld	r31, X
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	4b ef       	ldi	r20, 0xFB	; 251
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	09 95       	icall
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <midi_send_stop>:
    1fba:	0f 93       	push	r16
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	ed 91       	ld	r30, X+
    1fc0:	fc 91       	ld	r31, X
    1fc2:	61 e0       	ldi	r22, 0x01	; 1
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	4c ef       	ldi	r20, 0xFC	; 252
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	00 e0       	ldi	r16, 0x00	; 0
    1fcc:	09 95       	icall
    1fce:	0f 91       	pop	r16
    1fd0:	08 95       	ret

00001fd2 <midi_send_activesense>:
    1fd2:	0f 93       	push	r16
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	ed 91       	ld	r30, X+
    1fd8:	fc 91       	ld	r31, X
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	4e ef       	ldi	r20, 0xFE	; 254
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	00 e0       	ldi	r16, 0x00	; 0
    1fe4:	09 95       	icall
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <midi_send_reset>:
    1fea:	0f 93       	push	r16
    1fec:	dc 01       	movw	r26, r24
    1fee:	ed 91       	ld	r30, X+
    1ff0:	fc 91       	ld	r31, X
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	4f ef       	ldi	r20, 0xFF	; 255
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	00 e0       	ldi	r16, 0x00	; 0
    1ffc:	09 95       	icall
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <midi_send_tcquarterframe>:
    2002:	0f 93       	push	r16
    2004:	26 2f       	mov	r18, r22
    2006:	2f 77       	andi	r18, 0x7F	; 127
    2008:	dc 01       	movw	r26, r24
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	41 ef       	ldi	r20, 0xF1	; 241
    2014:	00 e0       	ldi	r16, 0x00	; 0
    2016:	09 95       	icall
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <midi_send_songposition>:
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	26 2f       	mov	r18, r22
    2022:	2f 77       	andi	r18, 0x7F	; 127
    2024:	8b 01       	movw	r16, r22
    2026:	00 0f       	add	r16, r16
    2028:	01 2f       	mov	r16, r17
    202a:	00 1f       	adc	r16, r16
    202c:	11 0b       	sbc	r17, r17
    202e:	11 95       	neg	r17
    2030:	0f 77       	andi	r16, 0x7F	; 127
    2032:	dc 01       	movw	r26, r24
    2034:	ed 91       	ld	r30, X+
    2036:	fc 91       	ld	r31, X
    2038:	63 e0       	ldi	r22, 0x03	; 3
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	42 ef       	ldi	r20, 0xF2	; 242
    203e:	09 95       	icall
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <midi_send_songselect>:
    2046:	0f 93       	push	r16
    2048:	26 2f       	mov	r18, r22
    204a:	2f 77       	andi	r18, 0x7F	; 127
    204c:	dc 01       	movw	r26, r24
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	43 ef       	ldi	r20, 0xF3	; 243
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	09 95       	icall
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <midi_send_tunerequest>:
    2060:	0f 93       	push	r16
    2062:	dc 01       	movw	r26, r24
    2064:	ed 91       	ld	r30, X+
    2066:	fc 91       	ld	r31, X
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	46 ef       	ldi	r20, 0xF6	; 246
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	09 95       	icall
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <midi_send_byte>:
    2078:	0f 93       	push	r16
    207a:	46 2f       	mov	r20, r22
    207c:	dc 01       	movw	r26, r24
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	00 e0       	ldi	r16, 0x00	; 0
    208a:	09 95       	icall
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <midi_send_data>:
    2090:	0f 93       	push	r16
    2092:	dc 01       	movw	r26, r24
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	09 95       	icall
    209a:	0f 91       	pop	r16
    209c:	08 95       	ret

0000209e <midi_register_cc_callback>:
    209e:	fc 01       	movw	r30, r24
    20a0:	62 83       	std	Z+2, r22	; 0x02
    20a2:	73 83       	std	Z+3, r23	; 0x03
    20a4:	08 95       	ret

000020a6 <midi_register_noteon_callback>:
    20a6:	fc 01       	movw	r30, r24
    20a8:	64 83       	std	Z+4, r22	; 0x04
    20aa:	75 83       	std	Z+5, r23	; 0x05
    20ac:	08 95       	ret

000020ae <midi_register_noteoff_callback>:
    20ae:	fc 01       	movw	r30, r24
    20b0:	66 83       	std	Z+6, r22	; 0x06
    20b2:	77 83       	std	Z+7, r23	; 0x07
    20b4:	08 95       	ret

000020b6 <midi_register_aftertouch_callback>:
    20b6:	fc 01       	movw	r30, r24
    20b8:	60 87       	std	Z+8, r22	; 0x08
    20ba:	71 87       	std	Z+9, r23	; 0x09
    20bc:	08 95       	ret

000020be <midi_register_pitchbend_callback>:
    20be:	fc 01       	movw	r30, r24
    20c0:	62 87       	std	Z+10, r22	; 0x0a
    20c2:	73 87       	std	Z+11, r23	; 0x0b
    20c4:	08 95       	ret

000020c6 <midi_register_songposition_callback>:
    20c6:	fc 01       	movw	r30, r24
    20c8:	64 87       	std	Z+12, r22	; 0x0c
    20ca:	75 87       	std	Z+13, r23	; 0x0d
    20cc:	08 95       	ret

000020ce <midi_register_progchange_callback>:
    20ce:	fc 01       	movw	r30, r24
    20d0:	66 87       	std	Z+14, r22	; 0x0e
    20d2:	77 87       	std	Z+15, r23	; 0x0f
    20d4:	08 95       	ret

000020d6 <midi_register_chanpressure_callback>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	60 8b       	std	Z+16, r22	; 0x10
    20da:	71 8b       	std	Z+17, r23	; 0x11
    20dc:	08 95       	ret

000020de <midi_register_songselect_callback>:
    20de:	fc 01       	movw	r30, r24
    20e0:	62 8b       	std	Z+18, r22	; 0x12
    20e2:	73 8b       	std	Z+19, r23	; 0x13
    20e4:	08 95       	ret

000020e6 <midi_register_tc_quarterframe_callback>:
    20e6:	fc 01       	movw	r30, r24
    20e8:	64 8b       	std	Z+20, r22	; 0x14
    20ea:	75 8b       	std	Z+21, r23	; 0x15
    20ec:	08 95       	ret

000020ee <midi_register_realtime_callback>:
    20ee:	fc 01       	movw	r30, r24
    20f0:	66 8b       	std	Z+22, r22	; 0x16
    20f2:	77 8b       	std	Z+23, r23	; 0x17
    20f4:	08 95       	ret

000020f6 <midi_register_tunerequest_callback>:
    20f6:	fc 01       	movw	r30, r24
    20f8:	60 8f       	std	Z+24, r22	; 0x18
    20fa:	71 8f       	std	Z+25, r23	; 0x19
    20fc:	08 95       	ret

000020fe <midi_register_sysex_callback>:
    20fe:	fc 01       	movw	r30, r24
    2100:	62 8f       	std	Z+26, r22	; 0x1a
    2102:	73 8f       	std	Z+27, r23	; 0x1b
    2104:	08 95       	ret

00002106 <midi_register_fallthrough_callback>:
    2106:	fc 01       	movw	r30, r24
    2108:	64 8f       	std	Z+28, r22	; 0x1c
    210a:	75 8f       	std	Z+29, r23	; 0x1d
    210c:	08 95       	ret

0000210e <midi_register_catchall_callback>:
    210e:	fc 01       	movw	r30, r24
    2110:	66 8f       	std	Z+30, r22	; 0x1e
    2112:	77 8f       	std	Z+31, r23	; 0x1f
    2114:	08 95       	ret

00002116 <midi_device_init>:
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
    211c:	1d a2       	std	Y+37, r1	; 0x25
    211e:	1e a2       	std	Y+38, r1	; 0x26
    2120:	1f a2       	std	Y+39, r1	; 0x27
    2122:	bc 01       	movw	r22, r24
    2124:	68 5d       	subi	r22, 0xD8	; 216
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	88 51       	subi	r24, 0x18	; 24
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	40 ec       	ldi	r20, 0xC0	; 192
    212e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <bytequeue_init>
    2132:	1a 82       	std	Y+2, r1	; 0x02
    2134:	1b 82       	std	Y+3, r1	; 0x03
    2136:	1c 82       	std	Y+4, r1	; 0x04
    2138:	1d 82       	std	Y+5, r1	; 0x05
    213a:	1e 82       	std	Y+6, r1	; 0x06
    213c:	1f 82       	std	Y+7, r1	; 0x07
    213e:	18 86       	std	Y+8, r1	; 0x08
    2140:	19 86       	std	Y+9, r1	; 0x09
    2142:	1a 86       	std	Y+10, r1	; 0x0a
    2144:	1b 86       	std	Y+11, r1	; 0x0b
    2146:	1c 86       	std	Y+12, r1	; 0x0c
    2148:	1d 86       	std	Y+13, r1	; 0x0d
    214a:	1e 86       	std	Y+14, r1	; 0x0e
    214c:	1f 86       	std	Y+15, r1	; 0x0f
    214e:	18 8a       	std	Y+16, r1	; 0x10
    2150:	19 8a       	std	Y+17, r1	; 0x11
    2152:	1a 8a       	std	Y+18, r1	; 0x12
    2154:	1b 8a       	std	Y+19, r1	; 0x13
    2156:	1c 8a       	std	Y+20, r1	; 0x14
    2158:	1d 8a       	std	Y+21, r1	; 0x15
    215a:	1e 8a       	std	Y+22, r1	; 0x16
    215c:	1f 8a       	std	Y+23, r1	; 0x17
    215e:	18 8e       	std	Y+24, r1	; 0x18
    2160:	19 8e       	std	Y+25, r1	; 0x19
    2162:	1a 8e       	std	Y+26, r1	; 0x1a
    2164:	1b 8e       	std	Y+27, r1	; 0x1b
    2166:	1c 8e       	std	Y+28, r1	; 0x1c
    2168:	1d 8e       	std	Y+29, r1	; 0x1d
    216a:	1e 8e       	std	Y+30, r1	; 0x1e
    216c:	1f 8e       	std	Y+31, r1	; 0x1f
    216e:	18 a2       	std	Y+32, r1	; 0x20
    2170:	19 a2       	std	Y+33, r1	; 0x21
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <midi_device_input>:
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	f6 2e       	mov	r15, r22
    218e:	e4 2f       	mov	r30, r20
    2190:	f5 2f       	mov	r31, r21
    2192:	6f 01       	movw	r12, r30
    2194:	8c 01       	movw	r16, r24
    2196:	08 51       	subi	r16, 0x18	; 24
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
    219a:	08 c0       	rjmp	.+16     	; 0x21ac <midi_device_input+0x34>
    219c:	f6 01       	movw	r30, r12
    219e:	61 91       	ld	r22, Z+
    21a0:	6f 01       	movw	r12, r30
    21a2:	c8 01       	movw	r24, r16
    21a4:	49 83       	std	Y+1, r20	; 0x01
    21a6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <bytequeue_enqueue>
    21aa:	49 81       	ldd	r20, Y+1	; 0x01
    21ac:	8c 2d       	mov	r24, r12
    21ae:	84 1b       	sub	r24, r20
    21b0:	8f 15       	cp	r24, r15
    21b2:	a0 f3       	brcs	.-24     	; 0x219c <midi_device_input+0x24>
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
    21c4:	08 95       	ret

000021c6 <midi_device_set_send_func>:
    21c6:	fc 01       	movw	r30, r24
    21c8:	60 83       	st	Z, r22
    21ca:	71 83       	std	Z+1, r23	; 0x01
    21cc:	08 95       	ret

000021ce <midi_device_set_pre_input_process_func>:
    21ce:	fc 01       	movw	r30, r24
    21d0:	60 a3       	std	Z+32, r22	; 0x20
    21d2:	71 a3       	std	Z+33, r23	; 0x21
    21d4:	08 95       	ret

000021d6 <midi_input_callbacks>:
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	ec 01       	movw	r28, r24
    21e8:	6b 01       	movw	r12, r22
    21ea:	14 2f       	mov	r17, r20
    21ec:	e2 2e       	mov	r14, r18
    21ee:	f0 2e       	mov	r15, r16
    21f0:	8d a1       	ldd	r24, Y+37	; 0x25
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	31 f4       	brne	.+12     	; 0x2202 <midi_input_callbacks+0x2c>
    21f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21f8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    21fa:	30 97       	sbiw	r30, 0x00	; 0
    21fc:	09 f0       	breq	.+2      	; 0x2200 <midi_input_callbacks+0x2a>
    21fe:	83 c0       	rjmp	.+262    	; 0x2306 <midi_input_callbacks+0x130>
    2200:	95 c0       	rjmp	.+298    	; 0x232c <midi_input_callbacks+0x156>
    2202:	62 30       	cpi	r22, 0x02	; 2
    2204:	71 05       	cpc	r23, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <midi_input_callbacks+0x34>
    2208:	42 c0       	rjmp	.+132    	; 0x228e <midi_input_callbacks+0xb8>
    220a:	63 30       	cpi	r22, 0x03	; 3
    220c:	71 05       	cpc	r23, r1
    220e:	29 f0       	breq	.+10     	; 0x221a <midi_input_callbacks+0x44>
    2210:	61 30       	cpi	r22, 0x01	; 1
    2212:	71 05       	cpc	r23, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <midi_input_callbacks+0x42>
    2216:	73 c0       	rjmp	.+230    	; 0x22fe <midi_input_callbacks+0x128>
    2218:	60 c0       	rjmp	.+192    	; 0x22da <midi_input_callbacks+0x104>
    221a:	84 2f       	mov	r24, r20
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	80 7f       	andi	r24, 0xF0	; 240
    2220:	90 70       	andi	r25, 0x00	; 0
    2222:	80 3a       	cpi	r24, 0xA0	; 160
    2224:	91 05       	cpc	r25, r1
    2226:	e1 f0       	breq	.+56     	; 0x2260 <midi_input_callbacks+0x8a>
    2228:	81 3a       	cpi	r24, 0xA1	; 161
    222a:	91 05       	cpc	r25, r1
    222c:	3c f4       	brge	.+14     	; 0x223c <midi_input_callbacks+0x66>
    222e:	80 38       	cpi	r24, 0x80	; 128
    2230:	91 05       	cpc	r25, r1
    2232:	99 f0       	breq	.+38     	; 0x225a <midi_input_callbacks+0x84>
    2234:	80 39       	cpi	r24, 0x90	; 144
    2236:	91 05       	cpc	r25, r1
    2238:	f9 f4       	brne	.+62     	; 0x2278 <midi_input_callbacks+0xa2>
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <midi_input_callbacks+0x7e>
    223c:	80 3e       	cpi	r24, 0xE0	; 224
    223e:	91 05       	cpc	r25, r1
    2240:	91 f0       	breq	.+36     	; 0x2266 <midi_input_callbacks+0x90>
    2242:	80 3f       	cpi	r24, 0xF0	; 240
    2244:	91 05       	cpc	r25, r1
    2246:	91 f0       	breq	.+36     	; 0x226c <midi_input_callbacks+0x96>
    2248:	80 3b       	cpi	r24, 0xB0	; 176
    224a:	91 05       	cpc	r25, r1
    224c:	a9 f4       	brne	.+42     	; 0x2278 <midi_input_callbacks+0xa2>
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	14 c0       	rjmp	.+40     	; 0x227c <midi_input_callbacks+0xa6>
    2254:	ec 81       	ldd	r30, Y+4	; 0x04
    2256:	fd 81       	ldd	r31, Y+5	; 0x05
    2258:	11 c0       	rjmp	.+34     	; 0x227c <midi_input_callbacks+0xa6>
    225a:	ee 81       	ldd	r30, Y+6	; 0x06
    225c:	ff 81       	ldd	r31, Y+7	; 0x07
    225e:	0e c0       	rjmp	.+28     	; 0x227c <midi_input_callbacks+0xa6>
    2260:	e8 85       	ldd	r30, Y+8	; 0x08
    2262:	f9 85       	ldd	r31, Y+9	; 0x09
    2264:	0b c0       	rjmp	.+22     	; 0x227c <midi_input_callbacks+0xa6>
    2266:	ea 85       	ldd	r30, Y+10	; 0x0a
    2268:	fb 85       	ldd	r31, Y+11	; 0x0b
    226a:	08 c0       	rjmp	.+16     	; 0x227c <midi_input_callbacks+0xa6>
    226c:	42 3f       	cpi	r20, 0xF2	; 242
    226e:	09 f0       	breq	.+2      	; 0x2272 <midi_input_callbacks+0x9c>
    2270:	5d c0       	rjmp	.+186    	; 0x232c <midi_input_callbacks+0x156>
    2272:	ec 85       	ldd	r30, Y+12	; 0x0c
    2274:	fd 85       	ldd	r31, Y+13	; 0x0d
    2276:	02 c0       	rjmp	.+4      	; 0x227c <midi_input_callbacks+0xa6>
    2278:	e0 e0       	ldi	r30, 0x00	; 0
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	30 97       	sbiw	r30, 0x00	; 0
    227e:	09 f4       	brne	.+2      	; 0x2282 <midi_input_callbacks+0xac>
    2280:	55 c0       	rjmp	.+170    	; 0x232c <midi_input_callbacks+0x156>
    2282:	ce 01       	movw	r24, r28
    2284:	61 2f       	mov	r22, r17
    2286:	4e 2d       	mov	r20, r14
    2288:	2f 2d       	mov	r18, r15
    228a:	09 95       	icall
    228c:	42 c0       	rjmp	.+132    	; 0x2312 <midi_input_callbacks+0x13c>
    228e:	84 2f       	mov	r24, r20
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	80 3d       	cpi	r24, 0xD0	; 208
    2298:	91 05       	cpc	r25, r1
    229a:	49 f0       	breq	.+18     	; 0x22ae <midi_input_callbacks+0xd8>
    229c:	80 3f       	cpi	r24, 0xF0	; 240
    229e:	91 05       	cpc	r25, r1
    22a0:	49 f0       	breq	.+18     	; 0x22b4 <midi_input_callbacks+0xde>
    22a2:	80 3c       	cpi	r24, 0xC0	; 192
    22a4:	91 05       	cpc	r25, r1
    22a6:	81 f4       	brne	.+32     	; 0x22c8 <midi_input_callbacks+0xf2>
    22a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    22aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <midi_input_callbacks+0xf6>
    22ae:	e8 89       	ldd	r30, Y+16	; 0x10
    22b0:	f9 89       	ldd	r31, Y+17	; 0x11
    22b2:	0c c0       	rjmp	.+24     	; 0x22cc <midi_input_callbacks+0xf6>
    22b4:	43 3f       	cpi	r20, 0xF3	; 243
    22b6:	19 f4       	brne	.+6      	; 0x22be <midi_input_callbacks+0xe8>
    22b8:	ea 89       	ldd	r30, Y+18	; 0x12
    22ba:	fb 89       	ldd	r31, Y+19	; 0x13
    22bc:	07 c0       	rjmp	.+14     	; 0x22cc <midi_input_callbacks+0xf6>
    22be:	41 3f       	cpi	r20, 0xF1	; 241
    22c0:	a9 f5       	brne	.+106    	; 0x232c <midi_input_callbacks+0x156>
    22c2:	ec 89       	ldd	r30, Y+20	; 0x14
    22c4:	fd 89       	ldd	r31, Y+21	; 0x15
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <midi_input_callbacks+0xf6>
    22c8:	e0 e0       	ldi	r30, 0x00	; 0
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	71 f1       	breq	.+92     	; 0x232c <midi_input_callbacks+0x156>
    22d0:	ce 01       	movw	r24, r28
    22d2:	61 2f       	mov	r22, r17
    22d4:	4e 2d       	mov	r20, r14
    22d6:	09 95       	icall
    22d8:	1c c0       	rjmp	.+56     	; 0x2312 <midi_input_callbacks+0x13c>
    22da:	84 2f       	mov	r24, r20
    22dc:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <midi_is_realtime>
    22e0:	88 23       	and	r24, r24
    22e2:	19 f0       	breq	.+6      	; 0x22ea <midi_input_callbacks+0x114>
    22e4:	ee 89       	ldd	r30, Y+22	; 0x16
    22e6:	ff 89       	ldd	r31, Y+23	; 0x17
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <midi_input_callbacks+0x11c>
    22ea:	16 3f       	cpi	r17, 0xF6	; 246
    22ec:	f9 f4       	brne	.+62     	; 0x232c <midi_input_callbacks+0x156>
    22ee:	e8 8d       	ldd	r30, Y+24	; 0x18
    22f0:	f9 8d       	ldd	r31, Y+25	; 0x19
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	d9 f0       	breq	.+54     	; 0x232c <midi_input_callbacks+0x156>
    22f6:	ce 01       	movw	r24, r28
    22f8:	61 2f       	mov	r22, r17
    22fa:	09 95       	icall
    22fc:	0a c0       	rjmp	.+20     	; 0x2312 <midi_input_callbacks+0x13c>
    22fe:	64 30       	cpi	r22, 0x04	; 4
    2300:	71 05       	cpc	r23, r1
    2302:	90 f4       	brcc	.+36     	; 0x2328 <midi_input_callbacks+0x152>
    2304:	13 c0       	rjmp	.+38     	; 0x232c <midi_input_callbacks+0x156>
    2306:	ce 01       	movw	r24, r28
    2308:	b6 01       	movw	r22, r12
    230a:	41 2f       	mov	r20, r17
    230c:	2e 2d       	mov	r18, r14
    230e:	0f 2d       	mov	r16, r15
    2310:	09 95       	icall
    2312:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2314:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2316:	30 97       	sbiw	r30, 0x00	; 0
    2318:	71 f0       	breq	.+28     	; 0x2336 <midi_input_callbacks+0x160>
    231a:	ce 01       	movw	r24, r28
    231c:	b6 01       	movw	r22, r12
    231e:	41 2f       	mov	r20, r17
    2320:	2e 2d       	mov	r18, r14
    2322:	0f 2d       	mov	r16, r15
    2324:	09 95       	icall
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <midi_input_callbacks+0x160>
    2328:	cc 24       	eor	r12, r12
    232a:	dd 24       	eor	r13, r13
    232c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    232e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2330:	30 97       	sbiw	r30, 0x00	; 0
    2332:	49 f7       	brne	.-46     	; 0x2306 <midi_input_callbacks+0x130>
    2334:	ee cf       	rjmp	.-36     	; 0x2312 <midi_input_callbacks+0x13c>
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	08 95       	ret

00002348 <midi_process_byte>:
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	ec 01       	movw	r28, r24
    2356:	16 2f       	mov	r17, r22
    2358:	86 2f       	mov	r24, r22
    235a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <midi_is_realtime>
    235e:	88 23       	and	r24, r24
    2360:	69 f0       	breq	.+26     	; 0x237c <midi_process_byte+0x34>
    2362:	ed a0       	ldd	r14, Y+37	; 0x25
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	8d a3       	std	Y+37, r24	; 0x25
    2368:	ce 01       	movw	r24, r28
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	41 2f       	mov	r20, r17
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	00 e0       	ldi	r16, 0x00	; 0
    2374:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_input_callbacks>
    2378:	ed a2       	std	Y+37, r14	; 0x25
    237a:	7e c0       	rjmp	.+252    	; 0x2478 <midi_process_byte+0x130>
    237c:	81 2f       	mov	r24, r17
    237e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <midi_is_statusbyte>
    2382:	4d a1       	ldd	r20, Y+37	; 0x25
    2384:	88 23       	and	r24, r24
    2386:	09 f4       	brne	.+2      	; 0x238a <midi_process_byte+0x42>
    2388:	42 c0       	rjmp	.+132    	; 0x240e <midi_process_byte+0xc6>
    238a:	44 30       	cpi	r20, 0x04	; 4
    238c:	29 f0       	breq	.+10     	; 0x2398 <midi_process_byte+0x50>
    238e:	1a a3       	std	Y+34, r17	; 0x22
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	8e a3       	std	Y+38, r24	; 0x26
    2396:	9f a3       	std	Y+39, r25	; 0x27
    2398:	81 2f       	mov	r24, r17
    239a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <midi_packet_length>
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	39 f0       	breq	.+14     	; 0x23b0 <midi_process_byte+0x68>
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	78 f0       	brcs	.+30     	; 0x23c4 <midi_process_byte+0x7c>
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	59 f0       	breq	.+22     	; 0x23c0 <midi_process_byte+0x78>
    23aa:	83 30       	cpi	r24, 0x03	; 3
    23ac:	61 f5       	brne	.+88     	; 0x2406 <midi_process_byte+0xbe>
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <midi_process_byte+0x78>
    23b0:	8d a3       	std	Y+37, r24	; 0x25
    23b2:	ce 01       	movw	r24, r28
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	41 2f       	mov	r20, r17
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	00 e0       	ldi	r16, 0x00	; 0
    23be:	1f c0       	rjmp	.+62     	; 0x23fe <midi_process_byte+0xb6>
    23c0:	8d a3       	std	Y+37, r24	; 0x25
    23c2:	5a c0       	rjmp	.+180    	; 0x2478 <midi_process_byte+0x130>
    23c4:	10 3f       	cpi	r17, 0xF0	; 240
    23c6:	19 f0       	breq	.+6      	; 0x23ce <midi_process_byte+0x86>
    23c8:	17 3f       	cpi	r17, 0xF7	; 247
    23ca:	e9 f4       	brne	.+58     	; 0x2406 <midi_process_byte+0xbe>
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <midi_process_byte+0x8e>
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	8d a3       	std	Y+37, r24	; 0x25
    23d2:	1a a3       	std	Y+34, r17	; 0x22
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <midi_process_byte+0x10c>
    23d6:	2e a1       	ldd	r18, Y+38	; 0x26
    23d8:	3f a1       	ldd	r19, Y+39	; 0x27
    23da:	c9 01       	movw	r24, r18
    23dc:	63 e0       	ldi	r22, 0x03	; 3
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
    23e4:	8c 0f       	add	r24, r28
    23e6:	9d 1f       	adc	r25, r29
    23e8:	fc 01       	movw	r30, r24
    23ea:	12 a3       	std	Z+34, r17	; 0x22
    23ec:	b9 01       	movw	r22, r18
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	6e a3       	std	Y+38, r22	; 0x26
    23f4:	7f a3       	std	Y+39, r23	; 0x27
    23f6:	ce 01       	movw	r24, r28
    23f8:	4a a1       	ldd	r20, Y+34	; 0x22
    23fa:	2b a1       	ldd	r18, Y+35	; 0x23
    23fc:	0c a1       	ldd	r16, Y+36	; 0x24
    23fe:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_input_callbacks>
    2402:	1d a2       	std	Y+37, r1	; 0x25
    2404:	39 c0       	rjmp	.+114    	; 0x2478 <midi_process_byte+0x130>
    2406:	1d a2       	std	Y+37, r1	; 0x25
    2408:	1e a2       	std	Y+38, r1	; 0x26
    240a:	1f a2       	std	Y+39, r1	; 0x27
    240c:	35 c0       	rjmp	.+106    	; 0x2478 <midi_process_byte+0x130>
    240e:	44 23       	and	r20, r20
    2410:	99 f1       	breq	.+102    	; 0x2478 <midi_process_byte+0x130>
    2412:	2e a1       	ldd	r18, Y+38	; 0x26
    2414:	3f a1       	ldd	r19, Y+39	; 0x27
    2416:	c9 01       	movw	r24, r18
    2418:	63 e0       	ldi	r22, 0x03	; 3
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
    2420:	7c 01       	movw	r14, r24
    2422:	fe 01       	movw	r30, r28
    2424:	e8 0f       	add	r30, r24
    2426:	f9 1f       	adc	r31, r25
    2428:	12 a3       	std	Z+34, r17	; 0x22
    242a:	b9 01       	movw	r22, r18
    242c:	6f 5f       	subi	r22, 0xFF	; 255
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	6e a3       	std	Y+38, r22	; 0x26
    2432:	7f a3       	std	Y+39, r23	; 0x27
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	91 05       	cpc	r25, r1
    2438:	91 f0       	breq	.+36     	; 0x245e <midi_process_byte+0x116>
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	e8 16       	cp	r14, r24
    243e:	f1 04       	cpc	r15, r1
    2440:	d9 f4       	brne	.+54     	; 0x2478 <midi_process_byte+0x130>
    2442:	ce 01       	movw	r24, r28
    2444:	4a a1       	ldd	r20, Y+34	; 0x22
    2446:	2b a1       	ldd	r18, Y+35	; 0x23
    2448:	0c a1       	ldd	r16, Y+36	; 0x24
    244a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_input_callbacks>
    244e:	8d a1       	ldd	r24, Y+37	; 0x25
    2450:	84 30       	cpi	r24, 0x04	; 4
    2452:	91 f0       	breq	.+36     	; 0x2478 <midi_process_byte+0x130>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	8e a3       	std	Y+38, r24	; 0x26
    245a:	9f a3       	std	Y+39, r25	; 0x27
    245c:	0d c0       	rjmp	.+26     	; 0x2478 <midi_process_byte+0x130>
    245e:	42 30       	cpi	r20, 0x02	; 2
    2460:	59 f4       	brne	.+22     	; 0x2478 <midi_process_byte+0x130>
    2462:	ce 01       	movw	r24, r28
    2464:	4a a1       	ldd	r20, Y+34	; 0x22
    2466:	2b a1       	ldd	r18, Y+35	; 0x23
    2468:	00 e0       	ldi	r16, 0x00	; 0
    246a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_input_callbacks>
    246e:	8d a1       	ldd	r24, Y+37	; 0x25
    2470:	84 30       	cpi	r24, 0x04	; 4
    2472:	11 f0       	breq	.+4      	; 0x2478 <midi_process_byte+0x130>
    2474:	ee a2       	std	Y+38, r14	; 0x26
    2476:	ff a2       	std	Y+39, r15	; 0x27
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	08 95       	ret

00002486 <midi_device_process>:
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	ec 01       	movw	r28, r24
    2498:	e8 a1       	ldd	r30, Y+32	; 0x20
    249a:	f9 a1       	ldd	r31, Y+33	; 0x21
    249c:	30 97       	sbiw	r30, 0x00	; 0
    249e:	09 f0       	breq	.+2      	; 0x24a2 <midi_device_process+0x1c>
    24a0:	09 95       	icall
    24a2:	8e 01       	movw	r16, r28
    24a4:	08 51       	subi	r16, 0x18	; 24
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	c8 01       	movw	r24, r16
    24aa:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <bytequeue_length>
    24ae:	ee 24       	eor	r14, r14
    24b0:	ff 24       	eor	r15, r15
    24b2:	c8 2e       	mov	r12, r24
    24b4:	dd 24       	eor	r13, r13
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <midi_device_process+0x50>
    24b8:	c8 01       	movw	r24, r16
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <bytequeue_get>
    24c0:	68 2f       	mov	r22, r24
    24c2:	ce 01       	movw	r24, r28
    24c4:	0e 94 a4 11 	call	0x2348	; 0x2348 <midi_process_byte>
    24c8:	c8 01       	movw	r24, r16
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <bytequeue_remove>
    24d0:	08 94       	sec
    24d2:	e1 1c       	adc	r14, r1
    24d4:	f1 1c       	adc	r15, r1
    24d6:	ec 14       	cp	r14, r12
    24d8:	fd 04       	cpc	r15, r13
    24da:	70 f3       	brcs	.-36     	; 0x24b8 <midi_device_process+0x32>
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	08 95       	ret

000024ee <__fixunssfsi>:
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	7b 01       	movw	r14, r22
    24f8:	8c 01       	movw	r16, r24
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	5f e4       	ldi	r21, 0x4F	; 79
    2502:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__gesf2>
    2506:	87 fd       	sbrc	r24, 7
    2508:	11 c0       	rjmp	.+34     	; 0x252c <__fixunssfsi+0x3e>
    250a:	c8 01       	movw	r24, r16
    250c:	b7 01       	movw	r22, r14
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	5f e4       	ldi	r21, 0x4F	; 79
    2516:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    251a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__fixsfsi>
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	20 50       	subi	r18, 0x00	; 0
    2524:	30 40       	sbci	r19, 0x00	; 0
    2526:	40 40       	sbci	r20, 0x00	; 0
    2528:	50 48       	sbci	r21, 0x80	; 128
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <__fixunssfsi+0x4a>
    252c:	c8 01       	movw	r24, r16
    252e:	b7 01       	movw	r22, r14
    2530:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__fixsfsi>
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	b9 01       	movw	r22, r18
    253a:	ca 01       	movw	r24, r20
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	08 95       	ret

00002546 <_fpadd_parts>:
    2546:	a0 e0       	ldi	r26, 0x00	; 0
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 ea       	ldi	r30, 0xA9	; 169
    254c:	f2 e1       	ldi	r31, 0x12	; 18
    254e:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__prologue_saves__+0x8>
    2552:	fc 01       	movw	r30, r24
    2554:	ea 01       	movw	r28, r20
    2556:	80 81       	ld	r24, Z
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	08 f4       	brcc	.+2      	; 0x255e <_fpadd_parts+0x18>
    255c:	38 c1       	rjmp	.+624    	; 0x27ce <_fpadd_parts+0x288>
    255e:	db 01       	movw	r26, r22
    2560:	9c 91       	ld	r25, X
    2562:	92 30       	cpi	r25, 0x02	; 2
    2564:	08 f4       	brcc	.+2      	; 0x2568 <_fpadd_parts+0x22>
    2566:	30 c1       	rjmp	.+608    	; 0x27c8 <_fpadd_parts+0x282>
    2568:	84 30       	cpi	r24, 0x04	; 4
    256a:	59 f4       	brne	.+22     	; 0x2582 <_fpadd_parts+0x3c>
    256c:	94 30       	cpi	r25, 0x04	; 4
    256e:	09 f0       	breq	.+2      	; 0x2572 <_fpadd_parts+0x2c>
    2570:	2e c1       	rjmp	.+604    	; 0x27ce <_fpadd_parts+0x288>
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	8c 91       	ld	r24, X
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	98 17       	cp	r25, r24
    257c:	09 f0       	breq	.+2      	; 0x2580 <_fpadd_parts+0x3a>
    257e:	21 c1       	rjmp	.+578    	; 0x27c2 <_fpadd_parts+0x27c>
    2580:	26 c1       	rjmp	.+588    	; 0x27ce <_fpadd_parts+0x288>
    2582:	94 30       	cpi	r25, 0x04	; 4
    2584:	09 f4       	brne	.+2      	; 0x2588 <_fpadd_parts+0x42>
    2586:	20 c1       	rjmp	.+576    	; 0x27c8 <_fpadd_parts+0x282>
    2588:	92 30       	cpi	r25, 0x02	; 2
    258a:	b1 f4       	brne	.+44     	; 0x25b8 <_fpadd_parts+0x72>
    258c:	82 30       	cpi	r24, 0x02	; 2
    258e:	09 f0       	breq	.+2      	; 0x2592 <_fpadd_parts+0x4c>
    2590:	1e c1       	rjmp	.+572    	; 0x27ce <_fpadd_parts+0x288>
    2592:	ca 01       	movw	r24, r20
    2594:	af 01       	movw	r20, r30
    2596:	28 e0       	ldi	r18, 0x08	; 8
    2598:	da 01       	movw	r26, r20
    259a:	0d 90       	ld	r0, X+
    259c:	ad 01       	movw	r20, r26
    259e:	dc 01       	movw	r26, r24
    25a0:	0d 92       	st	X+, r0
    25a2:	cd 01       	movw	r24, r26
    25a4:	21 50       	subi	r18, 0x01	; 1
    25a6:	c1 f7       	brne	.-16     	; 0x2598 <_fpadd_parts+0x52>
    25a8:	db 01       	movw	r26, r22
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	8c 91       	ld	r24, X
    25ae:	11 97       	sbiw	r26, 0x01	; 1
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	89 23       	and	r24, r25
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	0a c1       	rjmp	.+532    	; 0x27cc <_fpadd_parts+0x286>
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	09 f4       	brne	.+2      	; 0x25be <_fpadd_parts+0x78>
    25bc:	05 c1       	rjmp	.+522    	; 0x27c8 <_fpadd_parts+0x282>
    25be:	c2 80       	ldd	r12, Z+2	; 0x02
    25c0:	d3 80       	ldd	r13, Z+3	; 0x03
    25c2:	db 01       	movw	r26, r22
    25c4:	12 96       	adiw	r26, 0x02	; 2
    25c6:	6d 90       	ld	r6, X+
    25c8:	7c 90       	ld	r7, X
    25ca:	13 97       	sbiw	r26, 0x03	; 3
    25cc:	24 81       	ldd	r18, Z+4	; 0x04
    25ce:	35 81       	ldd	r19, Z+5	; 0x05
    25d0:	46 81       	ldd	r20, Z+6	; 0x06
    25d2:	57 81       	ldd	r21, Z+7	; 0x07
    25d4:	14 96       	adiw	r26, 0x04	; 4
    25d6:	ed 90       	ld	r14, X+
    25d8:	fd 90       	ld	r15, X+
    25da:	0d 91       	ld	r16, X+
    25dc:	1c 91       	ld	r17, X
    25de:	17 97       	sbiw	r26, 0x07	; 7
    25e0:	c6 01       	movw	r24, r12
    25e2:	86 19       	sub	r24, r6
    25e4:	97 09       	sbc	r25, r7
    25e6:	5c 01       	movw	r10, r24
    25e8:	97 ff       	sbrs	r25, 7
    25ea:	04 c0       	rjmp	.+8      	; 0x25f4 <_fpadd_parts+0xae>
    25ec:	aa 24       	eor	r10, r10
    25ee:	bb 24       	eor	r11, r11
    25f0:	a8 1a       	sub	r10, r24
    25f2:	b9 0a       	sbc	r11, r25
    25f4:	b0 e2       	ldi	r27, 0x20	; 32
    25f6:	ab 16       	cp	r10, r27
    25f8:	b1 04       	cpc	r11, r1
    25fa:	0c f0       	brlt	.+2      	; 0x25fe <_fpadd_parts+0xb8>
    25fc:	61 c0       	rjmp	.+194    	; 0x26c0 <_fpadd_parts+0x17a>
    25fe:	18 16       	cp	r1, r24
    2600:	19 06       	cpc	r1, r25
    2602:	6c f5       	brge	.+90     	; 0x265e <_fpadd_parts+0x118>
    2604:	37 01       	movw	r6, r14
    2606:	48 01       	movw	r8, r16
    2608:	0a 2c       	mov	r0, r10
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <_fpadd_parts+0xce>
    260c:	96 94       	lsr	r9
    260e:	87 94       	ror	r8
    2610:	77 94       	ror	r7
    2612:	67 94       	ror	r6
    2614:	0a 94       	dec	r0
    2616:	d2 f7       	brpl	.-12     	; 0x260c <_fpadd_parts+0xc6>
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	0a 2c       	mov	r0, r10
    2622:	04 c0       	rjmp	.+8      	; 0x262c <_fpadd_parts+0xe6>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	0a 94       	dec	r0
    262e:	d2 f7       	brpl	.-12     	; 0x2624 <_fpadd_parts+0xde>
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	a1 09       	sbc	r26, r1
    2634:	b1 09       	sbc	r27, r1
    2636:	8e 21       	and	r24, r14
    2638:	9f 21       	and	r25, r15
    263a:	a0 23       	and	r26, r16
    263c:	b1 23       	and	r27, r17
    263e:	ee 24       	eor	r14, r14
    2640:	ff 24       	eor	r15, r15
    2642:	87 01       	movw	r16, r14
    2644:	e3 94       	inc	r14
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	a1 05       	cpc	r26, r1
    264a:	b1 05       	cpc	r27, r1
    264c:	19 f4       	brne	.+6      	; 0x2654 <_fpadd_parts+0x10e>
    264e:	ee 24       	eor	r14, r14
    2650:	ff 24       	eor	r15, r15
    2652:	87 01       	movw	r16, r14
    2654:	e6 28       	or	r14, r6
    2656:	f7 28       	or	r15, r7
    2658:	08 29       	or	r16, r8
    265a:	19 29       	or	r17, r9
    265c:	3c c0       	rjmp	.+120    	; 0x26d6 <_fpadd_parts+0x190>
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	d1 f1       	breq	.+116    	; 0x26d6 <_fpadd_parts+0x190>
    2662:	ca 0c       	add	r12, r10
    2664:	db 1c       	adc	r13, r11
    2666:	39 01       	movw	r6, r18
    2668:	4a 01       	movw	r8, r20
    266a:	0a 2c       	mov	r0, r10
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <_fpadd_parts+0x130>
    266e:	96 94       	lsr	r9
    2670:	87 94       	ror	r8
    2672:	77 94       	ror	r7
    2674:	67 94       	ror	r6
    2676:	0a 94       	dec	r0
    2678:	d2 f7       	brpl	.-12     	; 0x266e <_fpadd_parts+0x128>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	0a 2c       	mov	r0, r10
    2684:	04 c0       	rjmp	.+8      	; 0x268e <_fpadd_parts+0x148>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	aa 1f       	adc	r26, r26
    268c:	bb 1f       	adc	r27, r27
    268e:	0a 94       	dec	r0
    2690:	d2 f7       	brpl	.-12     	; 0x2686 <_fpadd_parts+0x140>
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	a1 09       	sbc	r26, r1
    2696:	b1 09       	sbc	r27, r1
    2698:	82 23       	and	r24, r18
    269a:	93 23       	and	r25, r19
    269c:	a4 23       	and	r26, r20
    269e:	b5 23       	and	r27, r21
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	a1 05       	cpc	r26, r1
    26ac:	b1 05       	cpc	r27, r1
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <_fpadd_parts+0x170>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	a9 01       	movw	r20, r18
    26b6:	26 29       	or	r18, r6
    26b8:	37 29       	or	r19, r7
    26ba:	48 29       	or	r20, r8
    26bc:	59 29       	or	r21, r9
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <_fpadd_parts+0x190>
    26c0:	6c 14       	cp	r6, r12
    26c2:	7d 04       	cpc	r7, r13
    26c4:	24 f4       	brge	.+8      	; 0x26ce <_fpadd_parts+0x188>
    26c6:	ee 24       	eor	r14, r14
    26c8:	ff 24       	eor	r15, r15
    26ca:	87 01       	movw	r16, r14
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <_fpadd_parts+0x190>
    26ce:	63 01       	movw	r12, r6
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
    26d8:	fb 01       	movw	r30, r22
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	89 17       	cp	r24, r25
    26de:	09 f4       	brne	.+2      	; 0x26e2 <_fpadd_parts+0x19c>
    26e0:	45 c0       	rjmp	.+138    	; 0x276c <_fpadd_parts+0x226>
    26e2:	88 23       	and	r24, r24
    26e4:	49 f0       	breq	.+18     	; 0x26f8 <_fpadd_parts+0x1b2>
    26e6:	d8 01       	movw	r26, r16
    26e8:	c7 01       	movw	r24, r14
    26ea:	82 1b       	sub	r24, r18
    26ec:	93 0b       	sbc	r25, r19
    26ee:	a4 0b       	sbc	r26, r20
    26f0:	b5 0b       	sbc	r27, r21
    26f2:	9c 01       	movw	r18, r24
    26f4:	ad 01       	movw	r20, r26
    26f6:	04 c0       	rjmp	.+8      	; 0x2700 <_fpadd_parts+0x1ba>
    26f8:	2e 19       	sub	r18, r14
    26fa:	3f 09       	sbc	r19, r15
    26fc:	40 0b       	sbc	r20, r16
    26fe:	51 0b       	sbc	r21, r17
    2700:	57 fd       	sbrc	r21, 7
    2702:	04 c0       	rjmp	.+8      	; 0x270c <_fpadd_parts+0x1c6>
    2704:	19 82       	std	Y+1, r1	; 0x01
    2706:	ca 82       	std	Y+2, r12	; 0x02
    2708:	db 82       	std	Y+3, r13	; 0x03
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <_fpadd_parts+0x1dc>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	ca 82       	std	Y+2, r12	; 0x02
    2712:	db 82       	std	Y+3, r13	; 0x03
    2714:	50 95       	com	r21
    2716:	40 95       	com	r20
    2718:	30 95       	com	r19
    271a:	21 95       	neg	r18
    271c:	3f 4f       	sbci	r19, 0xFF	; 255
    271e:	4f 4f       	sbci	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	2c 83       	std	Y+4, r18	; 0x04
    2724:	3d 83       	std	Y+5, r19	; 0x05
    2726:	4e 83       	std	Y+6, r20	; 0x06
    2728:	5f 83       	std	Y+7, r21	; 0x07
    272a:	0d c0       	rjmp	.+26     	; 0x2746 <_fpadd_parts+0x200>
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	aa 1f       	adc	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	8c 83       	std	Y+4, r24	; 0x04
    2736:	9d 83       	std	Y+5, r25	; 0x05
    2738:	ae 83       	std	Y+6, r26	; 0x06
    273a:	bf 83       	std	Y+7, r27	; 0x07
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	8a 83       	std	Y+2, r24	; 0x02
    2744:	9b 83       	std	Y+3, r25	; 0x03
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	9d 81       	ldd	r25, Y+5	; 0x05
    274a:	ae 81       	ldd	r26, Y+6	; 0x06
    274c:	bf 81       	ldd	r27, Y+7	; 0x07
    274e:	9c 01       	movw	r18, r24
    2750:	ad 01       	movw	r20, r26
    2752:	21 50       	subi	r18, 0x01	; 1
    2754:	30 40       	sbci	r19, 0x00	; 0
    2756:	40 40       	sbci	r20, 0x00	; 0
    2758:	50 40       	sbci	r21, 0x00	; 0
    275a:	2f 3f       	cpi	r18, 0xFF	; 255
    275c:	ef ef       	ldi	r30, 0xFF	; 255
    275e:	3e 07       	cpc	r19, r30
    2760:	ef ef       	ldi	r30, 0xFF	; 255
    2762:	4e 07       	cpc	r20, r30
    2764:	ef e3       	ldi	r30, 0x3F	; 63
    2766:	5e 07       	cpc	r21, r30
    2768:	08 f3       	brcs	.-62     	; 0x272c <_fpadd_parts+0x1e6>
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <_fpadd_parts+0x23c>
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	ca 82       	std	Y+2, r12	; 0x02
    2770:	db 82       	std	Y+3, r13	; 0x03
    2772:	2e 0d       	add	r18, r14
    2774:	3f 1d       	adc	r19, r15
    2776:	40 1f       	adc	r20, r16
    2778:	51 1f       	adc	r21, r17
    277a:	2c 83       	std	Y+4, r18	; 0x04
    277c:	3d 83       	std	Y+5, r19	; 0x05
    277e:	4e 83       	std	Y+6, r20	; 0x06
    2780:	5f 83       	std	Y+7, r21	; 0x07
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	88 83       	st	Y, r24
    2786:	2c 81       	ldd	r18, Y+4	; 0x04
    2788:	3d 81       	ldd	r19, Y+5	; 0x05
    278a:	4e 81       	ldd	r20, Y+6	; 0x06
    278c:	5f 81       	ldd	r21, Y+7	; 0x07
    278e:	57 ff       	sbrs	r21, 7
    2790:	1d c0       	rjmp	.+58     	; 0x27cc <_fpadd_parts+0x286>
    2792:	da 01       	movw	r26, r20
    2794:	c9 01       	movw	r24, r18
    2796:	81 70       	andi	r24, 0x01	; 1
    2798:	90 70       	andi	r25, 0x00	; 0
    279a:	a0 70       	andi	r26, 0x00	; 0
    279c:	b0 70       	andi	r27, 0x00	; 0
    279e:	56 95       	lsr	r21
    27a0:	47 95       	ror	r20
    27a2:	37 95       	ror	r19
    27a4:	27 95       	ror	r18
    27a6:	82 2b       	or	r24, r18
    27a8:	93 2b       	or	r25, r19
    27aa:	a4 2b       	or	r26, r20
    27ac:	b5 2b       	or	r27, r21
    27ae:	8c 83       	std	Y+4, r24	; 0x04
    27b0:	9d 83       	std	Y+5, r25	; 0x05
    27b2:	ae 83       	std	Y+6, r26	; 0x06
    27b4:	bf 83       	std	Y+7, r27	; 0x07
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	8a 83       	std	Y+2, r24	; 0x02
    27be:	9b 83       	std	Y+3, r25	; 0x03
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <_fpadd_parts+0x286>
    27c2:	ef e3       	ldi	r30, 0x3F	; 63
    27c4:	f0 e2       	ldi	r31, 0x20	; 32
    27c6:	03 c0       	rjmp	.+6      	; 0x27ce <_fpadd_parts+0x288>
    27c8:	fb 01       	movw	r30, r22
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <_fpadd_parts+0x288>
    27cc:	fe 01       	movw	r30, r28
    27ce:	cf 01       	movw	r24, r30
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	ee e0       	ldi	r30, 0x0E	; 14
    27d6:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x8>

000027da <__addsf3>:
    27da:	a0 e2       	ldi	r26, 0x20	; 32
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e3 ef       	ldi	r30, 0xF3	; 243
    27e0:	f3 e1       	ldi	r31, 0x13	; 19
    27e2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    27e6:	69 83       	std	Y+1, r22	; 0x01
    27e8:	7a 83       	std	Y+2, r23	; 0x02
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	2d 83       	std	Y+5, r18	; 0x05
    27f0:	3e 83       	std	Y+6, r19	; 0x06
    27f2:	4f 83       	std	Y+7, r20	; 0x07
    27f4:	58 87       	std	Y+8, r21	; 0x08
    27f6:	89 e0       	ldi	r24, 0x09	; 9
    27f8:	e8 2e       	mov	r14, r24
    27fa:	f1 2c       	mov	r15, r1
    27fc:	ec 0e       	add	r14, r28
    27fe:	fd 1e       	adc	r15, r29
    2800:	ce 01       	movw	r24, r28
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	b7 01       	movw	r22, r14
    2806:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    280a:	8e 01       	movw	r16, r28
    280c:	0f 5e       	subi	r16, 0xEF	; 239
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	ce 01       	movw	r24, r28
    2812:	05 96       	adiw	r24, 0x05	; 5
    2814:	b8 01       	movw	r22, r16
    2816:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    281a:	c7 01       	movw	r24, r14
    281c:	b8 01       	movw	r22, r16
    281e:	ae 01       	movw	r20, r28
    2820:	47 5e       	subi	r20, 0xE7	; 231
    2822:	5f 4f       	sbci	r21, 0xFF	; 255
    2824:	0e 94 a3 12 	call	0x2546	; 0x2546 <_fpadd_parts>
    2828:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    282c:	a0 96       	adiw	r28, 0x20	; 32
    282e:	e6 e0       	ldi	r30, 0x06	; 6
    2830:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002834 <__subsf3>:
    2834:	a0 e2       	ldi	r26, 0x20	; 32
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e0 e2       	ldi	r30, 0x20	; 32
    283a:	f4 e1       	ldi	r31, 0x14	; 20
    283c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    2840:	69 83       	std	Y+1, r22	; 0x01
    2842:	7a 83       	std	Y+2, r23	; 0x02
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	2d 83       	std	Y+5, r18	; 0x05
    284a:	3e 83       	std	Y+6, r19	; 0x06
    284c:	4f 83       	std	Y+7, r20	; 0x07
    284e:	58 87       	std	Y+8, r21	; 0x08
    2850:	8e 01       	movw	r16, r28
    2852:	07 5f       	subi	r16, 0xF7	; 247
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	b8 01       	movw	r22, r16
    285c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2860:	91 e1       	ldi	r25, 0x11	; 17
    2862:	e9 2e       	mov	r14, r25
    2864:	f1 2c       	mov	r15, r1
    2866:	ec 0e       	add	r14, r28
    2868:	fd 1e       	adc	r15, r29
    286a:	ce 01       	movw	r24, r28
    286c:	05 96       	adiw	r24, 0x05	; 5
    286e:	b7 01       	movw	r22, r14
    2870:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	89 27       	eor	r24, r25
    287a:	8a 8b       	std	Y+18, r24	; 0x12
    287c:	c8 01       	movw	r24, r16
    287e:	b7 01       	movw	r22, r14
    2880:	ae 01       	movw	r20, r28
    2882:	47 5e       	subi	r20, 0xE7	; 231
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	0e 94 a3 12 	call	0x2546	; 0x2546 <_fpadd_parts>
    288a:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    288e:	a0 96       	adiw	r28, 0x20	; 32
    2890:	e6 e0       	ldi	r30, 0x06	; 6
    2892:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002896 <__mulsf3>:
    2896:	a0 e2       	ldi	r26, 0x20	; 32
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e1 e5       	ldi	r30, 0x51	; 81
    289c:	f4 e1       	ldi	r31, 0x14	; 20
    289e:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__prologue_saves__>
    28a2:	69 83       	std	Y+1, r22	; 0x01
    28a4:	7a 83       	std	Y+2, r23	; 0x02
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	2d 83       	std	Y+5, r18	; 0x05
    28ac:	3e 83       	std	Y+6, r19	; 0x06
    28ae:	4f 83       	std	Y+7, r20	; 0x07
    28b0:	58 87       	std	Y+8, r21	; 0x08
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	be 01       	movw	r22, r28
    28b8:	67 5f       	subi	r22, 0xF7	; 247
    28ba:	7f 4f       	sbci	r23, 0xFF	; 255
    28bc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    28c0:	ce 01       	movw	r24, r28
    28c2:	05 96       	adiw	r24, 0x05	; 5
    28c4:	be 01       	movw	r22, r28
    28c6:	6f 5e       	subi	r22, 0xEF	; 239
    28c8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ca:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    28ce:	99 85       	ldd	r25, Y+9	; 0x09
    28d0:	92 30       	cpi	r25, 0x02	; 2
    28d2:	78 f0       	brcs	.+30     	; 0x28f2 <__mulsf3+0x5c>
    28d4:	89 89       	ldd	r24, Y+17	; 0x11
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	c0 f0       	brcs	.+48     	; 0x290a <__mulsf3+0x74>
    28da:	94 30       	cpi	r25, 0x04	; 4
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <__mulsf3+0x4e>
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	41 f4       	brne	.+16     	; 0x28f2 <__mulsf3+0x5c>
    28e2:	cb c0       	rjmp	.+406    	; 0x2a7a <__mulsf3+0x1e4>
    28e4:	84 30       	cpi	r24, 0x04	; 4
    28e6:	19 f4       	brne	.+6      	; 0x28ee <__mulsf3+0x58>
    28e8:	92 30       	cpi	r25, 0x02	; 2
    28ea:	79 f4       	brne	.+30     	; 0x290a <__mulsf3+0x74>
    28ec:	c6 c0       	rjmp	.+396    	; 0x2a7a <__mulsf3+0x1e4>
    28ee:	92 30       	cpi	r25, 0x02	; 2
    28f0:	51 f4       	brne	.+20     	; 0x2906 <__mulsf3+0x70>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    28f6:	9a 89       	ldd	r25, Y+18	; 0x12
    28f8:	29 17       	cp	r18, r25
    28fa:	09 f4       	brne	.+2      	; 0x28fe <__mulsf3+0x68>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	8a 87       	std	Y+10, r24	; 0x0a
    2900:	ce 01       	movw	r24, r28
    2902:	09 96       	adiw	r24, 0x09	; 9
    2904:	bc c0       	rjmp	.+376    	; 0x2a7e <__mulsf3+0x1e8>
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	51 f4       	brne	.+20     	; 0x291e <__mulsf3+0x88>
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	2a 85       	ldd	r18, Y+10	; 0x0a
    290e:	9a 89       	ldd	r25, Y+18	; 0x12
    2910:	29 17       	cp	r18, r25
    2912:	09 f4       	brne	.+2      	; 0x2916 <__mulsf3+0x80>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	8a 8b       	std	Y+18, r24	; 0x12
    2918:	ce 01       	movw	r24, r28
    291a:	41 96       	adiw	r24, 0x11	; 17
    291c:	b0 c0       	rjmp	.+352    	; 0x2a7e <__mulsf3+0x1e8>
    291e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2920:	7e 84       	ldd	r7, Y+14	; 0x0e
    2922:	8f 84       	ldd	r8, Y+15	; 0x0f
    2924:	98 88       	ldd	r9, Y+16	; 0x10
    2926:	ed 88       	ldd	r14, Y+21	; 0x15
    2928:	fe 88       	ldd	r15, Y+22	; 0x16
    292a:	0f 89       	ldd	r16, Y+23	; 0x17
    292c:	18 8d       	ldd	r17, Y+24	; 0x18
    292e:	e0 e2       	ldi	r30, 0x20	; 32
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	dc 01       	movw	r26, r24
    2938:	aa 24       	eor	r10, r10
    293a:	bb 24       	eor	r11, r11
    293c:	65 01       	movw	r12, r10
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	a9 01       	movw	r20, r18
    2944:	b3 01       	movw	r22, r6
    2946:	61 70       	andi	r22, 0x01	; 1
    2948:	70 70       	andi	r23, 0x00	; 0
    294a:	61 15       	cp	r22, r1
    294c:	71 05       	cpc	r23, r1
    294e:	d1 f0       	breq	.+52     	; 0x2984 <__mulsf3+0xee>
    2950:	2e 0d       	add	r18, r14
    2952:	3f 1d       	adc	r19, r15
    2954:	40 1f       	adc	r20, r16
    2956:	51 1f       	adc	r21, r17
    2958:	15 01       	movw	r2, r10
    295a:	26 01       	movw	r4, r12
    295c:	28 0e       	add	r2, r24
    295e:	39 1e       	adc	r3, r25
    2960:	4a 1e       	adc	r4, r26
    2962:	5b 1e       	adc	r5, r27
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	2e 15       	cp	r18, r14
    296e:	3f 05       	cpc	r19, r15
    2970:	40 07       	cpc	r20, r16
    2972:	51 07       	cpc	r21, r17
    2974:	18 f0       	brcs	.+6      	; 0x297c <__mulsf3+0xe6>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	dc 01       	movw	r26, r24
    297c:	82 0d       	add	r24, r2
    297e:	93 1d       	adc	r25, r3
    2980:	a4 1d       	adc	r26, r4
    2982:	b5 1d       	adc	r27, r5
    2984:	aa 0c       	add	r10, r10
    2986:	bb 1c       	adc	r11, r11
    2988:	cc 1c       	adc	r12, r12
    298a:	dd 1c       	adc	r13, r13
    298c:	17 ff       	sbrs	r17, 7
    298e:	09 c0       	rjmp	.+18     	; 0x29a2 <__mulsf3+0x10c>
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	26 2e       	mov	r2, r22
    2994:	31 2c       	mov	r3, r1
    2996:	41 2c       	mov	r4, r1
    2998:	51 2c       	mov	r5, r1
    299a:	a2 28       	or	r10, r2
    299c:	b3 28       	or	r11, r3
    299e:	c4 28       	or	r12, r4
    29a0:	d5 28       	or	r13, r5
    29a2:	31 97       	sbiw	r30, 0x01	; 1
    29a4:	49 f0       	breq	.+18     	; 0x29b8 <__mulsf3+0x122>
    29a6:	ee 0c       	add	r14, r14
    29a8:	ff 1c       	adc	r15, r15
    29aa:	00 1f       	adc	r16, r16
    29ac:	11 1f       	adc	r17, r17
    29ae:	96 94       	lsr	r9
    29b0:	87 94       	ror	r8
    29b2:	77 94       	ror	r7
    29b4:	67 94       	ror	r6
    29b6:	c6 cf       	rjmp	.-116    	; 0x2944 <__mulsf3+0xae>
    29b8:	6b 89       	ldd	r22, Y+19	; 0x13
    29ba:	7c 89       	ldd	r23, Y+20	; 0x14
    29bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    29be:	fc 85       	ldd	r31, Y+12	; 0x0c
    29c0:	6e 0f       	add	r22, r30
    29c2:	7f 1f       	adc	r23, r31
    29c4:	6e 5f       	subi	r22, 0xFE	; 254
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	6b 8f       	std	Y+27, r22	; 0x1b
    29ca:	7c 8f       	std	Y+28, r23	; 0x1c
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    29d0:	7a 89       	ldd	r23, Y+18	; 0x12
    29d2:	e7 17       	cp	r30, r23
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__mulsf3+0x142>
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	6a 8f       	std	Y+26, r22	; 0x1a
    29da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    29dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    29de:	10 c0       	rjmp	.+32     	; 0x2a00 <__mulsf3+0x16a>
    29e0:	fc 01       	movw	r30, r24
    29e2:	e1 70       	andi	r30, 0x01	; 1
    29e4:	f0 70       	andi	r31, 0x00	; 0
    29e6:	30 97       	sbiw	r30, 0x00	; 0
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <__mulsf3+0x15e>
    29ea:	56 95       	lsr	r21
    29ec:	47 95       	ror	r20
    29ee:	37 95       	ror	r19
    29f0:	27 95       	ror	r18
    29f2:	50 68       	ori	r21, 0x80	; 128
    29f4:	b6 95       	lsr	r27
    29f6:	a7 95       	ror	r26
    29f8:	97 95       	ror	r25
    29fa:	87 95       	ror	r24
    29fc:	6f 5f       	subi	r22, 0xFF	; 255
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	b7 fd       	sbrc	r27, 7
    2a02:	ee cf       	rjmp	.-36     	; 0x29e0 <__mulsf3+0x14a>
    2a04:	0c c0       	rjmp	.+24     	; 0x2a1e <__mulsf3+0x188>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	57 fd       	sbrc	r21, 7
    2a10:	81 60       	ori	r24, 0x01	; 1
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	44 1f       	adc	r20, r20
    2a18:	55 1f       	adc	r21, r21
    2a1a:	61 50       	subi	r22, 0x01	; 1
    2a1c:	70 40       	sbci	r23, 0x00	; 0
    2a1e:	80 30       	cpi	r24, 0x00	; 0
    2a20:	e0 e0       	ldi	r30, 0x00	; 0
    2a22:	9e 07       	cpc	r25, r30
    2a24:	e0 e0       	ldi	r30, 0x00	; 0
    2a26:	ae 07       	cpc	r26, r30
    2a28:	e0 e4       	ldi	r30, 0x40	; 64
    2a2a:	be 07       	cpc	r27, r30
    2a2c:	60 f3       	brcs	.-40     	; 0x2a06 <__mulsf3+0x170>
    2a2e:	6b 8f       	std	Y+27, r22	; 0x1b
    2a30:	7c 8f       	std	Y+28, r23	; 0x1c
    2a32:	6f e7       	ldi	r22, 0x7F	; 127
    2a34:	e6 2e       	mov	r14, r22
    2a36:	f1 2c       	mov	r15, r1
    2a38:	01 2d       	mov	r16, r1
    2a3a:	11 2d       	mov	r17, r1
    2a3c:	e8 22       	and	r14, r24
    2a3e:	f9 22       	and	r15, r25
    2a40:	0a 23       	and	r16, r26
    2a42:	1b 23       	and	r17, r27
    2a44:	60 e4       	ldi	r22, 0x40	; 64
    2a46:	e6 16       	cp	r14, r22
    2a48:	f1 04       	cpc	r15, r1
    2a4a:	01 05       	cpc	r16, r1
    2a4c:	11 05       	cpc	r17, r1
    2a4e:	61 f4       	brne	.+24     	; 0x2a68 <__mulsf3+0x1d2>
    2a50:	87 fd       	sbrc	r24, 7
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <__mulsf3+0x1d2>
    2a54:	21 15       	cp	r18, r1
    2a56:	31 05       	cpc	r19, r1
    2a58:	41 05       	cpc	r20, r1
    2a5a:	51 05       	cpc	r21, r1
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <__mulsf3+0x1d2>
    2a5e:	80 5c       	subi	r24, 0xC0	; 192
    2a60:	9f 4f       	sbci	r25, 0xFF	; 255
    2a62:	af 4f       	sbci	r26, 0xFF	; 255
    2a64:	bf 4f       	sbci	r27, 0xFF	; 255
    2a66:	80 78       	andi	r24, 0x80	; 128
    2a68:	8d 8f       	std	Y+29, r24	; 0x1d
    2a6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6c:	af 8f       	std	Y+31, r26	; 0x1f
    2a6e:	b8 a3       	std	Y+32, r27	; 0x20
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	89 8f       	std	Y+25, r24	; 0x19
    2a74:	ce 01       	movw	r24, r28
    2a76:	49 96       	adiw	r24, 0x19	; 25
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <__mulsf3+0x1e8>
    2a7a:	8f e3       	ldi	r24, 0x3F	; 63
    2a7c:	90 e2       	ldi	r25, 0x20	; 32
    2a7e:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2a82:	a0 96       	adiw	r28, 0x20	; 32
    2a84:	e2 e1       	ldi	r30, 0x12	; 18
    2a86:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__epilogue_restores__>

00002a8a <__divsf3>:
    2a8a:	a8 e1       	ldi	r26, 0x18	; 24
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	eb e4       	ldi	r30, 0x4B	; 75
    2a90:	f5 e1       	ldi	r31, 0x15	; 21
    2a92:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x10>
    2a96:	69 83       	std	Y+1, r22	; 0x01
    2a98:	7a 83       	std	Y+2, r23	; 0x02
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	2d 83       	std	Y+5, r18	; 0x05
    2aa0:	3e 83       	std	Y+6, r19	; 0x06
    2aa2:	4f 83       	std	Y+7, r20	; 0x07
    2aa4:	58 87       	std	Y+8, r21	; 0x08
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	07 5f       	subi	r16, 0xF7	; 247
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	ce 01       	movw	r24, r28
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	b8 01       	movw	r22, r16
    2ab2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2ab6:	81 e1       	ldi	r24, 0x11	; 17
    2ab8:	e8 2e       	mov	r14, r24
    2aba:	f1 2c       	mov	r15, r1
    2abc:	ec 0e       	add	r14, r28
    2abe:	fd 1e       	adc	r15, r29
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	05 96       	adiw	r24, 0x05	; 5
    2ac4:	b7 01       	movw	r22, r14
    2ac6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2aca:	99 85       	ldd	r25, Y+9	; 0x09
    2acc:	92 30       	cpi	r25, 0x02	; 2
    2ace:	08 f4       	brcc	.+2      	; 0x2ad2 <__divsf3+0x48>
    2ad0:	83 c0       	rjmp	.+262    	; 0x2bd8 <__divsf3+0x14e>
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	08 f4       	brcc	.+2      	; 0x2ada <__divsf3+0x50>
    2ad8:	7b c0       	rjmp	.+246    	; 0x2bd0 <__divsf3+0x146>
    2ada:	2a 85       	ldd	r18, Y+10	; 0x0a
    2adc:	3a 89       	ldd	r19, Y+18	; 0x12
    2ade:	23 27       	eor	r18, r19
    2ae0:	2a 87       	std	Y+10, r18	; 0x0a
    2ae2:	94 30       	cpi	r25, 0x04	; 4
    2ae4:	11 f0       	breq	.+4      	; 0x2aea <__divsf3+0x60>
    2ae6:	92 30       	cpi	r25, 0x02	; 2
    2ae8:	21 f4       	brne	.+8      	; 0x2af2 <__divsf3+0x68>
    2aea:	98 17       	cp	r25, r24
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <__divsf3+0x66>
    2aee:	6c c0       	rjmp	.+216    	; 0x2bc8 <__divsf3+0x13e>
    2af0:	71 c0       	rjmp	.+226    	; 0x2bd4 <__divsf3+0x14a>
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	39 f4       	brne	.+14     	; 0x2b04 <__divsf3+0x7a>
    2af6:	1d 86       	std	Y+13, r1	; 0x0d
    2af8:	1e 86       	std	Y+14, r1	; 0x0e
    2afa:	1f 86       	std	Y+15, r1	; 0x0f
    2afc:	18 8a       	std	Y+16, r1	; 0x10
    2afe:	1b 86       	std	Y+11, r1	; 0x0b
    2b00:	1c 86       	std	Y+12, r1	; 0x0c
    2b02:	6a c0       	rjmp	.+212    	; 0x2bd8 <__divsf3+0x14e>
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	19 f4       	brne	.+6      	; 0x2b0e <__divsf3+0x84>
    2b08:	84 e0       	ldi	r24, 0x04	; 4
    2b0a:	89 87       	std	Y+9, r24	; 0x09
    2b0c:	65 c0       	rjmp	.+202    	; 0x2bd8 <__divsf3+0x14e>
    2b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b12:	2b 89       	ldd	r18, Y+19	; 0x13
    2b14:	3c 89       	ldd	r19, Y+20	; 0x14
    2b16:	82 1b       	sub	r24, r18
    2b18:	93 0b       	sbc	r25, r19
    2b1a:	8b 87       	std	Y+11, r24	; 0x0b
    2b1c:	9c 87       	std	Y+12, r25	; 0x0c
    2b1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b20:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b22:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b24:	58 89       	ldd	r21, Y+16	; 0x10
    2b26:	ed 88       	ldd	r14, Y+21	; 0x15
    2b28:	fe 88       	ldd	r15, Y+22	; 0x16
    2b2a:	0f 89       	ldd	r16, Y+23	; 0x17
    2b2c:	18 8d       	ldd	r17, Y+24	; 0x18
    2b2e:	2e 15       	cp	r18, r14
    2b30:	3f 05       	cpc	r19, r15
    2b32:	40 07       	cpc	r20, r16
    2b34:	51 07       	cpc	r21, r17
    2b36:	38 f4       	brcc	.+14     	; 0x2b46 <__divsf3+0xbc>
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	44 1f       	adc	r20, r20
    2b3e:	55 1f       	adc	r21, r21
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	8b 87       	std	Y+11, r24	; 0x0b
    2b44:	9c 87       	std	Y+12, r25	; 0x0c
    2b46:	6f e1       	ldi	r22, 0x1F	; 31
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	a1 2c       	mov	r10, r1
    2b4c:	b1 2c       	mov	r11, r1
    2b4e:	c1 2c       	mov	r12, r1
    2b50:	a0 e4       	ldi	r26, 0x40	; 64
    2b52:	da 2e       	mov	r13, r26
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	dc 01       	movw	r26, r24
    2b5a:	2e 15       	cp	r18, r14
    2b5c:	3f 05       	cpc	r19, r15
    2b5e:	40 07       	cpc	r20, r16
    2b60:	51 07       	cpc	r21, r17
    2b62:	40 f0       	brcs	.+16     	; 0x2b74 <__divsf3+0xea>
    2b64:	8a 29       	or	r24, r10
    2b66:	9b 29       	or	r25, r11
    2b68:	ac 29       	or	r26, r12
    2b6a:	bd 29       	or	r27, r13
    2b6c:	2e 19       	sub	r18, r14
    2b6e:	3f 09       	sbc	r19, r15
    2b70:	40 0b       	sbc	r20, r16
    2b72:	51 0b       	sbc	r21, r17
    2b74:	d6 94       	lsr	r13
    2b76:	c7 94       	ror	r12
    2b78:	b7 94       	ror	r11
    2b7a:	a7 94       	ror	r10
    2b7c:	22 0f       	add	r18, r18
    2b7e:	33 1f       	adc	r19, r19
    2b80:	44 1f       	adc	r20, r20
    2b82:	55 1f       	adc	r21, r21
    2b84:	61 50       	subi	r22, 0x01	; 1
    2b86:	70 40       	sbci	r23, 0x00	; 0
    2b88:	41 f7       	brne	.-48     	; 0x2b5a <__divsf3+0xd0>
    2b8a:	6f e7       	ldi	r22, 0x7F	; 127
    2b8c:	e6 2e       	mov	r14, r22
    2b8e:	f1 2c       	mov	r15, r1
    2b90:	01 2d       	mov	r16, r1
    2b92:	11 2d       	mov	r17, r1
    2b94:	e8 22       	and	r14, r24
    2b96:	f9 22       	and	r15, r25
    2b98:	0a 23       	and	r16, r26
    2b9a:	1b 23       	and	r17, r27
    2b9c:	60 e4       	ldi	r22, 0x40	; 64
    2b9e:	e6 16       	cp	r14, r22
    2ba0:	f1 04       	cpc	r15, r1
    2ba2:	01 05       	cpc	r16, r1
    2ba4:	11 05       	cpc	r17, r1
    2ba6:	61 f4       	brne	.+24     	; 0x2bc0 <__divsf3+0x136>
    2ba8:	87 fd       	sbrc	r24, 7
    2baa:	0a c0       	rjmp	.+20     	; 0x2bc0 <__divsf3+0x136>
    2bac:	21 15       	cp	r18, r1
    2bae:	31 05       	cpc	r19, r1
    2bb0:	41 05       	cpc	r20, r1
    2bb2:	51 05       	cpc	r21, r1
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <__divsf3+0x136>
    2bb6:	80 5c       	subi	r24, 0xC0	; 192
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	af 4f       	sbci	r26, 0xFF	; 255
    2bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbe:	80 78       	andi	r24, 0x80	; 128
    2bc0:	8d 87       	std	Y+13, r24	; 0x0d
    2bc2:	9e 87       	std	Y+14, r25	; 0x0e
    2bc4:	af 87       	std	Y+15, r26	; 0x0f
    2bc6:	b8 8b       	std	Y+16, r27	; 0x10
    2bc8:	8e 01       	movw	r16, r28
    2bca:	07 5f       	subi	r16, 0xF7	; 247
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__divsf3+0x14e>
    2bd0:	87 01       	movw	r16, r14
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <__divsf3+0x14e>
    2bd4:	0f e3       	ldi	r16, 0x3F	; 63
    2bd6:	10 e2       	ldi	r17, 0x20	; 32
    2bd8:	c8 01       	movw	r24, r16
    2bda:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2bde:	68 96       	adiw	r28, 0x18	; 24
    2be0:	ea e0       	ldi	r30, 0x0A	; 10
    2be2:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x10>

00002be6 <__gtsf2>:
    2be6:	a8 e1       	ldi	r26, 0x18	; 24
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e9 ef       	ldi	r30, 0xF9	; 249
    2bec:	f5 e1       	ldi	r31, 0x15	; 21
    2bee:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    2bf2:	69 83       	std	Y+1, r22	; 0x01
    2bf4:	7a 83       	std	Y+2, r23	; 0x02
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	2d 83       	std	Y+5, r18	; 0x05
    2bfc:	3e 83       	std	Y+6, r19	; 0x06
    2bfe:	4f 83       	std	Y+7, r20	; 0x07
    2c00:	58 87       	std	Y+8, r21	; 0x08
    2c02:	8e 01       	movw	r16, r28
    2c04:	07 5f       	subi	r16, 0xF7	; 247
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	b8 01       	movw	r22, r16
    2c0e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2c12:	81 e1       	ldi	r24, 0x11	; 17
    2c14:	e8 2e       	mov	r14, r24
    2c16:	f1 2c       	mov	r15, r1
    2c18:	ec 0e       	add	r14, r28
    2c1a:	fd 1e       	adc	r15, r29
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	05 96       	adiw	r24, 0x05	; 5
    2c20:	b7 01       	movw	r22, r14
    2c22:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	40 f0       	brcs	.+16     	; 0x2c3c <__gtsf2+0x56>
    2c2c:	89 89       	ldd	r24, Y+17	; 0x11
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	28 f0       	brcs	.+10     	; 0x2c3c <__gtsf2+0x56>
    2c32:	c8 01       	movw	r24, r16
    2c34:	b7 01       	movw	r22, r14
    2c36:	0e 94 3e 19 	call	0x327c	; 0x327c <__fpcmp_parts_f>
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <__gtsf2+0x58>
    2c3c:	8f ef       	ldi	r24, 0xFF	; 255
    2c3e:	68 96       	adiw	r28, 0x18	; 24
    2c40:	e6 e0       	ldi	r30, 0x06	; 6
    2c42:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002c46 <__gesf2>:
    2c46:	a8 e1       	ldi	r26, 0x18	; 24
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e9 e2       	ldi	r30, 0x29	; 41
    2c4c:	f6 e1       	ldi	r31, 0x16	; 22
    2c4e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    2c52:	69 83       	std	Y+1, r22	; 0x01
    2c54:	7a 83       	std	Y+2, r23	; 0x02
    2c56:	8b 83       	std	Y+3, r24	; 0x03
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	2d 83       	std	Y+5, r18	; 0x05
    2c5c:	3e 83       	std	Y+6, r19	; 0x06
    2c5e:	4f 83       	std	Y+7, r20	; 0x07
    2c60:	58 87       	std	Y+8, r21	; 0x08
    2c62:	8e 01       	movw	r16, r28
    2c64:	07 5f       	subi	r16, 0xF7	; 247
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	b8 01       	movw	r22, r16
    2c6e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2c72:	81 e1       	ldi	r24, 0x11	; 17
    2c74:	e8 2e       	mov	r14, r24
    2c76:	f1 2c       	mov	r15, r1
    2c78:	ec 0e       	add	r14, r28
    2c7a:	fd 1e       	adc	r15, r29
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	05 96       	adiw	r24, 0x05	; 5
    2c80:	b7 01       	movw	r22, r14
    2c82:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	82 30       	cpi	r24, 0x02	; 2
    2c8a:	40 f0       	brcs	.+16     	; 0x2c9c <__gesf2+0x56>
    2c8c:	89 89       	ldd	r24, Y+17	; 0x11
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	28 f0       	brcs	.+10     	; 0x2c9c <__gesf2+0x56>
    2c92:	c8 01       	movw	r24, r16
    2c94:	b7 01       	movw	r22, r14
    2c96:	0e 94 3e 19 	call	0x327c	; 0x327c <__fpcmp_parts_f>
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <__gesf2+0x58>
    2c9c:	8f ef       	ldi	r24, 0xFF	; 255
    2c9e:	68 96       	adiw	r28, 0x18	; 24
    2ca0:	e6 e0       	ldi	r30, 0x06	; 6
    2ca2:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002ca6 <__ltsf2>:
    2ca6:	a8 e1       	ldi	r26, 0x18	; 24
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e9 e5       	ldi	r30, 0x59	; 89
    2cac:	f6 e1       	ldi	r31, 0x16	; 22
    2cae:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    2cb2:	69 83       	std	Y+1, r22	; 0x01
    2cb4:	7a 83       	std	Y+2, r23	; 0x02
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	2d 83       	std	Y+5, r18	; 0x05
    2cbc:	3e 83       	std	Y+6, r19	; 0x06
    2cbe:	4f 83       	std	Y+7, r20	; 0x07
    2cc0:	58 87       	std	Y+8, r21	; 0x08
    2cc2:	8e 01       	movw	r16, r28
    2cc4:	07 5f       	subi	r16, 0xF7	; 247
    2cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc8:	ce 01       	movw	r24, r28
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	b8 01       	movw	r22, r16
    2cce:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2cd2:	81 e1       	ldi	r24, 0x11	; 17
    2cd4:	e8 2e       	mov	r14, r24
    2cd6:	f1 2c       	mov	r15, r1
    2cd8:	ec 0e       	add	r14, r28
    2cda:	fd 1e       	adc	r15, r29
    2cdc:	ce 01       	movw	r24, r28
    2cde:	05 96       	adiw	r24, 0x05	; 5
    2ce0:	b7 01       	movw	r22, r14
    2ce2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	82 30       	cpi	r24, 0x02	; 2
    2cea:	40 f0       	brcs	.+16     	; 0x2cfc <__ltsf2+0x56>
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	28 f0       	brcs	.+10     	; 0x2cfc <__ltsf2+0x56>
    2cf2:	c8 01       	movw	r24, r16
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	0e 94 3e 19 	call	0x327c	; 0x327c <__fpcmp_parts_f>
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <__ltsf2+0x58>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	68 96       	adiw	r28, 0x18	; 24
    2d00:	e6 e0       	ldi	r30, 0x06	; 6
    2d02:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002d06 <__floatsisf>:
    2d06:	a8 e0       	ldi	r26, 0x08	; 8
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e9 e8       	ldi	r30, 0x89	; 137
    2d0c:	f6 e1       	ldi	r31, 0x16	; 22
    2d0e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x18>
    2d12:	7b 01       	movw	r14, r22
    2d14:	8c 01       	movw	r16, r24
    2d16:	83 e0       	ldi	r24, 0x03	; 3
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	d8 01       	movw	r26, r16
    2d1c:	c7 01       	movw	r24, r14
    2d1e:	88 27       	eor	r24, r24
    2d20:	b7 fd       	sbrc	r27, 7
    2d22:	83 95       	inc	r24
    2d24:	99 27       	eor	r25, r25
    2d26:	aa 27       	eor	r26, r26
    2d28:	bb 27       	eor	r27, r27
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
    2d2e:	e1 14       	cp	r14, r1
    2d30:	f1 04       	cpc	r15, r1
    2d32:	01 05       	cpc	r16, r1
    2d34:	11 05       	cpc	r17, r1
    2d36:	19 f4       	brne	.+6      	; 0x2d3e <__floatsisf+0x38>
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	37 c0       	rjmp	.+110    	; 0x2dac <__floatsisf+0xa6>
    2d3e:	8e e1       	ldi	r24, 0x1E	; 30
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	9c 83       	std	Y+4, r25	; 0x04
    2d46:	22 23       	and	r18, r18
    2d48:	89 f0       	breq	.+34     	; 0x2d6c <__floatsisf+0x66>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	e8 16       	cp	r14, r24
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	f8 06       	cpc	r15, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	08 07       	cpc	r16, r24
    2d56:	80 e8       	ldi	r24, 0x80	; 128
    2d58:	18 07       	cpc	r17, r24
    2d5a:	69 f1       	breq	.+90     	; 0x2db6 <__floatsisf+0xb0>
    2d5c:	10 95       	com	r17
    2d5e:	00 95       	com	r16
    2d60:	f0 94       	com	r15
    2d62:	e0 94       	com	r14
    2d64:	e1 1c       	adc	r14, r1
    2d66:	f1 1c       	adc	r15, r1
    2d68:	01 1d       	adc	r16, r1
    2d6a:	11 1d       	adc	r17, r1
    2d6c:	ed 82       	std	Y+5, r14	; 0x05
    2d6e:	fe 82       	std	Y+6, r15	; 0x06
    2d70:	0f 83       	std	Y+7, r16	; 0x07
    2d72:	18 87       	std	Y+8, r17	; 0x08
    2d74:	c8 01       	movw	r24, r16
    2d76:	b7 01       	movw	r22, r14
    2d78:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__clzsi2>
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	21 50       	subi	r18, 0x01	; 1
    2d80:	30 40       	sbci	r19, 0x00	; 0
    2d82:	12 16       	cp	r1, r18
    2d84:	13 06       	cpc	r1, r19
    2d86:	94 f4       	brge	.+36     	; 0x2dac <__floatsisf+0xa6>
    2d88:	02 2e       	mov	r0, r18
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <__floatsisf+0x8e>
    2d8c:	ee 0c       	add	r14, r14
    2d8e:	ff 1c       	adc	r15, r15
    2d90:	00 1f       	adc	r16, r16
    2d92:	11 1f       	adc	r17, r17
    2d94:	0a 94       	dec	r0
    2d96:	d2 f7       	brpl	.-12     	; 0x2d8c <__floatsisf+0x86>
    2d98:	ed 82       	std	Y+5, r14	; 0x05
    2d9a:	fe 82       	std	Y+6, r15	; 0x06
    2d9c:	0f 83       	std	Y+7, r16	; 0x07
    2d9e:	18 87       	std	Y+8, r17	; 0x08
    2da0:	8e e1       	ldi	r24, 0x1E	; 30
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	82 1b       	sub	r24, r18
    2da6:	93 0b       	sbc	r25, r19
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2db4:	04 c0       	rjmp	.+8      	; 0x2dbe <__floatsisf+0xb8>
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	9f ec       	ldi	r25, 0xCF	; 207
    2dbe:	28 96       	adiw	r28, 0x08	; 8
    2dc0:	e6 e0       	ldi	r30, 0x06	; 6
    2dc2:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00002dc6 <__fixsfsi>:
    2dc6:	ac e0       	ldi	r26, 0x0C	; 12
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x20>
    2dd2:	69 83       	std	Y+1, r22	; 0x01
    2dd4:	7a 83       	std	Y+2, r23	; 0x02
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	be 01       	movw	r22, r28
    2de0:	6b 5f       	subi	r22, 0xFB	; 251
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__unpack_f>
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	81 f1       	breq	.+96     	; 0x2e4e <__fixsfsi+0x88>
    2dee:	82 30       	cpi	r24, 0x02	; 2
    2df0:	70 f1       	brcs	.+92     	; 0x2e4e <__fixsfsi+0x88>
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	21 f4       	brne	.+8      	; 0x2dfe <__fixsfsi+0x38>
    2df6:	8e 81       	ldd	r24, Y+6	; 0x06
    2df8:	88 23       	and	r24, r24
    2dfa:	69 f1       	breq	.+90     	; 0x2e56 <__fixsfsi+0x90>
    2dfc:	0a c0       	rjmp	.+20     	; 0x2e12 <__fixsfsi+0x4c>
    2dfe:	2f 81       	ldd	r18, Y+7	; 0x07
    2e00:	38 85       	ldd	r19, Y+8	; 0x08
    2e02:	37 fd       	sbrc	r19, 7
    2e04:	24 c0       	rjmp	.+72     	; 0x2e4e <__fixsfsi+0x88>
    2e06:	6e 81       	ldd	r22, Y+6	; 0x06
    2e08:	2f 31       	cpi	r18, 0x1F	; 31
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	3c f0       	brlt	.+14     	; 0x2e1c <__fixsfsi+0x56>
    2e0e:	66 23       	and	r22, r22
    2e10:	11 f1       	breq	.+68     	; 0x2e56 <__fixsfsi+0x90>
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e8       	ldi	r21, 0x80	; 128
    2e1a:	21 c0       	rjmp	.+66     	; 0x2e5e <__fixsfsi+0x98>
    2e1c:	8e e1       	ldi	r24, 0x1E	; 30
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 1b       	sub	r24, r18
    2e22:	93 0b       	sbc	r25, r19
    2e24:	29 85       	ldd	r18, Y+9	; 0x09
    2e26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e28:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <__fixsfsi+0x70>
    2e2e:	56 95       	lsr	r21
    2e30:	47 95       	ror	r20
    2e32:	37 95       	ror	r19
    2e34:	27 95       	ror	r18
    2e36:	8a 95       	dec	r24
    2e38:	d2 f7       	brpl	.-12     	; 0x2e2e <__fixsfsi+0x68>
    2e3a:	66 23       	and	r22, r22
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <__fixsfsi+0x98>
    2e3e:	50 95       	com	r21
    2e40:	40 95       	com	r20
    2e42:	30 95       	com	r19
    2e44:	21 95       	neg	r18
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4c:	08 c0       	rjmp	.+16     	; 0x2e5e <__fixsfsi+0x98>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	a9 01       	movw	r20, r18
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <__fixsfsi+0x98>
    2e56:	2f ef       	ldi	r18, 0xFF	; 255
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f ef       	ldi	r20, 0xFF	; 255
    2e5c:	5f e7       	ldi	r21, 0x7F	; 127
    2e5e:	b9 01       	movw	r22, r18
    2e60:	ca 01       	movw	r24, r20
    2e62:	2c 96       	adiw	r28, 0x0c	; 12
    2e64:	e2 e0       	ldi	r30, 0x02	; 2
    2e66:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x20>

00002e6a <__floatunsisf>:
    2e6a:	a8 e0       	ldi	r26, 0x08	; 8
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	eb e3       	ldi	r30, 0x3B	; 59
    2e70:	f7 e1       	ldi	r31, 0x17	; 23
    2e72:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__prologue_saves__+0x14>
    2e76:	7b 01       	movw	r14, r22
    2e78:	8c 01       	movw	r16, r24
    2e7a:	1a 82       	std	Y+2, r1	; 0x02
    2e7c:	61 15       	cp	r22, r1
    2e7e:	71 05       	cpc	r23, r1
    2e80:	81 05       	cpc	r24, r1
    2e82:	91 05       	cpc	r25, r1
    2e84:	19 f4       	brne	.+6      	; 0x2e8c <__floatunsisf+0x22>
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	5f c0       	rjmp	.+190    	; 0x2f4a <__floatunsisf+0xe0>
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	8e e1       	ldi	r24, 0x1E	; 30
    2e92:	c8 2e       	mov	r12, r24
    2e94:	d1 2c       	mov	r13, r1
    2e96:	cb 82       	std	Y+3, r12	; 0x03
    2e98:	dc 82       	std	Y+4, r13	; 0x04
    2e9a:	ed 82       	std	Y+5, r14	; 0x05
    2e9c:	fe 82       	std	Y+6, r15	; 0x06
    2e9e:	0f 83       	std	Y+7, r16	; 0x07
    2ea0:	18 87       	std	Y+8, r17	; 0x08
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	b7 01       	movw	r22, r14
    2ea6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__clzsi2>
    2eaa:	fc 01       	movw	r30, r24
    2eac:	31 97       	sbiw	r30, 0x01	; 1
    2eae:	f7 ff       	sbrs	r31, 7
    2eb0:	3a c0       	rjmp	.+116    	; 0x2f26 <__floatunsisf+0xbc>
    2eb2:	aa 27       	eor	r26, r26
    2eb4:	bb 27       	eor	r27, r27
    2eb6:	ae 1b       	sub	r26, r30
    2eb8:	bf 0b       	sbc	r27, r31
    2eba:	21 e0       	ldi	r18, 0x01	; 1
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	0a 2e       	mov	r0, r26
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <__floatunsisf+0x64>
    2ec6:	22 0f       	add	r18, r18
    2ec8:	33 1f       	adc	r19, r19
    2eca:	44 1f       	adc	r20, r20
    2ecc:	55 1f       	adc	r21, r21
    2ece:	0a 94       	dec	r0
    2ed0:	d2 f7       	brpl	.-12     	; 0x2ec6 <__floatunsisf+0x5c>
    2ed2:	21 50       	subi	r18, 0x01	; 1
    2ed4:	30 40       	sbci	r19, 0x00	; 0
    2ed6:	40 40       	sbci	r20, 0x00	; 0
    2ed8:	50 40       	sbci	r21, 0x00	; 0
    2eda:	2e 21       	and	r18, r14
    2edc:	3f 21       	and	r19, r15
    2ede:	40 23       	and	r20, r16
    2ee0:	51 23       	and	r21, r17
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	21 15       	cp	r18, r1
    2eec:	31 05       	cpc	r19, r1
    2eee:	41 05       	cpc	r20, r1
    2ef0:	51 05       	cpc	r21, r1
    2ef2:	19 f4       	brne	.+6      	; 0x2efa <__floatunsisf+0x90>
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	cb 01       	movw	r24, r22
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <__floatunsisf+0x9a>
    2efc:	16 95       	lsr	r17
    2efe:	07 95       	ror	r16
    2f00:	f7 94       	ror	r15
    2f02:	e7 94       	ror	r14
    2f04:	aa 95       	dec	r26
    2f06:	d2 f7       	brpl	.-12     	; 0x2efc <__floatunsisf+0x92>
    2f08:	e6 2a       	or	r14, r22
    2f0a:	f7 2a       	or	r15, r23
    2f0c:	08 2b       	or	r16, r24
    2f0e:	19 2b       	or	r17, r25
    2f10:	ed 82       	std	Y+5, r14	; 0x05
    2f12:	fe 82       	std	Y+6, r15	; 0x06
    2f14:	0f 83       	std	Y+7, r16	; 0x07
    2f16:	18 87       	std	Y+8, r17	; 0x08
    2f18:	8e e1       	ldi	r24, 0x1E	; 30
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	8e 1b       	sub	r24, r30
    2f1e:	9f 0b       	sbc	r25, r31
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	12 c0       	rjmp	.+36     	; 0x2f4a <__floatunsisf+0xe0>
    2f26:	30 97       	sbiw	r30, 0x00	; 0
    2f28:	81 f0       	breq	.+32     	; 0x2f4a <__floatunsisf+0xe0>
    2f2a:	0e 2e       	mov	r0, r30
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <__floatunsisf+0xcc>
    2f2e:	ee 0c       	add	r14, r14
    2f30:	ff 1c       	adc	r15, r15
    2f32:	00 1f       	adc	r16, r16
    2f34:	11 1f       	adc	r17, r17
    2f36:	0a 94       	dec	r0
    2f38:	d2 f7       	brpl	.-12     	; 0x2f2e <__floatunsisf+0xc4>
    2f3a:	ed 82       	std	Y+5, r14	; 0x05
    2f3c:	fe 82       	std	Y+6, r15	; 0x06
    2f3e:	0f 83       	std	Y+7, r16	; 0x07
    2f40:	18 87       	std	Y+8, r17	; 0x08
    2f42:	ce 1a       	sub	r12, r30
    2f44:	df 0a       	sbc	r13, r31
    2f46:	cb 82       	std	Y+3, r12	; 0x03
    2f48:	dc 82       	std	Y+4, r13	; 0x04
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	0e 94 07 18 	call	0x300e	; 0x300e <__pack_f>
    2f52:	28 96       	adiw	r28, 0x08	; 8
    2f54:	e8 e0       	ldi	r30, 0x08	; 8
    2f56:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x14>

00002f5a <__clzsi2>:
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	7b 01       	movw	r14, r22
    2f6c:	8c 01       	movw	r16, r24
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	e8 16       	cp	r14, r24
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	f8 06       	cpc	r15, r24
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	08 07       	cpc	r16, r24
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	18 07       	cpc	r17, r24
    2f7e:	58 f4       	brcc	.+22     	; 0x2f96 <__clzsi2+0x3c>
    2f80:	ef ef       	ldi	r30, 0xFF	; 255
    2f82:	ee 16       	cp	r14, r30
    2f84:	f1 04       	cpc	r15, r1
    2f86:	01 05       	cpc	r16, r1
    2f88:	11 05       	cpc	r17, r1
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <__clzsi2+0x34>
    2f8c:	90 f4       	brcc	.+36     	; 0x2fb2 <__clzsi2+0x58>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	dc 01       	movw	r26, r24
    2f94:	17 c0       	rjmp	.+46     	; 0x2fc4 <__clzsi2+0x6a>
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	ef 16       	cp	r14, r31
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	ff 06       	cpc	r15, r31
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	0f 07       	cpc	r16, r31
    2fa2:	f1 e0       	ldi	r31, 0x01	; 1
    2fa4:	1f 07       	cpc	r17, r31
    2fa6:	50 f4       	brcc	.+20     	; 0x2fbc <__clzsi2+0x62>
    2fa8:	80 e1       	ldi	r24, 0x10	; 16
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 e0       	ldi	r26, 0x00	; 0
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <__clzsi2+0x6a>
    2fb2:	88 e0       	ldi	r24, 0x08	; 8
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e0       	ldi	r26, 0x00	; 0
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <__clzsi2+0x6a>
    2fbc:	88 e1       	ldi	r24, 0x18	; 24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e0       	ldi	r26, 0x00	; 0
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	20 e2       	ldi	r18, 0x20	; 32
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	28 1b       	sub	r18, r24
    2fce:	39 0b       	sbc	r19, r25
    2fd0:	4a 0b       	sbc	r20, r26
    2fd2:	5b 0b       	sbc	r21, r27
    2fd4:	57 01       	movw	r10, r14
    2fd6:	68 01       	movw	r12, r16
    2fd8:	04 c0       	rjmp	.+8      	; 0x2fe2 <__clzsi2+0x88>
    2fda:	d6 94       	lsr	r13
    2fdc:	c7 94       	ror	r12
    2fde:	b7 94       	ror	r11
    2fe0:	a7 94       	ror	r10
    2fe2:	8a 95       	dec	r24
    2fe4:	d2 f7       	brpl	.-12     	; 0x2fda <__clzsi2+0x80>
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	c5 01       	movw	r24, r10
    2fea:	89 5b       	subi	r24, 0xB9	; 185
    2fec:	9f 4d       	sbci	r25, 0xDF	; 223
    2fee:	fc 01       	movw	r30, r24
    2ff0:	80 81       	ld	r24, Z
    2ff2:	28 1b       	sub	r18, r24
    2ff4:	31 09       	sbc	r19, r1
    2ff6:	41 09       	sbc	r20, r1
    2ff8:	51 09       	sbc	r21, r1
    2ffa:	c9 01       	movw	r24, r18
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	af 90       	pop	r10
    300c:	08 95       	ret

0000300e <__pack_f>:
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	fc 01       	movw	r30, r24
    301c:	24 81       	ldd	r18, Z+4	; 0x04
    301e:	35 81       	ldd	r19, Z+5	; 0x05
    3020:	46 81       	ldd	r20, Z+6	; 0x06
    3022:	57 81       	ldd	r21, Z+7	; 0x07
    3024:	61 81       	ldd	r22, Z+1	; 0x01
    3026:	80 81       	ld	r24, Z
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	20 f4       	brcc	.+8      	; 0x3034 <__pack_f+0x26>
    302c:	40 61       	ori	r20, 0x10	; 16
    302e:	ef ef       	ldi	r30, 0xFF	; 255
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	a3 c0       	rjmp	.+326    	; 0x317a <__pack_f+0x16c>
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	09 f4       	brne	.+2      	; 0x303a <__pack_f+0x2c>
    3038:	9b c0       	rjmp	.+310    	; 0x3170 <__pack_f+0x162>
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	09 f4       	brne	.+2      	; 0x3040 <__pack_f+0x32>
    303e:	92 c0       	rjmp	.+292    	; 0x3164 <__pack_f+0x156>
    3040:	21 15       	cp	r18, r1
    3042:	31 05       	cpc	r19, r1
    3044:	41 05       	cpc	r20, r1
    3046:	51 05       	cpc	r21, r1
    3048:	09 f4       	brne	.+2      	; 0x304c <__pack_f+0x3e>
    304a:	8f c0       	rjmp	.+286    	; 0x316a <__pack_f+0x15c>
    304c:	02 80       	ldd	r0, Z+2	; 0x02
    304e:	f3 81       	ldd	r31, Z+3	; 0x03
    3050:	e0 2d       	mov	r30, r0
    3052:	8f ef       	ldi	r24, 0xFF	; 255
    3054:	e2 38       	cpi	r30, 0x82	; 130
    3056:	f8 07       	cpc	r31, r24
    3058:	0c f0       	brlt	.+2      	; 0x305c <__pack_f+0x4e>
    305a:	5a c0       	rjmp	.+180    	; 0x3110 <__pack_f+0x102>
    305c:	c2 e8       	ldi	r28, 0x82	; 130
    305e:	df ef       	ldi	r29, 0xFF	; 255
    3060:	ce 1b       	sub	r28, r30
    3062:	df 0b       	sbc	r29, r31
    3064:	ca 31       	cpi	r28, 0x1A	; 26
    3066:	d1 05       	cpc	r29, r1
    3068:	6c f5       	brge	.+90     	; 0x30c4 <__pack_f+0xb6>
    306a:	79 01       	movw	r14, r18
    306c:	8a 01       	movw	r16, r20
    306e:	0c 2e       	mov	r0, r28
    3070:	04 c0       	rjmp	.+8      	; 0x307a <__pack_f+0x6c>
    3072:	16 95       	lsr	r17
    3074:	07 95       	ror	r16
    3076:	f7 94       	ror	r15
    3078:	e7 94       	ror	r14
    307a:	0a 94       	dec	r0
    307c:	d2 f7       	brpl	.-12     	; 0x3072 <__pack_f+0x64>
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e0       	ldi	r26, 0x00	; 0
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	0c 2e       	mov	r0, r28
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <__pack_f+0x84>
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	aa 1f       	adc	r26, r26
    3090:	bb 1f       	adc	r27, r27
    3092:	0a 94       	dec	r0
    3094:	d2 f7       	brpl	.-12     	; 0x308a <__pack_f+0x7c>
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	a1 09       	sbc	r26, r1
    309a:	b1 09       	sbc	r27, r1
    309c:	82 23       	and	r24, r18
    309e:	93 23       	and	r25, r19
    30a0:	a4 23       	and	r26, r20
    30a2:	b5 23       	and	r27, r21
    30a4:	21 e0       	ldi	r18, 0x01	; 1
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	a1 05       	cpc	r26, r1
    30b0:	b1 05       	cpc	r27, r1
    30b2:	19 f4       	brne	.+6      	; 0x30ba <__pack_f+0xac>
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	a9 01       	movw	r20, r18
    30ba:	2e 29       	or	r18, r14
    30bc:	3f 29       	or	r19, r15
    30be:	40 2b       	or	r20, r16
    30c0:	51 2b       	or	r21, r17
    30c2:	03 c0       	rjmp	.+6      	; 0x30ca <__pack_f+0xbc>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	a9 01       	movw	r20, r18
    30ca:	da 01       	movw	r26, r20
    30cc:	c9 01       	movw	r24, r18
    30ce:	8f 77       	andi	r24, 0x7F	; 127
    30d0:	90 70       	andi	r25, 0x00	; 0
    30d2:	a0 70       	andi	r26, 0x00	; 0
    30d4:	b0 70       	andi	r27, 0x00	; 0
    30d6:	80 34       	cpi	r24, 0x40	; 64
    30d8:	91 05       	cpc	r25, r1
    30da:	a1 05       	cpc	r26, r1
    30dc:	b1 05       	cpc	r27, r1
    30de:	39 f4       	brne	.+14     	; 0x30ee <__pack_f+0xe0>
    30e0:	27 ff       	sbrs	r18, 7
    30e2:	09 c0       	rjmp	.+18     	; 0x30f6 <__pack_f+0xe8>
    30e4:	20 5c       	subi	r18, 0xC0	; 192
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <__pack_f+0xe8>
    30ee:	21 5c       	subi	r18, 0xC1	; 193
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	4f 4f       	sbci	r20, 0xFF	; 255
    30f4:	5f 4f       	sbci	r21, 0xFF	; 255
    30f6:	e1 e0       	ldi	r30, 0x01	; 1
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	20 30       	cpi	r18, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	38 07       	cpc	r19, r24
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	48 07       	cpc	r20, r24
    3104:	80 e4       	ldi	r24, 0x40	; 64
    3106:	58 07       	cpc	r21, r24
    3108:	28 f5       	brcc	.+74     	; 0x3154 <__pack_f+0x146>
    310a:	e0 e0       	ldi	r30, 0x00	; 0
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	22 c0       	rjmp	.+68     	; 0x3154 <__pack_f+0x146>
    3110:	e0 38       	cpi	r30, 0x80	; 128
    3112:	f1 05       	cpc	r31, r1
    3114:	6c f5       	brge	.+90     	; 0x3170 <__pack_f+0x162>
    3116:	e1 58       	subi	r30, 0x81	; 129
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	da 01       	movw	r26, r20
    311c:	c9 01       	movw	r24, r18
    311e:	8f 77       	andi	r24, 0x7F	; 127
    3120:	90 70       	andi	r25, 0x00	; 0
    3122:	a0 70       	andi	r26, 0x00	; 0
    3124:	b0 70       	andi	r27, 0x00	; 0
    3126:	80 34       	cpi	r24, 0x40	; 64
    3128:	91 05       	cpc	r25, r1
    312a:	a1 05       	cpc	r26, r1
    312c:	b1 05       	cpc	r27, r1
    312e:	39 f4       	brne	.+14     	; 0x313e <__pack_f+0x130>
    3130:	27 ff       	sbrs	r18, 7
    3132:	09 c0       	rjmp	.+18     	; 0x3146 <__pack_f+0x138>
    3134:	20 5c       	subi	r18, 0xC0	; 192
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	4f 4f       	sbci	r20, 0xFF	; 255
    313a:	5f 4f       	sbci	r21, 0xFF	; 255
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <__pack_f+0x138>
    313e:	21 5c       	subi	r18, 0xC1	; 193
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	4f 4f       	sbci	r20, 0xFF	; 255
    3144:	5f 4f       	sbci	r21, 0xFF	; 255
    3146:	57 ff       	sbrs	r21, 7
    3148:	05 c0       	rjmp	.+10     	; 0x3154 <__pack_f+0x146>
    314a:	56 95       	lsr	r21
    314c:	47 95       	ror	r20
    314e:	37 95       	ror	r19
    3150:	27 95       	ror	r18
    3152:	31 96       	adiw	r30, 0x01	; 1
    3154:	87 e0       	ldi	r24, 0x07	; 7
    3156:	56 95       	lsr	r21
    3158:	47 95       	ror	r20
    315a:	37 95       	ror	r19
    315c:	27 95       	ror	r18
    315e:	8a 95       	dec	r24
    3160:	d1 f7       	brne	.-12     	; 0x3156 <__pack_f+0x148>
    3162:	0b c0       	rjmp	.+22     	; 0x317a <__pack_f+0x16c>
    3164:	e0 e0       	ldi	r30, 0x00	; 0
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	05 c0       	rjmp	.+10     	; 0x3174 <__pack_f+0x166>
    316a:	e0 e0       	ldi	r30, 0x00	; 0
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	05 c0       	rjmp	.+10     	; 0x317a <__pack_f+0x16c>
    3170:	ef ef       	ldi	r30, 0xFF	; 255
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	a9 01       	movw	r20, r18
    317a:	8e 2f       	mov	r24, r30
    317c:	87 95       	ror	r24
    317e:	88 27       	eor	r24, r24
    3180:	87 95       	ror	r24
    3182:	94 2f       	mov	r25, r20
    3184:	9f 77       	andi	r25, 0x7F	; 127
    3186:	67 95       	ror	r22
    3188:	66 27       	eor	r22, r22
    318a:	67 95       	ror	r22
    318c:	e6 95       	lsr	r30
    318e:	e2 2e       	mov	r14, r18
    3190:	a9 2f       	mov	r26, r25
    3192:	a8 2b       	or	r26, r24
    3194:	fe 2f       	mov	r31, r30
    3196:	f6 2b       	or	r31, r22
    3198:	62 2f       	mov	r22, r18
    319a:	73 2f       	mov	r23, r19
    319c:	8a 2f       	mov	r24, r26
    319e:	9f 2f       	mov	r25, r31
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	e6 e0       	ldi	r30, 0x06	; 6
    31a6:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

000031aa <__unpack_f>:
    31aa:	dc 01       	movw	r26, r24
    31ac:	fb 01       	movw	r30, r22
    31ae:	2c 91       	ld	r18, X
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	3c 91       	ld	r19, X
    31b4:	11 97       	sbiw	r26, 0x01	; 1
    31b6:	12 96       	adiw	r26, 0x02	; 2
    31b8:	8c 91       	ld	r24, X
    31ba:	12 97       	sbiw	r26, 0x02	; 2
    31bc:	48 2f       	mov	r20, r24
    31be:	4f 77       	andi	r20, 0x7F	; 127
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	98 2f       	mov	r25, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	99 27       	eor	r25, r25
    31c8:	99 1f       	adc	r25, r25
    31ca:	13 96       	adiw	r26, 0x03	; 3
    31cc:	6c 91       	ld	r22, X
    31ce:	13 97       	sbiw	r26, 0x03	; 3
    31d0:	86 2f       	mov	r24, r22
    31d2:	88 0f       	add	r24, r24
    31d4:	89 2b       	or	r24, r25
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	66 1f       	adc	r22, r22
    31da:	66 27       	eor	r22, r22
    31dc:	66 1f       	adc	r22, r22
    31de:	61 83       	std	Z+1, r22	; 0x01
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	39 f5       	brne	.+78     	; 0x3232 <__unpack_f+0x88>
    31e4:	21 15       	cp	r18, r1
    31e6:	31 05       	cpc	r19, r1
    31e8:	41 05       	cpc	r20, r1
    31ea:	51 05       	cpc	r21, r1
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <__unpack_f+0x48>
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	29 c0       	rjmp	.+82     	; 0x3244 <__unpack_f+0x9a>
    31f2:	82 e8       	ldi	r24, 0x82	; 130
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	82 83       	std	Z+2, r24	; 0x02
    31f8:	93 83       	std	Z+3, r25	; 0x03
    31fa:	67 e0       	ldi	r22, 0x07	; 7
    31fc:	22 0f       	add	r18, r18
    31fe:	33 1f       	adc	r19, r19
    3200:	44 1f       	adc	r20, r20
    3202:	55 1f       	adc	r21, r21
    3204:	6a 95       	dec	r22
    3206:	d1 f7       	brne	.-12     	; 0x31fc <__unpack_f+0x52>
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	80 83       	st	Z, r24
    320c:	09 c0       	rjmp	.+18     	; 0x3220 <__unpack_f+0x76>
    320e:	22 0f       	add	r18, r18
    3210:	33 1f       	adc	r19, r19
    3212:	44 1f       	adc	r20, r20
    3214:	55 1f       	adc	r21, r21
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	82 83       	std	Z+2, r24	; 0x02
    321e:	93 83       	std	Z+3, r25	; 0x03
    3220:	20 30       	cpi	r18, 0x00	; 0
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	38 07       	cpc	r19, r24
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	48 07       	cpc	r20, r24
    322a:	80 e4       	ldi	r24, 0x40	; 64
    322c:	58 07       	cpc	r21, r24
    322e:	78 f3       	brcs	.-34     	; 0x320e <__unpack_f+0x64>
    3230:	20 c0       	rjmp	.+64     	; 0x3272 <__unpack_f+0xc8>
    3232:	8f 3f       	cpi	r24, 0xFF	; 255
    3234:	91 05       	cpc	r25, r1
    3236:	79 f4       	brne	.+30     	; 0x3256 <__unpack_f+0xac>
    3238:	21 15       	cp	r18, r1
    323a:	31 05       	cpc	r19, r1
    323c:	41 05       	cpc	r20, r1
    323e:	51 05       	cpc	r21, r1
    3240:	19 f4       	brne	.+6      	; 0x3248 <__unpack_f+0x9e>
    3242:	84 e0       	ldi	r24, 0x04	; 4
    3244:	80 83       	st	Z, r24
    3246:	08 95       	ret
    3248:	44 ff       	sbrs	r20, 4
    324a:	03 c0       	rjmp	.+6      	; 0x3252 <__unpack_f+0xa8>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	80 83       	st	Z, r24
    3250:	10 c0       	rjmp	.+32     	; 0x3272 <__unpack_f+0xc8>
    3252:	10 82       	st	Z, r1
    3254:	0e c0       	rjmp	.+28     	; 0x3272 <__unpack_f+0xc8>
    3256:	8f 57       	subi	r24, 0x7F	; 127
    3258:	90 40       	sbci	r25, 0x00	; 0
    325a:	82 83       	std	Z+2, r24	; 0x02
    325c:	93 83       	std	Z+3, r25	; 0x03
    325e:	83 e0       	ldi	r24, 0x03	; 3
    3260:	80 83       	st	Z, r24
    3262:	87 e0       	ldi	r24, 0x07	; 7
    3264:	22 0f       	add	r18, r18
    3266:	33 1f       	adc	r19, r19
    3268:	44 1f       	adc	r20, r20
    326a:	55 1f       	adc	r21, r21
    326c:	8a 95       	dec	r24
    326e:	d1 f7       	brne	.-12     	; 0x3264 <__unpack_f+0xba>
    3270:	50 64       	ori	r21, 0x40	; 64
    3272:	24 83       	std	Z+4, r18	; 0x04
    3274:	35 83       	std	Z+5, r19	; 0x05
    3276:	46 83       	std	Z+6, r20	; 0x06
    3278:	57 83       	std	Z+7, r21	; 0x07
    327a:	08 95       	ret

0000327c <__fpcmp_parts_f>:
    327c:	fc 01       	movw	r30, r24
    327e:	db 01       	movw	r26, r22
    3280:	90 81       	ld	r25, Z
    3282:	92 30       	cpi	r25, 0x02	; 2
    3284:	08 f4       	brcc	.+2      	; 0x3288 <__fpcmp_parts_f+0xc>
    3286:	49 c0       	rjmp	.+146    	; 0x331a <__fpcmp_parts_f+0x9e>
    3288:	8c 91       	ld	r24, X
    328a:	82 30       	cpi	r24, 0x02	; 2
    328c:	08 f4       	brcc	.+2      	; 0x3290 <__fpcmp_parts_f+0x14>
    328e:	45 c0       	rjmp	.+138    	; 0x331a <__fpcmp_parts_f+0x9e>
    3290:	94 30       	cpi	r25, 0x04	; 4
    3292:	51 f4       	brne	.+20     	; 0x32a8 <__fpcmp_parts_f+0x2c>
    3294:	61 81       	ldd	r22, Z+1	; 0x01
    3296:	84 30       	cpi	r24, 0x04	; 4
    3298:	b1 f5       	brne	.+108    	; 0x3306 <__fpcmp_parts_f+0x8a>
    329a:	11 96       	adiw	r26, 0x01	; 1
    329c:	2c 91       	ld	r18, X
    329e:	11 97       	sbiw	r26, 0x01	; 1
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	26 1b       	sub	r18, r22
    32a4:	31 09       	sbc	r19, r1
    32a6:	41 c0       	rjmp	.+130    	; 0x332a <__fpcmp_parts_f+0xae>
    32a8:	84 30       	cpi	r24, 0x04	; 4
    32aa:	21 f0       	breq	.+8      	; 0x32b4 <__fpcmp_parts_f+0x38>
    32ac:	92 30       	cpi	r25, 0x02	; 2
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <__fpcmp_parts_f+0x44>
    32b0:	82 30       	cpi	r24, 0x02	; 2
    32b2:	b1 f1       	breq	.+108    	; 0x3320 <__fpcmp_parts_f+0xa4>
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	8c 91       	ld	r24, X
    32b8:	11 97       	sbiw	r26, 0x01	; 1
    32ba:	88 23       	and	r24, r24
    32bc:	a1 f1       	breq	.+104    	; 0x3326 <__fpcmp_parts_f+0xaa>
    32be:	2d c0       	rjmp	.+90     	; 0x331a <__fpcmp_parts_f+0x9e>
    32c0:	61 81       	ldd	r22, Z+1	; 0x01
    32c2:	82 30       	cpi	r24, 0x02	; 2
    32c4:	01 f1       	breq	.+64     	; 0x3306 <__fpcmp_parts_f+0x8a>
    32c6:	11 96       	adiw	r26, 0x01	; 1
    32c8:	8c 91       	ld	r24, X
    32ca:	11 97       	sbiw	r26, 0x01	; 1
    32cc:	68 17       	cp	r22, r24
    32ce:	d9 f4       	brne	.+54     	; 0x3306 <__fpcmp_parts_f+0x8a>
    32d0:	22 81       	ldd	r18, Z+2	; 0x02
    32d2:	33 81       	ldd	r19, Z+3	; 0x03
    32d4:	12 96       	adiw	r26, 0x02	; 2
    32d6:	8d 91       	ld	r24, X+
    32d8:	9c 91       	ld	r25, X
    32da:	13 97       	sbiw	r26, 0x03	; 3
    32dc:	82 17       	cp	r24, r18
    32de:	93 07       	cpc	r25, r19
    32e0:	94 f0       	brlt	.+36     	; 0x3306 <__fpcmp_parts_f+0x8a>
    32e2:	28 17       	cp	r18, r24
    32e4:	39 07       	cpc	r19, r25
    32e6:	bc f0       	brlt	.+46     	; 0x3316 <__fpcmp_parts_f+0x9a>
    32e8:	24 81       	ldd	r18, Z+4	; 0x04
    32ea:	35 81       	ldd	r19, Z+5	; 0x05
    32ec:	46 81       	ldd	r20, Z+6	; 0x06
    32ee:	57 81       	ldd	r21, Z+7	; 0x07
    32f0:	14 96       	adiw	r26, 0x04	; 4
    32f2:	8d 91       	ld	r24, X+
    32f4:	9d 91       	ld	r25, X+
    32f6:	0d 90       	ld	r0, X+
    32f8:	bc 91       	ld	r27, X
    32fa:	a0 2d       	mov	r26, r0
    32fc:	82 17       	cp	r24, r18
    32fe:	93 07       	cpc	r25, r19
    3300:	a4 07       	cpc	r26, r20
    3302:	b5 07       	cpc	r27, r21
    3304:	18 f4       	brcc	.+6      	; 0x330c <__fpcmp_parts_f+0x90>
    3306:	66 23       	and	r22, r22
    3308:	41 f0       	breq	.+16     	; 0x331a <__fpcmp_parts_f+0x9e>
    330a:	0d c0       	rjmp	.+26     	; 0x3326 <__fpcmp_parts_f+0xaa>
    330c:	28 17       	cp	r18, r24
    330e:	39 07       	cpc	r19, r25
    3310:	4a 07       	cpc	r20, r26
    3312:	5b 07       	cpc	r21, r27
    3314:	28 f4       	brcc	.+10     	; 0x3320 <__fpcmp_parts_f+0xa4>
    3316:	66 23       	and	r22, r22
    3318:	31 f0       	breq	.+12     	; 0x3326 <__fpcmp_parts_f+0xaa>
    331a:	21 e0       	ldi	r18, 0x01	; 1
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	05 c0       	rjmp	.+10     	; 0x332a <__fpcmp_parts_f+0xae>
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	02 c0       	rjmp	.+4      	; 0x332a <__fpcmp_parts_f+0xae>
    3326:	2f ef       	ldi	r18, 0xFF	; 255
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	c9 01       	movw	r24, r18
    332c:	08 95       	ret

0000332e <__mulsi3>:
    332e:	62 9f       	mul	r22, r18
    3330:	d0 01       	movw	r26, r0
    3332:	73 9f       	mul	r23, r19
    3334:	f0 01       	movw	r30, r0
    3336:	82 9f       	mul	r24, r18
    3338:	e0 0d       	add	r30, r0
    333a:	f1 1d       	adc	r31, r1
    333c:	64 9f       	mul	r22, r20
    333e:	e0 0d       	add	r30, r0
    3340:	f1 1d       	adc	r31, r1
    3342:	92 9f       	mul	r25, r18
    3344:	f0 0d       	add	r31, r0
    3346:	83 9f       	mul	r24, r19
    3348:	f0 0d       	add	r31, r0
    334a:	74 9f       	mul	r23, r20
    334c:	f0 0d       	add	r31, r0
    334e:	65 9f       	mul	r22, r21
    3350:	f0 0d       	add	r31, r0
    3352:	99 27       	eor	r25, r25
    3354:	72 9f       	mul	r23, r18
    3356:	b0 0d       	add	r27, r0
    3358:	e1 1d       	adc	r30, r1
    335a:	f9 1f       	adc	r31, r25
    335c:	63 9f       	mul	r22, r19
    335e:	b0 0d       	add	r27, r0
    3360:	e1 1d       	adc	r30, r1
    3362:	f9 1f       	adc	r31, r25
    3364:	bd 01       	movw	r22, r26
    3366:	cf 01       	movw	r24, r30
    3368:	11 24       	eor	r1, r1
    336a:	08 95       	ret

0000336c <__udivmodhi4>:
    336c:	aa 1b       	sub	r26, r26
    336e:	bb 1b       	sub	r27, r27
    3370:	51 e1       	ldi	r21, 0x11	; 17
    3372:	07 c0       	rjmp	.+14     	; 0x3382 <__udivmodhi4_ep>

00003374 <__udivmodhi4_loop>:
    3374:	aa 1f       	adc	r26, r26
    3376:	bb 1f       	adc	r27, r27
    3378:	a6 17       	cp	r26, r22
    337a:	b7 07       	cpc	r27, r23
    337c:	10 f0       	brcs	.+4      	; 0x3382 <__udivmodhi4_ep>
    337e:	a6 1b       	sub	r26, r22
    3380:	b7 0b       	sbc	r27, r23

00003382 <__udivmodhi4_ep>:
    3382:	88 1f       	adc	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	5a 95       	dec	r21
    3388:	a9 f7       	brne	.-22     	; 0x3374 <__udivmodhi4_loop>
    338a:	80 95       	com	r24
    338c:	90 95       	com	r25
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	08 95       	ret

00003394 <__divmodhi4>:
    3394:	97 fb       	bst	r25, 7
    3396:	09 2e       	mov	r0, r25
    3398:	07 26       	eor	r0, r23
    339a:	0a d0       	rcall	.+20     	; 0x33b0 <__divmodhi4_neg1>
    339c:	77 fd       	sbrc	r23, 7
    339e:	04 d0       	rcall	.+8      	; 0x33a8 <__divmodhi4_neg2>
    33a0:	e5 df       	rcall	.-54     	; 0x336c <__udivmodhi4>
    33a2:	06 d0       	rcall	.+12     	; 0x33b0 <__divmodhi4_neg1>
    33a4:	00 20       	and	r0, r0
    33a6:	1a f4       	brpl	.+6      	; 0x33ae <__divmodhi4_exit>

000033a8 <__divmodhi4_neg2>:
    33a8:	70 95       	com	r23
    33aa:	61 95       	neg	r22
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255

000033ae <__divmodhi4_exit>:
    33ae:	08 95       	ret

000033b0 <__divmodhi4_neg1>:
    33b0:	f6 f7       	brtc	.-4      	; 0x33ae <__divmodhi4_exit>
    33b2:	90 95       	com	r25
    33b4:	81 95       	neg	r24
    33b6:	9f 4f       	sbci	r25, 0xFF	; 255
    33b8:	08 95       	ret

000033ba <__udivmodsi4>:
    33ba:	a1 e2       	ldi	r26, 0x21	; 33
    33bc:	1a 2e       	mov	r1, r26
    33be:	aa 1b       	sub	r26, r26
    33c0:	bb 1b       	sub	r27, r27
    33c2:	fd 01       	movw	r30, r26
    33c4:	0d c0       	rjmp	.+26     	; 0x33e0 <__udivmodsi4_ep>

000033c6 <__udivmodsi4_loop>:
    33c6:	aa 1f       	adc	r26, r26
    33c8:	bb 1f       	adc	r27, r27
    33ca:	ee 1f       	adc	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	a2 17       	cp	r26, r18
    33d0:	b3 07       	cpc	r27, r19
    33d2:	e4 07       	cpc	r30, r20
    33d4:	f5 07       	cpc	r31, r21
    33d6:	20 f0       	brcs	.+8      	; 0x33e0 <__udivmodsi4_ep>
    33d8:	a2 1b       	sub	r26, r18
    33da:	b3 0b       	sbc	r27, r19
    33dc:	e4 0b       	sbc	r30, r20
    33de:	f5 0b       	sbc	r31, r21

000033e0 <__udivmodsi4_ep>:
    33e0:	66 1f       	adc	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	88 1f       	adc	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	1a 94       	dec	r1
    33ea:	69 f7       	brne	.-38     	; 0x33c6 <__udivmodsi4_loop>
    33ec:	60 95       	com	r22
    33ee:	70 95       	com	r23
    33f0:	80 95       	com	r24
    33f2:	90 95       	com	r25
    33f4:	9b 01       	movw	r18, r22
    33f6:	ac 01       	movw	r20, r24
    33f8:	bd 01       	movw	r22, r26
    33fa:	cf 01       	movw	r24, r30
    33fc:	08 95       	ret

000033fe <__prologue_saves__>:
    33fe:	2f 92       	push	r2
    3400:	3f 92       	push	r3
    3402:	4f 92       	push	r4
    3404:	5f 92       	push	r5
    3406:	6f 92       	push	r6
    3408:	7f 92       	push	r7
    340a:	8f 92       	push	r8
    340c:	9f 92       	push	r9
    340e:	af 92       	push	r10
    3410:	bf 92       	push	r11
    3412:	cf 92       	push	r12
    3414:	df 92       	push	r13
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	ca 1b       	sub	r28, r26
    3428:	db 0b       	sbc	r29, r27
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	09 94       	ijmp

00003430 <__epilogue_restores__>:
    3430:	2a 88       	ldd	r2, Y+18	; 0x12
    3432:	39 88       	ldd	r3, Y+17	; 0x11
    3434:	48 88       	ldd	r4, Y+16	; 0x10
    3436:	5f 84       	ldd	r5, Y+15	; 0x0f
    3438:	6e 84       	ldd	r6, Y+14	; 0x0e
    343a:	7d 84       	ldd	r7, Y+13	; 0x0d
    343c:	8c 84       	ldd	r8, Y+12	; 0x0c
    343e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3440:	aa 84       	ldd	r10, Y+10	; 0x0a
    3442:	b9 84       	ldd	r11, Y+9	; 0x09
    3444:	c8 84       	ldd	r12, Y+8	; 0x08
    3446:	df 80       	ldd	r13, Y+7	; 0x07
    3448:	ee 80       	ldd	r14, Y+6	; 0x06
    344a:	fd 80       	ldd	r15, Y+5	; 0x05
    344c:	0c 81       	ldd	r16, Y+4	; 0x04
    344e:	1b 81       	ldd	r17, Y+3	; 0x03
    3450:	aa 81       	ldd	r26, Y+2	; 0x02
    3452:	b9 81       	ldd	r27, Y+1	; 0x01
    3454:	ce 0f       	add	r28, r30
    3456:	d1 1d       	adc	r29, r1
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	ed 01       	movw	r28, r26
    345e:	08 95       	ret

00003460 <do_rand>:
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	e6 e3       	ldi	r30, 0x36	; 54
    3466:	fa e1       	ldi	r31, 0x1A	; 26
    3468:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x10>
    346c:	ec 01       	movw	r28, r24
    346e:	68 81       	ld	r22, Y
    3470:	79 81       	ldd	r23, Y+1	; 0x01
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	61 15       	cp	r22, r1
    3478:	71 05       	cpc	r23, r1
    347a:	81 05       	cpc	r24, r1
    347c:	91 05       	cpc	r25, r1
    347e:	21 f4       	brne	.+8      	; 0x3488 <do_rand+0x28>
    3480:	64 e2       	ldi	r22, 0x24	; 36
    3482:	79 ed       	ldi	r23, 0xD9	; 217
    3484:	8b e5       	ldi	r24, 0x5B	; 91
    3486:	97 e0       	ldi	r25, 0x07	; 7
    3488:	2d e1       	ldi	r18, 0x1D	; 29
    348a:	33 ef       	ldi	r19, 0xF3	; 243
    348c:	41 e0       	ldi	r20, 0x01	; 1
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodsi4>
    3494:	79 01       	movw	r14, r18
    3496:	8a 01       	movw	r16, r20
    3498:	27 ea       	ldi	r18, 0xA7	; 167
    349a:	31 e4       	ldi	r19, 0x41	; 65
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsi3>
    34a4:	5b 01       	movw	r10, r22
    34a6:	6c 01       	movw	r12, r24
    34a8:	c8 01       	movw	r24, r16
    34aa:	b7 01       	movw	r22, r14
    34ac:	2c ee       	ldi	r18, 0xEC	; 236
    34ae:	34 ef       	ldi	r19, 0xF4	; 244
    34b0:	4f ef       	ldi	r20, 0xFF	; 255
    34b2:	5f ef       	ldi	r21, 0xFF	; 255
    34b4:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsi3>
    34b8:	6a 0d       	add	r22, r10
    34ba:	7b 1d       	adc	r23, r11
    34bc:	8c 1d       	adc	r24, r12
    34be:	9d 1d       	adc	r25, r13
    34c0:	97 ff       	sbrs	r25, 7
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <do_rand+0x6c>
    34c4:	61 50       	subi	r22, 0x01	; 1
    34c6:	70 40       	sbci	r23, 0x00	; 0
    34c8:	80 40       	sbci	r24, 0x00	; 0
    34ca:	90 48       	sbci	r25, 0x80	; 128
    34cc:	68 83       	st	Y, r22
    34ce:	79 83       	std	Y+1, r23	; 0x01
    34d0:	8a 83       	std	Y+2, r24	; 0x02
    34d2:	9b 83       	std	Y+3, r25	; 0x03
    34d4:	7f 77       	andi	r23, 0x7F	; 127
    34d6:	cb 01       	movw	r24, r22
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	ea e0       	ldi	r30, 0x0A	; 10
    34de:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x10>

000034e2 <rand_r>:
    34e2:	0e 94 30 1a 	call	0x3460	; 0x3460 <do_rand>
    34e6:	08 95       	ret

000034e8 <rand>:
    34e8:	87 e4       	ldi	r24, 0x47	; 71
    34ea:	91 e2       	ldi	r25, 0x21	; 33
    34ec:	0e 94 30 1a 	call	0x3460	; 0x3460 <do_rand>
    34f0:	08 95       	ret

000034f2 <srand>:
    34f2:	a0 e0       	ldi	r26, 0x00	; 0
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	80 93 47 21 	sts	0x2147, r24
    34fa:	90 93 48 21 	sts	0x2148, r25
    34fe:	a0 93 49 21 	sts	0x2149, r26
    3502:	b0 93 4a 21 	sts	0x214A, r27
    3506:	08 95       	ret

00003508 <__divmodsi4>:
    3508:	97 fb       	bst	r25, 7
    350a:	09 2e       	mov	r0, r25
    350c:	05 26       	eor	r0, r21
    350e:	0e d0       	rcall	.+28     	; 0x352c <__divmodsi4_neg1>
    3510:	57 fd       	sbrc	r21, 7
    3512:	04 d0       	rcall	.+8      	; 0x351c <__divmodsi4_neg2>
    3514:	52 df       	rcall	.-348    	; 0x33ba <__udivmodsi4>
    3516:	0a d0       	rcall	.+20     	; 0x352c <__divmodsi4_neg1>
    3518:	00 1c       	adc	r0, r0
    351a:	38 f4       	brcc	.+14     	; 0x352a <__divmodsi4_exit>

0000351c <__divmodsi4_neg2>:
    351c:	50 95       	com	r21
    351e:	40 95       	com	r20
    3520:	30 95       	com	r19
    3522:	21 95       	neg	r18
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	4f 4f       	sbci	r20, 0xFF	; 255
    3528:	5f 4f       	sbci	r21, 0xFF	; 255

0000352a <__divmodsi4_exit>:
    352a:	08 95       	ret

0000352c <__divmodsi4_neg1>:
    352c:	f6 f7       	brtc	.-4      	; 0x352a <__divmodsi4_exit>
    352e:	90 95       	com	r25
    3530:	80 95       	com	r24
    3532:	70 95       	com	r23
    3534:	61 95       	neg	r22
    3536:	7f 4f       	sbci	r23, 0xFF	; 255
    3538:	8f 4f       	sbci	r24, 0xFF	; 255
    353a:	9f 4f       	sbci	r25, 0xFF	; 255
    353c:	08 95       	ret

0000353e <_exit>:
    353e:	f8 94       	cli

00003540 <__stop_program>:
    3540:	ff cf       	rjmp	.-2      	; 0x3540 <__stop_program>
