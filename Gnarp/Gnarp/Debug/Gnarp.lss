
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  000030b6  0000314a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  0080213c  0080213c  00003286  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000318  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c23  00000000  00000000  00003cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007229  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022c1  00000000  00000000  0000bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f70  00000000  00000000  0000ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008b0  00000000  00000000  00011d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d19  00000000  00000000  00012620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a07  00000000  00000000  00014339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e76  00000000  00000000  00016d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  00017bb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_17>
      48:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e6 eb       	ldi	r30, 0xB6	; 182
     18c:	f0 e3       	ldi	r31, 0x30	; 48
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 33       	cpi	r26, 0x3C	; 60
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e3       	ldi	r26, 0x3C	; 60
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 37       	cpi	r26, 0x70	; 112
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
     1ae:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
     226:	20 91 3c 21 	lds	r18, 0x213C
     22a:	30 91 3d 21 	lds	r19, 0x213D
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:
     306:	80 93 3c 21 	sts	0x213C, r24
     30a:	90 93 3d 21 	sts	0x213D, r25
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
     33a:	08 95       	ret

0000033c <get_BPM>:
     33c:	80 91 3c 21 	lds	r24, 0x213C
     340:	90 91 3d 21 	lds	r25, 0x213D
     344:	08 95       	ret

00000346 <increment_BPM>:
     346:	80 91 3c 21 	lds	r24, 0x213C
     34a:	90 91 3d 21 	lds	r25, 0x213D
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 3c 21 	sts	0x213C, r24
     354:	90 93 3d 21 	sts	0x213D, r25
     358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
     35c:	08 95       	ret

0000035e <decrement_BPM>:
     35e:	80 91 3c 21 	lds	r24, 0x213C
     362:	90 91 3d 21 	lds	r25, 0x213D
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	80 93 3c 21 	sts	0x213C, r24
     36c:	90 93 3d 21 	sts	0x213D, r25
     370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
     374:	08 95       	ret

00000376 <get_encoder>:
     376:	80 91 54 21 	lds	r24, 0x2154
     37a:	08 95       	ret

0000037c <get_pot_value>:
     37c:	2f 92       	push	r2
     37e:	3f 92       	push	r3
     380:	4f 92       	push	r4
     382:	5f 92       	push	r5
     384:	6f 92       	push	r6
     386:	7f 92       	push	r7
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <get_pot_value+0x26>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6b 01       	movw	r12, r22
     3a8:	2a 01       	movw	r4, r20
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	e6 5b       	subi	r30, 0xB6	; 182
     3b4:	fe 4d       	sbci	r31, 0xDE	; 222
     3b6:	60 81       	ld	r22, Z
     3b8:	71 81       	ldd	r23, Z+1	; 0x01
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 ef 14 	call	0x29de	; 0x29de <__floatunsisf>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	42 e7       	ldi	r20, 0x72	; 114
     3c8:	55 e4       	ldi	r21, 0x45	; 69
     3ca:	0e 94 5f 13 	call	0x26be	; 0x26be <__divsf3>
     3ce:	7b 01       	movw	r14, r22
     3d0:	8c 01       	movw	r16, r24
     3d2:	b2 01       	movw	r22, r4
     3d4:	6c 19       	sub	r22, r12
     3d6:	7d 09       	sbc	r23, r13
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 ef 14 	call	0x29de	; 0x29de <__floatunsisf>
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
     3f0:	7b 01       	movw	r14, r22
     3f2:	8c 01       	movw	r16, r24
     3f4:	b6 01       	movw	r22, r12
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 ef 14 	call	0x29de	; 0x29de <__floatunsisf>
     3fe:	d6 2e       	mov	r13, r22
     400:	c7 2e       	mov	r12, r23
     402:	b8 2e       	mov	r11, r24
     404:	a9 2e       	mov	r10, r25
     406:	16 01       	movw	r2, r12
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	6e 2d       	mov	r22, r14
     40e:	7f 2d       	mov	r23, r15
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	d6 01       	movw	r26, r12
     416:	f5 01       	movw	r30, r10
     418:	2b 2f       	mov	r18, r27
     41a:	3a 2f       	mov	r19, r26
     41c:	4f 2f       	mov	r20, r31
     41e:	5e 2f       	mov	r21, r30
     420:	0e 94 07 12 	call	0x240e	; 0x240e <__addsf3>
     424:	96 2e       	mov	r9, r22
     426:	87 2e       	mov	r8, r23
     428:	78 2e       	mov	r7, r24
     42a:	69 2e       	mov	r6, r25
     42c:	b2 01       	movw	r22, r4
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 ef 14 	call	0x29de	; 0x29de <__floatunsisf>
     436:	f6 2e       	mov	r15, r22
     438:	07 2f       	mov	r16, r23
     43a:	18 2f       	mov	r17, r24
     43c:	e9 2e       	mov	r14, r25
     43e:	a4 01       	movw	r20, r8
     440:	93 01       	movw	r18, r6
     442:	65 2f       	mov	r22, r21
     444:	74 2f       	mov	r23, r20
     446:	83 2f       	mov	r24, r19
     448:	92 2f       	mov	r25, r18
     44a:	2f 2d       	mov	r18, r15
     44c:	30 2f       	mov	r19, r16
     44e:	41 2f       	mov	r20, r17
     450:	5e 2d       	mov	r21, r14
     452:	0e 94 0d 14 	call	0x281a	; 0x281a <__gtsf2>
     456:	18 16       	cp	r1, r24
     458:	24 f0       	brlt	.+8      	; 0x462 <get_pot_value+0xe6>
     45a:	f9 2c       	mov	r15, r9
     45c:	08 2d       	mov	r16, r8
     45e:	17 2d       	mov	r17, r7
     460:	e6 2c       	mov	r14, r6
     462:	6f 2d       	mov	r22, r15
     464:	70 2f       	mov	r23, r16
     466:	81 2f       	mov	r24, r17
     468:	9e 2d       	mov	r25, r14
     46a:	d6 01       	movw	r26, r12
     46c:	f5 01       	movw	r30, r10
     46e:	2b 2f       	mov	r18, r27
     470:	3c 2d       	mov	r19, r12
     472:	4f 2f       	mov	r20, r31
     474:	5a 2d       	mov	r21, r10
     476:	0e 94 6d 14 	call	0x28da	; 0x28da <__ltsf2>
     47a:	87 fd       	sbrc	r24, 7
     47c:	04 c0       	rjmp	.+8      	; 0x486 <get_pot_value+0x10a>
     47e:	3f 2c       	mov	r3, r15
     480:	20 2e       	mov	r2, r16
     482:	19 83       	std	Y+1, r17	; 0x01
     484:	ea 82       	std	Y+2, r14	; 0x02
     486:	a1 01       	movw	r20, r2
     488:	39 81       	ldd	r19, Y+1	; 0x01
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	65 2f       	mov	r22, r21
     48e:	72 2d       	mov	r23, r2
     490:	83 2f       	mov	r24, r19
     492:	92 2f       	mov	r25, r18
     494:	0e 94 91 10 	call	0x2122	; 0x2122 <__fixunssfsi>
     498:	cb 01       	movw	r24, r22
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	3f 90       	pop	r3
     4c0:	2f 90       	pop	r2
     4c2:	08 95       	ret

000004c4 <set_seven_segment_LEDs>:
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	ca e0       	ldi	r28, 0x0A	; 10
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	73 e0       	ldi	r23, 0x03	; 3
     4e8:	c7 2e       	mov	r12, r23
     4ea:	d1 2c       	mov	r13, r1
     4ec:	68 e0       	ldi	r22, 0x08	; 8
     4ee:	a6 2e       	mov	r10, r22
     4f0:	b1 2c       	mov	r11, r1
     4f2:	00 e6       	ldi	r16, 0x60	; 96
     4f4:	16 e0       	ldi	r17, 0x06	; 6
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	e5 2e       	mov	r14, r21
     4fa:	56 e0       	ldi	r21, 0x06	; 6
     4fc:	f5 2e       	mov	r15, r21
     4fe:	40 ef       	ldi	r20, 0xF0	; 240
     500:	94 2e       	mov	r9, r20
     502:	98 e3       	ldi	r25, 0x38	; 56
     504:	89 2e       	mov	r8, r25
     506:	cf 01       	movw	r24, r30
     508:	be 01       	movw	r22, r28
     50a:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodhi4>
     50e:	48 2f       	mov	r20, r24
     510:	30 97       	sbiw	r30, 0x00	; 0
     512:	19 f4       	brne	.+6      	; 0x51a <set_seven_segment_LEDs+0x56>
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <set_seven_segment_LEDs+0x56>
     518:	4a e0       	ldi	r20, 0x0A	; 10
     51a:	c9 01       	movw	r24, r18
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
     522:	b5 01       	movw	r22, r10
     524:	02 c0       	rjmp	.+4      	; 0x52a <set_seven_segment_LEDs+0x66>
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	8a 95       	dec	r24
     52c:	e2 f7       	brpl	.-8      	; 0x526 <set_seven_segment_LEDs+0x62>
     52e:	d8 01       	movw	r26, r16
     530:	16 96       	adiw	r26, 0x06	; 6
     532:	6c 93       	st	X, r22
     534:	d7 01       	movw	r26, r14
     536:	16 96       	adiw	r26, 0x06	; 6
     538:	9c 92       	st	X, r9
     53a:	16 97       	sbiw	r26, 0x06	; 6
     53c:	42 95       	swap	r20
     53e:	40 7f       	andi	r20, 0xF0	; 240
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	4c 93       	st	X, r20
     544:	d8 01       	movw	r26, r16
     546:	15 96       	adiw	r26, 0x05	; 5
     548:	8c 92       	st	X, r8
     54a:	15 97       	sbiw	r26, 0x05	; 5
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	25 30       	cpi	r18, 0x05	; 5
     552:	31 05       	cpc	r19, r1
     554:	31 f0       	breq	.+12     	; 0x562 <set_seven_segment_LEDs+0x9e>
     556:	cf 01       	movw	r24, r30
     558:	be 01       	movw	r22, r28
     55a:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodhi4>
     55e:	fb 01       	movw	r30, r22
     560:	d2 cf       	rjmp	.-92     	; 0x506 <set_seven_segment_LEDs+0x42>
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <set_LEDs_on>:
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <set_LEDs_on+0xc>
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	86 83       	std	Z+6, r24	; 0x06
     588:	66 23       	and	r22, r22
     58a:	21 f0       	breq	.+8      	; 0x594 <set_LEDs_on+0x18>
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	e0 e6       	ldi	r30, 0x60	; 96
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	85 83       	std	Z+5, r24	; 0x05
     594:	44 23       	and	r20, r20
     596:	21 f0       	breq	.+8      	; 0x5a0 <set_LEDs_on+0x24>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e0 e6       	ldi	r30, 0x60	; 96
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	85 83       	std	Z+5, r24	; 0x05
     5a0:	22 23       	and	r18, r18
     5a2:	21 f0       	breq	.+8      	; 0x5ac <set_LEDs_on+0x30>
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
     5ac:	08 95       	ret

000005ae <set_LEDs_off>:
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <set_LEDs_off+0xc>
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	85 83       	std	Z+5, r24	; 0x05
     5ba:	66 23       	and	r22, r22
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <set_LEDs_off+0x18>
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	e0 e6       	ldi	r30, 0x60	; 96
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	86 83       	std	Z+6, r24	; 0x06
     5c6:	44 23       	and	r20, r20
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <set_LEDs_off+0x24>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	86 83       	std	Z+6, r24	; 0x06
     5d2:	22 23       	and	r18, r18
     5d4:	21 f0       	breq	.+8      	; 0x5de <set_LEDs_off+0x30>
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	86 83       	std	Z+6, r24	; 0x06
     5de:	08 95       	ret

000005e0 <get_encoder_switch_state>:
     5e0:	80 91 42 21 	lds	r24, 0x2142
     5e4:	08 95       	ret

000005e6 <get_encoder_switch_edge>:
     5e6:	80 91 43 21 	lds	r24, 0x2143
     5ea:	08 95       	ret

000005ec <get_pushbutton_switch_state>:
     5ec:	80 91 40 21 	lds	r24, 0x2140
     5f0:	08 95       	ret

000005f2 <get_pushbutton_switch_edge>:
     5f2:	80 91 41 21 	lds	r24, 0x2141
     5f6:	08 95       	ret

000005f8 <get_toggle_switch_state>:
     5f8:	80 91 3e 21 	lds	r24, 0x213E
     5fc:	08 95       	ret

000005fe <get_toggle_switch_edge>:
     5fe:	80 91 3f 21 	lds	r24, 0x213F
     602:	08 95       	ret

00000604 <initialize_hardware>:
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	e0 e4       	ldi	r30, 0x40	; 64
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	c0 e5       	ldi	r28, 0x50	; 80
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	5b e8       	ldi	r21, 0x8B	; 139
     616:	48 e0       	ldi	r20, 0x08	; 8
     618:	a0 e5       	ldi	r26, 0x50	; 80
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	32 ec       	ldi	r19, 0xC2	; 194
     61e:	28 e1       	ldi	r18, 0x18	; 24
     620:	98 ed       	ldi	r25, 0xD8	; 216
     622:	15 c0       	rjmp	.+42     	; 0x64e <initialize_hardware+0x4a>
     624:	61 83       	std	Z+1, r22	; 0x01
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	5a 83       	std	Y+2, r21	; 0x02
     62a:	40 93 50 00 	sts	0x0050, r20
     62e:	70 91 51 00 	lds	r23, 0x0051
     632:	73 ff       	sbrs	r23, 3
     634:	fc cf       	rjmp	.-8      	; 0x62e <initialize_hardware+0x2a>
     636:	15 96       	adiw	r26, 0x05	; 5
     638:	3c 93       	st	X, r19
     63a:	15 97       	sbiw	r26, 0x05	; 5
     63c:	20 93 50 00 	sts	0x0050, r18
     640:	70 91 51 00 	lds	r23, 0x0051
     644:	74 ff       	sbrs	r23, 4
     646:	fc cf       	rjmp	.-8      	; 0x640 <initialize_hardware+0x3c>
     648:	94 bf       	out	0x34, r25	; 52
     64a:	80 93 40 00 	sts	0x0040, r24
     64e:	70 91 40 00 	lds	r23, 0x0040
     652:	74 30       	cpi	r23, 0x04	; 4
     654:	39 f7       	brne	.-50     	; 0x624 <initialize_hardware+0x20>
     656:	f8 94       	cli
     658:	a0 e6       	ldi	r26, 0x60	; 96
     65a:	b6 e0       	ldi	r27, 0x06	; 6
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	8c 93       	st	X, r24
     662:	15 97       	sbiw	r26, 0x05	; 5
     664:	90 e4       	ldi	r25, 0x40	; 64
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	9c 93       	st	X, r25
     66a:	12 97       	sbiw	r26, 0x02	; 2
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8c 93       	st	X, r24
     670:	11 97       	sbiw	r26, 0x01	; 1
     672:	e0 eb       	ldi	r30, 0xB0	; 176
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	84 83       	std	Z+4, r24	; 0x04
     67a:	90 e2       	ldi	r25, 0x20	; 32
     67c:	93 83       	std	Z+3, r25	; 0x03
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	35 83       	std	Z+5, r19	; 0x05
     682:	8f e2       	ldi	r24, 0x2F	; 47
     684:	86 83       	std	Z+6, r24	; 0x06
     686:	17 82       	std	Z+7, r1	; 0x07
     688:	80 91 a2 00 	lds	r24, 0x00A2
     68c:	87 68       	ori	r24, 0x87	; 135
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	78 94       	sei
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	d6 e0       	ldi	r29, 0x06	; 6
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 92 00 02 	sts	0x0200, r1
     6a6:	11 82       	std	Z+1, r1	; 0x01
     6a8:	92 83       	std	Z+2, r25	; 0x02
     6aa:	13 82       	std	Z+3, r1	; 0x03
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	94 83       	std	Z+4, r25	; 0x04
     6b0:	16 82       	std	Z+6, r1	; 0x06
     6b2:	80 91 00 02 	lds	r24, 0x0200
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 93 00 02 	sts	0x0200, r24
     6bc:	90 a3       	std	Z+32, r25	; 0x20
     6be:	11 a2       	std	Z+33, r1	; 0x21
     6c0:	12 a2       	std	Z+34, r1	; 0x22
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	56 e0       	ldi	r21, 0x06	; 6
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	fa 01       	movw	r30, r20
     6ca:	82 83       	std	Z+2, r24	; 0x02
     6cc:	28 e0       	ldi	r18, 0x08	; 8
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	fc 01       	movw	r30, r24
     6d4:	22 83       	std	Z+2, r18	; 0x02
     6d6:	fa 01       	movw	r30, r20
     6d8:	32 83       	std	Z+2, r19	; 0x02
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	8d 83       	std	Y+5, r24	; 0x05
     6e0:	e0 e4       	ldi	r30, 0x40	; 64
     6e2:	f6 e0       	ldi	r31, 0x06	; 6
     6e4:	88 ef       	ldi	r24, 0xF8	; 248
     6e6:	81 83       	std	Z+1, r24	; 0x01
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8c 93       	st	X, r24
     6ee:	11 97       	sbiw	r26, 0x01	; 1
     6f0:	88 e3       	ldi	r24, 0x38	; 56
     6f2:	15 96       	adiw	r26, 0x05	; 5
     6f4:	8c 93       	st	X, r24
     6f6:	15 97       	sbiw	r26, 0x05	; 5
     6f8:	90 ef       	ldi	r25, 0xF0	; 240
     6fa:	95 83       	std	Z+5, r25	; 0x05
     6fc:	16 96       	adiw	r26, 0x06	; 6
     6fe:	8c 93       	st	X, r24
     700:	16 97       	sbiw	r26, 0x06	; 6
     702:	87 e0       	ldi	r24, 0x07	; 7
     704:	16 96       	adiw	r26, 0x06	; 6
     706:	8c 93       	st	X, r24
     708:	16 97       	sbiw	r26, 0x06	; 6
     70a:	25 83       	std	Z+5, r18	; 0x05
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <read_hardware>:
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	0f 92       	push	r0
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	80 91 88 06 	lds	r24, 0x0688
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <read_hardware+0x28>
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	80 91 28 06 	lds	r24, 0x0628
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	80 fd       	sbrc	r24, 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <read_hardware+0x38>
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	01 c0       	rjmp	.+2      	; 0x74c <read_hardware+0x3a>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	c8 2e       	mov	r12, r24
     74e:	c9 2a       	or	r12, r25
     750:	80 91 28 06 	lds	r24, 0x0628
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	86 95       	lsr	r24
     75a:	80 fd       	sbrc	r24, 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <read_hardware+0x50>
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	01 c0       	rjmp	.+2      	; 0x764 <read_hardware+0x52>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c8 2a       	or	r12, r24
     766:	c0 92 49 21 	sts	0x2149, r12
     76a:	60 91 48 21 	lds	r22, 0x2148
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	d0 90 47 21 	lds	r13, 0x2147
     774:	e4 e4       	ldi	r30, 0x44	; 68
     776:	f1 e2       	ldi	r31, 0x21	; 33
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	4c 2d       	mov	r20, r12
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	b8 2e       	mov	r11, r24
     786:	8a 01       	movw	r16, r20
     788:	08 2e       	mov	r0, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <read_hardware+0x7e>
     78c:	15 95       	asr	r17
     78e:	07 95       	ror	r16
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <read_hardware+0x7a>
     794:	db 01       	movw	r26, r22
     796:	08 2e       	mov	r0, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <read_hardware+0x8c>
     79a:	b5 95       	asr	r27
     79c:	a7 95       	ror	r26
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <read_hardware+0x88>
     7a2:	0a 17       	cp	r16, r26
     7a4:	1b 07       	cpc	r17, r27
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <read_hardware+0x9e>
     7a8:	a0 81       	ld	r26, Z
     7aa:	af 5f       	subi	r26, 0xFF	; 255
     7ac:	a0 83       	st	Z, r26
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <read_hardware+0xa0>
     7b0:	10 82       	st	Z, r1
     7b2:	a0 81       	ld	r26, Z
     7b4:	a9 30       	cpi	r26, 0x09	; 9
     7b6:	60 f0       	brcs	.+24     	; 0x7d0 <read_hardware+0xbe>
     7b8:	d9 01       	movw	r26, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <read_hardware+0xae>
     7bc:	aa 0f       	add	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	ba 94       	dec	r11
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <read_hardware+0xaa>
     7c4:	ba 2f       	mov	r27, r26
     7c6:	b0 95       	com	r27
     7c8:	db 22       	and	r13, r27
     7ca:	ac 21       	and	r26, r12
     7cc:	da 2a       	or	r13, r26
     7ce:	10 82       	st	Z, r1
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	31 96       	adiw	r30, 0x01	; 1
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f6       	brne	.-86     	; 0x784 <read_hardware+0x72>
     7da:	d0 92 47 21 	sts	0x2147, r13
     7de:	c0 92 48 21 	sts	0x2148, r12
     7e2:	80 91 3e 21 	lds	r24, 0x213E
     7e6:	d0 fe       	sbrs	r13, 0
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <read_hardware+0xf0>
     7ea:	88 23       	and	r24, r24
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <read_hardware+0xe2>
     7ee:	10 92 3f 21 	sts	0x213F, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <read_hardware+0xe8>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 3f 21 	sts	0x213F, r24
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 3e 21 	sts	0x213E, r24
     800:	0a c0       	rjmp	.+20     	; 0x816 <read_hardware+0x104>
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <read_hardware+0xfc>
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	80 93 3f 21 	sts	0x213F, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <read_hardware+0x100>
     80e:	10 92 3f 21 	sts	0x213F, r1
     812:	10 92 3e 21 	sts	0x213E, r1
     816:	80 91 40 21 	lds	r24, 0x2140
     81a:	d1 fe       	sbrs	r13, 1
     81c:	0c c0       	rjmp	.+24     	; 0x836 <read_hardware+0x124>
     81e:	88 23       	and	r24, r24
     820:	19 f0       	breq	.+6      	; 0x828 <read_hardware+0x116>
     822:	10 92 41 21 	sts	0x2141, r1
     826:	03 c0       	rjmp	.+6      	; 0x82e <read_hardware+0x11c>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 41 21 	sts	0x2141, r24
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 40 21 	sts	0x2140, r24
     834:	0a c0       	rjmp	.+20     	; 0x84a <read_hardware+0x138>
     836:	88 23       	and	r24, r24
     838:	21 f0       	breq	.+8      	; 0x842 <read_hardware+0x130>
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 41 21 	sts	0x2141, r24
     840:	02 c0       	rjmp	.+4      	; 0x846 <read_hardware+0x134>
     842:	10 92 41 21 	sts	0x2141, r1
     846:	10 92 40 21 	sts	0x2140, r1
     84a:	80 91 42 21 	lds	r24, 0x2142
     84e:	d2 fe       	sbrs	r13, 2
     850:	0c c0       	rjmp	.+24     	; 0x86a <read_hardware+0x158>
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <read_hardware+0x14a>
     856:	10 92 43 21 	sts	0x2143, r1
     85a:	03 c0       	rjmp	.+6      	; 0x862 <read_hardware+0x150>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 43 21 	sts	0x2143, r24
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 42 21 	sts	0x2142, r24
     868:	0a c0       	rjmp	.+20     	; 0x87e <read_hardware+0x16c>
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <read_hardware+0x164>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 43 21 	sts	0x2143, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <read_hardware+0x168>
     876:	10 92 43 21 	sts	0x2143, r1
     87a:	10 92 42 21 	sts	0x2142, r1
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	62 c0       	rjmp	.+196    	; 0x94a <read_hardware+0x238>
     886:	20 91 23 02 	lds	r18, 0x0223
     88a:	21 60       	ori	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	23 a3       	std	Z+35, r18	; 0x23
     890:	20 91 21 02 	lds	r18, 0x0221
     894:	27 7c       	andi	r18, 0xC7	; 199
     896:	21 a3       	std	Z+33, r18	; 0x21
     898:	40 91 21 02 	lds	r20, 0x0221
     89c:	29 81       	ldd	r18, Y+1	; 0x01
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	2d 5f       	subi	r18, 0xFD	; 253
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	6a 95       	dec	r22
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <read_hardware+0x194>
     8ae:	42 2b       	or	r20, r18
     8b0:	41 a3       	std	Z+33, r20	; 0x21
     8b2:	20 91 20 02 	lds	r18, 0x0220
     8b6:	20 68       	ori	r18, 0x80	; 128
     8b8:	20 a3       	std	Z+32, r18	; 0x20
     8ba:	20 91 23 02 	lds	r18, 0x0223
     8be:	20 ff       	sbrs	r18, 0
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <read_hardware+0x1a8>
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	20 91 24 02 	lds	r18, 0x0224
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e6 5b       	subi	r30, 0xB6	; 182
     8d0:	fe 4d       	sbci	r31, 0xDE	; 222
     8d2:	20 83       	st	Z, r18
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	20 91 25 02 	lds	r18, 0x0225
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e6 5b       	subi	r30, 0xB6	; 182
     8e4:	fe 4d       	sbci	r31, 0xDE	; 222
     8e6:	f2 2e       	mov	r15, r18
     8e8:	ee 24       	eor	r14, r14
     8ea:	20 81       	ld	r18, Z
     8ec:	31 81       	ldd	r19, Z+1	; 0x01
     8ee:	2e 29       	or	r18, r14
     8f0:	3f 29       	or	r19, r15
     8f2:	20 83       	st	Z, r18
     8f4:	31 83       	std	Z+1, r19	; 0x01
     8f6:	e9 81       	ldd	r30, Y+1	; 0x01
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	e6 5b       	subi	r30, 0xB6	; 182
     900:	fe 4d       	sbci	r31, 0xDE	; 222
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	20 3e       	cpi	r18, 0xE0	; 224
     908:	31 05       	cpc	r19, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <read_hardware+0x20c>
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e6 5b       	subi	r30, 0xB6	; 182
     916:	fe 4d       	sbci	r31, 0xDE	; 222
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	13 c0       	rjmp	.+38     	; 0x944 <read_hardware+0x232>
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	a9 81       	ldd	r26, Y+1	; 0x01
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	e6 5b       	subi	r30, 0xB6	; 182
     92a:	fe 4d       	sbci	r31, 0xDE	; 222
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	a6 5b       	subi	r26, 0xB6	; 182
     934:	be 4d       	sbci	r27, 0xDE	; 222
     936:	2d 91       	ld	r18, X+
     938:	3c 91       	ld	r19, X
     93a:	11 97       	sbiw	r26, 0x01	; 1
     93c:	20 5e       	subi	r18, 0xE0	; 224
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	29 81       	ldd	r18, Y+1	; 0x01
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	29 83       	std	Y+1, r18	; 0x01
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	25 30       	cpi	r18, 0x05	; 5
     94e:	08 f4       	brcc	.+2      	; 0x952 <read_hardware+0x240>
     950:	9a cf       	rjmp	.-204    	; 0x886 <read_hardware+0x174>
     952:	80 91 28 06 	lds	r24, 0x0628
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	80 fd       	sbrc	r24, 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	60 91 28 06 	lds	r22, 0x0628
     960:	84 2f       	mov	r24, r20
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	20 91 55 21 	lds	r18, 0x2155
     968:	51 e0       	ldi	r21, 0x01	; 1
     96a:	25 27       	eor	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	82 23       	and	r24, r18
     970:	93 23       	and	r25, r19
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	59 f0       	breq	.+22     	; 0x98c <read_hardware+0x27a>
     976:	86 2f       	mov	r24, r22
     978:	86 95       	lsr	r24
     97a:	80 fd       	sbrc	r24, 0
     97c:	03 c0       	rjmp	.+6      	; 0x984 <read_hardware+0x272>
     97e:	50 93 54 21 	sts	0x2154, r21
     982:	06 c0       	rjmp	.+12     	; 0x990 <read_hardware+0x27e>
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 93 54 21 	sts	0x2154, r24
     98a:	02 c0       	rjmp	.+4      	; 0x990 <read_hardware+0x27e>
     98c:	10 92 54 21 	sts	0x2154, r1
     990:	40 93 55 21 	sts	0x2155, r20
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	08 95       	ret

000009aa <postloop_functions>:
     9aa:	08 95       	ret

000009ac <__vector_91>:
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
     9d2:	cf e7       	ldi	r28, 0x7F	; 127
     9d4:	d2 e2       	ldi	r29, 0x22	; 34
     9d6:	ce 01       	movw	r24, r28
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	40 eb       	ldi	r20, 0xB0	; 176
     9dc:	59 e0       	ldi	r21, 0x09	; 9
     9de:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <midi_device_process>
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_17>:
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
     a30:	86 e5       	ldi	r24, 0x56	; 86
     a32:	91 e2       	ldi	r25, 0x21	; 33
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_18>:
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
     a7e:	86 e5       	ldi	r24, 0x56	; 86
     a80:	91 e2       	ldi	r25, 0x21	; 33
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <stop_sequencer>
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <fake_midi_noteon_input>:
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <fake_midi_noteon_input+0xa>
     ab4:	0f 92       	push	r0
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	8c 01       	movw	r16, r24
     abc:	6a 83       	std	Y+2, r22	; 0x02
     abe:	4b 83       	std	Y+3, r20	; 0x03
     ac0:	80 e9       	ldi	r24, 0x90	; 144
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	c8 01       	movw	r24, r16
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	ae 01       	movw	r20, r28
     aca:	4f 5f       	subi	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     ad2:	c8 01       	movw	r24, r16
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	ae 01       	movw	r20, r28
     ad8:	4e 5f       	subi	r20, 0xFE	; 254
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     ae0:	c8 01       	movw	r24, r16
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	ae 01       	movw	r20, r28
     ae6:	4d 5f       	subi	r20, 0xFD	; 253
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <midi_device_process>
     af4:	23 96       	adiw	r28, 0x03	; 3
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <fake_midi_noteff_input>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <fake_midi_noteff_input+0xa>
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 01       	movw	r16, r24
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	89 83       	std	Y+1, r24	; 0x01
     b1e:	c8 01       	movw	r24, r16
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	ae 01       	movw	r20, r28
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     b2c:	c8 01       	movw	r24, r16
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	ae 01       	movw	r20, r28
     b32:	4e 5f       	subi	r20, 0xFE	; 254
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     b3a:	c8 01       	movw	r24, r16
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	ae 01       	movw	r20, r28
     b40:	4d 5f       	subi	r20, 0xFD	; 253
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <midi_device_input>
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <midi_device_process>
     b4e:	23 96       	adiw	r28, 0x03	; 3
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <main>:
     b5e:	0e 94 02 03 	call	0x604	; 0x604 <initialize_hardware>
     b62:	86 e5       	ldi	r24, 0x56	; 86
     b64:	91 e2       	ldi	r25, 0x21	; 33
     b66:	0e 94 26 09 	call	0x124c	; 0x124c <initialize_sequencer>
     b6a:	8f e7       	ldi	r24, 0x7F	; 127
     b6c:	92 e2       	ldi	r25, 0x22	; 34
     b6e:	66 e5       	ldi	r22, 0x56	; 86
     b70:	71 e2       	ldi	r23, 0x21	; 33
     b72:	0e 94 47 0c 	call	0x188e	; 0x188e <initialize_serial_midi>
     b76:	8c e3       	ldi	r24, 0x3C	; 60
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
     b7e:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     b82:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>
     b86:	0e 94 89 03 	call	0x712	; 0x712 <read_hardware>
     b8a:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	19 f4       	brne	.+6      	; 0xb98 <main+0x3a>
     b92:	0e 94 a3 01 	call	0x346	; 0x346 <increment_BPM>
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <main+0x46>
     b98:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	11 f4       	brne	.+4      	; 0xba4 <main+0x46>
     ba0:	0e 94 af 01 	call	0x35e	; 0x35e <decrement_BPM>
     ba4:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     ba8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>
     bac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <get_pushbutton_switch_edge>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	29 f4       	brne	.+10     	; 0xbbe <main+0x60>
     bb4:	86 e5       	ldi	r24, 0x56	; 86
     bb6:	91 e2       	ldi	r25, 0x21	; 33
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
     bbe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <get_toggle_switch_edge>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <main+0x74>
     bc6:	86 e5       	ldi	r24, 0x56	; 86
     bc8:	91 e2       	ldi	r25, 0x21	; 33
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <stop_sequencer>
     bd0:	da cf       	rjmp	.-76     	; 0xb86 <main+0x28>
     bd2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_encoder_switch_edge>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	b1 f6       	brne	.-84     	; 0xb86 <main+0x28>
     bda:	86 e5       	ldi	r24, 0x56	; 86
     bdc:	91 e2       	ldi	r25, 0x21	; 33
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
     be4:	d0 cf       	rjmp	.-96     	; 0xb86 <main+0x28>

00000be6 <initialize_note_list>:
     be6:	fc 01       	movw	r30, r24
     be8:	10 82       	st	Z, r1
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	12 82       	std	Z+2, r1	; 0x02
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	14 82       	std	Z+4, r1	; 0x04
     bf2:	15 82       	std	Z+5, r1	; 0x05
     bf4:	16 82       	std	Z+6, r1	; 0x06
     bf6:	17 82       	std	Z+7, r1	; 0x07
     bf8:	10 86       	std	Z+8, r1	; 0x08
     bfa:	80 e1       	ldi	r24, 0x10	; 16
     bfc:	11 86       	std	Z+9, r1	; 0x09
     bfe:	12 86       	std	Z+10, r1	; 0x0a
     c00:	13 86       	std	Z+11, r1	; 0x0b
     c02:	14 86       	std	Z+12, r1	; 0x0c
     c04:	15 86       	std	Z+13, r1	; 0x0d
     c06:	16 86       	std	Z+14, r1	; 0x0e
     c08:	17 86       	std	Z+15, r1	; 0x0f
     c0a:	10 8a       	std	Z+16, r1	; 0x10
     c0c:	11 8a       	std	Z+17, r1	; 0x11
     c0e:	12 8a       	std	Z+18, r1	; 0x12
     c10:	13 8a       	std	Z+19, r1	; 0x13
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	3b 96       	adiw	r30, 0x0b	; 11
     c16:	88 23       	and	r24, r24
     c18:	89 f7       	brne	.-30     	; 0xbfc <initialize_note_list+0x16>
     c1a:	08 95       	ret

00000c1c <remove_note_by_pitch>:
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	fc 01       	movw	r30, r24
     c22:	a1 81       	ldd	r26, Z+1	; 0x01
     c24:	b2 81       	ldd	r27, Z+2	; 0x02
     c26:	07 c0       	rjmp	.+14     	; 0xc36 <remove_note_by_pitch+0x1a>
     c28:	8c 91       	ld	r24, X
     c2a:	86 17       	cp	r24, r22
     c2c:	38 f4       	brcc	.+14     	; 0xc3c <remove_note_by_pitch+0x20>
     c2e:	13 96       	adiw	r26, 0x03	; 3
     c30:	0d 90       	ld	r0, X+
     c32:	bc 91       	ld	r27, X
     c34:	a0 2d       	mov	r26, r0
     c36:	10 97       	sbiw	r26, 0x00	; 0
     c38:	b9 f7       	brne	.-18     	; 0xc28 <remove_note_by_pitch+0xc>
     c3a:	5d c0       	rjmp	.+186    	; 0xcf6 <remove_note_by_pitch+0xda>
     c3c:	86 17       	cp	r24, r22
     c3e:	09 f0       	breq	.+2      	; 0xc42 <remove_note_by_pitch+0x26>
     c40:	5a c0       	rjmp	.+180    	; 0xcf6 <remove_note_by_pitch+0xda>
     c42:	80 81       	ld	r24, Z
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	80 83       	st	Z, r24
     c48:	88 23       	and	r24, r24
     c4a:	21 f4       	brne	.+8      	; 0xc54 <remove_note_by_pitch+0x38>
     c4c:	cf 01       	movw	r24, r30
     c4e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <initialize_note_list>
     c52:	4f c0       	rjmp	.+158    	; 0xcf2 <remove_note_by_pitch+0xd6>
     c54:	15 96       	adiw	r26, 0x05	; 5
     c56:	2d 91       	ld	r18, X+
     c58:	3c 91       	ld	r19, X
     c5a:	16 97       	sbiw	r26, 0x06	; 6
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	8d 91       	ld	r24, X+
     c60:	9c 91       	ld	r25, X
     c62:	14 97       	sbiw	r26, 0x04	; 4
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	21 f0       	breq	.+8      	; 0xc72 <remove_note_by_pitch+0x56>
     c6a:	e9 01       	movw	r28, r18
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <remove_note_by_pitch+0x5a>
     c72:	81 83       	std	Z+1, r24	; 0x01
     c74:	92 83       	std	Z+2, r25	; 0x02
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	8d 91       	ld	r24, X+
     c7a:	9c 91       	ld	r25, X
     c7c:	14 97       	sbiw	r26, 0x04	; 4
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	21 f0       	breq	.+8      	; 0xc8a <remove_note_by_pitch+0x6e>
     c82:	ec 01       	movw	r28, r24
     c84:	2d 83       	std	Y+5, r18	; 0x05
     c86:	3e 83       	std	Y+6, r19	; 0x06
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <remove_note_by_pitch+0x72>
     c8a:	23 83       	std	Z+3, r18	; 0x03
     c8c:	34 83       	std	Z+4, r19	; 0x04
     c8e:	19 96       	adiw	r26, 0x09	; 9
     c90:	cd 91       	ld	r28, X+
     c92:	dc 91       	ld	r29, X
     c94:	1a 97       	sbiw	r26, 0x0a	; 10
     c96:	17 96       	adiw	r26, 0x07	; 7
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	18 97       	sbiw	r26, 0x08	; 8
     c9e:	20 97       	sbiw	r28, 0x00	; 0
     ca0:	19 f0       	breq	.+6      	; 0xca8 <remove_note_by_pitch+0x8c>
     ca2:	8f 83       	std	Y+7, r24	; 0x07
     ca4:	98 87       	std	Y+8, r25	; 0x08
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <remove_note_by_pitch+0x90>
     ca8:	85 83       	std	Z+5, r24	; 0x05
     caa:	96 83       	std	Z+6, r25	; 0x06
     cac:	17 96       	adiw	r26, 0x07	; 7
     cae:	8d 91       	ld	r24, X+
     cb0:	9c 91       	ld	r25, X
     cb2:	18 97       	sbiw	r26, 0x08	; 8
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <remove_note_by_pitch+0xa4>
     cb8:	fc 01       	movw	r30, r24
     cba:	c1 87       	std	Z+9, r28	; 0x09
     cbc:	d2 87       	std	Z+10, r29	; 0x0a
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <remove_note_by_pitch+0xa8>
     cc0:	c7 83       	std	Z+7, r28	; 0x07
     cc2:	d0 87       	std	Z+8, r29	; 0x08
     cc4:	1c 92       	st	X, r1
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 92       	st	X, r1
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	1c 92       	st	X, r1
     cd0:	12 97       	sbiw	r26, 0x02	; 2
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	1d 92       	st	X+, r1
     cd6:	1c 92       	st	X, r1
     cd8:	14 97       	sbiw	r26, 0x04	; 4
     cda:	15 96       	adiw	r26, 0x05	; 5
     cdc:	1d 92       	st	X+, r1
     cde:	1c 92       	st	X, r1
     ce0:	16 97       	sbiw	r26, 0x06	; 6
     ce2:	17 96       	adiw	r26, 0x07	; 7
     ce4:	1d 92       	st	X+, r1
     ce6:	1c 92       	st	X, r1
     ce8:	18 97       	sbiw	r26, 0x08	; 8
     cea:	19 96       	adiw	r26, 0x09	; 9
     cec:	1d 92       	st	X+, r1
     cee:	1c 92       	st	X, r1
     cf0:	1a 97       	sbiw	r26, 0x0a	; 10
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <remove_note_by_pitch+0xdc>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <insert_note>:
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	fc 01       	movw	r30, r24
     d08:	a1 81       	ldd	r26, Z+1	; 0x01
     d0a:	b2 81       	ldd	r27, Z+2	; 0x02
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <insert_note+0x1e>
     d0e:	8c 91       	ld	r24, X
     d10:	86 17       	cp	r24, r22
     d12:	30 f4       	brcc	.+12     	; 0xd20 <insert_note+0x22>
     d14:	13 96       	adiw	r26, 0x03	; 3
     d16:	0d 90       	ld	r0, X+
     d18:	bc 91       	ld	r27, X
     d1a:	a0 2d       	mov	r26, r0
     d1c:	10 97       	sbiw	r26, 0x00	; 0
     d1e:	b9 f7       	brne	.-18     	; 0xd0e <insert_note+0x10>
     d20:	8c 91       	ld	r24, X
     d22:	86 17       	cp	r24, r22
     d24:	09 f0       	breq	.+2      	; 0xd28 <insert_note+0x2a>
     d26:	48 c0       	rjmp	.+144    	; 0xdb8 <insert_note+0xba>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	4c 93       	st	X, r20
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	87 81       	ldd	r24, Z+7	; 0x07
     d30:	90 85       	ldd	r25, Z+8	; 0x08
     d32:	8a 17       	cp	r24, r26
     d34:	9b 07       	cpc	r25, r27
     d36:	09 f4       	brne	.+2      	; 0xd3a <insert_note+0x3c>
     d38:	d0 c0       	rjmp	.+416    	; 0xeda <insert_note+0x1dc>
     d3a:	85 81       	ldd	r24, Z+5	; 0x05
     d3c:	96 81       	ldd	r25, Z+6	; 0x06
     d3e:	8a 17       	cp	r24, r26
     d40:	9b 07       	cpc	r25, r27
     d42:	49 f4       	brne	.+18     	; 0xd56 <insert_note+0x58>
     d44:	17 96       	adiw	r26, 0x07	; 7
     d46:	cd 91       	ld	r28, X+
     d48:	dc 91       	ld	r29, X
     d4a:	18 97       	sbiw	r26, 0x08	; 8
     d4c:	c5 83       	std	Z+5, r28	; 0x05
     d4e:	d6 83       	std	Z+6, r29	; 0x06
     d50:	19 86       	std	Y+9, r1	; 0x09
     d52:	1a 86       	std	Y+10, r1	; 0x0a
     d54:	12 c0       	rjmp	.+36     	; 0xd7a <insert_note+0x7c>
     d56:	19 96       	adiw	r26, 0x09	; 9
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	1a 97       	sbiw	r26, 0x0a	; 10
     d5e:	17 96       	adiw	r26, 0x07	; 7
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	18 97       	sbiw	r26, 0x08	; 8
     d66:	e9 01       	movw	r28, r18
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	17 96       	adiw	r26, 0x07	; 7
     d6e:	8d 91       	ld	r24, X+
     d70:	9c 91       	ld	r25, X
     d72:	18 97       	sbiw	r26, 0x08	; 8
     d74:	ec 01       	movw	r28, r24
     d76:	29 87       	std	Y+9, r18	; 0x09
     d78:	3a 87       	std	Y+10, r19	; 0x0a
     d7a:	80 81       	ld	r24, Z
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	69 f4       	brne	.+26     	; 0xd9a <insert_note+0x9c>
     d80:	a7 83       	std	Z+7, r26	; 0x07
     d82:	b0 87       	std	Z+8, r27	; 0x08
     d84:	a5 83       	std	Z+5, r26	; 0x05
     d86:	b6 83       	std	Z+6, r27	; 0x06
     d88:	17 96       	adiw	r26, 0x07	; 7
     d8a:	1d 92       	st	X+, r1
     d8c:	1c 92       	st	X, r1
     d8e:	18 97       	sbiw	r26, 0x08	; 8
     d90:	19 96       	adiw	r26, 0x09	; 9
     d92:	1d 92       	st	X+, r1
     d94:	1c 92       	st	X, r1
     d96:	1a 97       	sbiw	r26, 0x0a	; 10
     d98:	a3 c0       	rjmp	.+326    	; 0xee0 <insert_note+0x1e2>
     d9a:	17 96       	adiw	r26, 0x07	; 7
     d9c:	1d 92       	st	X+, r1
     d9e:	1c 92       	st	X, r1
     da0:	18 97       	sbiw	r26, 0x08	; 8
     da2:	c7 81       	ldd	r28, Z+7	; 0x07
     da4:	d0 85       	ldd	r29, Z+8	; 0x08
     da6:	19 96       	adiw	r26, 0x09	; 9
     da8:	cd 93       	st	X+, r28
     daa:	dc 93       	st	X, r29
     dac:	1a 97       	sbiw	r26, 0x0a	; 10
     dae:	af 83       	std	Y+7, r26	; 0x07
     db0:	b8 87       	std	Y+8, r27	; 0x08
     db2:	a7 83       	std	Z+7, r26	; 0x07
     db4:	b0 87       	std	Z+8, r27	; 0x08
     db6:	91 c0       	rjmp	.+290    	; 0xeda <insert_note+0x1dc>
     db8:	ef 01       	movw	r28, r30
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	28 2f       	mov	r18, r24
     dc0:	3b 85       	ldd	r19, Y+11	; 0x0b
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	33 23       	and	r19, r19
     dc6:	e1 f4       	brne	.+56     	; 0xe00 <insert_note+0x102>
     dc8:	0b e0       	ldi	r16, 0x0B	; 11
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	80 9f       	mul	r24, r16
     dce:	e0 01       	movw	r28, r0
     dd0:	81 9f       	mul	r24, r17
     dd2:	d0 0d       	add	r29, r0
     dd4:	90 9f       	mul	r25, r16
     dd6:	d0 0d       	add	r29, r0
     dd8:	11 24       	eor	r1, r1
     dda:	ce 0f       	add	r28, r30
     ddc:	df 1f       	adc	r29, r31
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	88 83       	st	Y, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	20 9f       	mul	r18, r16
     de6:	e0 01       	movw	r28, r0
     de8:	21 9f       	mul	r18, r17
     dea:	d0 0d       	add	r29, r0
     dec:	30 9f       	mul	r19, r16
     dee:	d0 0d       	add	r29, r0
     df0:	11 24       	eor	r1, r1
     df2:	ce 01       	movw	r24, r28
     df4:	09 96       	adiw	r24, 0x09	; 9
     df6:	8e 0f       	add	r24, r30
     df8:	9f 1f       	adc	r25, r31
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	31 f4       	brne	.+12     	; 0xe0a <insert_note+0x10c>
     dfe:	6f c0       	rjmp	.+222    	; 0xede <insert_note+0x1e0>
     e00:	2b 96       	adiw	r28, 0x0b	; 11
     e02:	80 31       	cpi	r24, 0x10	; 16
     e04:	91 05       	cpc	r25, r1
     e06:	d9 f6       	brne	.-74     	; 0xdbe <insert_note+0xc0>
     e08:	6a c0       	rjmp	.+212    	; 0xede <insert_note+0x1e0>
     e0a:	50 81       	ld	r21, Z
     e0c:	5f 5f       	subi	r21, 0xFF	; 255
     e0e:	50 83       	st	Z, r21
     e10:	ce 0f       	add	r28, r30
     e12:	df 1f       	adc	r29, r31
     e14:	69 87       	std	Y+9, r22	; 0x09
     e16:	4a 87       	std	Y+10, r20	; 0x0a
     e18:	51 30       	cpi	r21, 0x01	; 1
     e1a:	39 f4       	brne	.+14     	; 0xe2a <insert_note+0x12c>
     e1c:	1c 86       	std	Y+12, r1	; 0x0c
     e1e:	1d 86       	std	Y+13, r1	; 0x0d
     e20:	1e 86       	std	Y+14, r1	; 0x0e
     e22:	1f 86       	std	Y+15, r1	; 0x0f
     e24:	81 83       	std	Z+1, r24	; 0x01
     e26:	92 83       	std	Z+2, r25	; 0x02
     e28:	0c c0       	rjmp	.+24     	; 0xe42 <insert_note+0x144>
     e2a:	10 97       	sbiw	r26, 0x00	; 0
     e2c:	69 f4       	brne	.+26     	; 0xe48 <insert_note+0x14a>
     e2e:	a3 81       	ldd	r26, Z+3	; 0x03
     e30:	b4 81       	ldd	r27, Z+4	; 0x04
     e32:	ae 87       	std	Y+14, r26	; 0x0e
     e34:	bf 87       	std	Y+15, r27	; 0x0f
     e36:	1c 86       	std	Y+12, r1	; 0x0c
     e38:	1d 86       	std	Y+13, r1	; 0x0d
     e3a:	13 96       	adiw	r26, 0x03	; 3
     e3c:	8d 93       	st	X+, r24
     e3e:	9c 93       	st	X, r25
     e40:	14 97       	sbiw	r26, 0x04	; 4
     e42:	83 83       	std	Z+3, r24	; 0x03
     e44:	94 83       	std	Z+4, r25	; 0x04
     e46:	51 c0       	rjmp	.+162    	; 0xeea <insert_note+0x1ec>
     e48:	ac 87       	std	Y+12, r26	; 0x0c
     e4a:	bd 87       	std	Y+13, r27	; 0x0d
     e4c:	15 96       	adiw	r26, 0x05	; 5
     e4e:	4d 91       	ld	r20, X+
     e50:	5c 91       	ld	r21, X
     e52:	16 97       	sbiw	r26, 0x06	; 6
     e54:	4e 87       	std	Y+14, r20	; 0x0e
     e56:	5f 87       	std	Y+15, r21	; 0x0f
     e58:	15 96       	adiw	r26, 0x05	; 5
     e5a:	8d 93       	st	X+, r24
     e5c:	9c 93       	st	X, r25
     e5e:	16 97       	sbiw	r26, 0x06	; 6
     e60:	ae 85       	ldd	r26, Y+14	; 0x0e
     e62:	bf 85       	ldd	r27, Y+15	; 0x0f
     e64:	10 97       	sbiw	r26, 0x00	; 0
     e66:	19 f4       	brne	.+6      	; 0xe6e <insert_note+0x170>
     e68:	81 83       	std	Z+1, r24	; 0x01
     e6a:	92 83       	std	Z+2, r25	; 0x02
     e6c:	3e c0       	rjmp	.+124    	; 0xeea <insert_note+0x1ec>
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	8d 93       	st	X+, r24
     e72:	9c 93       	st	X, r25
     e74:	14 97       	sbiw	r26, 0x04	; 4
     e76:	39 c0       	rjmp	.+114    	; 0xeea <insert_note+0x1ec>
     e78:	87 83       	std	Z+7, r24	; 0x07
     e7a:	90 87       	std	Z+8, r25	; 0x08
     e7c:	85 83       	std	Z+5, r24	; 0x05
     e7e:	96 83       	std	Z+6, r25	; 0x06
     e80:	8b e0       	ldi	r24, 0x0B	; 11
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	28 9f       	mul	r18, r24
     e86:	d0 01       	movw	r26, r0
     e88:	29 9f       	mul	r18, r25
     e8a:	b0 0d       	add	r27, r0
     e8c:	38 9f       	mul	r19, r24
     e8e:	b0 0d       	add	r27, r0
     e90:	11 24       	eor	r1, r1
     e92:	ae 0f       	add	r26, r30
     e94:	bf 1f       	adc	r27, r31
     e96:	50 96       	adiw	r26, 0x10	; 16
     e98:	1d 92       	st	X+, r1
     e9a:	1c 92       	st	X, r1
     e9c:	51 97       	sbiw	r26, 0x11	; 17
     e9e:	52 96       	adiw	r26, 0x12	; 18
     ea0:	1d 92       	st	X+, r1
     ea2:	1c 92       	st	X, r1
     ea4:	53 97       	sbiw	r26, 0x13	; 19
     ea6:	19 c0       	rjmp	.+50     	; 0xeda <insert_note+0x1dc>
     ea8:	4b e0       	ldi	r20, 0x0B	; 11
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	24 9f       	mul	r18, r20
     eae:	d0 01       	movw	r26, r0
     eb0:	25 9f       	mul	r18, r21
     eb2:	b0 0d       	add	r27, r0
     eb4:	34 9f       	mul	r19, r20
     eb6:	b0 0d       	add	r27, r0
     eb8:	11 24       	eor	r1, r1
     eba:	ae 0f       	add	r26, r30
     ebc:	bf 1f       	adc	r27, r31
     ebe:	50 96       	adiw	r26, 0x10	; 16
     ec0:	1d 92       	st	X+, r1
     ec2:	1c 92       	st	X, r1
     ec4:	51 97       	sbiw	r26, 0x11	; 17
     ec6:	c7 81       	ldd	r28, Z+7	; 0x07
     ec8:	d0 85       	ldd	r29, Z+8	; 0x08
     eca:	52 96       	adiw	r26, 0x12	; 18
     ecc:	cd 93       	st	X+, r28
     ece:	dc 93       	st	X, r29
     ed0:	53 97       	sbiw	r26, 0x13	; 19
     ed2:	8f 83       	std	Y+7, r24	; 0x07
     ed4:	98 87       	std	Y+8, r25	; 0x08
     ed6:	87 83       	std	Z+7, r24	; 0x07
     ed8:	90 87       	std	Z+8, r25	; 0x08
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <insert_note+0x1e2>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret
     eea:	40 81       	ld	r20, Z
     eec:	41 30       	cpi	r20, 0x01	; 1
     eee:	e1 f6       	brne	.-72     	; 0xea8 <insert_note+0x1aa>
     ef0:	c3 cf       	rjmp	.-122    	; 0xe78 <insert_note+0x17a>

00000ef2 <calculate_start_time_increment>:
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	return (uint8_t) final_velocity;
}


static void calculate_start_time_increment(Sequencer* sequencer){
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <calculate_start_time_increment+0xa>
     efc:	00 d0       	rcall	.+0      	; 0xefe <calculate_start_time_increment+0xc>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
     f04:	80 91 28 08 	lds	r24, 0x0828
     f08:	90 91 29 08 	lds	r25, 0x0829
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	ab 83       	std	Y+3, r26	; 0x03
     f16:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
     f18:	f8 01       	movw	r30, r16
     f1a:	87 85       	ldd	r24, Z+15	; 0x0f
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	89 f1       	breq	.+98     	; 0xf82 <calculate_start_time_increment+0x90>
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	30 f4       	brcc	.+12     	; 0xf30 <calculate_start_time_increment+0x3e>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	69 f0       	breq	.+26     	; 0xf42 <calculate_start_time_increment+0x50>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	09 f0       	breq	.+2      	; 0xf2e <calculate_start_time_increment+0x3c>
     f2c:	6f c0       	rjmp	.+222    	; 0x100c <calculate_start_time_increment+0x11a>
     f2e:	1c c0       	rjmp	.+56     	; 0xf68 <calculate_start_time_increment+0x76>
     f30:	85 30       	cpi	r24, 0x05	; 5
     f32:	09 f4       	brne	.+2      	; 0xf36 <calculate_start_time_increment+0x44>
     f34:	4d c0       	rjmp	.+154    	; 0xfd0 <calculate_start_time_increment+0xde>
     f36:	85 30       	cpi	r24, 0x05	; 5
     f38:	68 f1       	brcs	.+90     	; 0xf94 <calculate_start_time_increment+0xa2>
     f3a:	86 30       	cpi	r24, 0x06	; 6
     f3c:	09 f0       	breq	.+2      	; 0xf40 <calculate_start_time_increment+0x4e>
     f3e:	66 c0       	rjmp	.+204    	; 0x100c <calculate_start_time_increment+0x11a>
     f40:	56 c0       	rjmp	.+172    	; 0xfee <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1: new_start_time_increment *= 3;
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	4b 81       	ldd	r20, Y+3	; 0x03
     f48:	5c 81       	ldd	r21, Y+4	; 0x04
     f4a:	da 01       	movw	r26, r20
     f4c:	c9 01       	movw	r24, r18
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	aa 1f       	adc	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	a4 1f       	adc	r26, r20
     f5c:	b5 1f       	adc	r27, r21
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	ab 83       	std	Y+3, r26	; 0x03
     f64:	bc 83       	std	Y+4, r27	; 0x04
     f66:	43 c0       	rjmp	.+134    	; 0xfee <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	ab 81       	ldd	r26, Y+3	; 0x03
     f6e:	bc 81       	ldd	r27, Y+4	; 0x04
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	ab 83       	std	Y+3, r26	; 0x03
     f7e:	bc 83       	std	Y+4, r27	; 0x04
     f80:	27 c0       	rjmp	.+78     	; 0xfd0 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	ab 81       	ldd	r26, Y+3	; 0x03
     f88:	bc 81       	ldd	r27, Y+4	; 0x04
     f8a:	b6 95       	lsr	r27
     f8c:	a7 95       	ror	r26
     f8e:	97 95       	ror	r25
     f90:	87 95       	ror	r24
     f92:	38 c0       	rjmp	.+112    	; 0x1004 <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	3a 81       	ldd	r19, Y+2	; 0x02
     f98:	4b 81       	ldd	r20, Y+3	; 0x03
     f9a:	5c 81       	ldd	r21, Y+4	; 0x04
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	aa 1f       	adc	r26, r26
     fa6:	bb 1f       	adc	r27, r27
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	a4 1f       	adc	r26, r20
     fae:	b5 1f       	adc	r27, r21
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	ab 81       	ldd	r26, Y+3	; 0x03
     fbe:	bc 81       	ldd	r27, Y+4	; 0x04
     fc0:	33 e0       	ldi	r19, 0x03	; 3
     fc2:	b6 95       	lsr	r27
     fc4:	a7 95       	ror	r26
     fc6:	97 95       	ror	r25
     fc8:	87 95       	ror	r24
     fca:	3a 95       	dec	r19
     fcc:	d1 f7       	brne	.-12     	; 0xfc2 <calculate_start_time_increment+0xd0>
     fce:	1a c0       	rjmp	.+52     	; 0x1004 <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
     fd0:	69 81       	ldd	r22, Y+1	; 0x01
     fd2:	7a 81       	ldd	r23, Y+2	; 0x02
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	23 e0       	ldi	r18, 0x03	; 3
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
     fe4:	29 83       	std	Y+1, r18	; 0x01
     fe6:	3a 83       	std	Y+2, r19	; 0x02
     fe8:	4b 83       	std	Y+3, r20	; 0x03
     fea:	5c 83       	std	Y+4, r21	; 0x04
                break;
     fec:	0f c0       	rjmp	.+30     	; 0x100c <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	ab 81       	ldd	r26, Y+3	; 0x03
     ff4:	bc 81       	ldd	r27, Y+4	; 0x04
     ff6:	22 e0       	ldi	r18, 0x02	; 2
     ff8:	b6 95       	lsr	r27
     ffa:	a7 95       	ror	r26
     ffc:	97 95       	ror	r25
     ffe:	87 95       	ror	r24
    1000:	2a 95       	dec	r18
    1002:	d1 f7       	brne	.-12     	; 0xff8 <calculate_start_time_increment+0x106>
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	ab 83       	std	Y+3, r26	; 0x03
    100a:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
    100c:	69 81       	ldd	r22, Y+1	; 0x01
    100e:	7a 81       	ldd	r23, Y+2	; 0x02
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	f8 01       	movw	r30, r16
    1016:	27 81       	ldd	r18, Z+7	; 0x07
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	44 27       	eor	r20, r20
    1020:	37 fd       	sbrc	r19, 7
    1022:	40 95       	com	r20
    1024:	54 2f       	mov	r21, r20
    1026:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
    102a:	29 83       	std	Y+1, r18	; 0x01
    102c:	3a 83       	std	Y+2, r19	; 0x02
    102e:	4b 83       	std	Y+3, r20	; 0x03
    1030:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	ab 81       	ldd	r26, Y+3	; 0x03
    1038:	bc 81       	ldd	r27, Y+4	; 0x04
    103a:	f8 01       	movw	r30, r16
    103c:	81 87       	std	Z+9, r24	; 0x09
    103e:	92 87       	std	Z+10, r25	; 0x0a
}
    1040:	24 96       	adiw	r28, 0x04	; 4
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <build_play_list>:
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    1050:	2f 92       	push	r2
    1052:	3f 92       	push	r3
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8c 01       	movw	r16, r24
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    
    return;
}
    1078:	2d b6       	in	r2, 0x3d	; 61
    107a:	3e b6       	in	r3, 0x3e	; 62
static void build_play_list(Sequencer* sequencer){
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    107c:	dc 01       	movw	r26, r24
    107e:	1d 96       	adiw	r26, 0x0d	; 13
    1080:	8c 91       	ld	r24, X
    1082:	1d 97       	sbiw	r26, 0x0d	; 13
    
    uint8_t play_list_index = 0;
    Note* current_note;
    
    uint8_t note_list_size = note_list->length;
    1084:	f8 01       	movw	r30, r16
    1086:	e0 59       	subi	r30, 0x90	; 144
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	90 80       	ld	r9, Z
	
    uint8_t random_order[note_list_size];
    108c:	69 2c       	mov	r6, r9
    108e:	77 24       	eor	r7, r7
    1090:	ed b7       	in	r30, 0x3d	; 61
    1092:	fe b7       	in	r31, 0x3e	; 62
    1094:	e6 19       	sub	r30, r6
    1096:	f7 09       	sbc	r31, r7
    1098:	ed bf       	out	0x3d, r30	; 61
    109a:	fe bf       	out	0x3e, r31	; 62
    109c:	ed b6       	in	r14, 0x3d	; 61
    109e:	fe b6       	in	r15, 0x3e	; 62
    10a0:	08 94       	sec
    10a2:	e1 1c       	adc	r14, r1
    10a4:	f1 1c       	adc	r15, r1
    uint8_t i;
    uint8_t mirror = 0;

//    pattern = 0;

    switch(pattern){
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	09 f4       	brne	.+2      	; 0x10ac <build_play_list+0x5c>
    10aa:	42 c0       	rjmp	.+132    	; 0x1130 <build_play_list+0xe0>
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	30 f4       	brcc	.+12     	; 0x10bc <build_play_list+0x6c>
    10b0:	88 23       	and	r24, r24
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <build_play_list+0x80>
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <build_play_list+0x6a>
    10b8:	ac c0       	rjmp	.+344    	; 0x1212 <build_play_list+0x1c2>
    10ba:	22 c0       	rjmp	.+68     	; 0x1100 <build_play_list+0xb0>
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	09 f4       	brne	.+2      	; 0x10c2 <build_play_list+0x72>
    10c0:	4f c0       	rjmp	.+158    	; 0x1160 <build_play_list+0x110>
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <build_play_list+0x78>
    10c6:	a5 c0       	rjmp	.+330    	; 0x1212 <build_play_list+0x1c2>
    10c8:	57 01       	movw	r10, r14
    10ca:	f7 01       	movw	r30, r14
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	62 c0       	rjmp	.+196    	; 0x1194 <build_play_list+0x144>
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10d0:	f8 01       	movw	r30, r16
    10d2:	ef 58       	subi	r30, 0x8F	; 143
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	a0 81       	ld	r26, Z
    10d8:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    10da:	80 e0       	ldi	r24, 0x00	; 0
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10dc:	0e c0       	rjmp	.+28     	; 0x10fa <build_play_list+0xaa>
                sequencer->play_list[play_list_index++] = current_note;
    10de:	e8 2f       	mov	r30, r24
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	38 96       	adiw	r30, 0x08	; 8
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e0 0f       	add	r30, r16
    10ea:	f1 1f       	adc	r31, r17
    10ec:	a0 83       	st	Z, r26
    10ee:	b1 83       	std	Z+1, r27	; 0x01
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10f2:	13 96       	adiw	r26, 0x03	; 3
    10f4:	0d 90       	ld	r0, X+
    10f6:	bc 91       	ld	r27, X
    10f8:	a0 2d       	mov	r26, r0
    10fa:	10 97       	sbiw	r26, 0x00	; 0
    10fc:	81 f7       	brne	.-32     	; 0x10de <build_play_list+0x8e>
    10fe:	8a c0       	rjmp	.+276    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1100:	f8 01       	movw	r30, r16
    1102:	ed 58       	subi	r30, 0x8D	; 141
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	a0 81       	ld	r26, Z
    1108:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    110c:	0e c0       	rjmp	.+28     	; 0x112a <build_play_list+0xda>
                sequencer->play_list[play_list_index++] = current_note;
    110e:	e8 2f       	mov	r30, r24
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	38 96       	adiw	r30, 0x08	; 8
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e0 0f       	add	r30, r16
    111a:	f1 1f       	adc	r31, r17
    111c:	a0 83       	st	Z, r26
    111e:	b1 83       	std	Z+1, r27	; 0x01
    1120:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1122:	15 96       	adiw	r26, 0x05	; 5
    1124:	0d 90       	ld	r0, X+
    1126:	bc 91       	ld	r27, X
    1128:	a0 2d       	mov	r26, r0
    112a:	10 97       	sbiw	r26, 0x00	; 0
    112c:	81 f7       	brne	.-32     	; 0x110e <build_play_list+0xbe>
    112e:	72 c0       	rjmp	.+228    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1130:	f8 01       	movw	r30, r16
    1132:	eb 58       	subi	r30, 0x8B	; 139
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	a0 81       	ld	r26, Z
    1138:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    113a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    113c:	0e c0       	rjmp	.+28     	; 0x115a <build_play_list+0x10a>
                sequencer->play_list[play_list_index++] = current_note;
    113e:	e8 2f       	mov	r30, r24
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	38 96       	adiw	r30, 0x08	; 8
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e0 0f       	add	r30, r16
    114a:	f1 1f       	adc	r31, r17
    114c:	a0 83       	st	Z, r26
    114e:	b1 83       	std	Z+1, r27	; 0x01
    1150:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1152:	17 96       	adiw	r26, 0x07	; 7
    1154:	0d 90       	ld	r0, X+
    1156:	bc 91       	ld	r27, X
    1158:	a0 2d       	mov	r26, r0
    115a:	10 97       	sbiw	r26, 0x00	; 0
    115c:	81 f7       	brne	.-32     	; 0x113e <build_play_list+0xee>
    115e:	5a c0       	rjmp	.+180    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1160:	f8 01       	movw	r30, r16
    1162:	e9 58       	subi	r30, 0x89	; 137
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	a0 81       	ld	r26, Z
    1168:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    116a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    116c:	0e c0       	rjmp	.+28     	; 0x118a <build_play_list+0x13a>
                sequencer->play_list[play_list_index++] = current_note;
    116e:	e8 2f       	mov	r30, r24
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	38 96       	adiw	r30, 0x08	; 8
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	e0 0f       	add	r30, r16
    117a:	f1 1f       	adc	r31, r17
    117c:	a0 83       	st	Z, r26
    117e:	b1 83       	std	Z+1, r27	; 0x01
    1180:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1182:	19 96       	adiw	r26, 0x09	; 9
    1184:	0d 90       	ld	r0, X+
    1186:	bc 91       	ld	r27, X
    1188:	a0 2d       	mov	r26, r0
    118a:	10 97       	sbiw	r26, 0x00	; 0
    118c:	81 f7       	brne	.-32     	; 0x116e <build_play_list+0x11e>
    118e:	42 c0       	rjmp	.+132    	; 0x1214 <build_play_list+0x1c4>
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
    1190:	81 93       	st	Z+, r24
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	89 15       	cp	r24, r9
    1196:	e0 f3       	brcs	.-8      	; 0x1190 <build_play_list+0x140>
    1198:	67 01       	movw	r12, r14
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    119a:	89 2c       	mov	r8, r9
    119c:	55 24       	eor	r5, r5
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <build_play_list+0x170>
    11a0:	0e 94 2e 18 	call	0x305c	; 0x305c <rand>
				temp = random_order[i];
    11a4:	d6 01       	movw	r26, r12
    11a6:	2c 91       	ld	r18, X
        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    11a8:	68 2d       	mov	r22, r8
    11aa:	75 2d       	mov	r23, r5
    11ac:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
				temp = random_order[i];
				random_order[i] = random_order[j];
    11b0:	f7 01       	movw	r30, r14
    11b2:	e8 0f       	add	r30, r24
    11b4:	f1 1d       	adc	r31, r1
    11b6:	80 81       	ld	r24, Z
    11b8:	d6 01       	movw	r26, r12
    11ba:	8d 93       	st	X+, r24
    11bc:	6d 01       	movw	r12, r26
				random_order[j] = temp;
    11be:	20 83       	st	Z, r18

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
    11c0:	8c 2d       	mov	r24, r12
    11c2:	8e 19       	sub	r24, r14
    11c4:	89 15       	cp	r24, r9
    11c6:	60 f3       	brcs	.-40     	; 0x11a0 <build_play_list+0x150>
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    11c8:	b8 01       	movw	r22, r16
    11ca:	60 5f       	subi	r22, 0xF0	; 240
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	c3 01       	movw	r24, r6
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	40 96       	adiw	r24, 0x10	; 16
    11d6:	80 0f       	add	r24, r16
    11d8:	91 1f       	adc	r25, r17
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
    11da:	98 01       	movw	r18, r16
    11dc:	2f 58       	subi	r18, 0x8F	; 143
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	13 c0       	rjmp	.+38     	; 0x1208 <build_play_list+0x1b8>
    11e2:	f9 01       	movw	r30, r18
    11e4:	a0 81       	ld	r26, Z
    11e6:	b1 81       	ldd	r27, Z+1	; 0x01
				for (j = 0; j < random_order[i]; j++)
    11e8:	f5 01       	movw	r30, r10
    11ea:	51 91       	ld	r21, Z+
    11ec:	5f 01       	movw	r10, r30
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <build_play_list+0x1ac>
				    current_note = current_note->next_note_by_pitch;
    11f2:	13 96       	adiw	r26, 0x03	; 3
    11f4:	0d 90       	ld	r0, X+
    11f6:	bc 91       	ld	r27, X
    11f8:	a0 2d       	mov	r26, r0
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
				for (j = 0; j < random_order[i]; j++)
    11fa:	4f 5f       	subi	r20, 0xFF	; 255
    11fc:	45 17       	cp	r20, r21
    11fe:	c8 f3       	brcs	.-14     	; 0x11f2 <build_play_list+0x1a2>
				    current_note = current_note->next_note_by_pitch;
				sequencer->play_list[play_list_index++] = current_note;
    1200:	fb 01       	movw	r30, r22
    1202:	a1 93       	st	Z+, r26
    1204:	b1 93       	st	Z+, r27
    1206:	bf 01       	movw	r22, r30
				j = rand() % note_list_size;
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
    1208:	68 17       	cp	r22, r24
    120a:	79 07       	cpc	r23, r25
    120c:	51 f7       	brne	.-44     	; 0x11e2 <build_play_list+0x192>
    120e:	89 2d       	mov	r24, r9
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <build_play_list+0x1c4>
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    1212:	80 e0       	ldi	r24, 0x00	; 0
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index - 1;
    1214:	81 50       	subi	r24, 0x01	; 1
    1216:	d8 01       	movw	r26, r16
    1218:	16 96       	adiw	r26, 0x06	; 6
    121a:	8c 93       	st	X, r24
    121c:	16 97       	sbiw	r26, 0x06	; 6
    
    //check if the list is now shorter than the current note_index
//    while (sequencer->note_index > sequencer->note_max)
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    121e:	12 96       	adiw	r26, 0x02	; 2
    1220:	1c 92       	st	X, r1
    1222:	12 97       	sbiw	r26, 0x02	; 2
    
    return;
}
    1224:	2d be       	out	0x3d, r2	; 61
    1226:	3e be       	out	0x3e, r3	; 62
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	3f 90       	pop	r3
    1248:	2f 90       	pop	r2
    124a:	08 95       	ret

0000124c <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <initialize_sequencer+0xa>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <initialize_sequencer+0xc>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8c 01       	movw	r16, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    125e:	e0 e0       	ldi	r30, 0x00	; 0
    1260:	f8 e0       	ldi	r31, 0x08	; 8
    1262:	80 91 01 08 	lds	r24, 0x0801
    1266:	8f 7d       	andi	r24, 0xDF	; 223
    1268:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    126a:	80 91 01 08 	lds	r24, 0x0801
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    1272:	80 91 07 08 	lds	r24, 0x0807
    1276:	8f 7c       	andi	r24, 0xCF	; 207
    1278:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    127a:	80 91 07 08 	lds	r24, 0x0807
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    1282:	80 91 07 08 	lds	r24, 0x0807
    1286:	83 7f       	andi	r24, 0xF3	; 243
    1288:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    128a:	80 91 07 08 	lds	r24, 0x0807
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    1292:	c8 01       	movw	r24, r16
    1294:	80 59       	subi	r24, 0x90	; 144
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    129c:	f8 01       	movw	r30, r16
    129e:	70 96       	adiw	r30, 0x10	; 16
    12a0:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    12a2:	11 92       	st	Z+, r1
    12a4:	11 92       	st	Z+, r1
    12a6:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <initialize_sequencer+0x56>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    12aa:	f8 01       	movw	r30, r16
    12ac:	13 82       	std	Z+3, r1	; 0x03
    sequencer->octave_index = 0;
    12ae:	15 82       	std	Z+5, r1	; 0x05
    sequencer->repeat_index = 0;
    12b0:	14 82       	std	Z+4, r1	; 0x04
    sequencer->note_max = 0;
    12b2:	16 82       	std	Z+6, r1	; 0x06
    sequencer->repeat_max = 0;
    12b4:	17 82       	std	Z+7, r1	; 0x07
    sequencer->octave_max = 0;
    12b6:	10 86       	std	Z+8, r1	; 0x08
    sequencer->start_time_increment = 0;
    12b8:	11 86       	std	Z+9, r1	; 0x09
    12ba:	12 86       	std	Z+10, r1	; 0x0a
    sequencer->stop_time_increment = 0;
    12bc:	13 86       	std	Z+11, r1	; 0x0b
    12be:	14 86       	std	Z+12, r1	; 0x0c
    sequencer->pattern = 0;
    12c0:	15 86       	std	Z+13, r1	; 0x0d
    sequencer->duration = 0;
    12c2:	16 86       	std	Z+14, r1	; 0x0e
    sequencer->division = 0;
    12c4:	17 86       	std	Z+15, r1	; 0x0f
    sequencer->play_status = 0;
    12c6:	11 82       	std	Z+1, r1	; 0x01
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->rebuild_play_list = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	82 83       	std	Z+2, r24	; 0x02
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    12cc:	c8 01       	movw	r24, r16
    12ce:	0e 94 79 07 	call	0xef2	; 0xef2 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    12d2:	f8 01       	movw	r30, r16
    12d4:	66 85       	ldd	r22, Z+14	; 0x0e
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	21 85       	ldd	r18, Z+9	; 0x09
    12de:	32 85       	ldd	r19, Z+10	; 0x0a
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__mulsi3>
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	7a 83       	std	Y+2, r23	; 0x02
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    12f0:	69 81       	ldd	r22, Y+1	; 0x01
    12f2:	7a 81       	ldd	r23, Y+2	; 0x02
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
    1304:	29 83       	std	Y+1, r18	; 0x01
    1306:	3a 83       	std	Y+2, r19	; 0x02
    1308:	4b 83       	std	Y+3, r20	; 0x03
    130a:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	ab 81       	ldd	r26, Y+3	; 0x03
    1312:	bc 81       	ldd	r27, Y+4	; 0x04
    1314:	f8 01       	movw	r30, r16
    1316:	83 87       	std	Z+11, r24	; 0x0b
    1318:	94 87       	std	Z+12, r25	; 0x0c
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    131a:	24 96       	adiw	r28, 0x04	; 4
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	08 95       	ret

0000132a <set_rebuild_play_list>:
    return;
}


void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    132a:	fc 01       	movw	r30, r24
    132c:	62 83       	std	Z+2, r22	; 0x02
}
    132e:	08 95       	ret

00001330 <continue_sequencer>:
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1330:	af 92       	push	r10
    1332:	bf 92       	push	r11
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	60 97       	sbiw	r28, 0x10	; 16
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	8c 01       	movw	r16, r24
    1350:	f6 2e       	mov	r15, r22
    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    1352:	e0 e0       	ldi	r30, 0x00	; 0
    1354:	f8 e0       	ldi	r31, 0x08	; 8
    1356:	80 91 01 08 	lds	r24, 0x0801
    135a:	8f 7d       	andi	r24, 0xDF	; 223
    135c:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    135e:	80 91 01 08 	lds	r24, 0x0801
    1362:	8f 7b       	andi	r24, 0xBF	; 191
    1364:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    1366:	80 91 0c 08 	lds	r24, 0x080C
    136a:	80 62       	ori	r24, 0x20	; 32
    136c:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    136e:	80 91 0c 08 	lds	r24, 0x080C
    1372:	80 64       	ori	r24, 0x40	; 64
    1374:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    1376:	f8 01       	movw	r30, r16
    1378:	e0 59       	subi	r30, 0x90	; 144
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	88 23       	and	r24, r24
    1380:	09 f4       	brne	.+2      	; 0x1384 <continue_sequencer+0x54>
    1382:	a4 c1       	rjmp	.+840    	; 0x16cc <continue_sequencer+0x39c>
        return;
    
    current_time = (uint32_t) TCC0.CNT;
    1384:	80 91 20 08 	lds	r24, 0x0820
    1388:	90 91 21 08 	lds	r25, 0x0821
    138c:	a0 e0       	ldi	r26, 0x00	; 0
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	ab 83       	std	Y+3, r26	; 0x03
    1396:	bc 83       	std	Y+4, r27	; 0x04
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    1398:	d8 01       	movw	r26, r16
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	8c 91       	ld	r24, X
    139e:	11 97       	sbiw	r26, 0x01	; 1
    13a0:	88 23       	and	r24, r24
    13a2:	61 f1       	breq	.+88     	; 0x13fc <continue_sequencer+0xcc>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    13a4:	0e 94 42 0c 	call	0x1884	; 0x1884 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    13a8:	d8 01       	movw	r26, r16
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	ec 91       	ld	r30, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	38 96       	adiw	r30, 0x08	; 8
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	e0 0f       	add	r30, r16
    13ba:	f1 1f       	adc	r31, r17
    13bc:	01 90       	ld	r0, Z+
    13be:	f0 81       	ld	r31, Z
    13c0:	e0 2d       	mov	r30, r0
    13c2:	15 96       	adiw	r26, 0x05	; 5
    13c4:	4c 91       	ld	r20, X
    13c6:	15 97       	sbiw	r26, 0x05	; 5
    13c8:	2c e0       	ldi	r18, 0x0C	; 12
    13ca:	42 9f       	mul	r20, r18
    13cc:	a0 01       	movw	r20, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	20 81       	ld	r18, Z
    13d2:	42 0f       	add	r20, r18
    13d4:	51 1d       	adc	r21, r1
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <continue_sequencer+0xac>
	while (final_pitch > 255)
	        final_pitch -= 12;
    13d8:	4c 50       	subi	r20, 0x0C	; 12
    13da:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    13dc:	4f 3f       	cpi	r20, 0xFF	; 255
    13de:	51 05       	cpc	r21, r1
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <continue_sequencer+0xb4>
    13e2:	d0 f7       	brcc	.-12     	; 0x13d8 <continue_sequencer+0xa8>
    
    current_time = (uint32_t) TCC0.CNT;
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	21 81       	ldd	r18, Z+1	; 0x01
    13e8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_LEDs_off>
        sequencer->play_status = 0;
    13f8:	f8 01       	movw	r30, r16
    13fa:	11 82       	std	Z+1, r1	; 0x01
    const uint8_t pattern_pot_sel= 4;
    const uint8_t pattern_pot_min = 0;
    const uint8_t pattern_pot_max = 4;
    
    //read the new values from the pots
    uint8_t octave_max_new = get_pot_value(octave_pot_sel, octave_pot_min, octave_pot_max);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	43 e0       	ldi	r20, 0x03	; 3
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    140a:	b8 2e       	mov	r11, r24
    uint8_t repeat_max_new = get_pot_value(repeat_pot_sel, repeat_pot_min, repeat_pot_max);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    141a:	c8 2e       	mov	r12, r24
    uint8_t division_new = get_pot_value(division_pot_sel,division_pot_min,division_pot_max);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	46 e0       	ldi	r20, 0x06	; 6
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    142a:	d8 2e       	mov	r13, r24
    uint8_t duration_new = get_pot_value(duration_pot_sel, duration_pot_min, duration_pot_max);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	6b e0       	ldi	r22, 0x0B	; 11
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	4f ef       	ldi	r20, 0xFF	; 255
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    143a:	e8 2e       	mov	r14, r24
    uint8_t pattern_new = get_pot_value(pattern_pot_sel, pattern_pot_min, pattern_pot_max);
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	44 e0       	ldi	r20, 0x04	; 4
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    144a:	d8 01       	movw	r26, r16
    144c:	17 96       	adiw	r26, 0x07	; 7
    144e:	2c 91       	ld	r18, X
    1450:	17 97       	sbiw	r26, 0x07	; 7
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    1452:	1f 96       	adiw	r26, 0x0f	; 15
    1454:	9c 91       	ld	r25, X
    1456:	1f 97       	sbiw	r26, 0x0f	; 15
    1458:	9d 15       	cp	r25, r13
    145a:	29 f4       	brne	.+10     	; 0x1466 <continue_sequencer+0x136>
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	2c 15       	cp	r18, r12
    1460:	19 f4       	brne	.+6      	; 0x1468 <continue_sequencer+0x138>
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <continue_sequencer+0x138>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    1466:	91 e0       	ldi	r25, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    1468:	f8 01       	movw	r30, r16
    146a:	26 85       	ldd	r18, Z+14	; 0x0e
    146c:	2e 15       	cp	r18, r14
    146e:	11 f4       	brne	.+4      	; 0x1474 <continue_sequencer+0x144>
    1470:	a9 2e       	mov	r10, r25
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <continue_sequencer+0x148>
        update_stop_time_increment = 1;
    1474:	aa 24       	eor	r10, r10
    1476:	a3 94       	inc	r10
    }
    
    if (sequencer->pattern != pattern_new){
    1478:	d8 01       	movw	r26, r16
    147a:	1d 96       	adiw	r26, 0x0d	; 13
    147c:	2c 91       	ld	r18, X
    147e:	1d 97       	sbiw	r26, 0x0d	; 13
    1480:	28 17       	cp	r18, r24
    1482:	21 f0       	breq	.+8      	; 0x148c <continue_sequencer+0x15c>
        sequencer->rebuild_play_list = 1;
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	12 96       	adiw	r26, 0x02	; 2
    1488:	2c 93       	st	X, r18
    148a:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    148c:	f8 01       	movw	r30, r16
    148e:	b0 86       	std	Z+8, r11	; 0x08
    sequencer->repeat_max = repeat_max_new;
    1490:	c7 82       	std	Z+7, r12	; 0x07
    sequencer->division = division_new;
    1492:	d7 86       	std	Z+15, r13	; 0x0f
    sequencer->duration = duration_new;
    1494:	e6 86       	std	Z+14, r14	; 0x0e
    sequencer->pattern = pattern_new;
    1496:	85 87       	std	Z+13, r24	; 0x0d
    
    if (update_start_time_increment)
    1498:	99 23       	and	r25, r25
    149a:	19 f0       	breq	.+6      	; 0x14a2 <continue_sequencer+0x172>
        calculate_start_time_increment(sequencer);
    149c:	c8 01       	movw	r24, r16
    149e:	0e 94 79 07 	call	0xef2	; 0xef2 <calculate_start_time_increment>
    if (update_stop_time_increment)
    14a2:	aa 20       	and	r10, r10
    14a4:	41 f1       	breq	.+80     	; 0x14f6 <continue_sequencer+0x1c6>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    14a6:	d8 01       	movw	r26, r16
    14a8:	1e 96       	adiw	r26, 0x0e	; 14
    14aa:	6c 91       	ld	r22, X
    14ac:	1e 97       	sbiw	r26, 0x0e	; 14
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	19 96       	adiw	r26, 0x09	; 9
    14b6:	2d 91       	ld	r18, X+
    14b8:	3c 91       	ld	r19, X
    14ba:	1a 97       	sbiw	r26, 0x0a	; 10
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__mulsi3>
    14c4:	6d 87       	std	Y+13, r22	; 0x0d
    14c6:	7e 87       	std	Y+14, r23	; 0x0e
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
    14ca:	98 8b       	std	Y+16, r25	; 0x10
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    14cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    14ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodsi4>
    14e0:	2d 87       	std	Y+13, r18	; 0x0d
    14e2:	3e 87       	std	Y+14, r19	; 0x0e
    14e4:	4f 87       	std	Y+15, r20	; 0x0f
    14e6:	58 8b       	std	Y+16, r21	; 0x10
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	af 85       	ldd	r26, Y+15	; 0x0f
    14ee:	b8 89       	ldd	r27, Y+16	; 0x10
    14f0:	f8 01       	movw	r30, r16
    14f2:	83 87       	std	Z+11, r24	; 0x0b
    14f4:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    14f6:	29 81       	ldd	r18, Y+1	; 0x01
    14f8:	3a 81       	ldd	r19, Y+2	; 0x02
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	d8 01       	movw	r26, r16
    1500:	19 96       	adiw	r26, 0x09	; 9
    1502:	8d 91       	ld	r24, X+
    1504:	9c 91       	ld	r25, X
    1506:	1a 97       	sbiw	r26, 0x0a	; 10
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	82 0f       	add	r24, r18
    150e:	93 1f       	adc	r25, r19
    1510:	a4 1f       	adc	r26, r20
    1512:	b5 1f       	adc	r27, r21
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	af 83       	std	Y+7, r26	; 0x07
    151a:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	4b 81       	ldd	r20, Y+3	; 0x03
    1522:	5c 81       	ldd	r21, Y+4	; 0x04
    1524:	f8 01       	movw	r30, r16
    1526:	83 85       	ldd	r24, Z+11	; 0x0b
    1528:	94 85       	ldd	r25, Z+12	; 0x0c
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	a4 1f       	adc	r26, r20
    1534:	b5 1f       	adc	r27, r21
    1536:	89 87       	std	Y+9, r24	; 0x09
    1538:	9a 87       	std	Y+10, r25	; 0x0a
    153a:	ab 87       	std	Y+11, r26	; 0x0b
    153c:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    153e:	2d 81       	ldd	r18, Y+5	; 0x05
    1540:	3e 81       	ldd	r19, Y+6	; 0x06
    1542:	4f 81       	ldd	r20, Y+7	; 0x07
    1544:	58 85       	ldd	r21, Y+8	; 0x08
    1546:	80 91 28 08 	lds	r24, 0x0828
    154a:	90 91 29 08 	lds	r25, 0x0829
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	a4 07       	cpc	r26, r20
    1558:	b5 07       	cpc	r27, r21
    155a:	90 f4       	brcc	.+36     	; 0x1580 <continue_sequencer+0x250>
        next_start_time = next_start_time - TCC0.CCA;
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	af 81       	ldd	r26, Y+7	; 0x07
    1562:	b8 85       	ldd	r27, Y+8	; 0x08
    1564:	20 91 28 08 	lds	r18, 0x0828
    1568:	30 91 29 08 	lds	r19, 0x0829
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	a4 0b       	sbc	r26, r20
    1576:	b5 0b       	sbc	r27, r21
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	af 83       	std	Y+7, r26	; 0x07
    157e:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    1580:	29 85       	ldd	r18, Y+9	; 0x09
    1582:	3a 85       	ldd	r19, Y+10	; 0x0a
    1584:	4b 85       	ldd	r20, Y+11	; 0x0b
    1586:	5c 85       	ldd	r21, Y+12	; 0x0c
    1588:	80 91 28 08 	lds	r24, 0x0828
    158c:	90 91 29 08 	lds	r25, 0x0829
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	82 17       	cp	r24, r18
    1596:	93 07       	cpc	r25, r19
    1598:	a4 07       	cpc	r26, r20
    159a:	b5 07       	cpc	r27, r21
    159c:	90 f4       	brcc	.+36     	; 0x15c2 <continue_sequencer+0x292>
        next_stop_time = next_stop_time - TCC0.CCA;
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    15a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    15a6:	20 91 28 08 	lds	r18, 0x0828
    15aa:	30 91 29 08 	lds	r19, 0x0829
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	a4 0b       	sbc	r26, r20
    15b8:	b5 0b       	sbc	r27, r21
    15ba:	89 87       	std	Y+9, r24	; 0x09
    15bc:	9a 87       	std	Y+10, r25	; 0x0a
    15be:	ab 87       	std	Y+11, r26	; 0x0b
    15c0:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	af 81       	ldd	r26, Y+7	; 0x07
    15c8:	b8 85       	ldd	r27, Y+8	; 0x08
    15ca:	e0 e0       	ldi	r30, 0x00	; 0
    15cc:	f8 e0       	ldi	r31, 0x08	; 8
    15ce:	82 a7       	std	Z+42, r24	; 0x2a
    15d0:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    15d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    15da:	84 a7       	std	Z+44, r24	; 0x2c
    15dc:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    15de:	d8 01       	movw	r26, r16
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	8c 91       	ld	r24, X
    15e4:	12 97       	sbiw	r26, 0x02	; 2
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <continue_sequencer+0x2c0>
        build_play_list(sequencer);
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 28 08 	call	0x1050	; 0x1050 <build_play_list>
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    15f0:	ff 20       	and	r15, r15
    15f2:	59 f5       	brne	.+86     	; 0x164a <continue_sequencer+0x31a>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    15f4:	f8 01       	movw	r30, r16
    15f6:	84 81       	ldd	r24, Z+4	; 0x04
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	84 83       	std	Z+4, r24	; 0x04
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    15fc:	97 81       	ldd	r25, Z+7	; 0x07
    15fe:	98 17       	cp	r25, r24
    1600:	20 f4       	brcc	.+8      	; 0x160a <continue_sequencer+0x2da>
        sequencer->repeat_index = 0;
    1602:	14 82       	std	Z+4, r1	; 0x04
        sequencer->note_index += 1;
    1604:	83 81       	ldd	r24, Z+3	; 0x03
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	83 83       	std	Z+3, r24	; 0x03
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    160a:	d8 01       	movw	r26, r16
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	9c 91       	ld	r25, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	16 96       	adiw	r26, 0x06	; 6
    1614:	8c 91       	ld	r24, X
    1616:	16 97       	sbiw	r26, 0x06	; 6
    1618:	89 17       	cp	r24, r25
    161a:	50 f4       	brcc	.+20     	; 0x1630 <continue_sequencer+0x300>
        sequencer->note_index = 0;
    161c:	13 96       	adiw	r26, 0x03	; 3
    161e:	1c 92       	st	X, r1
    1620:	13 97       	sbiw	r26, 0x03	; 3
        sequencer->octave_index += 1;		
    1622:	15 96       	adiw	r26, 0x05	; 5
    1624:	8c 91       	ld	r24, X
    1626:	15 97       	sbiw	r26, 0x05	; 5
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	15 96       	adiw	r26, 0x05	; 5
    162c:	8c 93       	st	X, r24
    162e:	15 97       	sbiw	r26, 0x05	; 5
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    1630:	f8 01       	movw	r30, r16
    1632:	95 81       	ldd	r25, Z+5	; 0x05
    1634:	80 85       	ldd	r24, Z+8	; 0x08
    1636:	89 17       	cp	r24, r25
    1638:	88 f4       	brcc	.+34     	; 0x165c <continue_sequencer+0x32c>
        sequencer->octave_index = 0;
    163a:	15 82       	std	Z+5, r1	; 0x05
		
		//build a new random playlist if necessary
		if (sequencer->pattern == 4)
    163c:	85 85       	ldd	r24, Z+13	; 0x0d
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	69 f4       	brne	.+26     	; 0x165c <continue_sequencer+0x32c>
		    build_play_list(sequencer);
    1642:	c8 01       	movw	r24, r16
    1644:	0e 94 28 08 	call	0x1050	; 0x1050 <build_play_list>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <continue_sequencer+0x32c>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    164a:	d8 01       	movw	r26, r16
    164c:	15 96       	adiw	r26, 0x05	; 5
    164e:	1c 92       	st	X, r1
    1650:	15 97       	sbiw	r26, 0x05	; 5
    sequencer->note_index = 0;
    1652:	13 96       	adiw	r26, 0x03	; 3
    1654:	1c 92       	st	X, r1
    1656:	13 97       	sbiw	r26, 0x03	; 3
    sequencer->repeat_index = 0;
    1658:	14 96       	adiw	r26, 0x04	; 4
    165a:	1c 92       	st	X, r1
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    165c:	0e 94 42 0c 	call	0x1884	; 0x1884 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1660:	d8 01       	movw	r26, r16
    1662:	13 96       	adiw	r26, 0x03	; 3
    1664:	ec 91       	ld	r30, X
    1666:	13 97       	sbiw	r26, 0x03	; 3
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	38 96       	adiw	r30, 0x08	; 8
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	e0 0f       	add	r30, r16
    1672:	f1 1f       	adc	r31, r17
    1674:	01 90       	ld	r0, Z+
    1676:	f0 81       	ld	r31, Z
    1678:	e0 2d       	mov	r30, r0
    167a:	15 96       	adiw	r26, 0x05	; 5
    167c:	4c 91       	ld	r20, X
    167e:	15 97       	sbiw	r26, 0x05	; 5
    1680:	2c e0       	ldi	r18, 0x0C	; 12
    1682:	42 9f       	mul	r20, r18
    1684:	a0 01       	movw	r20, r0
    1686:	11 24       	eor	r1, r1
    1688:	20 81       	ld	r18, Z
    168a:	42 0f       	add	r20, r18
    168c:	51 1d       	adc	r21, r1
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <continue_sequencer+0x364>
	while (final_pitch > 255)
	        final_pitch -= 12;
    1690:	4c 50       	subi	r20, 0x0C	; 12
    1692:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    1694:	4f 3f       	cpi	r20, 0xFF	; 255
    1696:	51 05       	cpc	r21, r1
    1698:	09 f0       	breq	.+2      	; 0x169c <continue_sequencer+0x36c>
    169a:	d0 f7       	brcc	.-12     	; 0x1690 <continue_sequencer+0x360>
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	21 81       	ldd	r18, Z+1	; 0x01
    16a0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <midi_send_noteon>
    set_LEDs_on(0,0,0,1);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	0e 94 be 02 	call	0x57c	; 0x57c <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	f8 01       	movw	r30, r16
    16b4:	81 83       	std	Z+1, r24	; 0x01
    
    //set run flag
    sequencer->run_status = 1;
    16b6:	80 83       	st	Z, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    16b8:	e0 e0       	ldi	r30, 0x00	; 0
    16ba:	f8 e0       	ldi	r31, 0x08	; 8
    16bc:	80 91 01 08 	lds	r24, 0x0801
    16c0:	80 62       	ori	r24, 0x20	; 32
    16c2:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    16c4:	80 91 01 08 	lds	r24, 0x0801
    16c8:	80 64       	ori	r24, 0x40	; 64
    16ca:	81 83       	std	Z+1, r24	; 0x01
}
    16cc:	60 96       	adiw	r28, 0x10	; 16
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	08 95       	ret

000016e8 <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ec 01       	movw	r28, r24
    16f0:	16 2f       	mov	r17, r22
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    16f2:	e0 e0       	ldi	r30, 0x00	; 0
    16f4:	f8 e0       	ldi	r31, 0x08	; 8
    16f6:	80 91 01 08 	lds	r24, 0x0801
    16fa:	8f 7d       	andi	r24, 0xDF	; 223
    16fc:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    16fe:	80 91 01 08 	lds	r24, 0x0801
    1702:	8f 7b       	andi	r24, 0xBF	; 191
    1704:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    1706:	80 91 0c 08 	lds	r24, 0x080C
    170a:	80 64       	ori	r24, 0x40	; 64
    170c:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 23       	and	r24, r24
    1712:	31 f1       	breq	.+76     	; 0x1760 <stop_sequencer+0x78>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    1714:	0e 94 42 0c 	call	0x1884	; 0x1884 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	38 96       	adiw	r30, 0x08	; 8
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	ec 0f       	add	r30, r28
    1724:	fd 1f       	adc	r31, r29
    1726:	01 90       	ld	r0, Z+
    1728:	f0 81       	ld	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	4d 81       	ldd	r20, Y+5	; 0x05
    172e:	2c e0       	ldi	r18, 0x0C	; 12
    1730:	42 9f       	mul	r20, r18
    1732:	a0 01       	movw	r20, r0
    1734:	11 24       	eor	r1, r1
    1736:	20 81       	ld	r18, Z
    1738:	42 0f       	add	r20, r18
    173a:	51 1d       	adc	r21, r1
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <stop_sequencer+0x5a>
	while (final_pitch > 255)
	        final_pitch -= 12;
    173e:	4c 50       	subi	r20, 0x0C	; 12
    1740:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    1742:	4f 3f       	cpi	r20, 0xFF	; 255
    1744:	51 05       	cpc	r21, r1
    1746:	09 f0       	breq	.+2      	; 0x174a <stop_sequencer+0x62>
    1748:	d0 f7       	brcc	.-12     	; 0x173e <stop_sequencer+0x56>
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    
    //stop the current note if it's playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	21 81       	ldd	r18, Z+1	; 0x01
    174e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_LEDs_off>
        sequencer->play_status = 0;
    175e:	19 82       	std	Y+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, reenable the note on interrupt
    if (full_stop)
    1760:	11 23       	and	r17, r17
    1762:	11 f0       	breq	.+4      	; 0x1768 <stop_sequencer+0x80>
        sequencer->run_status = 0;
    1764:	18 82       	st	Y, r1
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <stop_sequencer+0x8c>
    else    
        TCC0.CTRLB |= 0x20;
    1768:	80 91 01 08 	lds	r24, 0x0801
    176c:	80 62       	ori	r24, 0x20	; 32
    176e:	e0 e0       	ldi	r30, 0x00	; 0
    1770:	f8 e0       	ldi	r31, 0x08	; 8
    1772:	81 83       	std	Z+1, r24	; 0x01
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	08 95       	ret

0000177c <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    1786:	8c 01       	movw	r16, r24
    1788:	00 59       	subi	r16, 0x90	; 144
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <insert_note>
    1792:	88 23       	and	r24, r24
    1794:	51 f0       	breq	.+20     	; 0x17aa <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	8a 83       	std	Y+2, r24	; 0x02
        
		if (sequencer->note_list.length == 1)
    179a:	f8 01       	movw	r30, r16
    179c:	80 81       	ld	r24, Z
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	21 f4       	brne	.+8      	; 0x17aa <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    17a2:	ce 01       	movw	r24, r28
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
    }
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
    17c0:	f6 2e       	mov	r15, r22
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
	
	//if note is playing, stop it
	if (sequencer->play_list[sequencer->note_index]->pitch == pitch)
    17c2:	eb 81       	ldd	r30, Y+3	; 0x03
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	38 96       	adiw	r30, 0x08	; 8
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	e8 0f       	add	r30, r24
    17ce:	f9 1f       	adc	r31, r25
    17d0:	01 90       	ld	r0, Z+
    17d2:	f0 81       	ld	r31, Z
    17d4:	e0 2d       	mov	r30, r0
    17d6:	80 81       	ld	r24, Z
    17d8:	86 17       	cp	r24, r22
    17da:	21 f4       	brne	.+8      	; 0x17e4 <remove_note_from_arpeggiator+0x30>
	    stop_sequencer(sequencer,0);
    17dc:	ce 01       	movw	r24, r28
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <stop_sequencer>
		
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    17e4:	8e 01       	movw	r16, r28
    17e6:	00 59       	subi	r16, 0x90	; 144
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	c8 01       	movw	r24, r16
    17ec:	6f 2d       	mov	r22, r15
    17ee:	0e 94 0e 06 	call	0xc1c	; 0xc1c <remove_note_by_pitch>
    17f2:	88 23       	and	r24, r24
    17f4:	51 f0       	breq	.+20     	; 0x180a <remove_note_from_arpeggiator+0x56>
        sequencer->rebuild_play_list = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	8a 83       	std	Y+2, r24	; 0x02
        
        if (sequencer->note_list.length == 0)
    17fa:	f8 01       	movw	r30, r16
    17fc:	80 81       	ld	r24, Z
    17fe:	88 23       	and	r24, r24
    1800:	21 f4       	brne	.+8      	; 0x180a <remove_note_from_arpeggiator+0x56>
            stop_sequencer(sequencer, 1);
    1802:	ce 01       	movw	r24, r28
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <stop_sequencer>
    }	
	
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	08 95       	ret

00001816 <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    1816:	fc 01       	movw	r30, r24
    1818:	20 81       	ld	r18, Z
    181a:	22 23       	and	r18, r18
    181c:	19 f0       	breq	.+6      	; 0x1824 <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
    1824:	08 95       	ret

00001826 <serial_midi_send>:
    1826:	0f 93       	push	r16
    1828:	80 91 b1 09 	lds	r24, 0x09B1
    182c:	85 ff       	sbrs	r24, 5
    182e:	fc cf       	rjmp	.-8      	; 0x1828 <serial_midi_send+0x2>
    1830:	40 93 b0 09 	sts	0x09B0, r20
    1834:	62 30       	cpi	r22, 0x02	; 2
    1836:	70 f0       	brcs	.+28     	; 0x1854 <serial_midi_send+0x2e>
    1838:	80 91 b1 09 	lds	r24, 0x09B1
    183c:	85 ff       	sbrs	r24, 5
    183e:	fc cf       	rjmp	.-8      	; 0x1838 <serial_midi_send+0x12>
    1840:	20 93 b0 09 	sts	0x09B0, r18
    1844:	63 30       	cpi	r22, 0x03	; 3
    1846:	31 f4       	brne	.+12     	; 0x1854 <serial_midi_send+0x2e>
    1848:	80 91 b1 09 	lds	r24, 0x09B1
    184c:	85 ff       	sbrs	r24, 5
    184e:	fc cf       	rjmp	.-8      	; 0x1848 <serial_midi_send+0x22>
    1850:	00 93 b0 09 	sts	0x09B0, r16
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <noteoff_to_arpeggiator>:
    1858:	80 91 6c 23 	lds	r24, 0x236C
    185c:	90 91 6d 23 	lds	r25, 0x236D
    1860:	64 2f       	mov	r22, r20
    1862:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <remove_note_from_arpeggiator>
    1866:	08 95       	ret

00001868 <noteon_to_arpeggiator>:
    1868:	64 2f       	mov	r22, r20
    186a:	80 91 6c 23 	lds	r24, 0x236C
    186e:	90 91 6d 23 	lds	r25, 0x236D
    1872:	22 23       	and	r18, r18
    1874:	19 f4       	brne	.+6      	; 0x187c <noteon_to_arpeggiator+0x14>
    1876:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <remove_note_from_arpeggiator>
    187a:	08 95       	ret
    187c:	42 2f       	mov	r20, r18
    187e:	0e 94 be 0b 	call	0x177c	; 0x177c <add_note_to_arpeggiator>
    1882:	08 95       	ret

00001884 <get_midi_device>:
    1884:	80 91 6e 23 	lds	r24, 0x236E
    1888:	90 91 6f 23 	lds	r25, 0x236F
    188c:	08 95       	ret

0000188e <initialize_serial_midi>:
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	ec 01       	movw	r28, r24
    189c:	7b 01       	movw	r14, r22
    189e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <midi_device_init>
    18a2:	03 e1       	ldi	r16, 0x13	; 19
    18a4:	1c e0       	ldi	r17, 0x0C	; 12
    18a6:	ce 01       	movw	r24, r28
    18a8:	b8 01       	movw	r22, r16
    18aa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <midi_device_set_send_func>
    18ae:	ce 01       	movw	r24, r28
    18b0:	64 e3       	ldi	r22, 0x34	; 52
    18b2:	7c e0       	ldi	r23, 0x0C	; 12
    18b4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <midi_register_noteon_callback>
    18b8:	ce 01       	movw	r24, r28
    18ba:	6c e2       	ldi	r22, 0x2C	; 44
    18bc:	7c e0       	ldi	r23, 0x0C	; 12
    18be:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <midi_register_noteoff_callback>
    18c2:	ce 01       	movw	r24, r28
    18c4:	b8 01       	movw	r22, r16
    18c6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <midi_register_fallthrough_callback>
    18ca:	e0 92 6c 23 	sts	0x236C, r14
    18ce:	f0 92 6d 23 	sts	0x236D, r15
    18d2:	c0 93 6e 23 	sts	0x236E, r28
    18d6:	d0 93 6f 23 	sts	0x236F, r29
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	08 95       	ret

000018e8 <bytequeue_init>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	42 83       	std	Z+2, r20	; 0x02
    18ec:	63 83       	std	Z+3, r22	; 0x03
    18ee:	74 83       	std	Z+4, r23	; 0x04
    18f0:	11 82       	std	Z+1, r1	; 0x01
    18f2:	10 82       	st	Z, r1
    18f4:	08 95       	ret

000018f6 <bytequeue_enqueue>:
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	16 2f       	mov	r17, r22
    1902:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <store_and_clear_interrupt>
    1906:	08 2f       	mov	r16, r24
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	c9 01       	movw	r24, r18
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	6a 81       	ldd	r22, Y+2	; 0x02
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
    1918:	48 81       	ld	r20, Y
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	84 17       	cp	r24, r20
    191e:	95 07       	cpc	r25, r21
    1920:	29 f4       	brne	.+10     	; 0x192c <bytequeue_enqueue+0x36>
    1922:	80 2f       	mov	r24, r16
    1924:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <restore_interrupt_setting>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <bytequeue_enqueue+0x5c>
    192c:	eb 81       	ldd	r30, Y+3	; 0x03
    192e:	fc 81       	ldd	r31, Y+4	; 0x04
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	10 83       	st	Z, r17
    1936:	29 81       	ldd	r18, Y+1	; 0x01
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	6a 81       	ldd	r22, Y+2	; 0x02
    1940:	c9 01       	movw	r24, r18
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	80 2f       	mov	r24, r16
    194c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <restore_interrupt_setting>
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret

0000195c <bytequeue_length>:
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
    1964:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <store_and_clear_interrupt>
    1968:	29 81       	ldd	r18, Y+1	; 0x01
    196a:	98 81       	ld	r25, Y
    196c:	29 17       	cp	r18, r25
    196e:	10 f0       	brcs	.+4      	; 0x1974 <bytequeue_length+0x18>
    1970:	12 2f       	mov	r17, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <bytequeue_length+0x1c>
    1974:	1a 81       	ldd	r17, Y+2	; 0x02
    1976:	12 0f       	add	r17, r18
    1978:	19 1b       	sub	r17, r25
    197a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <restore_interrupt_setting>
    197e:	81 2f       	mov	r24, r17
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	08 95       	ret

00001988 <bytequeue_get>:
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	86 0f       	add	r24, r22
    1990:	91 1d       	adc	r25, r1
    1992:	62 81       	ldd	r22, Z+2	; 0x02
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
    199a:	03 80       	ldd	r0, Z+3	; 0x03
    199c:	f4 81       	ldd	r31, Z+4	; 0x04
    199e:	e0 2d       	mov	r30, r0
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	80 81       	ld	r24, Z
    19a6:	08 95       	ret

000019a8 <bytequeue_remove>:
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	8c 01       	movw	r16, r24
    19b8:	69 83       	std	Y+1, r22	; 0x01
    19ba:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <store_and_clear_interrupt>
    19be:	48 2f       	mov	r20, r24
    19c0:	f8 01       	movw	r30, r16
    19c2:	20 81       	ld	r18, Z
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	69 81       	ldd	r22, Y+1	; 0x01
    19c8:	26 0f       	add	r18, r22
    19ca:	31 1d       	adc	r19, r1
    19cc:	62 81       	ldd	r22, Z+2	; 0x02
    19ce:	c9 01       	movw	r24, r18
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__divmodhi4>
    19d6:	80 83       	st	Z, r24
    19d8:	84 2f       	mov	r24, r20
    19da:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <restore_interrupt_setting>
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <store_and_clear_interrupt>:
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	08 95       	ret

000019ee <restore_interrupt_setting>:
    19ee:	08 95       	ret

000019f0 <midi_is_statusbyte>:
    19f0:	88 1f       	adc	r24, r24
    19f2:	88 27       	eor	r24, r24
    19f4:	88 1f       	adc	r24, r24
    19f6:	08 95       	ret

000019f8 <midi_is_realtime>:
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	88 3f       	cpi	r24, 0xF8	; 248
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <midi_is_realtime+0x8>
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	89 2f       	mov	r24, r25
    1a02:	08 95       	ret

00001a04 <midi_packet_length>:
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	20 7f       	andi	r18, 0xF0	; 240
    1a0a:	30 70       	andi	r19, 0x00	; 0
    1a0c:	20 3b       	cpi	r18, 0xB0	; 176
    1a0e:	31 05       	cpc	r19, r1
    1a10:	f1 f0       	breq	.+60     	; 0x1a4e <midi_packet_length+0x4a>
    1a12:	21 3b       	cpi	r18, 0xB1	; 177
    1a14:	31 05       	cpc	r19, r1
    1a16:	54 f4       	brge	.+20     	; 0x1a2c <midi_packet_length+0x28>
    1a18:	20 39       	cpi	r18, 0x90	; 144
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	c1 f0       	breq	.+48     	; 0x1a4e <midi_packet_length+0x4a>
    1a1e:	20 3a       	cpi	r18, 0xA0	; 160
    1a20:	31 05       	cpc	r19, r1
    1a22:	a9 f0       	breq	.+42     	; 0x1a4e <midi_packet_length+0x4a>
    1a24:	20 38       	cpi	r18, 0x80	; 128
    1a26:	31 05       	cpc	r19, r1
    1a28:	e9 f4       	brne	.+58     	; 0x1a64 <midi_packet_length+0x60>
    1a2a:	11 c0       	rjmp	.+34     	; 0x1a4e <midi_packet_length+0x4a>
    1a2c:	20 3d       	cpi	r18, 0xD0	; 208
    1a2e:	31 05       	cpc	r19, r1
    1a30:	d9 f0       	breq	.+54     	; 0x1a68 <midi_packet_length+0x64>
    1a32:	21 3d       	cpi	r18, 0xD1	; 209
    1a34:	31 05       	cpc	r19, r1
    1a36:	24 f4       	brge	.+8      	; 0x1a40 <midi_packet_length+0x3c>
    1a38:	20 3c       	cpi	r18, 0xC0	; 192
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	99 f4       	brne	.+38     	; 0x1a64 <midi_packet_length+0x60>
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <midi_packet_length+0x64>
    1a40:	20 3e       	cpi	r18, 0xE0	; 224
    1a42:	31 05       	cpc	r19, r1
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <midi_packet_length+0x4a>
    1a46:	20 3f       	cpi	r18, 0xF0	; 240
    1a48:	31 05       	cpc	r19, r1
    1a4a:	61 f4       	brne	.+24     	; 0x1a64 <midi_packet_length+0x60>
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <midi_packet_length+0x4e>
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	08 95       	ret
    1a52:	e8 2f       	mov	r30, r24
    1a54:	e1 5f       	subi	r30, 0xF1	; 241
    1a56:	ef 30       	cpi	r30, 0x0F	; 15
    1a58:	48 f4       	brcc	.+18     	; 0x1a6c <midi_packet_length+0x68>
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	e0 5e       	subi	r30, 0xE0	; 224
    1a5e:	ff 4d       	sbci	r31, 0xDF	; 223
    1a60:	80 81       	ld	r24, Z
    1a62:	08 95       	ret
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	08 95       	ret
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	08 95       	ret
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	08 95       	ret

00001a70 <midi_send_cc>:
    1a70:	0f 93       	push	r16
    1a72:	36 2f       	mov	r19, r22
    1a74:	54 2f       	mov	r21, r20
    1a76:	02 2f       	mov	r16, r18
    1a78:	3f 70       	andi	r19, 0x0F	; 15
    1a7a:	30 6b       	ori	r19, 0xB0	; 176
    1a7c:	5f 77       	andi	r21, 0x7F	; 127
    1a7e:	0f 77       	andi	r16, 0x7F	; 127
    1a80:	dc 01       	movw	r26, r24
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    1a86:	63 e0       	ldi	r22, 0x03	; 3
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	43 2f       	mov	r20, r19
    1a8c:	25 2f       	mov	r18, r21
    1a8e:	09 95       	icall
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <midi_send_noteon>:
    1a94:	0f 93       	push	r16
    1a96:	36 2f       	mov	r19, r22
    1a98:	54 2f       	mov	r21, r20
    1a9a:	02 2f       	mov	r16, r18
    1a9c:	3f 70       	andi	r19, 0x0F	; 15
    1a9e:	30 69       	ori	r19, 0x90	; 144
    1aa0:	5f 77       	andi	r21, 0x7F	; 127
    1aa2:	0f 77       	andi	r16, 0x7F	; 127
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	ed 91       	ld	r30, X+
    1aa8:	fc 91       	ld	r31, X
    1aaa:	63 e0       	ldi	r22, 0x03	; 3
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	43 2f       	mov	r20, r19
    1ab0:	25 2f       	mov	r18, r21
    1ab2:	09 95       	icall
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <midi_send_noteoff>:
    1ab8:	0f 93       	push	r16
    1aba:	36 2f       	mov	r19, r22
    1abc:	54 2f       	mov	r21, r20
    1abe:	02 2f       	mov	r16, r18
    1ac0:	3f 70       	andi	r19, 0x0F	; 15
    1ac2:	30 68       	ori	r19, 0x80	; 128
    1ac4:	5f 77       	andi	r21, 0x7F	; 127
    1ac6:	0f 77       	andi	r16, 0x7F	; 127
    1ac8:	dc 01       	movw	r26, r24
    1aca:	ed 91       	ld	r30, X+
    1acc:	fc 91       	ld	r31, X
    1ace:	63 e0       	ldi	r22, 0x03	; 3
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	43 2f       	mov	r20, r19
    1ad4:	25 2f       	mov	r18, r21
    1ad6:	09 95       	icall
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <midi_send_aftertouch>:
    1adc:	0f 93       	push	r16
    1ade:	36 2f       	mov	r19, r22
    1ae0:	54 2f       	mov	r21, r20
    1ae2:	02 2f       	mov	r16, r18
    1ae4:	3f 70       	andi	r19, 0x0F	; 15
    1ae6:	30 6a       	ori	r19, 0xA0	; 160
    1ae8:	5f 77       	andi	r21, 0x7F	; 127
    1aea:	0f 77       	andi	r16, 0x7F	; 127
    1aec:	dc 01       	movw	r26, r24
    1aee:	ed 91       	ld	r30, X+
    1af0:	fc 91       	ld	r31, X
    1af2:	63 e0       	ldi	r22, 0x03	; 3
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	43 2f       	mov	r20, r19
    1af8:	25 2f       	mov	r18, r21
    1afa:	09 95       	icall
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <midi_send_pitchbend>:
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	8a 01       	movw	r16, r20
    1b06:	20 e2       	ldi	r18, 0x20	; 32
    1b08:	40 30       	cpi	r20, 0x00	; 0
    1b0a:	52 07       	cpc	r21, r18
    1b0c:	3c f4       	brge	.+14     	; 0x1b1c <midi_send_pitchbend+0x1c>
    1b0e:	a0 ee       	ldi	r26, 0xE0	; 224
    1b10:	40 30       	cpi	r20, 0x00	; 0
    1b12:	5a 07       	cpc	r21, r26
    1b14:	34 f0       	brlt	.+12     	; 0x1b22 <midi_send_pitchbend+0x22>
    1b16:	00 50       	subi	r16, 0x00	; 0
    1b18:	10 4e       	sbci	r17, 0xE0	; 224
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <midi_send_pitchbend+0x26>
    1b1c:	0f ef       	ldi	r16, 0xFF	; 255
    1b1e:	1f e3       	ldi	r17, 0x3F	; 63
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <midi_send_pitchbend+0x26>
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	46 2f       	mov	r20, r22
    1b28:	4f 70       	andi	r20, 0x0F	; 15
    1b2a:	40 6e       	ori	r20, 0xE0	; 224
    1b2c:	20 2f       	mov	r18, r16
    1b2e:	2f 77       	andi	r18, 0x7F	; 127
    1b30:	00 0f       	add	r16, r16
    1b32:	01 2f       	mov	r16, r17
    1b34:	00 1f       	adc	r16, r16
    1b36:	11 0b       	sbc	r17, r17
    1b38:	11 95       	neg	r17
    1b3a:	0f 77       	andi	r16, 0x7F	; 127
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	ed 91       	ld	r30, X+
    1b40:	fc 91       	ld	r31, X
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	09 95       	icall
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <midi_send_programchange>:
    1b4e:	0f 93       	push	r16
    1b50:	36 2f       	mov	r19, r22
    1b52:	24 2f       	mov	r18, r20
    1b54:	3f 70       	andi	r19, 0x0F	; 15
    1b56:	30 6c       	ori	r19, 0xC0	; 192
    1b58:	2f 77       	andi	r18, 0x7F	; 127
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	43 2f       	mov	r20, r19
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	09 95       	icall
    1b6a:	0f 91       	pop	r16
    1b6c:	08 95       	ret

00001b6e <midi_send_channelpressure>:
    1b6e:	0f 93       	push	r16
    1b70:	36 2f       	mov	r19, r22
    1b72:	24 2f       	mov	r18, r20
    1b74:	3f 70       	andi	r19, 0x0F	; 15
    1b76:	30 6d       	ori	r19, 0xD0	; 208
    1b78:	2f 77       	andi	r18, 0x7F	; 127
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	ed 91       	ld	r30, X+
    1b7e:	fc 91       	ld	r31, X
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	43 2f       	mov	r20, r19
    1b86:	00 e0       	ldi	r16, 0x00	; 0
    1b88:	09 95       	icall
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <midi_send_clock>:
    1b8e:	0f 93       	push	r16
    1b90:	dc 01       	movw	r26, r24
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	48 ef       	ldi	r20, 0xF8	; 248
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	00 e0       	ldi	r16, 0x00	; 0
    1ba0:	09 95       	icall
    1ba2:	0f 91       	pop	r16
    1ba4:	08 95       	ret

00001ba6 <midi_send_tick>:
    1ba6:	0f 93       	push	r16
    1ba8:	dc 01       	movw	r26, r24
    1baa:	ed 91       	ld	r30, X+
    1bac:	fc 91       	ld	r31, X
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	49 ef       	ldi	r20, 0xF9	; 249
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	09 95       	icall
    1bba:	0f 91       	pop	r16
    1bbc:	08 95       	ret

00001bbe <midi_send_start>:
    1bbe:	0f 93       	push	r16
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	ed 91       	ld	r30, X+
    1bc4:	fc 91       	ld	r31, X
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	00 e0       	ldi	r16, 0x00	; 0
    1bd0:	09 95       	icall
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <midi_send_continue>:
    1bd6:	0f 93       	push	r16
    1bd8:	dc 01       	movw	r26, r24
    1bda:	ed 91       	ld	r30, X+
    1bdc:	fc 91       	ld	r31, X
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	4b ef       	ldi	r20, 0xFB	; 251
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	00 e0       	ldi	r16, 0x00	; 0
    1be8:	09 95       	icall
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

00001bee <midi_send_stop>:
    1bee:	0f 93       	push	r16
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	ed 91       	ld	r30, X+
    1bf4:	fc 91       	ld	r31, X
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	4c ef       	ldi	r20, 0xFC	; 252
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	09 95       	icall
    1c02:	0f 91       	pop	r16
    1c04:	08 95       	ret

00001c06 <midi_send_activesense>:
    1c06:	0f 93       	push	r16
    1c08:	dc 01       	movw	r26, r24
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	4e ef       	ldi	r20, 0xFE	; 254
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	09 95       	icall
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <midi_send_reset>:
    1c1e:	0f 93       	push	r16
    1c20:	dc 01       	movw	r26, r24
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	4f ef       	ldi	r20, 0xFF	; 255
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	09 95       	icall
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <midi_send_tcquarterframe>:
    1c36:	0f 93       	push	r16
    1c38:	26 2f       	mov	r18, r22
    1c3a:	2f 77       	andi	r18, 0x7F	; 127
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	41 ef       	ldi	r20, 0xF1	; 241
    1c48:	00 e0       	ldi	r16, 0x00	; 0
    1c4a:	09 95       	icall
    1c4c:	0f 91       	pop	r16
    1c4e:	08 95       	ret

00001c50 <midi_send_songposition>:
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	26 2f       	mov	r18, r22
    1c56:	2f 77       	andi	r18, 0x7F	; 127
    1c58:	8b 01       	movw	r16, r22
    1c5a:	00 0f       	add	r16, r16
    1c5c:	01 2f       	mov	r16, r17
    1c5e:	00 1f       	adc	r16, r16
    1c60:	11 0b       	sbc	r17, r17
    1c62:	11 95       	neg	r17
    1c64:	0f 77       	andi	r16, 0x7F	; 127
    1c66:	dc 01       	movw	r26, r24
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	63 e0       	ldi	r22, 0x03	; 3
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	42 ef       	ldi	r20, 0xF2	; 242
    1c72:	09 95       	icall
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <midi_send_songselect>:
    1c7a:	0f 93       	push	r16
    1c7c:	26 2f       	mov	r18, r22
    1c7e:	2f 77       	andi	r18, 0x7F	; 127
    1c80:	dc 01       	movw	r26, r24
    1c82:	ed 91       	ld	r30, X+
    1c84:	fc 91       	ld	r31, X
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	43 ef       	ldi	r20, 0xF3	; 243
    1c8c:	00 e0       	ldi	r16, 0x00	; 0
    1c8e:	09 95       	icall
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <midi_send_tunerequest>:
    1c94:	0f 93       	push	r16
    1c96:	dc 01       	movw	r26, r24
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	46 ef       	ldi	r20, 0xF6	; 246
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	00 e0       	ldi	r16, 0x00	; 0
    1ca6:	09 95       	icall
    1ca8:	0f 91       	pop	r16
    1caa:	08 95       	ret

00001cac <midi_send_byte>:
    1cac:	0f 93       	push	r16
    1cae:	46 2f       	mov	r20, r22
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	fc 91       	ld	r31, X
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	00 e0       	ldi	r16, 0x00	; 0
    1cbe:	09 95       	icall
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <midi_send_data>:
    1cc4:	0f 93       	push	r16
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	09 95       	icall
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <midi_register_cc_callback>:
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	62 83       	std	Z+2, r22	; 0x02
    1cd6:	73 83       	std	Z+3, r23	; 0x03
    1cd8:	08 95       	ret

00001cda <midi_register_noteon_callback>:
    1cda:	fc 01       	movw	r30, r24
    1cdc:	64 83       	std	Z+4, r22	; 0x04
    1cde:	75 83       	std	Z+5, r23	; 0x05
    1ce0:	08 95       	ret

00001ce2 <midi_register_noteoff_callback>:
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	66 83       	std	Z+6, r22	; 0x06
    1ce6:	77 83       	std	Z+7, r23	; 0x07
    1ce8:	08 95       	ret

00001cea <midi_register_aftertouch_callback>:
    1cea:	fc 01       	movw	r30, r24
    1cec:	60 87       	std	Z+8, r22	; 0x08
    1cee:	71 87       	std	Z+9, r23	; 0x09
    1cf0:	08 95       	ret

00001cf2 <midi_register_pitchbend_callback>:
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	62 87       	std	Z+10, r22	; 0x0a
    1cf6:	73 87       	std	Z+11, r23	; 0x0b
    1cf8:	08 95       	ret

00001cfa <midi_register_songposition_callback>:
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	64 87       	std	Z+12, r22	; 0x0c
    1cfe:	75 87       	std	Z+13, r23	; 0x0d
    1d00:	08 95       	ret

00001d02 <midi_register_progchange_callback>:
    1d02:	fc 01       	movw	r30, r24
    1d04:	66 87       	std	Z+14, r22	; 0x0e
    1d06:	77 87       	std	Z+15, r23	; 0x0f
    1d08:	08 95       	ret

00001d0a <midi_register_chanpressure_callback>:
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	60 8b       	std	Z+16, r22	; 0x10
    1d0e:	71 8b       	std	Z+17, r23	; 0x11
    1d10:	08 95       	ret

00001d12 <midi_register_songselect_callback>:
    1d12:	fc 01       	movw	r30, r24
    1d14:	62 8b       	std	Z+18, r22	; 0x12
    1d16:	73 8b       	std	Z+19, r23	; 0x13
    1d18:	08 95       	ret

00001d1a <midi_register_tc_quarterframe_callback>:
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	64 8b       	std	Z+20, r22	; 0x14
    1d1e:	75 8b       	std	Z+21, r23	; 0x15
    1d20:	08 95       	ret

00001d22 <midi_register_realtime_callback>:
    1d22:	fc 01       	movw	r30, r24
    1d24:	66 8b       	std	Z+22, r22	; 0x16
    1d26:	77 8b       	std	Z+23, r23	; 0x17
    1d28:	08 95       	ret

00001d2a <midi_register_tunerequest_callback>:
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	60 8f       	std	Z+24, r22	; 0x18
    1d2e:	71 8f       	std	Z+25, r23	; 0x19
    1d30:	08 95       	ret

00001d32 <midi_register_sysex_callback>:
    1d32:	fc 01       	movw	r30, r24
    1d34:	62 8f       	std	Z+26, r22	; 0x1a
    1d36:	73 8f       	std	Z+27, r23	; 0x1b
    1d38:	08 95       	ret

00001d3a <midi_register_fallthrough_callback>:
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	64 8f       	std	Z+28, r22	; 0x1c
    1d3e:	75 8f       	std	Z+29, r23	; 0x1d
    1d40:	08 95       	ret

00001d42 <midi_register_catchall_callback>:
    1d42:	fc 01       	movw	r30, r24
    1d44:	66 8f       	std	Z+30, r22	; 0x1e
    1d46:	77 8f       	std	Z+31, r23	; 0x1f
    1d48:	08 95       	ret

00001d4a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1d50:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1d52:	1e a2       	std	Y+38, r1	; 0x26
    1d54:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1d56:	bc 01       	movw	r22, r24
    1d58:	68 5d       	subi	r22, 0xD8	; 216
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	88 51       	subi	r24, 0x18	; 24
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	40 ec       	ldi	r20, 0xC0	; 192
    1d62:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1d66:	1a 82       	std	Y+2, r1	; 0x02
    1d68:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1d6a:	1c 82       	std	Y+4, r1	; 0x04
    1d6c:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1d6e:	1e 82       	std	Y+6, r1	; 0x06
    1d70:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1d72:	18 86       	std	Y+8, r1	; 0x08
    1d74:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1d76:	1a 86       	std	Y+10, r1	; 0x0a
    1d78:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1d7a:	1c 86       	std	Y+12, r1	; 0x0c
    1d7c:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1d7e:	1e 86       	std	Y+14, r1	; 0x0e
    1d80:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1d82:	18 8a       	std	Y+16, r1	; 0x10
    1d84:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1d86:	1a 8a       	std	Y+18, r1	; 0x12
    1d88:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1d8a:	1c 8a       	std	Y+20, r1	; 0x14
    1d8c:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1d8e:	1e 8a       	std	Y+22, r1	; 0x16
    1d90:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1d92:	18 8e       	std	Y+24, r1	; 0x18
    1d94:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1d96:	1a 8e       	std	Y+26, r1	; 0x1a
    1d98:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1d9a:	1c 8e       	std	Y+28, r1	; 0x1c
    1d9c:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1d9e:	1e 8e       	std	Y+30, r1	; 0x1e
    1da0:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1da2:	18 a2       	std	Y+32, r1	; 0x20
    1da4:	19 a2       	std	Y+33, r1	; 0x21
}
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1dc2:	e4 2f       	mov	r30, r20
    1dc4:	f5 2f       	mov	r31, r21
    1dc6:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1dc8:	8c 01       	movw	r16, r24
    1dca:	08 51       	subi	r16, 0x18	; 24
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	61 91       	ld	r22, Z+
    1dd4:	6f 01       	movw	r12, r30
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	49 83       	std	Y+1, r20	; 0x01
    1dda:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <bytequeue_enqueue>
    1dde:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1de0:	8c 2d       	mov	r24, r12
    1de2:	84 1b       	sub	r24, r20
    1de4:	8f 15       	cp	r24, r15
    1de6:	a0 f3       	brcs	.-24     	; 0x1dd0 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	08 95       	ret

00001dfa <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	60 83       	st	Z, r22
    1dfe:	71 83       	std	Z+1, r23	; 0x01
}
    1e00:	08 95       	ret

00001e02 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1e02:	fc 01       	movw	r30, r24
    1e04:	60 a3       	std	Z+32, r22	; 0x20
    1e06:	71 a3       	std	Z+33, r23	; 0x21
}
    1e08:	08 95       	ret

00001e0a <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	ec 01       	movw	r28, r24
    1e1c:	6b 01       	movw	r12, r22
    1e1e:	14 2f       	mov	r17, r20
    1e20:	e2 2e       	mov	r14, r18
    1e22:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	31 f4       	brne	.+12     	; 0x1e36 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1e2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e2c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e2e:	30 97       	sbiw	r30, 0x00	; 0
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <midi_input_callbacks+0x2a>
    1e32:	83 c0       	rjmp	.+262    	; 0x1f3a <midi_input_callbacks+0x130>
    1e34:	95 c0       	rjmp	.+298    	; 0x1f60 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1e36:	62 30       	cpi	r22, 0x02	; 2
    1e38:	71 05       	cpc	r23, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <midi_input_callbacks+0x34>
    1e3c:	42 c0       	rjmp	.+132    	; 0x1ec2 <midi_input_callbacks+0xb8>
    1e3e:	63 30       	cpi	r22, 0x03	; 3
    1e40:	71 05       	cpc	r23, r1
    1e42:	29 f0       	breq	.+10     	; 0x1e4e <midi_input_callbacks+0x44>
    1e44:	61 30       	cpi	r22, 0x01	; 1
    1e46:	71 05       	cpc	r23, r1
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <midi_input_callbacks+0x42>
    1e4a:	73 c0       	rjmp	.+230    	; 0x1f32 <midi_input_callbacks+0x128>
    1e4c:	60 c0       	rjmp	.+192    	; 0x1f0e <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1e4e:	84 2f       	mov	r24, r20
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	80 7f       	andi	r24, 0xF0	; 240
    1e54:	90 70       	andi	r25, 0x00	; 0
    1e56:	80 3a       	cpi	r24, 0xA0	; 160
    1e58:	91 05       	cpc	r25, r1
    1e5a:	e1 f0       	breq	.+56     	; 0x1e94 <midi_input_callbacks+0x8a>
    1e5c:	81 3a       	cpi	r24, 0xA1	; 161
    1e5e:	91 05       	cpc	r25, r1
    1e60:	3c f4       	brge	.+14     	; 0x1e70 <midi_input_callbacks+0x66>
    1e62:	80 38       	cpi	r24, 0x80	; 128
    1e64:	91 05       	cpc	r25, r1
    1e66:	99 f0       	breq	.+38     	; 0x1e8e <midi_input_callbacks+0x84>
    1e68:	80 39       	cpi	r24, 0x90	; 144
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	f9 f4       	brne	.+62     	; 0x1eac <midi_input_callbacks+0xa2>
    1e6e:	0c c0       	rjmp	.+24     	; 0x1e88 <midi_input_callbacks+0x7e>
    1e70:	80 3e       	cpi	r24, 0xE0	; 224
    1e72:	91 05       	cpc	r25, r1
    1e74:	91 f0       	breq	.+36     	; 0x1e9a <midi_input_callbacks+0x90>
    1e76:	80 3f       	cpi	r24, 0xF0	; 240
    1e78:	91 05       	cpc	r25, r1
    1e7a:	91 f0       	breq	.+36     	; 0x1ea0 <midi_input_callbacks+0x96>
    1e7c:	80 3b       	cpi	r24, 0xB0	; 176
    1e7e:	91 05       	cpc	r25, r1
    1e80:	a9 f4       	brne	.+42     	; 0x1eac <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1e82:	ea 81       	ldd	r30, Y+2	; 0x02
    1e84:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1e8c:	11 c0       	rjmp	.+34     	; 0x1eb0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1e8e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e90:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1e94:	e8 85       	ldd	r30, Y+8	; 0x08
    1e96:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1e98:	0b c0       	rjmp	.+22     	; 0x1eb0 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1e9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e9c:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1ea0:	42 3f       	cpi	r20, 0xF2	; 242
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <midi_input_callbacks+0x9c>
    1ea4:	5d c0       	rjmp	.+186    	; 0x1f60 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1ea6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ea8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1eac:	e0 e0       	ldi	r30, 0x00	; 0
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <midi_input_callbacks+0xac>
    1eb4:	55 c0       	rjmp	.+170    	; 0x1f60 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	61 2f       	mov	r22, r17
    1eba:	4e 2d       	mov	r20, r14
    1ebc:	2f 2d       	mov	r18, r15
    1ebe:	09 95       	icall
    1ec0:	42 c0       	rjmp	.+132    	; 0x1f46 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1ec2:	84 2f       	mov	r24, r20
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	80 7f       	andi	r24, 0xF0	; 240
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	80 3d       	cpi	r24, 0xD0	; 208
    1ecc:	91 05       	cpc	r25, r1
    1ece:	49 f0       	breq	.+18     	; 0x1ee2 <midi_input_callbacks+0xd8>
    1ed0:	80 3f       	cpi	r24, 0xF0	; 240
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	49 f0       	breq	.+18     	; 0x1ee8 <midi_input_callbacks+0xde>
    1ed6:	80 3c       	cpi	r24, 0xC0	; 192
    1ed8:	91 05       	cpc	r25, r1
    1eda:	81 f4       	brne	.+32     	; 0x1efc <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1edc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ede:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1ee2:	e8 89       	ldd	r30, Y+16	; 0x10
    1ee4:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1ee8:	43 3f       	cpi	r20, 0xF3	; 243
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1eec:	ea 89       	ldd	r30, Y+18	; 0x12
    1eee:	fb 89       	ldd	r31, Y+19	; 0x13
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1ef2:	41 3f       	cpi	r20, 0xF1	; 241
    1ef4:	a9 f5       	brne	.+106    	; 0x1f60 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1ef6:	ec 89       	ldd	r30, Y+20	; 0x14
    1ef8:	fd 89       	ldd	r31, Y+21	; 0x15
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1efc:	e0 e0       	ldi	r30, 0x00	; 0
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1f00:	30 97       	sbiw	r30, 0x00	; 0
    1f02:	71 f1       	breq	.+92     	; 0x1f60 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1f04:	ce 01       	movw	r24, r28
    1f06:	61 2f       	mov	r22, r17
    1f08:	4e 2d       	mov	r20, r14
    1f0a:	09 95       	icall
    1f0c:	1c c0       	rjmp	.+56     	; 0x1f46 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1f0e:	84 2f       	mov	r24, r20
    1f10:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <midi_is_realtime>
    1f14:	88 23       	and	r24, r24
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1f18:	ee 89       	ldd	r30, Y+22	; 0x16
    1f1a:	ff 89       	ldd	r31, Y+23	; 0x17
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1f1e:	16 3f       	cpi	r17, 0xF6	; 246
    1f20:	f9 f4       	brne	.+62     	; 0x1f60 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1f22:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f24:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1f26:	30 97       	sbiw	r30, 0x00	; 0
    1f28:	d9 f0       	breq	.+54     	; 0x1f60 <midi_input_callbacks+0x156>
                  func(device, byte0);
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	61 2f       	mov	r22, r17
    1f2e:	09 95       	icall
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1f32:	64 30       	cpi	r22, 0x04	; 4
    1f34:	71 05       	cpc	r23, r1
    1f36:	90 f4       	brcc	.+36     	; 0x1f5c <midi_input_callbacks+0x152>
    1f38:	13 c0       	rjmp	.+38     	; 0x1f60 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	41 2f       	mov	r20, r17
    1f40:	2e 2d       	mov	r18, r14
    1f42:	0f 2d       	mov	r16, r15
    1f44:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1f46:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f48:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	71 f0       	breq	.+28     	; 0x1f6a <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1f4e:	ce 01       	movw	r24, r28
    1f50:	b6 01       	movw	r22, r12
    1f52:	41 2f       	mov	r20, r17
    1f54:	2e 2d       	mov	r18, r14
    1f56:	0f 2d       	mov	r16, r15
    1f58:	09 95       	icall
    1f5a:	07 c0       	rjmp	.+14     	; 0x1f6a <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1f5c:	cc 24       	eor	r12, r12
    1f5e:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1f60:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1f62:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	49 f7       	brne	.-46     	; 0x1f3a <midi_input_callbacks+0x130>
    1f68:	ee cf       	rjmp	.-36     	; 0x1f46 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	08 95       	ret

00001f7c <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	ec 01       	movw	r28, r24
    1f8a:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1f8c:	86 2f       	mov	r24, r22
    1f8e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <midi_is_realtime>
    1f92:	88 23       	and	r24, r24
    1f94:	69 f0       	breq	.+26     	; 0x1fb0 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1f96:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	41 2f       	mov	r20, r17
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	00 e0       	ldi	r16, 0x00	; 0
    1fa8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <midi_input_callbacks>
      device->input_state = state;
    1fac:	ed a2       	std	Y+37, r14	; 0x25
    1fae:	7e c0       	rjmp	.+252    	; 0x20ac <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1fb0:	81 2f       	mov	r24, r17
    1fb2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <midi_is_statusbyte>
    1fb6:	4d a1       	ldd	r20, Y+37	; 0x25
    1fb8:	88 23       	and	r24, r24
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <midi_process_byte+0x42>
    1fbc:	42 c0       	rjmp	.+132    	; 0x2042 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1fbe:	44 30       	cpi	r20, 0x04	; 4
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1fc2:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	8e a3       	std	Y+38, r24	; 0x26
    1fca:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1fcc:	81 2f       	mov	r24, r17
    1fce:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <midi_packet_length>
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	39 f0       	breq	.+14     	; 0x1fe4 <midi_process_byte+0x68>
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	78 f0       	brcs	.+30     	; 0x1ff8 <midi_process_byte+0x7c>
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	59 f0       	breq	.+22     	; 0x1ff4 <midi_process_byte+0x78>
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	61 f5       	brne	.+88     	; 0x203a <midi_process_byte+0xbe>
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1fe4:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	41 2f       	mov	r20, r17
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	00 e0       	ldi	r16, 0x00	; 0
    1ff2:	1f c0       	rjmp	.+62     	; 0x2032 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1ff4:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1ff6:	5a c0       	rjmp	.+180    	; 0x20ac <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1ff8:	10 3f       	cpi	r17, 0xF0	; 240
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <midi_process_byte+0x86>
    1ffc:	17 3f       	cpi	r17, 0xF7	; 247
    1ffe:	e9 f4       	brne	.+58     	; 0x203a <midi_process_byte+0xbe>
    2000:	04 c0       	rjmp	.+8      	; 0x200a <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    2002:	84 e0       	ldi	r24, 0x04	; 4
    2004:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    2006:	1a a3       	std	Y+34, r17	; 0x22
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    200a:	2e a1       	ldd	r18, Y+38	; 0x26
    200c:	3f a1       	ldd	r19, Y+39	; 0x27
    200e:	c9 01       	movw	r24, r18
    2010:	63 e0       	ldi	r22, 0x03	; 3
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodhi4>
    2018:	8c 0f       	add	r24, r28
    201a:	9d 1f       	adc	r25, r29
    201c:	fc 01       	movw	r30, r24
    201e:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    2020:	b9 01       	movw	r22, r18
    2022:	6f 5f       	subi	r22, 0xFF	; 255
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	6e a3       	std	Y+38, r22	; 0x26
    2028:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    202a:	ce 01       	movw	r24, r28
    202c:	4a a1       	ldd	r20, Y+34	; 0x22
    202e:	2b a1       	ldd	r18, Y+35	; 0x23
    2030:	0c a1       	ldd	r16, Y+36	; 0x24
    2032:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    2036:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    2038:	39 c0       	rjmp	.+114    	; 0x20ac <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    203a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    203c:	1e a2       	std	Y+38, r1	; 0x26
    203e:	1f a2       	std	Y+39, r1	; 0x27
            break;
    2040:	35 c0       	rjmp	.+106    	; 0x20ac <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    2042:	44 23       	and	r20, r20
    2044:	99 f1       	breq	.+102    	; 0x20ac <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    2046:	2e a1       	ldd	r18, Y+38	; 0x26
    2048:	3f a1       	ldd	r19, Y+39	; 0x27
    204a:	c9 01       	movw	r24, r18
    204c:	63 e0       	ldi	r22, 0x03	; 3
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodhi4>
    2054:	7c 01       	movw	r14, r24
    2056:	fe 01       	movw	r30, r28
    2058:	e8 0f       	add	r30, r24
    205a:	f9 1f       	adc	r31, r25
    205c:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    205e:	b9 01       	movw	r22, r18
    2060:	6f 5f       	subi	r22, 0xFF	; 255
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	6e a3       	std	Y+38, r22	; 0x26
    2066:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	91 f0       	breq	.+36     	; 0x2092 <midi_process_byte+0x116>
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	e8 16       	cp	r14, r24
    2072:	f1 04       	cpc	r15, r1
    2074:	d9 f4       	brne	.+54     	; 0x20ac <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    2076:	ce 01       	movw	r24, r28
    2078:	4a a1       	ldd	r20, Y+34	; 0x22
    207a:	2b a1       	ldd	r18, Y+35	; 0x23
    207c:	0c a1       	ldd	r16, Y+36	; 0x24
    207e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	84 30       	cpi	r24, 0x04	; 4
    2086:	91 f0       	breq	.+36     	; 0x20ac <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	8e a3       	std	Y+38, r24	; 0x26
    208e:	9f a3       	std	Y+39, r25	; 0x27
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    2092:	42 30       	cpi	r20, 0x02	; 2
    2094:	59 f4       	brne	.+22     	; 0x20ac <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    2096:	ce 01       	movw	r24, r28
    2098:	4a a1       	ldd	r20, Y+34	; 0x22
    209a:	2b a1       	ldd	r18, Y+35	; 0x23
    209c:	00 e0       	ldi	r16, 0x00	; 0
    209e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	11 f0       	breq	.+4      	; 0x20ac <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    20a8:	ee a2       	std	Y+38, r14	; 0x26
    20aa:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	08 95       	ret

000020ba <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    20cc:	e8 a1       	ldd	r30, Y+32	; 0x20
    20ce:	f9 a1       	ldd	r31, Y+33	; 0x21
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    20d4:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    20d6:	8e 01       	movw	r16, r28
    20d8:	08 51       	subi	r16, 0x18	; 24
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	c8 01       	movw	r24, r16
    20de:	0e 94 ae 0c 	call	0x195c	; 0x195c <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    20e2:	ee 24       	eor	r14, r14
    20e4:	ff 24       	eor	r15, r15
    20e6:	c8 2e       	mov	r12, r24
    20e8:	dd 24       	eor	r13, r13
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    20ec:	c8 01       	movw	r24, r16
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <bytequeue_get>
    20f4:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    20f6:	ce 01       	movw	r24, r28
    20f8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    20fc:	c8 01       	movw	r24, r16
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    2104:	08 94       	sec
    2106:	e1 1c       	adc	r14, r1
    2108:	f1 1c       	adc	r15, r1
    210a:	ec 14       	cp	r14, r12
    210c:	fd 04       	cpc	r15, r13
    210e:	70 f3       	brcs	.-36     	; 0x20ec <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	08 95       	ret

00002122 <__fixunssfsi>:
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	7b 01       	movw	r14, r22
    212c:	8c 01       	movw	r16, r24
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	5f e4       	ldi	r21, 0x4F	; 79
    2136:	0e 94 3d 14 	call	0x287a	; 0x287a <__gesf2>
    213a:	87 fd       	sbrc	r24, 7
    213c:	11 c0       	rjmp	.+34     	; 0x2160 <__fixunssfsi+0x3e>
    213e:	c8 01       	movw	r24, r16
    2140:	b7 01       	movw	r22, r14
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	5f e4       	ldi	r21, 0x4F	; 79
    214a:	0e 94 34 12 	call	0x2468	; 0x2468 <__subsf3>
    214e:	0e 94 9d 14 	call	0x293a	; 0x293a <__fixsfsi>
    2152:	9b 01       	movw	r18, r22
    2154:	ac 01       	movw	r20, r24
    2156:	20 50       	subi	r18, 0x00	; 0
    2158:	30 40       	sbci	r19, 0x00	; 0
    215a:	40 40       	sbci	r20, 0x00	; 0
    215c:	50 48       	sbci	r21, 0x80	; 128
    215e:	06 c0       	rjmp	.+12     	; 0x216c <__fixunssfsi+0x4a>
    2160:	c8 01       	movw	r24, r16
    2162:	b7 01       	movw	r22, r14
    2164:	0e 94 9d 14 	call	0x293a	; 0x293a <__fixsfsi>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	b9 01       	movw	r22, r18
    216e:	ca 01       	movw	r24, r20
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	08 95       	ret

0000217a <_fpadd_parts>:
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e3 ec       	ldi	r30, 0xC3	; 195
    2180:	f0 e1       	ldi	r31, 0x10	; 16
    2182:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x8>
    2186:	fc 01       	movw	r30, r24
    2188:	ea 01       	movw	r28, r20
    218a:	80 81       	ld	r24, Z
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	08 f4       	brcc	.+2      	; 0x2192 <_fpadd_parts+0x18>
    2190:	38 c1       	rjmp	.+624    	; 0x2402 <_fpadd_parts+0x288>
    2192:	db 01       	movw	r26, r22
    2194:	9c 91       	ld	r25, X
    2196:	92 30       	cpi	r25, 0x02	; 2
    2198:	08 f4       	brcc	.+2      	; 0x219c <_fpadd_parts+0x22>
    219a:	30 c1       	rjmp	.+608    	; 0x23fc <_fpadd_parts+0x282>
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	59 f4       	brne	.+22     	; 0x21b6 <_fpadd_parts+0x3c>
    21a0:	94 30       	cpi	r25, 0x04	; 4
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <_fpadd_parts+0x2c>
    21a4:	2e c1       	rjmp	.+604    	; 0x2402 <_fpadd_parts+0x288>
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	8c 91       	ld	r24, X
    21ac:	11 97       	sbiw	r26, 0x01	; 1
    21ae:	98 17       	cp	r25, r24
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <_fpadd_parts+0x3a>
    21b2:	21 c1       	rjmp	.+578    	; 0x23f6 <_fpadd_parts+0x27c>
    21b4:	26 c1       	rjmp	.+588    	; 0x2402 <_fpadd_parts+0x288>
    21b6:	94 30       	cpi	r25, 0x04	; 4
    21b8:	09 f4       	brne	.+2      	; 0x21bc <_fpadd_parts+0x42>
    21ba:	20 c1       	rjmp	.+576    	; 0x23fc <_fpadd_parts+0x282>
    21bc:	92 30       	cpi	r25, 0x02	; 2
    21be:	b1 f4       	brne	.+44     	; 0x21ec <_fpadd_parts+0x72>
    21c0:	82 30       	cpi	r24, 0x02	; 2
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <_fpadd_parts+0x4c>
    21c4:	1e c1       	rjmp	.+572    	; 0x2402 <_fpadd_parts+0x288>
    21c6:	ca 01       	movw	r24, r20
    21c8:	af 01       	movw	r20, r30
    21ca:	28 e0       	ldi	r18, 0x08	; 8
    21cc:	da 01       	movw	r26, r20
    21ce:	0d 90       	ld	r0, X+
    21d0:	ad 01       	movw	r20, r26
    21d2:	dc 01       	movw	r26, r24
    21d4:	0d 92       	st	X+, r0
    21d6:	cd 01       	movw	r24, r26
    21d8:	21 50       	subi	r18, 0x01	; 1
    21da:	c1 f7       	brne	.-16     	; 0x21cc <_fpadd_parts+0x52>
    21dc:	db 01       	movw	r26, r22
    21de:	11 96       	adiw	r26, 0x01	; 1
    21e0:	8c 91       	ld	r24, X
    21e2:	11 97       	sbiw	r26, 0x01	; 1
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	89 23       	and	r24, r25
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	0a c1       	rjmp	.+532    	; 0x2400 <_fpadd_parts+0x286>
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <_fpadd_parts+0x78>
    21f0:	05 c1       	rjmp	.+522    	; 0x23fc <_fpadd_parts+0x282>
    21f2:	c2 80       	ldd	r12, Z+2	; 0x02
    21f4:	d3 80       	ldd	r13, Z+3	; 0x03
    21f6:	db 01       	movw	r26, r22
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	6d 90       	ld	r6, X+
    21fc:	7c 90       	ld	r7, X
    21fe:	13 97       	sbiw	r26, 0x03	; 3
    2200:	24 81       	ldd	r18, Z+4	; 0x04
    2202:	35 81       	ldd	r19, Z+5	; 0x05
    2204:	46 81       	ldd	r20, Z+6	; 0x06
    2206:	57 81       	ldd	r21, Z+7	; 0x07
    2208:	14 96       	adiw	r26, 0x04	; 4
    220a:	ed 90       	ld	r14, X+
    220c:	fd 90       	ld	r15, X+
    220e:	0d 91       	ld	r16, X+
    2210:	1c 91       	ld	r17, X
    2212:	17 97       	sbiw	r26, 0x07	; 7
    2214:	c6 01       	movw	r24, r12
    2216:	86 19       	sub	r24, r6
    2218:	97 09       	sbc	r25, r7
    221a:	5c 01       	movw	r10, r24
    221c:	97 ff       	sbrs	r25, 7
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <_fpadd_parts+0xae>
    2220:	aa 24       	eor	r10, r10
    2222:	bb 24       	eor	r11, r11
    2224:	a8 1a       	sub	r10, r24
    2226:	b9 0a       	sbc	r11, r25
    2228:	b0 e2       	ldi	r27, 0x20	; 32
    222a:	ab 16       	cp	r10, r27
    222c:	b1 04       	cpc	r11, r1
    222e:	0c f0       	brlt	.+2      	; 0x2232 <_fpadd_parts+0xb8>
    2230:	61 c0       	rjmp	.+194    	; 0x22f4 <_fpadd_parts+0x17a>
    2232:	18 16       	cp	r1, r24
    2234:	19 06       	cpc	r1, r25
    2236:	6c f5       	brge	.+90     	; 0x2292 <_fpadd_parts+0x118>
    2238:	37 01       	movw	r6, r14
    223a:	48 01       	movw	r8, r16
    223c:	0a 2c       	mov	r0, r10
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <_fpadd_parts+0xce>
    2240:	96 94       	lsr	r9
    2242:	87 94       	ror	r8
    2244:	77 94       	ror	r7
    2246:	67 94       	ror	r6
    2248:	0a 94       	dec	r0
    224a:	d2 f7       	brpl	.-12     	; 0x2240 <_fpadd_parts+0xc6>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e0       	ldi	r26, 0x00	; 0
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	0a 2c       	mov	r0, r10
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <_fpadd_parts+0xe6>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	0a 94       	dec	r0
    2262:	d2 f7       	brpl	.-12     	; 0x2258 <_fpadd_parts+0xde>
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	a1 09       	sbc	r26, r1
    2268:	b1 09       	sbc	r27, r1
    226a:	8e 21       	and	r24, r14
    226c:	9f 21       	and	r25, r15
    226e:	a0 23       	and	r26, r16
    2270:	b1 23       	and	r27, r17
    2272:	ee 24       	eor	r14, r14
    2274:	ff 24       	eor	r15, r15
    2276:	87 01       	movw	r16, r14
    2278:	e3 94       	inc	r14
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	a1 05       	cpc	r26, r1
    227e:	b1 05       	cpc	r27, r1
    2280:	19 f4       	brne	.+6      	; 0x2288 <_fpadd_parts+0x10e>
    2282:	ee 24       	eor	r14, r14
    2284:	ff 24       	eor	r15, r15
    2286:	87 01       	movw	r16, r14
    2288:	e6 28       	or	r14, r6
    228a:	f7 28       	or	r15, r7
    228c:	08 29       	or	r16, r8
    228e:	19 29       	or	r17, r9
    2290:	3c c0       	rjmp	.+120    	; 0x230a <_fpadd_parts+0x190>
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	d1 f1       	breq	.+116    	; 0x230a <_fpadd_parts+0x190>
    2296:	ca 0c       	add	r12, r10
    2298:	db 1c       	adc	r13, r11
    229a:	39 01       	movw	r6, r18
    229c:	4a 01       	movw	r8, r20
    229e:	0a 2c       	mov	r0, r10
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <_fpadd_parts+0x130>
    22a2:	96 94       	lsr	r9
    22a4:	87 94       	ror	r8
    22a6:	77 94       	ror	r7
    22a8:	67 94       	ror	r6
    22aa:	0a 94       	dec	r0
    22ac:	d2 f7       	brpl	.-12     	; 0x22a2 <_fpadd_parts+0x128>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	0a 2c       	mov	r0, r10
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <_fpadd_parts+0x148>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	0a 94       	dec	r0
    22c4:	d2 f7       	brpl	.-12     	; 0x22ba <_fpadd_parts+0x140>
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	a1 09       	sbc	r26, r1
    22ca:	b1 09       	sbc	r27, r1
    22cc:	82 23       	and	r24, r18
    22ce:	93 23       	and	r25, r19
    22d0:	a4 23       	and	r26, r20
    22d2:	b5 23       	and	r27, r21
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	19 f4       	brne	.+6      	; 0x22ea <_fpadd_parts+0x170>
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	a9 01       	movw	r20, r18
    22ea:	26 29       	or	r18, r6
    22ec:	37 29       	or	r19, r7
    22ee:	48 29       	or	r20, r8
    22f0:	59 29       	or	r21, r9
    22f2:	0b c0       	rjmp	.+22     	; 0x230a <_fpadd_parts+0x190>
    22f4:	6c 14       	cp	r6, r12
    22f6:	7d 04       	cpc	r7, r13
    22f8:	24 f4       	brge	.+8      	; 0x2302 <_fpadd_parts+0x188>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	04 c0       	rjmp	.+8      	; 0x230a <_fpadd_parts+0x190>
    2302:	63 01       	movw	r12, r6
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	a9 01       	movw	r20, r18
    230a:	81 81       	ldd	r24, Z+1	; 0x01
    230c:	fb 01       	movw	r30, r22
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	89 17       	cp	r24, r25
    2312:	09 f4       	brne	.+2      	; 0x2316 <_fpadd_parts+0x19c>
    2314:	45 c0       	rjmp	.+138    	; 0x23a0 <_fpadd_parts+0x226>
    2316:	88 23       	and	r24, r24
    2318:	49 f0       	breq	.+18     	; 0x232c <_fpadd_parts+0x1b2>
    231a:	d8 01       	movw	r26, r16
    231c:	c7 01       	movw	r24, r14
    231e:	82 1b       	sub	r24, r18
    2320:	93 0b       	sbc	r25, r19
    2322:	a4 0b       	sbc	r26, r20
    2324:	b5 0b       	sbc	r27, r21
    2326:	9c 01       	movw	r18, r24
    2328:	ad 01       	movw	r20, r26
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <_fpadd_parts+0x1ba>
    232c:	2e 19       	sub	r18, r14
    232e:	3f 09       	sbc	r19, r15
    2330:	40 0b       	sbc	r20, r16
    2332:	51 0b       	sbc	r21, r17
    2334:	57 fd       	sbrc	r21, 7
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <_fpadd_parts+0x1c6>
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	ca 82       	std	Y+2, r12	; 0x02
    233c:	db 82       	std	Y+3, r13	; 0x03
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <_fpadd_parts+0x1dc>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	ca 82       	std	Y+2, r12	; 0x02
    2346:	db 82       	std	Y+3, r13	; 0x03
    2348:	50 95       	com	r21
    234a:	40 95       	com	r20
    234c:	30 95       	com	r19
    234e:	21 95       	neg	r18
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	4f 4f       	sbci	r20, 0xFF	; 255
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	2c 83       	std	Y+4, r18	; 0x04
    2358:	3d 83       	std	Y+5, r19	; 0x05
    235a:	4e 83       	std	Y+6, r20	; 0x06
    235c:	5f 83       	std	Y+7, r21	; 0x07
    235e:	0d c0       	rjmp	.+26     	; 0x237a <_fpadd_parts+0x200>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	aa 1f       	adc	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	8c 83       	std	Y+4, r24	; 0x04
    236a:	9d 83       	std	Y+5, r25	; 0x05
    236c:	ae 83       	std	Y+6, r26	; 0x06
    236e:	bf 83       	std	Y+7, r27	; 0x07
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	9b 81       	ldd	r25, Y+3	; 0x03
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	9b 83       	std	Y+3, r25	; 0x03
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	ae 81       	ldd	r26, Y+6	; 0x06
    2380:	bf 81       	ldd	r27, Y+7	; 0x07
    2382:	9c 01       	movw	r18, r24
    2384:	ad 01       	movw	r20, r26
    2386:	21 50       	subi	r18, 0x01	; 1
    2388:	30 40       	sbci	r19, 0x00	; 0
    238a:	40 40       	sbci	r20, 0x00	; 0
    238c:	50 40       	sbci	r21, 0x00	; 0
    238e:	2f 3f       	cpi	r18, 0xFF	; 255
    2390:	ef ef       	ldi	r30, 0xFF	; 255
    2392:	3e 07       	cpc	r19, r30
    2394:	ef ef       	ldi	r30, 0xFF	; 255
    2396:	4e 07       	cpc	r20, r30
    2398:	ef e3       	ldi	r30, 0x3F	; 63
    239a:	5e 07       	cpc	r21, r30
    239c:	08 f3       	brcs	.-62     	; 0x2360 <_fpadd_parts+0x1e6>
    239e:	0b c0       	rjmp	.+22     	; 0x23b6 <_fpadd_parts+0x23c>
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	ca 82       	std	Y+2, r12	; 0x02
    23a4:	db 82       	std	Y+3, r13	; 0x03
    23a6:	2e 0d       	add	r18, r14
    23a8:	3f 1d       	adc	r19, r15
    23aa:	40 1f       	adc	r20, r16
    23ac:	51 1f       	adc	r21, r17
    23ae:	2c 83       	std	Y+4, r18	; 0x04
    23b0:	3d 83       	std	Y+5, r19	; 0x05
    23b2:	4e 83       	std	Y+6, r20	; 0x06
    23b4:	5f 83       	std	Y+7, r21	; 0x07
    23b6:	83 e0       	ldi	r24, 0x03	; 3
    23b8:	88 83       	st	Y, r24
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	4e 81       	ldd	r20, Y+6	; 0x06
    23c0:	5f 81       	ldd	r21, Y+7	; 0x07
    23c2:	57 ff       	sbrs	r21, 7
    23c4:	1d c0       	rjmp	.+58     	; 0x2400 <_fpadd_parts+0x286>
    23c6:	da 01       	movw	r26, r20
    23c8:	c9 01       	movw	r24, r18
    23ca:	81 70       	andi	r24, 0x01	; 1
    23cc:	90 70       	andi	r25, 0x00	; 0
    23ce:	a0 70       	andi	r26, 0x00	; 0
    23d0:	b0 70       	andi	r27, 0x00	; 0
    23d2:	56 95       	lsr	r21
    23d4:	47 95       	ror	r20
    23d6:	37 95       	ror	r19
    23d8:	27 95       	ror	r18
    23da:	82 2b       	or	r24, r18
    23dc:	93 2b       	or	r25, r19
    23de:	a4 2b       	or	r26, r20
    23e0:	b5 2b       	or	r27, r21
    23e2:	8c 83       	std	Y+4, r24	; 0x04
    23e4:	9d 83       	std	Y+5, r25	; 0x05
    23e6:	ae 83       	std	Y+6, r26	; 0x06
    23e8:	bf 83       	std	Y+7, r27	; 0x07
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	9b 81       	ldd	r25, Y+3	; 0x03
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	8a 83       	std	Y+2, r24	; 0x02
    23f2:	9b 83       	std	Y+3, r25	; 0x03
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <_fpadd_parts+0x286>
    23f6:	ef e2       	ldi	r30, 0x2F	; 47
    23f8:	f0 e2       	ldi	r31, 0x20	; 32
    23fa:	03 c0       	rjmp	.+6      	; 0x2402 <_fpadd_parts+0x288>
    23fc:	fb 01       	movw	r30, r22
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <_fpadd_parts+0x288>
    2400:	fe 01       	movw	r30, r28
    2402:	cf 01       	movw	r24, r30
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	ee e0       	ldi	r30, 0x0E	; 14
    240a:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__epilogue_restores__+0x8>

0000240e <__addsf3>:
    240e:	a0 e2       	ldi	r26, 0x20	; 32
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	ed e0       	ldi	r30, 0x0D	; 13
    2414:	f2 e1       	ldi	r31, 0x12	; 18
    2416:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__prologue_saves__+0x18>
    241a:	69 83       	std	Y+1, r22	; 0x01
    241c:	7a 83       	std	Y+2, r23	; 0x02
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	2d 83       	std	Y+5, r18	; 0x05
    2424:	3e 83       	std	Y+6, r19	; 0x06
    2426:	4f 83       	std	Y+7, r20	; 0x07
    2428:	58 87       	std	Y+8, r21	; 0x08
    242a:	89 e0       	ldi	r24, 0x09	; 9
    242c:	e8 2e       	mov	r14, r24
    242e:	f1 2c       	mov	r15, r1
    2430:	ec 0e       	add	r14, r28
    2432:	fd 1e       	adc	r15, r29
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	b7 01       	movw	r22, r14
    243a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    243e:	8e 01       	movw	r16, r28
    2440:	0f 5e       	subi	r16, 0xEF	; 239
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	ce 01       	movw	r24, r28
    2446:	05 96       	adiw	r24, 0x05	; 5
    2448:	b8 01       	movw	r22, r16
    244a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    244e:	c7 01       	movw	r24, r14
    2450:	b8 01       	movw	r22, r16
    2452:	ae 01       	movw	r20, r28
    2454:	47 5e       	subi	r20, 0xE7	; 231
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	0e 94 bd 10 	call	0x217a	; 0x217a <_fpadd_parts>
    245c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__pack_f>
    2460:	a0 96       	adiw	r28, 0x20	; 32
    2462:	e6 e0       	ldi	r30, 0x06	; 6
    2464:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

00002468 <__subsf3>:
    2468:	a0 e2       	ldi	r26, 0x20	; 32
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	ea e3       	ldi	r30, 0x3A	; 58
    246e:	f2 e1       	ldi	r31, 0x12	; 18
    2470:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__prologue_saves__+0x18>
    2474:	69 83       	std	Y+1, r22	; 0x01
    2476:	7a 83       	std	Y+2, r23	; 0x02
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	2d 83       	std	Y+5, r18	; 0x05
    247e:	3e 83       	std	Y+6, r19	; 0x06
    2480:	4f 83       	std	Y+7, r20	; 0x07
    2482:	58 87       	std	Y+8, r21	; 0x08
    2484:	8e 01       	movw	r16, r28
    2486:	07 5f       	subi	r16, 0xF7	; 247
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	ce 01       	movw	r24, r28
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	b8 01       	movw	r22, r16
    2490:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    2494:	91 e1       	ldi	r25, 0x11	; 17
    2496:	e9 2e       	mov	r14, r25
    2498:	f1 2c       	mov	r15, r1
    249a:	ec 0e       	add	r14, r28
    249c:	fd 1e       	adc	r15, r29
    249e:	ce 01       	movw	r24, r28
    24a0:	05 96       	adiw	r24, 0x05	; 5
    24a2:	b7 01       	movw	r22, r14
    24a4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    24a8:	8a 89       	ldd	r24, Y+18	; 0x12
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	89 27       	eor	r24, r25
    24ae:	8a 8b       	std	Y+18, r24	; 0x12
    24b0:	c8 01       	movw	r24, r16
    24b2:	b7 01       	movw	r22, r14
    24b4:	ae 01       	movw	r20, r28
    24b6:	47 5e       	subi	r20, 0xE7	; 231
    24b8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ba:	0e 94 bd 10 	call	0x217a	; 0x217a <_fpadd_parts>
    24be:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__pack_f>
    24c2:	a0 96       	adiw	r28, 0x20	; 32
    24c4:	e6 e0       	ldi	r30, 0x06	; 6
    24c6:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

000024ca <__mulsf3>:
    24ca:	a0 e2       	ldi	r26, 0x20	; 32
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	eb e6       	ldi	r30, 0x6B	; 107
    24d0:	f2 e1       	ldi	r31, 0x12	; 18
    24d2:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__>
    24d6:	69 83       	std	Y+1, r22	; 0x01
    24d8:	7a 83       	std	Y+2, r23	; 0x02
    24da:	8b 83       	std	Y+3, r24	; 0x03
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	2d 83       	std	Y+5, r18	; 0x05
    24e0:	3e 83       	std	Y+6, r19	; 0x06
    24e2:	4f 83       	std	Y+7, r20	; 0x07
    24e4:	58 87       	std	Y+8, r21	; 0x08
    24e6:	ce 01       	movw	r24, r28
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	be 01       	movw	r22, r28
    24ec:	67 5f       	subi	r22, 0xF7	; 247
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    24f4:	ce 01       	movw	r24, r28
    24f6:	05 96       	adiw	r24, 0x05	; 5
    24f8:	be 01       	movw	r22, r28
    24fa:	6f 5e       	subi	r22, 0xEF	; 239
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255
    24fe:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    2502:	99 85       	ldd	r25, Y+9	; 0x09
    2504:	92 30       	cpi	r25, 0x02	; 2
    2506:	78 f0       	brcs	.+30     	; 0x2526 <__mulsf3+0x5c>
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	82 30       	cpi	r24, 0x02	; 2
    250c:	c0 f0       	brcs	.+48     	; 0x253e <__mulsf3+0x74>
    250e:	94 30       	cpi	r25, 0x04	; 4
    2510:	19 f4       	brne	.+6      	; 0x2518 <__mulsf3+0x4e>
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	41 f4       	brne	.+16     	; 0x2526 <__mulsf3+0x5c>
    2516:	cb c0       	rjmp	.+406    	; 0x26ae <__mulsf3+0x1e4>
    2518:	84 30       	cpi	r24, 0x04	; 4
    251a:	19 f4       	brne	.+6      	; 0x2522 <__mulsf3+0x58>
    251c:	92 30       	cpi	r25, 0x02	; 2
    251e:	79 f4       	brne	.+30     	; 0x253e <__mulsf3+0x74>
    2520:	c6 c0       	rjmp	.+396    	; 0x26ae <__mulsf3+0x1e4>
    2522:	92 30       	cpi	r25, 0x02	; 2
    2524:	51 f4       	brne	.+20     	; 0x253a <__mulsf3+0x70>
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	2a 85       	ldd	r18, Y+10	; 0x0a
    252a:	9a 89       	ldd	r25, Y+18	; 0x12
    252c:	29 17       	cp	r18, r25
    252e:	09 f4       	brne	.+2      	; 0x2532 <__mulsf3+0x68>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	8a 87       	std	Y+10, r24	; 0x0a
    2534:	ce 01       	movw	r24, r28
    2536:	09 96       	adiw	r24, 0x09	; 9
    2538:	bc c0       	rjmp	.+376    	; 0x26b2 <__mulsf3+0x1e8>
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	51 f4       	brne	.+20     	; 0x2552 <__mulsf3+0x88>
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	2a 85       	ldd	r18, Y+10	; 0x0a
    2542:	9a 89       	ldd	r25, Y+18	; 0x12
    2544:	29 17       	cp	r18, r25
    2546:	09 f4       	brne	.+2      	; 0x254a <__mulsf3+0x80>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	8a 8b       	std	Y+18, r24	; 0x12
    254c:	ce 01       	movw	r24, r28
    254e:	41 96       	adiw	r24, 0x11	; 17
    2550:	b0 c0       	rjmp	.+352    	; 0x26b2 <__mulsf3+0x1e8>
    2552:	6d 84       	ldd	r6, Y+13	; 0x0d
    2554:	7e 84       	ldd	r7, Y+14	; 0x0e
    2556:	8f 84       	ldd	r8, Y+15	; 0x0f
    2558:	98 88       	ldd	r9, Y+16	; 0x10
    255a:	ed 88       	ldd	r14, Y+21	; 0x15
    255c:	fe 88       	ldd	r15, Y+22	; 0x16
    255e:	0f 89       	ldd	r16, Y+23	; 0x17
    2560:	18 8d       	ldd	r17, Y+24	; 0x18
    2562:	e0 e2       	ldi	r30, 0x20	; 32
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	dc 01       	movw	r26, r24
    256c:	aa 24       	eor	r10, r10
    256e:	bb 24       	eor	r11, r11
    2570:	65 01       	movw	r12, r10
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	a9 01       	movw	r20, r18
    2578:	b3 01       	movw	r22, r6
    257a:	61 70       	andi	r22, 0x01	; 1
    257c:	70 70       	andi	r23, 0x00	; 0
    257e:	61 15       	cp	r22, r1
    2580:	71 05       	cpc	r23, r1
    2582:	d1 f0       	breq	.+52     	; 0x25b8 <__mulsf3+0xee>
    2584:	2e 0d       	add	r18, r14
    2586:	3f 1d       	adc	r19, r15
    2588:	40 1f       	adc	r20, r16
    258a:	51 1f       	adc	r21, r17
    258c:	15 01       	movw	r2, r10
    258e:	26 01       	movw	r4, r12
    2590:	28 0e       	add	r2, r24
    2592:	39 1e       	adc	r3, r25
    2594:	4a 1e       	adc	r4, r26
    2596:	5b 1e       	adc	r5, r27
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 e0       	ldi	r26, 0x00	; 0
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	2e 15       	cp	r18, r14
    25a2:	3f 05       	cpc	r19, r15
    25a4:	40 07       	cpc	r20, r16
    25a6:	51 07       	cpc	r21, r17
    25a8:	18 f0       	brcs	.+6      	; 0x25b0 <__mulsf3+0xe6>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	dc 01       	movw	r26, r24
    25b0:	82 0d       	add	r24, r2
    25b2:	93 1d       	adc	r25, r3
    25b4:	a4 1d       	adc	r26, r4
    25b6:	b5 1d       	adc	r27, r5
    25b8:	aa 0c       	add	r10, r10
    25ba:	bb 1c       	adc	r11, r11
    25bc:	cc 1c       	adc	r12, r12
    25be:	dd 1c       	adc	r13, r13
    25c0:	17 ff       	sbrs	r17, 7
    25c2:	09 c0       	rjmp	.+18     	; 0x25d6 <__mulsf3+0x10c>
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	26 2e       	mov	r2, r22
    25c8:	31 2c       	mov	r3, r1
    25ca:	41 2c       	mov	r4, r1
    25cc:	51 2c       	mov	r5, r1
    25ce:	a2 28       	or	r10, r2
    25d0:	b3 28       	or	r11, r3
    25d2:	c4 28       	or	r12, r4
    25d4:	d5 28       	or	r13, r5
    25d6:	31 97       	sbiw	r30, 0x01	; 1
    25d8:	49 f0       	breq	.+18     	; 0x25ec <__mulsf3+0x122>
    25da:	ee 0c       	add	r14, r14
    25dc:	ff 1c       	adc	r15, r15
    25de:	00 1f       	adc	r16, r16
    25e0:	11 1f       	adc	r17, r17
    25e2:	96 94       	lsr	r9
    25e4:	87 94       	ror	r8
    25e6:	77 94       	ror	r7
    25e8:	67 94       	ror	r6
    25ea:	c6 cf       	rjmp	.-116    	; 0x2578 <__mulsf3+0xae>
    25ec:	6b 89       	ldd	r22, Y+19	; 0x13
    25ee:	7c 89       	ldd	r23, Y+20	; 0x14
    25f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    25f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    25f4:	6e 0f       	add	r22, r30
    25f6:	7f 1f       	adc	r23, r31
    25f8:	6e 5f       	subi	r22, 0xFE	; 254
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	6b 8f       	std	Y+27, r22	; 0x1b
    25fe:	7c 8f       	std	Y+28, r23	; 0x1c
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	ea 85       	ldd	r30, Y+10	; 0x0a
    2604:	7a 89       	ldd	r23, Y+18	; 0x12
    2606:	e7 17       	cp	r30, r23
    2608:	09 f4       	brne	.+2      	; 0x260c <__mulsf3+0x142>
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	6a 8f       	std	Y+26, r22	; 0x1a
    260e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2610:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2612:	10 c0       	rjmp	.+32     	; 0x2634 <__mulsf3+0x16a>
    2614:	fc 01       	movw	r30, r24
    2616:	e1 70       	andi	r30, 0x01	; 1
    2618:	f0 70       	andi	r31, 0x00	; 0
    261a:	30 97       	sbiw	r30, 0x00	; 0
    261c:	29 f0       	breq	.+10     	; 0x2628 <__mulsf3+0x15e>
    261e:	56 95       	lsr	r21
    2620:	47 95       	ror	r20
    2622:	37 95       	ror	r19
    2624:	27 95       	ror	r18
    2626:	50 68       	ori	r21, 0x80	; 128
    2628:	b6 95       	lsr	r27
    262a:	a7 95       	ror	r26
    262c:	97 95       	ror	r25
    262e:	87 95       	ror	r24
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	b7 fd       	sbrc	r27, 7
    2636:	ee cf       	rjmp	.-36     	; 0x2614 <__mulsf3+0x14a>
    2638:	0c c0       	rjmp	.+24     	; 0x2652 <__mulsf3+0x188>
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	aa 1f       	adc	r26, r26
    2640:	bb 1f       	adc	r27, r27
    2642:	57 fd       	sbrc	r21, 7
    2644:	81 60       	ori	r24, 0x01	; 1
    2646:	22 0f       	add	r18, r18
    2648:	33 1f       	adc	r19, r19
    264a:	44 1f       	adc	r20, r20
    264c:	55 1f       	adc	r21, r21
    264e:	61 50       	subi	r22, 0x01	; 1
    2650:	70 40       	sbci	r23, 0x00	; 0
    2652:	80 30       	cpi	r24, 0x00	; 0
    2654:	e0 e0       	ldi	r30, 0x00	; 0
    2656:	9e 07       	cpc	r25, r30
    2658:	e0 e0       	ldi	r30, 0x00	; 0
    265a:	ae 07       	cpc	r26, r30
    265c:	e0 e4       	ldi	r30, 0x40	; 64
    265e:	be 07       	cpc	r27, r30
    2660:	60 f3       	brcs	.-40     	; 0x263a <__mulsf3+0x170>
    2662:	6b 8f       	std	Y+27, r22	; 0x1b
    2664:	7c 8f       	std	Y+28, r23	; 0x1c
    2666:	6f e7       	ldi	r22, 0x7F	; 127
    2668:	e6 2e       	mov	r14, r22
    266a:	f1 2c       	mov	r15, r1
    266c:	01 2d       	mov	r16, r1
    266e:	11 2d       	mov	r17, r1
    2670:	e8 22       	and	r14, r24
    2672:	f9 22       	and	r15, r25
    2674:	0a 23       	and	r16, r26
    2676:	1b 23       	and	r17, r27
    2678:	60 e4       	ldi	r22, 0x40	; 64
    267a:	e6 16       	cp	r14, r22
    267c:	f1 04       	cpc	r15, r1
    267e:	01 05       	cpc	r16, r1
    2680:	11 05       	cpc	r17, r1
    2682:	61 f4       	brne	.+24     	; 0x269c <__mulsf3+0x1d2>
    2684:	87 fd       	sbrc	r24, 7
    2686:	0a c0       	rjmp	.+20     	; 0x269c <__mulsf3+0x1d2>
    2688:	21 15       	cp	r18, r1
    268a:	31 05       	cpc	r19, r1
    268c:	41 05       	cpc	r20, r1
    268e:	51 05       	cpc	r21, r1
    2690:	29 f0       	breq	.+10     	; 0x269c <__mulsf3+0x1d2>
    2692:	80 5c       	subi	r24, 0xC0	; 192
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	af 4f       	sbci	r26, 0xFF	; 255
    2698:	bf 4f       	sbci	r27, 0xFF	; 255
    269a:	80 78       	andi	r24, 0x80	; 128
    269c:	8d 8f       	std	Y+29, r24	; 0x1d
    269e:	9e 8f       	std	Y+30, r25	; 0x1e
    26a0:	af 8f       	std	Y+31, r26	; 0x1f
    26a2:	b8 a3       	std	Y+32, r27	; 0x20
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	89 8f       	std	Y+25, r24	; 0x19
    26a8:	ce 01       	movw	r24, r28
    26aa:	49 96       	adiw	r24, 0x19	; 25
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <__mulsf3+0x1e8>
    26ae:	8f e2       	ldi	r24, 0x2F	; 47
    26b0:	90 e2       	ldi	r25, 0x20	; 32
    26b2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__pack_f>
    26b6:	a0 96       	adiw	r28, 0x20	; 32
    26b8:	e2 e1       	ldi	r30, 0x12	; 18
    26ba:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__>

000026be <__divsf3>:
    26be:	a8 e1       	ldi	r26, 0x18	; 24
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e5 e6       	ldi	r30, 0x65	; 101
    26c4:	f3 e1       	ldi	r31, 0x13	; 19
    26c6:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__prologue_saves__+0x10>
    26ca:	69 83       	std	Y+1, r22	; 0x01
    26cc:	7a 83       	std	Y+2, r23	; 0x02
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	2d 83       	std	Y+5, r18	; 0x05
    26d4:	3e 83       	std	Y+6, r19	; 0x06
    26d6:	4f 83       	std	Y+7, r20	; 0x07
    26d8:	58 87       	std	Y+8, r21	; 0x08
    26da:	8e 01       	movw	r16, r28
    26dc:	07 5f       	subi	r16, 0xF7	; 247
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	b8 01       	movw	r22, r16
    26e6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    26ea:	81 e1       	ldi	r24, 0x11	; 17
    26ec:	e8 2e       	mov	r14, r24
    26ee:	f1 2c       	mov	r15, r1
    26f0:	ec 0e       	add	r14, r28
    26f2:	fd 1e       	adc	r15, r29
    26f4:	ce 01       	movw	r24, r28
    26f6:	05 96       	adiw	r24, 0x05	; 5
    26f8:	b7 01       	movw	r22, r14
    26fa:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    26fe:	99 85       	ldd	r25, Y+9	; 0x09
    2700:	92 30       	cpi	r25, 0x02	; 2
    2702:	08 f4       	brcc	.+2      	; 0x2706 <__divsf3+0x48>
    2704:	83 c0       	rjmp	.+262    	; 0x280c <__stack+0xd>
    2706:	89 89       	ldd	r24, Y+17	; 0x11
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	08 f4       	brcc	.+2      	; 0x270e <__divsf3+0x50>
    270c:	7b c0       	rjmp	.+246    	; 0x2804 <__stack+0x5>
    270e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2710:	3a 89       	ldd	r19, Y+18	; 0x12
    2712:	23 27       	eor	r18, r19
    2714:	2a 87       	std	Y+10, r18	; 0x0a
    2716:	94 30       	cpi	r25, 0x04	; 4
    2718:	11 f0       	breq	.+4      	; 0x271e <__divsf3+0x60>
    271a:	92 30       	cpi	r25, 0x02	; 2
    271c:	21 f4       	brne	.+8      	; 0x2726 <__divsf3+0x68>
    271e:	98 17       	cp	r25, r24
    2720:	09 f0       	breq	.+2      	; 0x2724 <__divsf3+0x66>
    2722:	6c c0       	rjmp	.+216    	; 0x27fc <__divsf3+0x13e>
    2724:	71 c0       	rjmp	.+226    	; 0x2808 <__stack+0x9>
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	39 f4       	brne	.+14     	; 0x2738 <__divsf3+0x7a>
    272a:	1d 86       	std	Y+13, r1	; 0x0d
    272c:	1e 86       	std	Y+14, r1	; 0x0e
    272e:	1f 86       	std	Y+15, r1	; 0x0f
    2730:	18 8a       	std	Y+16, r1	; 0x10
    2732:	1b 86       	std	Y+11, r1	; 0x0b
    2734:	1c 86       	std	Y+12, r1	; 0x0c
    2736:	6a c0       	rjmp	.+212    	; 0x280c <__stack+0xd>
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	19 f4       	brne	.+6      	; 0x2742 <__divsf3+0x84>
    273c:	84 e0       	ldi	r24, 0x04	; 4
    273e:	89 87       	std	Y+9, r24	; 0x09
    2740:	65 c0       	rjmp	.+202    	; 0x280c <__stack+0xd>
    2742:	8b 85       	ldd	r24, Y+11	; 0x0b
    2744:	9c 85       	ldd	r25, Y+12	; 0x0c
    2746:	2b 89       	ldd	r18, Y+19	; 0x13
    2748:	3c 89       	ldd	r19, Y+20	; 0x14
    274a:	82 1b       	sub	r24, r18
    274c:	93 0b       	sbc	r25, r19
    274e:	8b 87       	std	Y+11, r24	; 0x0b
    2750:	9c 87       	std	Y+12, r25	; 0x0c
    2752:	2d 85       	ldd	r18, Y+13	; 0x0d
    2754:	3e 85       	ldd	r19, Y+14	; 0x0e
    2756:	4f 85       	ldd	r20, Y+15	; 0x0f
    2758:	58 89       	ldd	r21, Y+16	; 0x10
    275a:	ed 88       	ldd	r14, Y+21	; 0x15
    275c:	fe 88       	ldd	r15, Y+22	; 0x16
    275e:	0f 89       	ldd	r16, Y+23	; 0x17
    2760:	18 8d       	ldd	r17, Y+24	; 0x18
    2762:	2e 15       	cp	r18, r14
    2764:	3f 05       	cpc	r19, r15
    2766:	40 07       	cpc	r20, r16
    2768:	51 07       	cpc	r21, r17
    276a:	38 f4       	brcc	.+14     	; 0x277a <__divsf3+0xbc>
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	44 1f       	adc	r20, r20
    2772:	55 1f       	adc	r21, r21
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	9c 87       	std	Y+12, r25	; 0x0c
    277a:	6f e1       	ldi	r22, 0x1F	; 31
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	a1 2c       	mov	r10, r1
    2780:	b1 2c       	mov	r11, r1
    2782:	c1 2c       	mov	r12, r1
    2784:	a0 e4       	ldi	r26, 0x40	; 64
    2786:	da 2e       	mov	r13, r26
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	dc 01       	movw	r26, r24
    278e:	2e 15       	cp	r18, r14
    2790:	3f 05       	cpc	r19, r15
    2792:	40 07       	cpc	r20, r16
    2794:	51 07       	cpc	r21, r17
    2796:	40 f0       	brcs	.+16     	; 0x27a8 <__divsf3+0xea>
    2798:	8a 29       	or	r24, r10
    279a:	9b 29       	or	r25, r11
    279c:	ac 29       	or	r26, r12
    279e:	bd 29       	or	r27, r13
    27a0:	2e 19       	sub	r18, r14
    27a2:	3f 09       	sbc	r19, r15
    27a4:	40 0b       	sbc	r20, r16
    27a6:	51 0b       	sbc	r21, r17
    27a8:	d6 94       	lsr	r13
    27aa:	c7 94       	ror	r12
    27ac:	b7 94       	ror	r11
    27ae:	a7 94       	ror	r10
    27b0:	22 0f       	add	r18, r18
    27b2:	33 1f       	adc	r19, r19
    27b4:	44 1f       	adc	r20, r20
    27b6:	55 1f       	adc	r21, r21
    27b8:	61 50       	subi	r22, 0x01	; 1
    27ba:	70 40       	sbci	r23, 0x00	; 0
    27bc:	41 f7       	brne	.-48     	; 0x278e <__divsf3+0xd0>
    27be:	6f e7       	ldi	r22, 0x7F	; 127
    27c0:	e6 2e       	mov	r14, r22
    27c2:	f1 2c       	mov	r15, r1
    27c4:	01 2d       	mov	r16, r1
    27c6:	11 2d       	mov	r17, r1
    27c8:	e8 22       	and	r14, r24
    27ca:	f9 22       	and	r15, r25
    27cc:	0a 23       	and	r16, r26
    27ce:	1b 23       	and	r17, r27
    27d0:	60 e4       	ldi	r22, 0x40	; 64
    27d2:	e6 16       	cp	r14, r22
    27d4:	f1 04       	cpc	r15, r1
    27d6:	01 05       	cpc	r16, r1
    27d8:	11 05       	cpc	r17, r1
    27da:	61 f4       	brne	.+24     	; 0x27f4 <__divsf3+0x136>
    27dc:	87 fd       	sbrc	r24, 7
    27de:	0a c0       	rjmp	.+20     	; 0x27f4 <__divsf3+0x136>
    27e0:	21 15       	cp	r18, r1
    27e2:	31 05       	cpc	r19, r1
    27e4:	41 05       	cpc	r20, r1
    27e6:	51 05       	cpc	r21, r1
    27e8:	29 f0       	breq	.+10     	; 0x27f4 <__divsf3+0x136>
    27ea:	80 5c       	subi	r24, 0xC0	; 192
    27ec:	9f 4f       	sbci	r25, 0xFF	; 255
    27ee:	af 4f       	sbci	r26, 0xFF	; 255
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	80 78       	andi	r24, 0x80	; 128
    27f4:	8d 87       	std	Y+13, r24	; 0x0d
    27f6:	9e 87       	std	Y+14, r25	; 0x0e
    27f8:	af 87       	std	Y+15, r26	; 0x0f
    27fa:	b8 8b       	std	Y+16, r27	; 0x10
    27fc:	8e 01       	movw	r16, r28
    27fe:	07 5f       	subi	r16, 0xF7	; 247
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	04 c0       	rjmp	.+8      	; 0x280c <__stack+0xd>
    2804:	87 01       	movw	r16, r14
    2806:	02 c0       	rjmp	.+4      	; 0x280c <__stack+0xd>
    2808:	0f e2       	ldi	r16, 0x2F	; 47
    280a:	10 e2       	ldi	r17, 0x20	; 32
    280c:	c8 01       	movw	r24, r16
    280e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__pack_f>
    2812:	68 96       	adiw	r28, 0x18	; 24
    2814:	ea e0       	ldi	r30, 0x0A	; 10
    2816:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__+0x10>

0000281a <__gtsf2>:
    281a:	a8 e1       	ldi	r26, 0x18	; 24
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e3 e1       	ldi	r30, 0x13	; 19
    2820:	f4 e1       	ldi	r31, 0x14	; 20
    2822:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__prologue_saves__+0x18>
    2826:	69 83       	std	Y+1, r22	; 0x01
    2828:	7a 83       	std	Y+2, r23	; 0x02
    282a:	8b 83       	std	Y+3, r24	; 0x03
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	2d 83       	std	Y+5, r18	; 0x05
    2830:	3e 83       	std	Y+6, r19	; 0x06
    2832:	4f 83       	std	Y+7, r20	; 0x07
    2834:	58 87       	std	Y+8, r21	; 0x08
    2836:	8e 01       	movw	r16, r28
    2838:	07 5f       	subi	r16, 0xF7	; 247
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	ce 01       	movw	r24, r28
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	b8 01       	movw	r22, r16
    2842:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    2846:	81 e1       	ldi	r24, 0x11	; 17
    2848:	e8 2e       	mov	r14, r24
    284a:	f1 2c       	mov	r15, r1
    284c:	ec 0e       	add	r14, r28
    284e:	fd 1e       	adc	r15, r29
    2850:	ce 01       	movw	r24, r28
    2852:	05 96       	adiw	r24, 0x05	; 5
    2854:	b7 01       	movw	r22, r14
    2856:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	82 30       	cpi	r24, 0x02	; 2
    285e:	40 f0       	brcs	.+16     	; 0x2870 <__gtsf2+0x56>
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	82 30       	cpi	r24, 0x02	; 2
    2864:	28 f0       	brcs	.+10     	; 0x2870 <__gtsf2+0x56>
    2866:	c8 01       	movw	r24, r16
    2868:	b7 01       	movw	r22, r14
    286a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__fpcmp_parts_f>
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <__gtsf2+0x58>
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	68 96       	adiw	r28, 0x18	; 24
    2874:	e6 e0       	ldi	r30, 0x06	; 6
    2876:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

0000287a <__gesf2>:
    287a:	a8 e1       	ldi	r26, 0x18	; 24
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e3 e4       	ldi	r30, 0x43	; 67
    2880:	f4 e1       	ldi	r31, 0x14	; 20
    2882:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__prologue_saves__+0x18>
    2886:	69 83       	std	Y+1, r22	; 0x01
    2888:	7a 83       	std	Y+2, r23	; 0x02
    288a:	8b 83       	std	Y+3, r24	; 0x03
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	2d 83       	std	Y+5, r18	; 0x05
    2890:	3e 83       	std	Y+6, r19	; 0x06
    2892:	4f 83       	std	Y+7, r20	; 0x07
    2894:	58 87       	std	Y+8, r21	; 0x08
    2896:	8e 01       	movw	r16, r28
    2898:	07 5f       	subi	r16, 0xF7	; 247
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	b8 01       	movw	r22, r16
    28a2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    28a6:	81 e1       	ldi	r24, 0x11	; 17
    28a8:	e8 2e       	mov	r14, r24
    28aa:	f1 2c       	mov	r15, r1
    28ac:	ec 0e       	add	r14, r28
    28ae:	fd 1e       	adc	r15, r29
    28b0:	ce 01       	movw	r24, r28
    28b2:	05 96       	adiw	r24, 0x05	; 5
    28b4:	b7 01       	movw	r22, r14
    28b6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	40 f0       	brcs	.+16     	; 0x28d0 <__gesf2+0x56>
    28c0:	89 89       	ldd	r24, Y+17	; 0x11
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	28 f0       	brcs	.+10     	; 0x28d0 <__gesf2+0x56>
    28c6:	c8 01       	movw	r24, r16
    28c8:	b7 01       	movw	r22, r14
    28ca:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__fpcmp_parts_f>
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <__gesf2+0x58>
    28d0:	8f ef       	ldi	r24, 0xFF	; 255
    28d2:	68 96       	adiw	r28, 0x18	; 24
    28d4:	e6 e0       	ldi	r30, 0x06	; 6
    28d6:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

000028da <__ltsf2>:
    28da:	a8 e1       	ldi	r26, 0x18	; 24
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e3 e7       	ldi	r30, 0x73	; 115
    28e0:	f4 e1       	ldi	r31, 0x14	; 20
    28e2:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__prologue_saves__+0x18>
    28e6:	69 83       	std	Y+1, r22	; 0x01
    28e8:	7a 83       	std	Y+2, r23	; 0x02
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	2d 83       	std	Y+5, r18	; 0x05
    28f0:	3e 83       	std	Y+6, r19	; 0x06
    28f2:	4f 83       	std	Y+7, r20	; 0x07
    28f4:	58 87       	std	Y+8, r21	; 0x08
    28f6:	8e 01       	movw	r16, r28
    28f8:	07 5f       	subi	r16, 0xF7	; 247
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	ce 01       	movw	r24, r28
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	b8 01       	movw	r22, r16
    2902:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    2906:	81 e1       	ldi	r24, 0x11	; 17
    2908:	e8 2e       	mov	r14, r24
    290a:	f1 2c       	mov	r15, r1
    290c:	ec 0e       	add	r14, r28
    290e:	fd 1e       	adc	r15, r29
    2910:	ce 01       	movw	r24, r28
    2912:	05 96       	adiw	r24, 0x05	; 5
    2914:	b7 01       	movw	r22, r14
    2916:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	40 f0       	brcs	.+16     	; 0x2930 <__ltsf2+0x56>
    2920:	89 89       	ldd	r24, Y+17	; 0x11
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	28 f0       	brcs	.+10     	; 0x2930 <__ltsf2+0x56>
    2926:	c8 01       	movw	r24, r16
    2928:	b7 01       	movw	r22, r14
    292a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__fpcmp_parts_f>
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <__ltsf2+0x58>
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	68 96       	adiw	r28, 0x18	; 24
    2934:	e6 e0       	ldi	r30, 0x06	; 6
    2936:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

0000293a <__fixsfsi>:
    293a:	ac e0       	ldi	r26, 0x0C	; 12
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 ea       	ldi	r30, 0xA3	; 163
    2940:	f4 e1       	ldi	r31, 0x14	; 20
    2942:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x20>
    2946:	69 83       	std	Y+1, r22	; 0x01
    2948:	7a 83       	std	Y+2, r23	; 0x02
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	be 01       	movw	r22, r28
    2954:	6b 5f       	subi	r22, 0xFB	; 251
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__unpack_f>
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	82 30       	cpi	r24, 0x02	; 2
    2960:	81 f1       	breq	.+96     	; 0x29c2 <__fixsfsi+0x88>
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	70 f1       	brcs	.+92     	; 0x29c2 <__fixsfsi+0x88>
    2966:	84 30       	cpi	r24, 0x04	; 4
    2968:	21 f4       	brne	.+8      	; 0x2972 <__fixsfsi+0x38>
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	88 23       	and	r24, r24
    296e:	69 f1       	breq	.+90     	; 0x29ca <__fixsfsi+0x90>
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <__fixsfsi+0x4c>
    2972:	2f 81       	ldd	r18, Y+7	; 0x07
    2974:	38 85       	ldd	r19, Y+8	; 0x08
    2976:	37 fd       	sbrc	r19, 7
    2978:	24 c0       	rjmp	.+72     	; 0x29c2 <__fixsfsi+0x88>
    297a:	6e 81       	ldd	r22, Y+6	; 0x06
    297c:	2f 31       	cpi	r18, 0x1F	; 31
    297e:	31 05       	cpc	r19, r1
    2980:	3c f0       	brlt	.+14     	; 0x2990 <__fixsfsi+0x56>
    2982:	66 23       	and	r22, r22
    2984:	11 f1       	breq	.+68     	; 0x29ca <__fixsfsi+0x90>
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	50 e8       	ldi	r21, 0x80	; 128
    298e:	21 c0       	rjmp	.+66     	; 0x29d2 <__fixsfsi+0x98>
    2990:	8e e1       	ldi	r24, 0x1E	; 30
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	82 1b       	sub	r24, r18
    2996:	93 0b       	sbc	r25, r19
    2998:	29 85       	ldd	r18, Y+9	; 0x09
    299a:	3a 85       	ldd	r19, Y+10	; 0x0a
    299c:	4b 85       	ldd	r20, Y+11	; 0x0b
    299e:	5c 85       	ldd	r21, Y+12	; 0x0c
    29a0:	04 c0       	rjmp	.+8      	; 0x29aa <__fixsfsi+0x70>
    29a2:	56 95       	lsr	r21
    29a4:	47 95       	ror	r20
    29a6:	37 95       	ror	r19
    29a8:	27 95       	ror	r18
    29aa:	8a 95       	dec	r24
    29ac:	d2 f7       	brpl	.-12     	; 0x29a2 <__fixsfsi+0x68>
    29ae:	66 23       	and	r22, r22
    29b0:	81 f0       	breq	.+32     	; 0x29d2 <__fixsfsi+0x98>
    29b2:	50 95       	com	r21
    29b4:	40 95       	com	r20
    29b6:	30 95       	com	r19
    29b8:	21 95       	neg	r18
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	4f 4f       	sbci	r20, 0xFF	; 255
    29be:	5f 4f       	sbci	r21, 0xFF	; 255
    29c0:	08 c0       	rjmp	.+16     	; 0x29d2 <__fixsfsi+0x98>
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	a9 01       	movw	r20, r18
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <__fixsfsi+0x98>
    29ca:	2f ef       	ldi	r18, 0xFF	; 255
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f ef       	ldi	r20, 0xFF	; 255
    29d0:	5f e7       	ldi	r21, 0x7F	; 127
    29d2:	b9 01       	movw	r22, r18
    29d4:	ca 01       	movw	r24, r20
    29d6:	2c 96       	adiw	r28, 0x0c	; 12
    29d8:	e2 e0       	ldi	r30, 0x02	; 2
    29da:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x20>

000029de <__floatunsisf>:
    29de:	a8 e0       	ldi	r26, 0x08	; 8
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 ef       	ldi	r30, 0xF5	; 245
    29e4:	f4 e1       	ldi	r31, 0x14	; 20
    29e6:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__prologue_saves__+0x14>
    29ea:	7b 01       	movw	r14, r22
    29ec:	8c 01       	movw	r16, r24
    29ee:	1a 82       	std	Y+2, r1	; 0x02
    29f0:	61 15       	cp	r22, r1
    29f2:	71 05       	cpc	r23, r1
    29f4:	81 05       	cpc	r24, r1
    29f6:	91 05       	cpc	r25, r1
    29f8:	19 f4       	brne	.+6      	; 0x2a00 <__floatunsisf+0x22>
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	5f c0       	rjmp	.+190    	; 0x2abe <__floatunsisf+0xe0>
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	8e e1       	ldi	r24, 0x1E	; 30
    2a06:	c8 2e       	mov	r12, r24
    2a08:	d1 2c       	mov	r13, r1
    2a0a:	cb 82       	std	Y+3, r12	; 0x03
    2a0c:	dc 82       	std	Y+4, r13	; 0x04
    2a0e:	ed 82       	std	Y+5, r14	; 0x05
    2a10:	fe 82       	std	Y+6, r15	; 0x06
    2a12:	0f 83       	std	Y+7, r16	; 0x07
    2a14:	18 87       	std	Y+8, r17	; 0x08
    2a16:	c8 01       	movw	r24, r16
    2a18:	b7 01       	movw	r22, r14
    2a1a:	0e 94 67 15 	call	0x2ace	; 0x2ace <__clzsi2>
    2a1e:	fc 01       	movw	r30, r24
    2a20:	31 97       	sbiw	r30, 0x01	; 1
    2a22:	f7 ff       	sbrs	r31, 7
    2a24:	3a c0       	rjmp	.+116    	; 0x2a9a <__floatunsisf+0xbc>
    2a26:	aa 27       	eor	r26, r26
    2a28:	bb 27       	eor	r27, r27
    2a2a:	ae 1b       	sub	r26, r30
    2a2c:	bf 0b       	sbc	r27, r31
    2a2e:	21 e0       	ldi	r18, 0x01	; 1
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	0a 2e       	mov	r0, r26
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <__floatunsisf+0x64>
    2a3a:	22 0f       	add	r18, r18
    2a3c:	33 1f       	adc	r19, r19
    2a3e:	44 1f       	adc	r20, r20
    2a40:	55 1f       	adc	r21, r21
    2a42:	0a 94       	dec	r0
    2a44:	d2 f7       	brpl	.-12     	; 0x2a3a <__floatunsisf+0x5c>
    2a46:	21 50       	subi	r18, 0x01	; 1
    2a48:	30 40       	sbci	r19, 0x00	; 0
    2a4a:	40 40       	sbci	r20, 0x00	; 0
    2a4c:	50 40       	sbci	r21, 0x00	; 0
    2a4e:	2e 21       	and	r18, r14
    2a50:	3f 21       	and	r19, r15
    2a52:	40 23       	and	r20, r16
    2a54:	51 23       	and	r21, r17
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	21 15       	cp	r18, r1
    2a60:	31 05       	cpc	r19, r1
    2a62:	41 05       	cpc	r20, r1
    2a64:	51 05       	cpc	r21, r1
    2a66:	19 f4       	brne	.+6      	; 0x2a6e <__floatunsisf+0x90>
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	04 c0       	rjmp	.+8      	; 0x2a78 <__floatunsisf+0x9a>
    2a70:	16 95       	lsr	r17
    2a72:	07 95       	ror	r16
    2a74:	f7 94       	ror	r15
    2a76:	e7 94       	ror	r14
    2a78:	aa 95       	dec	r26
    2a7a:	d2 f7       	brpl	.-12     	; 0x2a70 <__floatunsisf+0x92>
    2a7c:	e6 2a       	or	r14, r22
    2a7e:	f7 2a       	or	r15, r23
    2a80:	08 2b       	or	r16, r24
    2a82:	19 2b       	or	r17, r25
    2a84:	ed 82       	std	Y+5, r14	; 0x05
    2a86:	fe 82       	std	Y+6, r15	; 0x06
    2a88:	0f 83       	std	Y+7, r16	; 0x07
    2a8a:	18 87       	std	Y+8, r17	; 0x08
    2a8c:	8e e1       	ldi	r24, 0x1E	; 30
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	8e 1b       	sub	r24, r30
    2a92:	9f 0b       	sbc	r25, r31
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	12 c0       	rjmp	.+36     	; 0x2abe <__floatunsisf+0xe0>
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	81 f0       	breq	.+32     	; 0x2abe <__floatunsisf+0xe0>
    2a9e:	0e 2e       	mov	r0, r30
    2aa0:	04 c0       	rjmp	.+8      	; 0x2aaa <__floatunsisf+0xcc>
    2aa2:	ee 0c       	add	r14, r14
    2aa4:	ff 1c       	adc	r15, r15
    2aa6:	00 1f       	adc	r16, r16
    2aa8:	11 1f       	adc	r17, r17
    2aaa:	0a 94       	dec	r0
    2aac:	d2 f7       	brpl	.-12     	; 0x2aa2 <__floatunsisf+0xc4>
    2aae:	ed 82       	std	Y+5, r14	; 0x05
    2ab0:	fe 82       	std	Y+6, r15	; 0x06
    2ab2:	0f 83       	std	Y+7, r16	; 0x07
    2ab4:	18 87       	std	Y+8, r17	; 0x08
    2ab6:	ce 1a       	sub	r12, r30
    2ab8:	df 0a       	sbc	r13, r31
    2aba:	cb 82       	std	Y+3, r12	; 0x03
    2abc:	dc 82       	std	Y+4, r13	; 0x04
    2abe:	ce 01       	movw	r24, r28
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__pack_f>
    2ac6:	28 96       	adiw	r28, 0x08	; 8
    2ac8:	e8 e0       	ldi	r30, 0x08	; 8
    2aca:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x14>

00002ace <__clzsi2>:
    2ace:	af 92       	push	r10
    2ad0:	bf 92       	push	r11
    2ad2:	cf 92       	push	r12
    2ad4:	df 92       	push	r13
    2ad6:	ef 92       	push	r14
    2ad8:	ff 92       	push	r15
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	7b 01       	movw	r14, r22
    2ae0:	8c 01       	movw	r16, r24
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	e8 16       	cp	r14, r24
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	f8 06       	cpc	r15, r24
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	08 07       	cpc	r16, r24
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	18 07       	cpc	r17, r24
    2af2:	58 f4       	brcc	.+22     	; 0x2b0a <__clzsi2+0x3c>
    2af4:	ef ef       	ldi	r30, 0xFF	; 255
    2af6:	ee 16       	cp	r14, r30
    2af8:	f1 04       	cpc	r15, r1
    2afa:	01 05       	cpc	r16, r1
    2afc:	11 05       	cpc	r17, r1
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <__clzsi2+0x34>
    2b00:	90 f4       	brcc	.+36     	; 0x2b26 <__clzsi2+0x58>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	dc 01       	movw	r26, r24
    2b08:	17 c0       	rjmp	.+46     	; 0x2b38 <__clzsi2+0x6a>
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	ef 16       	cp	r14, r31
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	ff 06       	cpc	r15, r31
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	0f 07       	cpc	r16, r31
    2b16:	f1 e0       	ldi	r31, 0x01	; 1
    2b18:	1f 07       	cpc	r17, r31
    2b1a:	50 f4       	brcc	.+20     	; 0x2b30 <__clzsi2+0x62>
    2b1c:	80 e1       	ldi	r24, 0x10	; 16
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	09 c0       	rjmp	.+18     	; 0x2b38 <__clzsi2+0x6a>
    2b26:	88 e0       	ldi	r24, 0x08	; 8
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <__clzsi2+0x6a>
    2b30:	88 e1       	ldi	r24, 0x18	; 24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	20 e2       	ldi	r18, 0x20	; 32
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	28 1b       	sub	r18, r24
    2b42:	39 0b       	sbc	r19, r25
    2b44:	4a 0b       	sbc	r20, r26
    2b46:	5b 0b       	sbc	r21, r27
    2b48:	57 01       	movw	r10, r14
    2b4a:	68 01       	movw	r12, r16
    2b4c:	04 c0       	rjmp	.+8      	; 0x2b56 <__clzsi2+0x88>
    2b4e:	d6 94       	lsr	r13
    2b50:	c7 94       	ror	r12
    2b52:	b7 94       	ror	r11
    2b54:	a7 94       	ror	r10
    2b56:	8a 95       	dec	r24
    2b58:	d2 f7       	brpl	.-12     	; 0x2b4e <__clzsi2+0x80>
    2b5a:	d6 01       	movw	r26, r12
    2b5c:	c5 01       	movw	r24, r10
    2b5e:	89 5c       	subi	r24, 0xC9	; 201
    2b60:	9f 4d       	sbci	r25, 0xDF	; 223
    2b62:	fc 01       	movw	r30, r24
    2b64:	80 81       	ld	r24, Z
    2b66:	28 1b       	sub	r18, r24
    2b68:	31 09       	sbc	r19, r1
    2b6a:	41 09       	sbc	r20, r1
    2b6c:	51 09       	sbc	r21, r1
    2b6e:	c9 01       	movw	r24, r18
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	08 95       	ret

00002b82 <__pack_f>:
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	fc 01       	movw	r30, r24
    2b90:	24 81       	ldd	r18, Z+4	; 0x04
    2b92:	35 81       	ldd	r19, Z+5	; 0x05
    2b94:	46 81       	ldd	r20, Z+6	; 0x06
    2b96:	57 81       	ldd	r21, Z+7	; 0x07
    2b98:	61 81       	ldd	r22, Z+1	; 0x01
    2b9a:	80 81       	ld	r24, Z
    2b9c:	82 30       	cpi	r24, 0x02	; 2
    2b9e:	20 f4       	brcc	.+8      	; 0x2ba8 <__pack_f+0x26>
    2ba0:	40 61       	ori	r20, 0x10	; 16
    2ba2:	ef ef       	ldi	r30, 0xFF	; 255
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	a3 c0       	rjmp	.+326    	; 0x2cee <__pack_f+0x16c>
    2ba8:	84 30       	cpi	r24, 0x04	; 4
    2baa:	09 f4       	brne	.+2      	; 0x2bae <__pack_f+0x2c>
    2bac:	9b c0       	rjmp	.+310    	; 0x2ce4 <__pack_f+0x162>
    2bae:	82 30       	cpi	r24, 0x02	; 2
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <__pack_f+0x32>
    2bb2:	92 c0       	rjmp	.+292    	; 0x2cd8 <__pack_f+0x156>
    2bb4:	21 15       	cp	r18, r1
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	41 05       	cpc	r20, r1
    2bba:	51 05       	cpc	r21, r1
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__pack_f+0x3e>
    2bbe:	8f c0       	rjmp	.+286    	; 0x2cde <__pack_f+0x15c>
    2bc0:	02 80       	ldd	r0, Z+2	; 0x02
    2bc2:	f3 81       	ldd	r31, Z+3	; 0x03
    2bc4:	e0 2d       	mov	r30, r0
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	e2 38       	cpi	r30, 0x82	; 130
    2bca:	f8 07       	cpc	r31, r24
    2bcc:	0c f0       	brlt	.+2      	; 0x2bd0 <__pack_f+0x4e>
    2bce:	5a c0       	rjmp	.+180    	; 0x2c84 <__pack_f+0x102>
    2bd0:	c2 e8       	ldi	r28, 0x82	; 130
    2bd2:	df ef       	ldi	r29, 0xFF	; 255
    2bd4:	ce 1b       	sub	r28, r30
    2bd6:	df 0b       	sbc	r29, r31
    2bd8:	ca 31       	cpi	r28, 0x1A	; 26
    2bda:	d1 05       	cpc	r29, r1
    2bdc:	6c f5       	brge	.+90     	; 0x2c38 <__pack_f+0xb6>
    2bde:	79 01       	movw	r14, r18
    2be0:	8a 01       	movw	r16, r20
    2be2:	0c 2e       	mov	r0, r28
    2be4:	04 c0       	rjmp	.+8      	; 0x2bee <__pack_f+0x6c>
    2be6:	16 95       	lsr	r17
    2be8:	07 95       	ror	r16
    2bea:	f7 94       	ror	r15
    2bec:	e7 94       	ror	r14
    2bee:	0a 94       	dec	r0
    2bf0:	d2 f7       	brpl	.-12     	; 0x2be6 <__pack_f+0x64>
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e0       	ldi	r26, 0x00	; 0
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	0c 2e       	mov	r0, r28
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <__pack_f+0x84>
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	aa 1f       	adc	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	0a 94       	dec	r0
    2c08:	d2 f7       	brpl	.-12     	; 0x2bfe <__pack_f+0x7c>
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	a1 09       	sbc	r26, r1
    2c0e:	b1 09       	sbc	r27, r1
    2c10:	82 23       	and	r24, r18
    2c12:	93 23       	and	r25, r19
    2c14:	a4 23       	and	r26, r20
    2c16:	b5 23       	and	r27, r21
    2c18:	21 e0       	ldi	r18, 0x01	; 1
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	a1 05       	cpc	r26, r1
    2c24:	b1 05       	cpc	r27, r1
    2c26:	19 f4       	brne	.+6      	; 0x2c2e <__pack_f+0xac>
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	a9 01       	movw	r20, r18
    2c2e:	2e 29       	or	r18, r14
    2c30:	3f 29       	or	r19, r15
    2c32:	40 2b       	or	r20, r16
    2c34:	51 2b       	or	r21, r17
    2c36:	03 c0       	rjmp	.+6      	; 0x2c3e <__pack_f+0xbc>
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	a9 01       	movw	r20, r18
    2c3e:	da 01       	movw	r26, r20
    2c40:	c9 01       	movw	r24, r18
    2c42:	8f 77       	andi	r24, 0x7F	; 127
    2c44:	90 70       	andi	r25, 0x00	; 0
    2c46:	a0 70       	andi	r26, 0x00	; 0
    2c48:	b0 70       	andi	r27, 0x00	; 0
    2c4a:	80 34       	cpi	r24, 0x40	; 64
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	a1 05       	cpc	r26, r1
    2c50:	b1 05       	cpc	r27, r1
    2c52:	39 f4       	brne	.+14     	; 0x2c62 <__pack_f+0xe0>
    2c54:	27 ff       	sbrs	r18, 7
    2c56:	09 c0       	rjmp	.+18     	; 0x2c6a <__pack_f+0xe8>
    2c58:	20 5c       	subi	r18, 0xC0	; 192
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c60:	04 c0       	rjmp	.+8      	; 0x2c6a <__pack_f+0xe8>
    2c62:	21 5c       	subi	r18, 0xC1	; 193
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	4f 4f       	sbci	r20, 0xFF	; 255
    2c68:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6a:	e1 e0       	ldi	r30, 0x01	; 1
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	20 30       	cpi	r18, 0x00	; 0
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	38 07       	cpc	r19, r24
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	48 07       	cpc	r20, r24
    2c78:	80 e4       	ldi	r24, 0x40	; 64
    2c7a:	58 07       	cpc	r21, r24
    2c7c:	28 f5       	brcc	.+74     	; 0x2cc8 <__pack_f+0x146>
    2c7e:	e0 e0       	ldi	r30, 0x00	; 0
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	22 c0       	rjmp	.+68     	; 0x2cc8 <__pack_f+0x146>
    2c84:	e0 38       	cpi	r30, 0x80	; 128
    2c86:	f1 05       	cpc	r31, r1
    2c88:	6c f5       	brge	.+90     	; 0x2ce4 <__pack_f+0x162>
    2c8a:	e1 58       	subi	r30, 0x81	; 129
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	da 01       	movw	r26, r20
    2c90:	c9 01       	movw	r24, r18
    2c92:	8f 77       	andi	r24, 0x7F	; 127
    2c94:	90 70       	andi	r25, 0x00	; 0
    2c96:	a0 70       	andi	r26, 0x00	; 0
    2c98:	b0 70       	andi	r27, 0x00	; 0
    2c9a:	80 34       	cpi	r24, 0x40	; 64
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	a1 05       	cpc	r26, r1
    2ca0:	b1 05       	cpc	r27, r1
    2ca2:	39 f4       	brne	.+14     	; 0x2cb2 <__pack_f+0x130>
    2ca4:	27 ff       	sbrs	r18, 7
    2ca6:	09 c0       	rjmp	.+18     	; 0x2cba <__pack_f+0x138>
    2ca8:	20 5c       	subi	r18, 0xC0	; 192
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	4f 4f       	sbci	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	04 c0       	rjmp	.+8      	; 0x2cba <__pack_f+0x138>
    2cb2:	21 5c       	subi	r18, 0xC1	; 193
    2cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb6:	4f 4f       	sbci	r20, 0xFF	; 255
    2cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cba:	57 ff       	sbrs	r21, 7
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <__pack_f+0x146>
    2cbe:	56 95       	lsr	r21
    2cc0:	47 95       	ror	r20
    2cc2:	37 95       	ror	r19
    2cc4:	27 95       	ror	r18
    2cc6:	31 96       	adiw	r30, 0x01	; 1
    2cc8:	87 e0       	ldi	r24, 0x07	; 7
    2cca:	56 95       	lsr	r21
    2ccc:	47 95       	ror	r20
    2cce:	37 95       	ror	r19
    2cd0:	27 95       	ror	r18
    2cd2:	8a 95       	dec	r24
    2cd4:	d1 f7       	brne	.-12     	; 0x2cca <__pack_f+0x148>
    2cd6:	0b c0       	rjmp	.+22     	; 0x2cee <__pack_f+0x16c>
    2cd8:	e0 e0       	ldi	r30, 0x00	; 0
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <__pack_f+0x166>
    2cde:	e0 e0       	ldi	r30, 0x00	; 0
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <__pack_f+0x16c>
    2ce4:	ef ef       	ldi	r30, 0xFF	; 255
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	a9 01       	movw	r20, r18
    2cee:	8e 2f       	mov	r24, r30
    2cf0:	87 95       	ror	r24
    2cf2:	88 27       	eor	r24, r24
    2cf4:	87 95       	ror	r24
    2cf6:	94 2f       	mov	r25, r20
    2cf8:	9f 77       	andi	r25, 0x7F	; 127
    2cfa:	67 95       	ror	r22
    2cfc:	66 27       	eor	r22, r22
    2cfe:	67 95       	ror	r22
    2d00:	e6 95       	lsr	r30
    2d02:	e2 2e       	mov	r14, r18
    2d04:	a9 2f       	mov	r26, r25
    2d06:	a8 2b       	or	r26, r24
    2d08:	fe 2f       	mov	r31, r30
    2d0a:	f6 2b       	or	r31, r22
    2d0c:	62 2f       	mov	r22, r18
    2d0e:	73 2f       	mov	r23, r19
    2d10:	8a 2f       	mov	r24, r26
    2d12:	9f 2f       	mov	r25, r31
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	e6 e0       	ldi	r30, 0x06	; 6
    2d1a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

00002d1e <__unpack_f>:
    2d1e:	dc 01       	movw	r26, r24
    2d20:	fb 01       	movw	r30, r22
    2d22:	2c 91       	ld	r18, X
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	3c 91       	ld	r19, X
    2d28:	11 97       	sbiw	r26, 0x01	; 1
    2d2a:	12 96       	adiw	r26, 0x02	; 2
    2d2c:	8c 91       	ld	r24, X
    2d2e:	12 97       	sbiw	r26, 0x02	; 2
    2d30:	48 2f       	mov	r20, r24
    2d32:	4f 77       	andi	r20, 0x7F	; 127
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	98 2f       	mov	r25, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	99 27       	eor	r25, r25
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	13 96       	adiw	r26, 0x03	; 3
    2d40:	6c 91       	ld	r22, X
    2d42:	13 97       	sbiw	r26, 0x03	; 3
    2d44:	86 2f       	mov	r24, r22
    2d46:	88 0f       	add	r24, r24
    2d48:	89 2b       	or	r24, r25
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	66 1f       	adc	r22, r22
    2d4e:	66 27       	eor	r22, r22
    2d50:	66 1f       	adc	r22, r22
    2d52:	61 83       	std	Z+1, r22	; 0x01
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	39 f5       	brne	.+78     	; 0x2da6 <__unpack_f+0x88>
    2d58:	21 15       	cp	r18, r1
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	41 05       	cpc	r20, r1
    2d5e:	51 05       	cpc	r21, r1
    2d60:	11 f4       	brne	.+4      	; 0x2d66 <__unpack_f+0x48>
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	29 c0       	rjmp	.+82     	; 0x2db8 <__unpack_f+0x9a>
    2d66:	82 e8       	ldi	r24, 0x82	; 130
    2d68:	9f ef       	ldi	r25, 0xFF	; 255
    2d6a:	82 83       	std	Z+2, r24	; 0x02
    2d6c:	93 83       	std	Z+3, r25	; 0x03
    2d6e:	67 e0       	ldi	r22, 0x07	; 7
    2d70:	22 0f       	add	r18, r18
    2d72:	33 1f       	adc	r19, r19
    2d74:	44 1f       	adc	r20, r20
    2d76:	55 1f       	adc	r21, r21
    2d78:	6a 95       	dec	r22
    2d7a:	d1 f7       	brne	.-12     	; 0x2d70 <__unpack_f+0x52>
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	80 83       	st	Z, r24
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <__unpack_f+0x76>
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	44 1f       	adc	r20, r20
    2d88:	55 1f       	adc	r21, r21
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	82 83       	std	Z+2, r24	; 0x02
    2d92:	93 83       	std	Z+3, r25	; 0x03
    2d94:	20 30       	cpi	r18, 0x00	; 0
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	38 07       	cpc	r19, r24
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	48 07       	cpc	r20, r24
    2d9e:	80 e4       	ldi	r24, 0x40	; 64
    2da0:	58 07       	cpc	r21, r24
    2da2:	78 f3       	brcs	.-34     	; 0x2d82 <__unpack_f+0x64>
    2da4:	20 c0       	rjmp	.+64     	; 0x2de6 <__unpack_f+0xc8>
    2da6:	8f 3f       	cpi	r24, 0xFF	; 255
    2da8:	91 05       	cpc	r25, r1
    2daa:	79 f4       	brne	.+30     	; 0x2dca <__unpack_f+0xac>
    2dac:	21 15       	cp	r18, r1
    2dae:	31 05       	cpc	r19, r1
    2db0:	41 05       	cpc	r20, r1
    2db2:	51 05       	cpc	r21, r1
    2db4:	19 f4       	brne	.+6      	; 0x2dbc <__unpack_f+0x9e>
    2db6:	84 e0       	ldi	r24, 0x04	; 4
    2db8:	80 83       	st	Z, r24
    2dba:	08 95       	ret
    2dbc:	44 ff       	sbrs	r20, 4
    2dbe:	03 c0       	rjmp	.+6      	; 0x2dc6 <__unpack_f+0xa8>
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	80 83       	st	Z, r24
    2dc4:	10 c0       	rjmp	.+32     	; 0x2de6 <__unpack_f+0xc8>
    2dc6:	10 82       	st	Z, r1
    2dc8:	0e c0       	rjmp	.+28     	; 0x2de6 <__unpack_f+0xc8>
    2dca:	8f 57       	subi	r24, 0x7F	; 127
    2dcc:	90 40       	sbci	r25, 0x00	; 0
    2dce:	82 83       	std	Z+2, r24	; 0x02
    2dd0:	93 83       	std	Z+3, r25	; 0x03
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	80 83       	st	Z, r24
    2dd6:	87 e0       	ldi	r24, 0x07	; 7
    2dd8:	22 0f       	add	r18, r18
    2dda:	33 1f       	adc	r19, r19
    2ddc:	44 1f       	adc	r20, r20
    2dde:	55 1f       	adc	r21, r21
    2de0:	8a 95       	dec	r24
    2de2:	d1 f7       	brne	.-12     	; 0x2dd8 <__unpack_f+0xba>
    2de4:	50 64       	ori	r21, 0x40	; 64
    2de6:	24 83       	std	Z+4, r18	; 0x04
    2de8:	35 83       	std	Z+5, r19	; 0x05
    2dea:	46 83       	std	Z+6, r20	; 0x06
    2dec:	57 83       	std	Z+7, r21	; 0x07
    2dee:	08 95       	ret

00002df0 <__fpcmp_parts_f>:
    2df0:	fc 01       	movw	r30, r24
    2df2:	db 01       	movw	r26, r22
    2df4:	90 81       	ld	r25, Z
    2df6:	92 30       	cpi	r25, 0x02	; 2
    2df8:	08 f4       	brcc	.+2      	; 0x2dfc <__fpcmp_parts_f+0xc>
    2dfa:	49 c0       	rjmp	.+146    	; 0x2e8e <__fpcmp_parts_f+0x9e>
    2dfc:	8c 91       	ld	r24, X
    2dfe:	82 30       	cpi	r24, 0x02	; 2
    2e00:	08 f4       	brcc	.+2      	; 0x2e04 <__fpcmp_parts_f+0x14>
    2e02:	45 c0       	rjmp	.+138    	; 0x2e8e <__fpcmp_parts_f+0x9e>
    2e04:	94 30       	cpi	r25, 0x04	; 4
    2e06:	51 f4       	brne	.+20     	; 0x2e1c <__fpcmp_parts_f+0x2c>
    2e08:	61 81       	ldd	r22, Z+1	; 0x01
    2e0a:	84 30       	cpi	r24, 0x04	; 4
    2e0c:	b1 f5       	brne	.+108    	; 0x2e7a <__fpcmp_parts_f+0x8a>
    2e0e:	11 96       	adiw	r26, 0x01	; 1
    2e10:	2c 91       	ld	r18, X
    2e12:	11 97       	sbiw	r26, 0x01	; 1
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	26 1b       	sub	r18, r22
    2e18:	31 09       	sbc	r19, r1
    2e1a:	41 c0       	rjmp	.+130    	; 0x2e9e <__fpcmp_parts_f+0xae>
    2e1c:	84 30       	cpi	r24, 0x04	; 4
    2e1e:	21 f0       	breq	.+8      	; 0x2e28 <__fpcmp_parts_f+0x38>
    2e20:	92 30       	cpi	r25, 0x02	; 2
    2e22:	41 f4       	brne	.+16     	; 0x2e34 <__fpcmp_parts_f+0x44>
    2e24:	82 30       	cpi	r24, 0x02	; 2
    2e26:	b1 f1       	breq	.+108    	; 0x2e94 <__fpcmp_parts_f+0xa4>
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	8c 91       	ld	r24, X
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	88 23       	and	r24, r24
    2e30:	a1 f1       	breq	.+104    	; 0x2e9a <__fpcmp_parts_f+0xaa>
    2e32:	2d c0       	rjmp	.+90     	; 0x2e8e <__fpcmp_parts_f+0x9e>
    2e34:	61 81       	ldd	r22, Z+1	; 0x01
    2e36:	82 30       	cpi	r24, 0x02	; 2
    2e38:	01 f1       	breq	.+64     	; 0x2e7a <__fpcmp_parts_f+0x8a>
    2e3a:	11 96       	adiw	r26, 0x01	; 1
    2e3c:	8c 91       	ld	r24, X
    2e3e:	11 97       	sbiw	r26, 0x01	; 1
    2e40:	68 17       	cp	r22, r24
    2e42:	d9 f4       	brne	.+54     	; 0x2e7a <__fpcmp_parts_f+0x8a>
    2e44:	22 81       	ldd	r18, Z+2	; 0x02
    2e46:	33 81       	ldd	r19, Z+3	; 0x03
    2e48:	12 96       	adiw	r26, 0x02	; 2
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	9c 91       	ld	r25, X
    2e4e:	13 97       	sbiw	r26, 0x03	; 3
    2e50:	82 17       	cp	r24, r18
    2e52:	93 07       	cpc	r25, r19
    2e54:	94 f0       	brlt	.+36     	; 0x2e7a <__fpcmp_parts_f+0x8a>
    2e56:	28 17       	cp	r18, r24
    2e58:	39 07       	cpc	r19, r25
    2e5a:	bc f0       	brlt	.+46     	; 0x2e8a <__fpcmp_parts_f+0x9a>
    2e5c:	24 81       	ldd	r18, Z+4	; 0x04
    2e5e:	35 81       	ldd	r19, Z+5	; 0x05
    2e60:	46 81       	ldd	r20, Z+6	; 0x06
    2e62:	57 81       	ldd	r21, Z+7	; 0x07
    2e64:	14 96       	adiw	r26, 0x04	; 4
    2e66:	8d 91       	ld	r24, X+
    2e68:	9d 91       	ld	r25, X+
    2e6a:	0d 90       	ld	r0, X+
    2e6c:	bc 91       	ld	r27, X
    2e6e:	a0 2d       	mov	r26, r0
    2e70:	82 17       	cp	r24, r18
    2e72:	93 07       	cpc	r25, r19
    2e74:	a4 07       	cpc	r26, r20
    2e76:	b5 07       	cpc	r27, r21
    2e78:	18 f4       	brcc	.+6      	; 0x2e80 <__fpcmp_parts_f+0x90>
    2e7a:	66 23       	and	r22, r22
    2e7c:	41 f0       	breq	.+16     	; 0x2e8e <__fpcmp_parts_f+0x9e>
    2e7e:	0d c0       	rjmp	.+26     	; 0x2e9a <__fpcmp_parts_f+0xaa>
    2e80:	28 17       	cp	r18, r24
    2e82:	39 07       	cpc	r19, r25
    2e84:	4a 07       	cpc	r20, r26
    2e86:	5b 07       	cpc	r21, r27
    2e88:	28 f4       	brcc	.+10     	; 0x2e94 <__fpcmp_parts_f+0xa4>
    2e8a:	66 23       	and	r22, r22
    2e8c:	31 f0       	breq	.+12     	; 0x2e9a <__fpcmp_parts_f+0xaa>
    2e8e:	21 e0       	ldi	r18, 0x01	; 1
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <__fpcmp_parts_f+0xae>
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <__fpcmp_parts_f+0xae>
    2e9a:	2f ef       	ldi	r18, 0xFF	; 255
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	c9 01       	movw	r24, r18
    2ea0:	08 95       	ret

00002ea2 <__mulsi3>:
    2ea2:	62 9f       	mul	r22, r18
    2ea4:	d0 01       	movw	r26, r0
    2ea6:	73 9f       	mul	r23, r19
    2ea8:	f0 01       	movw	r30, r0
    2eaa:	82 9f       	mul	r24, r18
    2eac:	e0 0d       	add	r30, r0
    2eae:	f1 1d       	adc	r31, r1
    2eb0:	64 9f       	mul	r22, r20
    2eb2:	e0 0d       	add	r30, r0
    2eb4:	f1 1d       	adc	r31, r1
    2eb6:	92 9f       	mul	r25, r18
    2eb8:	f0 0d       	add	r31, r0
    2eba:	83 9f       	mul	r24, r19
    2ebc:	f0 0d       	add	r31, r0
    2ebe:	74 9f       	mul	r23, r20
    2ec0:	f0 0d       	add	r31, r0
    2ec2:	65 9f       	mul	r22, r21
    2ec4:	f0 0d       	add	r31, r0
    2ec6:	99 27       	eor	r25, r25
    2ec8:	72 9f       	mul	r23, r18
    2eca:	b0 0d       	add	r27, r0
    2ecc:	e1 1d       	adc	r30, r1
    2ece:	f9 1f       	adc	r31, r25
    2ed0:	63 9f       	mul	r22, r19
    2ed2:	b0 0d       	add	r27, r0
    2ed4:	e1 1d       	adc	r30, r1
    2ed6:	f9 1f       	adc	r31, r25
    2ed8:	bd 01       	movw	r22, r26
    2eda:	cf 01       	movw	r24, r30
    2edc:	11 24       	eor	r1, r1
    2ede:	08 95       	ret

00002ee0 <__udivmodhi4>:
    2ee0:	aa 1b       	sub	r26, r26
    2ee2:	bb 1b       	sub	r27, r27
    2ee4:	51 e1       	ldi	r21, 0x11	; 17
    2ee6:	07 c0       	rjmp	.+14     	; 0x2ef6 <__udivmodhi4_ep>

00002ee8 <__udivmodhi4_loop>:
    2ee8:	aa 1f       	adc	r26, r26
    2eea:	bb 1f       	adc	r27, r27
    2eec:	a6 17       	cp	r26, r22
    2eee:	b7 07       	cpc	r27, r23
    2ef0:	10 f0       	brcs	.+4      	; 0x2ef6 <__udivmodhi4_ep>
    2ef2:	a6 1b       	sub	r26, r22
    2ef4:	b7 0b       	sbc	r27, r23

00002ef6 <__udivmodhi4_ep>:
    2ef6:	88 1f       	adc	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	5a 95       	dec	r21
    2efc:	a9 f7       	brne	.-22     	; 0x2ee8 <__udivmodhi4_loop>
    2efe:	80 95       	com	r24
    2f00:	90 95       	com	r25
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	08 95       	ret

00002f08 <__divmodhi4>:
    2f08:	97 fb       	bst	r25, 7
    2f0a:	09 2e       	mov	r0, r25
    2f0c:	07 26       	eor	r0, r23
    2f0e:	0a d0       	rcall	.+20     	; 0x2f24 <__divmodhi4_neg1>
    2f10:	77 fd       	sbrc	r23, 7
    2f12:	04 d0       	rcall	.+8      	; 0x2f1c <__divmodhi4_neg2>
    2f14:	e5 df       	rcall	.-54     	; 0x2ee0 <__udivmodhi4>
    2f16:	06 d0       	rcall	.+12     	; 0x2f24 <__divmodhi4_neg1>
    2f18:	00 20       	and	r0, r0
    2f1a:	1a f4       	brpl	.+6      	; 0x2f22 <__divmodhi4_exit>

00002f1c <__divmodhi4_neg2>:
    2f1c:	70 95       	com	r23
    2f1e:	61 95       	neg	r22
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255

00002f22 <__divmodhi4_exit>:
    2f22:	08 95       	ret

00002f24 <__divmodhi4_neg1>:
    2f24:	f6 f7       	brtc	.-4      	; 0x2f22 <__divmodhi4_exit>
    2f26:	90 95       	com	r25
    2f28:	81 95       	neg	r24
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	08 95       	ret

00002f2e <__udivmodsi4>:
    2f2e:	a1 e2       	ldi	r26, 0x21	; 33
    2f30:	1a 2e       	mov	r1, r26
    2f32:	aa 1b       	sub	r26, r26
    2f34:	bb 1b       	sub	r27, r27
    2f36:	fd 01       	movw	r30, r26
    2f38:	0d c0       	rjmp	.+26     	; 0x2f54 <__udivmodsi4_ep>

00002f3a <__udivmodsi4_loop>:
    2f3a:	aa 1f       	adc	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	ee 1f       	adc	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	a2 17       	cp	r26, r18
    2f44:	b3 07       	cpc	r27, r19
    2f46:	e4 07       	cpc	r30, r20
    2f48:	f5 07       	cpc	r31, r21
    2f4a:	20 f0       	brcs	.+8      	; 0x2f54 <__udivmodsi4_ep>
    2f4c:	a2 1b       	sub	r26, r18
    2f4e:	b3 0b       	sbc	r27, r19
    2f50:	e4 0b       	sbc	r30, r20
    2f52:	f5 0b       	sbc	r31, r21

00002f54 <__udivmodsi4_ep>:
    2f54:	66 1f       	adc	r22, r22
    2f56:	77 1f       	adc	r23, r23
    2f58:	88 1f       	adc	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	1a 94       	dec	r1
    2f5e:	69 f7       	brne	.-38     	; 0x2f3a <__udivmodsi4_loop>
    2f60:	60 95       	com	r22
    2f62:	70 95       	com	r23
    2f64:	80 95       	com	r24
    2f66:	90 95       	com	r25
    2f68:	9b 01       	movw	r18, r22
    2f6a:	ac 01       	movw	r20, r24
    2f6c:	bd 01       	movw	r22, r26
    2f6e:	cf 01       	movw	r24, r30
    2f70:	08 95       	ret

00002f72 <__prologue_saves__>:
    2f72:	2f 92       	push	r2
    2f74:	3f 92       	push	r3
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	ca 1b       	sub	r28, r26
    2f9c:	db 0b       	sbc	r29, r27
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	09 94       	ijmp

00002fa4 <__epilogue_restores__>:
    2fa4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fa6:	39 88       	ldd	r3, Y+17	; 0x11
    2fa8:	48 88       	ldd	r4, Y+16	; 0x10
    2faa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fac:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fae:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fb6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fb8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fba:	df 80       	ldd	r13, Y+7	; 0x07
    2fbc:	ee 80       	ldd	r14, Y+6	; 0x06
    2fbe:	fd 80       	ldd	r15, Y+5	; 0x05
    2fc0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fc2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fc4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fc6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fc8:	ce 0f       	add	r28, r30
    2fca:	d1 1d       	adc	r29, r1
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	ed 01       	movw	r28, r26
    2fd2:	08 95       	ret

00002fd4 <do_rand>:
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    2fda:	f7 e1       	ldi	r31, 0x17	; 23
    2fdc:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__prologue_saves__+0x10>
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	68 81       	ld	r22, Y
    2fe4:	79 81       	ldd	r23, Y+1	; 0x01
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fea:	61 15       	cp	r22, r1
    2fec:	71 05       	cpc	r23, r1
    2fee:	81 05       	cpc	r24, r1
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	21 f4       	brne	.+8      	; 0x2ffc <do_rand+0x28>
    2ff4:	64 e2       	ldi	r22, 0x24	; 36
    2ff6:	79 ed       	ldi	r23, 0xD9	; 217
    2ff8:	8b e5       	ldi	r24, 0x5B	; 91
    2ffa:	97 e0       	ldi	r25, 0x07	; 7
    2ffc:	2d e1       	ldi	r18, 0x1D	; 29
    2ffe:	33 ef       	ldi	r19, 0xF3	; 243
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	0e 94 3e 18 	call	0x307c	; 0x307c <__divmodsi4>
    3008:	79 01       	movw	r14, r18
    300a:	8a 01       	movw	r16, r20
    300c:	27 ea       	ldi	r18, 0xA7	; 167
    300e:	31 e4       	ldi	r19, 0x41	; 65
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__mulsi3>
    3018:	5b 01       	movw	r10, r22
    301a:	6c 01       	movw	r12, r24
    301c:	c8 01       	movw	r24, r16
    301e:	b7 01       	movw	r22, r14
    3020:	2c ee       	ldi	r18, 0xEC	; 236
    3022:	34 ef       	ldi	r19, 0xF4	; 244
    3024:	4f ef       	ldi	r20, 0xFF	; 255
    3026:	5f ef       	ldi	r21, 0xFF	; 255
    3028:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__mulsi3>
    302c:	6a 0d       	add	r22, r10
    302e:	7b 1d       	adc	r23, r11
    3030:	8c 1d       	adc	r24, r12
    3032:	9d 1d       	adc	r25, r13
    3034:	97 ff       	sbrs	r25, 7
    3036:	04 c0       	rjmp	.+8      	; 0x3040 <do_rand+0x6c>
    3038:	61 50       	subi	r22, 0x01	; 1
    303a:	70 40       	sbci	r23, 0x00	; 0
    303c:	80 40       	sbci	r24, 0x00	; 0
    303e:	90 48       	sbci	r25, 0x80	; 128
    3040:	68 83       	st	Y, r22
    3042:	79 83       	std	Y+1, r23	; 0x01
    3044:	8a 83       	std	Y+2, r24	; 0x02
    3046:	9b 83       	std	Y+3, r25	; 0x03
    3048:	7f 77       	andi	r23, 0x7F	; 127
    304a:	cb 01       	movw	r24, r22
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	ea e0       	ldi	r30, 0x0A	; 10
    3052:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__+0x10>

00003056 <rand_r>:
    3056:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <do_rand>
    305a:	08 95       	ret

0000305c <rand>:
    305c:	87 e3       	ldi	r24, 0x37	; 55
    305e:	91 e2       	ldi	r25, 0x21	; 33
    3060:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <do_rand>
    3064:	08 95       	ret

00003066 <srand>:
    3066:	a0 e0       	ldi	r26, 0x00	; 0
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	80 93 37 21 	sts	0x2137, r24
    306e:	90 93 38 21 	sts	0x2138, r25
    3072:	a0 93 39 21 	sts	0x2139, r26
    3076:	b0 93 3a 21 	sts	0x213A, r27
    307a:	08 95       	ret

0000307c <__divmodsi4>:
    307c:	97 fb       	bst	r25, 7
    307e:	09 2e       	mov	r0, r25
    3080:	05 26       	eor	r0, r21
    3082:	0e d0       	rcall	.+28     	; 0x30a0 <__divmodsi4_neg1>
    3084:	57 fd       	sbrc	r21, 7
    3086:	04 d0       	rcall	.+8      	; 0x3090 <__divmodsi4_neg2>
    3088:	52 df       	rcall	.-348    	; 0x2f2e <__udivmodsi4>
    308a:	0a d0       	rcall	.+20     	; 0x30a0 <__divmodsi4_neg1>
    308c:	00 1c       	adc	r0, r0
    308e:	38 f4       	brcc	.+14     	; 0x309e <__divmodsi4_exit>

00003090 <__divmodsi4_neg2>:
    3090:	50 95       	com	r21
    3092:	40 95       	com	r20
    3094:	30 95       	com	r19
    3096:	21 95       	neg	r18
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	4f 4f       	sbci	r20, 0xFF	; 255
    309c:	5f 4f       	sbci	r21, 0xFF	; 255

0000309e <__divmodsi4_exit>:
    309e:	08 95       	ret

000030a0 <__divmodsi4_neg1>:
    30a0:	f6 f7       	brtc	.-4      	; 0x309e <__divmodsi4_exit>
    30a2:	90 95       	com	r25
    30a4:	80 95       	com	r24
    30a6:	70 95       	com	r23
    30a8:	61 95       	neg	r22
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	8f 4f       	sbci	r24, 0xFF	; 255
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	08 95       	ret

000030b2 <_exit>:
    30b2:	f8 94       	cli

000030b4 <__stop_program>:
    30b4:	ff cf       	rjmp	.-2      	; 0x30b4 <__stop_program>
