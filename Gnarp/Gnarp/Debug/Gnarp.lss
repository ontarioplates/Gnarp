
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00002d96  00002e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000233  00802138  00802138  00002f62  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  000036b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000bf0  00000000  00000000  00003995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006aa1  00000000  00000000  00004585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000218a  00000000  00000000  0000b026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b6d  00000000  00000000  0000d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000860  00000000  00000000  00010d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c29  00000000  00000000  00011580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002443  00000000  00000000  000131a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000d47  00000000  00000000  000155ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  00016333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_16>
      44:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_17>
      48:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_18>
      4c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e6 e9       	ldi	r30, 0x96	; 150
     18c:	fd e2       	ldi	r31, 0x2D	; 45
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 33       	cpi	r26, 0x38	; 56
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ab 36       	cpi	r26, 0x6B	; 107
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 61 05 	call	0xac2	; 0xac2 <main>
     1ae:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <configure_beat_clock_timer>:
void decrement_BPM(){
    BPM -= 1;
    configure_beat_clock_timer();
}

void configure_beat_clock_timer(){
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	ae 97       	sbiw	r28, 0x2e	; 46
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     1c8:	de 01       	movw	r26, r28
     1ca:	1f 96       	adiw	r26, 0x0f	; 15
     1cc:	e0 e0       	ldi	r30, 0x00	; 0
     1ce:	f0 e2       	ldi	r31, 0x20	; 32
     1d0:	80 e2       	ldi	r24, 0x20	; 32
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	81 50       	subi	r24, 0x01	; 1
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     1da:	80 91 00 08 	lds	r24, 0x0800
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     1e6:	1b 82       	std	Y+3, r1	; 0x03
     1e8:	1c 82       	std	Y+4, r1	; 0x04
     1ea:	1d 82       	std	Y+5, r1	; 0x05
     1ec:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     1ee:	20 91 38 21 	lds	r18, 0x2138
     1f2:	30 91 39 21 	lds	r19, 0x2139
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	78 ea       	ldi	r23, 0xA8	; 168
     1fe:	84 ed       	ldi	r24, 0xD4	; 212
     200:	95 e5       	ldi	r25, 0x55	; 85
     202:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
     206:	2f 83       	std	Y+7, r18	; 0x07
     208:	38 87       	std	Y+8, r19	; 0x08
     20a:	49 87       	std	Y+9, r20	; 0x09
     20c:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     20e:	6f 81       	ldd	r22, Y+7	; 0x07
     210:	78 85       	ldd	r23, Y+8	; 0x08
     212:	89 85       	ldd	r24, Y+9	; 0x09
     214:	9a 85       	ldd	r25, Y+10	; 0x0a
     216:	ea 81       	ldd	r30, Y+2	; 0x02
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	ee 0f       	add	r30, r30
     21c:	ff 1f       	adc	r31, r31
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	8e 01       	movw	r16, r28
     224:	0f 5f       	subi	r16, 0xFF	; 255
     226:	1f 4f       	sbci	r17, 0xFF	; 255
     228:	11 c0       	rjmp	.+34     	; 0x24c <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	08 f0       	brcs	.+2      	; 0x238 <configure_beat_clock_timer+0x82>
     236:	49 c0       	rjmp	.+146    	; 0x2ca <configure_beat_clock_timer+0x114>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     238:	6f 81       	ldd	r22, Y+7	; 0x07
     23a:	78 85       	ldd	r23, Y+8	; 0x08
     23c:	89 85       	ldd	r24, Y+9	; 0x09
     23e:	9a 85       	ldd	r25, Y+10	; 0x0a
     240:	ea 81       	ldd	r30, Y+2	; 0x02
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	e0 0f       	add	r30, r16
     24e:	f1 1f       	adc	r31, r17
     250:	26 85       	ldd	r18, Z+14	; 0x0e
     252:	37 85       	ldd	r19, Z+15	; 0x0f
     254:	40 89       	ldd	r20, Z+16	; 0x10
     256:	51 89       	ldd	r21, Z+17	; 0x11
     258:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
     25c:	2b 87       	std	Y+11, r18	; 0x0b
     25e:	3c 87       	std	Y+12, r19	; 0x0c
     260:	4d 87       	std	Y+13, r20	; 0x0d
     262:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     264:	8b 85       	ldd	r24, Y+11	; 0x0b
     266:	9c 85       	ldd	r25, Y+12	; 0x0c
     268:	ad 85       	ldd	r26, Y+13	; 0x0d
     26a:	be 85       	ldd	r27, Y+14	; 0x0e
     26c:	80 30       	cpi	r24, 0x00	; 0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	92 07       	cpc	r25, r18
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	a2 07       	cpc	r26, r18
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	b2 07       	cpc	r27, r18
     27a:	b8 f6       	brcc	.-82     	; 0x22a <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	18 e0       	ldi	r17, 0x08	; 8
     280:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     284:	f8 01       	movw	r30, r16
     286:	10 a2       	std	Z+32, r1	; 0x20
     288:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     28a:	8b 85       	ldd	r24, Y+11	; 0x0b
     28c:	9c 85       	ldd	r25, Y+12	; 0x0c
     28e:	ad 85       	ldd	r26, Y+13	; 0x0d
     290:	be 85       	ldd	r27, Y+14	; 0x0e
     292:	80 a7       	std	Z+40, r24	; 0x28
     294:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     296:	8b 85       	ldd	r24, Y+11	; 0x0b
     298:	9c 85       	ldd	r25, Y+12	; 0x0c
     29a:	ad 85       	ldd	r26, Y+13	; 0x0d
     29c:	be 85       	ldd	r27, Y+14	; 0x0e
     29e:	68 e1       	ldi	r22, 0x18	; 24
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__udivmodhi4>
     2a6:	66 a7       	std	Z+46, r22	; 0x2e
     2a8:	77 a7       	std	Z+47, r23	; 0x2f
    
    //alert the sequencer to the change
    adjust_sequencer_to_bpm(get_sequencer());
     2aa:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>
     2ae:	0e 94 77 0a 	call	0x14ee	; 0x14ee <adjust_sequencer_to_bpm>
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2b2:	80 91 01 08 	lds	r24, 0x0801
     2b6:	80 61       	ori	r24, 0x10	; 16
     2b8:	f8 01       	movw	r30, r16
     2ba:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2bc:	80 91 01 08 	lds	r24, 0x0801
     2c0:	80 68       	ori	r24, 0x80	; 128
     2c2:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2ca:	ae 96       	adiw	r28, 0x2e	; 46
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cf 91       	pop	r28
     2d2:	df 91       	pop	r29
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <__vector_16>:
#include "beat_clock.h"

ISR(TCC0_CCA_vect){
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     2e8:	e0 e0       	ldi	r30, 0x00	; 0
     2ea:	f8 e0       	ldi	r31, 0x08	; 8
     2ec:	10 a2       	std	Z+32, r1	; 0x20
     2ee:	11 a2       	std	Z+33, r1	; 0x21
}
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <__vector_19>:

ISR(TCC0_CCD_vect){
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <initialize_beat_clock>:

static uint16_t BPM;

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     312:	80 93 38 21 	sts	0x2138, r24
     316:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     31a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     31e:	e0 e0       	ldi	r30, 0x00	; 0
     320:	f8 e0       	ldi	r31, 0x08	; 8
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8f 73       	andi	r24, 0x3F	; 63
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	80 68       	ori	r24, 0x80	; 128
     32c:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     32e:	87 81       	ldd	r24, Z+7	; 0x07
     330:	8c 7f       	andi	r24, 0xFC	; 252
     332:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     334:	87 81       	ldd	r24, Z+7	; 0x07
     336:	82 60       	ori	r24, 0x02	; 2
     338:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     33a:	81 81       	ldd	r24, Z+1	; 0x01
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     340:	81 81       	ldd	r24, Z+1	; 0x01
     342:	80 61       	ori	r24, 0x10	; 16
     344:	81 83       	std	Z+1, r24	; 0x01
}
     346:	08 95       	ret

00000348 <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     348:	80 91 38 21 	lds	r24, 0x2138
     34c:	90 91 39 21 	lds	r25, 0x2139
     350:	08 95       	ret

00000352 <increment_BPM>:

void increment_BPM(){
    BPM += 1;
     352:	80 91 38 21 	lds	r24, 0x2138
     356:	90 91 39 21 	lds	r25, 0x2139
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	80 93 38 21 	sts	0x2138, r24
     360:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     364:	0e 94 db 00 	call	0x1b6	; 0x1b6 <configure_beat_clock_timer>
}
     368:	08 95       	ret

0000036a <decrement_BPM>:

void decrement_BPM(){
    BPM -= 1;
     36a:	80 91 38 21 	lds	r24, 0x2138
     36e:	90 91 39 21 	lds	r25, 0x2139
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	80 93 38 21 	sts	0x2138, r24
     378:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     37c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <configure_beat_clock_timer>
}
     380:	08 95       	ret

00000382 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     382:	80 91 50 21 	lds	r24, 0x2150
     386:	08 95       	ret

00000388 <get_pot_value>:
            pot_values[i] = pot_values[i] - POT_MIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot_select, uint16_t output_min, uint16_t output_max){
     388:	2f 92       	push	r2
     38a:	3f 92       	push	r3
     38c:	4f 92       	push	r4
     38e:	5f 92       	push	r5
     390:	6f 92       	push	r6
     392:	7f 92       	push	r7
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <get_pot_value+0x26>
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	6b 01       	movw	r12, r22
     3b4:	2a 01       	movw	r4, r20
    //output_max: maximum value to output
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	ea 5b       	subi	r30, 0xBA	; 186
     3c0:	fe 4d       	sbci	r31, 0xDE	; 222
     3c2:	60 81       	ld	r22, Z
     3c4:	71 81       	ldd	r23, Z+1	; 0x01
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatunsisf>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	42 e7       	ldi	r20, 0x72	; 114
     3d4:	55 e4       	ldi	r21, 0x45	; 69
     3d6:	0e 94 3e 12 	call	0x247c	; 0x247c <__divsf3>
     3da:	7b 01       	movw	r14, r22
     3dc:	8c 01       	movw	r16, r24
    temp = temp*(output_max - output_min + 1) + output_min;
     3de:	b2 01       	movw	r22, r4
     3e0:	6c 19       	sub	r22, r12
     3e2:	7d 09       	sbc	r23, r13
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatunsisf>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c8 01       	movw	r24, r16
     3f6:	b7 01       	movw	r22, r14
     3f8:	0e 94 44 11 	call	0x2288	; 0x2288 <__mulsf3>
     3fc:	7b 01       	movw	r14, r22
     3fe:	8c 01       	movw	r16, r24
     400:	b6 01       	movw	r22, r12
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatunsisf>
     40a:	d6 2e       	mov	r13, r22
     40c:	c7 2e       	mov	r12, r23
     40e:	b8 2e       	mov	r11, r24
     410:	a9 2e       	mov	r10, r25
     412:	16 01       	movw	r2, r12
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	6e 2d       	mov	r22, r14
     41a:	7f 2d       	mov	r23, r15
     41c:	80 2f       	mov	r24, r16
     41e:	91 2f       	mov	r25, r17
     420:	d6 01       	movw	r26, r12
     422:	f5 01       	movw	r30, r10
     424:	2b 2f       	mov	r18, r27
     426:	3a 2f       	mov	r19, r26
     428:	4f 2f       	mov	r20, r31
     42a:	5e 2f       	mov	r21, r30
     42c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__addsf3>
     430:	96 2e       	mov	r9, r22
     432:	87 2e       	mov	r8, r23
     434:	78 2e       	mov	r7, r24
     436:	69 2e       	mov	r6, r25
    
    if (temp > output_max)
     438:	b2 01       	movw	r22, r4
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatunsisf>
     442:	f6 2e       	mov	r15, r22
     444:	07 2f       	mov	r16, r23
     446:	18 2f       	mov	r17, r24
     448:	e9 2e       	mov	r14, r25
     44a:	a4 01       	movw	r20, r8
     44c:	93 01       	movw	r18, r6
     44e:	65 2f       	mov	r22, r21
     450:	74 2f       	mov	r23, r20
     452:	83 2f       	mov	r24, r19
     454:	92 2f       	mov	r25, r18
     456:	2f 2d       	mov	r18, r15
     458:	30 2f       	mov	r19, r16
     45a:	41 2f       	mov	r20, r17
     45c:	5e 2d       	mov	r21, r14
     45e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__gtsf2>
     462:	18 16       	cp	r1, r24
     464:	24 f0       	brlt	.+8      	; 0x46e <get_pot_value+0xe6>
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
    temp = temp*(output_max - output_min + 1) + output_min;
     466:	f9 2c       	mov	r15, r9
     468:	08 2d       	mov	r16, r8
     46a:	17 2d       	mov	r17, r7
     46c:	e6 2c       	mov	r14, r6
    
    if (temp > output_max)
        temp = output_max;
        
    if (temp < output_min)
     46e:	6f 2d       	mov	r22, r15
     470:	70 2f       	mov	r23, r16
     472:	81 2f       	mov	r24, r17
     474:	9e 2d       	mov	r25, r14
     476:	d6 01       	movw	r26, r12
     478:	f5 01       	movw	r30, r10
     47a:	2b 2f       	mov	r18, r27
     47c:	3c 2d       	mov	r19, r12
     47e:	4f 2f       	mov	r20, r31
     480:	5a 2d       	mov	r21, r10
     482:	0e 94 4c 13 	call	0x2698	; 0x2698 <__ltsf2>
     486:	87 fd       	sbrc	r24, 7
     488:	04 c0       	rjmp	.+8      	; 0x492 <get_pot_value+0x10a>
     48a:	3f 2c       	mov	r3, r15
     48c:	20 2e       	mov	r2, r16
     48e:	19 83       	std	Y+1, r17	; 0x01
     490:	ea 82       	std	Y+2, r14	; 0x02
        temp = output_min;
    
    return (uint16_t) temp;
     492:	a1 01       	movw	r20, r2
     494:	39 81       	ldd	r19, Y+1	; 0x01
     496:	2a 81       	ldd	r18, Y+2	; 0x02
     498:	65 2f       	mov	r22, r21
     49a:	72 2d       	mov	r23, r2
     49c:	83 2f       	mov	r24, r19
     49e:	92 2f       	mov	r25, r18
     4a0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__fixunssfsi>
}
     4a4:	cb 01       	movw	r24, r22
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	9f 90       	pop	r9
     4c0:	8f 90       	pop	r8
     4c2:	7f 90       	pop	r7
     4c4:	6f 90       	pop	r6
     4c6:	5f 90       	pop	r5
     4c8:	4f 90       	pop	r4
     4ca:	3f 90       	pop	r3
     4cc:	2f 90       	pop	r2
     4ce:	08 95       	ret

000004d0 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	fc 01       	movw	r30, r24
     4ea:	22 e0       	ldi	r18, 0x02	; 2
     4ec:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     4ee:	ca e0       	ldi	r28, 0x0A	; 10
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     4f2:	73 e0       	ldi	r23, 0x03	; 3
     4f4:	c7 2e       	mov	r12, r23
     4f6:	d1 2c       	mov	r13, r1
     4f8:	68 e0       	ldi	r22, 0x08	; 8
     4fa:	a6 2e       	mov	r10, r22
     4fc:	b1 2c       	mov	r11, r1
     4fe:	00 e6       	ldi	r16, 0x60	; 96
     500:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     502:	50 e4       	ldi	r21, 0x40	; 64
     504:	e5 2e       	mov	r14, r21
     506:	56 e0       	ldi	r21, 0x06	; 6
     508:	f5 2e       	mov	r15, r21
     50a:	40 ef       	ldi	r20, 0xF0	; 240
     50c:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     50e:	98 e3       	ldi	r25, 0x38	; 56
     510:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     512:	cf 01       	movw	r24, r30
     514:	be 01       	movw	r22, r28
     516:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__udivmodhi4>
     51a:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     51c:	30 97       	sbiw	r30, 0x00	; 0
     51e:	19 f4       	brne	.+6      	; 0x526 <set_seven_segment_LEDs+0x56>
     520:	22 30       	cpi	r18, 0x02	; 2
     522:	09 f0       	breq	.+2      	; 0x526 <set_seven_segment_LEDs+0x56>
            digit = 10;
     524:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     526:	c9 01       	movw	r24, r18
     528:	b6 01       	movw	r22, r12
     52a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
     52e:	b5 01       	movw	r22, r10
     530:	02 c0       	rjmp	.+4      	; 0x536 <set_seven_segment_LEDs+0x66>
     532:	66 0f       	add	r22, r22
     534:	77 1f       	adc	r23, r23
     536:	8a 95       	dec	r24
     538:	e2 f7       	brpl	.-8      	; 0x532 <set_seven_segment_LEDs+0x62>
     53a:	d8 01       	movw	r26, r16
     53c:	16 96       	adiw	r26, 0x06	; 6
     53e:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     540:	d7 01       	movw	r26, r14
     542:	16 96       	adiw	r26, 0x06	; 6
     544:	9c 92       	st	X, r9
     546:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     548:	42 95       	swap	r20
     54a:	40 7f       	andi	r20, 0xF0	; 240
     54c:	15 96       	adiw	r26, 0x05	; 5
     54e:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     550:	d8 01       	movw	r26, r16
     552:	15 96       	adiw	r26, 0x05	; 5
     554:	8c 92       	st	X, r8
     556:	15 97       	sbiw	r26, 0x05	; 5
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     55c:	25 30       	cpi	r18, 0x05	; 5
     55e:	31 05       	cpc	r19, r1
     560:	31 f0       	breq	.+12     	; 0x56e <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     562:	cf 01       	movw	r24, r30
     564:	be 01       	movw	r22, r28
     566:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__udivmodhi4>
     56a:	fb 01       	movw	r30, r22
     56c:	d2 cf       	rjmp	.-92     	; 0x512 <set_seven_segment_LEDs+0x42>
    }
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	bf 90       	pop	r11
     580:	af 90       	pop	r10
     582:	9f 90       	pop	r9
     584:	8f 90       	pop	r8
     586:	08 95       	ret

00000588 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     588:	88 23       	and	r24, r24
     58a:	21 f0       	breq	.+8      	; 0x594 <set_LEDs_on+0xc>
        PORTC.OUTCLR = 0x08;
     58c:	88 e0       	ldi	r24, 0x08	; 8
     58e:	e0 e4       	ldi	r30, 0x40	; 64
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_0)
     594:	66 23       	and	r22, r22
     596:	21 f0       	breq	.+8      	; 0x5a0 <set_LEDs_on+0x18>
        PORTD.OUTSET = 0x04;
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	e0 e6       	ldi	r30, 0x60	; 96
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	85 83       	std	Z+5, r24	; 0x05
        
    if (decimal_point_1)
     5a0:	44 23       	and	r20, r20
     5a2:	21 f0       	breq	.+8      	; 0x5ac <set_LEDs_on+0x24>
        PORTD.OUTSET = 0x01;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_2)
     5ac:	22 23       	and	r18, r18
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <set_LEDs_on+0x30>
        PORTD.OUTSET = 0x02;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	e0 e6       	ldi	r30, 0x60	; 96
     5b4:	f6 e0       	ldi	r31, 0x06	; 6
     5b6:	85 83       	std	Z+5, r24	; 0x05
     5b8:	08 95       	ret

000005ba <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     5ba:	88 23       	and	r24, r24
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <set_LEDs_off+0xc>
        PORTC.OUTSET = 0x08;
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	e0 e4       	ldi	r30, 0x40	; 64
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_0)
     5c6:	66 23       	and	r22, r22
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <set_LEDs_off+0x18>
        PORTD.OUTCLR = 0x04;
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	86 83       	std	Z+6, r24	; 0x06
        
    if (decimal_point_1)
     5d2:	44 23       	and	r20, r20
     5d4:	21 f0       	breq	.+8      	; 0x5de <set_LEDs_off+0x24>
        PORTD.OUTCLR = 0x01;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_2)
     5de:	22 23       	and	r18, r18
     5e0:	21 f0       	breq	.+8      	; 0x5ea <set_LEDs_off+0x30>
        PORTD.OUTCLR = 0x02;
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	e0 e6       	ldi	r30, 0x60	; 96
     5e6:	f6 e0       	ldi	r31, 0x06	; 6
     5e8:	86 83       	std	Z+6, r24	; 0x06
     5ea:	08 95       	ret

000005ec <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     5ec:	80 91 3e 21 	lds	r24, 0x213E
     5f0:	08 95       	ret

000005f2 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     5f2:	80 91 3f 21 	lds	r24, 0x213F
     5f6:	08 95       	ret

000005f8 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     5f8:	80 91 3c 21 	lds	r24, 0x213C
     5fc:	08 95       	ret

000005fe <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     5fe:	80 91 3d 21 	lds	r24, 0x213D
     602:	08 95       	ret

00000604 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     604:	80 91 3a 21 	lds	r24, 0x213A
     608:	08 95       	ret

0000060a <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     60a:	80 91 3b 21 	lds	r24, 0x213B
     60e:	08 95       	ret

00000610 <initialize_hardware>:

void initialize_hardware(){
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     614:	e0 e4       	ldi	r30, 0x40	; 64
     616:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     618:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     61a:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     61c:	c0 e5       	ldi	r28, 0x50	; 80
     61e:	d0 e0       	ldi	r29, 0x00	; 0
     620:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     622:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     624:	a0 e5       	ldi	r26, 0x50	; 80
     626:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     628:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     62a:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     62c:	98 ed       	ldi	r25, 0xD8	; 216
     62e:	15 c0       	rjmp	.+42     	; 0x65a <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     630:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     632:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     634:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     636:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     63a:	70 91 51 00 	lds	r23, 0x0051
     63e:	73 ff       	sbrs	r23, 3
     640:	fc cf       	rjmp	.-8      	; 0x63a <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     642:	15 96       	adiw	r26, 0x05	; 5
     644:	3c 93       	st	X, r19
     646:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     648:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     64c:	70 91 51 00 	lds	r23, 0x0051
     650:	74 ff       	sbrs	r23, 4
     652:	fc cf       	rjmp	.-8      	; 0x64c <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     654:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     656:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     65a:	70 91 40 00 	lds	r23, 0x0040
     65e:	74 30       	cpi	r23, 0x04	; 4
     660:	39 f7       	brne	.-50     	; 0x630 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     662:	f8 94       	cli
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     664:	a0 e6       	ldi	r26, 0x60	; 96
     666:	b6 e0       	ldi	r27, 0x06	; 6
     668:	80 e8       	ldi	r24, 0x80	; 128
     66a:	15 96       	adiw	r26, 0x05	; 5
     66c:	8c 93       	st	X, r24
     66e:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     670:	90 e4       	ldi	r25, 0x40	; 64
     672:	12 96       	adiw	r26, 0x02	; 2
     674:	9c 93       	st	X, r25
     676:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	8c 93       	st	X, r24
     67c:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     67e:	e0 eb       	ldi	r30, 0xB0	; 176
     680:	f9 e0       	ldi	r31, 0x09	; 9
     682:	88 e1       	ldi	r24, 0x18	; 24
     684:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     686:	90 e2       	ldi	r25, 0x20	; 32
     688:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     68a:	33 e0       	ldi	r19, 0x03	; 3
     68c:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     68e:	8f e2       	ldi	r24, 0x2F	; 47
     690:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     692:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     694:	80 91 a2 00 	lds	r24, 0x00A2
     698:	87 68       	ori	r24, 0x87	; 135
     69a:	e0 ea       	ldi	r30, 0xA0	; 160
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     6a0:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     6a2:	c0 e0       	ldi	r28, 0x00	; 0
     6a4:	d6 e0       	ldi	r29, 0x06	; 6
     6a6:	89 ef       	ldi	r24, 0xF9	; 249
     6a8:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     6aa:	e0 e0       	ldi	r30, 0x00	; 0
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6b2:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6b4:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6b6:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6bc:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6be:	80 91 00 02 	lds	r24, 0x0200
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     6c8:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     6ca:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     6cc:	12 a2       	std	Z+34, r1	; 0x22
    if (decimal_point_2)
        PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     6ce:	40 e2       	ldi	r20, 0x20	; 32
     6d0:	56 e0       	ldi	r21, 0x06	; 6
     6d2:	8c e0       	ldi	r24, 0x0C	; 12
     6d4:	fa 01       	movw	r30, r20
     6d6:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     6d8:	28 e0       	ldi	r18, 0x08	; 8
     6da:	80 e8       	ldi	r24, 0x80	; 128
     6dc:	96 e0       	ldi	r25, 0x06	; 6
     6de:	fc 01       	movw	r30, r24
     6e0:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     6e2:	fa 01       	movw	r30, r20
     6e4:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     6ea:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     6ec:	e0 e4       	ldi	r30, 0x40	; 64
     6ee:	f6 e0       	ldi	r31, 0x06	; 6
     6f0:	88 ef       	ldi	r24, 0xF8	; 248
     6f2:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     6f4:	8f e3       	ldi	r24, 0x3F	; 63
     6f6:	11 96       	adiw	r26, 0x01	; 1
     6f8:	8c 93       	st	X, r24
     6fa:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     6fc:	88 e3       	ldi	r24, 0x38	; 56
     6fe:	15 96       	adiw	r26, 0x05	; 5
     700:	8c 93       	st	X, r24
     702:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     704:	90 ef       	ldi	r25, 0xF0	; 240
     706:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     708:	16 96       	adiw	r26, 0x06	; 6
     70a:	8c 93       	st	X, r24
     70c:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	16 96       	adiw	r26, 0x06	; 6
     712:	8c 93       	st	X, r24
     714:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     716:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <read_hardware>:

void read_hardware(){
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	0f 92       	push	r0
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     736:	80 91 88 06 	lds	r24, 0x0688
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	86 95       	lsr	r24
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	09 f0       	breq	.+2      	; 0x746 <read_hardware+0x28>
     744:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     746:	80 91 28 06 	lds	r24, 0x0628
     74a:	86 95       	lsr	r24
     74c:	86 95       	lsr	r24
     74e:	80 fd       	sbrc	r24, 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <read_hardware+0x38>
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	01 c0       	rjmp	.+2      	; 0x758 <read_hardware+0x3a>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	c8 2e       	mov	r12, r24
     75a:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     75c:	80 91 28 06 	lds	r24, 0x0628
     760:	86 95       	lsr	r24
     762:	86 95       	lsr	r24
     764:	86 95       	lsr	r24
     766:	80 fd       	sbrc	r24, 0
     768:	02 c0       	rjmp	.+4      	; 0x76e <read_hardware+0x50>
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	01 c0       	rjmp	.+2      	; 0x770 <read_hardware+0x52>
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	c8 2a       	or	r12, r24
     772:	c0 92 45 21 	sts	0x2145, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     776:	60 91 44 21 	lds	r22, 0x2144
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	d0 90 43 21 	lds	r13, 0x2143
     780:	e0 e4       	ldi	r30, 0x40	; 64
     782:	f1 e2       	ldi	r31, 0x21	; 33
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	4c 2d       	mov	r20, r12
     78a:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     790:	b8 2e       	mov	r11, r24
     792:	8a 01       	movw	r16, r20
     794:	08 2e       	mov	r0, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <read_hardware+0x7e>
     798:	15 95       	asr	r17
     79a:	07 95       	ror	r16
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <read_hardware+0x7a>
     7a0:	db 01       	movw	r26, r22
     7a2:	08 2e       	mov	r0, r24
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <read_hardware+0x8c>
     7a6:	b5 95       	asr	r27
     7a8:	a7 95       	ror	r26
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <read_hardware+0x88>
     7ae:	0a 17       	cp	r16, r26
     7b0:	1b 07       	cpc	r17, r27
     7b2:	21 f4       	brne	.+8      	; 0x7bc <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     7b4:	a0 81       	ld	r26, Z
     7b6:	af 5f       	subi	r26, 0xFF	; 255
     7b8:	a0 83       	st	Z, r26
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     7bc:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     7be:	a0 81       	ld	r26, Z
     7c0:	a9 30       	cpi	r26, 0x09	; 9
     7c2:	60 f0       	brcs	.+24     	; 0x7dc <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     7c4:	d9 01       	movw	r26, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <read_hardware+0xae>
     7c8:	aa 0f       	add	r26, r26
     7ca:	bb 1f       	adc	r27, r27
     7cc:	ba 94       	dec	r11
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <read_hardware+0xaa>
     7d0:	ba 2f       	mov	r27, r26
     7d2:	b0 95       	com	r27
     7d4:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     7d6:	ac 21       	and	r26, r12
     7d8:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     7da:	10 82       	st	Z, r1
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     7e0:	83 30       	cpi	r24, 0x03	; 3
     7e2:	91 05       	cpc	r25, r1
     7e4:	a9 f6       	brne	.-86     	; 0x790 <read_hardware+0x72>
     7e6:	d0 92 43 21 	sts	0x2143, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     7ea:	c0 92 44 21 	sts	0x2144, r12
     7ee:	80 91 3a 21 	lds	r24, 0x213A
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     7f2:	d0 fe       	sbrs	r13, 0
     7f4:	0c c0       	rjmp	.+24     	; 0x80e <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     7f6:	88 23       	and	r24, r24
     7f8:	19 f0       	breq	.+6      	; 0x800 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     7fa:	10 92 3b 21 	sts	0x213B, r1
     7fe:	03 c0       	rjmp	.+6      	; 0x806 <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 3b 21 	sts	0x213B, r24
        toggle_switch_state = 1;                //set current value
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	80 93 3a 21 	sts	0x213A, r24
     80c:	0a c0       	rjmp	.+20     	; 0x822 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     80e:	88 23       	and	r24, r24
     810:	21 f0       	breq	.+8      	; 0x81a <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	80 93 3b 21 	sts	0x213B, r24
     818:	02 c0       	rjmp	.+4      	; 0x81e <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     81a:	10 92 3b 21 	sts	0x213B, r1
        toggle_switch_state = 0;                //set current value
     81e:	10 92 3a 21 	sts	0x213A, r1
     822:	80 91 3c 21 	lds	r24, 0x213C
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     826:	d1 fe       	sbrs	r13, 1
     828:	0c c0       	rjmp	.+24     	; 0x842 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     82a:	88 23       	and	r24, r24
     82c:	19 f0       	breq	.+6      	; 0x834 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     82e:	10 92 3d 21 	sts	0x213D, r1
     832:	03 c0       	rjmp	.+6      	; 0x83a <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 3d 21 	sts	0x213D, r24
        pushbutton_switch_state = 1;                //set current value
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 3c 21 	sts	0x213C, r24
     840:	0a c0       	rjmp	.+20     	; 0x856 <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     842:	88 23       	and	r24, r24
     844:	21 f0       	breq	.+8      	; 0x84e <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	80 93 3d 21 	sts	0x213D, r24
     84c:	02 c0       	rjmp	.+4      	; 0x852 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     84e:	10 92 3d 21 	sts	0x213D, r1
        pushbutton_switch_state = 0;                //set current value
     852:	10 92 3c 21 	sts	0x213C, r1
     856:	80 91 3e 21 	lds	r24, 0x213E
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     85a:	d2 fe       	sbrs	r13, 2
     85c:	0c c0       	rjmp	.+24     	; 0x876 <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     85e:	88 23       	and	r24, r24
     860:	19 f0       	breq	.+6      	; 0x868 <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     862:	10 92 3f 21 	sts	0x213F, r1
     866:	03 c0       	rjmp	.+6      	; 0x86e <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 3f 21 	sts	0x213F, r24
        encoder_switch_state = 1;                //set current value
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 3e 21 	sts	0x213E, r24
     874:	0a c0       	rjmp	.+20     	; 0x88a <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     876:	88 23       	and	r24, r24
     878:	21 f0       	breq	.+8      	; 0x882 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	80 93 3f 21 	sts	0x213F, r24
     880:	02 c0       	rjmp	.+4      	; 0x886 <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     882:	10 92 3f 21 	sts	0x213F, r1
        encoder_switch_state = 0;                //set current value
     886:	10 92 3e 21 	sts	0x213E, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     88a:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	62 c0       	rjmp	.+196    	; 0x956 <read_hardware+0x238>
     892:	20 91 23 02 	lds	r18, 0x0223
     896:	21 60       	ori	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     89c:	20 91 21 02 	lds	r18, 0x0221
     8a0:	27 7c       	andi	r18, 0xC7	; 199
     8a2:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     8a4:	40 91 21 02 	lds	r20, 0x0221
     8a8:	29 81       	ldd	r18, Y+1	; 0x01
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	2d 5f       	subi	r18, 0xFD	; 253
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	6a 95       	dec	r22
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <read_hardware+0x194>
     8ba:	42 2b       	or	r20, r18
     8bc:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     8be:	20 91 20 02 	lds	r18, 0x0220
     8c2:	20 68       	ori	r18, 0x80	; 128
     8c4:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     8c6:	20 91 23 02 	lds	r18, 0x0223
     8ca:	20 ff       	sbrs	r18, 0
     8cc:	fc cf       	rjmp	.-8      	; 0x8c6 <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     8ce:	e9 81       	ldd	r30, Y+1	; 0x01
     8d0:	20 91 24 02 	lds	r18, 0x0224
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ea 5b       	subi	r30, 0xBA	; 186
     8dc:	fe 4d       	sbci	r31, 0xDE	; 222
     8de:	20 83       	st	Z, r18
     8e0:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     8e2:	e9 81       	ldd	r30, Y+1	; 0x01
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	20 91 25 02 	lds	r18, 0x0225
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ea 5b       	subi	r30, 0xBA	; 186
     8f0:	fe 4d       	sbci	r31, 0xDE	; 222
     8f2:	f2 2e       	mov	r15, r18
     8f4:	ee 24       	eor	r14, r14
     8f6:	20 81       	ld	r18, Z
     8f8:	31 81       	ldd	r19, Z+1	; 0x01
     8fa:	2e 29       	or	r18, r14
     8fc:	3f 29       	or	r19, r15
     8fe:	20 83       	st	Z, r18
     900:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POT_MIN)
     902:	e9 81       	ldd	r30, Y+1	; 0x01
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ea 5b       	subi	r30, 0xBA	; 186
     90c:	fe 4d       	sbci	r31, 0xDE	; 222
     90e:	20 81       	ld	r18, Z
     910:	31 81       	ldd	r19, Z+1	; 0x01
     912:	20 3e       	cpi	r18, 0xE0	; 224
     914:	31 05       	cpc	r19, r1
     916:	48 f4       	brcc	.+18     	; 0x92a <read_hardware+0x20c>
            pot_values[i] = 0;
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	ea 5b       	subi	r30, 0xBA	; 186
     922:	fe 4d       	sbci	r31, 0xDE	; 222
     924:	10 82       	st	Z, r1
     926:	11 82       	std	Z+1, r1	; 0x01
     928:	13 c0       	rjmp	.+38     	; 0x950 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POT_MIN;
     92a:	e9 81       	ldd	r30, Y+1	; 0x01
     92c:	a9 81       	ldd	r26, Y+1	; 0x01
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ea 5b       	subi	r30, 0xBA	; 186
     936:	fe 4d       	sbci	r31, 0xDE	; 222
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	aa 0f       	add	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	aa 5b       	subi	r26, 0xBA	; 186
     940:	be 4d       	sbci	r27, 0xDE	; 222
     942:	2d 91       	ld	r18, X+
     944:	3c 91       	ld	r19, X
     946:	11 97       	sbiw	r26, 0x01	; 1
     948:	20 5e       	subi	r18, 0xE0	; 224
     94a:	30 40       	sbci	r19, 0x00	; 0
     94c:	20 83       	st	Z, r18
     94e:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     950:	29 81       	ldd	r18, Y+1	; 0x01
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	29 83       	std	Y+1, r18	; 0x01
     956:	29 81       	ldd	r18, Y+1	; 0x01
     958:	25 30       	cpi	r18, 0x05	; 5
     95a:	08 f4       	brcc	.+2      	; 0x95e <read_hardware+0x240>
     95c:	9a cf       	rjmp	.-204    	; 0x892 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     95e:	80 91 28 06 	lds	r24, 0x0628
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	80 fd       	sbrc	r24, 0
     966:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     968:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     96c:	84 2f       	mov	r24, r20
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	20 91 51 21 	lds	r18, 0x2151
     974:	51 e0       	ldi	r21, 0x01	; 1
     976:	25 27       	eor	r18, r21
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	82 23       	and	r24, r18
     97c:	93 23       	and	r25, r19
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	59 f0       	breq	.+22     	; 0x998 <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     982:	86 2f       	mov	r24, r22
     984:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     986:	80 fd       	sbrc	r24, 0
     988:	03 c0       	rjmp	.+6      	; 0x990 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     98a:	50 93 50 21 	sts	0x2150, r21
     98e:	06 c0       	rjmp	.+12     	; 0x99c <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	80 93 50 21 	sts	0x2150, r24
     996:	02 c0       	rjmp	.+4      	; 0x99c <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     998:	10 92 50 21 	sts	0x2150, r1
    last_a = current_a;
     99c:	40 93 51 21 	sts	0x2151, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     9a0:	0f 90       	pop	r0
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	08 95       	ret

000009b6 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
    
    //set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     9b6:	08 95       	ret

000009b8 <__vector_91>:
#include "main.h"


ISR(USARTD1_RXC_vect){
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	2f 93       	push	r18
     9c4:	3f 93       	push	r19
     9c6:	4f 93       	push	r20
     9c8:	5f 93       	push	r21
     9ca:	6f 93       	push	r22
     9cc:	7f 93       	push	r23
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	af 93       	push	r26
     9d4:	bf 93       	push	r27
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
//    static uint8_t new_byte[1];
//    new_byte[0] = USARTD1.DATA;
    midi_device_input(serial_midi_device(),1,&(USARTD1.DATA));
     9da:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	40 eb       	ldi	r20, 0xB0	; 176
     9e2:	59 e0       	ldi	r21, 0x09	; 9
     9e4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_process(serial_midi_device());
     9e8:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     9ec:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <midi_device_process>
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <fake_midi_noteon_input>:


void fake_midi_noteon_input(uint8_t pitch, uint8_t velocity){
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	00 d0       	rcall	.+0      	; 0xa18 <fake_midi_noteon_input+0x6>
     a18:	0f 92       	push	r0
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	8a 83       	std	Y+2, r24	; 0x02
     a20:	6b 83       	std	Y+3, r22	; 0x03
    const uint8_t noteon_byte1 = 144;
     a22:	80 e9       	ldi	r24, 0x90	; 144
     a24:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(serial_midi_device(), 1, &noteon_byte1);
     a26:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	ae 01       	movw	r20, r28
     a2e:	4f 5f       	subi	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_input(serial_midi_device(), 1, &pitch);
     a36:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	ae 01       	movw	r20, r28
     a3e:	4e 5f       	subi	r20, 0xFE	; 254
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_input(serial_midi_device(), 1, &velocity);
     a46:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	ae 01       	movw	r20, r28
     a4e:	4d 5f       	subi	r20, 0xFD	; 253
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_process(serial_midi_device());
     a56:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a5a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <midi_device_process>
}
     a5e:	23 96       	adiw	r28, 0x03	; 3
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <fake_midi_noteff_input>:

void fake_midi_noteff_input(uint8_t pitch, uint8_t velocity){
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <fake_midi_noteff_input+0x6>
     a70:	0f 92       	push	r0
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	6b 83       	std	Y+3, r22	; 0x03
    const uint8_t noteoff_byte1 = 128;
     a7a:	80 e8       	ldi	r24, 0x80	; 128
     a7c:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(serial_midi_device(), 1, &noteoff_byte1);
     a7e:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	ae 01       	movw	r20, r28
     a86:	4f 5f       	subi	r20, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_input(serial_midi_device(), 1, &pitch);
     a8e:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	ae 01       	movw	r20, r28
     a96:	4e 5f       	subi	r20, 0xFE	; 254
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_input(serial_midi_device(), 1, &velocity);
     a9e:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	ae 01       	movw	r20, r28
     aa6:	4d 5f       	subi	r20, 0xFD	; 253
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_device_input>
    midi_device_process(serial_midi_device());
     aae:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
     ab2:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <midi_device_process>
}
     ab6:	23 96       	adiw	r28, 0x03	; 3
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <main>:

int main(void) {
     ac2:	1f 93       	push	r17
    const initial_BPM = 120;
    volatile Sequencer* sequencer = get_sequencer();
     ac4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>

    uint8_t pitch = 100;
    
    initialize_hardware();
     ac8:	0e 94 08 03 	call	0x610	; 0x610 <initialize_hardware>
    initialize_note_list();
     acc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <initialize_note_list>
    initialize_sequencer();
     ad0:	0e 94 de 07 	call	0xfbc	; 0xfbc <initialize_sequencer>
    serial_midi_init();
     ad4:	0e 94 31 0b 	call	0x1662	; 0x1662 <serial_midi_init>
    initialize_beat_clock(initial_BPM);
     ad8:	88 e7       	ldi	r24, 0x78	; 120
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 89 01 	call	0x312	; 0x312 <initialize_beat_clock>
    set_seven_segment_LEDs(get_BPM());
     ae0:	0e 94 a4 01 	call	0x348	; 0x348 <get_BPM>
     ae4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <set_seven_segment_LEDs>

int main(void) {
    const initial_BPM = 120;
    volatile Sequencer* sequencer = get_sequencer();

    uint8_t pitch = 100;
     ae8:	14 e6       	ldi	r17, 0x64	; 100
    serial_midi_init();
    initialize_beat_clock(initial_BPM);
    set_seven_segment_LEDs(get_BPM());

    while(1){
        read_hardware();
     aea:	0e 94 8f 03 	call	0x71e	; 0x71e <read_hardware>
        
        if (get_encoder() == TURN_CW)
     aee:	0e 94 c1 01 	call	0x382	; 0x382 <get_encoder>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	11 f4       	brne	.+4      	; 0xafa <main+0x38>
            pitch++;
     af6:	1f 5f       	subi	r17, 0xFF	; 255
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <main+0x42>
        else if (get_encoder() == TURN_CCW)
     afa:	0e 94 c1 01 	call	0x382	; 0x382 <get_encoder>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	09 f4       	brne	.+2      	; 0xb04 <main+0x42>
            pitch -= 1;    
     b02:	11 50       	subi	r17, 0x01	; 1
        
        set_seven_segment_LEDs((uint16_t) pitch);
     b04:	81 2f       	mov	r24, r17
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 68 02 	call	0x4d0	; 0x4d0 <set_seven_segment_LEDs>
        
        if (get_encoder_switch_edge() == EDGE_RISE)
     b0c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <get_encoder_switch_edge>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	21 f4       	brne	.+8      	; 0xb1c <main+0x5a>
            fake_midi_noteon_input(pitch,100);
     b14:	81 2f       	mov	r24, r17
     b16:	64 e6       	ldi	r22, 0x64	; 100
     b18:	0e 94 09 05 	call	0xa12	; 0xa12 <fake_midi_noteon_input>
        
        if (get_pushbutton_switch_edge() == EDGE_RISE)
     b1c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <get_pushbutton_switch_edge>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	19 f7       	brne	.-58     	; 0xaea <main+0x28>
            fake_midi_noteff_input(pitch,100);
     b24:	81 2f       	mov	r24, r17
     b26:	64 e6       	ldi	r22, 0x64	; 100
     b28:	0e 94 35 05 	call	0xa6a	; 0xa6a <fake_midi_noteff_input>
     b2c:	de cf       	rjmp	.-68     	; 0xaea <main+0x28>

00000b2e <get_note_list>:
static NoteList global_note_list;

//Return pointer to the global note list
NoteList* get_note_list(){
    return &global_note_list;
}
     b2e:	82 e5       	ldi	r24, 0x52	; 82
     b30:	91 e2       	ldi	r25, 0x21	; 33
     b32:	08 95       	ret

00000b34 <get_note_list_length>:

uint8_t get_note_list_length(NoteList* note_list){
    return note_list->length;
}
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	08 95       	ret

00000b3a <initialize_note_list>:
void initialize_note_list(){
    uint8_t i;
    
    NoteList* note_list = &global_note_list;
    
    note_list->length = 0;
     b3a:	10 92 52 21 	sts	0x2152, r1
    note_list->head_pitch = NULL;
     b3e:	10 92 53 21 	sts	0x2153, r1
     b42:	10 92 54 21 	sts	0x2154, r1
    note_list->tail_pitch = NULL;
     b46:	10 92 55 21 	sts	0x2155, r1
     b4a:	10 92 56 21 	sts	0x2156, r1
    note_list->head_trigger = NULL;
     b4e:	10 92 57 21 	sts	0x2157, r1
     b52:	10 92 58 21 	sts	0x2158, r1
    note_list->tail_trigger = NULL;
     b56:	10 92 59 21 	sts	0x2159, r1
     b5a:	10 92 5a 21 	sts	0x215A, r1
     b5e:	eb e5       	ldi	r30, 0x5B	; 91
     b60:	f1 e2       	ldi	r31, 0x21	; 33
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     b62:	10 82       	st	Z, r1
    note->velocity = 0;
     b64:	11 82       	std	Z+1, r1	; 0x01
    note->status = 0;
     b66:	12 82       	std	Z+2, r1	; 0x02
    note->next_note_by_pitch = NULL;
     b68:	13 82       	std	Z+3, r1	; 0x03
     b6a:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     b6c:	15 82       	std	Z+5, r1	; 0x05
     b6e:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     b70:	17 82       	std	Z+7, r1	; 0x07
     b72:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     b74:	11 86       	std	Z+9, r1	; 0x09
     b76:	12 86       	std	Z+10, r1	; 0x0a
     b78:	3b 96       	adiw	r30, 0x0b	; 11
    note_list->head_pitch = NULL;
    note_list->tail_pitch = NULL;
    note_list->head_trigger = NULL;
    note_list->tail_trigger = NULL;

    for(i = 0; i<MAX_LIST_NOTES; i++)
     b7a:	82 e2       	ldi	r24, 0x22	; 34
     b7c:	eb 30       	cpi	r30, 0x0B	; 11
     b7e:	f8 07       	cpc	r31, r24
     b80:	81 f7       	brne	.-32     	; 0xb62 <initialize_note_list+0x28>
        free_note(&(note_list->note_bank[i]));
}
     b82:	08 95       	ret

00000b84 <remove_note_by_pitch>:
}

//Search for note by pitch in the note list
//If it is found, adjust surrounding pointers
//And remove and free the note
bool remove_note_by_pitch(NoteList* note_list, uint8_t pitch){
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     b8a:	a1 81       	ldd	r26, Z+1	; 0x01
     b8c:	b2 81       	ldd	r27, Z+2	; 0x02
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <remove_note_by_pitch+0x1a>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     b90:	8c 91       	ld	r24, X
     b92:	86 17       	cp	r24, r22
     b94:	38 f4       	brcc	.+14     	; 0xba4 <remove_note_by_pitch+0x20>
            break;

        target_note = target_note->next_note_by_pitch;
     b96:	13 96       	adiw	r26, 0x03	; 3
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     b9e:	10 97       	sbiw	r26, 0x00	; 0
     ba0:	b9 f7       	brne	.-18     	; 0xb90 <remove_note_by_pitch+0xc>
     ba2:	5c c0       	rjmp	.+184    	; 0xc5c <remove_note_by_pitch+0xd8>
    //note not found (reached the end of the note list)
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
     ba4:	86 17       	cp	r24, r22
     ba6:	09 f0       	breq	.+2      	; 0xbaa <remove_note_by_pitch+0x26>
     ba8:	59 c0       	rjmp	.+178    	; 0xc5c <remove_note_by_pitch+0xd8>
        return 0;
        
    //otherwise, the note was found and ready to be removed
    note_list->length += -1;
     baa:	80 81       	ld	r24, Z
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	80 83       	st	Z, r24
    
    //check for empty list
    if (note_list->length == 0){
     bb0:	88 23       	and	r24, r24
     bb2:	19 f4       	brne	.+6      	; 0xbba <remove_note_by_pitch+0x36>
        initialize_note_list();
     bb4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <initialize_note_list>
     bb8:	4f c0       	rjmp	.+158    	; 0xc58 <remove_note_by_pitch+0xd4>
    }
    
    //adjust surrounding pointers
    //set new heads and tails if necessary
    
    if (dead_note->previous_note_by_pitch)
     bba:	15 96       	adiw	r26, 0x05	; 5
     bbc:	2d 91       	ld	r18, X+
     bbe:	3c 91       	ld	r19, X
     bc0:	16 97       	sbiw	r26, 0x06	; 6
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	8d 91       	ld	r24, X+
     bc6:	9c 91       	ld	r25, X
     bc8:	14 97       	sbiw	r26, 0x04	; 4
     bca:	21 15       	cp	r18, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	21 f0       	breq	.+8      	; 0xbd8 <remove_note_by_pitch+0x54>
        dead_note->previous_note_by_pitch->next_note_by_pitch = dead_note->next_note_by_pitch;
     bd0:	e9 01       	movw	r28, r18
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <remove_note_by_pitch+0x58>
    else
        note_list->head_pitch = dead_note->next_note_by_pitch;
     bd8:	81 83       	std	Z+1, r24	; 0x01
     bda:	92 83       	std	Z+2, r25	; 0x02
    
    if (dead_note->next_note_by_pitch)
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	14 97       	sbiw	r26, 0x04	; 4
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	21 f0       	breq	.+8      	; 0xbf0 <remove_note_by_pitch+0x6c>
        dead_note->next_note_by_pitch->previous_note_by_pitch = dead_note->previous_note_by_pitch;
     be8:	ec 01       	movw	r28, r24
     bea:	2d 83       	std	Y+5, r18	; 0x05
     bec:	3e 83       	std	Y+6, r19	; 0x06
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <remove_note_by_pitch+0x70>
    else
        note_list->tail_pitch = dead_note->previous_note_by_pitch;
     bf0:	23 83       	std	Z+3, r18	; 0x03
     bf2:	34 83       	std	Z+4, r19	; 0x04
        
    if (dead_note->previous_note_by_trigger)
     bf4:	19 96       	adiw	r26, 0x09	; 9
     bf6:	cd 91       	ld	r28, X+
     bf8:	dc 91       	ld	r29, X
     bfa:	1a 97       	sbiw	r26, 0x0a	; 10
     bfc:	17 96       	adiw	r26, 0x07	; 7
     bfe:	8d 91       	ld	r24, X+
     c00:	9c 91       	ld	r25, X
     c02:	18 97       	sbiw	r26, 0x08	; 8
     c04:	20 97       	sbiw	r28, 0x00	; 0
     c06:	19 f0       	breq	.+6      	; 0xc0e <remove_note_by_pitch+0x8a>
        dead_note->previous_note_by_trigger->next_note_by_trigger = dead_note->next_note_by_trigger;
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	98 87       	std	Y+8, r25	; 0x08
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <remove_note_by_pitch+0x8e>
    else
        note_list->head_trigger = dead_note->next_note_by_trigger;
     c0e:	85 83       	std	Z+5, r24	; 0x05
     c10:	96 83       	std	Z+6, r25	; 0x06
    
    if (dead_note->next_note_by_trigger)
     c12:	17 96       	adiw	r26, 0x07	; 7
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	18 97       	sbiw	r26, 0x08	; 8
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	21 f0       	breq	.+8      	; 0xc26 <remove_note_by_pitch+0xa2>
        dead_note->next_note_by_trigger->previous_note_by_trigger = dead_note->previous_note_by_trigger;
     c1e:	fc 01       	movw	r30, r24
     c20:	c1 87       	std	Z+9, r28	; 0x09
     c22:	d2 87       	std	Z+10, r29	; 0x0a
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <remove_note_by_pitch+0xa6>
    else
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
     c26:	c7 83       	std	Z+7, r28	; 0x07
     c28:	d0 87       	std	Z+8, r29	; 0x08
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     c2a:	1c 92       	st	X, r1
    note->velocity = 0;
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	1c 92       	st	X, r1
     c30:	11 97       	sbiw	r26, 0x01	; 1
    note->status = 0;
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	1c 92       	st	X, r1
     c36:	12 97       	sbiw	r26, 0x02	; 2
    note->next_note_by_pitch = NULL;
     c38:	13 96       	adiw	r26, 0x03	; 3
     c3a:	1d 92       	st	X+, r1
     c3c:	1c 92       	st	X, r1
     c3e:	14 97       	sbiw	r26, 0x04	; 4
    note->previous_note_by_pitch = NULL;
     c40:	15 96       	adiw	r26, 0x05	; 5
     c42:	1d 92       	st	X+, r1
     c44:	1c 92       	st	X, r1
     c46:	16 97       	sbiw	r26, 0x06	; 6
    note->next_note_by_trigger = NULL;
     c48:	17 96       	adiw	r26, 0x07	; 7
     c4a:	1d 92       	st	X+, r1
     c4c:	1c 92       	st	X, r1
     c4e:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = NULL;
     c50:	19 96       	adiw	r26, 0x09	; 9
     c52:	1d 92       	st	X+, r1
     c54:	1c 92       	st	X, r1
     c56:	1a 97       	sbiw	r26, 0x0a	; 10
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <remove_note_by_pitch+0xda>
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
        return 0;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <insert_note>:
}

//insert new note in complete order
//return 0 if unsuccessful (no free note banks)
//return 1 if successful
bool insert_note(NoteList* note_list, uint8_t pitch, uint8_t velocity){
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     c6e:	a1 81       	ldd	r26, Z+1	; 0x01
     c70:	b2 81       	ldd	r27, Z+2	; 0x02
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <insert_note+0x1e>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     c74:	8c 91       	ld	r24, X
     c76:	86 17       	cp	r24, r22
     c78:	30 f4       	brcc	.+12     	; 0xc86 <insert_note+0x22>
            break;

        target_note = target_note->next_note_by_pitch;
     c7a:	13 96       	adiw	r26, 0x03	; 3
     c7c:	0d 90       	ld	r0, X+
     c7e:	bc 91       	ld	r27, X
     c80:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     c82:	10 97       	sbiw	r26, 0x00	; 0
     c84:	b9 f7       	brne	.-18     	; 0xc74 <insert_note+0x10>
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     c86:	8c 91       	ld	r24, X
     c88:	86 17       	cp	r24, r22
     c8a:	09 f0       	breq	.+2      	; 0xc8e <insert_note+0x2a>
     c8c:	48 c0       	rjmp	.+144    	; 0xd1e <insert_note+0xba>
    return 1;
}

//Change the velocity of an existing note
static Note* update_note_velocity(Note* note, uint8_t velocity){
    note->velocity = velocity;
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	4c 93       	st	X, r20
     c92:	11 97       	sbiw	r26, 0x01	; 1
//Place note at the end of the trigger order
//If the note is the only member of the note_list, assign it to the head    
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is already at the tail (also catches the case of a single-member list)
    if (note_list->tail_trigger == note)
     c94:	87 81       	ldd	r24, Z+7	; 0x07
     c96:	90 85       	ldd	r25, Z+8	; 0x08
     c98:	8a 17       	cp	r24, r26
     c9a:	9b 07       	cpc	r25, r27
     c9c:	09 f4       	brne	.+2      	; 0xca0 <insert_note+0x3c>
     c9e:	d0 c0       	rjmp	.+416    	; 0xe40 <insert_note+0x1dc>
        return;
            
    //check for head
    if (note_list->head_trigger == note){
     ca0:	85 81       	ldd	r24, Z+5	; 0x05
     ca2:	96 81       	ldd	r25, Z+6	; 0x06
     ca4:	8a 17       	cp	r24, r26
     ca6:	9b 07       	cpc	r25, r27
     ca8:	49 f4       	brne	.+18     	; 0xcbc <insert_note+0x58>
        //update head and remove note
        note_list->head_trigger = note->next_note_by_trigger;
     caa:	17 96       	adiw	r26, 0x07	; 7
     cac:	cd 91       	ld	r28, X+
     cae:	dc 91       	ld	r29, X
     cb0:	18 97       	sbiw	r26, 0x08	; 8
     cb2:	c5 83       	std	Z+5, r28	; 0x05
     cb4:	d6 83       	std	Z+6, r29	; 0x06
        note_list->head_trigger->previous_note_by_trigger = NULL;
     cb6:	19 86       	std	Y+9, r1	; 0x09
     cb8:	1a 86       	std	Y+10, r1	; 0x0a
     cba:	12 c0       	rjmp	.+36     	; 0xce0 <insert_note+0x7c>
    }
    else{
        //otherwise remove note normally
        note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     cbc:	19 96       	adiw	r26, 0x09	; 9
     cbe:	2d 91       	ld	r18, X+
     cc0:	3c 91       	ld	r19, X
     cc2:	1a 97       	sbiw	r26, 0x0a	; 10
     cc4:	17 96       	adiw	r26, 0x07	; 7
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	18 97       	sbiw	r26, 0x08	; 8
     ccc:	e9 01       	movw	r28, r18
     cce:	8f 83       	std	Y+7, r24	; 0x07
     cd0:	98 87       	std	Y+8, r25	; 0x08
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     cd2:	17 96       	adiw	r26, 0x07	; 7
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	18 97       	sbiw	r26, 0x08	; 8
     cda:	ec 01       	movw	r28, r24
     cdc:	29 87       	std	Y+9, r18	; 0x09
     cde:	3a 87       	std	Y+10, r19	; 0x0a

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     ce0:	80 81       	ld	r24, Z
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	69 f4       	brne	.+26     	; 0xd00 <insert_note+0x9c>
        note_list->tail_trigger = note;
     ce6:	a7 83       	std	Z+7, r26	; 0x07
     ce8:	b0 87       	std	Z+8, r27	; 0x08
        note_list->head_trigger = note;
     cea:	a5 83       	std	Z+5, r26	; 0x05
     cec:	b6 83       	std	Z+6, r27	; 0x06
        note->next_note_by_trigger = NULL;
     cee:	17 96       	adiw	r26, 0x07	; 7
     cf0:	1d 92       	st	X+, r1
     cf2:	1c 92       	st	X, r1
     cf4:	18 97       	sbiw	r26, 0x08	; 8
        note->previous_note_by_trigger = NULL;
     cf6:	19 96       	adiw	r26, 0x09	; 9
     cf8:	1d 92       	st	X+, r1
     cfa:	1c 92       	st	X, r1
     cfc:	1a 97       	sbiw	r26, 0x0a	; 10
     cfe:	a3 c0       	rjmp	.+326    	; 0xe46 <insert_note+0x1e2>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     d00:	17 96       	adiw	r26, 0x07	; 7
     d02:	1d 92       	st	X+, r1
     d04:	1c 92       	st	X, r1
     d06:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = note_list->tail_trigger;
     d08:	c7 81       	ldd	r28, Z+7	; 0x07
     d0a:	d0 85       	ldd	r29, Z+8	; 0x08
     d0c:	19 96       	adiw	r26, 0x09	; 9
     d0e:	cd 93       	st	X+, r28
     d10:	dc 93       	st	X, r29
     d12:	1a 97       	sbiw	r26, 0x0a	; 10
    note_list->tail_trigger->next_note_by_trigger = note;
     d14:	af 83       	std	Y+7, r26	; 0x07
     d16:	b8 87       	std	Y+8, r27	; 0x08
    note_list->tail_trigger = note;
     d18:	a7 83       	std	Z+7, r26	; 0x07
     d1a:	b0 87       	std	Z+8, r27	; 0x08
     d1c:	91 c0       	rjmp	.+290    	; 0xe40 <insert_note+0x1dc>
     d1e:	ef 01       	movw	r28, r30
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    note->previous_note_by_trigger = note_list->tail_trigger;
    note_list->tail_trigger->next_note_by_trigger = note;
    note_list->tail_trigger = note;
     d24:	28 2f       	mov	r18, r24
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     d26:	3b 85       	ldd	r19, Y+11	; 0x0b
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	33 23       	and	r19, r19
     d2c:	e1 f4       	brne	.+56     	; 0xd66 <insert_note+0x102>
            note_list->note_bank[i].status = 1;
     d2e:	0b e0       	ldi	r16, 0x0B	; 11
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	80 9f       	mul	r24, r16
     d34:	e0 01       	movw	r28, r0
     d36:	81 9f       	mul	r24, r17
     d38:	d0 0d       	add	r29, r0
     d3a:	90 9f       	mul	r25, r16
     d3c:	d0 0d       	add	r29, r0
     d3e:	11 24       	eor	r1, r1
     d40:	ce 0f       	add	r28, r30
     d42:	df 1f       	adc	r29, r31
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	88 83       	st	Y, r24
            return &(note_list->note_bank[i]);
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	20 9f       	mul	r18, r16
     d4c:	e0 01       	movw	r28, r0
     d4e:	21 9f       	mul	r18, r17
     d50:	d0 0d       	add	r29, r0
     d52:	30 9f       	mul	r19, r16
     d54:	d0 0d       	add	r29, r0
     d56:	11 24       	eor	r1, r1
     d58:	ce 01       	movw	r24, r28
     d5a:	09 96       	adiw	r24, 0x09	; 9
     d5c:	8e 0f       	add	r24, r30
     d5e:	9f 1f       	adc	r25, r31
//return NULL otherwise
static Note* add_note_at_previous_pitch(NoteList* note_list, Note* target_note, uint8_t pitch, uint8_t velocity){
    Note* new_note = allocate_note(note_list);
    
    //return NULL if there are no more notes
    if (new_note == NULL)
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	31 f4       	brne	.+12     	; 0xd70 <insert_note+0x10c>
     d64:	6f c0       	rjmp	.+222    	; 0xe44 <insert_note+0x1e0>
     d66:	2b 96       	adiw	r28, 0x0b	; 11
//Iterate through the bank of notes to find an available note to use
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     d68:	80 31       	cpi	r24, 0x10	; 16
     d6a:	91 05       	cpc	r25, r1
     d6c:	d9 f6       	brne	.-74     	; 0xd24 <insert_note+0xc0>
     d6e:	6a c0       	rjmp	.+212    	; 0xe44 <insert_note+0x1e0>
    
    //return NULL if there are no more notes
    if (new_note == NULL)
        return NULL;
    
    note_list->length += 1;
     d70:	50 81       	ld	r21, Z
     d72:	5f 5f       	subi	r21, 0xFF	; 255
     d74:	50 83       	st	Z, r21
    
    //set data of new note
    new_note->pitch = pitch;
     d76:	ce 0f       	add	r28, r30
     d78:	df 1f       	adc	r29, r31
     d7a:	69 87       	std	Y+9, r22	; 0x09
    new_note->velocity = velocity;
     d7c:	4a 87       	std	Y+10, r20	; 0x0a
    
    //new_note is the only member of the list
    if (note_list->length == 1){
     d7e:	51 30       	cpi	r21, 0x01	; 1
     d80:	39 f4       	brne	.+14     	; 0xd90 <insert_note+0x12c>
        new_note->next_note_by_pitch = NULL;
     d82:	1c 86       	std	Y+12, r1	; 0x0c
     d84:	1d 86       	std	Y+13, r1	; 0x0d
        new_note->previous_note_by_pitch = NULL;
     d86:	1e 86       	std	Y+14, r1	; 0x0e
     d88:	1f 86       	std	Y+15, r1	; 0x0f
        note_list->head_pitch = new_note;
     d8a:	81 83       	std	Z+1, r24	; 0x01
     d8c:	92 83       	std	Z+2, r25	; 0x02
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <insert_note+0x144>
        note_list->tail_pitch = new_note;
        return new_note;        
    }
    
    //if new_note isn't the only note, but target_note is NULL, new_note is at the tail pitch
    if (target_note == NULL){
     d90:	10 97       	sbiw	r26, 0x00	; 0
     d92:	69 f4       	brne	.+26     	; 0xdae <insert_note+0x14a>
        new_note->previous_note_by_pitch = note_list->tail_pitch;
     d94:	a3 81       	ldd	r26, Z+3	; 0x03
     d96:	b4 81       	ldd	r27, Z+4	; 0x04
     d98:	ae 87       	std	Y+14, r26	; 0x0e
     d9a:	bf 87       	std	Y+15, r27	; 0x0f
        new_note->next_note_by_pitch = NULL;
     d9c:	1c 86       	std	Y+12, r1	; 0x0c
     d9e:	1d 86       	std	Y+13, r1	; 0x0d
        note_list->tail_pitch->next_note_by_pitch = new_note;
     da0:	13 96       	adiw	r26, 0x03	; 3
     da2:	8d 93       	st	X+, r24
     da4:	9c 93       	st	X, r25
     da6:	14 97       	sbiw	r26, 0x04	; 4
        note_list->tail_pitch = new_note;
     da8:	83 83       	std	Z+3, r24	; 0x03
     daa:	94 83       	std	Z+4, r25	; 0x04
     dac:	51 c0       	rjmp	.+162    	; 0xe50 <insert_note+0x1ec>
        return new_note;
    }
    
    //otherwise, adjust pointers
    new_note->next_note_by_pitch = target_note;
     dae:	ac 87       	std	Y+12, r26	; 0x0c
     db0:	bd 87       	std	Y+13, r27	; 0x0d
    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     db2:	15 96       	adiw	r26, 0x05	; 5
     db4:	4d 91       	ld	r20, X+
     db6:	5c 91       	ld	r21, X
     db8:	16 97       	sbiw	r26, 0x06	; 6
     dba:	4e 87       	std	Y+14, r20	; 0x0e
     dbc:	5f 87       	std	Y+15, r21	; 0x0f
    target_note->previous_note_by_pitch = new_note;
     dbe:	15 96       	adiw	r26, 0x05	; 5
     dc0:	8d 93       	st	X+, r24
     dc2:	9c 93       	st	X, r25
     dc4:	16 97       	sbiw	r26, 0x06	; 6

    //check for head
    if (new_note->previous_note_by_pitch == NULL)
     dc6:	ae 85       	ldd	r26, Y+14	; 0x0e
     dc8:	bf 85       	ldd	r27, Y+15	; 0x0f
     dca:	10 97       	sbiw	r26, 0x00	; 0
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <insert_note+0x170>
        note_list->head_pitch = new_note;
     dce:	81 83       	std	Z+1, r24	; 0x01
     dd0:	92 83       	std	Z+2, r25	; 0x02
     dd2:	3e c0       	rjmp	.+124    	; 0xe50 <insert_note+0x1ec>
    else
        new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     dd4:	13 96       	adiw	r26, 0x03	; 3
     dd6:	8d 93       	st	X+, r24
     dd8:	9c 93       	st	X, r25
     dda:	14 97       	sbiw	r26, 0x04	; 4
     ddc:	39 c0       	rjmp	.+114    	; 0xe50 <insert_note+0x1ec>
//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
        note_list->tail_trigger = note;
     dde:	87 83       	std	Z+7, r24	; 0x07
     de0:	90 87       	std	Z+8, r25	; 0x08
        note_list->head_trigger = note;
     de2:	85 83       	std	Z+5, r24	; 0x05
     de4:	96 83       	std	Z+6, r25	; 0x06
        note->next_note_by_trigger = NULL;
     de6:	8b e0       	ldi	r24, 0x0B	; 11
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	28 9f       	mul	r18, r24
     dec:	d0 01       	movw	r26, r0
     dee:	29 9f       	mul	r18, r25
     df0:	b0 0d       	add	r27, r0
     df2:	38 9f       	mul	r19, r24
     df4:	b0 0d       	add	r27, r0
     df6:	11 24       	eor	r1, r1
     df8:	ae 0f       	add	r26, r30
     dfa:	bf 1f       	adc	r27, r31
     dfc:	50 96       	adiw	r26, 0x10	; 16
     dfe:	1d 92       	st	X+, r1
     e00:	1c 92       	st	X, r1
     e02:	51 97       	sbiw	r26, 0x11	; 17
        note->previous_note_by_trigger = NULL;
     e04:	52 96       	adiw	r26, 0x12	; 18
     e06:	1d 92       	st	X+, r1
     e08:	1c 92       	st	X, r1
     e0a:	53 97       	sbiw	r26, 0x13	; 19
     e0c:	19 c0       	rjmp	.+50     	; 0xe40 <insert_note+0x1dc>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     e0e:	4b e0       	ldi	r20, 0x0B	; 11
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	24 9f       	mul	r18, r20
     e14:	d0 01       	movw	r26, r0
     e16:	25 9f       	mul	r18, r21
     e18:	b0 0d       	add	r27, r0
     e1a:	34 9f       	mul	r19, r20
     e1c:	b0 0d       	add	r27, r0
     e1e:	11 24       	eor	r1, r1
     e20:	ae 0f       	add	r26, r30
     e22:	bf 1f       	adc	r27, r31
     e24:	50 96       	adiw	r26, 0x10	; 16
     e26:	1d 92       	st	X+, r1
     e28:	1c 92       	st	X, r1
     e2a:	51 97       	sbiw	r26, 0x11	; 17
    note->previous_note_by_trigger = note_list->tail_trigger;
     e2c:	c7 81       	ldd	r28, Z+7	; 0x07
     e2e:	d0 85       	ldd	r29, Z+8	; 0x08
     e30:	52 96       	adiw	r26, 0x12	; 18
     e32:	cd 93       	st	X+, r28
     e34:	dc 93       	st	X, r29
     e36:	53 97       	sbiw	r26, 0x13	; 19
    note_list->tail_trigger->next_note_by_trigger = note;
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
    note_list->tail_trigger = note;
     e3c:	87 83       	std	Z+7, r24	; 0x07
     e3e:	90 87       	std	Z+8, r25	; 0x08
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <insert_note+0x1e2>
    }
    else{
        //if the note is new, add it in the proper pitch position
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
     e44:	80 e0       	ldi	r24, 0x00	; 0
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     e50:	40 81       	ld	r20, Z
     e52:	41 30       	cpi	r20, 0x01	; 1
     e54:	e1 f6       	brne	.-72     	; 0xe0e <insert_note+0x1aa>
     e56:	c3 cf       	rjmp	.-122    	; 0xdde <insert_note+0x17a>

00000e58 <calculate_start_time_increment>:
Sequencer* get_sequencer(){
    return &global_sequencer;
}


static void calculate_start_time_increment(Sequencer* sequencer){
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <calculate_start_time_increment+0xa>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <calculate_start_time_increment+0xc>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
     e6a:	80 91 28 08 	lds	r24, 0x0828
     e6e:	90 91 29 08 	lds	r25, 0x0829
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	ab 83       	std	Y+3, r26	; 0x03
     e7c:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
     e7e:	f8 01       	movw	r30, r16
     e80:	80 89       	ldd	r24, Z+16	; 0x10
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	89 f1       	breq	.+98     	; 0xee8 <calculate_start_time_increment+0x90>
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	30 f4       	brcc	.+12     	; 0xe96 <calculate_start_time_increment+0x3e>
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	69 f0       	breq	.+26     	; 0xea8 <calculate_start_time_increment+0x50>
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	09 f0       	breq	.+2      	; 0xe94 <calculate_start_time_increment+0x3c>
     e92:	6f c0       	rjmp	.+222    	; 0xf72 <calculate_start_time_increment+0x11a>
     e94:	1c c0       	rjmp	.+56     	; 0xece <calculate_start_time_increment+0x76>
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	09 f4       	brne	.+2      	; 0xe9c <calculate_start_time_increment+0x44>
     e9a:	4d c0       	rjmp	.+154    	; 0xf36 <calculate_start_time_increment+0xde>
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	68 f1       	brcs	.+90     	; 0xefa <calculate_start_time_increment+0xa2>
     ea0:	86 30       	cpi	r24, 0x06	; 6
     ea2:	09 f0       	breq	.+2      	; 0xea6 <calculate_start_time_increment+0x4e>
     ea4:	66 c0       	rjmp	.+204    	; 0xf72 <calculate_start_time_increment+0x11a>
     ea6:	56 c0       	rjmp	.+172    	; 0xf54 <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1:    new_start_time_increment *= 3;
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	3a 81       	ldd	r19, Y+2	; 0x02
     eac:	4b 81       	ldd	r20, Y+3	; 0x03
     eae:	5c 81       	ldd	r21, Y+4	; 0x04
     eb0:	da 01       	movw	r26, r20
     eb2:	c9 01       	movw	r24, r18
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	aa 1f       	adc	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	a4 1f       	adc	r26, r20
     ec2:	b5 1f       	adc	r27, r21
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	ab 83       	std	Y+3, r26	; 0x03
     eca:	bc 83       	std	Y+4, r27	; 0x04
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	ab 81       	ldd	r26, Y+3	; 0x03
     ed4:	bc 81       	ldd	r27, Y+4	; 0x04
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	aa 1f       	adc	r26, r26
     edc:	bb 1f       	adc	r27, r27
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	ab 83       	std	Y+3, r26	; 0x03
     ee4:	bc 83       	std	Y+4, r27	; 0x04
     ee6:	27 c0       	rjmp	.+78     	; 0xf36 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	ab 81       	ldd	r26, Y+3	; 0x03
     eee:	bc 81       	ldd	r27, Y+4	; 0x04
     ef0:	b6 95       	lsr	r27
     ef2:	a7 95       	ror	r26
     ef4:	97 95       	ror	r25
     ef6:	87 95       	ror	r24
     ef8:	38 c0       	rjmp	.+112    	; 0xf6a <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
     efa:	29 81       	ldd	r18, Y+1	; 0x01
     efc:	3a 81       	ldd	r19, Y+2	; 0x02
     efe:	4b 81       	ldd	r20, Y+3	; 0x03
     f00:	5c 81       	ldd	r21, Y+4	; 0x04
     f02:	da 01       	movw	r26, r20
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	aa 1f       	adc	r26, r26
     f0c:	bb 1f       	adc	r27, r27
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	a4 1f       	adc	r26, r20
     f14:	b5 1f       	adc	r27, r21
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	ab 83       	std	Y+3, r26	; 0x03
     f1c:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	ab 81       	ldd	r26, Y+3	; 0x03
     f24:	bc 81       	ldd	r27, Y+4	; 0x04
     f26:	33 e0       	ldi	r19, 0x03	; 3
     f28:	b6 95       	lsr	r27
     f2a:	a7 95       	ror	r26
     f2c:	97 95       	ror	r25
     f2e:	87 95       	ror	r24
     f30:	3a 95       	dec	r19
     f32:	d1 f7       	brne	.-12     	; 0xf28 <calculate_start_time_increment+0xd0>
     f34:	1a c0       	rjmp	.+52     	; 0xf6a <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
     f36:	69 81       	ldd	r22, Y+1	; 0x01
     f38:	7a 81       	ldd	r23, Y+2	; 0x02
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	23 e0       	ldi	r18, 0x03	; 3
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
     f4a:	29 83       	std	Y+1, r18	; 0x01
     f4c:	3a 83       	std	Y+2, r19	; 0x02
     f4e:	4b 83       	std	Y+3, r20	; 0x03
     f50:	5c 83       	std	Y+4, r21	; 0x04
                break;
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	ab 81       	ldd	r26, Y+3	; 0x03
     f5a:	bc 81       	ldd	r27, Y+4	; 0x04
     f5c:	22 e0       	ldi	r18, 0x02	; 2
     f5e:	b6 95       	lsr	r27
     f60:	a7 95       	ror	r26
     f62:	97 95       	ror	r25
     f64:	87 95       	ror	r24
     f66:	2a 95       	dec	r18
     f68:	d1 f7       	brne	.-12     	; 0xf5e <calculate_start_time_increment+0x106>
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	ab 83       	std	Y+3, r26	; 0x03
     f70:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
     f72:	69 81       	ldd	r22, Y+1	; 0x01
     f74:	7a 81       	ldd	r23, Y+2	; 0x02
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	f8 01       	movw	r30, r16
     f7c:	27 81       	ldd	r18, Z+7	; 0x07
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	44 27       	eor	r20, r20
     f86:	37 fd       	sbrc	r19, 7
     f88:	40 95       	com	r20
     f8a:	54 2f       	mov	r21, r20
     f8c:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
     f90:	29 83       	std	Y+1, r18	; 0x01
     f92:	3a 83       	std	Y+2, r19	; 0x02
     f94:	4b 83       	std	Y+3, r20	; 0x03
     f96:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	ab 81       	ldd	r26, Y+3	; 0x03
     f9e:	bc 81       	ldd	r27, Y+4	; 0x04
     fa0:	f8 01       	movw	r30, r16
     fa2:	81 87       	std	Z+9, r24	; 0x09
     fa4:	92 87       	std	Z+10, r25	; 0x0a
}
     fa6:	24 96       	adiw	r28, 0x04	; 4
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <get_sequencer>:
static Sequencer global_sequencer;

//Return pointer to the global sequencer
Sequencer* get_sequencer(){
    return &global_sequencer;
}
     fb6:	8b e0       	ldi	r24, 0x0B	; 11
     fb8:	92 e2       	ldi	r25, 0x22	; 34
     fba:	08 95       	ret

00000fbc <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(){  
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <initialize_sequencer+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <initialize_sequencer+0x8>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    Sequencer* sequencer = &global_sequencer;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
     fc8:	e0 e0       	ldi	r30, 0x00	; 0
     fca:	f8 e0       	ldi	r31, 0x08	; 8
     fcc:	80 91 01 08 	lds	r24, 0x0801
     fd0:	8f 7d       	andi	r24, 0xDF	; 223
     fd2:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
     fd4:	80 91 01 08 	lds	r24, 0x0801
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
     fdc:	80 91 07 08 	lds	r24, 0x0807
     fe0:	8f 7c       	andi	r24, 0xCF	; 207
     fe2:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
     fe4:	80 91 07 08 	lds	r24, 0x0807
     fe8:	80 62       	ori	r24, 0x20	; 32
     fea:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
     fec:	80 91 07 08 	lds	r24, 0x0807
     ff0:	83 7f       	andi	r24, 0xF3	; 243
     ff2:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
     ff4:	80 91 07 08 	lds	r24, 0x0807
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	87 83       	std	Z+7, r24	; 0x07
     ffc:	ec e1       	ldi	r30, 0x1C	; 28
     ffe:	f2 e2       	ldi	r31, 0x22	; 34
    
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    1000:	11 92       	st	Z+, r1
    1002:	11 92       	st	Z+, r1
    TCC0.INTCTRLB |= 0x20;
    TCC0.INTCTRLB &= ~0x0C;
    TCC0.INTCTRLB |= 0x08;
    
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    1004:	82 e2       	ldi	r24, 0x22	; 34
    1006:	ec 37       	cpi	r30, 0x7C	; 124
    1008:	f8 07       	cpc	r31, r24
    100a:	d1 f7       	brne	.-12     	; 0x1000 <initialize_sequencer+0x44>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    100c:	10 92 0e 22 	sts	0x220E, r1
    sequencer->octave_index = 0;
    1010:	10 92 10 22 	sts	0x2210, r1
    sequencer->repeat_index = 0;
    1014:	10 92 0f 22 	sts	0x220F, r1
    sequencer->note_max = 0;
    1018:	10 92 11 22 	sts	0x2211, r1
    sequencer->repeat_max = 0;
    101c:	10 92 12 22 	sts	0x2212, r1
    sequencer->octave_max = 0;
    1020:	10 92 13 22 	sts	0x2213, r1
    sequencer->start_time_increment = 0;
    1024:	10 92 14 22 	sts	0x2214, r1
    1028:	10 92 15 22 	sts	0x2215, r1
    sequencer->stop_time_increment = 0;
    102c:	10 92 16 22 	sts	0x2216, r1
    1030:	10 92 17 22 	sts	0x2217, r1
    sequencer->pattern = 0;
    1034:	10 92 18 22 	sts	0x2218, r1
    sequencer->duration = 0;
    1038:	10 92 19 22 	sts	0x2219, r1
    103c:	10 92 1a 22 	sts	0x221A, r1
    sequencer->division = 0;
    1040:	10 92 1b 22 	sts	0x221B, r1
    sequencer->play_status = 0;
    1044:	10 92 0c 22 	sts	0x220C, r1
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->note_list = get_note_list();
    1048:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_note_list>
    104c:	80 93 7c 22 	sts	0x227C, r24
    1050:	90 93 7d 22 	sts	0x227D, r25
    sequencer->rebuild_play_list = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 0d 22 	sts	0x220D, r24
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    105a:	8b e0       	ldi	r24, 0x0B	; 11
    105c:	92 e2       	ldi	r25, 0x22	; 34
    105e:	0e 94 2c 07 	call	0xe58	; 0xe58 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    1062:	60 91 19 22 	lds	r22, 0x2219
    1066:	70 91 1a 22 	lds	r23, 0x221A
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	20 91 14 22 	lds	r18, 0x2214
    1072:	30 91 15 22 	lds	r19, 0x2215
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__mulsi3>
    107e:	69 83       	std	Y+1, r22	; 0x01
    1080:	7a 83       	std	Y+2, r23	; 0x02
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    1086:	69 81       	ldd	r22, Y+1	; 0x01
    1088:	7a 81       	ldd	r23, Y+2	; 0x02
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	2f ef       	ldi	r18, 0xFF	; 255
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
    109a:	29 83       	std	Y+1, r18	; 0x01
    109c:	3a 83       	std	Y+2, r19	; 0x02
    109e:	4b 83       	std	Y+3, r20	; 0x03
    10a0:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	ab 81       	ldd	r26, Y+3	; 0x03
    10a8:	bc 81       	ldd	r27, Y+4	; 0x04
    10aa:	80 93 16 22 	sts	0x2216, r24
    10ae:	90 93 17 22 	sts	0x2217, r25
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    10b2:	24 96       	adiw	r28, 0x04	; 4
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <set_rebuild_play_list>:

void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    10be:	fc 01       	movw	r30, r24
    10c0:	62 83       	std	Z+2, r22	; 0x02
}
    10c2:	08 95       	ret

000010c4 <continue_sequencer>:
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	60 97       	sbiw	r28, 0x10	; 16
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	8c 01       	movw	r16, r24
    10e6:	d6 2e       	mov	r13, r22

    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    10e8:	e0 e0       	ldi	r30, 0x00	; 0
    10ea:	f8 e0       	ldi	r31, 0x08	; 8
    10ec:	80 91 01 08 	lds	r24, 0x0801
    10f0:	8f 7d       	andi	r24, 0xDF	; 223
    10f2:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    10f4:	80 91 01 08 	lds	r24, 0x0801
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    10fc:	80 91 0c 08 	lds	r24, 0x080C
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1104:	80 91 0c 08 	lds	r24, 0x080C
    1108:	80 64       	ori	r24, 0x40	; 64
    110a:	84 87       	std	Z+12, r24	; 0x0c
    
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
    if (sequencer->note_list->length == 0)
    110c:	f8 01       	movw	r30, r16
    110e:	ef 58       	subi	r30, 0x8F	; 143
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	01 90       	ld	r0, Z+
    1114:	f0 81       	ld	r31, Z
    1116:	e0 2d       	mov	r30, r0
    1118:	80 81       	ld	r24, Z
    111a:	88 23       	and	r24, r24
    111c:	09 f4       	brne	.+2      	; 0x1120 <continue_sequencer+0x5c>
    111e:	9d c1       	rjmp	.+826    	; 0x145a <continue_sequencer+0x396>
        return;
    
    
    current_time = (uint32_t) TCC0.CNT;
    1120:	80 91 20 08 	lds	r24, 0x0820
    1124:	90 91 21 08 	lds	r25, 0x0821
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	ab 83       	std	Y+3, r26	; 0x03
    1132:	bc 83       	std	Y+4, r27	; 0x04
    }
    */
    
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    1134:	d8 01       	movw	r26, r16
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	8c 91       	ld	r24, X
    113a:	11 97       	sbiw	r26, 0x01	; 1
    113c:	88 23       	and	r24, r24
    113e:	a1 f0       	breq	.+40     	; 0x1168 <continue_sequencer+0xa4>
        midi_send_noteoff(serial_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    1140:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
    1144:	d8 01       	movw	r26, r16
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	ec 91       	ld	r30, X
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e0 0f       	add	r30, r16
    1152:	f1 1f       	adc	r31, r17
    1154:	01 88       	ldd	r0, Z+17	; 0x11
    1156:	f2 89       	ldd	r31, Z+18	; 0x12
    1158:	e0 2d       	mov	r30, r0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	40 81       	ld	r20, Z
    115e:	21 81       	ldd	r18, Z+1	; 0x01
    1160:	0e 94 3b 0c 	call	0x1876	; 0x1876 <midi_send_noteoff>
        sequencer->play_status = 0;
    1164:	f8 01       	movw	r30, r16
    1166:	11 82       	std	Z+1, r1	; 0x01
    const uint8_t pattern_pot_sel= 4;
    const uint8_t pattern_pot_min = 0;
    const uint8_t pattern_pot_max = 6;
    
    //read the new values from the pots
    uint8_t octave_max_new = get_pot_value(octave_pot_sel, octave_pot_min, octave_pot_max);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	43 e0       	ldi	r20, 0x03	; 3
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	0e 94 c4 01 	call	0x388	; 0x388 <get_pot_value>
    1176:	a8 2e       	mov	r10, r24
    uint8_t repeat_max_new = get_pot_value(repeat_pot_sel, repeat_pot_min, repeat_pot_max);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	44 e0       	ldi	r20, 0x04	; 4
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	0e 94 c4 01 	call	0x388	; 0x388 <get_pot_value>
    1186:	b8 2e       	mov	r11, r24
    uint8_t division_new = get_pot_value(division_pot_sel,division_pot_min,division_pot_max);
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	46 e0       	ldi	r20, 0x06	; 6
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	0e 94 c4 01 	call	0x388	; 0x388 <get_pot_value>
    1196:	c8 2e       	mov	r12, r24
    uint16_t duration_new = get_pot_value(duration_pot_sel, duration_pot_min, duration_pot_max);
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	4f ef       	ldi	r20, 0xFF	; 255
    11a0:	5f ef       	ldi	r21, 0xFF	; 255
    11a2:	0e 94 c4 01 	call	0x388	; 0x388 <get_pot_value>
    11a6:	7c 01       	movw	r14, r24
    uint8_t pattern_new = get_pot_value(pattern_pot_sel, pattern_pot_min, pattern_pot_max);
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	46 e0       	ldi	r20, 0x06	; 6
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	0e 94 c4 01 	call	0x388	; 0x388 <get_pot_value>
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    11b6:	d8 01       	movw	r26, r16
    11b8:	17 96       	adiw	r26, 0x07	; 7
    11ba:	2c 91       	ld	r18, X
    11bc:	17 97       	sbiw	r26, 0x07	; 7
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    11be:	50 96       	adiw	r26, 0x10	; 16
    11c0:	9c 91       	ld	r25, X
    11c2:	50 97       	sbiw	r26, 0x10	; 16
    11c4:	9c 15       	cp	r25, r12
    11c6:	29 f4       	brne	.+10     	; 0x11d2 <continue_sequencer+0x10e>
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	2b 15       	cp	r18, r11
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <continue_sequencer+0x110>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <continue_sequencer+0x110>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    11d2:	91 e0       	ldi	r25, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    11d4:	f8 01       	movw	r30, r16
    11d6:	26 85       	ldd	r18, Z+14	; 0x0e
    11d8:	37 85       	ldd	r19, Z+15	; 0x0f
    11da:	2e 15       	cp	r18, r14
    11dc:	3f 05       	cpc	r19, r15
    11de:	11 f4       	brne	.+4      	; 0x11e4 <continue_sequencer+0x120>
    11e0:	99 2e       	mov	r9, r25
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <continue_sequencer+0x124>
        update_stop_time_increment = 1;
    11e4:	99 24       	eor	r9, r9
    11e6:	93 94       	inc	r9
    }
    
    if (sequencer->pattern != pattern_new){
    11e8:	d8 01       	movw	r26, r16
    11ea:	1d 96       	adiw	r26, 0x0d	; 13
    11ec:	2c 91       	ld	r18, X
    11ee:	1d 97       	sbiw	r26, 0x0d	; 13
    11f0:	28 17       	cp	r18, r24
    11f2:	21 f0       	breq	.+8      	; 0x11fc <continue_sequencer+0x138>
        sequencer->rebuild_play_list = 1;
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	2c 93       	st	X, r18
    11fa:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    11fc:	f8 01       	movw	r30, r16
    11fe:	a0 86       	std	Z+8, r10	; 0x08
    sequencer->repeat_max = repeat_max_new;
    1200:	b7 82       	std	Z+7, r11	; 0x07
    sequencer->division = division_new;
    1202:	c0 8a       	std	Z+16, r12	; 0x10
    sequencer->duration = duration_new;
    1204:	e6 86       	std	Z+14, r14	; 0x0e
    1206:	f7 86       	std	Z+15, r15	; 0x0f
    sequencer->pattern = pattern_new;
    1208:	85 87       	std	Z+13, r24	; 0x0d
    
    if (update_start_time_increment)
    120a:	99 23       	and	r25, r25
    120c:	19 f0       	breq	.+6      	; 0x1214 <continue_sequencer+0x150>
        calculate_start_time_increment(sequencer);
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 2c 07 	call	0xe58	; 0xe58 <calculate_start_time_increment>
    if (update_stop_time_increment)
    1214:	99 20       	and	r9, r9
    1216:	41 f1       	breq	.+80     	; 0x1268 <continue_sequencer+0x1a4>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    1218:	d8 01       	movw	r26, r16
    121a:	1e 96       	adiw	r26, 0x0e	; 14
    121c:	6d 91       	ld	r22, X+
    121e:	7c 91       	ld	r23, X
    1220:	1f 97       	sbiw	r26, 0x0f	; 15
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	19 96       	adiw	r26, 0x09	; 9
    1228:	2d 91       	ld	r18, X+
    122a:	3c 91       	ld	r19, X
    122c:	1a 97       	sbiw	r26, 0x0a	; 10
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__mulsi3>
    1236:	6d 87       	std	Y+13, r22	; 0x0d
    1238:	7e 87       	std	Y+14, r23	; 0x0e
    123a:	8f 87       	std	Y+15, r24	; 0x0f
    123c:	98 8b       	std	Y+16, r25	; 0x10
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    123e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1240:	7e 85       	ldd	r23, Y+14	; 0x0e
    1242:	8f 85       	ldd	r24, Y+15	; 0x0f
    1244:	98 89       	ldd	r25, Y+16	; 0x10
    1246:	2f ef       	ldi	r18, 0xFF	; 255
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
    1252:	2d 87       	std	Y+13, r18	; 0x0d
    1254:	3e 87       	std	Y+14, r19	; 0x0e
    1256:	4f 87       	std	Y+15, r20	; 0x0f
    1258:	58 8b       	std	Y+16, r21	; 0x10
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    125a:	8d 85       	ldd	r24, Y+13	; 0x0d
    125c:	9e 85       	ldd	r25, Y+14	; 0x0e
    125e:	af 85       	ldd	r26, Y+15	; 0x0f
    1260:	b8 89       	ldd	r27, Y+16	; 0x10
    1262:	f8 01       	movw	r30, r16
    1264:	83 87       	std	Z+11, r24	; 0x0b
    1266:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	3a 81       	ldd	r19, Y+2	; 0x02
    126c:	4b 81       	ldd	r20, Y+3	; 0x03
    126e:	5c 81       	ldd	r21, Y+4	; 0x04
    1270:	d8 01       	movw	r26, r16
    1272:	19 96       	adiw	r26, 0x09	; 9
    1274:	8d 91       	ld	r24, X+
    1276:	9c 91       	ld	r25, X
    1278:	1a 97       	sbiw	r26, 0x0a	; 10
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	a4 1f       	adc	r26, r20
    1284:	b5 1f       	adc	r27, r21
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	af 83       	std	Y+7, r26	; 0x07
    128c:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    128e:	29 81       	ldd	r18, Y+1	; 0x01
    1290:	3a 81       	ldd	r19, Y+2	; 0x02
    1292:	4b 81       	ldd	r20, Y+3	; 0x03
    1294:	5c 81       	ldd	r21, Y+4	; 0x04
    1296:	f8 01       	movw	r30, r16
    1298:	83 85       	ldd	r24, Z+11	; 0x0b
    129a:	94 85       	ldd	r25, Z+12	; 0x0c
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	a4 1f       	adc	r26, r20
    12a6:	b5 1f       	adc	r27, r21
    12a8:	89 87       	std	Y+9, r24	; 0x09
    12aa:	9a 87       	std	Y+10, r25	; 0x0a
    12ac:	ab 87       	std	Y+11, r26	; 0x0b
    12ae:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    12b0:	2d 81       	ldd	r18, Y+5	; 0x05
    12b2:	3e 81       	ldd	r19, Y+6	; 0x06
    12b4:	4f 81       	ldd	r20, Y+7	; 0x07
    12b6:	58 85       	ldd	r21, Y+8	; 0x08
    12b8:	80 91 28 08 	lds	r24, 0x0828
    12bc:	90 91 29 08 	lds	r25, 0x0829
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	82 17       	cp	r24, r18
    12c6:	93 07       	cpc	r25, r19
    12c8:	a4 07       	cpc	r26, r20
    12ca:	b5 07       	cpc	r27, r21
    12cc:	90 f4       	brcc	.+36     	; 0x12f2 <continue_sequencer+0x22e>
        next_start_time = next_start_time - TCC0.CCA;
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	af 81       	ldd	r26, Y+7	; 0x07
    12d4:	b8 85       	ldd	r27, Y+8	; 0x08
    12d6:	20 91 28 08 	lds	r18, 0x0828
    12da:	30 91 29 08 	lds	r19, 0x0829
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	82 1b       	sub	r24, r18
    12e4:	93 0b       	sbc	r25, r19
    12e6:	a4 0b       	sbc	r26, r20
    12e8:	b5 0b       	sbc	r27, r21
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	af 83       	std	Y+7, r26	; 0x07
    12f0:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    12f2:	29 85       	ldd	r18, Y+9	; 0x09
    12f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    12f8:	5c 85       	ldd	r21, Y+12	; 0x0c
    12fa:	80 91 28 08 	lds	r24, 0x0828
    12fe:	90 91 29 08 	lds	r25, 0x0829
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	82 17       	cp	r24, r18
    1308:	93 07       	cpc	r25, r19
    130a:	a4 07       	cpc	r26, r20
    130c:	b5 07       	cpc	r27, r21
    130e:	90 f4       	brcc	.+36     	; 0x1334 <continue_sequencer+0x270>
        next_stop_time = next_stop_time - TCC0.CCA;
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	ab 85       	ldd	r26, Y+11	; 0x0b
    1316:	bc 85       	ldd	r27, Y+12	; 0x0c
    1318:	20 91 28 08 	lds	r18, 0x0828
    131c:	30 91 29 08 	lds	r19, 0x0829
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	82 1b       	sub	r24, r18
    1326:	93 0b       	sbc	r25, r19
    1328:	a4 0b       	sbc	r26, r20
    132a:	b5 0b       	sbc	r27, r21
    132c:	89 87       	std	Y+9, r24	; 0x09
    132e:	9a 87       	std	Y+10, r25	; 0x0a
    1330:	ab 87       	std	Y+11, r26	; 0x0b
    1332:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	af 81       	ldd	r26, Y+7	; 0x07
    133a:	b8 85       	ldd	r27, Y+8	; 0x08
    133c:	e0 e0       	ldi	r30, 0x00	; 0
    133e:	f8 e0       	ldi	r31, 0x08	; 8
    1340:	82 a7       	std	Z+42, r24	; 0x2a
    1342:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	ab 85       	ldd	r26, Y+11	; 0x0b
    134a:	bc 85       	ldd	r27, Y+12	; 0x0c
    134c:	84 a7       	std	Z+44, r24	; 0x2c
    134e:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    1350:	d8 01       	movw	r26, r16
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	8c 91       	ld	r24, X
    1356:	12 97       	sbiw	r26, 0x02	; 2
    1358:	88 23       	and	r24, r24
    135a:	31 f1       	breq	.+76     	; 0x13a8 <continue_sequencer+0x2e4>
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    135c:	f8 01       	movw	r30, r16
    135e:	ef 58       	subi	r30, 0x8F	; 143
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	01 90       	ld	r0, Z+
    1364:	f0 81       	ld	r31, Z
    1366:	e0 2d       	mov	r30, r0
    1368:	a1 81       	ldd	r26, Z+1	; 0x01
    136a:	b2 81       	ldd	r27, Z+2	; 0x02
    //builds the play list according to pattern selection
    
    NoteList* note_list = sequencer->note_list;
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0d c0       	rjmp	.+26     	; 0x138a <continue_sequencer+0x2c6>

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
                sequencer->play_list[play_list_index++] = current_note;
    1370:	e8 2f       	mov	r30, r24
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	e0 0f       	add	r30, r16
    137a:	f1 1f       	adc	r31, r17
    137c:	a1 8b       	std	Z+17, r26	; 0x11
    137e:	b2 8b       	std	Z+18, r27	; 0x12
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    1382:	13 96       	adiw	r26, 0x03	; 3
    1384:	0d 90       	ld	r0, X+
    1386:	bc 91       	ld	r27, X
    1388:	a0 2d       	mov	r26, r0
    138a:	10 97       	sbiw	r26, 0x00	; 0
    138c:	89 f7       	brne	.-30     	; 0x1370 <continue_sequencer+0x2ac>
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index;
    138e:	f8 01       	movw	r30, r16
    1390:	86 83       	std	Z+6, r24	; 0x06
    1392:	05 c0       	rjmp	.+10     	; 0x139e <continue_sequencer+0x2da>
    
    //check if the list is now shorter than the current note_index
    while (sequencer->note_index > sequencer->note_max)
        sequencer->note_index -= sequencer->note_max;
    1394:	98 1b       	sub	r25, r24
    1396:	d8 01       	movw	r26, r16
    1398:	13 96       	adiw	r26, 0x03	; 3
    139a:	9c 93       	st	X, r25
    139c:	13 97       	sbiw	r26, 0x03	; 3
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index;
    
    //check if the list is now shorter than the current note_index
    while (sequencer->note_index > sequencer->note_max)
    139e:	f8 01       	movw	r30, r16
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	89 17       	cp	r24, r25
    13a4:	b8 f3       	brcs	.-18     	; 0x1394 <continue_sequencer+0x2d0>
        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    13a6:	12 82       	std	Z+2, r1	; 0x02
    if (sequencer->rebuild_play_list)
        build_play_list(sequencer);
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    13a8:	dd 20       	and	r13, r13
    13aa:	69 f5       	brne	.+90     	; 0x1406 <continue_sequencer+0x342>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    13ac:	d8 01       	movw	r26, r16
    13ae:	14 96       	adiw	r26, 0x04	; 4
    13b0:	8c 91       	ld	r24, X
    13b2:	14 97       	sbiw	r26, 0x04	; 4
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	14 96       	adiw	r26, 0x04	; 4
    13b8:	8c 93       	st	X, r24
    13ba:	14 97       	sbiw	r26, 0x04	; 4
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    13bc:	17 96       	adiw	r26, 0x07	; 7
    13be:	9c 91       	ld	r25, X
    13c0:	17 97       	sbiw	r26, 0x07	; 7
    13c2:	98 17       	cp	r25, r24
    13c4:	50 f4       	brcc	.+20     	; 0x13da <continue_sequencer+0x316>
        sequencer->repeat_index = 0;
    13c6:	14 96       	adiw	r26, 0x04	; 4
    13c8:	1c 92       	st	X, r1
    13ca:	14 97       	sbiw	r26, 0x04	; 4
        sequencer->note_index += 1;
    13cc:	13 96       	adiw	r26, 0x03	; 3
    13ce:	8c 91       	ld	r24, X
    13d0:	13 97       	sbiw	r26, 0x03	; 3
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	8c 93       	st	X, r24
    13d8:	13 97       	sbiw	r26, 0x03	; 3
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    13da:	f8 01       	movw	r30, r16
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	86 81       	ldd	r24, Z+6	; 0x06
    13e0:	89 17       	cp	r24, r25
    13e2:	20 f4       	brcc	.+8      	; 0x13ec <continue_sequencer+0x328>
        sequencer->note_index = 0;
    13e4:	13 82       	std	Z+3, r1	; 0x03
        sequencer->octave_index += 1;
    13e6:	85 81       	ldd	r24, Z+5	; 0x05
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	85 83       	std	Z+5, r24	; 0x05
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    13ec:	d8 01       	movw	r26, r16
    13ee:	15 96       	adiw	r26, 0x05	; 5
    13f0:	9c 91       	ld	r25, X
    13f2:	15 97       	sbiw	r26, 0x05	; 5
    13f4:	18 96       	adiw	r26, 0x08	; 8
    13f6:	8c 91       	ld	r24, X
    13f8:	18 97       	sbiw	r26, 0x08	; 8
    13fa:	89 17       	cp	r24, r25
    13fc:	40 f4       	brcc	.+16     	; 0x140e <continue_sequencer+0x34a>
        sequencer->octave_index = 0;
    13fe:	15 96       	adiw	r26, 0x05	; 5
    1400:	1c 92       	st	X, r1
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	04 c0       	rjmp	.+8      	; 0x140e <continue_sequencer+0x34a>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    1406:	f8 01       	movw	r30, r16
    1408:	15 82       	std	Z+5, r1	; 0x05
    sequencer->note_index = 0;
    140a:	13 82       	std	Z+3, r1	; 0x03
    sequencer->repeat_index = 0;
    140c:	14 82       	std	Z+4, r1	; 0x04
    else{
        reset_play_list_indeces(sequencer);
    }
    
    //send midi message to start the note
    midi_send_noteon(serial_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    140e:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
    1412:	d8 01       	movw	r26, r16
    1414:	13 96       	adiw	r26, 0x03	; 3
    1416:	ec 91       	ld	r30, X
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	e0 0f       	add	r30, r16
    1420:	f1 1f       	adc	r31, r17
    1422:	01 88       	ldd	r0, Z+17	; 0x11
    1424:	f2 89       	ldd	r31, Z+18	; 0x12
    1426:	e0 2d       	mov	r30, r0
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	40 81       	ld	r20, Z
    142c:	21 81       	ldd	r18, Z+1	; 0x01
    142e:	0e 94 29 0c 	call	0x1852	; 0x1852 <midi_send_noteon>
    
    set_LEDs_on(0,0,0,1);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	0e 94 c4 02 	call	0x588	; 0x588 <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	f8 01       	movw	r30, r16
    1442:	81 83       	std	Z+1, r24	; 0x01
    
    //set run flag
    sequencer->run_status = 1;
    1444:	80 83       	st	Z, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    1446:	e0 e0       	ldi	r30, 0x00	; 0
    1448:	f8 e0       	ldi	r31, 0x08	; 8
    144a:	80 91 01 08 	lds	r24, 0x0801
    144e:	80 62       	ori	r24, 0x20	; 32
    1450:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    1452:	80 91 01 08 	lds	r24, 0x0801
    1456:	80 64       	ori	r24, 0x40	; 64
    1458:	81 83       	std	Z+1, r24	; 0x01
}
    145a:	60 96       	adiw	r28, 0x10	; 16
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	08 95       	ret

00001478 <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	16 2f       	mov	r17, r22
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    1482:	e0 e0       	ldi	r30, 0x00	; 0
    1484:	f8 e0       	ldi	r31, 0x08	; 8
    1486:	80 91 01 08 	lds	r24, 0x0801
    148a:	8f 7d       	andi	r24, 0xDF	; 223
    148c:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    148e:	80 91 01 08 	lds	r24, 0x0801
    1492:	8f 7b       	andi	r24, 0xBF	; 191
    1494:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    1496:	80 91 0c 08 	lds	r24, 0x080C
    149a:	80 64       	ori	r24, 0x40	; 64
    149c:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 23       	and	r24, r24
    14a2:	b9 f0       	breq	.+46     	; 0x14d2 <stop_sequencer+0x5a>
        midi_send_noteoff(serial_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    14a4:	0e 94 2e 0b 	call	0x165c	; 0x165c <serial_midi_device>
    14a8:	eb 81       	ldd	r30, Y+3	; 0x03
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	ec 0f       	add	r30, r28
    14b2:	fd 1f       	adc	r31, r29
    14b4:	01 88       	ldd	r0, Z+17	; 0x11
    14b6:	f2 89       	ldd	r31, Z+18	; 0x12
    14b8:	e0 2d       	mov	r30, r0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	40 81       	ld	r20, Z
    14be:	21 81       	ldd	r18, Z+1	; 0x01
    14c0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <midi_send_noteoff>
        set_LEDs_off(0,0,0,1);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <set_LEDs_off>
        sequencer->play_status = 0;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, renable the note on interrupt
    if (full_stop)
    14d2:	11 23       	and	r17, r17
    14d4:	11 f0       	breq	.+4      	; 0x14da <stop_sequencer+0x62>
        sequencer->run_status = 0;
    14d6:	18 82       	st	Y, r1
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <stop_sequencer+0x6e>
    else    
        TCC0.CTRLB |= 0x20;
    14da:	80 91 01 08 	lds	r24, 0x0801
    14de:	80 62       	ori	r24, 0x20	; 32
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	f8 e0       	ldi	r31, 0x08	; 8
    14e4:	81 83       	std	Z+1, r24	; 0x01
    
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	08 95       	ret

000014ee <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 81       	ld	r18, Z
    14f2:	22 23       	and	r18, r18
    14f4:	19 f0       	breq	.+6      	; 0x14fc <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <continue_sequencer>
    14fc:	08 95       	ret

000014fe <__vector_17>:
}



//interrupt to start the next note
ISR(TCC0_CCB_vect){
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(get_sequencer(), 0);
    1520:	8b e0       	ldi	r24, 0x0B	; 11
    1522:	92 e2       	ldi	r25, 0x22	; 34
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	0e 94 62 08 	call	0x10c4	; 0x10c4 <continue_sequencer>
}
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(get_sequencer(), 0);
    156e:	8b e0       	ldi	r24, 0x0B	; 11
    1570:	92 e2       	ldi	r25, 0x22	; 34
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	0e 94 3c 0a 	call	0x1478	; 0x1478 <stop_sequencer>
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <serial_midi_send>:

MidiDevice * serial_midi_device() {
   return &midi_device;
}

void serial_midi_send(MidiDevice* device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    159a:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    159c:	80 91 b1 09 	lds	r24, 0x09B1
    15a0:	85 ff       	sbrs	r24, 5
    15a2:	fc cf       	rjmp	.-8      	; 0x159c <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    15a4:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    15a8:	62 30       	cpi	r22, 0x02	; 2
    15aa:	70 f0       	brcs	.+28     	; 0x15c8 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    15ac:	80 91 b1 09 	lds	r24, 0x09B1
    15b0:	85 ff       	sbrs	r24, 5
    15b2:	fc cf       	rjmp	.-8      	; 0x15ac <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    15b4:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    15b8:	63 30       	cpi	r22, 0x03	; 3
    15ba:	31 f4       	brne	.+12     	; 0x15c8 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    15bc:	80 91 b1 09 	lds	r24, 0x09B1
    15c0:	85 ff       	sbrs	r24, 5
    15c2:	fc cf       	rjmp	.-8      	; 0x15bc <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    15c4:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <noteoff_to_arpeggiator>:
            continue_sequencer(get_sequencer(), 1);
    }
    
}

void noteoff_to_arpeggiator(MidiDevice * device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
    
    if (remove_note_by_pitch(get_note_list(), inByte1)){
    15d6:	49 83       	std	Y+1, r20	; 0x01
    15d8:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_note_list>
    15dc:	49 81       	ldd	r20, Y+1	; 0x01
    15de:	64 2f       	mov	r22, r20
    15e0:	0e 94 c2 05 	call	0xb84	; 0xb84 <remove_note_by_pitch>
    15e4:	88 23       	and	r24, r24
    15e6:	81 f0       	breq	.+32     	; 0x1608 <noteoff_to_arpeggiator+0x3c>
        set_rebuild_play_list(get_sequencer(), 1);
    15e8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	0e 94 5f 08 	call	0x10be	; 0x10be <set_rebuild_play_list>
        
        if (get_note_list_length(get_note_list()) == 0)
    15f2:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_note_list>
    15f6:	0e 94 9a 05 	call	0xb34	; 0xb34 <get_note_list_length>
    15fa:	88 23       	and	r24, r24
    15fc:	29 f4       	brne	.+10     	; 0x1608 <noteoff_to_arpeggiator+0x3c>
            stop_sequencer(get_sequencer(), 1);
    15fe:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	0e 94 3c 0a 	call	0x1478	; 0x1478 <stop_sequencer>
    }
}
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <noteon_to_arpeggiator>:
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <noteon_to_arpeggiator+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(get_note_list(), inByte1, inByte2)){
    161a:	2a 83       	std	Y+2, r18	; 0x02
    161c:	49 83       	std	Y+1, r20	; 0x01
    161e:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_note_list>
    1622:	49 81       	ldd	r20, Y+1	; 0x01
    1624:	64 2f       	mov	r22, r20
    1626:	2a 81       	ldd	r18, Y+2	; 0x02
    1628:	42 2f       	mov	r20, r18
    162a:	0e 94 32 06 	call	0xc64	; 0xc64 <insert_note>
    162e:	88 23       	and	r24, r24
    1630:	81 f0       	breq	.+32     	; 0x1652 <noteon_to_arpeggiator+0x42>
        set_rebuild_play_list(get_sequencer(), 1);
    1632:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 5f 08 	call	0x10be	; 0x10be <set_rebuild_play_list>
        
        if (get_note_list_length(get_note_list()) == 1)
    163c:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_note_list>
    1640:	0e 94 9a 05 	call	0xb34	; 0xb34 <get_note_list_length>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	29 f4       	brne	.+10     	; 0x1652 <noteon_to_arpeggiator+0x42>
            continue_sequencer(get_sequencer(), 1);
    1648:	0e 94 db 07 	call	0xfb6	; 0xfb6 <get_sequencer>
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <continue_sequencer>
    }
    
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <serial_midi_device>:

static MidiDevice midi_device;

MidiDevice * serial_midi_device() {
   return &midi_device;
}
    165c:	8e e7       	ldi	r24, 0x7E	; 126
    165e:	92 e2       	ldi	r25, 0x22	; 34
    1660:	08 95       	ret

00001662 <serial_midi_init>:
        if (get_note_list_length(get_note_list()) == 0)
            stop_sequencer(get_sequencer(), 1);
    }
}

void serial_midi_init(){
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
   //set up the device
   midi_device_init(&midi_device);
    166a:	ce e7       	ldi	r28, 0x7E	; 126
    166c:	d2 e2       	ldi	r29, 0x22	; 34
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <midi_device_init>
   
   midi_device_set_send_func(&midi_device, serial_midi_send);
    1674:	0d ec       	ldi	r16, 0xCD	; 205
    1676:	1a e0       	ldi	r17, 0x0A	; 10
    1678:	ce 01       	movw	r24, r28
    167a:	b8 01       	movw	r22, r16
    167c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <midi_device_set_send_func>
   midi_register_noteon_callback(&midi_device, noteon_to_arpeggiator);
    1680:	ce 01       	movw	r24, r28
    1682:	68 e0       	ldi	r22, 0x08	; 8
    1684:	7b e0       	ldi	r23, 0x0B	; 11
    1686:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <midi_register_noteon_callback>
   midi_register_noteoff_callback(&midi_device, noteoff_to_arpeggiator);
    168a:	ce 01       	movw	r24, r28
    168c:	66 ee       	ldi	r22, 0xE6	; 230
    168e:	7a e0       	ldi	r23, 0x0A	; 10
    1690:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be send through to midi out
   midi_register_fallthrough_callback(&midi_device, serial_midi_send);
    1694:	ce 01       	movw	r24, r28
    1696:	b8 01       	movw	r22, r16
    1698:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <midi_register_fallthrough_callback>

}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	08 95       	ret

000016a6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    16a6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    16a8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    16aa:	63 83       	std	Z+3, r22	; 0x03
    16ac:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    16ae:	11 82       	std	Z+1, r1	; 0x01
    16b0:	10 82       	st	Z, r1
}
    16b2:	08 95       	ret

000016b4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	ec 01       	movw	r28, r24
    16be:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    16c0:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <store_and_clear_interrupt>
    16c4:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    16c6:	29 81       	ldd	r18, Y+1	; 0x01
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	c9 01       	movw	r24, r18
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	6a 81       	ldd	r22, Y+2	; 0x02
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
    16d6:	48 81       	ld	r20, Y
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	84 17       	cp	r24, r20
    16dc:	95 07       	cpc	r25, r21
    16de:	29 f4       	brne	.+10     	; 0x16ea <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    16e0:	80 2f       	mov	r24, r16
    16e2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
      return false;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	13 c0       	rjmp	.+38     	; 0x1710 <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    16ea:	eb 81       	ldd	r30, Y+3	; 0x03
    16ec:	fc 81       	ldd	r31, Y+4	; 0x04
    16ee:	e2 0f       	add	r30, r18
    16f0:	f3 1f       	adc	r31, r19
    16f2:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    16f4:	29 81       	ldd	r18, Y+1	; 0x01
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	2f 5f       	subi	r18, 0xFF	; 255
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	6a 81       	ldd	r22, Y+2	; 0x02
    16fe:	c9 01       	movw	r24, r18
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
    1706:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1708:	80 2f       	mov	r24, r16
    170a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
      return true;
    170e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1722:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1726:	29 81       	ldd	r18, Y+1	; 0x01
    1728:	98 81       	ld	r25, Y
    172a:	29 17       	cp	r18, r25
    172c:	10 f0       	brcs	.+4      	; 0x1732 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    172e:	12 2f       	mov	r17, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    1732:	1a 81       	ldd	r17, Y+2	; 0x02
    1734:	12 0f       	add	r17, r18
    1736:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1738:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
   return len;
}
    173c:	81 2f       	mov	r24, r17
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	08 95       	ret

00001746 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1746:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1748:	80 81       	ld	r24, Z
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	86 0f       	add	r24, r22
    174e:	91 1d       	adc	r25, r1
    1750:	62 81       	ldd	r22, Z+2	; 0x02
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
    1758:	03 80       	ldd	r0, Z+3	; 0x03
    175a:	f4 81       	ldd	r31, Z+4	; 0x04
    175c:	e0 2d       	mov	r30, r0
    175e:	e8 0f       	add	r30, r24
    1760:	f9 1f       	adc	r31, r25
}
    1762:	80 81       	ld	r24, Z
    1764:	08 95       	ret

00001766 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    1776:	69 83       	std	Y+1, r22	; 0x01
    1778:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <store_and_clear_interrupt>
    177c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    177e:	f8 01       	movw	r30, r16
    1780:	20 81       	ld	r18, Z
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	69 81       	ldd	r22, Y+1	; 0x01
    1786:	26 0f       	add	r18, r22
    1788:	31 1d       	adc	r19, r1
    178a:	62 81       	ldd	r22, Z+2	; 0x02
    178c:	c9 01       	movw	r24, r18
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
    1794:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1796:	84 2f       	mov	r24, r20
    1798:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
}
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <store_and_clear_interrupt>:
interrupt_setting_t store_and_clear_interrupt(void) {
//   uint8_t sreg = SREG;
    uint8_t sreg = 0;
//    cli();
    return sreg;
}
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret

000017ac <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
//   SREG = setting;
}
    17ac:	08 95       	ret

000017ae <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    17ae:	88 1f       	adc	r24, r24
    17b0:	88 27       	eor	r24, r24
    17b2:	88 1f       	adc	r24, r24
    17b4:	08 95       	ret

000017b6 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	88 3f       	cpi	r24, 0xF8	; 248
    17ba:	08 f4       	brcc	.+2      	; 0x17be <midi_is_realtime+0x8>
    17bc:	90 e0       	ldi	r25, 0x00	; 0
}
    17be:	89 2f       	mov	r24, r25
    17c0:	08 95       	ret

000017c2 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	20 7f       	andi	r18, 0xF0	; 240
    17c8:	30 70       	andi	r19, 0x00	; 0
    17ca:	20 3b       	cpi	r18, 0xB0	; 176
    17cc:	31 05       	cpc	r19, r1
    17ce:	f1 f0       	breq	.+60     	; 0x180c <midi_packet_length+0x4a>
    17d0:	21 3b       	cpi	r18, 0xB1	; 177
    17d2:	31 05       	cpc	r19, r1
    17d4:	54 f4       	brge	.+20     	; 0x17ea <midi_packet_length+0x28>
    17d6:	20 39       	cpi	r18, 0x90	; 144
    17d8:	31 05       	cpc	r19, r1
    17da:	c1 f0       	breq	.+48     	; 0x180c <midi_packet_length+0x4a>
    17dc:	20 3a       	cpi	r18, 0xA0	; 160
    17de:	31 05       	cpc	r19, r1
    17e0:	a9 f0       	breq	.+42     	; 0x180c <midi_packet_length+0x4a>
    17e2:	20 38       	cpi	r18, 0x80	; 128
    17e4:	31 05       	cpc	r19, r1
    17e6:	e9 f4       	brne	.+58     	; 0x1822 <midi_packet_length+0x60>
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <midi_packet_length+0x4a>
    17ea:	20 3d       	cpi	r18, 0xD0	; 208
    17ec:	31 05       	cpc	r19, r1
    17ee:	d9 f0       	breq	.+54     	; 0x1826 <midi_packet_length+0x64>
    17f0:	21 3d       	cpi	r18, 0xD1	; 209
    17f2:	31 05       	cpc	r19, r1
    17f4:	24 f4       	brge	.+8      	; 0x17fe <midi_packet_length+0x3c>
    17f6:	20 3c       	cpi	r18, 0xC0	; 192
    17f8:	31 05       	cpc	r19, r1
    17fa:	99 f4       	brne	.+38     	; 0x1822 <midi_packet_length+0x60>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <midi_packet_length+0x64>
    17fe:	20 3e       	cpi	r18, 0xE0	; 224
    1800:	31 05       	cpc	r19, r1
    1802:	21 f0       	breq	.+8      	; 0x180c <midi_packet_length+0x4a>
    1804:	20 3f       	cpi	r18, 0xF0	; 240
    1806:	31 05       	cpc	r19, r1
    1808:	61 f4       	brne	.+24     	; 0x1822 <midi_packet_length+0x60>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1810:	e8 2f       	mov	r30, r24
    1812:	e1 5f       	subi	r30, 0xF1	; 241
    1814:	ef 30       	cpi	r30, 0x0F	; 15
    1816:	48 f4       	brcc	.+18     	; 0x182a <midi_packet_length+0x68>
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	e0 5e       	subi	r30, 0xE0	; 224
    181c:	ff 4d       	sbci	r31, 0xDF	; 223
    181e:	80 81       	ld	r24, Z
    1820:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	08 95       	ret
    182a:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    182c:	08 95       	ret

0000182e <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    182e:	0f 93       	push	r16
    1830:	36 2f       	mov	r19, r22
    1832:	54 2f       	mov	r21, r20
    1834:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1836:	3f 70       	andi	r19, 0x0F	; 15
    1838:	30 6b       	ori	r19, 0xB0	; 176
    183a:	5f 77       	andi	r21, 0x7F	; 127
    183c:	0f 77       	andi	r16, 0x7F	; 127
    183e:	dc 01       	movw	r26, r24
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	43 2f       	mov	r20, r19
    184a:	25 2f       	mov	r18, r21
    184c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1852:	0f 93       	push	r16
    1854:	36 2f       	mov	r19, r22
    1856:	54 2f       	mov	r21, r20
    1858:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    185a:	3f 70       	andi	r19, 0x0F	; 15
    185c:	30 69       	ori	r19, 0x90	; 144
    185e:	5f 77       	andi	r21, 0x7F	; 127
    1860:	0f 77       	andi	r16, 0x7F	; 127
    1862:	dc 01       	movw	r26, r24
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
    1868:	63 e0       	ldi	r22, 0x03	; 3
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	43 2f       	mov	r20, r19
    186e:	25 2f       	mov	r18, r21
    1870:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1876:	0f 93       	push	r16
    1878:	36 2f       	mov	r19, r22
    187a:	54 2f       	mov	r21, r20
    187c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    187e:	3f 70       	andi	r19, 0x0F	; 15
    1880:	30 68       	ori	r19, 0x80	; 128
    1882:	5f 77       	andi	r21, 0x7F	; 127
    1884:	0f 77       	andi	r16, 0x7F	; 127
    1886:	dc 01       	movw	r26, r24
    1888:	ed 91       	ld	r30, X+
    188a:	fc 91       	ld	r31, X
    188c:	63 e0       	ldi	r22, 0x03	; 3
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	43 2f       	mov	r20, r19
    1892:	25 2f       	mov	r18, r21
    1894:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    189a:	0f 93       	push	r16
    189c:	36 2f       	mov	r19, r22
    189e:	54 2f       	mov	r21, r20
    18a0:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    18a2:	3f 70       	andi	r19, 0x0F	; 15
    18a4:	30 6a       	ori	r19, 0xA0	; 160
    18a6:	5f 77       	andi	r21, 0x7F	; 127
    18a8:	0f 77       	andi	r16, 0x7F	; 127
    18aa:	dc 01       	movw	r26, r24
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	43 2f       	mov	r20, r19
    18b6:	25 2f       	mov	r18, r21
    18b8:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    18c4:	20 e2       	ldi	r18, 0x20	; 32
    18c6:	40 30       	cpi	r20, 0x00	; 0
    18c8:	52 07       	cpc	r21, r18
    18ca:	3c f4       	brge	.+14     	; 0x18da <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    18cc:	a0 ee       	ldi	r26, 0xE0	; 224
    18ce:	40 30       	cpi	r20, 0x00	; 0
    18d0:	5a 07       	cpc	r21, r26
    18d2:	34 f0       	brlt	.+12     	; 0x18e0 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    18d4:	00 50       	subi	r16, 0x00	; 0
    18d6:	10 4e       	sbci	r17, 0xE0	; 224
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    18da:	0f ef       	ldi	r16, 0xFF	; 255
    18dc:	1f e3       	ldi	r17, 0x3F	; 63
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    18e0:	00 e0       	ldi	r16, 0x00	; 0
    18e2:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    18e4:	46 2f       	mov	r20, r22
    18e6:	4f 70       	andi	r20, 0x0F	; 15
    18e8:	40 6e       	ori	r20, 0xE0	; 224
    18ea:	20 2f       	mov	r18, r16
    18ec:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    18ee:	00 0f       	add	r16, r16
    18f0:	01 2f       	mov	r16, r17
    18f2:	00 1f       	adc	r16, r16
    18f4:	11 0b       	sbc	r17, r17
    18f6:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    18f8:	0f 77       	andi	r16, 0x7F	; 127
    18fa:	dc 01       	movw	r26, r24
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	63 e0       	ldi	r22, 0x03	; 3
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    190c:	0f 93       	push	r16
    190e:	36 2f       	mov	r19, r22
    1910:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1912:	3f 70       	andi	r19, 0x0F	; 15
    1914:	30 6c       	ori	r19, 0xC0	; 192
    1916:	2f 77       	andi	r18, 0x7F	; 127
    1918:	dc 01       	movw	r26, r24
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	62 e0       	ldi	r22, 0x02	; 2
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	43 2f       	mov	r20, r19
    1924:	00 e0       	ldi	r16, 0x00	; 0
    1926:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    192c:	0f 93       	push	r16
    192e:	36 2f       	mov	r19, r22
    1930:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1932:	3f 70       	andi	r19, 0x0F	; 15
    1934:	30 6d       	ori	r19, 0xD0	; 208
    1936:	2f 77       	andi	r18, 0x7F	; 127
    1938:	dc 01       	movw	r26, r24
    193a:	ed 91       	ld	r30, X+
    193c:	fc 91       	ld	r31, X
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	43 2f       	mov	r20, r19
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    194c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    194e:	dc 01       	movw	r26, r24
    1950:	ed 91       	ld	r30, X+
    1952:	fc 91       	ld	r31, X
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	48 ef       	ldi	r20, 0xF8	; 248
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	09 95       	icall
}
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1964:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1966:	dc 01       	movw	r26, r24
    1968:	ed 91       	ld	r30, X+
    196a:	fc 91       	ld	r31, X
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	49 ef       	ldi	r20, 0xF9	; 249
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	09 95       	icall
}
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    197c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    197e:	dc 01       	movw	r26, r24
    1980:	ed 91       	ld	r30, X+
    1982:	fc 91       	ld	r31, X
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	4a ef       	ldi	r20, 0xFA	; 250
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	09 95       	icall
}
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1994:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1996:	dc 01       	movw	r26, r24
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	4b ef       	ldi	r20, 0xFB	; 251
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	00 e0       	ldi	r16, 0x00	; 0
    19a6:	09 95       	icall
}
    19a8:	0f 91       	pop	r16
    19aa:	08 95       	ret

000019ac <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    19ac:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    19ae:	dc 01       	movw	r26, r24
    19b0:	ed 91       	ld	r30, X+
    19b2:	fc 91       	ld	r31, X
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	4c ef       	ldi	r20, 0xFC	; 252
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	09 95       	icall
}
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    19c4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    19c6:	dc 01       	movw	r26, r24
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	4e ef       	ldi	r20, 0xFE	; 254
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	09 95       	icall
}
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    19dc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    19de:	dc 01       	movw	r26, r24
    19e0:	ed 91       	ld	r30, X+
    19e2:	fc 91       	ld	r31, X
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	4f ef       	ldi	r20, 0xFF	; 255
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	00 e0       	ldi	r16, 0x00	; 0
    19ee:	09 95       	icall
}
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    19f4:	0f 93       	push	r16
    19f6:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    19f8:	2f 77       	andi	r18, 0x7F	; 127
    19fa:	dc 01       	movw	r26, r24
    19fc:	ed 91       	ld	r30, X+
    19fe:	fc 91       	ld	r31, X
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	41 ef       	ldi	r20, 0xF1	; 241
    1a06:	00 e0       	ldi	r16, 0x00	; 0
    1a08:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
   device->send_func(device, 3,
    1a12:	26 2f       	mov	r18, r22
    1a14:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1a16:	8b 01       	movw	r16, r22
    1a18:	00 0f       	add	r16, r16
    1a1a:	01 2f       	mov	r16, r17
    1a1c:	00 1f       	adc	r16, r16
    1a1e:	11 0b       	sbc	r17, r17
    1a20:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1a22:	0f 77       	andi	r16, 0x7F	; 127
    1a24:	dc 01       	movw	r26, r24
    1a26:	ed 91       	ld	r30, X+
    1a28:	fc 91       	ld	r31, X
    1a2a:	63 e0       	ldi	r22, 0x03	; 3
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	42 ef       	ldi	r20, 0xF2	; 242
    1a30:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1a38:	0f 93       	push	r16
    1a3a:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1a3c:	2f 77       	andi	r18, 0x7F	; 127
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	43 ef       	ldi	r20, 0xF3	; 243
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1a52:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1a54:	dc 01       	movw	r26, r24
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	46 ef       	ldi	r20, 0xF6	; 246
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	09 95       	icall
}
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1a6a:	0f 93       	push	r16
    1a6c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1a6e:	dc 01       	movw	r26, r24
    1a70:	ed 91       	ld	r30, X+
    1a72:	fc 91       	ld	r31, X
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	09 95       	icall
}
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1a82:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1a84:	dc 01       	movw	r26, r24
    1a86:	ed 91       	ld	r30, X+
    1a88:	fc 91       	ld	r31, X
    1a8a:	09 95       	icall
}
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1a90:	fc 01       	movw	r30, r24
    1a92:	62 83       	std	Z+2, r22	; 0x02
    1a94:	73 83       	std	Z+3, r23	; 0x03
}
    1a96:	08 95       	ret

00001a98 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1a98:	fc 01       	movw	r30, r24
    1a9a:	64 83       	std	Z+4, r22	; 0x04
    1a9c:	75 83       	std	Z+5, r23	; 0x05
}
    1a9e:	08 95       	ret

00001aa0 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	66 83       	std	Z+6, r22	; 0x06
    1aa4:	77 83       	std	Z+7, r23	; 0x07
}
    1aa6:	08 95       	ret

00001aa8 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	60 87       	std	Z+8, r22	; 0x08
    1aac:	71 87       	std	Z+9, r23	; 0x09
}
    1aae:	08 95       	ret

00001ab0 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	62 87       	std	Z+10, r22	; 0x0a
    1ab4:	73 87       	std	Z+11, r23	; 0x0b
}
    1ab6:	08 95       	ret

00001ab8 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1ab8:	fc 01       	movw	r30, r24
    1aba:	64 87       	std	Z+12, r22	; 0x0c
    1abc:	75 87       	std	Z+13, r23	; 0x0d
}
    1abe:	08 95       	ret

00001ac0 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	66 87       	std	Z+14, r22	; 0x0e
    1ac4:	77 87       	std	Z+15, r23	; 0x0f
}
    1ac6:	08 95       	ret

00001ac8 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1ac8:	fc 01       	movw	r30, r24
    1aca:	60 8b       	std	Z+16, r22	; 0x10
    1acc:	71 8b       	std	Z+17, r23	; 0x11
}
    1ace:	08 95       	ret

00001ad0 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	62 8b       	std	Z+18, r22	; 0x12
    1ad4:	73 8b       	std	Z+19, r23	; 0x13
}
    1ad6:	08 95       	ret

00001ad8 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1ad8:	fc 01       	movw	r30, r24
    1ada:	64 8b       	std	Z+20, r22	; 0x14
    1adc:	75 8b       	std	Z+21, r23	; 0x15
}
    1ade:	08 95       	ret

00001ae0 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	66 8b       	std	Z+22, r22	; 0x16
    1ae4:	77 8b       	std	Z+23, r23	; 0x17
}
    1ae6:	08 95       	ret

00001ae8 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1ae8:	fc 01       	movw	r30, r24
    1aea:	60 8f       	std	Z+24, r22	; 0x18
    1aec:	71 8f       	std	Z+25, r23	; 0x19
}
    1aee:	08 95       	ret

00001af0 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1af0:	fc 01       	movw	r30, r24
    1af2:	62 8f       	std	Z+26, r22	; 0x1a
    1af4:	73 8f       	std	Z+27, r23	; 0x1b
}
    1af6:	08 95       	ret

00001af8 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1af8:	fc 01       	movw	r30, r24
    1afa:	64 8f       	std	Z+28, r22	; 0x1c
    1afc:	75 8f       	std	Z+29, r23	; 0x1d
}
    1afe:	08 95       	ret

00001b00 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1b00:	fc 01       	movw	r30, r24
    1b02:	66 8f       	std	Z+30, r22	; 0x1e
    1b04:	77 8f       	std	Z+31, r23	; 0x1f
}
    1b06:	08 95       	ret

00001b08 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1b0e:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1b10:	1e a2       	std	Y+38, r1	; 0x26
    1b12:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1b14:	bc 01       	movw	r22, r24
    1b16:	68 5d       	subi	r22, 0xD8	; 216
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	88 51       	subi	r24, 0x18	; 24
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	40 ec       	ldi	r20, 0xC0	; 192
    1b20:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1b24:	1a 82       	std	Y+2, r1	; 0x02
    1b26:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1b28:	1c 82       	std	Y+4, r1	; 0x04
    1b2a:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1b2c:	1e 82       	std	Y+6, r1	; 0x06
    1b2e:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1b30:	18 86       	std	Y+8, r1	; 0x08
    1b32:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1b34:	1a 86       	std	Y+10, r1	; 0x0a
    1b36:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1b38:	1c 86       	std	Y+12, r1	; 0x0c
    1b3a:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1b3c:	1e 86       	std	Y+14, r1	; 0x0e
    1b3e:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1b40:	18 8a       	std	Y+16, r1	; 0x10
    1b42:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1b44:	1a 8a       	std	Y+18, r1	; 0x12
    1b46:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1b48:	1c 8a       	std	Y+20, r1	; 0x14
    1b4a:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1b4c:	1e 8a       	std	Y+22, r1	; 0x16
    1b4e:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1b50:	18 8e       	std	Y+24, r1	; 0x18
    1b52:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1b54:	1a 8e       	std	Y+26, r1	; 0x1a
    1b56:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1b58:	1c 8e       	std	Y+28, r1	; 0x1c
    1b5a:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1b5c:	1e 8e       	std	Y+30, r1	; 0x1e
    1b5e:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1b60:	18 a2       	std	Y+32, r1	; 0x20
    1b62:	19 a2       	std	Y+33, r1	; 0x21
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1b80:	e4 2f       	mov	r30, r20
    1b82:	f5 2f       	mov	r31, r21
    1b84:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1b86:	8c 01       	movw	r16, r24
    1b88:	08 51       	subi	r16, 0x18	; 24
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1b8e:	f6 01       	movw	r30, r12
    1b90:	61 91       	ld	r22, Z+
    1b92:	6f 01       	movw	r12, r30
    1b94:	c8 01       	movw	r24, r16
    1b96:	49 83       	std	Y+1, r20	; 0x01
    1b98:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <bytequeue_enqueue>
    1b9c:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1b9e:	8c 2d       	mov	r24, r12
    1ba0:	84 1b       	sub	r24, r20
    1ba2:	8f 15       	cp	r24, r15
    1ba4:	a0 f3       	brcs	.-24     	; 0x1b8e <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	08 95       	ret

00001bb8 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1bb8:	fc 01       	movw	r30, r24
    1bba:	60 83       	st	Z, r22
    1bbc:	71 83       	std	Z+1, r23	; 0x01
}
    1bbe:	08 95       	ret

00001bc0 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	60 a3       	std	Z+32, r22	; 0x20
    1bc4:	71 a3       	std	Z+33, r23	; 0x21
}
    1bc6:	08 95       	ret

00001bc8 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	ec 01       	movw	r28, r24
    1bda:	6b 01       	movw	r12, r22
    1bdc:	14 2f       	mov	r17, r20
    1bde:	e2 2e       	mov	r14, r18
    1be0:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1be8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bea:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bec:	30 97       	sbiw	r30, 0x00	; 0
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <midi_input_callbacks+0x2a>
    1bf0:	83 c0       	rjmp	.+262    	; 0x1cf8 <midi_input_callbacks+0x130>
    1bf2:	95 c0       	rjmp	.+298    	; 0x1d1e <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1bf4:	62 30       	cpi	r22, 0x02	; 2
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <midi_input_callbacks+0x34>
    1bfa:	42 c0       	rjmp	.+132    	; 0x1c80 <midi_input_callbacks+0xb8>
    1bfc:	63 30       	cpi	r22, 0x03	; 3
    1bfe:	71 05       	cpc	r23, r1
    1c00:	29 f0       	breq	.+10     	; 0x1c0c <midi_input_callbacks+0x44>
    1c02:	61 30       	cpi	r22, 0x01	; 1
    1c04:	71 05       	cpc	r23, r1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <midi_input_callbacks+0x42>
    1c08:	73 c0       	rjmp	.+230    	; 0x1cf0 <midi_input_callbacks+0x128>
    1c0a:	60 c0       	rjmp	.+192    	; 0x1ccc <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1c0c:	84 2f       	mov	r24, r20
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	80 7f       	andi	r24, 0xF0	; 240
    1c12:	90 70       	andi	r25, 0x00	; 0
    1c14:	80 3a       	cpi	r24, 0xA0	; 160
    1c16:	91 05       	cpc	r25, r1
    1c18:	e1 f0       	breq	.+56     	; 0x1c52 <midi_input_callbacks+0x8a>
    1c1a:	81 3a       	cpi	r24, 0xA1	; 161
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	3c f4       	brge	.+14     	; 0x1c2e <midi_input_callbacks+0x66>
    1c20:	80 38       	cpi	r24, 0x80	; 128
    1c22:	91 05       	cpc	r25, r1
    1c24:	99 f0       	breq	.+38     	; 0x1c4c <midi_input_callbacks+0x84>
    1c26:	80 39       	cpi	r24, 0x90	; 144
    1c28:	91 05       	cpc	r25, r1
    1c2a:	f9 f4       	brne	.+62     	; 0x1c6a <midi_input_callbacks+0xa2>
    1c2c:	0c c0       	rjmp	.+24     	; 0x1c46 <midi_input_callbacks+0x7e>
    1c2e:	80 3e       	cpi	r24, 0xE0	; 224
    1c30:	91 05       	cpc	r25, r1
    1c32:	91 f0       	breq	.+36     	; 0x1c58 <midi_input_callbacks+0x90>
    1c34:	80 3f       	cpi	r24, 0xF0	; 240
    1c36:	91 05       	cpc	r25, r1
    1c38:	91 f0       	breq	.+36     	; 0x1c5e <midi_input_callbacks+0x96>
    1c3a:	80 3b       	cpi	r24, 0xB0	; 176
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	a9 f4       	brne	.+42     	; 0x1c6a <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1c40:	ea 81       	ldd	r30, Y+2	; 0x02
    1c42:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1c46:	ec 81       	ldd	r30, Y+4	; 0x04
    1c48:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1c4a:	11 c0       	rjmp	.+34     	; 0x1c6e <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1c4c:	ee 81       	ldd	r30, Y+6	; 0x06
    1c4e:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1c50:	0e c0       	rjmp	.+28     	; 0x1c6e <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1c52:	e8 85       	ldd	r30, Y+8	; 0x08
    1c54:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1c56:	0b c0       	rjmp	.+22     	; 0x1c6e <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1c58:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c5a:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1c5e:	42 3f       	cpi	r20, 0xF2	; 242
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <midi_input_callbacks+0x9c>
    1c62:	5d c0       	rjmp	.+186    	; 0x1d1e <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1c64:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c66:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1c6a:	e0 e0       	ldi	r30, 0x00	; 0
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1c6e:	30 97       	sbiw	r30, 0x00	; 0
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <midi_input_callbacks+0xac>
    1c72:	55 c0       	rjmp	.+170    	; 0x1d1e <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1c74:	ce 01       	movw	r24, r28
    1c76:	61 2f       	mov	r22, r17
    1c78:	4e 2d       	mov	r20, r14
    1c7a:	2f 2d       	mov	r18, r15
    1c7c:	09 95       	icall
    1c7e:	42 c0       	rjmp	.+132    	; 0x1d04 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1c80:	84 2f       	mov	r24, r20
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	80 7f       	andi	r24, 0xF0	; 240
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	80 3d       	cpi	r24, 0xD0	; 208
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	49 f0       	breq	.+18     	; 0x1ca0 <midi_input_callbacks+0xd8>
    1c8e:	80 3f       	cpi	r24, 0xF0	; 240
    1c90:	91 05       	cpc	r25, r1
    1c92:	49 f0       	breq	.+18     	; 0x1ca6 <midi_input_callbacks+0xde>
    1c94:	80 3c       	cpi	r24, 0xC0	; 192
    1c96:	91 05       	cpc	r25, r1
    1c98:	81 f4       	brne	.+32     	; 0x1cba <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1c9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c9c:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1ca0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ca2:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1ca4:	0c c0       	rjmp	.+24     	; 0x1cbe <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1ca6:	43 3f       	cpi	r20, 0xF3	; 243
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1caa:	ea 89       	ldd	r30, Y+18	; 0x12
    1cac:	fb 89       	ldd	r31, Y+19	; 0x13
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1cb0:	41 3f       	cpi	r20, 0xF1	; 241
    1cb2:	a9 f5       	brne	.+106    	; 0x1d1e <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1cb4:	ec 89       	ldd	r30, Y+20	; 0x14
    1cb6:	fd 89       	ldd	r31, Y+21	; 0x15
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1cba:	e0 e0       	ldi	r30, 0x00	; 0
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1cbe:	30 97       	sbiw	r30, 0x00	; 0
    1cc0:	71 f1       	breq	.+92     	; 0x1d1e <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	61 2f       	mov	r22, r17
    1cc6:	4e 2d       	mov	r20, r14
    1cc8:	09 95       	icall
    1cca:	1c c0       	rjmp	.+56     	; 0x1d04 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1ccc:	84 2f       	mov	r24, r20
    1cce:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <midi_is_realtime>
    1cd2:	88 23       	and	r24, r24
    1cd4:	19 f0       	breq	.+6      	; 0x1cdc <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1cd6:	ee 89       	ldd	r30, Y+22	; 0x16
    1cd8:	ff 89       	ldd	r31, Y+23	; 0x17
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1cdc:	16 3f       	cpi	r17, 0xF6	; 246
    1cde:	f9 f4       	brne	.+62     	; 0x1d1e <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1ce0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1ce2:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1ce4:	30 97       	sbiw	r30, 0x00	; 0
    1ce6:	d9 f0       	breq	.+54     	; 0x1d1e <midi_input_callbacks+0x156>
                  func(device, byte0);
    1ce8:	ce 01       	movw	r24, r28
    1cea:	61 2f       	mov	r22, r17
    1cec:	09 95       	icall
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1cf0:	64 30       	cpi	r22, 0x04	; 4
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	90 f4       	brcc	.+36     	; 0x1d1a <midi_input_callbacks+0x152>
    1cf6:	13 c0       	rjmp	.+38     	; 0x1d1e <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	b6 01       	movw	r22, r12
    1cfc:	41 2f       	mov	r20, r17
    1cfe:	2e 2d       	mov	r18, r14
    1d00:	0f 2d       	mov	r16, r15
    1d02:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1d04:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d06:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d08:	30 97       	sbiw	r30, 0x00	; 0
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	b6 01       	movw	r22, r12
    1d10:	41 2f       	mov	r20, r17
    1d12:	2e 2d       	mov	r18, r14
    1d14:	0f 2d       	mov	r16, r15
    1d16:	09 95       	icall
    1d18:	07 c0       	rjmp	.+14     	; 0x1d28 <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1d1a:	cc 24       	eor	r12, r12
    1d1c:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1d1e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d20:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d22:	30 97       	sbiw	r30, 0x00	; 0
    1d24:	49 f7       	brne	.-46     	; 0x1cf8 <midi_input_callbacks+0x130>
    1d26:	ee cf       	rjmp	.-36     	; 0x1d04 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	cf 90       	pop	r12
    1d38:	08 95       	ret

00001d3a <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	ec 01       	movw	r28, r24
    1d48:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1d4a:	86 2f       	mov	r24, r22
    1d4c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <midi_is_realtime>
    1d50:	88 23       	and	r24, r24
    1d52:	69 f0       	breq	.+26     	; 0x1d6e <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1d54:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	41 2f       	mov	r20, r17
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <midi_input_callbacks>
      device->input_state = state;
    1d6a:	ed a2       	std	Y+37, r14	; 0x25
    1d6c:	7e c0       	rjmp	.+252    	; 0x1e6a <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1d6e:	81 2f       	mov	r24, r17
    1d70:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <midi_is_statusbyte>
    1d74:	4d a1       	ldd	r20, Y+37	; 0x25
    1d76:	88 23       	and	r24, r24
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <midi_process_byte+0x42>
    1d7a:	42 c0       	rjmp	.+132    	; 0x1e00 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1d7c:	44 30       	cpi	r20, 0x04	; 4
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1d80:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	8e a3       	std	Y+38, r24	; 0x26
    1d88:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1d8a:	81 2f       	mov	r24, r17
    1d8c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <midi_packet_length>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	39 f0       	breq	.+14     	; 0x1da2 <midi_process_byte+0x68>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	78 f0       	brcs	.+30     	; 0x1db6 <midi_process_byte+0x7c>
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	59 f0       	breq	.+22     	; 0x1db2 <midi_process_byte+0x78>
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	61 f5       	brne	.+88     	; 0x1df8 <midi_process_byte+0xbe>
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1da2:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1da4:	ce 01       	movw	r24, r28
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	41 2f       	mov	r20, r17
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	00 e0       	ldi	r16, 0x00	; 0
    1db0:	1f c0       	rjmp	.+62     	; 0x1df0 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1db2:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1db4:	5a c0       	rjmp	.+180    	; 0x1e6a <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1db6:	10 3f       	cpi	r17, 0xF0	; 240
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <midi_process_byte+0x86>
    1dba:	17 3f       	cpi	r17, 0xF7	; 247
    1dbc:	e9 f4       	brne	.+58     	; 0x1df8 <midi_process_byte+0xbe>
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1dc4:	1a a3       	std	Y+34, r17	; 0x22
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    1dc8:	2e a1       	ldd	r18, Y+38	; 0x26
    1dca:	3f a1       	ldd	r19, Y+39	; 0x27
    1dcc:	c9 01       	movw	r24, r18
    1dce:	63 e0       	ldi	r22, 0x03	; 3
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__udivmodhi4>
    1dd6:	8c 0f       	add	r24, r28
    1dd8:	9d 1f       	adc	r25, r29
    1dda:	fc 01       	movw	r30, r24
    1ddc:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1dde:	b9 01       	movw	r22, r18
    1de0:	6f 5f       	subi	r22, 0xFF	; 255
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	6e a3       	std	Y+38, r22	; 0x26
    1de6:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    1de8:	ce 01       	movw	r24, r28
    1dea:	4a a1       	ldd	r20, Y+34	; 0x22
    1dec:	2b a1       	ldd	r18, Y+35	; 0x23
    1dee:	0c a1       	ldd	r16, Y+36	; 0x24
    1df0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1df4:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1df6:	39 c0       	rjmp	.+114    	; 0x1e6a <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    1df8:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1dfa:	1e a2       	std	Y+38, r1	; 0x26
    1dfc:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1dfe:	35 c0       	rjmp	.+106    	; 0x1e6a <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1e00:	44 23       	and	r20, r20
    1e02:	99 f1       	breq	.+102    	; 0x1e6a <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1e04:	2e a1       	ldd	r18, Y+38	; 0x26
    1e06:	3f a1       	ldd	r19, Y+39	; 0x27
    1e08:	c9 01       	movw	r24, r18
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__udivmodhi4>
    1e12:	7c 01       	movw	r14, r24
    1e14:	fe 01       	movw	r30, r28
    1e16:	e8 0f       	add	r30, r24
    1e18:	f9 1f       	adc	r31, r25
    1e1a:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	6f 5f       	subi	r22, 0xFF	; 255
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	6e a3       	std	Y+38, r22	; 0x26
    1e24:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	91 05       	cpc	r25, r1
    1e2a:	91 f0       	breq	.+36     	; 0x1e50 <midi_process_byte+0x116>
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	e8 16       	cp	r14, r24
    1e30:	f1 04       	cpc	r15, r1
    1e32:	d9 f4       	brne	.+54     	; 0x1e6a <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1e34:	ce 01       	movw	r24, r28
    1e36:	4a a1       	ldd	r20, Y+34	; 0x22
    1e38:	2b a1       	ldd	r18, Y+35	; 0x23
    1e3a:	0c a1       	ldd	r16, Y+36	; 0x24
    1e3c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	91 f0       	breq	.+36     	; 0x1e6a <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	8e a3       	std	Y+38, r24	; 0x26
    1e4c:	9f a3       	std	Y+39, r25	; 0x27
    1e4e:	0d c0       	rjmp	.+26     	; 0x1e6a <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1e50:	42 30       	cpi	r20, 0x02	; 2
    1e52:	59 f4       	brne	.+22     	; 0x1e6a <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1e54:	ce 01       	movw	r24, r28
    1e56:	4a a1       	ldd	r20, Y+34	; 0x22
    1e58:	2b a1       	ldd	r18, Y+35	; 0x23
    1e5a:	00 e0       	ldi	r16, 0x00	; 0
    1e5c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1e66:	ee a2       	std	Y+38, r14	; 0x26
    1e68:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	08 95       	ret

00001e78 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1e8a:	e8 a1       	ldd	r30, Y+32	; 0x20
    1e8c:	f9 a1       	ldd	r31, Y+33	; 0x21
    1e8e:	30 97       	sbiw	r30, 0x00	; 0
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    1e92:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1e94:	8e 01       	movw	r16, r28
    1e96:	08 51       	subi	r16, 0x18	; 24
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	0e 94 8d 0b 	call	0x171a	; 0x171a <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	c8 2e       	mov	r12, r24
    1ea6:	dd 24       	eor	r13, r13
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1eaa:	c8 01       	movw	r24, r16
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	0e 94 a3 0b 	call	0x1746	; 0x1746 <bytequeue_get>
    1eb2:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1eba:	c8 01       	movw	r24, r16
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	0e 94 b3 0b 	call	0x1766	; 0x1766 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1ec2:	08 94       	sec
    1ec4:	e1 1c       	adc	r14, r1
    1ec6:	f1 1c       	adc	r15, r1
    1ec8:	ec 14       	cp	r14, r12
    1eca:	fd 04       	cpc	r15, r13
    1ecc:	70 f3       	brcs	.-36     	; 0x1eaa <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	08 95       	ret

00001ee0 <__fixunssfsi>:
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	7b 01       	movw	r14, r22
    1eea:	8c 01       	movw	r16, r24
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	5f e4       	ldi	r21, 0x4F	; 79
    1ef4:	0e 94 1c 13 	call	0x2638	; 0x2638 <__gesf2>
    1ef8:	87 fd       	sbrc	r24, 7
    1efa:	11 c0       	rjmp	.+34     	; 0x1f1e <__fixunssfsi+0x3e>
    1efc:	c8 01       	movw	r24, r16
    1efe:	b7 01       	movw	r22, r14
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	5f e4       	ldi	r21, 0x4F	; 79
    1f08:	0e 94 13 11 	call	0x2226	; 0x2226 <__subsf3>
    1f0c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixsfsi>
    1f10:	9b 01       	movw	r18, r22
    1f12:	ac 01       	movw	r20, r24
    1f14:	20 50       	subi	r18, 0x00	; 0
    1f16:	30 40       	sbci	r19, 0x00	; 0
    1f18:	40 40       	sbci	r20, 0x00	; 0
    1f1a:	50 48       	sbci	r21, 0x80	; 128
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <__fixunssfsi+0x4a>
    1f1e:	c8 01       	movw	r24, r16
    1f20:	b7 01       	movw	r22, r14
    1f22:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixsfsi>
    1f26:	9b 01       	movw	r18, r22
    1f28:	ac 01       	movw	r20, r24
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <_fpadd_parts>:
    1f38:	a0 e0       	ldi	r26, 0x00	; 0
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    1f3e:	ff e0       	ldi	r31, 0x0F	; 15
    1f40:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x8>
    1f44:	fc 01       	movw	r30, r24
    1f46:	ea 01       	movw	r28, r20
    1f48:	80 81       	ld	r24, Z
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	08 f4       	brcc	.+2      	; 0x1f50 <_fpadd_parts+0x18>
    1f4e:	38 c1       	rjmp	.+624    	; 0x21c0 <_fpadd_parts+0x288>
    1f50:	db 01       	movw	r26, r22
    1f52:	9c 91       	ld	r25, X
    1f54:	92 30       	cpi	r25, 0x02	; 2
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <_fpadd_parts+0x22>
    1f58:	30 c1       	rjmp	.+608    	; 0x21ba <_fpadd_parts+0x282>
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	59 f4       	brne	.+22     	; 0x1f74 <_fpadd_parts+0x3c>
    1f5e:	94 30       	cpi	r25, 0x04	; 4
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <_fpadd_parts+0x2c>
    1f62:	2e c1       	rjmp	.+604    	; 0x21c0 <_fpadd_parts+0x288>
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	8c 91       	ld	r24, X
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	98 17       	cp	r25, r24
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <_fpadd_parts+0x3a>
    1f70:	21 c1       	rjmp	.+578    	; 0x21b4 <_fpadd_parts+0x27c>
    1f72:	26 c1       	rjmp	.+588    	; 0x21c0 <_fpadd_parts+0x288>
    1f74:	94 30       	cpi	r25, 0x04	; 4
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <_fpadd_parts+0x42>
    1f78:	20 c1       	rjmp	.+576    	; 0x21ba <_fpadd_parts+0x282>
    1f7a:	92 30       	cpi	r25, 0x02	; 2
    1f7c:	b1 f4       	brne	.+44     	; 0x1faa <_fpadd_parts+0x72>
    1f7e:	82 30       	cpi	r24, 0x02	; 2
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <_fpadd_parts+0x4c>
    1f82:	1e c1       	rjmp	.+572    	; 0x21c0 <_fpadd_parts+0x288>
    1f84:	ca 01       	movw	r24, r20
    1f86:	af 01       	movw	r20, r30
    1f88:	28 e0       	ldi	r18, 0x08	; 8
    1f8a:	da 01       	movw	r26, r20
    1f8c:	0d 90       	ld	r0, X+
    1f8e:	ad 01       	movw	r20, r26
    1f90:	dc 01       	movw	r26, r24
    1f92:	0d 92       	st	X+, r0
    1f94:	cd 01       	movw	r24, r26
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	c1 f7       	brne	.-16     	; 0x1f8a <_fpadd_parts+0x52>
    1f9a:	db 01       	movw	r26, r22
    1f9c:	11 96       	adiw	r26, 0x01	; 1
    1f9e:	8c 91       	ld	r24, X
    1fa0:	11 97       	sbiw	r26, 0x01	; 1
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	89 23       	and	r24, r25
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	0a c1       	rjmp	.+532    	; 0x21be <_fpadd_parts+0x286>
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <_fpadd_parts+0x78>
    1fae:	05 c1       	rjmp	.+522    	; 0x21ba <_fpadd_parts+0x282>
    1fb0:	c2 80       	ldd	r12, Z+2	; 0x02
    1fb2:	d3 80       	ldd	r13, Z+3	; 0x03
    1fb4:	db 01       	movw	r26, r22
    1fb6:	12 96       	adiw	r26, 0x02	; 2
    1fb8:	6d 90       	ld	r6, X+
    1fba:	7c 90       	ld	r7, X
    1fbc:	13 97       	sbiw	r26, 0x03	; 3
    1fbe:	24 81       	ldd	r18, Z+4	; 0x04
    1fc0:	35 81       	ldd	r19, Z+5	; 0x05
    1fc2:	46 81       	ldd	r20, Z+6	; 0x06
    1fc4:	57 81       	ldd	r21, Z+7	; 0x07
    1fc6:	14 96       	adiw	r26, 0x04	; 4
    1fc8:	ed 90       	ld	r14, X+
    1fca:	fd 90       	ld	r15, X+
    1fcc:	0d 91       	ld	r16, X+
    1fce:	1c 91       	ld	r17, X
    1fd0:	17 97       	sbiw	r26, 0x07	; 7
    1fd2:	c6 01       	movw	r24, r12
    1fd4:	86 19       	sub	r24, r6
    1fd6:	97 09       	sbc	r25, r7
    1fd8:	5c 01       	movw	r10, r24
    1fda:	97 ff       	sbrs	r25, 7
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <_fpadd_parts+0xae>
    1fde:	aa 24       	eor	r10, r10
    1fe0:	bb 24       	eor	r11, r11
    1fe2:	a8 1a       	sub	r10, r24
    1fe4:	b9 0a       	sbc	r11, r25
    1fe6:	b0 e2       	ldi	r27, 0x20	; 32
    1fe8:	ab 16       	cp	r10, r27
    1fea:	b1 04       	cpc	r11, r1
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <_fpadd_parts+0xb8>
    1fee:	61 c0       	rjmp	.+194    	; 0x20b2 <_fpadd_parts+0x17a>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	19 06       	cpc	r1, r25
    1ff4:	6c f5       	brge	.+90     	; 0x2050 <_fpadd_parts+0x118>
    1ff6:	37 01       	movw	r6, r14
    1ff8:	48 01       	movw	r8, r16
    1ffa:	0a 2c       	mov	r0, r10
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <_fpadd_parts+0xce>
    1ffe:	96 94       	lsr	r9
    2000:	87 94       	ror	r8
    2002:	77 94       	ror	r7
    2004:	67 94       	ror	r6
    2006:	0a 94       	dec	r0
    2008:	d2 f7       	brpl	.-12     	; 0x1ffe <_fpadd_parts+0xc6>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e0       	ldi	r26, 0x00	; 0
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	0a 2c       	mov	r0, r10
    2014:	04 c0       	rjmp	.+8      	; 0x201e <_fpadd_parts+0xe6>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	aa 1f       	adc	r26, r26
    201c:	bb 1f       	adc	r27, r27
    201e:	0a 94       	dec	r0
    2020:	d2 f7       	brpl	.-12     	; 0x2016 <_fpadd_parts+0xde>
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	a1 09       	sbc	r26, r1
    2026:	b1 09       	sbc	r27, r1
    2028:	8e 21       	and	r24, r14
    202a:	9f 21       	and	r25, r15
    202c:	a0 23       	and	r26, r16
    202e:	b1 23       	and	r27, r17
    2030:	ee 24       	eor	r14, r14
    2032:	ff 24       	eor	r15, r15
    2034:	87 01       	movw	r16, r14
    2036:	e3 94       	inc	r14
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	a1 05       	cpc	r26, r1
    203c:	b1 05       	cpc	r27, r1
    203e:	19 f4       	brne	.+6      	; 0x2046 <_fpadd_parts+0x10e>
    2040:	ee 24       	eor	r14, r14
    2042:	ff 24       	eor	r15, r15
    2044:	87 01       	movw	r16, r14
    2046:	e6 28       	or	r14, r6
    2048:	f7 28       	or	r15, r7
    204a:	08 29       	or	r16, r8
    204c:	19 29       	or	r17, r9
    204e:	3c c0       	rjmp	.+120    	; 0x20c8 <_fpadd_parts+0x190>
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	d1 f1       	breq	.+116    	; 0x20c8 <_fpadd_parts+0x190>
    2054:	ca 0c       	add	r12, r10
    2056:	db 1c       	adc	r13, r11
    2058:	39 01       	movw	r6, r18
    205a:	4a 01       	movw	r8, r20
    205c:	0a 2c       	mov	r0, r10
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <_fpadd_parts+0x130>
    2060:	96 94       	lsr	r9
    2062:	87 94       	ror	r8
    2064:	77 94       	ror	r7
    2066:	67 94       	ror	r6
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <_fpadd_parts+0x128>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	0a 2c       	mov	r0, r10
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <_fpadd_parts+0x148>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	0a 94       	dec	r0
    2082:	d2 f7       	brpl	.-12     	; 0x2078 <_fpadd_parts+0x140>
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	a1 09       	sbc	r26, r1
    2088:	b1 09       	sbc	r27, r1
    208a:	82 23       	and	r24, r18
    208c:	93 23       	and	r25, r19
    208e:	a4 23       	and	r26, r20
    2090:	b5 23       	and	r27, r21
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	a1 05       	cpc	r26, r1
    209e:	b1 05       	cpc	r27, r1
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <_fpadd_parts+0x170>
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a9 01       	movw	r20, r18
    20a8:	26 29       	or	r18, r6
    20aa:	37 29       	or	r19, r7
    20ac:	48 29       	or	r20, r8
    20ae:	59 29       	or	r21, r9
    20b0:	0b c0       	rjmp	.+22     	; 0x20c8 <_fpadd_parts+0x190>
    20b2:	6c 14       	cp	r6, r12
    20b4:	7d 04       	cpc	r7, r13
    20b6:	24 f4       	brge	.+8      	; 0x20c0 <_fpadd_parts+0x188>
    20b8:	ee 24       	eor	r14, r14
    20ba:	ff 24       	eor	r15, r15
    20bc:	87 01       	movw	r16, r14
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <_fpadd_parts+0x190>
    20c0:	63 01       	movw	r12, r6
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	81 81       	ldd	r24, Z+1	; 0x01
    20ca:	fb 01       	movw	r30, r22
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	89 17       	cp	r24, r25
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <_fpadd_parts+0x19c>
    20d2:	45 c0       	rjmp	.+138    	; 0x215e <_fpadd_parts+0x226>
    20d4:	88 23       	and	r24, r24
    20d6:	49 f0       	breq	.+18     	; 0x20ea <_fpadd_parts+0x1b2>
    20d8:	d8 01       	movw	r26, r16
    20da:	c7 01       	movw	r24, r14
    20dc:	82 1b       	sub	r24, r18
    20de:	93 0b       	sbc	r25, r19
    20e0:	a4 0b       	sbc	r26, r20
    20e2:	b5 0b       	sbc	r27, r21
    20e4:	9c 01       	movw	r18, r24
    20e6:	ad 01       	movw	r20, r26
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <_fpadd_parts+0x1ba>
    20ea:	2e 19       	sub	r18, r14
    20ec:	3f 09       	sbc	r19, r15
    20ee:	40 0b       	sbc	r20, r16
    20f0:	51 0b       	sbc	r21, r17
    20f2:	57 fd       	sbrc	r21, 7
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <_fpadd_parts+0x1c6>
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	ca 82       	std	Y+2, r12	; 0x02
    20fa:	db 82       	std	Y+3, r13	; 0x03
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <_fpadd_parts+0x1dc>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	ca 82       	std	Y+2, r12	; 0x02
    2104:	db 82       	std	Y+3, r13	; 0x03
    2106:	50 95       	com	r21
    2108:	40 95       	com	r20
    210a:	30 95       	com	r19
    210c:	21 95       	neg	r18
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	4f 4f       	sbci	r20, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	3d 83       	std	Y+5, r19	; 0x05
    2118:	4e 83       	std	Y+6, r20	; 0x06
    211a:	5f 83       	std	Y+7, r21	; 0x07
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <_fpadd_parts+0x200>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	aa 1f       	adc	r26, r26
    2124:	bb 1f       	adc	r27, r27
    2126:	8c 83       	std	Y+4, r24	; 0x04
    2128:	9d 83       	std	Y+5, r25	; 0x05
    212a:	ae 83       	std	Y+6, r26	; 0x06
    212c:	bf 83       	std	Y+7, r27	; 0x07
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	9b 81       	ldd	r25, Y+3	; 0x03
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	9b 83       	std	Y+3, r25	; 0x03
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	ae 81       	ldd	r26, Y+6	; 0x06
    213e:	bf 81       	ldd	r27, Y+7	; 0x07
    2140:	9c 01       	movw	r18, r24
    2142:	ad 01       	movw	r20, r26
    2144:	21 50       	subi	r18, 0x01	; 1
    2146:	30 40       	sbci	r19, 0x00	; 0
    2148:	40 40       	sbci	r20, 0x00	; 0
    214a:	50 40       	sbci	r21, 0x00	; 0
    214c:	2f 3f       	cpi	r18, 0xFF	; 255
    214e:	ef ef       	ldi	r30, 0xFF	; 255
    2150:	3e 07       	cpc	r19, r30
    2152:	ef ef       	ldi	r30, 0xFF	; 255
    2154:	4e 07       	cpc	r20, r30
    2156:	ef e3       	ldi	r30, 0x3F	; 63
    2158:	5e 07       	cpc	r21, r30
    215a:	08 f3       	brcs	.-62     	; 0x211e <_fpadd_parts+0x1e6>
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <_fpadd_parts+0x23c>
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	ca 82       	std	Y+2, r12	; 0x02
    2162:	db 82       	std	Y+3, r13	; 0x03
    2164:	2e 0d       	add	r18, r14
    2166:	3f 1d       	adc	r19, r15
    2168:	40 1f       	adc	r20, r16
    216a:	51 1f       	adc	r21, r17
    216c:	2c 83       	std	Y+4, r18	; 0x04
    216e:	3d 83       	std	Y+5, r19	; 0x05
    2170:	4e 83       	std	Y+6, r20	; 0x06
    2172:	5f 83       	std	Y+7, r21	; 0x07
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	88 83       	st	Y, r24
    2178:	2c 81       	ldd	r18, Y+4	; 0x04
    217a:	3d 81       	ldd	r19, Y+5	; 0x05
    217c:	4e 81       	ldd	r20, Y+6	; 0x06
    217e:	5f 81       	ldd	r21, Y+7	; 0x07
    2180:	57 ff       	sbrs	r21, 7
    2182:	1d c0       	rjmp	.+58     	; 0x21be <_fpadd_parts+0x286>
    2184:	da 01       	movw	r26, r20
    2186:	c9 01       	movw	r24, r18
    2188:	81 70       	andi	r24, 0x01	; 1
    218a:	90 70       	andi	r25, 0x00	; 0
    218c:	a0 70       	andi	r26, 0x00	; 0
    218e:	b0 70       	andi	r27, 0x00	; 0
    2190:	56 95       	lsr	r21
    2192:	47 95       	ror	r20
    2194:	37 95       	ror	r19
    2196:	27 95       	ror	r18
    2198:	82 2b       	or	r24, r18
    219a:	93 2b       	or	r25, r19
    219c:	a4 2b       	or	r26, r20
    219e:	b5 2b       	or	r27, r21
    21a0:	8c 83       	std	Y+4, r24	; 0x04
    21a2:	9d 83       	std	Y+5, r25	; 0x05
    21a4:	ae 83       	std	Y+6, r26	; 0x06
    21a6:	bf 83       	std	Y+7, r27	; 0x07
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	9b 83       	std	Y+3, r25	; 0x03
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <_fpadd_parts+0x286>
    21b4:	ef e2       	ldi	r30, 0x2F	; 47
    21b6:	f0 e2       	ldi	r31, 0x20	; 32
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <_fpadd_parts+0x288>
    21ba:	fb 01       	movw	r30, r22
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <_fpadd_parts+0x288>
    21be:	fe 01       	movw	r30, r28
    21c0:	cf 01       	movw	r24, r30
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	ee e0       	ldi	r30, 0x0E	; 14
    21c8:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x8>

000021cc <__addsf3>:
    21cc:	a0 e2       	ldi	r26, 0x20	; 32
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ec ee       	ldi	r30, 0xEC	; 236
    21d2:	f0 e1       	ldi	r31, 0x10	; 16
    21d4:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
    21d8:	69 83       	std	Y+1, r22	; 0x01
    21da:	7a 83       	std	Y+2, r23	; 0x02
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	2d 83       	std	Y+5, r18	; 0x05
    21e2:	3e 83       	std	Y+6, r19	; 0x06
    21e4:	4f 83       	std	Y+7, r20	; 0x07
    21e6:	58 87       	std	Y+8, r21	; 0x08
    21e8:	89 e0       	ldi	r24, 0x09	; 9
    21ea:	e8 2e       	mov	r14, r24
    21ec:	f1 2c       	mov	r15, r1
    21ee:	ec 0e       	add	r14, r28
    21f0:	fd 1e       	adc	r15, r29
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	b7 01       	movw	r22, r14
    21f8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    21fc:	8e 01       	movw	r16, r28
    21fe:	0f 5e       	subi	r16, 0xEF	; 239
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	ce 01       	movw	r24, r28
    2204:	05 96       	adiw	r24, 0x05	; 5
    2206:	b8 01       	movw	r22, r16
    2208:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    220c:	c7 01       	movw	r24, r14
    220e:	b8 01       	movw	r22, r16
    2210:	ae 01       	movw	r20, r28
    2212:	47 5e       	subi	r20, 0xE7	; 231
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_fpadd_parts>
    221a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__pack_f>
    221e:	a0 96       	adiw	r28, 0x20	; 32
    2220:	e6 e0       	ldi	r30, 0x06	; 6
    2222:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00002226 <__subsf3>:
    2226:	a0 e2       	ldi	r26, 0x20	; 32
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 e1       	ldi	r30, 0x19	; 25
    222c:	f1 e1       	ldi	r31, 0x11	; 17
    222e:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
    2232:	69 83       	std	Y+1, r22	; 0x01
    2234:	7a 83       	std	Y+2, r23	; 0x02
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	2d 83       	std	Y+5, r18	; 0x05
    223c:	3e 83       	std	Y+6, r19	; 0x06
    223e:	4f 83       	std	Y+7, r20	; 0x07
    2240:	58 87       	std	Y+8, r21	; 0x08
    2242:	8e 01       	movw	r16, r28
    2244:	07 5f       	subi	r16, 0xF7	; 247
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	ce 01       	movw	r24, r28
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	b8 01       	movw	r22, r16
    224e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2252:	91 e1       	ldi	r25, 0x11	; 17
    2254:	e9 2e       	mov	r14, r25
    2256:	f1 2c       	mov	r15, r1
    2258:	ec 0e       	add	r14, r28
    225a:	fd 1e       	adc	r15, r29
    225c:	ce 01       	movw	r24, r28
    225e:	05 96       	adiw	r24, 0x05	; 5
    2260:	b7 01       	movw	r22, r14
    2262:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2266:	8a 89       	ldd	r24, Y+18	; 0x12
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	89 27       	eor	r24, r25
    226c:	8a 8b       	std	Y+18, r24	; 0x12
    226e:	c8 01       	movw	r24, r16
    2270:	b7 01       	movw	r22, r14
    2272:	ae 01       	movw	r20, r28
    2274:	47 5e       	subi	r20, 0xE7	; 231
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_fpadd_parts>
    227c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__pack_f>
    2280:	a0 96       	adiw	r28, 0x20	; 32
    2282:	e6 e0       	ldi	r30, 0x06	; 6
    2284:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00002288 <__mulsf3>:
    2288:	a0 e2       	ldi	r26, 0x20	; 32
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ea e4       	ldi	r30, 0x4A	; 74
    228e:	f1 e1       	ldi	r31, 0x11	; 17
    2290:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__>
    2294:	69 83       	std	Y+1, r22	; 0x01
    2296:	7a 83       	std	Y+2, r23	; 0x02
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	2d 83       	std	Y+5, r18	; 0x05
    229e:	3e 83       	std	Y+6, r19	; 0x06
    22a0:	4f 83       	std	Y+7, r20	; 0x07
    22a2:	58 87       	std	Y+8, r21	; 0x08
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	be 01       	movw	r22, r28
    22aa:	67 5f       	subi	r22, 0xF7	; 247
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    22b2:	ce 01       	movw	r24, r28
    22b4:	05 96       	adiw	r24, 0x05	; 5
    22b6:	be 01       	movw	r22, r28
    22b8:	6f 5e       	subi	r22, 0xEF	; 239
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    22c0:	99 85       	ldd	r25, Y+9	; 0x09
    22c2:	92 30       	cpi	r25, 0x02	; 2
    22c4:	78 f0       	brcs	.+30     	; 0x22e4 <__mulsf3+0x5c>
    22c6:	89 89       	ldd	r24, Y+17	; 0x11
    22c8:	82 30       	cpi	r24, 0x02	; 2
    22ca:	c0 f0       	brcs	.+48     	; 0x22fc <__mulsf3+0x74>
    22cc:	94 30       	cpi	r25, 0x04	; 4
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <__mulsf3+0x4e>
    22d0:	82 30       	cpi	r24, 0x02	; 2
    22d2:	41 f4       	brne	.+16     	; 0x22e4 <__mulsf3+0x5c>
    22d4:	cb c0       	rjmp	.+406    	; 0x246c <__mulsf3+0x1e4>
    22d6:	84 30       	cpi	r24, 0x04	; 4
    22d8:	19 f4       	brne	.+6      	; 0x22e0 <__mulsf3+0x58>
    22da:	92 30       	cpi	r25, 0x02	; 2
    22dc:	79 f4       	brne	.+30     	; 0x22fc <__mulsf3+0x74>
    22de:	c6 c0       	rjmp	.+396    	; 0x246c <__mulsf3+0x1e4>
    22e0:	92 30       	cpi	r25, 0x02	; 2
    22e2:	51 f4       	brne	.+20     	; 0x22f8 <__mulsf3+0x70>
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    22e8:	9a 89       	ldd	r25, Y+18	; 0x12
    22ea:	29 17       	cp	r18, r25
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__mulsf3+0x68>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	8a 87       	std	Y+10, r24	; 0x0a
    22f2:	ce 01       	movw	r24, r28
    22f4:	09 96       	adiw	r24, 0x09	; 9
    22f6:	bc c0       	rjmp	.+376    	; 0x2470 <__mulsf3+0x1e8>
    22f8:	82 30       	cpi	r24, 0x02	; 2
    22fa:	51 f4       	brne	.+20     	; 0x2310 <__mulsf3+0x88>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2300:	9a 89       	ldd	r25, Y+18	; 0x12
    2302:	29 17       	cp	r18, r25
    2304:	09 f4       	brne	.+2      	; 0x2308 <__mulsf3+0x80>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	8a 8b       	std	Y+18, r24	; 0x12
    230a:	ce 01       	movw	r24, r28
    230c:	41 96       	adiw	r24, 0x11	; 17
    230e:	b0 c0       	rjmp	.+352    	; 0x2470 <__mulsf3+0x1e8>
    2310:	6d 84       	ldd	r6, Y+13	; 0x0d
    2312:	7e 84       	ldd	r7, Y+14	; 0x0e
    2314:	8f 84       	ldd	r8, Y+15	; 0x0f
    2316:	98 88       	ldd	r9, Y+16	; 0x10
    2318:	ed 88       	ldd	r14, Y+21	; 0x15
    231a:	fe 88       	ldd	r15, Y+22	; 0x16
    231c:	0f 89       	ldd	r16, Y+23	; 0x17
    231e:	18 8d       	ldd	r17, Y+24	; 0x18
    2320:	e0 e2       	ldi	r30, 0x20	; 32
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	dc 01       	movw	r26, r24
    232a:	aa 24       	eor	r10, r10
    232c:	bb 24       	eor	r11, r11
    232e:	65 01       	movw	r12, r10
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	a9 01       	movw	r20, r18
    2336:	b3 01       	movw	r22, r6
    2338:	61 70       	andi	r22, 0x01	; 1
    233a:	70 70       	andi	r23, 0x00	; 0
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	d1 f0       	breq	.+52     	; 0x2376 <__mulsf3+0xee>
    2342:	2e 0d       	add	r18, r14
    2344:	3f 1d       	adc	r19, r15
    2346:	40 1f       	adc	r20, r16
    2348:	51 1f       	adc	r21, r17
    234a:	15 01       	movw	r2, r10
    234c:	26 01       	movw	r4, r12
    234e:	28 0e       	add	r2, r24
    2350:	39 1e       	adc	r3, r25
    2352:	4a 1e       	adc	r4, r26
    2354:	5b 1e       	adc	r5, r27
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	2e 15       	cp	r18, r14
    2360:	3f 05       	cpc	r19, r15
    2362:	40 07       	cpc	r20, r16
    2364:	51 07       	cpc	r21, r17
    2366:	18 f0       	brcs	.+6      	; 0x236e <__mulsf3+0xe6>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	dc 01       	movw	r26, r24
    236e:	82 0d       	add	r24, r2
    2370:	93 1d       	adc	r25, r3
    2372:	a4 1d       	adc	r26, r4
    2374:	b5 1d       	adc	r27, r5
    2376:	aa 0c       	add	r10, r10
    2378:	bb 1c       	adc	r11, r11
    237a:	cc 1c       	adc	r12, r12
    237c:	dd 1c       	adc	r13, r13
    237e:	17 ff       	sbrs	r17, 7
    2380:	09 c0       	rjmp	.+18     	; 0x2394 <__mulsf3+0x10c>
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	26 2e       	mov	r2, r22
    2386:	31 2c       	mov	r3, r1
    2388:	41 2c       	mov	r4, r1
    238a:	51 2c       	mov	r5, r1
    238c:	a2 28       	or	r10, r2
    238e:	b3 28       	or	r11, r3
    2390:	c4 28       	or	r12, r4
    2392:	d5 28       	or	r13, r5
    2394:	31 97       	sbiw	r30, 0x01	; 1
    2396:	49 f0       	breq	.+18     	; 0x23aa <__mulsf3+0x122>
    2398:	ee 0c       	add	r14, r14
    239a:	ff 1c       	adc	r15, r15
    239c:	00 1f       	adc	r16, r16
    239e:	11 1f       	adc	r17, r17
    23a0:	96 94       	lsr	r9
    23a2:	87 94       	ror	r8
    23a4:	77 94       	ror	r7
    23a6:	67 94       	ror	r6
    23a8:	c6 cf       	rjmp	.-116    	; 0x2336 <__mulsf3+0xae>
    23aa:	6b 89       	ldd	r22, Y+19	; 0x13
    23ac:	7c 89       	ldd	r23, Y+20	; 0x14
    23ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    23b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    23b2:	6e 0f       	add	r22, r30
    23b4:	7f 1f       	adc	r23, r31
    23b6:	6e 5f       	subi	r22, 0xFE	; 254
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	6b 8f       	std	Y+27, r22	; 0x1b
    23bc:	7c 8f       	std	Y+28, r23	; 0x1c
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	ea 85       	ldd	r30, Y+10	; 0x0a
    23c2:	7a 89       	ldd	r23, Y+18	; 0x12
    23c4:	e7 17       	cp	r30, r23
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__mulsf3+0x142>
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	6a 8f       	std	Y+26, r22	; 0x1a
    23cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23d0:	10 c0       	rjmp	.+32     	; 0x23f2 <__mulsf3+0x16a>
    23d2:	fc 01       	movw	r30, r24
    23d4:	e1 70       	andi	r30, 0x01	; 1
    23d6:	f0 70       	andi	r31, 0x00	; 0
    23d8:	30 97       	sbiw	r30, 0x00	; 0
    23da:	29 f0       	breq	.+10     	; 0x23e6 <__mulsf3+0x15e>
    23dc:	56 95       	lsr	r21
    23de:	47 95       	ror	r20
    23e0:	37 95       	ror	r19
    23e2:	27 95       	ror	r18
    23e4:	50 68       	ori	r21, 0x80	; 128
    23e6:	b6 95       	lsr	r27
    23e8:	a7 95       	ror	r26
    23ea:	97 95       	ror	r25
    23ec:	87 95       	ror	r24
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	b7 fd       	sbrc	r27, 7
    23f4:	ee cf       	rjmp	.-36     	; 0x23d2 <__mulsf3+0x14a>
    23f6:	0c c0       	rjmp	.+24     	; 0x2410 <__mulsf3+0x188>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	aa 1f       	adc	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	57 fd       	sbrc	r21, 7
    2402:	81 60       	ori	r24, 0x01	; 1
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	44 1f       	adc	r20, r20
    240a:	55 1f       	adc	r21, r21
    240c:	61 50       	subi	r22, 0x01	; 1
    240e:	70 40       	sbci	r23, 0x00	; 0
    2410:	80 30       	cpi	r24, 0x00	; 0
    2412:	e0 e0       	ldi	r30, 0x00	; 0
    2414:	9e 07       	cpc	r25, r30
    2416:	e0 e0       	ldi	r30, 0x00	; 0
    2418:	ae 07       	cpc	r26, r30
    241a:	e0 e4       	ldi	r30, 0x40	; 64
    241c:	be 07       	cpc	r27, r30
    241e:	60 f3       	brcs	.-40     	; 0x23f8 <__mulsf3+0x170>
    2420:	6b 8f       	std	Y+27, r22	; 0x1b
    2422:	7c 8f       	std	Y+28, r23	; 0x1c
    2424:	6f e7       	ldi	r22, 0x7F	; 127
    2426:	e6 2e       	mov	r14, r22
    2428:	f1 2c       	mov	r15, r1
    242a:	01 2d       	mov	r16, r1
    242c:	11 2d       	mov	r17, r1
    242e:	e8 22       	and	r14, r24
    2430:	f9 22       	and	r15, r25
    2432:	0a 23       	and	r16, r26
    2434:	1b 23       	and	r17, r27
    2436:	60 e4       	ldi	r22, 0x40	; 64
    2438:	e6 16       	cp	r14, r22
    243a:	f1 04       	cpc	r15, r1
    243c:	01 05       	cpc	r16, r1
    243e:	11 05       	cpc	r17, r1
    2440:	61 f4       	brne	.+24     	; 0x245a <__mulsf3+0x1d2>
    2442:	87 fd       	sbrc	r24, 7
    2444:	0a c0       	rjmp	.+20     	; 0x245a <__mulsf3+0x1d2>
    2446:	21 15       	cp	r18, r1
    2448:	31 05       	cpc	r19, r1
    244a:	41 05       	cpc	r20, r1
    244c:	51 05       	cpc	r21, r1
    244e:	29 f0       	breq	.+10     	; 0x245a <__mulsf3+0x1d2>
    2450:	80 5c       	subi	r24, 0xC0	; 192
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	af 4f       	sbci	r26, 0xFF	; 255
    2456:	bf 4f       	sbci	r27, 0xFF	; 255
    2458:	80 78       	andi	r24, 0x80	; 128
    245a:	8d 8f       	std	Y+29, r24	; 0x1d
    245c:	9e 8f       	std	Y+30, r25	; 0x1e
    245e:	af 8f       	std	Y+31, r26	; 0x1f
    2460:	b8 a3       	std	Y+32, r27	; 0x20
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	89 8f       	std	Y+25, r24	; 0x19
    2466:	ce 01       	movw	r24, r28
    2468:	49 96       	adiw	r24, 0x19	; 25
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <__mulsf3+0x1e8>
    246c:	8f e2       	ldi	r24, 0x2F	; 47
    246e:	90 e2       	ldi	r25, 0x20	; 32
    2470:	0e 94 a0 14 	call	0x2940	; 0x2940 <__pack_f>
    2474:	a0 96       	adiw	r28, 0x20	; 32
    2476:	e2 e1       	ldi	r30, 0x12	; 18
    2478:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

0000247c <__divsf3>:
    247c:	a8 e1       	ldi	r26, 0x18	; 24
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e4       	ldi	r30, 0x44	; 68
    2482:	f2 e1       	ldi	r31, 0x12	; 18
    2484:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__prologue_saves__+0x10>
    2488:	69 83       	std	Y+1, r22	; 0x01
    248a:	7a 83       	std	Y+2, r23	; 0x02
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	2d 83       	std	Y+5, r18	; 0x05
    2492:	3e 83       	std	Y+6, r19	; 0x06
    2494:	4f 83       	std	Y+7, r20	; 0x07
    2496:	58 87       	std	Y+8, r21	; 0x08
    2498:	8e 01       	movw	r16, r28
    249a:	07 5f       	subi	r16, 0xF7	; 247
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	b8 01       	movw	r22, r16
    24a4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    24a8:	81 e1       	ldi	r24, 0x11	; 17
    24aa:	e8 2e       	mov	r14, r24
    24ac:	f1 2c       	mov	r15, r1
    24ae:	ec 0e       	add	r14, r28
    24b0:	fd 1e       	adc	r15, r29
    24b2:	ce 01       	movw	r24, r28
    24b4:	05 96       	adiw	r24, 0x05	; 5
    24b6:	b7 01       	movw	r22, r14
    24b8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    24bc:	99 85       	ldd	r25, Y+9	; 0x09
    24be:	92 30       	cpi	r25, 0x02	; 2
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <__divsf3+0x48>
    24c2:	83 c0       	rjmp	.+262    	; 0x25ca <__divsf3+0x14e>
    24c4:	89 89       	ldd	r24, Y+17	; 0x11
    24c6:	82 30       	cpi	r24, 0x02	; 2
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <__divsf3+0x50>
    24ca:	7b c0       	rjmp	.+246    	; 0x25c2 <__divsf3+0x146>
    24cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ce:	3a 89       	ldd	r19, Y+18	; 0x12
    24d0:	23 27       	eor	r18, r19
    24d2:	2a 87       	std	Y+10, r18	; 0x0a
    24d4:	94 30       	cpi	r25, 0x04	; 4
    24d6:	11 f0       	breq	.+4      	; 0x24dc <__divsf3+0x60>
    24d8:	92 30       	cpi	r25, 0x02	; 2
    24da:	21 f4       	brne	.+8      	; 0x24e4 <__divsf3+0x68>
    24dc:	98 17       	cp	r25, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <__divsf3+0x66>
    24e0:	6c c0       	rjmp	.+216    	; 0x25ba <__divsf3+0x13e>
    24e2:	71 c0       	rjmp	.+226    	; 0x25c6 <__divsf3+0x14a>
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	39 f4       	brne	.+14     	; 0x24f6 <__divsf3+0x7a>
    24e8:	1d 86       	std	Y+13, r1	; 0x0d
    24ea:	1e 86       	std	Y+14, r1	; 0x0e
    24ec:	1f 86       	std	Y+15, r1	; 0x0f
    24ee:	18 8a       	std	Y+16, r1	; 0x10
    24f0:	1b 86       	std	Y+11, r1	; 0x0b
    24f2:	1c 86       	std	Y+12, r1	; 0x0c
    24f4:	6a c0       	rjmp	.+212    	; 0x25ca <__divsf3+0x14e>
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	19 f4       	brne	.+6      	; 0x2500 <__divsf3+0x84>
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	89 87       	std	Y+9, r24	; 0x09
    24fe:	65 c0       	rjmp	.+202    	; 0x25ca <__divsf3+0x14e>
    2500:	8b 85       	ldd	r24, Y+11	; 0x0b
    2502:	9c 85       	ldd	r25, Y+12	; 0x0c
    2504:	2b 89       	ldd	r18, Y+19	; 0x13
    2506:	3c 89       	ldd	r19, Y+20	; 0x14
    2508:	82 1b       	sub	r24, r18
    250a:	93 0b       	sbc	r25, r19
    250c:	8b 87       	std	Y+11, r24	; 0x0b
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	2d 85       	ldd	r18, Y+13	; 0x0d
    2512:	3e 85       	ldd	r19, Y+14	; 0x0e
    2514:	4f 85       	ldd	r20, Y+15	; 0x0f
    2516:	58 89       	ldd	r21, Y+16	; 0x10
    2518:	ed 88       	ldd	r14, Y+21	; 0x15
    251a:	fe 88       	ldd	r15, Y+22	; 0x16
    251c:	0f 89       	ldd	r16, Y+23	; 0x17
    251e:	18 8d       	ldd	r17, Y+24	; 0x18
    2520:	2e 15       	cp	r18, r14
    2522:	3f 05       	cpc	r19, r15
    2524:	40 07       	cpc	r20, r16
    2526:	51 07       	cpc	r21, r17
    2528:	38 f4       	brcc	.+14     	; 0x2538 <__divsf3+0xbc>
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	44 1f       	adc	r20, r20
    2530:	55 1f       	adc	r21, r21
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	8b 87       	std	Y+11, r24	; 0x0b
    2536:	9c 87       	std	Y+12, r25	; 0x0c
    2538:	6f e1       	ldi	r22, 0x1F	; 31
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	a1 2c       	mov	r10, r1
    253e:	b1 2c       	mov	r11, r1
    2540:	c1 2c       	mov	r12, r1
    2542:	a0 e4       	ldi	r26, 0x40	; 64
    2544:	da 2e       	mov	r13, r26
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	dc 01       	movw	r26, r24
    254c:	2e 15       	cp	r18, r14
    254e:	3f 05       	cpc	r19, r15
    2550:	40 07       	cpc	r20, r16
    2552:	51 07       	cpc	r21, r17
    2554:	40 f0       	brcs	.+16     	; 0x2566 <__divsf3+0xea>
    2556:	8a 29       	or	r24, r10
    2558:	9b 29       	or	r25, r11
    255a:	ac 29       	or	r26, r12
    255c:	bd 29       	or	r27, r13
    255e:	2e 19       	sub	r18, r14
    2560:	3f 09       	sbc	r19, r15
    2562:	40 0b       	sbc	r20, r16
    2564:	51 0b       	sbc	r21, r17
    2566:	d6 94       	lsr	r13
    2568:	c7 94       	ror	r12
    256a:	b7 94       	ror	r11
    256c:	a7 94       	ror	r10
    256e:	22 0f       	add	r18, r18
    2570:	33 1f       	adc	r19, r19
    2572:	44 1f       	adc	r20, r20
    2574:	55 1f       	adc	r21, r21
    2576:	61 50       	subi	r22, 0x01	; 1
    2578:	70 40       	sbci	r23, 0x00	; 0
    257a:	41 f7       	brne	.-48     	; 0x254c <__divsf3+0xd0>
    257c:	6f e7       	ldi	r22, 0x7F	; 127
    257e:	e6 2e       	mov	r14, r22
    2580:	f1 2c       	mov	r15, r1
    2582:	01 2d       	mov	r16, r1
    2584:	11 2d       	mov	r17, r1
    2586:	e8 22       	and	r14, r24
    2588:	f9 22       	and	r15, r25
    258a:	0a 23       	and	r16, r26
    258c:	1b 23       	and	r17, r27
    258e:	60 e4       	ldi	r22, 0x40	; 64
    2590:	e6 16       	cp	r14, r22
    2592:	f1 04       	cpc	r15, r1
    2594:	01 05       	cpc	r16, r1
    2596:	11 05       	cpc	r17, r1
    2598:	61 f4       	brne	.+24     	; 0x25b2 <__divsf3+0x136>
    259a:	87 fd       	sbrc	r24, 7
    259c:	0a c0       	rjmp	.+20     	; 0x25b2 <__divsf3+0x136>
    259e:	21 15       	cp	r18, r1
    25a0:	31 05       	cpc	r19, r1
    25a2:	41 05       	cpc	r20, r1
    25a4:	51 05       	cpc	r21, r1
    25a6:	29 f0       	breq	.+10     	; 0x25b2 <__divsf3+0x136>
    25a8:	80 5c       	subi	r24, 0xC0	; 192
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	af 4f       	sbci	r26, 0xFF	; 255
    25ae:	bf 4f       	sbci	r27, 0xFF	; 255
    25b0:	80 78       	andi	r24, 0x80	; 128
    25b2:	8d 87       	std	Y+13, r24	; 0x0d
    25b4:	9e 87       	std	Y+14, r25	; 0x0e
    25b6:	af 87       	std	Y+15, r26	; 0x0f
    25b8:	b8 8b       	std	Y+16, r27	; 0x10
    25ba:	8e 01       	movw	r16, r28
    25bc:	07 5f       	subi	r16, 0xF7	; 247
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__divsf3+0x14e>
    25c2:	87 01       	movw	r16, r14
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <__divsf3+0x14e>
    25c6:	0f e2       	ldi	r16, 0x2F	; 47
    25c8:	10 e2       	ldi	r17, 0x20	; 32
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 a0 14 	call	0x2940	; 0x2940 <__pack_f>
    25d0:	68 96       	adiw	r28, 0x18	; 24
    25d2:	ea e0       	ldi	r30, 0x0A	; 10
    25d4:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x10>

000025d8 <__gtsf2>:
    25d8:	a8 e1       	ldi	r26, 0x18	; 24
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e2 ef       	ldi	r30, 0xF2	; 242
    25de:	f2 e1       	ldi	r31, 0x12	; 18
    25e0:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
    25e4:	69 83       	std	Y+1, r22	; 0x01
    25e6:	7a 83       	std	Y+2, r23	; 0x02
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	9c 83       	std	Y+4, r25	; 0x04
    25ec:	2d 83       	std	Y+5, r18	; 0x05
    25ee:	3e 83       	std	Y+6, r19	; 0x06
    25f0:	4f 83       	std	Y+7, r20	; 0x07
    25f2:	58 87       	std	Y+8, r21	; 0x08
    25f4:	8e 01       	movw	r16, r28
    25f6:	07 5f       	subi	r16, 0xF7	; 247
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	ce 01       	movw	r24, r28
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	b8 01       	movw	r22, r16
    2600:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2604:	81 e1       	ldi	r24, 0x11	; 17
    2606:	e8 2e       	mov	r14, r24
    2608:	f1 2c       	mov	r15, r1
    260a:	ec 0e       	add	r14, r28
    260c:	fd 1e       	adc	r15, r29
    260e:	ce 01       	movw	r24, r28
    2610:	05 96       	adiw	r24, 0x05	; 5
    2612:	b7 01       	movw	r22, r14
    2614:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	40 f0       	brcs	.+16     	; 0x262e <__gtsf2+0x56>
    261e:	89 89       	ldd	r24, Y+17	; 0x11
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	28 f0       	brcs	.+10     	; 0x262e <__gtsf2+0x56>
    2624:	c8 01       	movw	r24, r16
    2626:	b7 01       	movw	r22, r14
    2628:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fpcmp_parts_f>
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <__gtsf2+0x58>
    262e:	8f ef       	ldi	r24, 0xFF	; 255
    2630:	68 96       	adiw	r28, 0x18	; 24
    2632:	e6 e0       	ldi	r30, 0x06	; 6
    2634:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00002638 <__gesf2>:
    2638:	a8 e1       	ldi	r26, 0x18	; 24
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e2 e2       	ldi	r30, 0x22	; 34
    263e:	f3 e1       	ldi	r31, 0x13	; 19
    2640:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
    2644:	69 83       	std	Y+1, r22	; 0x01
    2646:	7a 83       	std	Y+2, r23	; 0x02
    2648:	8b 83       	std	Y+3, r24	; 0x03
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	2d 83       	std	Y+5, r18	; 0x05
    264e:	3e 83       	std	Y+6, r19	; 0x06
    2650:	4f 83       	std	Y+7, r20	; 0x07
    2652:	58 87       	std	Y+8, r21	; 0x08
    2654:	8e 01       	movw	r16, r28
    2656:	07 5f       	subi	r16, 0xF7	; 247
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	ce 01       	movw	r24, r28
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	b8 01       	movw	r22, r16
    2660:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2664:	81 e1       	ldi	r24, 0x11	; 17
    2666:	e8 2e       	mov	r14, r24
    2668:	f1 2c       	mov	r15, r1
    266a:	ec 0e       	add	r14, r28
    266c:	fd 1e       	adc	r15, r29
    266e:	ce 01       	movw	r24, r28
    2670:	05 96       	adiw	r24, 0x05	; 5
    2672:	b7 01       	movw	r22, r14
    2674:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	40 f0       	brcs	.+16     	; 0x268e <__gesf2+0x56>
    267e:	89 89       	ldd	r24, Y+17	; 0x11
    2680:	82 30       	cpi	r24, 0x02	; 2
    2682:	28 f0       	brcs	.+10     	; 0x268e <__gesf2+0x56>
    2684:	c8 01       	movw	r24, r16
    2686:	b7 01       	movw	r22, r14
    2688:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fpcmp_parts_f>
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <__gesf2+0x58>
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	68 96       	adiw	r28, 0x18	; 24
    2692:	e6 e0       	ldi	r30, 0x06	; 6
    2694:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00002698 <__ltsf2>:
    2698:	a8 e1       	ldi	r26, 0x18	; 24
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e2 e5       	ldi	r30, 0x52	; 82
    269e:	f3 e1       	ldi	r31, 0x13	; 19
    26a0:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
    26a4:	69 83       	std	Y+1, r22	; 0x01
    26a6:	7a 83       	std	Y+2, r23	; 0x02
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	2d 83       	std	Y+5, r18	; 0x05
    26ae:	3e 83       	std	Y+6, r19	; 0x06
    26b0:	4f 83       	std	Y+7, r20	; 0x07
    26b2:	58 87       	std	Y+8, r21	; 0x08
    26b4:	8e 01       	movw	r16, r28
    26b6:	07 5f       	subi	r16, 0xF7	; 247
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	ce 01       	movw	r24, r28
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	b8 01       	movw	r22, r16
    26c0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    26c4:	81 e1       	ldi	r24, 0x11	; 17
    26c6:	e8 2e       	mov	r14, r24
    26c8:	f1 2c       	mov	r15, r1
    26ca:	ec 0e       	add	r14, r28
    26cc:	fd 1e       	adc	r15, r29
    26ce:	ce 01       	movw	r24, r28
    26d0:	05 96       	adiw	r24, 0x05	; 5
    26d2:	b7 01       	movw	r22, r14
    26d4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	82 30       	cpi	r24, 0x02	; 2
    26dc:	40 f0       	brcs	.+16     	; 0x26ee <__ltsf2+0x56>
    26de:	89 89       	ldd	r24, Y+17	; 0x11
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	28 f0       	brcs	.+10     	; 0x26ee <__ltsf2+0x56>
    26e4:	c8 01       	movw	r24, r16
    26e6:	b7 01       	movw	r22, r14
    26e8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fpcmp_parts_f>
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <__ltsf2+0x58>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	68 96       	adiw	r28, 0x18	; 24
    26f2:	e6 e0       	ldi	r30, 0x06	; 6
    26f4:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000026f8 <__fixsfsi>:
    26f8:	ac e0       	ldi	r26, 0x0C	; 12
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e2 e8       	ldi	r30, 0x82	; 130
    26fe:	f3 e1       	ldi	r31, 0x13	; 19
    2700:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x20>
    2704:	69 83       	std	Y+1, r22	; 0x01
    2706:	7a 83       	std	Y+2, r23	; 0x02
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	be 01       	movw	r22, r28
    2712:	6b 5f       	subi	r22, 0xFB	; 251
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__unpack_f>
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	81 f1       	breq	.+96     	; 0x2780 <__fixsfsi+0x88>
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	70 f1       	brcs	.+92     	; 0x2780 <__fixsfsi+0x88>
    2724:	84 30       	cpi	r24, 0x04	; 4
    2726:	21 f4       	brne	.+8      	; 0x2730 <__fixsfsi+0x38>
    2728:	8e 81       	ldd	r24, Y+6	; 0x06
    272a:	88 23       	and	r24, r24
    272c:	69 f1       	breq	.+90     	; 0x2788 <__fixsfsi+0x90>
    272e:	0a c0       	rjmp	.+20     	; 0x2744 <__fixsfsi+0x4c>
    2730:	2f 81       	ldd	r18, Y+7	; 0x07
    2732:	38 85       	ldd	r19, Y+8	; 0x08
    2734:	37 fd       	sbrc	r19, 7
    2736:	24 c0       	rjmp	.+72     	; 0x2780 <__fixsfsi+0x88>
    2738:	6e 81       	ldd	r22, Y+6	; 0x06
    273a:	2f 31       	cpi	r18, 0x1F	; 31
    273c:	31 05       	cpc	r19, r1
    273e:	3c f0       	brlt	.+14     	; 0x274e <__fixsfsi+0x56>
    2740:	66 23       	and	r22, r22
    2742:	11 f1       	breq	.+68     	; 0x2788 <__fixsfsi+0x90>
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e8       	ldi	r21, 0x80	; 128
    274c:	21 c0       	rjmp	.+66     	; 0x2790 <__fixsfsi+0x98>
    274e:	8e e1       	ldi	r24, 0x1E	; 30
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	82 1b       	sub	r24, r18
    2754:	93 0b       	sbc	r25, r19
    2756:	29 85       	ldd	r18, Y+9	; 0x09
    2758:	3a 85       	ldd	r19, Y+10	; 0x0a
    275a:	4b 85       	ldd	r20, Y+11	; 0x0b
    275c:	5c 85       	ldd	r21, Y+12	; 0x0c
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <__fixsfsi+0x70>
    2760:	56 95       	lsr	r21
    2762:	47 95       	ror	r20
    2764:	37 95       	ror	r19
    2766:	27 95       	ror	r18
    2768:	8a 95       	dec	r24
    276a:	d2 f7       	brpl	.-12     	; 0x2760 <__fixsfsi+0x68>
    276c:	66 23       	and	r22, r22
    276e:	81 f0       	breq	.+32     	; 0x2790 <__fixsfsi+0x98>
    2770:	50 95       	com	r21
    2772:	40 95       	com	r20
    2774:	30 95       	com	r19
    2776:	21 95       	neg	r18
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	4f 4f       	sbci	r20, 0xFF	; 255
    277c:	5f 4f       	sbci	r21, 0xFF	; 255
    277e:	08 c0       	rjmp	.+16     	; 0x2790 <__fixsfsi+0x98>
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	a9 01       	movw	r20, r18
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <__fixsfsi+0x98>
    2788:	2f ef       	ldi	r18, 0xFF	; 255
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f ef       	ldi	r20, 0xFF	; 255
    278e:	5f e7       	ldi	r21, 0x7F	; 127
    2790:	b9 01       	movw	r22, r18
    2792:	ca 01       	movw	r24, r20
    2794:	2c 96       	adiw	r28, 0x0c	; 12
    2796:	e2 e0       	ldi	r30, 0x02	; 2
    2798:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x20>

0000279c <__floatunsisf>:
    279c:	a8 e0       	ldi	r26, 0x08	; 8
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e4 ed       	ldi	r30, 0xD4	; 212
    27a2:	f3 e1       	ldi	r31, 0x13	; 19
    27a4:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x14>
    27a8:	7b 01       	movw	r14, r22
    27aa:	8c 01       	movw	r16, r24
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	61 15       	cp	r22, r1
    27b0:	71 05       	cpc	r23, r1
    27b2:	81 05       	cpc	r24, r1
    27b4:	91 05       	cpc	r25, r1
    27b6:	19 f4       	brne	.+6      	; 0x27be <__floatunsisf+0x22>
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	5f c0       	rjmp	.+190    	; 0x287c <__stack+0x7d>
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	8e e1       	ldi	r24, 0x1E	; 30
    27c4:	c8 2e       	mov	r12, r24
    27c6:	d1 2c       	mov	r13, r1
    27c8:	cb 82       	std	Y+3, r12	; 0x03
    27ca:	dc 82       	std	Y+4, r13	; 0x04
    27cc:	ed 82       	std	Y+5, r14	; 0x05
    27ce:	fe 82       	std	Y+6, r15	; 0x06
    27d0:	0f 83       	std	Y+7, r16	; 0x07
    27d2:	18 87       	std	Y+8, r17	; 0x08
    27d4:	c8 01       	movw	r24, r16
    27d6:	b7 01       	movw	r22, r14
    27d8:	0e 94 46 14 	call	0x288c	; 0x288c <__clzsi2>
    27dc:	fc 01       	movw	r30, r24
    27de:	31 97       	sbiw	r30, 0x01	; 1
    27e0:	f7 ff       	sbrs	r31, 7
    27e2:	3a c0       	rjmp	.+116    	; 0x2858 <__stack+0x59>
    27e4:	aa 27       	eor	r26, r26
    27e6:	bb 27       	eor	r27, r27
    27e8:	ae 1b       	sub	r26, r30
    27ea:	bf 0b       	sbc	r27, r31
    27ec:	21 e0       	ldi	r18, 0x01	; 1
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	0a 2e       	mov	r0, r26
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <__stack+0x1>
    27f8:	22 0f       	add	r18, r18
    27fa:	33 1f       	adc	r19, r19
    27fc:	44 1f       	adc	r20, r20
    27fe:	55 1f       	adc	r21, r21
    2800:	0a 94       	dec	r0
    2802:	d2 f7       	brpl	.-12     	; 0x27f8 <__floatunsisf+0x5c>
    2804:	21 50       	subi	r18, 0x01	; 1
    2806:	30 40       	sbci	r19, 0x00	; 0
    2808:	40 40       	sbci	r20, 0x00	; 0
    280a:	50 40       	sbci	r21, 0x00	; 0
    280c:	2e 21       	and	r18, r14
    280e:	3f 21       	and	r19, r15
    2810:	40 23       	and	r20, r16
    2812:	51 23       	and	r21, r17
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	21 15       	cp	r18, r1
    281e:	31 05       	cpc	r19, r1
    2820:	41 05       	cpc	r20, r1
    2822:	51 05       	cpc	r21, r1
    2824:	19 f4       	brne	.+6      	; 0x282c <__stack+0x2d>
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	cb 01       	movw	r24, r22
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <__stack+0x37>
    282e:	16 95       	lsr	r17
    2830:	07 95       	ror	r16
    2832:	f7 94       	ror	r15
    2834:	e7 94       	ror	r14
    2836:	aa 95       	dec	r26
    2838:	d2 f7       	brpl	.-12     	; 0x282e <__stack+0x2f>
    283a:	e6 2a       	or	r14, r22
    283c:	f7 2a       	or	r15, r23
    283e:	08 2b       	or	r16, r24
    2840:	19 2b       	or	r17, r25
    2842:	ed 82       	std	Y+5, r14	; 0x05
    2844:	fe 82       	std	Y+6, r15	; 0x06
    2846:	0f 83       	std	Y+7, r16	; 0x07
    2848:	18 87       	std	Y+8, r17	; 0x08
    284a:	8e e1       	ldi	r24, 0x1E	; 30
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	8e 1b       	sub	r24, r30
    2850:	9f 0b       	sbc	r25, r31
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	12 c0       	rjmp	.+36     	; 0x287c <__stack+0x7d>
    2858:	30 97       	sbiw	r30, 0x00	; 0
    285a:	81 f0       	breq	.+32     	; 0x287c <__stack+0x7d>
    285c:	0e 2e       	mov	r0, r30
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <__stack+0x69>
    2860:	ee 0c       	add	r14, r14
    2862:	ff 1c       	adc	r15, r15
    2864:	00 1f       	adc	r16, r16
    2866:	11 1f       	adc	r17, r17
    2868:	0a 94       	dec	r0
    286a:	d2 f7       	brpl	.-12     	; 0x2860 <__stack+0x61>
    286c:	ed 82       	std	Y+5, r14	; 0x05
    286e:	fe 82       	std	Y+6, r15	; 0x06
    2870:	0f 83       	std	Y+7, r16	; 0x07
    2872:	18 87       	std	Y+8, r17	; 0x08
    2874:	ce 1a       	sub	r12, r30
    2876:	df 0a       	sbc	r13, r31
    2878:	cb 82       	std	Y+3, r12	; 0x03
    287a:	dc 82       	std	Y+4, r13	; 0x04
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	0e 94 a0 14 	call	0x2940	; 0x2940 <__pack_f>
    2884:	28 96       	adiw	r28, 0x08	; 8
    2886:	e8 e0       	ldi	r30, 0x08	; 8
    2888:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__+0x14>

0000288c <__clzsi2>:
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	7b 01       	movw	r14, r22
    289e:	8c 01       	movw	r16, r24
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	e8 16       	cp	r14, r24
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	f8 06       	cpc	r15, r24
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	08 07       	cpc	r16, r24
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	18 07       	cpc	r17, r24
    28b0:	58 f4       	brcc	.+22     	; 0x28c8 <__clzsi2+0x3c>
    28b2:	ef ef       	ldi	r30, 0xFF	; 255
    28b4:	ee 16       	cp	r14, r30
    28b6:	f1 04       	cpc	r15, r1
    28b8:	01 05       	cpc	r16, r1
    28ba:	11 05       	cpc	r17, r1
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <__clzsi2+0x34>
    28be:	90 f4       	brcc	.+36     	; 0x28e4 <__clzsi2+0x58>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	dc 01       	movw	r26, r24
    28c6:	17 c0       	rjmp	.+46     	; 0x28f6 <__clzsi2+0x6a>
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	ef 16       	cp	r14, r31
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	ff 06       	cpc	r15, r31
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	0f 07       	cpc	r16, r31
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	1f 07       	cpc	r17, r31
    28d8:	50 f4       	brcc	.+20     	; 0x28ee <__clzsi2+0x62>
    28da:	80 e1       	ldi	r24, 0x10	; 16
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	09 c0       	rjmp	.+18     	; 0x28f6 <__clzsi2+0x6a>
    28e4:	88 e0       	ldi	r24, 0x08	; 8
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <__clzsi2+0x6a>
    28ee:	88 e1       	ldi	r24, 0x18	; 24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	20 e2       	ldi	r18, 0x20	; 32
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	28 1b       	sub	r18, r24
    2900:	39 0b       	sbc	r19, r25
    2902:	4a 0b       	sbc	r20, r26
    2904:	5b 0b       	sbc	r21, r27
    2906:	57 01       	movw	r10, r14
    2908:	68 01       	movw	r12, r16
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <__clzsi2+0x88>
    290c:	d6 94       	lsr	r13
    290e:	c7 94       	ror	r12
    2910:	b7 94       	ror	r11
    2912:	a7 94       	ror	r10
    2914:	8a 95       	dec	r24
    2916:	d2 f7       	brpl	.-12     	; 0x290c <__clzsi2+0x80>
    2918:	d6 01       	movw	r26, r12
    291a:	c5 01       	movw	r24, r10
    291c:	89 5c       	subi	r24, 0xC9	; 201
    291e:	9f 4d       	sbci	r25, 0xDF	; 223
    2920:	fc 01       	movw	r30, r24
    2922:	80 81       	ld	r24, Z
    2924:	28 1b       	sub	r18, r24
    2926:	31 09       	sbc	r19, r1
    2928:	41 09       	sbc	r20, r1
    292a:	51 09       	sbc	r21, r1
    292c:	c9 01       	movw	r24, r18
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	ef 90       	pop	r14
    2936:	df 90       	pop	r13
    2938:	cf 90       	pop	r12
    293a:	bf 90       	pop	r11
    293c:	af 90       	pop	r10
    293e:	08 95       	ret

00002940 <__pack_f>:
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	fc 01       	movw	r30, r24
    294e:	24 81       	ldd	r18, Z+4	; 0x04
    2950:	35 81       	ldd	r19, Z+5	; 0x05
    2952:	46 81       	ldd	r20, Z+6	; 0x06
    2954:	57 81       	ldd	r21, Z+7	; 0x07
    2956:	61 81       	ldd	r22, Z+1	; 0x01
    2958:	80 81       	ld	r24, Z
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	20 f4       	brcc	.+8      	; 0x2966 <__pack_f+0x26>
    295e:	40 61       	ori	r20, 0x10	; 16
    2960:	ef ef       	ldi	r30, 0xFF	; 255
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	a3 c0       	rjmp	.+326    	; 0x2aac <__pack_f+0x16c>
    2966:	84 30       	cpi	r24, 0x04	; 4
    2968:	09 f4       	brne	.+2      	; 0x296c <__pack_f+0x2c>
    296a:	9b c0       	rjmp	.+310    	; 0x2aa2 <__pack_f+0x162>
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	09 f4       	brne	.+2      	; 0x2972 <__pack_f+0x32>
    2970:	92 c0       	rjmp	.+292    	; 0x2a96 <__pack_f+0x156>
    2972:	21 15       	cp	r18, r1
    2974:	31 05       	cpc	r19, r1
    2976:	41 05       	cpc	r20, r1
    2978:	51 05       	cpc	r21, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <__pack_f+0x3e>
    297c:	8f c0       	rjmp	.+286    	; 0x2a9c <__pack_f+0x15c>
    297e:	02 80       	ldd	r0, Z+2	; 0x02
    2980:	f3 81       	ldd	r31, Z+3	; 0x03
    2982:	e0 2d       	mov	r30, r0
    2984:	8f ef       	ldi	r24, 0xFF	; 255
    2986:	e2 38       	cpi	r30, 0x82	; 130
    2988:	f8 07       	cpc	r31, r24
    298a:	0c f0       	brlt	.+2      	; 0x298e <__pack_f+0x4e>
    298c:	5a c0       	rjmp	.+180    	; 0x2a42 <__pack_f+0x102>
    298e:	c2 e8       	ldi	r28, 0x82	; 130
    2990:	df ef       	ldi	r29, 0xFF	; 255
    2992:	ce 1b       	sub	r28, r30
    2994:	df 0b       	sbc	r29, r31
    2996:	ca 31       	cpi	r28, 0x1A	; 26
    2998:	d1 05       	cpc	r29, r1
    299a:	6c f5       	brge	.+90     	; 0x29f6 <__pack_f+0xb6>
    299c:	79 01       	movw	r14, r18
    299e:	8a 01       	movw	r16, r20
    29a0:	0c 2e       	mov	r0, r28
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <__pack_f+0x6c>
    29a4:	16 95       	lsr	r17
    29a6:	07 95       	ror	r16
    29a8:	f7 94       	ror	r15
    29aa:	e7 94       	ror	r14
    29ac:	0a 94       	dec	r0
    29ae:	d2 f7       	brpl	.-12     	; 0x29a4 <__pack_f+0x64>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e0       	ldi	r26, 0x00	; 0
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	0c 2e       	mov	r0, r28
    29ba:	04 c0       	rjmp	.+8      	; 0x29c4 <__pack_f+0x84>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	aa 1f       	adc	r26, r26
    29c2:	bb 1f       	adc	r27, r27
    29c4:	0a 94       	dec	r0
    29c6:	d2 f7       	brpl	.-12     	; 0x29bc <__pack_f+0x7c>
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	a1 09       	sbc	r26, r1
    29cc:	b1 09       	sbc	r27, r1
    29ce:	82 23       	and	r24, r18
    29d0:	93 23       	and	r25, r19
    29d2:	a4 23       	and	r26, r20
    29d4:	b5 23       	and	r27, r21
    29d6:	21 e0       	ldi	r18, 0x01	; 1
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	a1 05       	cpc	r26, r1
    29e2:	b1 05       	cpc	r27, r1
    29e4:	19 f4       	brne	.+6      	; 0x29ec <__pack_f+0xac>
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	a9 01       	movw	r20, r18
    29ec:	2e 29       	or	r18, r14
    29ee:	3f 29       	or	r19, r15
    29f0:	40 2b       	or	r20, r16
    29f2:	51 2b       	or	r21, r17
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <__pack_f+0xbc>
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	a9 01       	movw	r20, r18
    29fc:	da 01       	movw	r26, r20
    29fe:	c9 01       	movw	r24, r18
    2a00:	8f 77       	andi	r24, 0x7F	; 127
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	a0 70       	andi	r26, 0x00	; 0
    2a06:	b0 70       	andi	r27, 0x00	; 0
    2a08:	80 34       	cpi	r24, 0x40	; 64
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	a1 05       	cpc	r26, r1
    2a0e:	b1 05       	cpc	r27, r1
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <__pack_f+0xe0>
    2a12:	27 ff       	sbrs	r18, 7
    2a14:	09 c0       	rjmp	.+18     	; 0x2a28 <__pack_f+0xe8>
    2a16:	20 5c       	subi	r18, 0xC0	; 192
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <__pack_f+0xe8>
    2a20:	21 5c       	subi	r18, 0xC1	; 193
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	4f 4f       	sbci	r20, 0xFF	; 255
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	e1 e0       	ldi	r30, 0x01	; 1
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	20 30       	cpi	r18, 0x00	; 0
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	38 07       	cpc	r19, r24
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	48 07       	cpc	r20, r24
    2a36:	80 e4       	ldi	r24, 0x40	; 64
    2a38:	58 07       	cpc	r21, r24
    2a3a:	28 f5       	brcc	.+74     	; 0x2a86 <__pack_f+0x146>
    2a3c:	e0 e0       	ldi	r30, 0x00	; 0
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	22 c0       	rjmp	.+68     	; 0x2a86 <__pack_f+0x146>
    2a42:	e0 38       	cpi	r30, 0x80	; 128
    2a44:	f1 05       	cpc	r31, r1
    2a46:	6c f5       	brge	.+90     	; 0x2aa2 <__pack_f+0x162>
    2a48:	e1 58       	subi	r30, 0x81	; 129
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	da 01       	movw	r26, r20
    2a4e:	c9 01       	movw	r24, r18
    2a50:	8f 77       	andi	r24, 0x7F	; 127
    2a52:	90 70       	andi	r25, 0x00	; 0
    2a54:	a0 70       	andi	r26, 0x00	; 0
    2a56:	b0 70       	andi	r27, 0x00	; 0
    2a58:	80 34       	cpi	r24, 0x40	; 64
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	a1 05       	cpc	r26, r1
    2a5e:	b1 05       	cpc	r27, r1
    2a60:	39 f4       	brne	.+14     	; 0x2a70 <__pack_f+0x130>
    2a62:	27 ff       	sbrs	r18, 7
    2a64:	09 c0       	rjmp	.+18     	; 0x2a78 <__pack_f+0x138>
    2a66:	20 5c       	subi	r18, 0xC0	; 192
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6e:	04 c0       	rjmp	.+8      	; 0x2a78 <__pack_f+0x138>
    2a70:	21 5c       	subi	r18, 0xC1	; 193
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	4f 4f       	sbci	r20, 0xFF	; 255
    2a76:	5f 4f       	sbci	r21, 0xFF	; 255
    2a78:	57 ff       	sbrs	r21, 7
    2a7a:	05 c0       	rjmp	.+10     	; 0x2a86 <__pack_f+0x146>
    2a7c:	56 95       	lsr	r21
    2a7e:	47 95       	ror	r20
    2a80:	37 95       	ror	r19
    2a82:	27 95       	ror	r18
    2a84:	31 96       	adiw	r30, 0x01	; 1
    2a86:	87 e0       	ldi	r24, 0x07	; 7
    2a88:	56 95       	lsr	r21
    2a8a:	47 95       	ror	r20
    2a8c:	37 95       	ror	r19
    2a8e:	27 95       	ror	r18
    2a90:	8a 95       	dec	r24
    2a92:	d1 f7       	brne	.-12     	; 0x2a88 <__pack_f+0x148>
    2a94:	0b c0       	rjmp	.+22     	; 0x2aac <__pack_f+0x16c>
    2a96:	e0 e0       	ldi	r30, 0x00	; 0
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	05 c0       	rjmp	.+10     	; 0x2aa6 <__pack_f+0x166>
    2a9c:	e0 e0       	ldi	r30, 0x00	; 0
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	05 c0       	rjmp	.+10     	; 0x2aac <__pack_f+0x16c>
    2aa2:	ef ef       	ldi	r30, 0xFF	; 255
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	a9 01       	movw	r20, r18
    2aac:	8e 2f       	mov	r24, r30
    2aae:	87 95       	ror	r24
    2ab0:	88 27       	eor	r24, r24
    2ab2:	87 95       	ror	r24
    2ab4:	94 2f       	mov	r25, r20
    2ab6:	9f 77       	andi	r25, 0x7F	; 127
    2ab8:	67 95       	ror	r22
    2aba:	66 27       	eor	r22, r22
    2abc:	67 95       	ror	r22
    2abe:	e6 95       	lsr	r30
    2ac0:	e2 2e       	mov	r14, r18
    2ac2:	a9 2f       	mov	r26, r25
    2ac4:	a8 2b       	or	r26, r24
    2ac6:	fe 2f       	mov	r31, r30
    2ac8:	f6 2b       	or	r31, r22
    2aca:	62 2f       	mov	r22, r18
    2acc:	73 2f       	mov	r23, r19
    2ace:	8a 2f       	mov	r24, r26
    2ad0:	9f 2f       	mov	r25, r31
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	e6 e0       	ldi	r30, 0x06	; 6
    2ad8:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00002adc <__unpack_f>:
    2adc:	dc 01       	movw	r26, r24
    2ade:	fb 01       	movw	r30, r22
    2ae0:	2c 91       	ld	r18, X
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	3c 91       	ld	r19, X
    2ae6:	11 97       	sbiw	r26, 0x01	; 1
    2ae8:	12 96       	adiw	r26, 0x02	; 2
    2aea:	8c 91       	ld	r24, X
    2aec:	12 97       	sbiw	r26, 0x02	; 2
    2aee:	48 2f       	mov	r20, r24
    2af0:	4f 77       	andi	r20, 0x7F	; 127
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	98 2f       	mov	r25, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	99 27       	eor	r25, r25
    2afa:	99 1f       	adc	r25, r25
    2afc:	13 96       	adiw	r26, 0x03	; 3
    2afe:	6c 91       	ld	r22, X
    2b00:	13 97       	sbiw	r26, 0x03	; 3
    2b02:	86 2f       	mov	r24, r22
    2b04:	88 0f       	add	r24, r24
    2b06:	89 2b       	or	r24, r25
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	66 1f       	adc	r22, r22
    2b0c:	66 27       	eor	r22, r22
    2b0e:	66 1f       	adc	r22, r22
    2b10:	61 83       	std	Z+1, r22	; 0x01
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	39 f5       	brne	.+78     	; 0x2b64 <__unpack_f+0x88>
    2b16:	21 15       	cp	r18, r1
    2b18:	31 05       	cpc	r19, r1
    2b1a:	41 05       	cpc	r20, r1
    2b1c:	51 05       	cpc	r21, r1
    2b1e:	11 f4       	brne	.+4      	; 0x2b24 <__unpack_f+0x48>
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	29 c0       	rjmp	.+82     	; 0x2b76 <__unpack_f+0x9a>
    2b24:	82 e8       	ldi	r24, 0x82	; 130
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	82 83       	std	Z+2, r24	; 0x02
    2b2a:	93 83       	std	Z+3, r25	; 0x03
    2b2c:	67 e0       	ldi	r22, 0x07	; 7
    2b2e:	22 0f       	add	r18, r18
    2b30:	33 1f       	adc	r19, r19
    2b32:	44 1f       	adc	r20, r20
    2b34:	55 1f       	adc	r21, r21
    2b36:	6a 95       	dec	r22
    2b38:	d1 f7       	brne	.-12     	; 0x2b2e <__unpack_f+0x52>
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	80 83       	st	Z, r24
    2b3e:	09 c0       	rjmp	.+18     	; 0x2b52 <__unpack_f+0x76>
    2b40:	22 0f       	add	r18, r18
    2b42:	33 1f       	adc	r19, r19
    2b44:	44 1f       	adc	r20, r20
    2b46:	55 1f       	adc	r21, r21
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	82 83       	std	Z+2, r24	; 0x02
    2b50:	93 83       	std	Z+3, r25	; 0x03
    2b52:	20 30       	cpi	r18, 0x00	; 0
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	38 07       	cpc	r19, r24
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	48 07       	cpc	r20, r24
    2b5c:	80 e4       	ldi	r24, 0x40	; 64
    2b5e:	58 07       	cpc	r21, r24
    2b60:	78 f3       	brcs	.-34     	; 0x2b40 <__unpack_f+0x64>
    2b62:	20 c0       	rjmp	.+64     	; 0x2ba4 <__unpack_f+0xc8>
    2b64:	8f 3f       	cpi	r24, 0xFF	; 255
    2b66:	91 05       	cpc	r25, r1
    2b68:	79 f4       	brne	.+30     	; 0x2b88 <__unpack_f+0xac>
    2b6a:	21 15       	cp	r18, r1
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	41 05       	cpc	r20, r1
    2b70:	51 05       	cpc	r21, r1
    2b72:	19 f4       	brne	.+6      	; 0x2b7a <__unpack_f+0x9e>
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	80 83       	st	Z, r24
    2b78:	08 95       	ret
    2b7a:	44 ff       	sbrs	r20, 4
    2b7c:	03 c0       	rjmp	.+6      	; 0x2b84 <__unpack_f+0xa8>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 83       	st	Z, r24
    2b82:	10 c0       	rjmp	.+32     	; 0x2ba4 <__unpack_f+0xc8>
    2b84:	10 82       	st	Z, r1
    2b86:	0e c0       	rjmp	.+28     	; 0x2ba4 <__unpack_f+0xc8>
    2b88:	8f 57       	subi	r24, 0x7F	; 127
    2b8a:	90 40       	sbci	r25, 0x00	; 0
    2b8c:	82 83       	std	Z+2, r24	; 0x02
    2b8e:	93 83       	std	Z+3, r25	; 0x03
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	80 83       	st	Z, r24
    2b94:	87 e0       	ldi	r24, 0x07	; 7
    2b96:	22 0f       	add	r18, r18
    2b98:	33 1f       	adc	r19, r19
    2b9a:	44 1f       	adc	r20, r20
    2b9c:	55 1f       	adc	r21, r21
    2b9e:	8a 95       	dec	r24
    2ba0:	d1 f7       	brne	.-12     	; 0x2b96 <__unpack_f+0xba>
    2ba2:	50 64       	ori	r21, 0x40	; 64
    2ba4:	24 83       	std	Z+4, r18	; 0x04
    2ba6:	35 83       	std	Z+5, r19	; 0x05
    2ba8:	46 83       	std	Z+6, r20	; 0x06
    2baa:	57 83       	std	Z+7, r21	; 0x07
    2bac:	08 95       	ret

00002bae <__fpcmp_parts_f>:
    2bae:	fc 01       	movw	r30, r24
    2bb0:	db 01       	movw	r26, r22
    2bb2:	90 81       	ld	r25, Z
    2bb4:	92 30       	cpi	r25, 0x02	; 2
    2bb6:	08 f4       	brcc	.+2      	; 0x2bba <__fpcmp_parts_f+0xc>
    2bb8:	49 c0       	rjmp	.+146    	; 0x2c4c <__fpcmp_parts_f+0x9e>
    2bba:	8c 91       	ld	r24, X
    2bbc:	82 30       	cpi	r24, 0x02	; 2
    2bbe:	08 f4       	brcc	.+2      	; 0x2bc2 <__fpcmp_parts_f+0x14>
    2bc0:	45 c0       	rjmp	.+138    	; 0x2c4c <__fpcmp_parts_f+0x9e>
    2bc2:	94 30       	cpi	r25, 0x04	; 4
    2bc4:	51 f4       	brne	.+20     	; 0x2bda <__fpcmp_parts_f+0x2c>
    2bc6:	61 81       	ldd	r22, Z+1	; 0x01
    2bc8:	84 30       	cpi	r24, 0x04	; 4
    2bca:	b1 f5       	brne	.+108    	; 0x2c38 <__fpcmp_parts_f+0x8a>
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	2c 91       	ld	r18, X
    2bd0:	11 97       	sbiw	r26, 0x01	; 1
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	26 1b       	sub	r18, r22
    2bd6:	31 09       	sbc	r19, r1
    2bd8:	41 c0       	rjmp	.+130    	; 0x2c5c <__fpcmp_parts_f+0xae>
    2bda:	84 30       	cpi	r24, 0x04	; 4
    2bdc:	21 f0       	breq	.+8      	; 0x2be6 <__fpcmp_parts_f+0x38>
    2bde:	92 30       	cpi	r25, 0x02	; 2
    2be0:	41 f4       	brne	.+16     	; 0x2bf2 <__fpcmp_parts_f+0x44>
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	b1 f1       	breq	.+108    	; 0x2c52 <__fpcmp_parts_f+0xa4>
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	8c 91       	ld	r24, X
    2bea:	11 97       	sbiw	r26, 0x01	; 1
    2bec:	88 23       	and	r24, r24
    2bee:	a1 f1       	breq	.+104    	; 0x2c58 <__fpcmp_parts_f+0xaa>
    2bf0:	2d c0       	rjmp	.+90     	; 0x2c4c <__fpcmp_parts_f+0x9e>
    2bf2:	61 81       	ldd	r22, Z+1	; 0x01
    2bf4:	82 30       	cpi	r24, 0x02	; 2
    2bf6:	01 f1       	breq	.+64     	; 0x2c38 <__fpcmp_parts_f+0x8a>
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	8c 91       	ld	r24, X
    2bfc:	11 97       	sbiw	r26, 0x01	; 1
    2bfe:	68 17       	cp	r22, r24
    2c00:	d9 f4       	brne	.+54     	; 0x2c38 <__fpcmp_parts_f+0x8a>
    2c02:	22 81       	ldd	r18, Z+2	; 0x02
    2c04:	33 81       	ldd	r19, Z+3	; 0x03
    2c06:	12 96       	adiw	r26, 0x02	; 2
    2c08:	8d 91       	ld	r24, X+
    2c0a:	9c 91       	ld	r25, X
    2c0c:	13 97       	sbiw	r26, 0x03	; 3
    2c0e:	82 17       	cp	r24, r18
    2c10:	93 07       	cpc	r25, r19
    2c12:	94 f0       	brlt	.+36     	; 0x2c38 <__fpcmp_parts_f+0x8a>
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	bc f0       	brlt	.+46     	; 0x2c48 <__fpcmp_parts_f+0x9a>
    2c1a:	24 81       	ldd	r18, Z+4	; 0x04
    2c1c:	35 81       	ldd	r19, Z+5	; 0x05
    2c1e:	46 81       	ldd	r20, Z+6	; 0x06
    2c20:	57 81       	ldd	r21, Z+7	; 0x07
    2c22:	14 96       	adiw	r26, 0x04	; 4
    2c24:	8d 91       	ld	r24, X+
    2c26:	9d 91       	ld	r25, X+
    2c28:	0d 90       	ld	r0, X+
    2c2a:	bc 91       	ld	r27, X
    2c2c:	a0 2d       	mov	r26, r0
    2c2e:	82 17       	cp	r24, r18
    2c30:	93 07       	cpc	r25, r19
    2c32:	a4 07       	cpc	r26, r20
    2c34:	b5 07       	cpc	r27, r21
    2c36:	18 f4       	brcc	.+6      	; 0x2c3e <__fpcmp_parts_f+0x90>
    2c38:	66 23       	and	r22, r22
    2c3a:	41 f0       	breq	.+16     	; 0x2c4c <__fpcmp_parts_f+0x9e>
    2c3c:	0d c0       	rjmp	.+26     	; 0x2c58 <__fpcmp_parts_f+0xaa>
    2c3e:	28 17       	cp	r18, r24
    2c40:	39 07       	cpc	r19, r25
    2c42:	4a 07       	cpc	r20, r26
    2c44:	5b 07       	cpc	r21, r27
    2c46:	28 f4       	brcc	.+10     	; 0x2c52 <__fpcmp_parts_f+0xa4>
    2c48:	66 23       	and	r22, r22
    2c4a:	31 f0       	breq	.+12     	; 0x2c58 <__fpcmp_parts_f+0xaa>
    2c4c:	21 e0       	ldi	r18, 0x01	; 1
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	05 c0       	rjmp	.+10     	; 0x2c5c <__fpcmp_parts_f+0xae>
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <__fpcmp_parts_f+0xae>
    2c58:	2f ef       	ldi	r18, 0xFF	; 255
    2c5a:	3f ef       	ldi	r19, 0xFF	; 255
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	08 95       	ret

00002c60 <__mulsi3>:
    2c60:	62 9f       	mul	r22, r18
    2c62:	d0 01       	movw	r26, r0
    2c64:	73 9f       	mul	r23, r19
    2c66:	f0 01       	movw	r30, r0
    2c68:	82 9f       	mul	r24, r18
    2c6a:	e0 0d       	add	r30, r0
    2c6c:	f1 1d       	adc	r31, r1
    2c6e:	64 9f       	mul	r22, r20
    2c70:	e0 0d       	add	r30, r0
    2c72:	f1 1d       	adc	r31, r1
    2c74:	92 9f       	mul	r25, r18
    2c76:	f0 0d       	add	r31, r0
    2c78:	83 9f       	mul	r24, r19
    2c7a:	f0 0d       	add	r31, r0
    2c7c:	74 9f       	mul	r23, r20
    2c7e:	f0 0d       	add	r31, r0
    2c80:	65 9f       	mul	r22, r21
    2c82:	f0 0d       	add	r31, r0
    2c84:	99 27       	eor	r25, r25
    2c86:	72 9f       	mul	r23, r18
    2c88:	b0 0d       	add	r27, r0
    2c8a:	e1 1d       	adc	r30, r1
    2c8c:	f9 1f       	adc	r31, r25
    2c8e:	63 9f       	mul	r22, r19
    2c90:	b0 0d       	add	r27, r0
    2c92:	e1 1d       	adc	r30, r1
    2c94:	f9 1f       	adc	r31, r25
    2c96:	bd 01       	movw	r22, r26
    2c98:	cf 01       	movw	r24, r30
    2c9a:	11 24       	eor	r1, r1
    2c9c:	08 95       	ret

00002c9e <__udivmodhi4>:
    2c9e:	aa 1b       	sub	r26, r26
    2ca0:	bb 1b       	sub	r27, r27
    2ca2:	51 e1       	ldi	r21, 0x11	; 17
    2ca4:	07 c0       	rjmp	.+14     	; 0x2cb4 <__udivmodhi4_ep>

00002ca6 <__udivmodhi4_loop>:
    2ca6:	aa 1f       	adc	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	a6 17       	cp	r26, r22
    2cac:	b7 07       	cpc	r27, r23
    2cae:	10 f0       	brcs	.+4      	; 0x2cb4 <__udivmodhi4_ep>
    2cb0:	a6 1b       	sub	r26, r22
    2cb2:	b7 0b       	sbc	r27, r23

00002cb4 <__udivmodhi4_ep>:
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	5a 95       	dec	r21
    2cba:	a9 f7       	brne	.-22     	; 0x2ca6 <__udivmodhi4_loop>
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	08 95       	ret

00002cc6 <__divmodhi4>:
    2cc6:	97 fb       	bst	r25, 7
    2cc8:	09 2e       	mov	r0, r25
    2cca:	07 26       	eor	r0, r23
    2ccc:	0a d0       	rcall	.+20     	; 0x2ce2 <__divmodhi4_neg1>
    2cce:	77 fd       	sbrc	r23, 7
    2cd0:	04 d0       	rcall	.+8      	; 0x2cda <__divmodhi4_neg2>
    2cd2:	e5 df       	rcall	.-54     	; 0x2c9e <__udivmodhi4>
    2cd4:	06 d0       	rcall	.+12     	; 0x2ce2 <__divmodhi4_neg1>
    2cd6:	00 20       	and	r0, r0
    2cd8:	1a f4       	brpl	.+6      	; 0x2ce0 <__divmodhi4_exit>

00002cda <__divmodhi4_neg2>:
    2cda:	70 95       	com	r23
    2cdc:	61 95       	neg	r22
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255

00002ce0 <__divmodhi4_exit>:
    2ce0:	08 95       	ret

00002ce2 <__divmodhi4_neg1>:
    2ce2:	f6 f7       	brtc	.-4      	; 0x2ce0 <__divmodhi4_exit>
    2ce4:	90 95       	com	r25
    2ce6:	81 95       	neg	r24
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	08 95       	ret

00002cec <__udivmodsi4>:
    2cec:	a1 e2       	ldi	r26, 0x21	; 33
    2cee:	1a 2e       	mov	r1, r26
    2cf0:	aa 1b       	sub	r26, r26
    2cf2:	bb 1b       	sub	r27, r27
    2cf4:	fd 01       	movw	r30, r26
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <__udivmodsi4_ep>

00002cf8 <__udivmodsi4_loop>:
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	ee 1f       	adc	r30, r30
    2cfe:	ff 1f       	adc	r31, r31
    2d00:	a2 17       	cp	r26, r18
    2d02:	b3 07       	cpc	r27, r19
    2d04:	e4 07       	cpc	r30, r20
    2d06:	f5 07       	cpc	r31, r21
    2d08:	20 f0       	brcs	.+8      	; 0x2d12 <__udivmodsi4_ep>
    2d0a:	a2 1b       	sub	r26, r18
    2d0c:	b3 0b       	sbc	r27, r19
    2d0e:	e4 0b       	sbc	r30, r20
    2d10:	f5 0b       	sbc	r31, r21

00002d12 <__udivmodsi4_ep>:
    2d12:	66 1f       	adc	r22, r22
    2d14:	77 1f       	adc	r23, r23
    2d16:	88 1f       	adc	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	1a 94       	dec	r1
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <__udivmodsi4_loop>
    2d1e:	60 95       	com	r22
    2d20:	70 95       	com	r23
    2d22:	80 95       	com	r24
    2d24:	90 95       	com	r25
    2d26:	9b 01       	movw	r18, r22
    2d28:	ac 01       	movw	r20, r24
    2d2a:	bd 01       	movw	r22, r26
    2d2c:	cf 01       	movw	r24, r30
    2d2e:	08 95       	ret

00002d30 <__prologue_saves__>:
    2d30:	2f 92       	push	r2
    2d32:	3f 92       	push	r3
    2d34:	4f 92       	push	r4
    2d36:	5f 92       	push	r5
    2d38:	6f 92       	push	r6
    2d3a:	7f 92       	push	r7
    2d3c:	8f 92       	push	r8
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	ca 1b       	sub	r28, r26
    2d5a:	db 0b       	sbc	r29, r27
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	09 94       	ijmp

00002d62 <__epilogue_restores__>:
    2d62:	2a 88       	ldd	r2, Y+18	; 0x12
    2d64:	39 88       	ldd	r3, Y+17	; 0x11
    2d66:	48 88       	ldd	r4, Y+16	; 0x10
    2d68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d74:	b9 84       	ldd	r11, Y+9	; 0x09
    2d76:	c8 84       	ldd	r12, Y+8	; 0x08
    2d78:	df 80       	ldd	r13, Y+7	; 0x07
    2d7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d80:	1b 81       	ldd	r17, Y+3	; 0x03
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	b9 81       	ldd	r27, Y+1	; 0x01
    2d86:	ce 0f       	add	r28, r30
    2d88:	d1 1d       	adc	r29, r1
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	ed 01       	movw	r28, r26
    2d90:	08 95       	ret

00002d92 <_exit>:
    2d92:	f8 94       	cli

00002d94 <__stop_program>:
    2d94:	ff cf       	rjmp	.-2      	; 0x2d94 <__stop_program>
