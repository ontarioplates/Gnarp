
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00002e02  00002e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  00802138  00802138  00002fce  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  00003721  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000bf3  00000000  00000000  00003a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000701d  00000000  00000000  000045f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021a2  00000000  00000000  0000b611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c5d  00000000  00000000  0000d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000850  00000000  00000000  00011410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c9d  00000000  00000000  00011c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026a8  00000000  00000000  000138fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e64  00000000  00000000  00015fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  00016e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_17>
      48:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 e0       	ldi	r30, 0x02	; 2
     18c:	fe e2       	ldi	r31, 0x2E	; 46
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 33       	cpi	r26, 0x38	; 56
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ac 36       	cpi	r26, 0x6C	; 108
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
     1ae:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
#include "arpeggiator.h"

#include <avr/interrupt.h>
#include <avr/io.h>

ISR(TCC0_CCA_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:

ISR(TCC0_CCD_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:

static uint16_t BPM;

void configure_beat_clock_timer(){
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     226:	20 91 38 21 	lds	r18, 0x2138
     22a:	30 91 39 21 	lds	r19, 0x2139
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     306:	80 93 38 21 	sts	0x2138, r24
     30a:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
}
     33a:	08 95       	ret

0000033c <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     33c:	80 91 38 21 	lds	r24, 0x2138
     340:	90 91 39 21 	lds	r25, 0x2139
     344:	08 95       	ret

00000346 <increment_BPM>:

void increment_BPM(){
    BPM += 1;
     346:	80 91 38 21 	lds	r24, 0x2138
     34a:	90 91 39 21 	lds	r25, 0x2139
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 38 21 	sts	0x2138, r24
     354:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     35c:	08 95       	ret

0000035e <decrement_BPM>:

void decrement_BPM(){
    BPM -= 1;
     35e:	80 91 38 21 	lds	r24, 0x2138
     362:	90 91 39 21 	lds	r25, 0x2139
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	80 93 38 21 	sts	0x2138, r24
     36c:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     374:	08 95       	ret

00000376 <get_encoder>:
     376:	80 91 50 21 	lds	r24, 0x2150
     37a:	08 95       	ret

0000037c <get_pot_value>:
     37c:	2f 92       	push	r2
     37e:	3f 92       	push	r3
     380:	4f 92       	push	r4
     382:	5f 92       	push	r5
     384:	6f 92       	push	r6
     386:	7f 92       	push	r7
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <get_pot_value+0x26>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6b 01       	movw	r12, r22
     3a8:	2a 01       	movw	r4, r20
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ea 5b       	subi	r30, 0xBA	; 186
     3b4:	fe 4d       	sbci	r31, 0xDE	; 222
     3b6:	60 81       	ld	r22, Z
     3b8:	71 81       	ldd	r23, Z+1	; 0x01
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 04 14 	call	0x2808	; 0x2808 <__floatunsisf>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	42 e7       	ldi	r20, 0x72	; 114
     3c8:	55 e4       	ldi	r21, 0x45	; 69
     3ca:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__divsf3>
     3ce:	7b 01       	movw	r14, r22
     3d0:	8c 01       	movw	r16, r24
     3d2:	b2 01       	movw	r22, r4
     3d4:	6c 19       	sub	r22, r12
     3d6:	7d 09       	sbc	r23, r13
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 04 14 	call	0x2808	; 0x2808 <__floatunsisf>
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__mulsf3>
     3f0:	7b 01       	movw	r14, r22
     3f2:	8c 01       	movw	r16, r24
     3f4:	b6 01       	movw	r22, r12
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 04 14 	call	0x2808	; 0x2808 <__floatunsisf>
     3fe:	d6 2e       	mov	r13, r22
     400:	c7 2e       	mov	r12, r23
     402:	b8 2e       	mov	r11, r24
     404:	a9 2e       	mov	r10, r25
     406:	16 01       	movw	r2, r12
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	6e 2d       	mov	r22, r14
     40e:	7f 2d       	mov	r23, r15
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	d6 01       	movw	r26, r12
     416:	f5 01       	movw	r30, r10
     418:	2b 2f       	mov	r18, r27
     41a:	3a 2f       	mov	r19, r26
     41c:	4f 2f       	mov	r20, r31
     41e:	5e 2f       	mov	r21, r30
     420:	0e 94 1c 11 	call	0x2238	; 0x2238 <__addsf3>
     424:	96 2e       	mov	r9, r22
     426:	87 2e       	mov	r8, r23
     428:	78 2e       	mov	r7, r24
     42a:	69 2e       	mov	r6, r25
     42c:	b2 01       	movw	r22, r4
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 04 14 	call	0x2808	; 0x2808 <__floatunsisf>
     436:	f6 2e       	mov	r15, r22
     438:	07 2f       	mov	r16, r23
     43a:	18 2f       	mov	r17, r24
     43c:	e9 2e       	mov	r14, r25
     43e:	a4 01       	movw	r20, r8
     440:	93 01       	movw	r18, r6
     442:	65 2f       	mov	r22, r21
     444:	74 2f       	mov	r23, r20
     446:	83 2f       	mov	r24, r19
     448:	92 2f       	mov	r25, r18
     44a:	2f 2d       	mov	r18, r15
     44c:	30 2f       	mov	r19, r16
     44e:	41 2f       	mov	r20, r17
     450:	5e 2d       	mov	r21, r14
     452:	0e 94 22 13 	call	0x2644	; 0x2644 <__gtsf2>
     456:	18 16       	cp	r1, r24
     458:	24 f0       	brlt	.+8      	; 0x462 <get_pot_value+0xe6>
     45a:	f9 2c       	mov	r15, r9
     45c:	08 2d       	mov	r16, r8
     45e:	17 2d       	mov	r17, r7
     460:	e6 2c       	mov	r14, r6
     462:	6f 2d       	mov	r22, r15
     464:	70 2f       	mov	r23, r16
     466:	81 2f       	mov	r24, r17
     468:	9e 2d       	mov	r25, r14
     46a:	d6 01       	movw	r26, r12
     46c:	f5 01       	movw	r30, r10
     46e:	2b 2f       	mov	r18, r27
     470:	3c 2d       	mov	r19, r12
     472:	4f 2f       	mov	r20, r31
     474:	5a 2d       	mov	r21, r10
     476:	0e 94 82 13 	call	0x2704	; 0x2704 <__ltsf2>
     47a:	87 fd       	sbrc	r24, 7
     47c:	04 c0       	rjmp	.+8      	; 0x486 <get_pot_value+0x10a>
     47e:	3f 2c       	mov	r3, r15
     480:	20 2e       	mov	r2, r16
     482:	19 83       	std	Y+1, r17	; 0x01
     484:	ea 82       	std	Y+2, r14	; 0x02
     486:	a1 01       	movw	r20, r2
     488:	39 81       	ldd	r19, Y+1	; 0x01
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	65 2f       	mov	r22, r21
     48e:	72 2d       	mov	r23, r2
     490:	83 2f       	mov	r24, r19
     492:	92 2f       	mov	r25, r18
     494:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixunssfsi>
     498:	cb 01       	movw	r24, r22
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	3f 90       	pop	r3
     4c0:	2f 90       	pop	r2
     4c2:	08 95       	ret

000004c4 <set_seven_segment_LEDs>:
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	ca e0       	ldi	r28, 0x0A	; 10
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	73 e0       	ldi	r23, 0x03	; 3
     4e8:	c7 2e       	mov	r12, r23
     4ea:	d1 2c       	mov	r13, r1
     4ec:	68 e0       	ldi	r22, 0x08	; 8
     4ee:	a6 2e       	mov	r10, r22
     4f0:	b1 2c       	mov	r11, r1
     4f2:	00 e6       	ldi	r16, 0x60	; 96
     4f4:	16 e0       	ldi	r17, 0x06	; 6
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	e5 2e       	mov	r14, r21
     4fa:	56 e0       	ldi	r21, 0x06	; 6
     4fc:	f5 2e       	mov	r15, r21
     4fe:	40 ef       	ldi	r20, 0xF0	; 240
     500:	94 2e       	mov	r9, r20
     502:	98 e3       	ldi	r25, 0x38	; 56
     504:	89 2e       	mov	r8, r25
     506:	cf 01       	movw	r24, r30
     508:	be 01       	movw	r22, r28
     50a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodhi4>
     50e:	48 2f       	mov	r20, r24
     510:	30 97       	sbiw	r30, 0x00	; 0
     512:	19 f4       	brne	.+6      	; 0x51a <set_seven_segment_LEDs+0x56>
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <set_seven_segment_LEDs+0x56>
     518:	4a e0       	ldi	r20, 0x0A	; 10
     51a:	c9 01       	movw	r24, r18
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__divmodhi4>
     522:	b5 01       	movw	r22, r10
     524:	02 c0       	rjmp	.+4      	; 0x52a <set_seven_segment_LEDs+0x66>
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	8a 95       	dec	r24
     52c:	e2 f7       	brpl	.-8      	; 0x526 <set_seven_segment_LEDs+0x62>
     52e:	d8 01       	movw	r26, r16
     530:	16 96       	adiw	r26, 0x06	; 6
     532:	6c 93       	st	X, r22
     534:	d7 01       	movw	r26, r14
     536:	16 96       	adiw	r26, 0x06	; 6
     538:	9c 92       	st	X, r9
     53a:	16 97       	sbiw	r26, 0x06	; 6
     53c:	42 95       	swap	r20
     53e:	40 7f       	andi	r20, 0xF0	; 240
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	4c 93       	st	X, r20
     544:	d8 01       	movw	r26, r16
     546:	15 96       	adiw	r26, 0x05	; 5
     548:	8c 92       	st	X, r8
     54a:	15 97       	sbiw	r26, 0x05	; 5
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	25 30       	cpi	r18, 0x05	; 5
     552:	31 05       	cpc	r19, r1
     554:	31 f0       	breq	.+12     	; 0x562 <set_seven_segment_LEDs+0x9e>
     556:	cf 01       	movw	r24, r30
     558:	be 01       	movw	r22, r28
     55a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodhi4>
     55e:	fb 01       	movw	r30, r22
     560:	d2 cf       	rjmp	.-92     	; 0x506 <set_seven_segment_LEDs+0x42>
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <set_LEDs_on>:
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <set_LEDs_on+0xc>
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	86 83       	std	Z+6, r24	; 0x06
     588:	66 23       	and	r22, r22
     58a:	21 f0       	breq	.+8      	; 0x594 <set_LEDs_on+0x18>
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	e0 e6       	ldi	r30, 0x60	; 96
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	85 83       	std	Z+5, r24	; 0x05
     594:	44 23       	and	r20, r20
     596:	21 f0       	breq	.+8      	; 0x5a0 <set_LEDs_on+0x24>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e0 e6       	ldi	r30, 0x60	; 96
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	85 83       	std	Z+5, r24	; 0x05
     5a0:	22 23       	and	r18, r18
     5a2:	21 f0       	breq	.+8      	; 0x5ac <set_LEDs_on+0x30>
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
     5ac:	08 95       	ret

000005ae <set_LEDs_off>:
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <set_LEDs_off+0xc>
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	85 83       	std	Z+5, r24	; 0x05
     5ba:	66 23       	and	r22, r22
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <set_LEDs_off+0x18>
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	e0 e6       	ldi	r30, 0x60	; 96
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	86 83       	std	Z+6, r24	; 0x06
     5c6:	44 23       	and	r20, r20
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <set_LEDs_off+0x24>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	86 83       	std	Z+6, r24	; 0x06
     5d2:	22 23       	and	r18, r18
     5d4:	21 f0       	breq	.+8      	; 0x5de <set_LEDs_off+0x30>
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	86 83       	std	Z+6, r24	; 0x06
     5de:	08 95       	ret

000005e0 <get_encoder_switch_state>:
     5e0:	80 91 3e 21 	lds	r24, 0x213E
     5e4:	08 95       	ret

000005e6 <get_encoder_switch_edge>:
     5e6:	80 91 3f 21 	lds	r24, 0x213F
     5ea:	08 95       	ret

000005ec <get_pushbutton_switch_state>:
     5ec:	80 91 3c 21 	lds	r24, 0x213C
     5f0:	08 95       	ret

000005f2 <get_pushbutton_switch_edge>:
     5f2:	80 91 3d 21 	lds	r24, 0x213D
     5f6:	08 95       	ret

000005f8 <get_toggle_switch_state>:
     5f8:	80 91 3a 21 	lds	r24, 0x213A
     5fc:	08 95       	ret

000005fe <get_toggle_switch_edge>:
     5fe:	80 91 3b 21 	lds	r24, 0x213B
     602:	08 95       	ret

00000604 <initialize_hardware>:
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	e0 e4       	ldi	r30, 0x40	; 64
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	c0 e5       	ldi	r28, 0x50	; 80
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	5b e8       	ldi	r21, 0x8B	; 139
     616:	48 e0       	ldi	r20, 0x08	; 8
     618:	a0 e5       	ldi	r26, 0x50	; 80
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	32 ec       	ldi	r19, 0xC2	; 194
     61e:	28 e1       	ldi	r18, 0x18	; 24
     620:	98 ed       	ldi	r25, 0xD8	; 216
     622:	15 c0       	rjmp	.+42     	; 0x64e <initialize_hardware+0x4a>
     624:	61 83       	std	Z+1, r22	; 0x01
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	5a 83       	std	Y+2, r21	; 0x02
     62a:	40 93 50 00 	sts	0x0050, r20
     62e:	70 91 51 00 	lds	r23, 0x0051
     632:	73 ff       	sbrs	r23, 3
     634:	fc cf       	rjmp	.-8      	; 0x62e <initialize_hardware+0x2a>
     636:	15 96       	adiw	r26, 0x05	; 5
     638:	3c 93       	st	X, r19
     63a:	15 97       	sbiw	r26, 0x05	; 5
     63c:	20 93 50 00 	sts	0x0050, r18
     640:	70 91 51 00 	lds	r23, 0x0051
     644:	74 ff       	sbrs	r23, 4
     646:	fc cf       	rjmp	.-8      	; 0x640 <initialize_hardware+0x3c>
     648:	94 bf       	out	0x34, r25	; 52
     64a:	80 93 40 00 	sts	0x0040, r24
     64e:	70 91 40 00 	lds	r23, 0x0040
     652:	74 30       	cpi	r23, 0x04	; 4
     654:	39 f7       	brne	.-50     	; 0x624 <initialize_hardware+0x20>
     656:	f8 94       	cli
     658:	a0 e6       	ldi	r26, 0x60	; 96
     65a:	b6 e0       	ldi	r27, 0x06	; 6
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	8c 93       	st	X, r24
     662:	15 97       	sbiw	r26, 0x05	; 5
     664:	90 e4       	ldi	r25, 0x40	; 64
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	9c 93       	st	X, r25
     66a:	12 97       	sbiw	r26, 0x02	; 2
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8c 93       	st	X, r24
     670:	11 97       	sbiw	r26, 0x01	; 1
     672:	e0 eb       	ldi	r30, 0xB0	; 176
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	84 83       	std	Z+4, r24	; 0x04
     67a:	90 e2       	ldi	r25, 0x20	; 32
     67c:	93 83       	std	Z+3, r25	; 0x03
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	35 83       	std	Z+5, r19	; 0x05
     682:	8f e2       	ldi	r24, 0x2F	; 47
     684:	86 83       	std	Z+6, r24	; 0x06
     686:	17 82       	std	Z+7, r1	; 0x07
     688:	80 91 a2 00 	lds	r24, 0x00A2
     68c:	87 68       	ori	r24, 0x87	; 135
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	78 94       	sei
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	d6 e0       	ldi	r29, 0x06	; 6
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 92 00 02 	sts	0x0200, r1
     6a6:	11 82       	std	Z+1, r1	; 0x01
     6a8:	92 83       	std	Z+2, r25	; 0x02
     6aa:	13 82       	std	Z+3, r1	; 0x03
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	94 83       	std	Z+4, r25	; 0x04
     6b0:	16 82       	std	Z+6, r1	; 0x06
     6b2:	80 91 00 02 	lds	r24, 0x0200
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 93 00 02 	sts	0x0200, r24
     6bc:	90 a3       	std	Z+32, r25	; 0x20
     6be:	11 a2       	std	Z+33, r1	; 0x21
     6c0:	12 a2       	std	Z+34, r1	; 0x22
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	56 e0       	ldi	r21, 0x06	; 6
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	fa 01       	movw	r30, r20
     6ca:	82 83       	std	Z+2, r24	; 0x02
     6cc:	28 e0       	ldi	r18, 0x08	; 8
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	fc 01       	movw	r30, r24
     6d4:	22 83       	std	Z+2, r18	; 0x02
     6d6:	fa 01       	movw	r30, r20
     6d8:	32 83       	std	Z+2, r19	; 0x02
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	8d 83       	std	Y+5, r24	; 0x05
     6e0:	e0 e4       	ldi	r30, 0x40	; 64
     6e2:	f6 e0       	ldi	r31, 0x06	; 6
     6e4:	88 ef       	ldi	r24, 0xF8	; 248
     6e6:	81 83       	std	Z+1, r24	; 0x01
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8c 93       	st	X, r24
     6ee:	11 97       	sbiw	r26, 0x01	; 1
     6f0:	88 e3       	ldi	r24, 0x38	; 56
     6f2:	15 96       	adiw	r26, 0x05	; 5
     6f4:	8c 93       	st	X, r24
     6f6:	15 97       	sbiw	r26, 0x05	; 5
     6f8:	90 ef       	ldi	r25, 0xF0	; 240
     6fa:	95 83       	std	Z+5, r25	; 0x05
     6fc:	16 96       	adiw	r26, 0x06	; 6
     6fe:	8c 93       	st	X, r24
     700:	16 97       	sbiw	r26, 0x06	; 6
     702:	87 e0       	ldi	r24, 0x07	; 7
     704:	16 96       	adiw	r26, 0x06	; 6
     706:	8c 93       	st	X, r24
     708:	16 97       	sbiw	r26, 0x06	; 6
     70a:	25 83       	std	Z+5, r18	; 0x05
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <read_hardware>:
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	0f 92       	push	r0
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	80 91 88 06 	lds	r24, 0x0688
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <read_hardware+0x28>
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	80 91 28 06 	lds	r24, 0x0628
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	80 fd       	sbrc	r24, 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <read_hardware+0x38>
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	01 c0       	rjmp	.+2      	; 0x74c <read_hardware+0x3a>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	c8 2e       	mov	r12, r24
     74e:	c9 2a       	or	r12, r25
     750:	80 91 28 06 	lds	r24, 0x0628
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	86 95       	lsr	r24
     75a:	80 fd       	sbrc	r24, 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <read_hardware+0x50>
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	01 c0       	rjmp	.+2      	; 0x764 <read_hardware+0x52>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c8 2a       	or	r12, r24
     766:	c0 92 45 21 	sts	0x2145, r12
     76a:	60 91 44 21 	lds	r22, 0x2144
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	d0 90 43 21 	lds	r13, 0x2143
     774:	e0 e4       	ldi	r30, 0x40	; 64
     776:	f1 e2       	ldi	r31, 0x21	; 33
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	4c 2d       	mov	r20, r12
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	b8 2e       	mov	r11, r24
     786:	8a 01       	movw	r16, r20
     788:	08 2e       	mov	r0, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <read_hardware+0x7e>
     78c:	15 95       	asr	r17
     78e:	07 95       	ror	r16
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <read_hardware+0x7a>
     794:	db 01       	movw	r26, r22
     796:	08 2e       	mov	r0, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <read_hardware+0x8c>
     79a:	b5 95       	asr	r27
     79c:	a7 95       	ror	r26
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <read_hardware+0x88>
     7a2:	0a 17       	cp	r16, r26
     7a4:	1b 07       	cpc	r17, r27
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <read_hardware+0x9e>
     7a8:	a0 81       	ld	r26, Z
     7aa:	af 5f       	subi	r26, 0xFF	; 255
     7ac:	a0 83       	st	Z, r26
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <read_hardware+0xa0>
     7b0:	10 82       	st	Z, r1
     7b2:	a0 81       	ld	r26, Z
     7b4:	a9 30       	cpi	r26, 0x09	; 9
     7b6:	60 f0       	brcs	.+24     	; 0x7d0 <read_hardware+0xbe>
     7b8:	d9 01       	movw	r26, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <read_hardware+0xae>
     7bc:	aa 0f       	add	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	ba 94       	dec	r11
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <read_hardware+0xaa>
     7c4:	ba 2f       	mov	r27, r26
     7c6:	b0 95       	com	r27
     7c8:	db 22       	and	r13, r27
     7ca:	ac 21       	and	r26, r12
     7cc:	da 2a       	or	r13, r26
     7ce:	10 82       	st	Z, r1
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	31 96       	adiw	r30, 0x01	; 1
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f6       	brne	.-86     	; 0x784 <read_hardware+0x72>
     7da:	d0 92 43 21 	sts	0x2143, r13
     7de:	c0 92 44 21 	sts	0x2144, r12
     7e2:	80 91 3a 21 	lds	r24, 0x213A
     7e6:	d0 fe       	sbrs	r13, 0
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <read_hardware+0xf0>
     7ea:	88 23       	and	r24, r24
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <read_hardware+0xe2>
     7ee:	10 92 3b 21 	sts	0x213B, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <read_hardware+0xe8>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 3b 21 	sts	0x213B, r24
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 3a 21 	sts	0x213A, r24
     800:	0a c0       	rjmp	.+20     	; 0x816 <read_hardware+0x104>
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <read_hardware+0xfc>
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	80 93 3b 21 	sts	0x213B, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <read_hardware+0x100>
     80e:	10 92 3b 21 	sts	0x213B, r1
     812:	10 92 3a 21 	sts	0x213A, r1
     816:	80 91 3c 21 	lds	r24, 0x213C
     81a:	d1 fe       	sbrs	r13, 1
     81c:	0c c0       	rjmp	.+24     	; 0x836 <read_hardware+0x124>
     81e:	88 23       	and	r24, r24
     820:	19 f0       	breq	.+6      	; 0x828 <read_hardware+0x116>
     822:	10 92 3d 21 	sts	0x213D, r1
     826:	03 c0       	rjmp	.+6      	; 0x82e <read_hardware+0x11c>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 3d 21 	sts	0x213D, r24
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 3c 21 	sts	0x213C, r24
     834:	0a c0       	rjmp	.+20     	; 0x84a <read_hardware+0x138>
     836:	88 23       	and	r24, r24
     838:	21 f0       	breq	.+8      	; 0x842 <read_hardware+0x130>
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 3d 21 	sts	0x213D, r24
     840:	02 c0       	rjmp	.+4      	; 0x846 <read_hardware+0x134>
     842:	10 92 3d 21 	sts	0x213D, r1
     846:	10 92 3c 21 	sts	0x213C, r1
     84a:	80 91 3e 21 	lds	r24, 0x213E
     84e:	d2 fe       	sbrs	r13, 2
     850:	0c c0       	rjmp	.+24     	; 0x86a <read_hardware+0x158>
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <read_hardware+0x14a>
     856:	10 92 3f 21 	sts	0x213F, r1
     85a:	03 c0       	rjmp	.+6      	; 0x862 <read_hardware+0x150>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 3f 21 	sts	0x213F, r24
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 3e 21 	sts	0x213E, r24
     868:	0a c0       	rjmp	.+20     	; 0x87e <read_hardware+0x16c>
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <read_hardware+0x164>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 3f 21 	sts	0x213F, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <read_hardware+0x168>
     876:	10 92 3f 21 	sts	0x213F, r1
     87a:	10 92 3e 21 	sts	0x213E, r1
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	62 c0       	rjmp	.+196    	; 0x94a <read_hardware+0x238>
     886:	20 91 23 02 	lds	r18, 0x0223
     88a:	21 60       	ori	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	23 a3       	std	Z+35, r18	; 0x23
     890:	20 91 21 02 	lds	r18, 0x0221
     894:	27 7c       	andi	r18, 0xC7	; 199
     896:	21 a3       	std	Z+33, r18	; 0x21
     898:	40 91 21 02 	lds	r20, 0x0221
     89c:	29 81       	ldd	r18, Y+1	; 0x01
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	2d 5f       	subi	r18, 0xFD	; 253
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	6a 95       	dec	r22
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <read_hardware+0x194>
     8ae:	42 2b       	or	r20, r18
     8b0:	41 a3       	std	Z+33, r20	; 0x21
     8b2:	20 91 20 02 	lds	r18, 0x0220
     8b6:	20 68       	ori	r18, 0x80	; 128
     8b8:	20 a3       	std	Z+32, r18	; 0x20
     8ba:	20 91 23 02 	lds	r18, 0x0223
     8be:	20 ff       	sbrs	r18, 0
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <read_hardware+0x1a8>
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	20 91 24 02 	lds	r18, 0x0224
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ea 5b       	subi	r30, 0xBA	; 186
     8d0:	fe 4d       	sbci	r31, 0xDE	; 222
     8d2:	20 83       	st	Z, r18
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	20 91 25 02 	lds	r18, 0x0225
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ea 5b       	subi	r30, 0xBA	; 186
     8e4:	fe 4d       	sbci	r31, 0xDE	; 222
     8e6:	f2 2e       	mov	r15, r18
     8e8:	ee 24       	eor	r14, r14
     8ea:	20 81       	ld	r18, Z
     8ec:	31 81       	ldd	r19, Z+1	; 0x01
     8ee:	2e 29       	or	r18, r14
     8f0:	3f 29       	or	r19, r15
     8f2:	20 83       	st	Z, r18
     8f4:	31 83       	std	Z+1, r19	; 0x01
     8f6:	e9 81       	ldd	r30, Y+1	; 0x01
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ea 5b       	subi	r30, 0xBA	; 186
     900:	fe 4d       	sbci	r31, 0xDE	; 222
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	20 3e       	cpi	r18, 0xE0	; 224
     908:	31 05       	cpc	r19, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <read_hardware+0x20c>
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ea 5b       	subi	r30, 0xBA	; 186
     916:	fe 4d       	sbci	r31, 0xDE	; 222
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	13 c0       	rjmp	.+38     	; 0x944 <read_hardware+0x232>
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	a9 81       	ldd	r26, Y+1	; 0x01
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ea 5b       	subi	r30, 0xBA	; 186
     92a:	fe 4d       	sbci	r31, 0xDE	; 222
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	aa 5b       	subi	r26, 0xBA	; 186
     934:	be 4d       	sbci	r27, 0xDE	; 222
     936:	2d 91       	ld	r18, X+
     938:	3c 91       	ld	r19, X
     93a:	11 97       	sbiw	r26, 0x01	; 1
     93c:	20 5e       	subi	r18, 0xE0	; 224
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	29 81       	ldd	r18, Y+1	; 0x01
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	29 83       	std	Y+1, r18	; 0x01
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	25 30       	cpi	r18, 0x05	; 5
     94e:	08 f4       	brcc	.+2      	; 0x952 <read_hardware+0x240>
     950:	9a cf       	rjmp	.-204    	; 0x886 <read_hardware+0x174>
     952:	80 91 28 06 	lds	r24, 0x0628
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	80 fd       	sbrc	r24, 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	60 91 28 06 	lds	r22, 0x0628
     960:	84 2f       	mov	r24, r20
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	20 91 51 21 	lds	r18, 0x2151
     968:	51 e0       	ldi	r21, 0x01	; 1
     96a:	25 27       	eor	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	82 23       	and	r24, r18
     970:	93 23       	and	r25, r19
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	59 f0       	breq	.+22     	; 0x98c <read_hardware+0x27a>
     976:	86 2f       	mov	r24, r22
     978:	86 95       	lsr	r24
     97a:	80 fd       	sbrc	r24, 0
     97c:	03 c0       	rjmp	.+6      	; 0x984 <read_hardware+0x272>
     97e:	50 93 50 21 	sts	0x2150, r21
     982:	06 c0       	rjmp	.+12     	; 0x990 <read_hardware+0x27e>
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 93 50 21 	sts	0x2150, r24
     98a:	02 c0       	rjmp	.+4      	; 0x990 <read_hardware+0x27e>
     98c:	10 92 50 21 	sts	0x2150, r1
     990:	40 93 51 21 	sts	0x2151, r20
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	08 95       	ret

000009aa <postloop_functions>:
     9aa:	08 95       	ret

000009ac <__vector_91>:
#include <stdint.h>

static Sequencer sequencer;
static MidiDevice midi_device;

ISR(USARTD1_RXC_vect){
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
    midi_device_input(&midi_device,1,&(USARTD1.DATA));
     9d2:	cb e7       	ldi	r28, 0x7B	; 123
     9d4:	d2 e2       	ldi	r29, 0x22	; 34
     9d6:	ce 01       	movw	r24, r28
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	40 eb       	ldi	r20, 0xB0	; 176
     9dc:	59 e0       	ldi	r21, 0x09	; 9
     9de:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_process(&midi_device);
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <midi_device_process>
}
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_17>:

//interrupt to start the next note
ISR(TCC0_CCB_vect){
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(&sequencer, 0);
     a30:	82 e5       	ldi	r24, 0x52	; 82
     a32:	91 e2       	ldi	r25, 0x21	; 33
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	0e 94 92 08 	call	0x1124	; 0x1124 <continue_sequencer>
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(&sequencer, 0);
     a7e:	82 e5       	ldi	r24, 0x52	; 82
     a80:	91 e2       	ldi	r25, 0x21	; 33
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 8b 0a 	call	0x1516	; 0x1516 <stop_sequencer>
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <fake_midi_noteon_input>:


void fake_midi_noteon_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <fake_midi_noteon_input+0xa>
     ab4:	0f 92       	push	r0
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	8c 01       	movw	r16, r24
     abc:	6a 83       	std	Y+2, r22	; 0x02
     abe:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteon_byte1 = 144;
     ac0:	80 e9       	ldi	r24, 0x90	; 144
     ac2:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteon_byte1);
     ac4:	c8 01       	movw	r24, r16
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	ae 01       	movw	r20, r28
     aca:	4f 5f       	subi	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     ad2:	c8 01       	movw	r24, r16
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	ae 01       	movw	r20, r28
     ad8:	4e 5f       	subi	r20, 0xFE	; 254
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     ae0:	c8 01       	movw	r24, r16
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	ae 01       	movw	r20, r28
     ae6:	4d 5f       	subi	r20, 0xFD	; 253
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_process(midi_device);
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <midi_device_process>
}
     af4:	23 96       	adiw	r28, 0x03	; 3
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <fake_midi_noteff_input>:

void fake_midi_noteff_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <fake_midi_noteff_input+0xa>
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 01       	movw	r16, r24
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteoff_byte1 = 128;
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteoff_byte1);
     b1e:	c8 01       	movw	r24, r16
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	ae 01       	movw	r20, r28
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     b2c:	c8 01       	movw	r24, r16
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	ae 01       	movw	r20, r28
     b32:	4e 5f       	subi	r20, 0xFE	; 254
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     b3a:	c8 01       	movw	r24, r16
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	ae 01       	movw	r20, r28
     b40:	4d 5f       	subi	r20, 0xFD	; 253
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <midi_device_input>
    midi_device_process(midi_device);
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <midi_device_process>
}
     b4e:	23 96       	adiw	r28, 0x03	; 3
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <main>:

int main(void) {
     b5e:	1f 93       	push	r17
    const initial_BPM = 60;
    uint8_t pitch = 100;
    
    initialize_hardware();
     b60:	0e 94 02 03 	call	0x604	; 0x604 <initialize_hardware>
    initialize_sequencer(&sequencer);
     b64:	82 e5       	ldi	r24, 0x52	; 82
     b66:	91 e2       	ldi	r25, 0x21	; 33
     b68:	0e 94 20 08 	call	0x1040	; 0x1040 <initialize_sequencer>
	initialize_serial_midi(&midi_device, &sequencer);
     b6c:	8b e7       	ldi	r24, 0x7B	; 123
     b6e:	92 e2       	ldi	r25, 0x22	; 34
     b70:	62 e5       	ldi	r22, 0x52	; 82
     b72:	71 e2       	ldi	r23, 0x21	; 33
     b74:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <initialize_serial_midi>
    initialize_beat_clock(initial_BPM);
     b78:	8c e3       	ldi	r24, 0x3C	; 60
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
    set_seven_segment_LEDs(get_BPM());
     b80:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     b84:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>
    midi_device_process(midi_device);
}

int main(void) {
    const initial_BPM = 60;
    uint8_t pitch = 100;
     b88:	14 e6       	ldi	r17, 0x64	; 100
	initialize_serial_midi(&midi_device, &sequencer);
    initialize_beat_clock(initial_BPM);
    set_seven_segment_LEDs(get_BPM());

    while(1){
        read_hardware();
     b8a:	0e 94 89 03 	call	0x712	; 0x712 <read_hardware>
        
        if (get_encoder() == TURN_CW)
     b8e:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	11 f4       	brne	.+4      	; 0xb9a <main+0x3c>
            pitch++;
     b96:	1f 5f       	subi	r17, 0xFF	; 255
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <main+0x46>
        else if (get_encoder() == TURN_CCW)
     b9a:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	09 f4       	brne	.+2      	; 0xba4 <main+0x46>
            pitch -= 1;    
     ba2:	11 50       	subi	r17, 0x01	; 1
        
        set_seven_segment_LEDs((uint16_t) pitch);
     ba4:	81 2f       	mov	r24, r17
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>
        
        if (get_encoder_switch_edge() == EDGE_RISE)
     bac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_encoder_switch_edge>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	31 f4       	brne	.+12     	; 0xbc0 <main+0x62>
            fake_midi_noteon_input(&midi_device, pitch,100);
     bb4:	8b e7       	ldi	r24, 0x7B	; 123
     bb6:	92 e2       	ldi	r25, 0x22	; 34
     bb8:	61 2f       	mov	r22, r17
     bba:	44 e6       	ldi	r20, 0x64	; 100
     bbc:	0e 94 55 05 	call	0xaaa	; 0xaaa <fake_midi_noteon_input>
        
        if (get_pushbutton_switch_edge() == EDGE_RISE)
     bc0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <get_pushbutton_switch_edge>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f7       	brne	.-62     	; 0xb8a <main+0x2c>
            fake_midi_noteff_input(&midi_device, pitch,100);
     bc8:	8b e7       	ldi	r24, 0x7B	; 123
     bca:	92 e2       	ldi	r25, 0x22	; 34
     bcc:	61 2f       	mov	r22, r17
     bce:	44 e6       	ldi	r20, 0x64	; 100
     bd0:	0e 94 82 05 	call	0xb04	; 0xb04 <fake_midi_noteff_input>
     bd4:	da cf       	rjmp	.-76     	; 0xb8a <main+0x2c>

00000bd6 <initialize_note_list>:
     bd6:	fc 01       	movw	r30, r24
     bd8:	10 82       	st	Z, r1
     bda:	11 82       	std	Z+1, r1	; 0x01
     bdc:	12 82       	std	Z+2, r1	; 0x02
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	14 82       	std	Z+4, r1	; 0x04
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	16 82       	std	Z+6, r1	; 0x06
     be6:	17 82       	std	Z+7, r1	; 0x07
     be8:	10 86       	std	Z+8, r1	; 0x08
     bea:	80 e1       	ldi	r24, 0x10	; 16
     bec:	11 86       	std	Z+9, r1	; 0x09
     bee:	12 86       	std	Z+10, r1	; 0x0a
     bf0:	13 86       	std	Z+11, r1	; 0x0b
     bf2:	14 86       	std	Z+12, r1	; 0x0c
     bf4:	15 86       	std	Z+13, r1	; 0x0d
     bf6:	16 86       	std	Z+14, r1	; 0x0e
     bf8:	17 86       	std	Z+15, r1	; 0x0f
     bfa:	10 8a       	std	Z+16, r1	; 0x10
     bfc:	11 8a       	std	Z+17, r1	; 0x11
     bfe:	12 8a       	std	Z+18, r1	; 0x12
     c00:	13 8a       	std	Z+19, r1	; 0x13
     c02:	81 50       	subi	r24, 0x01	; 1
     c04:	3b 96       	adiw	r30, 0x0b	; 11
     c06:	88 23       	and	r24, r24
     c08:	89 f7       	brne	.-30     	; 0xbec <initialize_note_list+0x16>
     c0a:	08 95       	ret

00000c0c <remove_note_by_pitch>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	fc 01       	movw	r30, r24
     c12:	a1 81       	ldd	r26, Z+1	; 0x01
     c14:	b2 81       	ldd	r27, Z+2	; 0x02
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <remove_note_by_pitch+0x1a>
     c18:	8c 91       	ld	r24, X
     c1a:	86 17       	cp	r24, r22
     c1c:	38 f4       	brcc	.+14     	; 0xc2c <remove_note_by_pitch+0x20>
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	0d 90       	ld	r0, X+
     c22:	bc 91       	ld	r27, X
     c24:	a0 2d       	mov	r26, r0
     c26:	10 97       	sbiw	r26, 0x00	; 0
     c28:	b9 f7       	brne	.-18     	; 0xc18 <remove_note_by_pitch+0xc>
     c2a:	5d c0       	rjmp	.+186    	; 0xce6 <remove_note_by_pitch+0xda>
     c2c:	86 17       	cp	r24, r22
     c2e:	09 f0       	breq	.+2      	; 0xc32 <remove_note_by_pitch+0x26>
     c30:	5a c0       	rjmp	.+180    	; 0xce6 <remove_note_by_pitch+0xda>
     c32:	80 81       	ld	r24, Z
     c34:	81 50       	subi	r24, 0x01	; 1
     c36:	80 83       	st	Z, r24
     c38:	88 23       	and	r24, r24
     c3a:	21 f4       	brne	.+8      	; 0xc44 <remove_note_by_pitch+0x38>
     c3c:	cf 01       	movw	r24, r30
     c3e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <initialize_note_list>
     c42:	4f c0       	rjmp	.+158    	; 0xce2 <remove_note_by_pitch+0xd6>
     c44:	15 96       	adiw	r26, 0x05	; 5
     c46:	2d 91       	ld	r18, X+
     c48:	3c 91       	ld	r19, X
     c4a:	16 97       	sbiw	r26, 0x06	; 6
     c4c:	13 96       	adiw	r26, 0x03	; 3
     c4e:	8d 91       	ld	r24, X+
     c50:	9c 91       	ld	r25, X
     c52:	14 97       	sbiw	r26, 0x04	; 4
     c54:	21 15       	cp	r18, r1
     c56:	31 05       	cpc	r19, r1
     c58:	21 f0       	breq	.+8      	; 0xc62 <remove_note_by_pitch+0x56>
     c5a:	e9 01       	movw	r28, r18
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <remove_note_by_pitch+0x5a>
     c62:	81 83       	std	Z+1, r24	; 0x01
     c64:	92 83       	std	Z+2, r25	; 0x02
     c66:	13 96       	adiw	r26, 0x03	; 3
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	14 97       	sbiw	r26, 0x04	; 4
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	21 f0       	breq	.+8      	; 0xc7a <remove_note_by_pitch+0x6e>
     c72:	ec 01       	movw	r28, r24
     c74:	2d 83       	std	Y+5, r18	; 0x05
     c76:	3e 83       	std	Y+6, r19	; 0x06
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <remove_note_by_pitch+0x72>
     c7a:	23 83       	std	Z+3, r18	; 0x03
     c7c:	34 83       	std	Z+4, r19	; 0x04
     c7e:	19 96       	adiw	r26, 0x09	; 9
     c80:	cd 91       	ld	r28, X+
     c82:	dc 91       	ld	r29, X
     c84:	1a 97       	sbiw	r26, 0x0a	; 10
     c86:	17 96       	adiw	r26, 0x07	; 7
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	18 97       	sbiw	r26, 0x08	; 8
     c8e:	20 97       	sbiw	r28, 0x00	; 0
     c90:	19 f0       	breq	.+6      	; 0xc98 <remove_note_by_pitch+0x8c>
     c92:	8f 83       	std	Y+7, r24	; 0x07
     c94:	98 87       	std	Y+8, r25	; 0x08
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <remove_note_by_pitch+0x90>
     c98:	85 83       	std	Z+5, r24	; 0x05
     c9a:	96 83       	std	Z+6, r25	; 0x06
     c9c:	17 96       	adiw	r26, 0x07	; 7
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	18 97       	sbiw	r26, 0x08	; 8
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <remove_note_by_pitch+0xa4>
     ca8:	fc 01       	movw	r30, r24
     caa:	c1 87       	std	Z+9, r28	; 0x09
     cac:	d2 87       	std	Z+10, r29	; 0x0a
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <remove_note_by_pitch+0xa8>
     cb0:	c7 83       	std	Z+7, r28	; 0x07
     cb2:	d0 87       	std	Z+8, r29	; 0x08
     cb4:	1c 92       	st	X, r1
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	1c 92       	st	X, r1
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	1c 92       	st	X, r1
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	1d 92       	st	X+, r1
     cc6:	1c 92       	st	X, r1
     cc8:	14 97       	sbiw	r26, 0x04	; 4
     cca:	15 96       	adiw	r26, 0x05	; 5
     ccc:	1d 92       	st	X+, r1
     cce:	1c 92       	st	X, r1
     cd0:	16 97       	sbiw	r26, 0x06	; 6
     cd2:	17 96       	adiw	r26, 0x07	; 7
     cd4:	1d 92       	st	X+, r1
     cd6:	1c 92       	st	X, r1
     cd8:	18 97       	sbiw	r26, 0x08	; 8
     cda:	19 96       	adiw	r26, 0x09	; 9
     cdc:	1d 92       	st	X+, r1
     cde:	1c 92       	st	X, r1
     ce0:	1a 97       	sbiw	r26, 0x0a	; 10
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <remove_note_by_pitch+0xdc>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <insert_note>:
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	fc 01       	movw	r30, r24
     cf8:	a1 81       	ldd	r26, Z+1	; 0x01
     cfa:	b2 81       	ldd	r27, Z+2	; 0x02
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <insert_note+0x1e>
     cfe:	8c 91       	ld	r24, X
     d00:	86 17       	cp	r24, r22
     d02:	30 f4       	brcc	.+12     	; 0xd10 <insert_note+0x22>
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	0d 90       	ld	r0, X+
     d08:	bc 91       	ld	r27, X
     d0a:	a0 2d       	mov	r26, r0
     d0c:	10 97       	sbiw	r26, 0x00	; 0
     d0e:	b9 f7       	brne	.-18     	; 0xcfe <insert_note+0x10>
     d10:	8c 91       	ld	r24, X
     d12:	86 17       	cp	r24, r22
     d14:	09 f0       	breq	.+2      	; 0xd18 <insert_note+0x2a>
     d16:	48 c0       	rjmp	.+144    	; 0xda8 <insert_note+0xba>
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	4c 93       	st	X, r20
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	87 81       	ldd	r24, Z+7	; 0x07
     d20:	90 85       	ldd	r25, Z+8	; 0x08
     d22:	8a 17       	cp	r24, r26
     d24:	9b 07       	cpc	r25, r27
     d26:	09 f4       	brne	.+2      	; 0xd2a <insert_note+0x3c>
     d28:	d0 c0       	rjmp	.+416    	; 0xeca <insert_note+0x1dc>
     d2a:	85 81       	ldd	r24, Z+5	; 0x05
     d2c:	96 81       	ldd	r25, Z+6	; 0x06
     d2e:	8a 17       	cp	r24, r26
     d30:	9b 07       	cpc	r25, r27
     d32:	49 f4       	brne	.+18     	; 0xd46 <insert_note+0x58>
     d34:	17 96       	adiw	r26, 0x07	; 7
     d36:	cd 91       	ld	r28, X+
     d38:	dc 91       	ld	r29, X
     d3a:	18 97       	sbiw	r26, 0x08	; 8
     d3c:	c5 83       	std	Z+5, r28	; 0x05
     d3e:	d6 83       	std	Z+6, r29	; 0x06
     d40:	19 86       	std	Y+9, r1	; 0x09
     d42:	1a 86       	std	Y+10, r1	; 0x0a
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <insert_note+0x7c>
     d46:	19 96       	adiw	r26, 0x09	; 9
     d48:	2d 91       	ld	r18, X+
     d4a:	3c 91       	ld	r19, X
     d4c:	1a 97       	sbiw	r26, 0x0a	; 10
     d4e:	17 96       	adiw	r26, 0x07	; 7
     d50:	8d 91       	ld	r24, X+
     d52:	9c 91       	ld	r25, X
     d54:	18 97       	sbiw	r26, 0x08	; 8
     d56:	e9 01       	movw	r28, r18
     d58:	8f 83       	std	Y+7, r24	; 0x07
     d5a:	98 87       	std	Y+8, r25	; 0x08
     d5c:	17 96       	adiw	r26, 0x07	; 7
     d5e:	8d 91       	ld	r24, X+
     d60:	9c 91       	ld	r25, X
     d62:	18 97       	sbiw	r26, 0x08	; 8
     d64:	ec 01       	movw	r28, r24
     d66:	29 87       	std	Y+9, r18	; 0x09
     d68:	3a 87       	std	Y+10, r19	; 0x0a
     d6a:	80 81       	ld	r24, Z
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	69 f4       	brne	.+26     	; 0xd8a <insert_note+0x9c>
     d70:	a7 83       	std	Z+7, r26	; 0x07
     d72:	b0 87       	std	Z+8, r27	; 0x08
     d74:	a5 83       	std	Z+5, r26	; 0x05
     d76:	b6 83       	std	Z+6, r27	; 0x06
     d78:	17 96       	adiw	r26, 0x07	; 7
     d7a:	1d 92       	st	X+, r1
     d7c:	1c 92       	st	X, r1
     d7e:	18 97       	sbiw	r26, 0x08	; 8
     d80:	19 96       	adiw	r26, 0x09	; 9
     d82:	1d 92       	st	X+, r1
     d84:	1c 92       	st	X, r1
     d86:	1a 97       	sbiw	r26, 0x0a	; 10
     d88:	a3 c0       	rjmp	.+326    	; 0xed0 <insert_note+0x1e2>
     d8a:	17 96       	adiw	r26, 0x07	; 7
     d8c:	1d 92       	st	X+, r1
     d8e:	1c 92       	st	X, r1
     d90:	18 97       	sbiw	r26, 0x08	; 8
     d92:	c7 81       	ldd	r28, Z+7	; 0x07
     d94:	d0 85       	ldd	r29, Z+8	; 0x08
     d96:	19 96       	adiw	r26, 0x09	; 9
     d98:	cd 93       	st	X+, r28
     d9a:	dc 93       	st	X, r29
     d9c:	1a 97       	sbiw	r26, 0x0a	; 10
     d9e:	af 83       	std	Y+7, r26	; 0x07
     da0:	b8 87       	std	Y+8, r27	; 0x08
     da2:	a7 83       	std	Z+7, r26	; 0x07
     da4:	b0 87       	std	Z+8, r27	; 0x08
     da6:	91 c0       	rjmp	.+290    	; 0xeca <insert_note+0x1dc>
     da8:	ef 01       	movw	r28, r30
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	28 2f       	mov	r18, r24
     db0:	3b 85       	ldd	r19, Y+11	; 0x0b
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	33 23       	and	r19, r19
     db6:	e1 f4       	brne	.+56     	; 0xdf0 <insert_note+0x102>
     db8:	0b e0       	ldi	r16, 0x0B	; 11
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	80 9f       	mul	r24, r16
     dbe:	e0 01       	movw	r28, r0
     dc0:	81 9f       	mul	r24, r17
     dc2:	d0 0d       	add	r29, r0
     dc4:	90 9f       	mul	r25, r16
     dc6:	d0 0d       	add	r29, r0
     dc8:	11 24       	eor	r1, r1
     dca:	ce 0f       	add	r28, r30
     dcc:	df 1f       	adc	r29, r31
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	88 83       	st	Y, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	20 9f       	mul	r18, r16
     dd6:	e0 01       	movw	r28, r0
     dd8:	21 9f       	mul	r18, r17
     dda:	d0 0d       	add	r29, r0
     ddc:	30 9f       	mul	r19, r16
     dde:	d0 0d       	add	r29, r0
     de0:	11 24       	eor	r1, r1
     de2:	ce 01       	movw	r24, r28
     de4:	09 96       	adiw	r24, 0x09	; 9
     de6:	8e 0f       	add	r24, r30
     de8:	9f 1f       	adc	r25, r31
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	31 f4       	brne	.+12     	; 0xdfa <insert_note+0x10c>
     dee:	6f c0       	rjmp	.+222    	; 0xece <insert_note+0x1e0>
     df0:	2b 96       	adiw	r28, 0x0b	; 11
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	91 05       	cpc	r25, r1
     df6:	d9 f6       	brne	.-74     	; 0xdae <insert_note+0xc0>
     df8:	6a c0       	rjmp	.+212    	; 0xece <insert_note+0x1e0>
     dfa:	50 81       	ld	r21, Z
     dfc:	5f 5f       	subi	r21, 0xFF	; 255
     dfe:	50 83       	st	Z, r21
     e00:	ce 0f       	add	r28, r30
     e02:	df 1f       	adc	r29, r31
     e04:	69 87       	std	Y+9, r22	; 0x09
     e06:	4a 87       	std	Y+10, r20	; 0x0a
     e08:	51 30       	cpi	r21, 0x01	; 1
     e0a:	39 f4       	brne	.+14     	; 0xe1a <insert_note+0x12c>
     e0c:	1c 86       	std	Y+12, r1	; 0x0c
     e0e:	1d 86       	std	Y+13, r1	; 0x0d
     e10:	1e 86       	std	Y+14, r1	; 0x0e
     e12:	1f 86       	std	Y+15, r1	; 0x0f
     e14:	81 83       	std	Z+1, r24	; 0x01
     e16:	92 83       	std	Z+2, r25	; 0x02
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <insert_note+0x144>
     e1a:	10 97       	sbiw	r26, 0x00	; 0
     e1c:	69 f4       	brne	.+26     	; 0xe38 <insert_note+0x14a>
     e1e:	a3 81       	ldd	r26, Z+3	; 0x03
     e20:	b4 81       	ldd	r27, Z+4	; 0x04
     e22:	ae 87       	std	Y+14, r26	; 0x0e
     e24:	bf 87       	std	Y+15, r27	; 0x0f
     e26:	1c 86       	std	Y+12, r1	; 0x0c
     e28:	1d 86       	std	Y+13, r1	; 0x0d
     e2a:	13 96       	adiw	r26, 0x03	; 3
     e2c:	8d 93       	st	X+, r24
     e2e:	9c 93       	st	X, r25
     e30:	14 97       	sbiw	r26, 0x04	; 4
     e32:	83 83       	std	Z+3, r24	; 0x03
     e34:	94 83       	std	Z+4, r25	; 0x04
     e36:	51 c0       	rjmp	.+162    	; 0xeda <insert_note+0x1ec>
     e38:	ac 87       	std	Y+12, r26	; 0x0c
     e3a:	bd 87       	std	Y+13, r27	; 0x0d
     e3c:	15 96       	adiw	r26, 0x05	; 5
     e3e:	4d 91       	ld	r20, X+
     e40:	5c 91       	ld	r21, X
     e42:	16 97       	sbiw	r26, 0x06	; 6
     e44:	4e 87       	std	Y+14, r20	; 0x0e
     e46:	5f 87       	std	Y+15, r21	; 0x0f
     e48:	15 96       	adiw	r26, 0x05	; 5
     e4a:	8d 93       	st	X+, r24
     e4c:	9c 93       	st	X, r25
     e4e:	16 97       	sbiw	r26, 0x06	; 6
     e50:	ae 85       	ldd	r26, Y+14	; 0x0e
     e52:	bf 85       	ldd	r27, Y+15	; 0x0f
     e54:	10 97       	sbiw	r26, 0x00	; 0
     e56:	19 f4       	brne	.+6      	; 0xe5e <insert_note+0x170>
     e58:	81 83       	std	Z+1, r24	; 0x01
     e5a:	92 83       	std	Z+2, r25	; 0x02
     e5c:	3e c0       	rjmp	.+124    	; 0xeda <insert_note+0x1ec>
     e5e:	13 96       	adiw	r26, 0x03	; 3
     e60:	8d 93       	st	X+, r24
     e62:	9c 93       	st	X, r25
     e64:	14 97       	sbiw	r26, 0x04	; 4
     e66:	39 c0       	rjmp	.+114    	; 0xeda <insert_note+0x1ec>
     e68:	87 83       	std	Z+7, r24	; 0x07
     e6a:	90 87       	std	Z+8, r25	; 0x08
     e6c:	85 83       	std	Z+5, r24	; 0x05
     e6e:	96 83       	std	Z+6, r25	; 0x06
     e70:	8b e0       	ldi	r24, 0x0B	; 11
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	28 9f       	mul	r18, r24
     e76:	d0 01       	movw	r26, r0
     e78:	29 9f       	mul	r18, r25
     e7a:	b0 0d       	add	r27, r0
     e7c:	38 9f       	mul	r19, r24
     e7e:	b0 0d       	add	r27, r0
     e80:	11 24       	eor	r1, r1
     e82:	ae 0f       	add	r26, r30
     e84:	bf 1f       	adc	r27, r31
     e86:	50 96       	adiw	r26, 0x10	; 16
     e88:	1d 92       	st	X+, r1
     e8a:	1c 92       	st	X, r1
     e8c:	51 97       	sbiw	r26, 0x11	; 17
     e8e:	52 96       	adiw	r26, 0x12	; 18
     e90:	1d 92       	st	X+, r1
     e92:	1c 92       	st	X, r1
     e94:	53 97       	sbiw	r26, 0x13	; 19
     e96:	19 c0       	rjmp	.+50     	; 0xeca <insert_note+0x1dc>
     e98:	4b e0       	ldi	r20, 0x0B	; 11
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	24 9f       	mul	r18, r20
     e9e:	d0 01       	movw	r26, r0
     ea0:	25 9f       	mul	r18, r21
     ea2:	b0 0d       	add	r27, r0
     ea4:	34 9f       	mul	r19, r20
     ea6:	b0 0d       	add	r27, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ae 0f       	add	r26, r30
     eac:	bf 1f       	adc	r27, r31
     eae:	50 96       	adiw	r26, 0x10	; 16
     eb0:	1d 92       	st	X+, r1
     eb2:	1c 92       	st	X, r1
     eb4:	51 97       	sbiw	r26, 0x11	; 17
     eb6:	c7 81       	ldd	r28, Z+7	; 0x07
     eb8:	d0 85       	ldd	r29, Z+8	; 0x08
     eba:	52 96       	adiw	r26, 0x12	; 18
     ebc:	cd 93       	st	X+, r28
     ebe:	dc 93       	st	X, r29
     ec0:	53 97       	sbiw	r26, 0x13	; 19
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	98 87       	std	Y+8, r25	; 0x08
     ec6:	87 83       	std	Z+7, r24	; 0x07
     ec8:	90 87       	std	Z+8, r25	; 0x08
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <insert_note+0x1e2>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret
     eda:	40 81       	ld	r20, Z
     edc:	41 30       	cpi	r20, 0x01	; 1
     ede:	e1 f6       	brne	.-72     	; 0xe98 <insert_note+0x1aa>
     ee0:	c3 cf       	rjmp	.-122    	; 0xe68 <insert_note+0x17a>

00000ee2 <calculate_start_time_increment>:
#include "hardware.h"

#include <avr/interrupt.h>
#include <avr/io.h>

static void calculate_start_time_increment(Sequencer* sequencer){
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <calculate_start_time_increment+0xa>
     eec:	00 d0       	rcall	.+0      	; 0xeee <calculate_start_time_increment+0xc>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
     ef4:	80 91 28 08 	lds	r24, 0x0828
     ef8:	90 91 29 08 	lds	r25, 0x0829
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	ab 83       	std	Y+3, r26	; 0x03
     f06:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
     f08:	f8 01       	movw	r30, r16
     f0a:	87 85       	ldd	r24, Z+15	; 0x0f
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	89 f1       	breq	.+98     	; 0xf72 <calculate_start_time_increment+0x90>
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	30 f4       	brcc	.+12     	; 0xf20 <calculate_start_time_increment+0x3e>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	69 f0       	breq	.+26     	; 0xf32 <calculate_start_time_increment+0x50>
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	09 f0       	breq	.+2      	; 0xf1e <calculate_start_time_increment+0x3c>
     f1c:	6f c0       	rjmp	.+222    	; 0xffc <calculate_start_time_increment+0x11a>
     f1e:	1c c0       	rjmp	.+56     	; 0xf58 <calculate_start_time_increment+0x76>
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	09 f4       	brne	.+2      	; 0xf26 <calculate_start_time_increment+0x44>
     f24:	4d c0       	rjmp	.+154    	; 0xfc0 <calculate_start_time_increment+0xde>
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	68 f1       	brcs	.+90     	; 0xf84 <calculate_start_time_increment+0xa2>
     f2a:	86 30       	cpi	r24, 0x06	; 6
     f2c:	09 f0       	breq	.+2      	; 0xf30 <calculate_start_time_increment+0x4e>
     f2e:	66 c0       	rjmp	.+204    	; 0xffc <calculate_start_time_increment+0x11a>
     f30:	56 c0       	rjmp	.+172    	; 0xfde <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1: new_start_time_increment *= 3;
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	3a 81       	ldd	r19, Y+2	; 0x02
     f36:	4b 81       	ldd	r20, Y+3	; 0x03
     f38:	5c 81       	ldd	r21, Y+4	; 0x04
     f3a:	da 01       	movw	r26, r20
     f3c:	c9 01       	movw	r24, r18
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	82 0f       	add	r24, r18
     f48:	93 1f       	adc	r25, r19
     f4a:	a4 1f       	adc	r26, r20
     f4c:	b5 1f       	adc	r27, r21
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	ab 83       	std	Y+3, r26	; 0x03
     f54:	bc 83       	std	Y+4, r27	; 0x04
     f56:	43 c0       	rjmp	.+134    	; 0xfde <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	ab 81       	ldd	r26, Y+3	; 0x03
     f5e:	bc 81       	ldd	r27, Y+4	; 0x04
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	ab 83       	std	Y+3, r26	; 0x03
     f6e:	bc 83       	std	Y+4, r27	; 0x04
     f70:	27 c0       	rjmp	.+78     	; 0xfc0 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	ab 81       	ldd	r26, Y+3	; 0x03
     f78:	bc 81       	ldd	r27, Y+4	; 0x04
     f7a:	b6 95       	lsr	r27
     f7c:	a7 95       	ror	r26
     f7e:	97 95       	ror	r25
     f80:	87 95       	ror	r24
     f82:	38 c0       	rjmp	.+112    	; 0xff4 <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
     f84:	29 81       	ldd	r18, Y+1	; 0x01
     f86:	3a 81       	ldd	r19, Y+2	; 0x02
     f88:	4b 81       	ldd	r20, Y+3	; 0x03
     f8a:	5c 81       	ldd	r21, Y+4	; 0x04
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	aa 1f       	adc	r26, r26
     f96:	bb 1f       	adc	r27, r27
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	a4 1f       	adc	r26, r20
     f9e:	b5 1f       	adc	r27, r21
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	ab 83       	std	Y+3, r26	; 0x03
     fa6:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	ab 81       	ldd	r26, Y+3	; 0x03
     fae:	bc 81       	ldd	r27, Y+4	; 0x04
     fb0:	33 e0       	ldi	r19, 0x03	; 3
     fb2:	b6 95       	lsr	r27
     fb4:	a7 95       	ror	r26
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	3a 95       	dec	r19
     fbc:	d1 f7       	brne	.-12     	; 0xfb2 <calculate_start_time_increment+0xd0>
     fbe:	1a c0       	rjmp	.+52     	; 0xff4 <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	7a 81       	ldd	r23, Y+2	; 0x02
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	23 e0       	ldi	r18, 0x03	; 3
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
     fd4:	29 83       	std	Y+1, r18	; 0x01
     fd6:	3a 83       	std	Y+2, r19	; 0x02
     fd8:	4b 83       	std	Y+3, r20	; 0x03
     fda:	5c 83       	std	Y+4, r21	; 0x04
                break;
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	ab 81       	ldd	r26, Y+3	; 0x03
     fe4:	bc 81       	ldd	r27, Y+4	; 0x04
     fe6:	22 e0       	ldi	r18, 0x02	; 2
     fe8:	b6 95       	lsr	r27
     fea:	a7 95       	ror	r26
     fec:	97 95       	ror	r25
     fee:	87 95       	ror	r24
     ff0:	2a 95       	dec	r18
     ff2:	d1 f7       	brne	.-12     	; 0xfe8 <calculate_start_time_increment+0x106>
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	ab 83       	std	Y+3, r26	; 0x03
     ffa:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
     ffc:	69 81       	ldd	r22, Y+1	; 0x01
     ffe:	7a 81       	ldd	r23, Y+2	; 0x02
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	f8 01       	movw	r30, r16
    1006:	27 81       	ldd	r18, Z+7	; 0x07
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	44 27       	eor	r20, r20
    1010:	37 fd       	sbrc	r19, 7
    1012:	40 95       	com	r20
    1014:	54 2f       	mov	r21, r20
    1016:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
    101a:	29 83       	std	Y+1, r18	; 0x01
    101c:	3a 83       	std	Y+2, r19	; 0x02
    101e:	4b 83       	std	Y+3, r20	; 0x03
    1020:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	ab 81       	ldd	r26, Y+3	; 0x03
    1028:	bc 81       	ldd	r27, Y+4	; 0x04
    102a:	f8 01       	movw	r30, r16
    102c:	81 87       	std	Z+9, r24	; 0x09
    102e:	92 87       	std	Z+10, r25	; 0x0a
}
    1030:	24 96       	adiw	r28, 0x04	; 4
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <initialize_sequencer+0xa>
    104a:	00 d0       	rcall	.+0      	; 0x104c <initialize_sequencer+0xc>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	8c 01       	movw	r16, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    1052:	e0 e0       	ldi	r30, 0x00	; 0
    1054:	f8 e0       	ldi	r31, 0x08	; 8
    1056:	80 91 01 08 	lds	r24, 0x0801
    105a:	8f 7d       	andi	r24, 0xDF	; 223
    105c:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    105e:	80 91 01 08 	lds	r24, 0x0801
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    1066:	80 91 07 08 	lds	r24, 0x0807
    106a:	8f 7c       	andi	r24, 0xCF	; 207
    106c:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    106e:	80 91 07 08 	lds	r24, 0x0807
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    1076:	80 91 07 08 	lds	r24, 0x0807
    107a:	83 7f       	andi	r24, 0xF3	; 243
    107c:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    107e:	80 91 07 08 	lds	r24, 0x0807
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    1086:	c8 01       	movw	r24, r16
    1088:	80 59       	subi	r24, 0x90	; 144
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    1090:	f8 01       	movw	r30, r16
    1092:	70 96       	adiw	r30, 0x10	; 16
    1094:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    1096:	11 92       	st	Z+, r1
    1098:	11 92       	st	Z+, r1
    109a:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    109c:	e1 f7       	brne	.-8      	; 0x1096 <initialize_sequencer+0x56>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    109e:	f8 01       	movw	r30, r16
    10a0:	13 82       	std	Z+3, r1	; 0x03
    sequencer->octave_index = 0;
    10a2:	15 82       	std	Z+5, r1	; 0x05
    sequencer->repeat_index = 0;
    10a4:	14 82       	std	Z+4, r1	; 0x04
    sequencer->note_max = 0;
    10a6:	16 82       	std	Z+6, r1	; 0x06
    sequencer->repeat_max = 0;
    10a8:	17 82       	std	Z+7, r1	; 0x07
    sequencer->octave_max = 0;
    10aa:	10 86       	std	Z+8, r1	; 0x08
    sequencer->start_time_increment = 0;
    10ac:	11 86       	std	Z+9, r1	; 0x09
    10ae:	12 86       	std	Z+10, r1	; 0x0a
    sequencer->stop_time_increment = 0;
    10b0:	13 86       	std	Z+11, r1	; 0x0b
    10b2:	14 86       	std	Z+12, r1	; 0x0c
    sequencer->pattern = 0;
    10b4:	15 86       	std	Z+13, r1	; 0x0d
    sequencer->duration = 0;
    10b6:	16 86       	std	Z+14, r1	; 0x0e
    sequencer->division = 0;
    10b8:	17 86       	std	Z+15, r1	; 0x0f
    sequencer->play_status = 0;
    10ba:	11 82       	std	Z+1, r1	; 0x01
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->rebuild_play_list = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	82 83       	std	Z+2, r24	; 0x02
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    10c0:	c8 01       	movw	r24, r16
    10c2:	0e 94 71 07 	call	0xee2	; 0xee2 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    10c6:	f8 01       	movw	r30, r16
    10c8:	66 85       	ldd	r22, Z+14	; 0x0e
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	21 85       	ldd	r18, Z+9	; 0x09
    10d2:	32 85       	ldd	r19, Z+10	; 0x0a
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__mulsi3>
    10dc:	69 83       	std	Y+1, r22	; 0x01
    10de:	7a 83       	std	Y+2, r23	; 0x02
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    10e4:	69 81       	ldd	r22, Y+1	; 0x01
    10e6:	7a 81       	ldd	r23, Y+2	; 0x02
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
    10f8:	29 83       	std	Y+1, r18	; 0x01
    10fa:	3a 83       	std	Y+2, r19	; 0x02
    10fc:	4b 83       	std	Y+3, r20	; 0x03
    10fe:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	ab 81       	ldd	r26, Y+3	; 0x03
    1106:	bc 81       	ldd	r27, Y+4	; 0x04
    1108:	f8 01       	movw	r30, r16
    110a:	83 87       	std	Z+11, r24	; 0x0b
    110c:	94 87       	std	Z+12, r25	; 0x0c
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    110e:	24 96       	adiw	r28, 0x04	; 4
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <set_rebuild_play_list>:

void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    111e:	fc 01       	movw	r30, r24
    1120:	62 83       	std	Z+2, r22	; 0x02
}
    1122:	08 95       	ret

00001124 <continue_sequencer>:
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	61 97       	sbiw	r28, 0x11	; 17
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	8c 01       	movw	r16, r24
    1144:	d6 2e       	mov	r13, r22
	uint16_t final_pitch;
	uint16_t final_velocity;

    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f8 e0       	ldi	r31, 0x08	; 8
    114a:	80 91 01 08 	lds	r24, 0x0801
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    1152:	80 91 01 08 	lds	r24, 0x0801
    1156:	8f 7b       	andi	r24, 0xBF	; 191
    1158:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    115a:	80 91 0c 08 	lds	r24, 0x080C
    115e:	80 62       	ori	r24, 0x20	; 32
    1160:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1162:	80 91 0c 08 	lds	r24, 0x080C
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    116a:	f8 01       	movw	r30, r16
    116c:	e0 59       	subi	r30, 0x90	; 144
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <continue_sequencer+0x54>
    1176:	c1 c1       	rjmp	.+898    	; 0x14fa <continue_sequencer+0x3d6>
        return;
    
    
    current_time = (uint32_t) TCC0.CNT;
    1178:	80 91 20 08 	lds	r24, 0x0820
    117c:	90 91 21 08 	lds	r25, 0x0821
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	ab 83       	std	Y+3, r26	; 0x03
    118a:	bc 83       	std	Y+4, r27	; 0x04
	
	
    
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    118c:	d8 01       	movw	r26, r16
    118e:	11 96       	adiw	r26, 0x01	; 1
    1190:	8c 91       	ld	r24, X
    1192:	11 97       	sbiw	r26, 0x01	; 1
    1194:	88 23       	and	r24, r24
    1196:	61 f1       	breq	.+88     	; 0x11f0 <continue_sequencer+0xcc>
		//calculate the pitch and velocity to play
    	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1198:	13 96       	adiw	r26, 0x03	; 3
    119a:	ec 91       	ld	r30, X
    119c:	13 97       	sbiw	r26, 0x03	; 3
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	38 96       	adiw	r30, 0x08	; 8
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	e0 0f       	add	r30, r16
    11a8:	f1 1f       	adc	r31, r17
    11aa:	01 90       	ld	r0, Z+
    11ac:	f0 81       	ld	r31, Z
    11ae:	e0 2d       	mov	r30, r0
    11b0:	15 96       	adiw	r26, 0x05	; 5
    11b2:	9c 91       	ld	r25, X
    11b4:	15 97       	sbiw	r26, 0x05	; 5
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	98 9f       	mul	r25, r24
    11ba:	70 01       	movw	r14, r0
    11bc:	11 24       	eor	r1, r1
    11be:	80 81       	ld	r24, Z
    11c0:	e8 0e       	add	r14, r24
    11c2:	f1 1c       	adc	r15, r1
    	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    11c4:	21 81       	ldd	r18, Z+1	; 0x01
    	while (final_pitch > 255)
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <continue_sequencer+0xac>
	        final_pitch -= 12;
    11c8:	e4 ef       	ldi	r30, 0xF4	; 244
    11ca:	ff ef       	ldi	r31, 0xFF	; 255
    11cc:	ee 0e       	add	r14, r30
    11ce:	ff 1e       	adc	r15, r31
    //turn off the current note if it is still playing
    if (sequencer->play_status){
		//calculate the pitch and velocity to play
    	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    	while (final_pitch > 255)
    11d0:	ff ef       	ldi	r31, 0xFF	; 255
    11d2:	ef 16       	cp	r14, r31
    11d4:	f1 04       	cpc	r15, r1
    11d6:	09 f0       	breq	.+2      	; 0x11da <continue_sequencer+0xb6>
    11d8:	b8 f7       	brcc	.-18     	; 0x11c8 <continue_sequencer+0xa4>
	        final_pitch -= 12;
			
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    11da:	29 8b       	std	Y+17, r18	; 0x11
    11dc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <get_midi_device>
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	4e 2d       	mov	r20, r14
    11e4:	29 89       	ldd	r18, Y+17	; 0x11
    11e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <midi_send_noteoff>
        sequencer->play_status = 0;
    11ea:	d8 01       	movw	r26, r16
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	1c 92       	st	X, r1
    const uint8_t pattern_pot_sel= 4;
    const uint8_t pattern_pot_min = 0;
    const uint8_t pattern_pot_max = 6;
    
    //read the new values from the pots
    uint8_t octave_max_new = get_pot_value(octave_pot_sel, octave_pot_min, octave_pot_max);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	43 e0       	ldi	r20, 0x03	; 3
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    11fe:	b8 2e       	mov	r11, r24
    uint8_t repeat_max_new = get_pot_value(repeat_pot_sel, repeat_pot_min, repeat_pot_max);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	44 e0       	ldi	r20, 0x04	; 4
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    120e:	c8 2e       	mov	r12, r24
    uint8_t division_new = get_pot_value(division_pot_sel,division_pot_min,division_pot_max);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	46 e0       	ldi	r20, 0x06	; 6
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    121e:	f8 2e       	mov	r15, r24
    uint8_t duration_new = get_pot_value(duration_pot_sel, duration_pot_min, duration_pot_max);
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	6b e0       	ldi	r22, 0x0B	; 11
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	4f ef       	ldi	r20, 0xFF	; 255
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    122e:	e8 2e       	mov	r14, r24
    uint8_t pattern_new = get_pot_value(pattern_pot_sel, pattern_pot_min, pattern_pot_max);
    1230:	84 e0       	ldi	r24, 0x04	; 4
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	46 e0       	ldi	r20, 0x06	; 6
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    123e:	f8 01       	movw	r30, r16
    1240:	27 81       	ldd	r18, Z+7	; 0x07
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    1242:	97 85       	ldd	r25, Z+15	; 0x0f
    1244:	9f 15       	cp	r25, r15
    1246:	29 f4       	brne	.+10     	; 0x1252 <continue_sequencer+0x12e>
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	2c 15       	cp	r18, r12
    124c:	19 f4       	brne	.+6      	; 0x1254 <continue_sequencer+0x130>
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <continue_sequencer+0x130>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    1252:	91 e0       	ldi	r25, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    1254:	d8 01       	movw	r26, r16
    1256:	1e 96       	adiw	r26, 0x0e	; 14
    1258:	2c 91       	ld	r18, X
    125a:	1e 97       	sbiw	r26, 0x0e	; 14
    125c:	2e 15       	cp	r18, r14
    125e:	11 f4       	brne	.+4      	; 0x1264 <continue_sequencer+0x140>
    1260:	a9 2e       	mov	r10, r25
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <continue_sequencer+0x144>
        update_stop_time_increment = 1;
    1264:	aa 24       	eor	r10, r10
    1266:	a3 94       	inc	r10
    }
    
    if (sequencer->pattern != pattern_new){
    1268:	f8 01       	movw	r30, r16
    126a:	25 85       	ldd	r18, Z+13	; 0x0d
    126c:	28 17       	cp	r18, r24
    126e:	11 f0       	breq	.+4      	; 0x1274 <continue_sequencer+0x150>
        sequencer->rebuild_play_list = 1;
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	22 83       	std	Z+2, r18	; 0x02
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    1274:	d8 01       	movw	r26, r16
    1276:	18 96       	adiw	r26, 0x08	; 8
    1278:	bc 92       	st	X, r11
    127a:	18 97       	sbiw	r26, 0x08	; 8
    sequencer->repeat_max = repeat_max_new;
    127c:	17 96       	adiw	r26, 0x07	; 7
    127e:	cc 92       	st	X, r12
    1280:	17 97       	sbiw	r26, 0x07	; 7
    sequencer->division = division_new;
    1282:	1f 96       	adiw	r26, 0x0f	; 15
    1284:	fc 92       	st	X, r15
    1286:	1f 97       	sbiw	r26, 0x0f	; 15
    sequencer->duration = duration_new;
    1288:	1e 96       	adiw	r26, 0x0e	; 14
    128a:	ec 92       	st	X, r14
    128c:	1e 97       	sbiw	r26, 0x0e	; 14
    sequencer->pattern = pattern_new;
    128e:	1d 96       	adiw	r26, 0x0d	; 13
    1290:	8c 93       	st	X, r24
    1292:	1d 97       	sbiw	r26, 0x0d	; 13
    
    if (update_start_time_increment)
    1294:	99 23       	and	r25, r25
    1296:	19 f0       	breq	.+6      	; 0x129e <continue_sequencer+0x17a>
        calculate_start_time_increment(sequencer);
    1298:	c8 01       	movw	r24, r16
    129a:	0e 94 71 07 	call	0xee2	; 0xee2 <calculate_start_time_increment>
    if (update_stop_time_increment)
    129e:	aa 20       	and	r10, r10
    12a0:	21 f1       	breq	.+72     	; 0x12ea <continue_sequencer+0x1c6>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    12a2:	f8 01       	movw	r30, r16
    12a4:	66 85       	ldd	r22, Z+14	; 0x0e
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	21 85       	ldd	r18, Z+9	; 0x09
    12ae:	32 85       	ldd	r19, Z+10	; 0x0a
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__mulsi3>
    12b8:	6d 87       	std	Y+13, r22	; 0x0d
    12ba:	7e 87       	std	Y+14, r23	; 0x0e
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	98 8b       	std	Y+16, r25	; 0x10
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    12c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    12c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	98 89       	ldd	r25, Y+16	; 0x10
    12c8:	2f ef       	ldi	r18, 0xFF	; 255
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodsi4>
    12d4:	2d 87       	std	Y+13, r18	; 0x0d
    12d6:	3e 87       	std	Y+14, r19	; 0x0e
    12d8:	4f 87       	std	Y+15, r20	; 0x0f
    12da:	58 8b       	std	Y+16, r21	; 0x10
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    12dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12de:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e0:	af 85       	ldd	r26, Y+15	; 0x0f
    12e2:	b8 89       	ldd	r27, Y+16	; 0x10
    12e4:	f8 01       	movw	r30, r16
    12e6:	83 87       	std	Z+11, r24	; 0x0b
    12e8:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	3a 81       	ldd	r19, Y+2	; 0x02
    12ee:	4b 81       	ldd	r20, Y+3	; 0x03
    12f0:	5c 81       	ldd	r21, Y+4	; 0x04
    12f2:	d8 01       	movw	r26, r16
    12f4:	19 96       	adiw	r26, 0x09	; 9
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	1a 97       	sbiw	r26, 0x0a	; 10
    12fc:	a0 e0       	ldi	r26, 0x00	; 0
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	a4 1f       	adc	r26, r20
    1306:	b5 1f       	adc	r27, r21
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	af 83       	std	Y+7, r26	; 0x07
    130e:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    1310:	29 81       	ldd	r18, Y+1	; 0x01
    1312:	3a 81       	ldd	r19, Y+2	; 0x02
    1314:	4b 81       	ldd	r20, Y+3	; 0x03
    1316:	5c 81       	ldd	r21, Y+4	; 0x04
    1318:	f8 01       	movw	r30, r16
    131a:	83 85       	ldd	r24, Z+11	; 0x0b
    131c:	94 85       	ldd	r25, Z+12	; 0x0c
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	a4 1f       	adc	r26, r20
    1328:	b5 1f       	adc	r27, r21
    132a:	89 87       	std	Y+9, r24	; 0x09
    132c:	9a 87       	std	Y+10, r25	; 0x0a
    132e:	ab 87       	std	Y+11, r26	; 0x0b
    1330:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	4f 81       	ldd	r20, Y+7	; 0x07
    1338:	58 85       	ldd	r21, Y+8	; 0x08
    133a:	80 91 28 08 	lds	r24, 0x0828
    133e:	90 91 29 08 	lds	r25, 0x0829
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	82 17       	cp	r24, r18
    1348:	93 07       	cpc	r25, r19
    134a:	a4 07       	cpc	r26, r20
    134c:	b5 07       	cpc	r27, r21
    134e:	90 f4       	brcc	.+36     	; 0x1374 <continue_sequencer+0x250>
        next_start_time = next_start_time - TCC0.CCA;
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	af 81       	ldd	r26, Y+7	; 0x07
    1356:	b8 85       	ldd	r27, Y+8	; 0x08
    1358:	20 91 28 08 	lds	r18, 0x0828
    135c:	30 91 29 08 	lds	r19, 0x0829
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	82 1b       	sub	r24, r18
    1366:	93 0b       	sbc	r25, r19
    1368:	a4 0b       	sbc	r26, r20
    136a:	b5 0b       	sbc	r27, r21
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	af 83       	std	Y+7, r26	; 0x07
    1372:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    1374:	29 85       	ldd	r18, Y+9	; 0x09
    1376:	3a 85       	ldd	r19, Y+10	; 0x0a
    1378:	4b 85       	ldd	r20, Y+11	; 0x0b
    137a:	5c 85       	ldd	r21, Y+12	; 0x0c
    137c:	80 91 28 08 	lds	r24, 0x0828
    1380:	90 91 29 08 	lds	r25, 0x0829
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	82 17       	cp	r24, r18
    138a:	93 07       	cpc	r25, r19
    138c:	a4 07       	cpc	r26, r20
    138e:	b5 07       	cpc	r27, r21
    1390:	90 f4       	brcc	.+36     	; 0x13b6 <continue_sequencer+0x292>
        next_stop_time = next_stop_time - TCC0.CCA;
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	ab 85       	ldd	r26, Y+11	; 0x0b
    1398:	bc 85       	ldd	r27, Y+12	; 0x0c
    139a:	20 91 28 08 	lds	r18, 0x0828
    139e:	30 91 29 08 	lds	r19, 0x0829
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	82 1b       	sub	r24, r18
    13a8:	93 0b       	sbc	r25, r19
    13aa:	a4 0b       	sbc	r26, r20
    13ac:	b5 0b       	sbc	r27, r21
    13ae:	89 87       	std	Y+9, r24	; 0x09
    13b0:	9a 87       	std	Y+10, r25	; 0x0a
    13b2:	ab 87       	std	Y+11, r26	; 0x0b
    13b4:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	af 81       	ldd	r26, Y+7	; 0x07
    13bc:	b8 85       	ldd	r27, Y+8	; 0x08
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	f8 e0       	ldi	r31, 0x08	; 8
    13c2:	82 a7       	std	Z+42, r24	; 0x2a
    13c4:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    13cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    13ce:	84 a7       	std	Z+44, r24	; 0x2c
    13d0:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    13d2:	d8 01       	movw	r26, r16
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	8c 91       	ld	r24, X
    13d8:	12 97       	sbiw	r26, 0x02	; 2
    13da:	88 23       	and	r24, r24
    13dc:	d9 f0       	breq	.+54     	; 0x1414 <continue_sequencer+0x2f0>
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    13de:	f8 01       	movw	r30, r16
    13e0:	ef 58       	subi	r30, 0x8F	; 143
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	a0 81       	ld	r26, Z
    13e6:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <continue_sequencer+0x2e4>

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
                sequencer->play_list[play_list_index++] = current_note;
    13ec:	e8 2f       	mov	r30, r24
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	38 96       	adiw	r30, 0x08	; 8
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e0 0f       	add	r30, r16
    13f8:	f1 1f       	adc	r31, r17
    13fa:	a0 83       	st	Z, r26
    13fc:	b1 83       	std	Z+1, r27	; 0x01
    13fe:	8f 5f       	subi	r24, 0xFF	; 255
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    1400:	13 96       	adiw	r26, 0x03	; 3
    1402:	0d 90       	ld	r0, X+
    1404:	bc 91       	ld	r27, X
    1406:	a0 2d       	mov	r26, r0
    1408:	10 97       	sbiw	r26, 0x00	; 0
    140a:	81 f7       	brne	.-32     	; 0x13ec <continue_sequencer+0x2c8>
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index - 1;
    140c:	81 50       	subi	r24, 0x01	; 1
    140e:	f8 01       	movw	r30, r16
    1410:	86 83       	std	Z+6, r24	; 0x06
    
    //check if the list is now shorter than the current note_index
//    while (sequencer->note_index > sequencer->note_max)
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    1412:	12 82       	std	Z+2, r1	; 0x02
    if (sequencer->rebuild_play_list)
        build_play_list(sequencer);
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    1414:	dd 20       	and	r13, r13
    1416:	69 f5       	brne	.+90     	; 0x1472 <continue_sequencer+0x34e>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    1418:	d8 01       	movw	r26, r16
    141a:	14 96       	adiw	r26, 0x04	; 4
    141c:	8c 91       	ld	r24, X
    141e:	14 97       	sbiw	r26, 0x04	; 4
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	14 96       	adiw	r26, 0x04	; 4
    1424:	8c 93       	st	X, r24
    1426:	14 97       	sbiw	r26, 0x04	; 4
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    1428:	17 96       	adiw	r26, 0x07	; 7
    142a:	9c 91       	ld	r25, X
    142c:	17 97       	sbiw	r26, 0x07	; 7
    142e:	98 17       	cp	r25, r24
    1430:	50 f4       	brcc	.+20     	; 0x1446 <continue_sequencer+0x322>
        sequencer->repeat_index = 0;
    1432:	14 96       	adiw	r26, 0x04	; 4
    1434:	1c 92       	st	X, r1
    1436:	14 97       	sbiw	r26, 0x04	; 4
        sequencer->note_index += 1;
    1438:	13 96       	adiw	r26, 0x03	; 3
    143a:	8c 91       	ld	r24, X
    143c:	13 97       	sbiw	r26, 0x03	; 3
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	13 96       	adiw	r26, 0x03	; 3
    1442:	8c 93       	st	X, r24
    1444:	13 97       	sbiw	r26, 0x03	; 3
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    1446:	f8 01       	movw	r30, r16
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	86 81       	ldd	r24, Z+6	; 0x06
    144c:	89 17       	cp	r24, r25
    144e:	20 f4       	brcc	.+8      	; 0x1458 <continue_sequencer+0x334>
        sequencer->note_index = 0;
    1450:	13 82       	std	Z+3, r1	; 0x03
        sequencer->octave_index += 1;
    1452:	85 81       	ldd	r24, Z+5	; 0x05
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	85 83       	std	Z+5, r24	; 0x05
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    1458:	d8 01       	movw	r26, r16
    145a:	15 96       	adiw	r26, 0x05	; 5
    145c:	9c 91       	ld	r25, X
    145e:	15 97       	sbiw	r26, 0x05	; 5
    1460:	18 96       	adiw	r26, 0x08	; 8
    1462:	8c 91       	ld	r24, X
    1464:	18 97       	sbiw	r26, 0x08	; 8
    1466:	89 17       	cp	r24, r25
    1468:	40 f4       	brcc	.+16     	; 0x147a <continue_sequencer+0x356>
        sequencer->octave_index = 0;
    146a:	15 96       	adiw	r26, 0x05	; 5
    146c:	1c 92       	st	X, r1
    146e:	15 97       	sbiw	r26, 0x05	; 5
    1470:	04 c0       	rjmp	.+8      	; 0x147a <continue_sequencer+0x356>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    1472:	f8 01       	movw	r30, r16
    1474:	15 82       	std	Z+5, r1	; 0x05
    sequencer->note_index = 0;
    1476:	13 82       	std	Z+3, r1	; 0x03
    sequencer->repeat_index = 0;
    1478:	14 82       	std	Z+4, r1	; 0x04
    else{
        reset_play_list_indeces(sequencer);
    }
    
	//calculate the pitch and velocity to play
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    147a:	d8 01       	movw	r26, r16
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	ec 91       	ld	r30, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	38 96       	adiw	r30, 0x08	; 8
    1486:	ee 0f       	add	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	e0 0f       	add	r30, r16
    148c:	f1 1f       	adc	r31, r17
    148e:	01 90       	ld	r0, Z+
    1490:	f0 81       	ld	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	15 96       	adiw	r26, 0x05	; 5
    1496:	9c 91       	ld	r25, X
    1498:	15 97       	sbiw	r26, 0x05	; 5
    149a:	8c e0       	ldi	r24, 0x0C	; 12
    149c:	98 9f       	mul	r25, r24
    149e:	70 01       	movw	r14, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	80 81       	ld	r24, Z
    14a4:	e8 0e       	add	r14, r24
    14a6:	f1 1c       	adc	r15, r1
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    14a8:	21 81       	ldd	r18, Z+1	; 0x01
	while (final_pitch > 255)
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <continue_sequencer+0x390>
	    final_pitch -= 12;
    14ac:	e4 ef       	ldi	r30, 0xF4	; 244
    14ae:	ff ef       	ldi	r31, 0xFF	; 255
    14b0:	ee 0e       	add	r14, r30
    14b2:	ff 1e       	adc	r15, r31
    }
    
	//calculate the pitch and velocity to play
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	while (final_pitch > 255)
    14b4:	ff ef       	ldi	r31, 0xFF	; 255
    14b6:	ef 16       	cp	r14, r31
    14b8:	f1 04       	cpc	r15, r1
    14ba:	09 f0       	breq	.+2      	; 0x14be <continue_sequencer+0x39a>
    14bc:	b8 f7       	brcc	.-18     	; 0x14ac <continue_sequencer+0x388>
	    final_pitch -= 12;
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    14be:	29 8b       	std	Y+17, r18	; 0x11
    14c0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <get_midi_device>
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	4e 2d       	mov	r20, r14
    14c8:	29 89       	ldd	r18, Y+17	; 0x11
    14ca:	0e 94 5f 0c 	call	0x18be	; 0x18be <midi_send_noteon>
    
    set_LEDs_on(0,0,0,1);
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	21 e0       	ldi	r18, 0x01	; 1
    14d6:	0e 94 be 02 	call	0x57c	; 0x57c <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	d8 01       	movw	r26, r16
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	8c 93       	st	X, r24
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    
    //set run flag
    sequencer->run_status = 1;
    14e4:	8c 93       	st	X, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    14e6:	e0 e0       	ldi	r30, 0x00	; 0
    14e8:	f8 e0       	ldi	r31, 0x08	; 8
    14ea:	80 91 01 08 	lds	r24, 0x0801
    14ee:	80 62       	ori	r24, 0x20	; 32
    14f0:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    14f2:	80 91 01 08 	lds	r24, 0x0801
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	81 83       	std	Z+1, r24	; 0x01
}
    14fa:	61 96       	adiw	r28, 0x11	; 17
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	bf 90       	pop	r11
    1512:	af 90       	pop	r10
    1514:	08 95       	ret

00001516 <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	6c 01       	movw	r12, r24
    152c:	f6 2e       	mov	r15, r22
	uint16_t final_pitch;
	uint16_t final_velocity;
	
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    152e:	e0 e0       	ldi	r30, 0x00	; 0
    1530:	f8 e0       	ldi	r31, 0x08	; 8
    1532:	80 91 01 08 	lds	r24, 0x0801
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    153a:	80 91 01 08 	lds	r24, 0x0801
    153e:	8f 7b       	andi	r24, 0xBF	; 191
    1540:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    1542:	80 91 0c 08 	lds	r24, 0x080C
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    154a:	d6 01       	movw	r26, r12
    154c:	11 96       	adiw	r26, 0x01	; 1
    154e:	8c 91       	ld	r24, X
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	88 23       	and	r24, r24
    1554:	71 f1       	breq	.+92     	; 0x15b2 <stop_sequencer+0x9c>
		//calculate the pitch and velocity to play
	    final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	ec 91       	ld	r30, X
    155a:	13 97       	sbiw	r26, 0x03	; 3
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	38 96       	adiw	r30, 0x08	; 8
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ec 0d       	add	r30, r12
    1566:	fd 1d       	adc	r31, r13
    1568:	01 90       	ld	r0, Z+
    156a:	f0 81       	ld	r31, Z
    156c:	e0 2d       	mov	r30, r0
    156e:	15 96       	adiw	r26, 0x05	; 5
    1570:	0c 91       	ld	r16, X
    1572:	15 97       	sbiw	r26, 0x05	; 5
    1574:	8c e0       	ldi	r24, 0x0C	; 12
    1576:	08 9f       	mul	r16, r24
    1578:	80 01       	movw	r16, r0
    157a:	11 24       	eor	r1, r1
    157c:	80 81       	ld	r24, Z
    157e:	08 0f       	add	r16, r24
    1580:	11 1d       	adc	r17, r1
	    final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    1582:	21 81       	ldd	r18, Z+1	; 0x01
	    while (final_pitch > 255)
    1584:	02 c0       	rjmp	.+4      	; 0x158a <stop_sequencer+0x74>
	        final_pitch -= 12;
    1586:	0c 50       	subi	r16, 0x0C	; 12
    1588:	10 40       	sbci	r17, 0x00	; 0
    //stop the current note if it's playing
    if (sequencer->play_status){
		//calculate the pitch and velocity to play
	    final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	    final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	    while (final_pitch > 255)
    158a:	0f 3f       	cpi	r16, 0xFF	; 255
    158c:	11 05       	cpc	r17, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <stop_sequencer+0x7c>
    1590:	d0 f7       	brcc	.-12     	; 0x1586 <stop_sequencer+0x70>
	        final_pitch -= 12;
		
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    1592:	29 83       	std	Y+1, r18	; 0x01
    1594:	0e 94 57 0b 	call	0x16ae	; 0x16ae <get_midi_device>
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	40 2f       	mov	r20, r16
    159c:	29 81       	ldd	r18, Y+1	; 0x01
    159e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_LEDs_off>
        sequencer->play_status = 0;
    15ae:	f6 01       	movw	r30, r12
    15b0:	11 82       	std	Z+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, reenable the note on interrupt
    if (full_stop)
    15b2:	ff 20       	and	r15, r15
    15b4:	19 f0       	breq	.+6      	; 0x15bc <stop_sequencer+0xa6>
        sequencer->run_status = 0;
    15b6:	d6 01       	movw	r26, r12
    15b8:	1c 92       	st	X, r1
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <stop_sequencer+0xb2>
    else    
        TCC0.CTRLB |= 0x20;
    15bc:	80 91 01 08 	lds	r24, 0x0801
    15c0:	80 62       	ori	r24, 0x20	; 32
    15c2:	e0 e0       	ldi	r30, 0x00	; 0
    15c4:	f8 e0       	ldi	r31, 0x08	; 8
    15c6:	81 83       	std	Z+1, r24	; 0x01
    
}
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	08 95       	ret

000015da <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    15e4:	8c 01       	movw	r16, r24
    15e6:	00 59       	subi	r16, 0x90	; 144
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 77 06 	call	0xcee	; 0xcee <insert_note>
    15f0:	88 23       	and	r24, r24
    15f2:	51 f0       	breq	.+20     	; 0x1608 <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8a 83       	std	Y+2, r24	; 0x02
        
		if (sequencer->note_list.length == 1)
    15f8:	f8 01       	movw	r30, r16
    15fa:	80 81       	ld	r24, Z
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	21 f4       	brne	.+8      	; 0x1608 <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    1600:	ce 01       	movw	r24, r28
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	0e 94 92 08 	call	0x1124	; 0x1124 <continue_sequencer>
    }
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
    
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    161c:	8c 01       	movw	r16, r24
    161e:	00 59       	subi	r16, 0x90	; 144
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	c8 01       	movw	r24, r16
    1624:	0e 94 06 06 	call	0xc0c	; 0xc0c <remove_note_by_pitch>
    1628:	88 23       	and	r24, r24
    162a:	51 f0       	breq	.+20     	; 0x1640 <remove_note_from_arpeggiator+0x2e>
        sequencer->rebuild_play_list = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	8a 83       	std	Y+2, r24	; 0x02
        
        if (sequencer->note_list.length == 0)
    1630:	f8 01       	movw	r30, r16
    1632:	80 81       	ld	r24, Z
    1634:	88 23       	and	r24, r24
    1636:	21 f4       	brne	.+8      	; 0x1640 <remove_note_from_arpeggiator+0x2e>
            stop_sequencer(sequencer, 1);
    1638:	ce 01       	movw	r24, r28
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <stop_sequencer>
    }	
	
}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	08 95       	ret

0000164a <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    164a:	fc 01       	movw	r30, r24
    164c:	20 81       	ld	r18, Z
    164e:	22 23       	and	r18, r18
    1650:	19 f0       	breq	.+6      	; 0x1658 <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 92 08 	call	0x1124	; 0x1124 <continue_sequencer>
    1658:	08 95       	ret

0000165a <serial_midi_send>:

MidiDevice* get_midi_device() {
   return stored_midi_device;
}

void serial_midi_send(MidiDevice* midi_device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    165a:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    165c:	80 91 b1 09 	lds	r24, 0x09B1
    1660:	85 ff       	sbrs	r24, 5
    1662:	fc cf       	rjmp	.-8      	; 0x165c <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    1664:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    1668:	62 30       	cpi	r22, 0x02	; 2
    166a:	70 f0       	brcs	.+28     	; 0x1688 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    166c:	80 91 b1 09 	lds	r24, 0x09B1
    1670:	85 ff       	sbrs	r24, 5
    1672:	fc cf       	rjmp	.-8      	; 0x166c <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    1674:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    1678:	63 30       	cpi	r22, 0x03	; 3
    167a:	31 f4       	brne	.+12     	; 0x1688 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    167c:	80 91 b1 09 	lds	r24, 0x09B1
    1680:	85 ff       	sbrs	r24, 5
    1682:	fc cf       	rjmp	.-8      	; 0x167c <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    1684:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <noteoff_to_arpeggiator>:
void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
}

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
    168c:	80 91 68 23 	lds	r24, 0x2368
    1690:	90 91 69 23 	lds	r25, 0x2369
    1694:	64 2f       	mov	r22, r20
    1696:	0e 94 09 0b 	call	0x1612	; 0x1612 <remove_note_from_arpeggiator>
}
    169a:	08 95       	ret

0000169c <noteon_to_arpeggiator>:
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
    169c:	80 91 68 23 	lds	r24, 0x2368
    16a0:	90 91 69 23 	lds	r25, 0x2369
    16a4:	64 2f       	mov	r22, r20
    16a6:	42 2f       	mov	r20, r18
    16a8:	0e 94 ed 0a 	call	0x15da	; 0x15da <add_note_to_arpeggiator>
}
    16ac:	08 95       	ret

000016ae <get_midi_device>:
static Sequencer* stored_sequencer;
static MidiDevice* stored_midi_device;

MidiDevice* get_midi_device() {
   return stored_midi_device;
}
    16ae:	80 91 6a 23 	lds	r24, 0x236A
    16b2:	90 91 6b 23 	lds	r25, 0x236B
    16b6:	08 95       	ret

000016b8 <initialize_serial_midi>:

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
}

void initialize_serial_midi(MidiDevice* midi_device, Sequencer* sequencer){
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
    16c6:	7b 01       	movw	r14, r22
   //set up the device
   midi_device_init(midi_device);
    16c8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <midi_device_init>
   
   midi_device_set_send_func(midi_device, serial_midi_send);
    16cc:	0d e2       	ldi	r16, 0x2D	; 45
    16ce:	1b e0       	ldi	r17, 0x0B	; 11
    16d0:	ce 01       	movw	r24, r28
    16d2:	b8 01       	movw	r22, r16
    16d4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <midi_device_set_send_func>
   midi_register_noteon_callback(midi_device, noteon_to_arpeggiator);
    16d8:	ce 01       	movw	r24, r28
    16da:	6e e4       	ldi	r22, 0x4E	; 78
    16dc:	7b e0       	ldi	r23, 0x0B	; 11
    16de:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <midi_register_noteon_callback>
   midi_register_noteoff_callback(midi_device, noteoff_to_arpeggiator);
    16e2:	ce 01       	movw	r24, r28
    16e4:	66 e4       	ldi	r22, 0x46	; 70
    16e6:	7b e0       	ldi	r23, 0x0B	; 11
    16e8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be sent through to midi out
   midi_register_fallthrough_callback(midi_device, serial_midi_send);
    16ec:	ce 01       	movw	r24, r28
    16ee:	b8 01       	movw	r22, r16
    16f0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <midi_register_fallthrough_callback>
   
   //store the device and sequencer pointers
   stored_sequencer = sequencer;
    16f4:	e0 92 68 23 	sts	0x2368, r14
    16f8:	f0 92 69 23 	sts	0x2369, r15
   stored_midi_device = midi_device;
    16fc:	c0 93 6a 23 	sts	0x236A, r28
    1700:	d0 93 6b 23 	sts	0x236B, r29
}
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1712:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1714:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1716:	63 83       	std	Z+3, r22	; 0x03
    1718:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    171a:	11 82       	std	Z+1, r1	; 0x01
    171c:	10 82       	st	Z, r1
}
    171e:	08 95       	ret

00001720 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	ec 01       	movw	r28, r24
    172a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    172c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <store_and_clear_interrupt>
    1730:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1732:	29 81       	ldd	r18, Y+1	; 0x01
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	c9 01       	movw	r24, r18
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	6a 81       	ldd	r22, Y+2	; 0x02
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__divmodhi4>
    1742:	48 81       	ld	r20, Y
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	84 17       	cp	r24, r20
    1748:	95 07       	cpc	r25, r21
    174a:	29 f4       	brne	.+10     	; 0x1756 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    174c:	80 2f       	mov	r24, r16
    174e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <restore_interrupt_setting>
      return false;
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	13 c0       	rjmp	.+38     	; 0x177c <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    1756:	eb 81       	ldd	r30, Y+3	; 0x03
    1758:	fc 81       	ldd	r31, Y+4	; 0x04
    175a:	e2 0f       	add	r30, r18
    175c:	f3 1f       	adc	r31, r19
    175e:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1760:	29 81       	ldd	r18, Y+1	; 0x01
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	2f 5f       	subi	r18, 0xFF	; 255
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	6a 81       	ldd	r22, Y+2	; 0x02
    176a:	c9 01       	movw	r24, r18
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__divmodhi4>
    1772:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1774:	80 2f       	mov	r24, r16
    1776:	0e 94 0c 0c 	call	0x1818	; 0x1818 <restore_interrupt_setting>
      return true;
    177a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    178e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1792:	29 81       	ldd	r18, Y+1	; 0x01
    1794:	98 81       	ld	r25, Y
    1796:	29 17       	cp	r18, r25
    1798:	10 f0       	brcs	.+4      	; 0x179e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    179a:	12 2f       	mov	r17, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    179e:	1a 81       	ldd	r17, Y+2	; 0x02
    17a0:	12 0f       	add	r17, r18
    17a2:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    17a4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <restore_interrupt_setting>
   return len;
}
    17a8:	81 2f       	mov	r24, r17
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret

000017b2 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    17b2:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    17b4:	80 81       	ld	r24, Z
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	86 0f       	add	r24, r22
    17ba:	91 1d       	adc	r25, r1
    17bc:	62 81       	ldd	r22, Z+2	; 0x02
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__divmodhi4>
    17c4:	03 80       	ldd	r0, Z+3	; 0x03
    17c6:	f4 81       	ldd	r31, Z+4	; 0x04
    17c8:	e0 2d       	mov	r30, r0
    17ca:	e8 0f       	add	r30, r24
    17cc:	f9 1f       	adc	r31, r25
}
    17ce:	80 81       	ld	r24, Z
    17d0:	08 95       	ret

000017d2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    17e2:	69 83       	std	Y+1, r22	; 0x01
    17e4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <store_and_clear_interrupt>
    17e8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    17ea:	f8 01       	movw	r30, r16
    17ec:	20 81       	ld	r18, Z
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	69 81       	ldd	r22, Y+1	; 0x01
    17f2:	26 0f       	add	r18, r22
    17f4:	31 1d       	adc	r19, r1
    17f6:	62 81       	ldd	r22, Z+2	; 0x02
    17f8:	c9 01       	movw	r24, r18
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__divmodhi4>
    1800:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1802:	84 2f       	mov	r24, r20
    1804:	0e 94 0c 0c 	call	0x1818	; 0x1818 <restore_interrupt_setting>
}
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <store_and_clear_interrupt>:
interrupt_setting_t store_and_clear_interrupt(void) {
//   uint8_t sreg = SREG;
    uint8_t sreg = 0;
//    cli();
    return sreg;
}
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
//   SREG = setting;
}
    1818:	08 95       	ret

0000181a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    181a:	88 1f       	adc	r24, r24
    181c:	88 27       	eor	r24, r24
    181e:	88 1f       	adc	r24, r24
    1820:	08 95       	ret

00001822 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	88 3f       	cpi	r24, 0xF8	; 248
    1826:	08 f4       	brcc	.+2      	; 0x182a <midi_is_realtime+0x8>
    1828:	90 e0       	ldi	r25, 0x00	; 0
}
    182a:	89 2f       	mov	r24, r25
    182c:	08 95       	ret

0000182e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	20 7f       	andi	r18, 0xF0	; 240
    1834:	30 70       	andi	r19, 0x00	; 0
    1836:	20 3b       	cpi	r18, 0xB0	; 176
    1838:	31 05       	cpc	r19, r1
    183a:	f1 f0       	breq	.+60     	; 0x1878 <midi_packet_length+0x4a>
    183c:	21 3b       	cpi	r18, 0xB1	; 177
    183e:	31 05       	cpc	r19, r1
    1840:	54 f4       	brge	.+20     	; 0x1856 <midi_packet_length+0x28>
    1842:	20 39       	cpi	r18, 0x90	; 144
    1844:	31 05       	cpc	r19, r1
    1846:	c1 f0       	breq	.+48     	; 0x1878 <midi_packet_length+0x4a>
    1848:	20 3a       	cpi	r18, 0xA0	; 160
    184a:	31 05       	cpc	r19, r1
    184c:	a9 f0       	breq	.+42     	; 0x1878 <midi_packet_length+0x4a>
    184e:	20 38       	cpi	r18, 0x80	; 128
    1850:	31 05       	cpc	r19, r1
    1852:	e9 f4       	brne	.+58     	; 0x188e <midi_packet_length+0x60>
    1854:	11 c0       	rjmp	.+34     	; 0x1878 <midi_packet_length+0x4a>
    1856:	20 3d       	cpi	r18, 0xD0	; 208
    1858:	31 05       	cpc	r19, r1
    185a:	d9 f0       	breq	.+54     	; 0x1892 <midi_packet_length+0x64>
    185c:	21 3d       	cpi	r18, 0xD1	; 209
    185e:	31 05       	cpc	r19, r1
    1860:	24 f4       	brge	.+8      	; 0x186a <midi_packet_length+0x3c>
    1862:	20 3c       	cpi	r18, 0xC0	; 192
    1864:	31 05       	cpc	r19, r1
    1866:	99 f4       	brne	.+38     	; 0x188e <midi_packet_length+0x60>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <midi_packet_length+0x64>
    186a:	20 3e       	cpi	r18, 0xE0	; 224
    186c:	31 05       	cpc	r19, r1
    186e:	21 f0       	breq	.+8      	; 0x1878 <midi_packet_length+0x4a>
    1870:	20 3f       	cpi	r18, 0xF0	; 240
    1872:	31 05       	cpc	r19, r1
    1874:	61 f4       	brne	.+24     	; 0x188e <midi_packet_length+0x60>
    1876:	02 c0       	rjmp	.+4      	; 0x187c <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    187c:	e8 2f       	mov	r30, r24
    187e:	e1 5f       	subi	r30, 0xF1	; 241
    1880:	ef 30       	cpi	r30, 0x0F	; 15
    1882:	48 f4       	brcc	.+18     	; 0x1896 <midi_packet_length+0x68>
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	e0 5e       	subi	r30, 0xE0	; 224
    1888:	ff 4d       	sbci	r31, 0xDF	; 223
    188a:	80 81       	ld	r24, Z
    188c:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	08 95       	ret
    1896:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1898:	08 95       	ret

0000189a <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    189a:	0f 93       	push	r16
    189c:	36 2f       	mov	r19, r22
    189e:	54 2f       	mov	r21, r20
    18a0:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    18a2:	3f 70       	andi	r19, 0x0F	; 15
    18a4:	30 6b       	ori	r19, 0xB0	; 176
    18a6:	5f 77       	andi	r21, 0x7F	; 127
    18a8:	0f 77       	andi	r16, 0x7F	; 127
    18aa:	dc 01       	movw	r26, r24
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	43 2f       	mov	r20, r19
    18b6:	25 2f       	mov	r18, r21
    18b8:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    18be:	0f 93       	push	r16
    18c0:	36 2f       	mov	r19, r22
    18c2:	54 2f       	mov	r21, r20
    18c4:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    18c6:	3f 70       	andi	r19, 0x0F	; 15
    18c8:	30 69       	ori	r19, 0x90	; 144
    18ca:	5f 77       	andi	r21, 0x7F	; 127
    18cc:	0f 77       	andi	r16, 0x7F	; 127
    18ce:	dc 01       	movw	r26, r24
    18d0:	ed 91       	ld	r30, X+
    18d2:	fc 91       	ld	r31, X
    18d4:	63 e0       	ldi	r22, 0x03	; 3
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	43 2f       	mov	r20, r19
    18da:	25 2f       	mov	r18, r21
    18dc:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    18e2:	0f 93       	push	r16
    18e4:	36 2f       	mov	r19, r22
    18e6:	54 2f       	mov	r21, r20
    18e8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    18ea:	3f 70       	andi	r19, 0x0F	; 15
    18ec:	30 68       	ori	r19, 0x80	; 128
    18ee:	5f 77       	andi	r21, 0x7F	; 127
    18f0:	0f 77       	andi	r16, 0x7F	; 127
    18f2:	dc 01       	movw	r26, r24
    18f4:	ed 91       	ld	r30, X+
    18f6:	fc 91       	ld	r31, X
    18f8:	63 e0       	ldi	r22, 0x03	; 3
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	43 2f       	mov	r20, r19
    18fe:	25 2f       	mov	r18, r21
    1900:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1906:	0f 93       	push	r16
    1908:	36 2f       	mov	r19, r22
    190a:	54 2f       	mov	r21, r20
    190c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    190e:	3f 70       	andi	r19, 0x0F	; 15
    1910:	30 6a       	ori	r19, 0xA0	; 160
    1912:	5f 77       	andi	r21, 0x7F	; 127
    1914:	0f 77       	andi	r16, 0x7F	; 127
    1916:	dc 01       	movw	r26, r24
    1918:	ed 91       	ld	r30, X+
    191a:	fc 91       	ld	r31, X
    191c:	63 e0       	ldi	r22, 0x03	; 3
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	43 2f       	mov	r20, r19
    1922:	25 2f       	mov	r18, r21
    1924:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1930:	20 e2       	ldi	r18, 0x20	; 32
    1932:	40 30       	cpi	r20, 0x00	; 0
    1934:	52 07       	cpc	r21, r18
    1936:	3c f4       	brge	.+14     	; 0x1946 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1938:	a0 ee       	ldi	r26, 0xE0	; 224
    193a:	40 30       	cpi	r20, 0x00	; 0
    193c:	5a 07       	cpc	r21, r26
    193e:	34 f0       	brlt	.+12     	; 0x194c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1940:	00 50       	subi	r16, 0x00	; 0
    1942:	10 4e       	sbci	r17, 0xE0	; 224
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1946:	0f ef       	ldi	r16, 0xFF	; 255
    1948:	1f e3       	ldi	r17, 0x3F	; 63
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1950:	46 2f       	mov	r20, r22
    1952:	4f 70       	andi	r20, 0x0F	; 15
    1954:	40 6e       	ori	r20, 0xE0	; 224
    1956:	20 2f       	mov	r18, r16
    1958:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    195a:	00 0f       	add	r16, r16
    195c:	01 2f       	mov	r16, r17
    195e:	00 1f       	adc	r16, r16
    1960:	11 0b       	sbc	r17, r17
    1962:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1964:	0f 77       	andi	r16, 0x7F	; 127
    1966:	dc 01       	movw	r26, r24
    1968:	ed 91       	ld	r30, X+
    196a:	fc 91       	ld	r31, X
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1978:	0f 93       	push	r16
    197a:	36 2f       	mov	r19, r22
    197c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    197e:	3f 70       	andi	r19, 0x0F	; 15
    1980:	30 6c       	ori	r19, 0xC0	; 192
    1982:	2f 77       	andi	r18, 0x7F	; 127
    1984:	dc 01       	movw	r26, r24
    1986:	ed 91       	ld	r30, X+
    1988:	fc 91       	ld	r31, X
    198a:	62 e0       	ldi	r22, 0x02	; 2
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	43 2f       	mov	r20, r19
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1998:	0f 93       	push	r16
    199a:	36 2f       	mov	r19, r22
    199c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    199e:	3f 70       	andi	r19, 0x0F	; 15
    19a0:	30 6d       	ori	r19, 0xD0	; 208
    19a2:	2f 77       	andi	r18, 0x7F	; 127
    19a4:	dc 01       	movw	r26, r24
    19a6:	ed 91       	ld	r30, X+
    19a8:	fc 91       	ld	r31, X
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	43 2f       	mov	r20, r19
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    19b8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    19ba:	dc 01       	movw	r26, r24
    19bc:	ed 91       	ld	r30, X+
    19be:	fc 91       	ld	r31, X
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	48 ef       	ldi	r20, 0xF8	; 248
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	00 e0       	ldi	r16, 0x00	; 0
    19ca:	09 95       	icall
}
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    19d0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    19d2:	dc 01       	movw	r26, r24
    19d4:	ed 91       	ld	r30, X+
    19d6:	fc 91       	ld	r31, X
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	49 ef       	ldi	r20, 0xF9	; 249
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	00 e0       	ldi	r16, 0x00	; 0
    19e2:	09 95       	icall
}
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    19e8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    19ea:	dc 01       	movw	r26, r24
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	09 95       	icall
}
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1a00:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1a02:	dc 01       	movw	r26, r24
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	4b ef       	ldi	r20, 0xFB	; 251
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	00 e0       	ldi	r16, 0x00	; 0
    1a12:	09 95       	icall
}
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1a18:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	ed 91       	ld	r30, X+
    1a1e:	fc 91       	ld	r31, X
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	4c ef       	ldi	r20, 0xFC	; 252
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	09 95       	icall
}
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1a30:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1a32:	dc 01       	movw	r26, r24
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	4e ef       	ldi	r20, 0xFE	; 254
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	09 95       	icall
}
    1a44:	0f 91       	pop	r16
    1a46:	08 95       	ret

00001a48 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1a48:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	4f ef       	ldi	r20, 0xFF	; 255
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	09 95       	icall
}
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1a60:	0f 93       	push	r16
    1a62:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1a64:	2f 77       	andi	r18, 0x7F	; 127
    1a66:	dc 01       	movw	r26, r24
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	41 ef       	ldi	r20, 0xF1	; 241
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
   device->send_func(device, 3,
    1a7e:	26 2f       	mov	r18, r22
    1a80:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1a82:	8b 01       	movw	r16, r22
    1a84:	00 0f       	add	r16, r16
    1a86:	01 2f       	mov	r16, r17
    1a88:	00 1f       	adc	r16, r16
    1a8a:	11 0b       	sbc	r17, r17
    1a8c:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1a8e:	0f 77       	andi	r16, 0x7F	; 127
    1a90:	dc 01       	movw	r26, r24
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	63 e0       	ldi	r22, 0x03	; 3
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	42 ef       	ldi	r20, 0xF2	; 242
    1a9c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1aa4:	0f 93       	push	r16
    1aa6:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1aa8:	2f 77       	andi	r18, 0x7F	; 127
    1aaa:	dc 01       	movw	r26, r24
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	43 ef       	ldi	r20, 0xF3	; 243
    1ab6:	00 e0       	ldi	r16, 0x00	; 0
    1ab8:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1abe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	46 ef       	ldi	r20, 0xF6	; 246
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	00 e0       	ldi	r16, 0x00	; 0
    1ad0:	09 95       	icall
}
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1ad6:	0f 93       	push	r16
    1ad8:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1ada:	dc 01       	movw	r26, r24
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	09 95       	icall
}
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1aee:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1af0:	dc 01       	movw	r26, r24
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	09 95       	icall
}
    1af8:	0f 91       	pop	r16
    1afa:	08 95       	ret

00001afc <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1afc:	fc 01       	movw	r30, r24
    1afe:	62 83       	std	Z+2, r22	; 0x02
    1b00:	73 83       	std	Z+3, r23	; 0x03
}
    1b02:	08 95       	ret

00001b04 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1b04:	fc 01       	movw	r30, r24
    1b06:	64 83       	std	Z+4, r22	; 0x04
    1b08:	75 83       	std	Z+5, r23	; 0x05
}
    1b0a:	08 95       	ret

00001b0c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	66 83       	std	Z+6, r22	; 0x06
    1b10:	77 83       	std	Z+7, r23	; 0x07
}
    1b12:	08 95       	ret

00001b14 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1b14:	fc 01       	movw	r30, r24
    1b16:	60 87       	std	Z+8, r22	; 0x08
    1b18:	71 87       	std	Z+9, r23	; 0x09
}
    1b1a:	08 95       	ret

00001b1c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	62 87       	std	Z+10, r22	; 0x0a
    1b20:	73 87       	std	Z+11, r23	; 0x0b
}
    1b22:	08 95       	ret

00001b24 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1b24:	fc 01       	movw	r30, r24
    1b26:	64 87       	std	Z+12, r22	; 0x0c
    1b28:	75 87       	std	Z+13, r23	; 0x0d
}
    1b2a:	08 95       	ret

00001b2c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	66 87       	std	Z+14, r22	; 0x0e
    1b30:	77 87       	std	Z+15, r23	; 0x0f
}
    1b32:	08 95       	ret

00001b34 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1b34:	fc 01       	movw	r30, r24
    1b36:	60 8b       	std	Z+16, r22	; 0x10
    1b38:	71 8b       	std	Z+17, r23	; 0x11
}
    1b3a:	08 95       	ret

00001b3c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	62 8b       	std	Z+18, r22	; 0x12
    1b40:	73 8b       	std	Z+19, r23	; 0x13
}
    1b42:	08 95       	ret

00001b44 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1b44:	fc 01       	movw	r30, r24
    1b46:	64 8b       	std	Z+20, r22	; 0x14
    1b48:	75 8b       	std	Z+21, r23	; 0x15
}
    1b4a:	08 95       	ret

00001b4c <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	66 8b       	std	Z+22, r22	; 0x16
    1b50:	77 8b       	std	Z+23, r23	; 0x17
}
    1b52:	08 95       	ret

00001b54 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1b54:	fc 01       	movw	r30, r24
    1b56:	60 8f       	std	Z+24, r22	; 0x18
    1b58:	71 8f       	std	Z+25, r23	; 0x19
}
    1b5a:	08 95       	ret

00001b5c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	62 8f       	std	Z+26, r22	; 0x1a
    1b60:	73 8f       	std	Z+27, r23	; 0x1b
}
    1b62:	08 95       	ret

00001b64 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1b64:	fc 01       	movw	r30, r24
    1b66:	64 8f       	std	Z+28, r22	; 0x1c
    1b68:	75 8f       	std	Z+29, r23	; 0x1d
}
    1b6a:	08 95       	ret

00001b6c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	66 8f       	std	Z+30, r22	; 0x1e
    1b70:	77 8f       	std	Z+31, r23	; 0x1f
}
    1b72:	08 95       	ret

00001b74 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1b7a:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1b7c:	1e a2       	std	Y+38, r1	; 0x26
    1b7e:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1b80:	bc 01       	movw	r22, r24
    1b82:	68 5d       	subi	r22, 0xD8	; 216
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	88 51       	subi	r24, 0x18	; 24
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	40 ec       	ldi	r20, 0xC0	; 192
    1b8c:	0e 94 89 0b 	call	0x1712	; 0x1712 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1b90:	1a 82       	std	Y+2, r1	; 0x02
    1b92:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1b94:	1c 82       	std	Y+4, r1	; 0x04
    1b96:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1b98:	1e 82       	std	Y+6, r1	; 0x06
    1b9a:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1b9c:	18 86       	std	Y+8, r1	; 0x08
    1b9e:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1ba0:	1a 86       	std	Y+10, r1	; 0x0a
    1ba2:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1ba4:	1c 86       	std	Y+12, r1	; 0x0c
    1ba6:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1ba8:	1e 86       	std	Y+14, r1	; 0x0e
    1baa:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1bac:	18 8a       	std	Y+16, r1	; 0x10
    1bae:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1bb0:	1a 8a       	std	Y+18, r1	; 0x12
    1bb2:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1bb4:	1c 8a       	std	Y+20, r1	; 0x14
    1bb6:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1bb8:	1e 8a       	std	Y+22, r1	; 0x16
    1bba:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1bbc:	18 8e       	std	Y+24, r1	; 0x18
    1bbe:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1bc0:	1a 8e       	std	Y+26, r1	; 0x1a
    1bc2:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1bc4:	1c 8e       	std	Y+28, r1	; 0x1c
    1bc6:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1bc8:	1e 8e       	std	Y+30, r1	; 0x1e
    1bca:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1bcc:	18 a2       	std	Y+32, r1	; 0x20
    1bce:	19 a2       	std	Y+33, r1	; 0x21
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1bec:	e4 2f       	mov	r30, r20
    1bee:	f5 2f       	mov	r31, r21
    1bf0:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1bf2:	8c 01       	movw	r16, r24
    1bf4:	08 51       	subi	r16, 0x18	; 24
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	61 91       	ld	r22, Z+
    1bfe:	6f 01       	movw	r12, r30
    1c00:	c8 01       	movw	r24, r16
    1c02:	49 83       	std	Y+1, r20	; 0x01
    1c04:	0e 94 90 0b 	call	0x1720	; 0x1720 <bytequeue_enqueue>
    1c08:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1c0a:	8c 2d       	mov	r24, r12
    1c0c:	84 1b       	sub	r24, r20
    1c0e:	8f 15       	cp	r24, r15
    1c10:	a0 f3       	brcs	.-24     	; 0x1bfa <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	08 95       	ret

00001c24 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1c24:	fc 01       	movw	r30, r24
    1c26:	60 83       	st	Z, r22
    1c28:	71 83       	std	Z+1, r23	; 0x01
}
    1c2a:	08 95       	ret

00001c2c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	60 a3       	std	Z+32, r22	; 0x20
    1c30:	71 a3       	std	Z+33, r23	; 0x21
}
    1c32:	08 95       	ret

00001c34 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	6b 01       	movw	r12, r22
    1c48:	14 2f       	mov	r17, r20
    1c4a:	e2 2e       	mov	r14, r18
    1c4c:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1c54:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c56:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <midi_input_callbacks+0x2a>
    1c5c:	83 c0       	rjmp	.+262    	; 0x1d64 <midi_input_callbacks+0x130>
    1c5e:	95 c0       	rjmp	.+298    	; 0x1d8a <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1c60:	62 30       	cpi	r22, 0x02	; 2
    1c62:	71 05       	cpc	r23, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <midi_input_callbacks+0x34>
    1c66:	42 c0       	rjmp	.+132    	; 0x1cec <midi_input_callbacks+0xb8>
    1c68:	63 30       	cpi	r22, 0x03	; 3
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <midi_input_callbacks+0x44>
    1c6e:	61 30       	cpi	r22, 0x01	; 1
    1c70:	71 05       	cpc	r23, r1
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <midi_input_callbacks+0x42>
    1c74:	73 c0       	rjmp	.+230    	; 0x1d5c <midi_input_callbacks+0x128>
    1c76:	60 c0       	rjmp	.+192    	; 0x1d38 <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1c78:	84 2f       	mov	r24, r20
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	80 7f       	andi	r24, 0xF0	; 240
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	80 3a       	cpi	r24, 0xA0	; 160
    1c82:	91 05       	cpc	r25, r1
    1c84:	e1 f0       	breq	.+56     	; 0x1cbe <midi_input_callbacks+0x8a>
    1c86:	81 3a       	cpi	r24, 0xA1	; 161
    1c88:	91 05       	cpc	r25, r1
    1c8a:	3c f4       	brge	.+14     	; 0x1c9a <midi_input_callbacks+0x66>
    1c8c:	80 38       	cpi	r24, 0x80	; 128
    1c8e:	91 05       	cpc	r25, r1
    1c90:	99 f0       	breq	.+38     	; 0x1cb8 <midi_input_callbacks+0x84>
    1c92:	80 39       	cpi	r24, 0x90	; 144
    1c94:	91 05       	cpc	r25, r1
    1c96:	f9 f4       	brne	.+62     	; 0x1cd6 <midi_input_callbacks+0xa2>
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <midi_input_callbacks+0x7e>
    1c9a:	80 3e       	cpi	r24, 0xE0	; 224
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	91 f0       	breq	.+36     	; 0x1cc4 <midi_input_callbacks+0x90>
    1ca0:	80 3f       	cpi	r24, 0xF0	; 240
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	91 f0       	breq	.+36     	; 0x1cca <midi_input_callbacks+0x96>
    1ca6:	80 3b       	cpi	r24, 0xB0	; 176
    1ca8:	91 05       	cpc	r25, r1
    1caa:	a9 f4       	brne	.+42     	; 0x1cd6 <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1cac:	ea 81       	ldd	r30, Y+2	; 0x02
    1cae:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1cb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb4:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1cb6:	11 c0       	rjmp	.+34     	; 0x1cda <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1cb8:	ee 81       	ldd	r30, Y+6	; 0x06
    1cba:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1cbc:	0e c0       	rjmp	.+28     	; 0x1cda <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1cbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1cc0:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1cc4:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cc6:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1cc8:	08 c0       	rjmp	.+16     	; 0x1cda <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1cca:	42 3f       	cpi	r20, 0xF2	; 242
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <midi_input_callbacks+0x9c>
    1cce:	5d c0       	rjmp	.+186    	; 0x1d8a <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1cd0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cd2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1cd6:	e0 e0       	ldi	r30, 0x00	; 0
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1cda:	30 97       	sbiw	r30, 0x00	; 0
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <midi_input_callbacks+0xac>
    1cde:	55 c0       	rjmp	.+170    	; 0x1d8a <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	61 2f       	mov	r22, r17
    1ce4:	4e 2d       	mov	r20, r14
    1ce6:	2f 2d       	mov	r18, r15
    1ce8:	09 95       	icall
    1cea:	42 c0       	rjmp	.+132    	; 0x1d70 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1cec:	84 2f       	mov	r24, r20
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	80 7f       	andi	r24, 0xF0	; 240
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	80 3d       	cpi	r24, 0xD0	; 208
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	49 f0       	breq	.+18     	; 0x1d0c <midi_input_callbacks+0xd8>
    1cfa:	80 3f       	cpi	r24, 0xF0	; 240
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	49 f0       	breq	.+18     	; 0x1d12 <midi_input_callbacks+0xde>
    1d00:	80 3c       	cpi	r24, 0xC0	; 192
    1d02:	91 05       	cpc	r25, r1
    1d04:	81 f4       	brne	.+32     	; 0x1d26 <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1d06:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d08:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1d0c:	e8 89       	ldd	r30, Y+16	; 0x10
    1d0e:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1d10:	0c c0       	rjmp	.+24     	; 0x1d2a <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1d12:	43 3f       	cpi	r20, 0xF3	; 243
    1d14:	19 f4       	brne	.+6      	; 0x1d1c <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1d16:	ea 89       	ldd	r30, Y+18	; 0x12
    1d18:	fb 89       	ldd	r31, Y+19	; 0x13
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1d1c:	41 3f       	cpi	r20, 0xF1	; 241
    1d1e:	a9 f5       	brne	.+106    	; 0x1d8a <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1d20:	ec 89       	ldd	r30, Y+20	; 0x14
    1d22:	fd 89       	ldd	r31, Y+21	; 0x15
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1d26:	e0 e0       	ldi	r30, 0x00	; 0
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	71 f1       	breq	.+92     	; 0x1d8a <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	61 2f       	mov	r22, r17
    1d32:	4e 2d       	mov	r20, r14
    1d34:	09 95       	icall
    1d36:	1c c0       	rjmp	.+56     	; 0x1d70 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1d38:	84 2f       	mov	r24, r20
    1d3a:	0e 94 11 0c 	call	0x1822	; 0x1822 <midi_is_realtime>
    1d3e:	88 23       	and	r24, r24
    1d40:	19 f0       	breq	.+6      	; 0x1d48 <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1d42:	ee 89       	ldd	r30, Y+22	; 0x16
    1d44:	ff 89       	ldd	r31, Y+23	; 0x17
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1d48:	16 3f       	cpi	r17, 0xF6	; 246
    1d4a:	f9 f4       	brne	.+62     	; 0x1d8a <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1d4c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1d4e:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1d50:	30 97       	sbiw	r30, 0x00	; 0
    1d52:	d9 f0       	breq	.+54     	; 0x1d8a <midi_input_callbacks+0x156>
                  func(device, byte0);
    1d54:	ce 01       	movw	r24, r28
    1d56:	61 2f       	mov	r22, r17
    1d58:	09 95       	icall
    1d5a:	0a c0       	rjmp	.+20     	; 0x1d70 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1d5c:	64 30       	cpi	r22, 0x04	; 4
    1d5e:	71 05       	cpc	r23, r1
    1d60:	90 f4       	brcc	.+36     	; 0x1d86 <midi_input_callbacks+0x152>
    1d62:	13 c0       	rjmp	.+38     	; 0x1d8a <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1d64:	ce 01       	movw	r24, r28
    1d66:	b6 01       	movw	r22, r12
    1d68:	41 2f       	mov	r20, r17
    1d6a:	2e 2d       	mov	r18, r14
    1d6c:	0f 2d       	mov	r16, r15
    1d6e:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1d70:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d72:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	71 f0       	breq	.+28     	; 0x1d94 <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1d78:	ce 01       	movw	r24, r28
    1d7a:	b6 01       	movw	r22, r12
    1d7c:	41 2f       	mov	r20, r17
    1d7e:	2e 2d       	mov	r18, r14
    1d80:	0f 2d       	mov	r16, r15
    1d82:	09 95       	icall
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1d86:	cc 24       	eor	r12, r12
    1d88:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1d8a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d8c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	49 f7       	brne	.-46     	; 0x1d64 <midi_input_callbacks+0x130>
    1d92:	ee cf       	rjmp	.-36     	; 0x1d70 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	08 95       	ret

00001da6 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	ec 01       	movw	r28, r24
    1db4:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1db6:	86 2f       	mov	r24, r22
    1db8:	0e 94 11 0c 	call	0x1822	; 0x1822 <midi_is_realtime>
    1dbc:	88 23       	and	r24, r24
    1dbe:	69 f0       	breq	.+26     	; 0x1dda <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1dc0:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	41 2f       	mov	r20, r17
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	00 e0       	ldi	r16, 0x00	; 0
    1dd2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_input_callbacks>
      device->input_state = state;
    1dd6:	ed a2       	std	Y+37, r14	; 0x25
    1dd8:	7e c0       	rjmp	.+252    	; 0x1ed6 <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1dda:	81 2f       	mov	r24, r17
    1ddc:	0e 94 0d 0c 	call	0x181a	; 0x181a <midi_is_statusbyte>
    1de0:	4d a1       	ldd	r20, Y+37	; 0x25
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <midi_process_byte+0x42>
    1de6:	42 c0       	rjmp	.+132    	; 0x1e6c <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1de8:	44 30       	cpi	r20, 0x04	; 4
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1dec:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	8e a3       	std	Y+38, r24	; 0x26
    1df4:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1df6:	81 2f       	mov	r24, r17
    1df8:	0e 94 17 0c 	call	0x182e	; 0x182e <midi_packet_length>
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	39 f0       	breq	.+14     	; 0x1e0e <midi_process_byte+0x68>
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	78 f0       	brcs	.+30     	; 0x1e22 <midi_process_byte+0x7c>
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	59 f0       	breq	.+22     	; 0x1e1e <midi_process_byte+0x78>
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	61 f5       	brne	.+88     	; 0x1e64 <midi_process_byte+0xbe>
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1e0e:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1e10:	ce 01       	movw	r24, r28
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	41 2f       	mov	r20, r17
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	00 e0       	ldi	r16, 0x00	; 0
    1e1c:	1f c0       	rjmp	.+62     	; 0x1e5c <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1e1e:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1e20:	5a c0       	rjmp	.+180    	; 0x1ed6 <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1e22:	10 3f       	cpi	r17, 0xF0	; 240
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <midi_process_byte+0x86>
    1e26:	17 3f       	cpi	r17, 0xF7	; 247
    1e28:	e9 f4       	brne	.+58     	; 0x1e64 <midi_process_byte+0xbe>
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1e30:	1a a3       	std	Y+34, r17	; 0x22
    1e32:	3f c0       	rjmp	.+126    	; 0x1eb2 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    1e34:	2e a1       	ldd	r18, Y+38	; 0x26
    1e36:	3f a1       	ldd	r19, Y+39	; 0x27
    1e38:	c9 01       	movw	r24, r18
    1e3a:	63 e0       	ldi	r22, 0x03	; 3
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodhi4>
    1e42:	8c 0f       	add	r24, r28
    1e44:	9d 1f       	adc	r25, r29
    1e46:	fc 01       	movw	r30, r24
    1e48:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	6e a3       	std	Y+38, r22	; 0x26
    1e52:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    1e54:	ce 01       	movw	r24, r28
    1e56:	4a a1       	ldd	r20, Y+34	; 0x22
    1e58:	2b a1       	ldd	r18, Y+35	; 0x23
    1e5a:	0c a1       	ldd	r16, Y+36	; 0x24
    1e5c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1e60:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1e62:	39 c0       	rjmp	.+114    	; 0x1ed6 <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    1e64:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1e66:	1e a2       	std	Y+38, r1	; 0x26
    1e68:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1e6a:	35 c0       	rjmp	.+106    	; 0x1ed6 <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1e6c:	44 23       	and	r20, r20
    1e6e:	99 f1       	breq	.+102    	; 0x1ed6 <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1e70:	2e a1       	ldd	r18, Y+38	; 0x26
    1e72:	3f a1       	ldd	r19, Y+39	; 0x27
    1e74:	c9 01       	movw	r24, r18
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodhi4>
    1e7e:	7c 01       	movw	r14, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	e8 0f       	add	r30, r24
    1e84:	f9 1f       	adc	r31, r25
    1e86:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1e88:	b9 01       	movw	r22, r18
    1e8a:	6f 5f       	subi	r22, 0xFF	; 255
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	6e a3       	std	Y+38, r22	; 0x26
    1e90:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	91 05       	cpc	r25, r1
    1e96:	91 f0       	breq	.+36     	; 0x1ebc <midi_process_byte+0x116>
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	e8 16       	cp	r14, r24
    1e9c:	f1 04       	cpc	r15, r1
    1e9e:	d9 f4       	brne	.+54     	; 0x1ed6 <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	4a a1       	ldd	r20, Y+34	; 0x22
    1ea4:	2b a1       	ldd	r18, Y+35	; 0x23
    1ea6:	0c a1       	ldd	r16, Y+36	; 0x24
    1ea8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	91 f0       	breq	.+36     	; 0x1ed6 <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	8e a3       	std	Y+38, r24	; 0x26
    1eb8:	9f a3       	std	Y+39, r25	; 0x27
    1eba:	0d c0       	rjmp	.+26     	; 0x1ed6 <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1ebc:	42 30       	cpi	r20, 0x02	; 2
    1ebe:	59 f4       	brne	.+22     	; 0x1ed6 <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	4a a1       	ldd	r20, Y+34	; 0x22
    1ec4:	2b a1       	ldd	r18, Y+35	; 0x23
    1ec6:	00 e0       	ldi	r16, 0x00	; 0
    1ec8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1ed2:	ee a2       	std	Y+38, r14	; 0x26
    1ed4:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	08 95       	ret

00001ee4 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1ef6:	e8 a1       	ldd	r30, Y+32	; 0x20
    1ef8:	f9 a1       	ldd	r31, Y+33	; 0x21
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    1efe:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1f00:	8e 01       	movw	r16, r28
    1f02:	08 51       	subi	r16, 0x18	; 24
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	c8 01       	movw	r24, r16
    1f08:	0e 94 c3 0b 	call	0x1786	; 0x1786 <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1f0c:	ee 24       	eor	r14, r14
    1f0e:	ff 24       	eor	r15, r15
    1f10:	c8 2e       	mov	r12, r24
    1f12:	dd 24       	eor	r13, r13
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1f16:	c8 01       	movw	r24, r16
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <bytequeue_get>
    1f1e:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1f26:	c8 01       	movw	r24, r16
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1f2e:	08 94       	sec
    1f30:	e1 1c       	adc	r14, r1
    1f32:	f1 1c       	adc	r15, r1
    1f34:	ec 14       	cp	r14, r12
    1f36:	fd 04       	cpc	r15, r13
    1f38:	70 f3       	brcs	.-36     	; 0x1f16 <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	08 95       	ret

00001f4c <__fixunssfsi>:
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	7b 01       	movw	r14, r22
    1f56:	8c 01       	movw	r16, r24
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	5f e4       	ldi	r21, 0x4F	; 79
    1f60:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__gesf2>
    1f64:	87 fd       	sbrc	r24, 7
    1f66:	11 c0       	rjmp	.+34     	; 0x1f8a <__fixunssfsi+0x3e>
    1f68:	c8 01       	movw	r24, r16
    1f6a:	b7 01       	movw	r22, r14
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	5f e4       	ldi	r21, 0x4F	; 79
    1f74:	0e 94 49 11 	call	0x2292	; 0x2292 <__subsf3>
    1f78:	0e 94 b2 13 	call	0x2764	; 0x2764 <__fixsfsi>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	20 50       	subi	r18, 0x00	; 0
    1f82:	30 40       	sbci	r19, 0x00	; 0
    1f84:	40 40       	sbci	r20, 0x00	; 0
    1f86:	50 48       	sbci	r21, 0x80	; 128
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <__fixunssfsi+0x4a>
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	b7 01       	movw	r22, r14
    1f8e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__fixsfsi>
    1f92:	9b 01       	movw	r18, r22
    1f94:	ac 01       	movw	r20, r24
    1f96:	b9 01       	movw	r22, r18
    1f98:	ca 01       	movw	r24, r20
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	08 95       	ret

00001fa4 <_fpadd_parts>:
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e8 ed       	ldi	r30, 0xD8	; 216
    1faa:	ff e0       	ldi	r31, 0x0F	; 15
    1fac:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x8>
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	ea 01       	movw	r28, r20
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	08 f4       	brcc	.+2      	; 0x1fbc <_fpadd_parts+0x18>
    1fba:	38 c1       	rjmp	.+624    	; 0x222c <_fpadd_parts+0x288>
    1fbc:	db 01       	movw	r26, r22
    1fbe:	9c 91       	ld	r25, X
    1fc0:	92 30       	cpi	r25, 0x02	; 2
    1fc2:	08 f4       	brcc	.+2      	; 0x1fc6 <_fpadd_parts+0x22>
    1fc4:	30 c1       	rjmp	.+608    	; 0x2226 <_fpadd_parts+0x282>
    1fc6:	84 30       	cpi	r24, 0x04	; 4
    1fc8:	59 f4       	brne	.+22     	; 0x1fe0 <_fpadd_parts+0x3c>
    1fca:	94 30       	cpi	r25, 0x04	; 4
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <_fpadd_parts+0x2c>
    1fce:	2e c1       	rjmp	.+604    	; 0x222c <_fpadd_parts+0x288>
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	8c 91       	ld	r24, X
    1fd6:	11 97       	sbiw	r26, 0x01	; 1
    1fd8:	98 17       	cp	r25, r24
    1fda:	09 f0       	breq	.+2      	; 0x1fde <_fpadd_parts+0x3a>
    1fdc:	21 c1       	rjmp	.+578    	; 0x2220 <_fpadd_parts+0x27c>
    1fde:	26 c1       	rjmp	.+588    	; 0x222c <_fpadd_parts+0x288>
    1fe0:	94 30       	cpi	r25, 0x04	; 4
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <_fpadd_parts+0x42>
    1fe4:	20 c1       	rjmp	.+576    	; 0x2226 <_fpadd_parts+0x282>
    1fe6:	92 30       	cpi	r25, 0x02	; 2
    1fe8:	b1 f4       	brne	.+44     	; 0x2016 <_fpadd_parts+0x72>
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <_fpadd_parts+0x4c>
    1fee:	1e c1       	rjmp	.+572    	; 0x222c <_fpadd_parts+0x288>
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	af 01       	movw	r20, r30
    1ff4:	28 e0       	ldi	r18, 0x08	; 8
    1ff6:	da 01       	movw	r26, r20
    1ff8:	0d 90       	ld	r0, X+
    1ffa:	ad 01       	movw	r20, r26
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	0d 92       	st	X+, r0
    2000:	cd 01       	movw	r24, r26
    2002:	21 50       	subi	r18, 0x01	; 1
    2004:	c1 f7       	brne	.-16     	; 0x1ff6 <_fpadd_parts+0x52>
    2006:	db 01       	movw	r26, r22
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	8c 91       	ld	r24, X
    200c:	11 97       	sbiw	r26, 0x01	; 1
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	89 23       	and	r24, r25
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	0a c1       	rjmp	.+532    	; 0x222a <_fpadd_parts+0x286>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	09 f4       	brne	.+2      	; 0x201c <_fpadd_parts+0x78>
    201a:	05 c1       	rjmp	.+522    	; 0x2226 <_fpadd_parts+0x282>
    201c:	c2 80       	ldd	r12, Z+2	; 0x02
    201e:	d3 80       	ldd	r13, Z+3	; 0x03
    2020:	db 01       	movw	r26, r22
    2022:	12 96       	adiw	r26, 0x02	; 2
    2024:	6d 90       	ld	r6, X+
    2026:	7c 90       	ld	r7, X
    2028:	13 97       	sbiw	r26, 0x03	; 3
    202a:	24 81       	ldd	r18, Z+4	; 0x04
    202c:	35 81       	ldd	r19, Z+5	; 0x05
    202e:	46 81       	ldd	r20, Z+6	; 0x06
    2030:	57 81       	ldd	r21, Z+7	; 0x07
    2032:	14 96       	adiw	r26, 0x04	; 4
    2034:	ed 90       	ld	r14, X+
    2036:	fd 90       	ld	r15, X+
    2038:	0d 91       	ld	r16, X+
    203a:	1c 91       	ld	r17, X
    203c:	17 97       	sbiw	r26, 0x07	; 7
    203e:	c6 01       	movw	r24, r12
    2040:	86 19       	sub	r24, r6
    2042:	97 09       	sbc	r25, r7
    2044:	5c 01       	movw	r10, r24
    2046:	97 ff       	sbrs	r25, 7
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <_fpadd_parts+0xae>
    204a:	aa 24       	eor	r10, r10
    204c:	bb 24       	eor	r11, r11
    204e:	a8 1a       	sub	r10, r24
    2050:	b9 0a       	sbc	r11, r25
    2052:	b0 e2       	ldi	r27, 0x20	; 32
    2054:	ab 16       	cp	r10, r27
    2056:	b1 04       	cpc	r11, r1
    2058:	0c f0       	brlt	.+2      	; 0x205c <_fpadd_parts+0xb8>
    205a:	61 c0       	rjmp	.+194    	; 0x211e <_fpadd_parts+0x17a>
    205c:	18 16       	cp	r1, r24
    205e:	19 06       	cpc	r1, r25
    2060:	6c f5       	brge	.+90     	; 0x20bc <_fpadd_parts+0x118>
    2062:	37 01       	movw	r6, r14
    2064:	48 01       	movw	r8, r16
    2066:	0a 2c       	mov	r0, r10
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <_fpadd_parts+0xce>
    206a:	96 94       	lsr	r9
    206c:	87 94       	ror	r8
    206e:	77 94       	ror	r7
    2070:	67 94       	ror	r6
    2072:	0a 94       	dec	r0
    2074:	d2 f7       	brpl	.-12     	; 0x206a <_fpadd_parts+0xc6>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e0       	ldi	r26, 0x00	; 0
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	0a 2c       	mov	r0, r10
    2080:	04 c0       	rjmp	.+8      	; 0x208a <_fpadd_parts+0xe6>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	aa 1f       	adc	r26, r26
    2088:	bb 1f       	adc	r27, r27
    208a:	0a 94       	dec	r0
    208c:	d2 f7       	brpl	.-12     	; 0x2082 <_fpadd_parts+0xde>
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	a1 09       	sbc	r26, r1
    2092:	b1 09       	sbc	r27, r1
    2094:	8e 21       	and	r24, r14
    2096:	9f 21       	and	r25, r15
    2098:	a0 23       	and	r26, r16
    209a:	b1 23       	and	r27, r17
    209c:	ee 24       	eor	r14, r14
    209e:	ff 24       	eor	r15, r15
    20a0:	87 01       	movw	r16, r14
    20a2:	e3 94       	inc	r14
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	a1 05       	cpc	r26, r1
    20a8:	b1 05       	cpc	r27, r1
    20aa:	19 f4       	brne	.+6      	; 0x20b2 <_fpadd_parts+0x10e>
    20ac:	ee 24       	eor	r14, r14
    20ae:	ff 24       	eor	r15, r15
    20b0:	87 01       	movw	r16, r14
    20b2:	e6 28       	or	r14, r6
    20b4:	f7 28       	or	r15, r7
    20b6:	08 29       	or	r16, r8
    20b8:	19 29       	or	r17, r9
    20ba:	3c c0       	rjmp	.+120    	; 0x2134 <_fpadd_parts+0x190>
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d1 f1       	breq	.+116    	; 0x2134 <_fpadd_parts+0x190>
    20c0:	ca 0c       	add	r12, r10
    20c2:	db 1c       	adc	r13, r11
    20c4:	39 01       	movw	r6, r18
    20c6:	4a 01       	movw	r8, r20
    20c8:	0a 2c       	mov	r0, r10
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <_fpadd_parts+0x130>
    20cc:	96 94       	lsr	r9
    20ce:	87 94       	ror	r8
    20d0:	77 94       	ror	r7
    20d2:	67 94       	ror	r6
    20d4:	0a 94       	dec	r0
    20d6:	d2 f7       	brpl	.-12     	; 0x20cc <_fpadd_parts+0x128>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e0       	ldi	r26, 0x00	; 0
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	0a 2c       	mov	r0, r10
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <_fpadd_parts+0x148>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	aa 1f       	adc	r26, r26
    20ea:	bb 1f       	adc	r27, r27
    20ec:	0a 94       	dec	r0
    20ee:	d2 f7       	brpl	.-12     	; 0x20e4 <_fpadd_parts+0x140>
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	a1 09       	sbc	r26, r1
    20f4:	b1 09       	sbc	r27, r1
    20f6:	82 23       	and	r24, r18
    20f8:	93 23       	and	r25, r19
    20fa:	a4 23       	and	r26, r20
    20fc:	b5 23       	and	r27, r21
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	a1 05       	cpc	r26, r1
    210a:	b1 05       	cpc	r27, r1
    210c:	19 f4       	brne	.+6      	; 0x2114 <_fpadd_parts+0x170>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	a9 01       	movw	r20, r18
    2114:	26 29       	or	r18, r6
    2116:	37 29       	or	r19, r7
    2118:	48 29       	or	r20, r8
    211a:	59 29       	or	r21, r9
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <_fpadd_parts+0x190>
    211e:	6c 14       	cp	r6, r12
    2120:	7d 04       	cpc	r7, r13
    2122:	24 f4       	brge	.+8      	; 0x212c <_fpadd_parts+0x188>
    2124:	ee 24       	eor	r14, r14
    2126:	ff 24       	eor	r15, r15
    2128:	87 01       	movw	r16, r14
    212a:	04 c0       	rjmp	.+8      	; 0x2134 <_fpadd_parts+0x190>
    212c:	63 01       	movw	r12, r6
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	a9 01       	movw	r20, r18
    2134:	81 81       	ldd	r24, Z+1	; 0x01
    2136:	fb 01       	movw	r30, r22
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	89 17       	cp	r24, r25
    213c:	09 f4       	brne	.+2      	; 0x2140 <_fpadd_parts+0x19c>
    213e:	45 c0       	rjmp	.+138    	; 0x21ca <_fpadd_parts+0x226>
    2140:	88 23       	and	r24, r24
    2142:	49 f0       	breq	.+18     	; 0x2156 <_fpadd_parts+0x1b2>
    2144:	d8 01       	movw	r26, r16
    2146:	c7 01       	movw	r24, r14
    2148:	82 1b       	sub	r24, r18
    214a:	93 0b       	sbc	r25, r19
    214c:	a4 0b       	sbc	r26, r20
    214e:	b5 0b       	sbc	r27, r21
    2150:	9c 01       	movw	r18, r24
    2152:	ad 01       	movw	r20, r26
    2154:	04 c0       	rjmp	.+8      	; 0x215e <_fpadd_parts+0x1ba>
    2156:	2e 19       	sub	r18, r14
    2158:	3f 09       	sbc	r19, r15
    215a:	40 0b       	sbc	r20, r16
    215c:	51 0b       	sbc	r21, r17
    215e:	57 fd       	sbrc	r21, 7
    2160:	04 c0       	rjmp	.+8      	; 0x216a <_fpadd_parts+0x1c6>
    2162:	19 82       	std	Y+1, r1	; 0x01
    2164:	ca 82       	std	Y+2, r12	; 0x02
    2166:	db 82       	std	Y+3, r13	; 0x03
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <_fpadd_parts+0x1dc>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	ca 82       	std	Y+2, r12	; 0x02
    2170:	db 82       	std	Y+3, r13	; 0x03
    2172:	50 95       	com	r21
    2174:	40 95       	com	r20
    2176:	30 95       	com	r19
    2178:	21 95       	neg	r18
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	4f 4f       	sbci	r20, 0xFF	; 255
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	2c 83       	std	Y+4, r18	; 0x04
    2182:	3d 83       	std	Y+5, r19	; 0x05
    2184:	4e 83       	std	Y+6, r20	; 0x06
    2186:	5f 83       	std	Y+7, r21	; 0x07
    2188:	0d c0       	rjmp	.+26     	; 0x21a4 <_fpadd_parts+0x200>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	aa 1f       	adc	r26, r26
    2190:	bb 1f       	adc	r27, r27
    2192:	8c 83       	std	Y+4, r24	; 0x04
    2194:	9d 83       	std	Y+5, r25	; 0x05
    2196:	ae 83       	std	Y+6, r26	; 0x06
    2198:	bf 83       	std	Y+7, r27	; 0x07
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	8a 83       	std	Y+2, r24	; 0x02
    21a2:	9b 83       	std	Y+3, r25	; 0x03
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	ae 81       	ldd	r26, Y+6	; 0x06
    21aa:	bf 81       	ldd	r27, Y+7	; 0x07
    21ac:	9c 01       	movw	r18, r24
    21ae:	ad 01       	movw	r20, r26
    21b0:	21 50       	subi	r18, 0x01	; 1
    21b2:	30 40       	sbci	r19, 0x00	; 0
    21b4:	40 40       	sbci	r20, 0x00	; 0
    21b6:	50 40       	sbci	r21, 0x00	; 0
    21b8:	2f 3f       	cpi	r18, 0xFF	; 255
    21ba:	ef ef       	ldi	r30, 0xFF	; 255
    21bc:	3e 07       	cpc	r19, r30
    21be:	ef ef       	ldi	r30, 0xFF	; 255
    21c0:	4e 07       	cpc	r20, r30
    21c2:	ef e3       	ldi	r30, 0x3F	; 63
    21c4:	5e 07       	cpc	r21, r30
    21c6:	08 f3       	brcs	.-62     	; 0x218a <_fpadd_parts+0x1e6>
    21c8:	0b c0       	rjmp	.+22     	; 0x21e0 <_fpadd_parts+0x23c>
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	ca 82       	std	Y+2, r12	; 0x02
    21ce:	db 82       	std	Y+3, r13	; 0x03
    21d0:	2e 0d       	add	r18, r14
    21d2:	3f 1d       	adc	r19, r15
    21d4:	40 1f       	adc	r20, r16
    21d6:	51 1f       	adc	r21, r17
    21d8:	2c 83       	std	Y+4, r18	; 0x04
    21da:	3d 83       	std	Y+5, r19	; 0x05
    21dc:	4e 83       	std	Y+6, r20	; 0x06
    21de:	5f 83       	std	Y+7, r21	; 0x07
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	88 83       	st	Y, r24
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	4e 81       	ldd	r20, Y+6	; 0x06
    21ea:	5f 81       	ldd	r21, Y+7	; 0x07
    21ec:	57 ff       	sbrs	r21, 7
    21ee:	1d c0       	rjmp	.+58     	; 0x222a <_fpadd_parts+0x286>
    21f0:	da 01       	movw	r26, r20
    21f2:	c9 01       	movw	r24, r18
    21f4:	81 70       	andi	r24, 0x01	; 1
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	a0 70       	andi	r26, 0x00	; 0
    21fa:	b0 70       	andi	r27, 0x00	; 0
    21fc:	56 95       	lsr	r21
    21fe:	47 95       	ror	r20
    2200:	37 95       	ror	r19
    2202:	27 95       	ror	r18
    2204:	82 2b       	or	r24, r18
    2206:	93 2b       	or	r25, r19
    2208:	a4 2b       	or	r26, r20
    220a:	b5 2b       	or	r27, r21
    220c:	8c 83       	std	Y+4, r24	; 0x04
    220e:	9d 83       	std	Y+5, r25	; 0x05
    2210:	ae 83       	std	Y+6, r26	; 0x06
    2212:	bf 83       	std	Y+7, r27	; 0x07
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	9b 83       	std	Y+3, r25	; 0x03
    221e:	05 c0       	rjmp	.+10     	; 0x222a <_fpadd_parts+0x286>
    2220:	ef e2       	ldi	r30, 0x2F	; 47
    2222:	f0 e2       	ldi	r31, 0x20	; 32
    2224:	03 c0       	rjmp	.+6      	; 0x222c <_fpadd_parts+0x288>
    2226:	fb 01       	movw	r30, r22
    2228:	01 c0       	rjmp	.+2      	; 0x222c <_fpadd_parts+0x288>
    222a:	fe 01       	movw	r30, r28
    222c:	cf 01       	movw	r24, r30
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	ee e0       	ldi	r30, 0x0E	; 14
    2234:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x8>

00002238 <__addsf3>:
    2238:	a0 e2       	ldi	r26, 0x20	; 32
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e2 e2       	ldi	r30, 0x22	; 34
    223e:	f1 e1       	ldi	r31, 0x11	; 17
    2240:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x18>
    2244:	69 83       	std	Y+1, r22	; 0x01
    2246:	7a 83       	std	Y+2, r23	; 0x02
    2248:	8b 83       	std	Y+3, r24	; 0x03
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	2d 83       	std	Y+5, r18	; 0x05
    224e:	3e 83       	std	Y+6, r19	; 0x06
    2250:	4f 83       	std	Y+7, r20	; 0x07
    2252:	58 87       	std	Y+8, r21	; 0x08
    2254:	89 e0       	ldi	r24, 0x09	; 9
    2256:	e8 2e       	mov	r14, r24
    2258:	f1 2c       	mov	r15, r1
    225a:	ec 0e       	add	r14, r28
    225c:	fd 1e       	adc	r15, r29
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	b7 01       	movw	r22, r14
    2264:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2268:	8e 01       	movw	r16, r28
    226a:	0f 5e       	subi	r16, 0xEF	; 239
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	ce 01       	movw	r24, r28
    2270:	05 96       	adiw	r24, 0x05	; 5
    2272:	b8 01       	movw	r22, r16
    2274:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2278:	c7 01       	movw	r24, r14
    227a:	b8 01       	movw	r22, r16
    227c:	ae 01       	movw	r20, r28
    227e:	47 5e       	subi	r20, 0xE7	; 231
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_fpadd_parts>
    2286:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__pack_f>
    228a:	a0 96       	adiw	r28, 0x20	; 32
    228c:	e6 e0       	ldi	r30, 0x06	; 6
    228e:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

00002292 <__subsf3>:
    2292:	a0 e2       	ldi	r26, 0x20	; 32
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f1 e1       	ldi	r31, 0x11	; 17
    229a:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x18>
    229e:	69 83       	std	Y+1, r22	; 0x01
    22a0:	7a 83       	std	Y+2, r23	; 0x02
    22a2:	8b 83       	std	Y+3, r24	; 0x03
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	2d 83       	std	Y+5, r18	; 0x05
    22a8:	3e 83       	std	Y+6, r19	; 0x06
    22aa:	4f 83       	std	Y+7, r20	; 0x07
    22ac:	58 87       	std	Y+8, r21	; 0x08
    22ae:	8e 01       	movw	r16, r28
    22b0:	07 5f       	subi	r16, 0xF7	; 247
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	b8 01       	movw	r22, r16
    22ba:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    22be:	91 e1       	ldi	r25, 0x11	; 17
    22c0:	e9 2e       	mov	r14, r25
    22c2:	f1 2c       	mov	r15, r1
    22c4:	ec 0e       	add	r14, r28
    22c6:	fd 1e       	adc	r15, r29
    22c8:	ce 01       	movw	r24, r28
    22ca:	05 96       	adiw	r24, 0x05	; 5
    22cc:	b7 01       	movw	r22, r14
    22ce:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    22d2:	8a 89       	ldd	r24, Y+18	; 0x12
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	89 27       	eor	r24, r25
    22d8:	8a 8b       	std	Y+18, r24	; 0x12
    22da:	c8 01       	movw	r24, r16
    22dc:	b7 01       	movw	r22, r14
    22de:	ae 01       	movw	r20, r28
    22e0:	47 5e       	subi	r20, 0xE7	; 231
    22e2:	5f 4f       	sbci	r21, 0xFF	; 255
    22e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_fpadd_parts>
    22e8:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__pack_f>
    22ec:	a0 96       	adiw	r28, 0x20	; 32
    22ee:	e6 e0       	ldi	r30, 0x06	; 6
    22f0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

000022f4 <__mulsf3>:
    22f4:	a0 e2       	ldi	r26, 0x20	; 32
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e8       	ldi	r30, 0x80	; 128
    22fa:	f1 e1       	ldi	r31, 0x11	; 17
    22fc:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__prologue_saves__>
    2300:	69 83       	std	Y+1, r22	; 0x01
    2302:	7a 83       	std	Y+2, r23	; 0x02
    2304:	8b 83       	std	Y+3, r24	; 0x03
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	2d 83       	std	Y+5, r18	; 0x05
    230a:	3e 83       	std	Y+6, r19	; 0x06
    230c:	4f 83       	std	Y+7, r20	; 0x07
    230e:	58 87       	std	Y+8, r21	; 0x08
    2310:	ce 01       	movw	r24, r28
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	be 01       	movw	r22, r28
    2316:	67 5f       	subi	r22, 0xF7	; 247
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    231e:	ce 01       	movw	r24, r28
    2320:	05 96       	adiw	r24, 0x05	; 5
    2322:	be 01       	movw	r22, r28
    2324:	6f 5e       	subi	r22, 0xEF	; 239
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    232c:	99 85       	ldd	r25, Y+9	; 0x09
    232e:	92 30       	cpi	r25, 0x02	; 2
    2330:	78 f0       	brcs	.+30     	; 0x2350 <__mulsf3+0x5c>
    2332:	89 89       	ldd	r24, Y+17	; 0x11
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	c0 f0       	brcs	.+48     	; 0x2368 <__mulsf3+0x74>
    2338:	94 30       	cpi	r25, 0x04	; 4
    233a:	19 f4       	brne	.+6      	; 0x2342 <__mulsf3+0x4e>
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	41 f4       	brne	.+16     	; 0x2350 <__mulsf3+0x5c>
    2340:	cb c0       	rjmp	.+406    	; 0x24d8 <__mulsf3+0x1e4>
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	19 f4       	brne	.+6      	; 0x234c <__mulsf3+0x58>
    2346:	92 30       	cpi	r25, 0x02	; 2
    2348:	79 f4       	brne	.+30     	; 0x2368 <__mulsf3+0x74>
    234a:	c6 c0       	rjmp	.+396    	; 0x24d8 <__mulsf3+0x1e4>
    234c:	92 30       	cpi	r25, 0x02	; 2
    234e:	51 f4       	brne	.+20     	; 0x2364 <__mulsf3+0x70>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	2a 85       	ldd	r18, Y+10	; 0x0a
    2354:	9a 89       	ldd	r25, Y+18	; 0x12
    2356:	29 17       	cp	r18, r25
    2358:	09 f4       	brne	.+2      	; 0x235c <__mulsf3+0x68>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	8a 87       	std	Y+10, r24	; 0x0a
    235e:	ce 01       	movw	r24, r28
    2360:	09 96       	adiw	r24, 0x09	; 9
    2362:	bc c0       	rjmp	.+376    	; 0x24dc <__mulsf3+0x1e8>
    2364:	82 30       	cpi	r24, 0x02	; 2
    2366:	51 f4       	brne	.+20     	; 0x237c <__mulsf3+0x88>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	2a 85       	ldd	r18, Y+10	; 0x0a
    236c:	9a 89       	ldd	r25, Y+18	; 0x12
    236e:	29 17       	cp	r18, r25
    2370:	09 f4       	brne	.+2      	; 0x2374 <__mulsf3+0x80>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	8a 8b       	std	Y+18, r24	; 0x12
    2376:	ce 01       	movw	r24, r28
    2378:	41 96       	adiw	r24, 0x11	; 17
    237a:	b0 c0       	rjmp	.+352    	; 0x24dc <__mulsf3+0x1e8>
    237c:	6d 84       	ldd	r6, Y+13	; 0x0d
    237e:	7e 84       	ldd	r7, Y+14	; 0x0e
    2380:	8f 84       	ldd	r8, Y+15	; 0x0f
    2382:	98 88       	ldd	r9, Y+16	; 0x10
    2384:	ed 88       	ldd	r14, Y+21	; 0x15
    2386:	fe 88       	ldd	r15, Y+22	; 0x16
    2388:	0f 89       	ldd	r16, Y+23	; 0x17
    238a:	18 8d       	ldd	r17, Y+24	; 0x18
    238c:	e0 e2       	ldi	r30, 0x20	; 32
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	dc 01       	movw	r26, r24
    2396:	aa 24       	eor	r10, r10
    2398:	bb 24       	eor	r11, r11
    239a:	65 01       	movw	r12, r10
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	a9 01       	movw	r20, r18
    23a2:	b3 01       	movw	r22, r6
    23a4:	61 70       	andi	r22, 0x01	; 1
    23a6:	70 70       	andi	r23, 0x00	; 0
    23a8:	61 15       	cp	r22, r1
    23aa:	71 05       	cpc	r23, r1
    23ac:	d1 f0       	breq	.+52     	; 0x23e2 <__mulsf3+0xee>
    23ae:	2e 0d       	add	r18, r14
    23b0:	3f 1d       	adc	r19, r15
    23b2:	40 1f       	adc	r20, r16
    23b4:	51 1f       	adc	r21, r17
    23b6:	15 01       	movw	r2, r10
    23b8:	26 01       	movw	r4, r12
    23ba:	28 0e       	add	r2, r24
    23bc:	39 1e       	adc	r3, r25
    23be:	4a 1e       	adc	r4, r26
    23c0:	5b 1e       	adc	r5, r27
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	2e 15       	cp	r18, r14
    23cc:	3f 05       	cpc	r19, r15
    23ce:	40 07       	cpc	r20, r16
    23d0:	51 07       	cpc	r21, r17
    23d2:	18 f0       	brcs	.+6      	; 0x23da <__mulsf3+0xe6>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	dc 01       	movw	r26, r24
    23da:	82 0d       	add	r24, r2
    23dc:	93 1d       	adc	r25, r3
    23de:	a4 1d       	adc	r26, r4
    23e0:	b5 1d       	adc	r27, r5
    23e2:	aa 0c       	add	r10, r10
    23e4:	bb 1c       	adc	r11, r11
    23e6:	cc 1c       	adc	r12, r12
    23e8:	dd 1c       	adc	r13, r13
    23ea:	17 ff       	sbrs	r17, 7
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <__mulsf3+0x10c>
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	26 2e       	mov	r2, r22
    23f2:	31 2c       	mov	r3, r1
    23f4:	41 2c       	mov	r4, r1
    23f6:	51 2c       	mov	r5, r1
    23f8:	a2 28       	or	r10, r2
    23fa:	b3 28       	or	r11, r3
    23fc:	c4 28       	or	r12, r4
    23fe:	d5 28       	or	r13, r5
    2400:	31 97       	sbiw	r30, 0x01	; 1
    2402:	49 f0       	breq	.+18     	; 0x2416 <__mulsf3+0x122>
    2404:	ee 0c       	add	r14, r14
    2406:	ff 1c       	adc	r15, r15
    2408:	00 1f       	adc	r16, r16
    240a:	11 1f       	adc	r17, r17
    240c:	96 94       	lsr	r9
    240e:	87 94       	ror	r8
    2410:	77 94       	ror	r7
    2412:	67 94       	ror	r6
    2414:	c6 cf       	rjmp	.-116    	; 0x23a2 <__mulsf3+0xae>
    2416:	6b 89       	ldd	r22, Y+19	; 0x13
    2418:	7c 89       	ldd	r23, Y+20	; 0x14
    241a:	eb 85       	ldd	r30, Y+11	; 0x0b
    241c:	fc 85       	ldd	r31, Y+12	; 0x0c
    241e:	6e 0f       	add	r22, r30
    2420:	7f 1f       	adc	r23, r31
    2422:	6e 5f       	subi	r22, 0xFE	; 254
    2424:	7f 4f       	sbci	r23, 0xFF	; 255
    2426:	6b 8f       	std	Y+27, r22	; 0x1b
    2428:	7c 8f       	std	Y+28, r23	; 0x1c
    242a:	61 e0       	ldi	r22, 0x01	; 1
    242c:	ea 85       	ldd	r30, Y+10	; 0x0a
    242e:	7a 89       	ldd	r23, Y+18	; 0x12
    2430:	e7 17       	cp	r30, r23
    2432:	09 f4       	brne	.+2      	; 0x2436 <__mulsf3+0x142>
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	6a 8f       	std	Y+26, r22	; 0x1a
    2438:	6b 8d       	ldd	r22, Y+27	; 0x1b
    243a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    243c:	10 c0       	rjmp	.+32     	; 0x245e <__mulsf3+0x16a>
    243e:	fc 01       	movw	r30, r24
    2440:	e1 70       	andi	r30, 0x01	; 1
    2442:	f0 70       	andi	r31, 0x00	; 0
    2444:	30 97       	sbiw	r30, 0x00	; 0
    2446:	29 f0       	breq	.+10     	; 0x2452 <__mulsf3+0x15e>
    2448:	56 95       	lsr	r21
    244a:	47 95       	ror	r20
    244c:	37 95       	ror	r19
    244e:	27 95       	ror	r18
    2450:	50 68       	ori	r21, 0x80	; 128
    2452:	b6 95       	lsr	r27
    2454:	a7 95       	ror	r26
    2456:	97 95       	ror	r25
    2458:	87 95       	ror	r24
    245a:	6f 5f       	subi	r22, 0xFF	; 255
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	b7 fd       	sbrc	r27, 7
    2460:	ee cf       	rjmp	.-36     	; 0x243e <__mulsf3+0x14a>
    2462:	0c c0       	rjmp	.+24     	; 0x247c <__mulsf3+0x188>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	aa 1f       	adc	r26, r26
    246a:	bb 1f       	adc	r27, r27
    246c:	57 fd       	sbrc	r21, 7
    246e:	81 60       	ori	r24, 0x01	; 1
    2470:	22 0f       	add	r18, r18
    2472:	33 1f       	adc	r19, r19
    2474:	44 1f       	adc	r20, r20
    2476:	55 1f       	adc	r21, r21
    2478:	61 50       	subi	r22, 0x01	; 1
    247a:	70 40       	sbci	r23, 0x00	; 0
    247c:	80 30       	cpi	r24, 0x00	; 0
    247e:	e0 e0       	ldi	r30, 0x00	; 0
    2480:	9e 07       	cpc	r25, r30
    2482:	e0 e0       	ldi	r30, 0x00	; 0
    2484:	ae 07       	cpc	r26, r30
    2486:	e0 e4       	ldi	r30, 0x40	; 64
    2488:	be 07       	cpc	r27, r30
    248a:	60 f3       	brcs	.-40     	; 0x2464 <__mulsf3+0x170>
    248c:	6b 8f       	std	Y+27, r22	; 0x1b
    248e:	7c 8f       	std	Y+28, r23	; 0x1c
    2490:	6f e7       	ldi	r22, 0x7F	; 127
    2492:	e6 2e       	mov	r14, r22
    2494:	f1 2c       	mov	r15, r1
    2496:	01 2d       	mov	r16, r1
    2498:	11 2d       	mov	r17, r1
    249a:	e8 22       	and	r14, r24
    249c:	f9 22       	and	r15, r25
    249e:	0a 23       	and	r16, r26
    24a0:	1b 23       	and	r17, r27
    24a2:	60 e4       	ldi	r22, 0x40	; 64
    24a4:	e6 16       	cp	r14, r22
    24a6:	f1 04       	cpc	r15, r1
    24a8:	01 05       	cpc	r16, r1
    24aa:	11 05       	cpc	r17, r1
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <__mulsf3+0x1d2>
    24ae:	87 fd       	sbrc	r24, 7
    24b0:	0a c0       	rjmp	.+20     	; 0x24c6 <__mulsf3+0x1d2>
    24b2:	21 15       	cp	r18, r1
    24b4:	31 05       	cpc	r19, r1
    24b6:	41 05       	cpc	r20, r1
    24b8:	51 05       	cpc	r21, r1
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <__mulsf3+0x1d2>
    24bc:	80 5c       	subi	r24, 0xC0	; 192
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	af 4f       	sbci	r26, 0xFF	; 255
    24c2:	bf 4f       	sbci	r27, 0xFF	; 255
    24c4:	80 78       	andi	r24, 0x80	; 128
    24c6:	8d 8f       	std	Y+29, r24	; 0x1d
    24c8:	9e 8f       	std	Y+30, r25	; 0x1e
    24ca:	af 8f       	std	Y+31, r26	; 0x1f
    24cc:	b8 a3       	std	Y+32, r27	; 0x20
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	89 8f       	std	Y+25, r24	; 0x19
    24d2:	ce 01       	movw	r24, r28
    24d4:	49 96       	adiw	r24, 0x19	; 25
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <__mulsf3+0x1e8>
    24d8:	8f e2       	ldi	r24, 0x2F	; 47
    24da:	90 e2       	ldi	r25, 0x20	; 32
    24dc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__pack_f>
    24e0:	a0 96       	adiw	r28, 0x20	; 32
    24e2:	e2 e1       	ldi	r30, 0x12	; 18
    24e4:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__epilogue_restores__>

000024e8 <__divsf3>:
    24e8:	a8 e1       	ldi	r26, 0x18	; 24
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ea e7       	ldi	r30, 0x7A	; 122
    24ee:	f2 e1       	ldi	r31, 0x12	; 18
    24f0:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x10>
    24f4:	69 83       	std	Y+1, r22	; 0x01
    24f6:	7a 83       	std	Y+2, r23	; 0x02
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	2d 83       	std	Y+5, r18	; 0x05
    24fe:	3e 83       	std	Y+6, r19	; 0x06
    2500:	4f 83       	std	Y+7, r20	; 0x07
    2502:	58 87       	std	Y+8, r21	; 0x08
    2504:	8e 01       	movw	r16, r28
    2506:	07 5f       	subi	r16, 0xF7	; 247
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	ce 01       	movw	r24, r28
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	b8 01       	movw	r22, r16
    2510:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2514:	81 e1       	ldi	r24, 0x11	; 17
    2516:	e8 2e       	mov	r14, r24
    2518:	f1 2c       	mov	r15, r1
    251a:	ec 0e       	add	r14, r28
    251c:	fd 1e       	adc	r15, r29
    251e:	ce 01       	movw	r24, r28
    2520:	05 96       	adiw	r24, 0x05	; 5
    2522:	b7 01       	movw	r22, r14
    2524:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2528:	99 85       	ldd	r25, Y+9	; 0x09
    252a:	92 30       	cpi	r25, 0x02	; 2
    252c:	08 f4       	brcc	.+2      	; 0x2530 <__divsf3+0x48>
    252e:	83 c0       	rjmp	.+262    	; 0x2636 <__divsf3+0x14e>
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	08 f4       	brcc	.+2      	; 0x2538 <__divsf3+0x50>
    2536:	7b c0       	rjmp	.+246    	; 0x262e <__divsf3+0x146>
    2538:	2a 85       	ldd	r18, Y+10	; 0x0a
    253a:	3a 89       	ldd	r19, Y+18	; 0x12
    253c:	23 27       	eor	r18, r19
    253e:	2a 87       	std	Y+10, r18	; 0x0a
    2540:	94 30       	cpi	r25, 0x04	; 4
    2542:	11 f0       	breq	.+4      	; 0x2548 <__divsf3+0x60>
    2544:	92 30       	cpi	r25, 0x02	; 2
    2546:	21 f4       	brne	.+8      	; 0x2550 <__divsf3+0x68>
    2548:	98 17       	cp	r25, r24
    254a:	09 f0       	breq	.+2      	; 0x254e <__divsf3+0x66>
    254c:	6c c0       	rjmp	.+216    	; 0x2626 <__divsf3+0x13e>
    254e:	71 c0       	rjmp	.+226    	; 0x2632 <__divsf3+0x14a>
    2550:	84 30       	cpi	r24, 0x04	; 4
    2552:	39 f4       	brne	.+14     	; 0x2562 <__divsf3+0x7a>
    2554:	1d 86       	std	Y+13, r1	; 0x0d
    2556:	1e 86       	std	Y+14, r1	; 0x0e
    2558:	1f 86       	std	Y+15, r1	; 0x0f
    255a:	18 8a       	std	Y+16, r1	; 0x10
    255c:	1b 86       	std	Y+11, r1	; 0x0b
    255e:	1c 86       	std	Y+12, r1	; 0x0c
    2560:	6a c0       	rjmp	.+212    	; 0x2636 <__divsf3+0x14e>
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	19 f4       	brne	.+6      	; 0x256c <__divsf3+0x84>
    2566:	84 e0       	ldi	r24, 0x04	; 4
    2568:	89 87       	std	Y+9, r24	; 0x09
    256a:	65 c0       	rjmp	.+202    	; 0x2636 <__divsf3+0x14e>
    256c:	8b 85       	ldd	r24, Y+11	; 0x0b
    256e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2570:	2b 89       	ldd	r18, Y+19	; 0x13
    2572:	3c 89       	ldd	r19, Y+20	; 0x14
    2574:	82 1b       	sub	r24, r18
    2576:	93 0b       	sbc	r25, r19
    2578:	8b 87       	std	Y+11, r24	; 0x0b
    257a:	9c 87       	std	Y+12, r25	; 0x0c
    257c:	2d 85       	ldd	r18, Y+13	; 0x0d
    257e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2580:	4f 85       	ldd	r20, Y+15	; 0x0f
    2582:	58 89       	ldd	r21, Y+16	; 0x10
    2584:	ed 88       	ldd	r14, Y+21	; 0x15
    2586:	fe 88       	ldd	r15, Y+22	; 0x16
    2588:	0f 89       	ldd	r16, Y+23	; 0x17
    258a:	18 8d       	ldd	r17, Y+24	; 0x18
    258c:	2e 15       	cp	r18, r14
    258e:	3f 05       	cpc	r19, r15
    2590:	40 07       	cpc	r20, r16
    2592:	51 07       	cpc	r21, r17
    2594:	38 f4       	brcc	.+14     	; 0x25a4 <__divsf3+0xbc>
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	44 1f       	adc	r20, r20
    259c:	55 1f       	adc	r21, r21
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	8b 87       	std	Y+11, r24	; 0x0b
    25a2:	9c 87       	std	Y+12, r25	; 0x0c
    25a4:	6f e1       	ldi	r22, 0x1F	; 31
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	a1 2c       	mov	r10, r1
    25aa:	b1 2c       	mov	r11, r1
    25ac:	c1 2c       	mov	r12, r1
    25ae:	a0 e4       	ldi	r26, 0x40	; 64
    25b0:	da 2e       	mov	r13, r26
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	dc 01       	movw	r26, r24
    25b8:	2e 15       	cp	r18, r14
    25ba:	3f 05       	cpc	r19, r15
    25bc:	40 07       	cpc	r20, r16
    25be:	51 07       	cpc	r21, r17
    25c0:	40 f0       	brcs	.+16     	; 0x25d2 <__divsf3+0xea>
    25c2:	8a 29       	or	r24, r10
    25c4:	9b 29       	or	r25, r11
    25c6:	ac 29       	or	r26, r12
    25c8:	bd 29       	or	r27, r13
    25ca:	2e 19       	sub	r18, r14
    25cc:	3f 09       	sbc	r19, r15
    25ce:	40 0b       	sbc	r20, r16
    25d0:	51 0b       	sbc	r21, r17
    25d2:	d6 94       	lsr	r13
    25d4:	c7 94       	ror	r12
    25d6:	b7 94       	ror	r11
    25d8:	a7 94       	ror	r10
    25da:	22 0f       	add	r18, r18
    25dc:	33 1f       	adc	r19, r19
    25de:	44 1f       	adc	r20, r20
    25e0:	55 1f       	adc	r21, r21
    25e2:	61 50       	subi	r22, 0x01	; 1
    25e4:	70 40       	sbci	r23, 0x00	; 0
    25e6:	41 f7       	brne	.-48     	; 0x25b8 <__divsf3+0xd0>
    25e8:	6f e7       	ldi	r22, 0x7F	; 127
    25ea:	e6 2e       	mov	r14, r22
    25ec:	f1 2c       	mov	r15, r1
    25ee:	01 2d       	mov	r16, r1
    25f0:	11 2d       	mov	r17, r1
    25f2:	e8 22       	and	r14, r24
    25f4:	f9 22       	and	r15, r25
    25f6:	0a 23       	and	r16, r26
    25f8:	1b 23       	and	r17, r27
    25fa:	60 e4       	ldi	r22, 0x40	; 64
    25fc:	e6 16       	cp	r14, r22
    25fe:	f1 04       	cpc	r15, r1
    2600:	01 05       	cpc	r16, r1
    2602:	11 05       	cpc	r17, r1
    2604:	61 f4       	brne	.+24     	; 0x261e <__divsf3+0x136>
    2606:	87 fd       	sbrc	r24, 7
    2608:	0a c0       	rjmp	.+20     	; 0x261e <__divsf3+0x136>
    260a:	21 15       	cp	r18, r1
    260c:	31 05       	cpc	r19, r1
    260e:	41 05       	cpc	r20, r1
    2610:	51 05       	cpc	r21, r1
    2612:	29 f0       	breq	.+10     	; 0x261e <__divsf3+0x136>
    2614:	80 5c       	subi	r24, 0xC0	; 192
    2616:	9f 4f       	sbci	r25, 0xFF	; 255
    2618:	af 4f       	sbci	r26, 0xFF	; 255
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	80 78       	andi	r24, 0x80	; 128
    261e:	8d 87       	std	Y+13, r24	; 0x0d
    2620:	9e 87       	std	Y+14, r25	; 0x0e
    2622:	af 87       	std	Y+15, r26	; 0x0f
    2624:	b8 8b       	std	Y+16, r27	; 0x10
    2626:	8e 01       	movw	r16, r28
    2628:	07 5f       	subi	r16, 0xF7	; 247
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <__divsf3+0x14e>
    262e:	87 01       	movw	r16, r14
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <__divsf3+0x14e>
    2632:	0f e2       	ldi	r16, 0x2F	; 47
    2634:	10 e2       	ldi	r17, 0x20	; 32
    2636:	c8 01       	movw	r24, r16
    2638:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__pack_f>
    263c:	68 96       	adiw	r28, 0x18	; 24
    263e:	ea e0       	ldi	r30, 0x0A	; 10
    2640:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__epilogue_restores__+0x10>

00002644 <__gtsf2>:
    2644:	a8 e1       	ldi	r26, 0x18	; 24
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e8 e2       	ldi	r30, 0x28	; 40
    264a:	f3 e1       	ldi	r31, 0x13	; 19
    264c:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x18>
    2650:	69 83       	std	Y+1, r22	; 0x01
    2652:	7a 83       	std	Y+2, r23	; 0x02
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	2d 83       	std	Y+5, r18	; 0x05
    265a:	3e 83       	std	Y+6, r19	; 0x06
    265c:	4f 83       	std	Y+7, r20	; 0x07
    265e:	58 87       	std	Y+8, r21	; 0x08
    2660:	8e 01       	movw	r16, r28
    2662:	07 5f       	subi	r16, 0xF7	; 247
    2664:	1f 4f       	sbci	r17, 0xFF	; 255
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	b8 01       	movw	r22, r16
    266c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2670:	81 e1       	ldi	r24, 0x11	; 17
    2672:	e8 2e       	mov	r14, r24
    2674:	f1 2c       	mov	r15, r1
    2676:	ec 0e       	add	r14, r28
    2678:	fd 1e       	adc	r15, r29
    267a:	ce 01       	movw	r24, r28
    267c:	05 96       	adiw	r24, 0x05	; 5
    267e:	b7 01       	movw	r22, r14
    2680:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	40 f0       	brcs	.+16     	; 0x269a <__gtsf2+0x56>
    268a:	89 89       	ldd	r24, Y+17	; 0x11
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	28 f0       	brcs	.+10     	; 0x269a <__gtsf2+0x56>
    2690:	c8 01       	movw	r24, r16
    2692:	b7 01       	movw	r22, r14
    2694:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fpcmp_parts_f>
    2698:	01 c0       	rjmp	.+2      	; 0x269c <__gtsf2+0x58>
    269a:	8f ef       	ldi	r24, 0xFF	; 255
    269c:	68 96       	adiw	r28, 0x18	; 24
    269e:	e6 e0       	ldi	r30, 0x06	; 6
    26a0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

000026a4 <__gesf2>:
    26a4:	a8 e1       	ldi	r26, 0x18	; 24
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f3 e1       	ldi	r31, 0x13	; 19
    26ac:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x18>
    26b0:	69 83       	std	Y+1, r22	; 0x01
    26b2:	7a 83       	std	Y+2, r23	; 0x02
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	2d 83       	std	Y+5, r18	; 0x05
    26ba:	3e 83       	std	Y+6, r19	; 0x06
    26bc:	4f 83       	std	Y+7, r20	; 0x07
    26be:	58 87       	std	Y+8, r21	; 0x08
    26c0:	8e 01       	movw	r16, r28
    26c2:	07 5f       	subi	r16, 0xF7	; 247
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	b8 01       	movw	r22, r16
    26cc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    26d0:	81 e1       	ldi	r24, 0x11	; 17
    26d2:	e8 2e       	mov	r14, r24
    26d4:	f1 2c       	mov	r15, r1
    26d6:	ec 0e       	add	r14, r28
    26d8:	fd 1e       	adc	r15, r29
    26da:	ce 01       	movw	r24, r28
    26dc:	05 96       	adiw	r24, 0x05	; 5
    26de:	b7 01       	movw	r22, r14
    26e0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	40 f0       	brcs	.+16     	; 0x26fa <__gesf2+0x56>
    26ea:	89 89       	ldd	r24, Y+17	; 0x11
    26ec:	82 30       	cpi	r24, 0x02	; 2
    26ee:	28 f0       	brcs	.+10     	; 0x26fa <__gesf2+0x56>
    26f0:	c8 01       	movw	r24, r16
    26f2:	b7 01       	movw	r22, r14
    26f4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fpcmp_parts_f>
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <__gesf2+0x58>
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	68 96       	adiw	r28, 0x18	; 24
    26fe:	e6 e0       	ldi	r30, 0x06	; 6
    2700:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

00002704 <__ltsf2>:
    2704:	a8 e1       	ldi	r26, 0x18	; 24
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e1       	ldi	r31, 0x13	; 19
    270c:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x18>
    2710:	69 83       	std	Y+1, r22	; 0x01
    2712:	7a 83       	std	Y+2, r23	; 0x02
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	2d 83       	std	Y+5, r18	; 0x05
    271a:	3e 83       	std	Y+6, r19	; 0x06
    271c:	4f 83       	std	Y+7, r20	; 0x07
    271e:	58 87       	std	Y+8, r21	; 0x08
    2720:	8e 01       	movw	r16, r28
    2722:	07 5f       	subi	r16, 0xF7	; 247
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	b8 01       	movw	r22, r16
    272c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2730:	81 e1       	ldi	r24, 0x11	; 17
    2732:	e8 2e       	mov	r14, r24
    2734:	f1 2c       	mov	r15, r1
    2736:	ec 0e       	add	r14, r28
    2738:	fd 1e       	adc	r15, r29
    273a:	ce 01       	movw	r24, r28
    273c:	05 96       	adiw	r24, 0x05	; 5
    273e:	b7 01       	movw	r22, r14
    2740:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	40 f0       	brcs	.+16     	; 0x275a <__ltsf2+0x56>
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	28 f0       	brcs	.+10     	; 0x275a <__ltsf2+0x56>
    2750:	c8 01       	movw	r24, r16
    2752:	b7 01       	movw	r22, r14
    2754:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fpcmp_parts_f>
    2758:	01 c0       	rjmp	.+2      	; 0x275c <__ltsf2+0x58>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	68 96       	adiw	r28, 0x18	; 24
    275e:	e6 e0       	ldi	r30, 0x06	; 6
    2760:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

00002764 <__fixsfsi>:
    2764:	ac e0       	ldi	r26, 0x0C	; 12
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 eb       	ldi	r30, 0xB8	; 184
    276a:	f3 e1       	ldi	r31, 0x13	; 19
    276c:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__+0x20>
    2770:	69 83       	std	Y+1, r22	; 0x01
    2772:	7a 83       	std	Y+2, r23	; 0x02
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	ce 01       	movw	r24, r28
    277a:	01 96       	adiw	r24, 0x01	; 1
    277c:	be 01       	movw	r22, r28
    277e:	6b 5f       	subi	r22, 0xFB	; 251
    2780:	7f 4f       	sbci	r23, 0xFF	; 255
    2782:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__unpack_f>
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	81 f1       	breq	.+96     	; 0x27ec <__fixsfsi+0x88>
    278c:	82 30       	cpi	r24, 0x02	; 2
    278e:	70 f1       	brcs	.+92     	; 0x27ec <__fixsfsi+0x88>
    2790:	84 30       	cpi	r24, 0x04	; 4
    2792:	21 f4       	brne	.+8      	; 0x279c <__fixsfsi+0x38>
    2794:	8e 81       	ldd	r24, Y+6	; 0x06
    2796:	88 23       	and	r24, r24
    2798:	69 f1       	breq	.+90     	; 0x27f4 <__fixsfsi+0x90>
    279a:	0a c0       	rjmp	.+20     	; 0x27b0 <__fixsfsi+0x4c>
    279c:	2f 81       	ldd	r18, Y+7	; 0x07
    279e:	38 85       	ldd	r19, Y+8	; 0x08
    27a0:	37 fd       	sbrc	r19, 7
    27a2:	24 c0       	rjmp	.+72     	; 0x27ec <__fixsfsi+0x88>
    27a4:	6e 81       	ldd	r22, Y+6	; 0x06
    27a6:	2f 31       	cpi	r18, 0x1F	; 31
    27a8:	31 05       	cpc	r19, r1
    27aa:	3c f0       	brlt	.+14     	; 0x27ba <__fixsfsi+0x56>
    27ac:	66 23       	and	r22, r22
    27ae:	11 f1       	breq	.+68     	; 0x27f4 <__fixsfsi+0x90>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e8       	ldi	r21, 0x80	; 128
    27b8:	21 c0       	rjmp	.+66     	; 0x27fc <__fixsfsi+0x98>
    27ba:	8e e1       	ldi	r24, 0x1E	; 30
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	82 1b       	sub	r24, r18
    27c0:	93 0b       	sbc	r25, r19
    27c2:	29 85       	ldd	r18, Y+9	; 0x09
    27c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    27c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    27c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <__fixsfsi+0x70>
    27cc:	56 95       	lsr	r21
    27ce:	47 95       	ror	r20
    27d0:	37 95       	ror	r19
    27d2:	27 95       	ror	r18
    27d4:	8a 95       	dec	r24
    27d6:	d2 f7       	brpl	.-12     	; 0x27cc <__fixsfsi+0x68>
    27d8:	66 23       	and	r22, r22
    27da:	81 f0       	breq	.+32     	; 0x27fc <__fixsfsi+0x98>
    27dc:	50 95       	com	r21
    27de:	40 95       	com	r20
    27e0:	30 95       	com	r19
    27e2:	21 95       	neg	r18
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	4f 4f       	sbci	r20, 0xFF	; 255
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	08 c0       	rjmp	.+16     	; 0x27fc <__fixsfsi+0x98>
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	a9 01       	movw	r20, r18
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <__fixsfsi+0x98>
    27f4:	2f ef       	ldi	r18, 0xFF	; 255
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f ef       	ldi	r20, 0xFF	; 255
    27fa:	5f e7       	ldi	r21, 0x7F	; 127
    27fc:	b9 01       	movw	r22, r18
    27fe:	ca 01       	movw	r24, r20
    2800:	2c 96       	adiw	r28, 0x0c	; 12
    2802:	e2 e0       	ldi	r30, 0x02	; 2
    2804:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x20>

00002808 <__floatunsisf>:
    2808:	a8 e0       	ldi	r26, 0x08	; 8
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ea e0       	ldi	r30, 0x0A	; 10
    280e:	f4 e1       	ldi	r31, 0x14	; 20
    2810:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__prologue_saves__+0x14>
    2814:	7b 01       	movw	r14, r22
    2816:	8c 01       	movw	r16, r24
    2818:	1a 82       	std	Y+2, r1	; 0x02
    281a:	61 15       	cp	r22, r1
    281c:	71 05       	cpc	r23, r1
    281e:	81 05       	cpc	r24, r1
    2820:	91 05       	cpc	r25, r1
    2822:	19 f4       	brne	.+6      	; 0x282a <__floatunsisf+0x22>
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	5f c0       	rjmp	.+190    	; 0x28e8 <__floatunsisf+0xe0>
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	8e e1       	ldi	r24, 0x1E	; 30
    2830:	c8 2e       	mov	r12, r24
    2832:	d1 2c       	mov	r13, r1
    2834:	cb 82       	std	Y+3, r12	; 0x03
    2836:	dc 82       	std	Y+4, r13	; 0x04
    2838:	ed 82       	std	Y+5, r14	; 0x05
    283a:	fe 82       	std	Y+6, r15	; 0x06
    283c:	0f 83       	std	Y+7, r16	; 0x07
    283e:	18 87       	std	Y+8, r17	; 0x08
    2840:	c8 01       	movw	r24, r16
    2842:	b7 01       	movw	r22, r14
    2844:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__clzsi2>
    2848:	fc 01       	movw	r30, r24
    284a:	31 97       	sbiw	r30, 0x01	; 1
    284c:	f7 ff       	sbrs	r31, 7
    284e:	3a c0       	rjmp	.+116    	; 0x28c4 <__floatunsisf+0xbc>
    2850:	aa 27       	eor	r26, r26
    2852:	bb 27       	eor	r27, r27
    2854:	ae 1b       	sub	r26, r30
    2856:	bf 0b       	sbc	r27, r31
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	0a 2e       	mov	r0, r26
    2862:	04 c0       	rjmp	.+8      	; 0x286c <__floatunsisf+0x64>
    2864:	22 0f       	add	r18, r18
    2866:	33 1f       	adc	r19, r19
    2868:	44 1f       	adc	r20, r20
    286a:	55 1f       	adc	r21, r21
    286c:	0a 94       	dec	r0
    286e:	d2 f7       	brpl	.-12     	; 0x2864 <__floatunsisf+0x5c>
    2870:	21 50       	subi	r18, 0x01	; 1
    2872:	30 40       	sbci	r19, 0x00	; 0
    2874:	40 40       	sbci	r20, 0x00	; 0
    2876:	50 40       	sbci	r21, 0x00	; 0
    2878:	2e 21       	and	r18, r14
    287a:	3f 21       	and	r19, r15
    287c:	40 23       	and	r20, r16
    287e:	51 23       	and	r21, r17
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	21 15       	cp	r18, r1
    288a:	31 05       	cpc	r19, r1
    288c:	41 05       	cpc	r20, r1
    288e:	51 05       	cpc	r21, r1
    2890:	19 f4       	brne	.+6      	; 0x2898 <__floatunsisf+0x90>
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	cb 01       	movw	r24, r22
    2898:	04 c0       	rjmp	.+8      	; 0x28a2 <__floatunsisf+0x9a>
    289a:	16 95       	lsr	r17
    289c:	07 95       	ror	r16
    289e:	f7 94       	ror	r15
    28a0:	e7 94       	ror	r14
    28a2:	aa 95       	dec	r26
    28a4:	d2 f7       	brpl	.-12     	; 0x289a <__floatunsisf+0x92>
    28a6:	e6 2a       	or	r14, r22
    28a8:	f7 2a       	or	r15, r23
    28aa:	08 2b       	or	r16, r24
    28ac:	19 2b       	or	r17, r25
    28ae:	ed 82       	std	Y+5, r14	; 0x05
    28b0:	fe 82       	std	Y+6, r15	; 0x06
    28b2:	0f 83       	std	Y+7, r16	; 0x07
    28b4:	18 87       	std	Y+8, r17	; 0x08
    28b6:	8e e1       	ldi	r24, 0x1E	; 30
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	8e 1b       	sub	r24, r30
    28bc:	9f 0b       	sbc	r25, r31
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	12 c0       	rjmp	.+36     	; 0x28e8 <__floatunsisf+0xe0>
    28c4:	30 97       	sbiw	r30, 0x00	; 0
    28c6:	81 f0       	breq	.+32     	; 0x28e8 <__floatunsisf+0xe0>
    28c8:	0e 2e       	mov	r0, r30
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <__floatunsisf+0xcc>
    28cc:	ee 0c       	add	r14, r14
    28ce:	ff 1c       	adc	r15, r15
    28d0:	00 1f       	adc	r16, r16
    28d2:	11 1f       	adc	r17, r17
    28d4:	0a 94       	dec	r0
    28d6:	d2 f7       	brpl	.-12     	; 0x28cc <__floatunsisf+0xc4>
    28d8:	ed 82       	std	Y+5, r14	; 0x05
    28da:	fe 82       	std	Y+6, r15	; 0x06
    28dc:	0f 83       	std	Y+7, r16	; 0x07
    28de:	18 87       	std	Y+8, r17	; 0x08
    28e0:	ce 1a       	sub	r12, r30
    28e2:	df 0a       	sbc	r13, r31
    28e4:	cb 82       	std	Y+3, r12	; 0x03
    28e6:	dc 82       	std	Y+4, r13	; 0x04
    28e8:	ce 01       	movw	r24, r28
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__pack_f>
    28f0:	28 96       	adiw	r28, 0x08	; 8
    28f2:	e8 e0       	ldi	r30, 0x08	; 8
    28f4:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__epilogue_restores__+0x14>

000028f8 <__clzsi2>:
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	7b 01       	movw	r14, r22
    290a:	8c 01       	movw	r16, r24
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	e8 16       	cp	r14, r24
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	f8 06       	cpc	r15, r24
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	08 07       	cpc	r16, r24
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	18 07       	cpc	r17, r24
    291c:	58 f4       	brcc	.+22     	; 0x2934 <__clzsi2+0x3c>
    291e:	ef ef       	ldi	r30, 0xFF	; 255
    2920:	ee 16       	cp	r14, r30
    2922:	f1 04       	cpc	r15, r1
    2924:	01 05       	cpc	r16, r1
    2926:	11 05       	cpc	r17, r1
    2928:	09 f0       	breq	.+2      	; 0x292c <__clzsi2+0x34>
    292a:	90 f4       	brcc	.+36     	; 0x2950 <__clzsi2+0x58>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	dc 01       	movw	r26, r24
    2932:	17 c0       	rjmp	.+46     	; 0x2962 <__clzsi2+0x6a>
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ef 16       	cp	r14, r31
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	ff 06       	cpc	r15, r31
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	0f 07       	cpc	r16, r31
    2940:	f1 e0       	ldi	r31, 0x01	; 1
    2942:	1f 07       	cpc	r17, r31
    2944:	50 f4       	brcc	.+20     	; 0x295a <__clzsi2+0x62>
    2946:	80 e1       	ldi	r24, 0x10	; 16
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 e0       	ldi	r26, 0x00	; 0
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	09 c0       	rjmp	.+18     	; 0x2962 <__clzsi2+0x6a>
    2950:	88 e0       	ldi	r24, 0x08	; 8
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e0       	ldi	r26, 0x00	; 0
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <__clzsi2+0x6a>
    295a:	88 e1       	ldi	r24, 0x18	; 24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	20 e2       	ldi	r18, 0x20	; 32
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	28 1b       	sub	r18, r24
    296c:	39 0b       	sbc	r19, r25
    296e:	4a 0b       	sbc	r20, r26
    2970:	5b 0b       	sbc	r21, r27
    2972:	57 01       	movw	r10, r14
    2974:	68 01       	movw	r12, r16
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <__clzsi2+0x88>
    2978:	d6 94       	lsr	r13
    297a:	c7 94       	ror	r12
    297c:	b7 94       	ror	r11
    297e:	a7 94       	ror	r10
    2980:	8a 95       	dec	r24
    2982:	d2 f7       	brpl	.-12     	; 0x2978 <__clzsi2+0x80>
    2984:	d6 01       	movw	r26, r12
    2986:	c5 01       	movw	r24, r10
    2988:	89 5c       	subi	r24, 0xC9	; 201
    298a:	9f 4d       	sbci	r25, 0xDF	; 223
    298c:	fc 01       	movw	r30, r24
    298e:	80 81       	ld	r24, Z
    2990:	28 1b       	sub	r18, r24
    2992:	31 09       	sbc	r19, r1
    2994:	41 09       	sbc	r20, r1
    2996:	51 09       	sbc	r21, r1
    2998:	c9 01       	movw	r24, r18
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	bf 90       	pop	r11
    29a8:	af 90       	pop	r10
    29aa:	08 95       	ret

000029ac <__pack_f>:
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	fc 01       	movw	r30, r24
    29ba:	24 81       	ldd	r18, Z+4	; 0x04
    29bc:	35 81       	ldd	r19, Z+5	; 0x05
    29be:	46 81       	ldd	r20, Z+6	; 0x06
    29c0:	57 81       	ldd	r21, Z+7	; 0x07
    29c2:	61 81       	ldd	r22, Z+1	; 0x01
    29c4:	80 81       	ld	r24, Z
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	20 f4       	brcc	.+8      	; 0x29d2 <__pack_f+0x26>
    29ca:	40 61       	ori	r20, 0x10	; 16
    29cc:	ef ef       	ldi	r30, 0xFF	; 255
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	a3 c0       	rjmp	.+326    	; 0x2b18 <__pack_f+0x16c>
    29d2:	84 30       	cpi	r24, 0x04	; 4
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__pack_f+0x2c>
    29d6:	9b c0       	rjmp	.+310    	; 0x2b0e <__pack_f+0x162>
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	09 f4       	brne	.+2      	; 0x29de <__pack_f+0x32>
    29dc:	92 c0       	rjmp	.+292    	; 0x2b02 <__pack_f+0x156>
    29de:	21 15       	cp	r18, r1
    29e0:	31 05       	cpc	r19, r1
    29e2:	41 05       	cpc	r20, r1
    29e4:	51 05       	cpc	r21, r1
    29e6:	09 f4       	brne	.+2      	; 0x29ea <__pack_f+0x3e>
    29e8:	8f c0       	rjmp	.+286    	; 0x2b08 <__pack_f+0x15c>
    29ea:	02 80       	ldd	r0, Z+2	; 0x02
    29ec:	f3 81       	ldd	r31, Z+3	; 0x03
    29ee:	e0 2d       	mov	r30, r0
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	e2 38       	cpi	r30, 0x82	; 130
    29f4:	f8 07       	cpc	r31, r24
    29f6:	0c f0       	brlt	.+2      	; 0x29fa <__pack_f+0x4e>
    29f8:	5a c0       	rjmp	.+180    	; 0x2aae <__pack_f+0x102>
    29fa:	c2 e8       	ldi	r28, 0x82	; 130
    29fc:	df ef       	ldi	r29, 0xFF	; 255
    29fe:	ce 1b       	sub	r28, r30
    2a00:	df 0b       	sbc	r29, r31
    2a02:	ca 31       	cpi	r28, 0x1A	; 26
    2a04:	d1 05       	cpc	r29, r1
    2a06:	6c f5       	brge	.+90     	; 0x2a62 <__pack_f+0xb6>
    2a08:	79 01       	movw	r14, r18
    2a0a:	8a 01       	movw	r16, r20
    2a0c:	0c 2e       	mov	r0, r28
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <__pack_f+0x6c>
    2a10:	16 95       	lsr	r17
    2a12:	07 95       	ror	r16
    2a14:	f7 94       	ror	r15
    2a16:	e7 94       	ror	r14
    2a18:	0a 94       	dec	r0
    2a1a:	d2 f7       	brpl	.-12     	; 0x2a10 <__pack_f+0x64>
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	a0 e0       	ldi	r26, 0x00	; 0
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	0c 2e       	mov	r0, r28
    2a26:	04 c0       	rjmp	.+8      	; 0x2a30 <__pack_f+0x84>
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	aa 1f       	adc	r26, r26
    2a2e:	bb 1f       	adc	r27, r27
    2a30:	0a 94       	dec	r0
    2a32:	d2 f7       	brpl	.-12     	; 0x2a28 <__pack_f+0x7c>
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	a1 09       	sbc	r26, r1
    2a38:	b1 09       	sbc	r27, r1
    2a3a:	82 23       	and	r24, r18
    2a3c:	93 23       	and	r25, r19
    2a3e:	a4 23       	and	r26, r20
    2a40:	b5 23       	and	r27, r21
    2a42:	21 e0       	ldi	r18, 0x01	; 1
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	a1 05       	cpc	r26, r1
    2a4e:	b1 05       	cpc	r27, r1
    2a50:	19 f4       	brne	.+6      	; 0x2a58 <__pack_f+0xac>
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	a9 01       	movw	r20, r18
    2a58:	2e 29       	or	r18, r14
    2a5a:	3f 29       	or	r19, r15
    2a5c:	40 2b       	or	r20, r16
    2a5e:	51 2b       	or	r21, r17
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <__pack_f+0xbc>
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	a9 01       	movw	r20, r18
    2a68:	da 01       	movw	r26, r20
    2a6a:	c9 01       	movw	r24, r18
    2a6c:	8f 77       	andi	r24, 0x7F	; 127
    2a6e:	90 70       	andi	r25, 0x00	; 0
    2a70:	a0 70       	andi	r26, 0x00	; 0
    2a72:	b0 70       	andi	r27, 0x00	; 0
    2a74:	80 34       	cpi	r24, 0x40	; 64
    2a76:	91 05       	cpc	r25, r1
    2a78:	a1 05       	cpc	r26, r1
    2a7a:	b1 05       	cpc	r27, r1
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <__pack_f+0xe0>
    2a7e:	27 ff       	sbrs	r18, 7
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <__pack_f+0xe8>
    2a82:	20 5c       	subi	r18, 0xC0	; 192
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	4f 4f       	sbci	r20, 0xFF	; 255
    2a88:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <__pack_f+0xe8>
    2a8c:	21 5c       	subi	r18, 0xC1	; 193
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	4f 4f       	sbci	r20, 0xFF	; 255
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	e1 e0       	ldi	r30, 0x01	; 1
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	20 30       	cpi	r18, 0x00	; 0
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	38 07       	cpc	r19, r24
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	48 07       	cpc	r20, r24
    2aa2:	80 e4       	ldi	r24, 0x40	; 64
    2aa4:	58 07       	cpc	r21, r24
    2aa6:	28 f5       	brcc	.+74     	; 0x2af2 <__pack_f+0x146>
    2aa8:	e0 e0       	ldi	r30, 0x00	; 0
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	22 c0       	rjmp	.+68     	; 0x2af2 <__pack_f+0x146>
    2aae:	e0 38       	cpi	r30, 0x80	; 128
    2ab0:	f1 05       	cpc	r31, r1
    2ab2:	6c f5       	brge	.+90     	; 0x2b0e <__pack_f+0x162>
    2ab4:	e1 58       	subi	r30, 0x81	; 129
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	da 01       	movw	r26, r20
    2aba:	c9 01       	movw	r24, r18
    2abc:	8f 77       	andi	r24, 0x7F	; 127
    2abe:	90 70       	andi	r25, 0x00	; 0
    2ac0:	a0 70       	andi	r26, 0x00	; 0
    2ac2:	b0 70       	andi	r27, 0x00	; 0
    2ac4:	80 34       	cpi	r24, 0x40	; 64
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	a1 05       	cpc	r26, r1
    2aca:	b1 05       	cpc	r27, r1
    2acc:	39 f4       	brne	.+14     	; 0x2adc <__pack_f+0x130>
    2ace:	27 ff       	sbrs	r18, 7
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <__pack_f+0x138>
    2ad2:	20 5c       	subi	r18, 0xC0	; 192
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <__pack_f+0x138>
    2adc:	21 5c       	subi	r18, 0xC1	; 193
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	57 ff       	sbrs	r21, 7
    2ae6:	05 c0       	rjmp	.+10     	; 0x2af2 <__pack_f+0x146>
    2ae8:	56 95       	lsr	r21
    2aea:	47 95       	ror	r20
    2aec:	37 95       	ror	r19
    2aee:	27 95       	ror	r18
    2af0:	31 96       	adiw	r30, 0x01	; 1
    2af2:	87 e0       	ldi	r24, 0x07	; 7
    2af4:	56 95       	lsr	r21
    2af6:	47 95       	ror	r20
    2af8:	37 95       	ror	r19
    2afa:	27 95       	ror	r18
    2afc:	8a 95       	dec	r24
    2afe:	d1 f7       	brne	.-12     	; 0x2af4 <__pack_f+0x148>
    2b00:	0b c0       	rjmp	.+22     	; 0x2b18 <__pack_f+0x16c>
    2b02:	e0 e0       	ldi	r30, 0x00	; 0
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	05 c0       	rjmp	.+10     	; 0x2b12 <__pack_f+0x166>
    2b08:	e0 e0       	ldi	r30, 0x00	; 0
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	05 c0       	rjmp	.+10     	; 0x2b18 <__pack_f+0x16c>
    2b0e:	ef ef       	ldi	r30, 0xFF	; 255
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	a9 01       	movw	r20, r18
    2b18:	8e 2f       	mov	r24, r30
    2b1a:	87 95       	ror	r24
    2b1c:	88 27       	eor	r24, r24
    2b1e:	87 95       	ror	r24
    2b20:	94 2f       	mov	r25, r20
    2b22:	9f 77       	andi	r25, 0x7F	; 127
    2b24:	67 95       	ror	r22
    2b26:	66 27       	eor	r22, r22
    2b28:	67 95       	ror	r22
    2b2a:	e6 95       	lsr	r30
    2b2c:	e2 2e       	mov	r14, r18
    2b2e:	a9 2f       	mov	r26, r25
    2b30:	a8 2b       	or	r26, r24
    2b32:	fe 2f       	mov	r31, r30
    2b34:	f6 2b       	or	r31, r22
    2b36:	62 2f       	mov	r22, r18
    2b38:	73 2f       	mov	r23, r19
    2b3a:	8a 2f       	mov	r24, r26
    2b3c:	9f 2f       	mov	r25, r31
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	e6 e0       	ldi	r30, 0x06	; 6
    2b44:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x18>

00002b48 <__unpack_f>:
    2b48:	dc 01       	movw	r26, r24
    2b4a:	fb 01       	movw	r30, r22
    2b4c:	2c 91       	ld	r18, X
    2b4e:	11 96       	adiw	r26, 0x01	; 1
    2b50:	3c 91       	ld	r19, X
    2b52:	11 97       	sbiw	r26, 0x01	; 1
    2b54:	12 96       	adiw	r26, 0x02	; 2
    2b56:	8c 91       	ld	r24, X
    2b58:	12 97       	sbiw	r26, 0x02	; 2
    2b5a:	48 2f       	mov	r20, r24
    2b5c:	4f 77       	andi	r20, 0x7F	; 127
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	98 2f       	mov	r25, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	99 27       	eor	r25, r25
    2b66:	99 1f       	adc	r25, r25
    2b68:	13 96       	adiw	r26, 0x03	; 3
    2b6a:	6c 91       	ld	r22, X
    2b6c:	13 97       	sbiw	r26, 0x03	; 3
    2b6e:	86 2f       	mov	r24, r22
    2b70:	88 0f       	add	r24, r24
    2b72:	89 2b       	or	r24, r25
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	66 1f       	adc	r22, r22
    2b78:	66 27       	eor	r22, r22
    2b7a:	66 1f       	adc	r22, r22
    2b7c:	61 83       	std	Z+1, r22	; 0x01
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	39 f5       	brne	.+78     	; 0x2bd0 <__unpack_f+0x88>
    2b82:	21 15       	cp	r18, r1
    2b84:	31 05       	cpc	r19, r1
    2b86:	41 05       	cpc	r20, r1
    2b88:	51 05       	cpc	r21, r1
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <__unpack_f+0x48>
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	29 c0       	rjmp	.+82     	; 0x2be2 <__unpack_f+0x9a>
    2b90:	82 e8       	ldi	r24, 0x82	; 130
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	82 83       	std	Z+2, r24	; 0x02
    2b96:	93 83       	std	Z+3, r25	; 0x03
    2b98:	67 e0       	ldi	r22, 0x07	; 7
    2b9a:	22 0f       	add	r18, r18
    2b9c:	33 1f       	adc	r19, r19
    2b9e:	44 1f       	adc	r20, r20
    2ba0:	55 1f       	adc	r21, r21
    2ba2:	6a 95       	dec	r22
    2ba4:	d1 f7       	brne	.-12     	; 0x2b9a <__unpack_f+0x52>
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	80 83       	st	Z, r24
    2baa:	09 c0       	rjmp	.+18     	; 0x2bbe <__unpack_f+0x76>
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	44 1f       	adc	r20, r20
    2bb2:	55 1f       	adc	r21, r21
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	82 83       	std	Z+2, r24	; 0x02
    2bbc:	93 83       	std	Z+3, r25	; 0x03
    2bbe:	20 30       	cpi	r18, 0x00	; 0
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	38 07       	cpc	r19, r24
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	48 07       	cpc	r20, r24
    2bc8:	80 e4       	ldi	r24, 0x40	; 64
    2bca:	58 07       	cpc	r21, r24
    2bcc:	78 f3       	brcs	.-34     	; 0x2bac <__unpack_f+0x64>
    2bce:	20 c0       	rjmp	.+64     	; 0x2c10 <__unpack_f+0xc8>
    2bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	79 f4       	brne	.+30     	; 0x2bf4 <__unpack_f+0xac>
    2bd6:	21 15       	cp	r18, r1
    2bd8:	31 05       	cpc	r19, r1
    2bda:	41 05       	cpc	r20, r1
    2bdc:	51 05       	cpc	r21, r1
    2bde:	19 f4       	brne	.+6      	; 0x2be6 <__unpack_f+0x9e>
    2be0:	84 e0       	ldi	r24, 0x04	; 4
    2be2:	80 83       	st	Z, r24
    2be4:	08 95       	ret
    2be6:	44 ff       	sbrs	r20, 4
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <__unpack_f+0xa8>
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 83       	st	Z, r24
    2bee:	10 c0       	rjmp	.+32     	; 0x2c10 <__unpack_f+0xc8>
    2bf0:	10 82       	st	Z, r1
    2bf2:	0e c0       	rjmp	.+28     	; 0x2c10 <__unpack_f+0xc8>
    2bf4:	8f 57       	subi	r24, 0x7F	; 127
    2bf6:	90 40       	sbci	r25, 0x00	; 0
    2bf8:	82 83       	std	Z+2, r24	; 0x02
    2bfa:	93 83       	std	Z+3, r25	; 0x03
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	80 83       	st	Z, r24
    2c00:	87 e0       	ldi	r24, 0x07	; 7
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	44 1f       	adc	r20, r20
    2c08:	55 1f       	adc	r21, r21
    2c0a:	8a 95       	dec	r24
    2c0c:	d1 f7       	brne	.-12     	; 0x2c02 <__unpack_f+0xba>
    2c0e:	50 64       	ori	r21, 0x40	; 64
    2c10:	24 83       	std	Z+4, r18	; 0x04
    2c12:	35 83       	std	Z+5, r19	; 0x05
    2c14:	46 83       	std	Z+6, r20	; 0x06
    2c16:	57 83       	std	Z+7, r21	; 0x07
    2c18:	08 95       	ret

00002c1a <__fpcmp_parts_f>:
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	db 01       	movw	r26, r22
    2c1e:	90 81       	ld	r25, Z
    2c20:	92 30       	cpi	r25, 0x02	; 2
    2c22:	08 f4       	brcc	.+2      	; 0x2c26 <__fpcmp_parts_f+0xc>
    2c24:	49 c0       	rjmp	.+146    	; 0x2cb8 <__fpcmp_parts_f+0x9e>
    2c26:	8c 91       	ld	r24, X
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	08 f4       	brcc	.+2      	; 0x2c2e <__fpcmp_parts_f+0x14>
    2c2c:	45 c0       	rjmp	.+138    	; 0x2cb8 <__fpcmp_parts_f+0x9e>
    2c2e:	94 30       	cpi	r25, 0x04	; 4
    2c30:	51 f4       	brne	.+20     	; 0x2c46 <__fpcmp_parts_f+0x2c>
    2c32:	61 81       	ldd	r22, Z+1	; 0x01
    2c34:	84 30       	cpi	r24, 0x04	; 4
    2c36:	b1 f5       	brne	.+108    	; 0x2ca4 <__fpcmp_parts_f+0x8a>
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	2c 91       	ld	r18, X
    2c3c:	11 97       	sbiw	r26, 0x01	; 1
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	26 1b       	sub	r18, r22
    2c42:	31 09       	sbc	r19, r1
    2c44:	41 c0       	rjmp	.+130    	; 0x2cc8 <__fpcmp_parts_f+0xae>
    2c46:	84 30       	cpi	r24, 0x04	; 4
    2c48:	21 f0       	breq	.+8      	; 0x2c52 <__fpcmp_parts_f+0x38>
    2c4a:	92 30       	cpi	r25, 0x02	; 2
    2c4c:	41 f4       	brne	.+16     	; 0x2c5e <__fpcmp_parts_f+0x44>
    2c4e:	82 30       	cpi	r24, 0x02	; 2
    2c50:	b1 f1       	breq	.+108    	; 0x2cbe <__fpcmp_parts_f+0xa4>
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	8c 91       	ld	r24, X
    2c56:	11 97       	sbiw	r26, 0x01	; 1
    2c58:	88 23       	and	r24, r24
    2c5a:	a1 f1       	breq	.+104    	; 0x2cc4 <__fpcmp_parts_f+0xaa>
    2c5c:	2d c0       	rjmp	.+90     	; 0x2cb8 <__fpcmp_parts_f+0x9e>
    2c5e:	61 81       	ldd	r22, Z+1	; 0x01
    2c60:	82 30       	cpi	r24, 0x02	; 2
    2c62:	01 f1       	breq	.+64     	; 0x2ca4 <__fpcmp_parts_f+0x8a>
    2c64:	11 96       	adiw	r26, 0x01	; 1
    2c66:	8c 91       	ld	r24, X
    2c68:	11 97       	sbiw	r26, 0x01	; 1
    2c6a:	68 17       	cp	r22, r24
    2c6c:	d9 f4       	brne	.+54     	; 0x2ca4 <__fpcmp_parts_f+0x8a>
    2c6e:	22 81       	ldd	r18, Z+2	; 0x02
    2c70:	33 81       	ldd	r19, Z+3	; 0x03
    2c72:	12 96       	adiw	r26, 0x02	; 2
    2c74:	8d 91       	ld	r24, X+
    2c76:	9c 91       	ld	r25, X
    2c78:	13 97       	sbiw	r26, 0x03	; 3
    2c7a:	82 17       	cp	r24, r18
    2c7c:	93 07       	cpc	r25, r19
    2c7e:	94 f0       	brlt	.+36     	; 0x2ca4 <__fpcmp_parts_f+0x8a>
    2c80:	28 17       	cp	r18, r24
    2c82:	39 07       	cpc	r19, r25
    2c84:	bc f0       	brlt	.+46     	; 0x2cb4 <__fpcmp_parts_f+0x9a>
    2c86:	24 81       	ldd	r18, Z+4	; 0x04
    2c88:	35 81       	ldd	r19, Z+5	; 0x05
    2c8a:	46 81       	ldd	r20, Z+6	; 0x06
    2c8c:	57 81       	ldd	r21, Z+7	; 0x07
    2c8e:	14 96       	adiw	r26, 0x04	; 4
    2c90:	8d 91       	ld	r24, X+
    2c92:	9d 91       	ld	r25, X+
    2c94:	0d 90       	ld	r0, X+
    2c96:	bc 91       	ld	r27, X
    2c98:	a0 2d       	mov	r26, r0
    2c9a:	82 17       	cp	r24, r18
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	a4 07       	cpc	r26, r20
    2ca0:	b5 07       	cpc	r27, r21
    2ca2:	18 f4       	brcc	.+6      	; 0x2caa <__fpcmp_parts_f+0x90>
    2ca4:	66 23       	and	r22, r22
    2ca6:	41 f0       	breq	.+16     	; 0x2cb8 <__fpcmp_parts_f+0x9e>
    2ca8:	0d c0       	rjmp	.+26     	; 0x2cc4 <__fpcmp_parts_f+0xaa>
    2caa:	28 17       	cp	r18, r24
    2cac:	39 07       	cpc	r19, r25
    2cae:	4a 07       	cpc	r20, r26
    2cb0:	5b 07       	cpc	r21, r27
    2cb2:	28 f4       	brcc	.+10     	; 0x2cbe <__fpcmp_parts_f+0xa4>
    2cb4:	66 23       	and	r22, r22
    2cb6:	31 f0       	breq	.+12     	; 0x2cc4 <__fpcmp_parts_f+0xaa>
    2cb8:	21 e0       	ldi	r18, 0x01	; 1
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <__fpcmp_parts_f+0xae>
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <__fpcmp_parts_f+0xae>
    2cc4:	2f ef       	ldi	r18, 0xFF	; 255
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	c9 01       	movw	r24, r18
    2cca:	08 95       	ret

00002ccc <__mulsi3>:
    2ccc:	62 9f       	mul	r22, r18
    2cce:	d0 01       	movw	r26, r0
    2cd0:	73 9f       	mul	r23, r19
    2cd2:	f0 01       	movw	r30, r0
    2cd4:	82 9f       	mul	r24, r18
    2cd6:	e0 0d       	add	r30, r0
    2cd8:	f1 1d       	adc	r31, r1
    2cda:	64 9f       	mul	r22, r20
    2cdc:	e0 0d       	add	r30, r0
    2cde:	f1 1d       	adc	r31, r1
    2ce0:	92 9f       	mul	r25, r18
    2ce2:	f0 0d       	add	r31, r0
    2ce4:	83 9f       	mul	r24, r19
    2ce6:	f0 0d       	add	r31, r0
    2ce8:	74 9f       	mul	r23, r20
    2cea:	f0 0d       	add	r31, r0
    2cec:	65 9f       	mul	r22, r21
    2cee:	f0 0d       	add	r31, r0
    2cf0:	99 27       	eor	r25, r25
    2cf2:	72 9f       	mul	r23, r18
    2cf4:	b0 0d       	add	r27, r0
    2cf6:	e1 1d       	adc	r30, r1
    2cf8:	f9 1f       	adc	r31, r25
    2cfa:	63 9f       	mul	r22, r19
    2cfc:	b0 0d       	add	r27, r0
    2cfe:	e1 1d       	adc	r30, r1
    2d00:	f9 1f       	adc	r31, r25
    2d02:	bd 01       	movw	r22, r26
    2d04:	cf 01       	movw	r24, r30
    2d06:	11 24       	eor	r1, r1
    2d08:	08 95       	ret

00002d0a <__udivmodhi4>:
    2d0a:	aa 1b       	sub	r26, r26
    2d0c:	bb 1b       	sub	r27, r27
    2d0e:	51 e1       	ldi	r21, 0x11	; 17
    2d10:	07 c0       	rjmp	.+14     	; 0x2d20 <__udivmodhi4_ep>

00002d12 <__udivmodhi4_loop>:
    2d12:	aa 1f       	adc	r26, r26
    2d14:	bb 1f       	adc	r27, r27
    2d16:	a6 17       	cp	r26, r22
    2d18:	b7 07       	cpc	r27, r23
    2d1a:	10 f0       	brcs	.+4      	; 0x2d20 <__udivmodhi4_ep>
    2d1c:	a6 1b       	sub	r26, r22
    2d1e:	b7 0b       	sbc	r27, r23

00002d20 <__udivmodhi4_ep>:
    2d20:	88 1f       	adc	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	5a 95       	dec	r21
    2d26:	a9 f7       	brne	.-22     	; 0x2d12 <__udivmodhi4_loop>
    2d28:	80 95       	com	r24
    2d2a:	90 95       	com	r25
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	08 95       	ret

00002d32 <__divmodhi4>:
    2d32:	97 fb       	bst	r25, 7
    2d34:	09 2e       	mov	r0, r25
    2d36:	07 26       	eor	r0, r23
    2d38:	0a d0       	rcall	.+20     	; 0x2d4e <__divmodhi4_neg1>
    2d3a:	77 fd       	sbrc	r23, 7
    2d3c:	04 d0       	rcall	.+8      	; 0x2d46 <__divmodhi4_neg2>
    2d3e:	e5 df       	rcall	.-54     	; 0x2d0a <__udivmodhi4>
    2d40:	06 d0       	rcall	.+12     	; 0x2d4e <__divmodhi4_neg1>
    2d42:	00 20       	and	r0, r0
    2d44:	1a f4       	brpl	.+6      	; 0x2d4c <__divmodhi4_exit>

00002d46 <__divmodhi4_neg2>:
    2d46:	70 95       	com	r23
    2d48:	61 95       	neg	r22
    2d4a:	7f 4f       	sbci	r23, 0xFF	; 255

00002d4c <__divmodhi4_exit>:
    2d4c:	08 95       	ret

00002d4e <__divmodhi4_neg1>:
    2d4e:	f6 f7       	brtc	.-4      	; 0x2d4c <__divmodhi4_exit>
    2d50:	90 95       	com	r25
    2d52:	81 95       	neg	r24
    2d54:	9f 4f       	sbci	r25, 0xFF	; 255
    2d56:	08 95       	ret

00002d58 <__udivmodsi4>:
    2d58:	a1 e2       	ldi	r26, 0x21	; 33
    2d5a:	1a 2e       	mov	r1, r26
    2d5c:	aa 1b       	sub	r26, r26
    2d5e:	bb 1b       	sub	r27, r27
    2d60:	fd 01       	movw	r30, r26
    2d62:	0d c0       	rjmp	.+26     	; 0x2d7e <__udivmodsi4_ep>

00002d64 <__udivmodsi4_loop>:
    2d64:	aa 1f       	adc	r26, r26
    2d66:	bb 1f       	adc	r27, r27
    2d68:	ee 1f       	adc	r30, r30
    2d6a:	ff 1f       	adc	r31, r31
    2d6c:	a2 17       	cp	r26, r18
    2d6e:	b3 07       	cpc	r27, r19
    2d70:	e4 07       	cpc	r30, r20
    2d72:	f5 07       	cpc	r31, r21
    2d74:	20 f0       	brcs	.+8      	; 0x2d7e <__udivmodsi4_ep>
    2d76:	a2 1b       	sub	r26, r18
    2d78:	b3 0b       	sbc	r27, r19
    2d7a:	e4 0b       	sbc	r30, r20
    2d7c:	f5 0b       	sbc	r31, r21

00002d7e <__udivmodsi4_ep>:
    2d7e:	66 1f       	adc	r22, r22
    2d80:	77 1f       	adc	r23, r23
    2d82:	88 1f       	adc	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	1a 94       	dec	r1
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <__udivmodsi4_loop>
    2d8a:	60 95       	com	r22
    2d8c:	70 95       	com	r23
    2d8e:	80 95       	com	r24
    2d90:	90 95       	com	r25
    2d92:	9b 01       	movw	r18, r22
    2d94:	ac 01       	movw	r20, r24
    2d96:	bd 01       	movw	r22, r26
    2d98:	cf 01       	movw	r24, r30
    2d9a:	08 95       	ret

00002d9c <__prologue_saves__>:
    2d9c:	2f 92       	push	r2
    2d9e:	3f 92       	push	r3
    2da0:	4f 92       	push	r4
    2da2:	5f 92       	push	r5
    2da4:	6f 92       	push	r6
    2da6:	7f 92       	push	r7
    2da8:	8f 92       	push	r8
    2daa:	9f 92       	push	r9
    2dac:	af 92       	push	r10
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	ca 1b       	sub	r28, r26
    2dc6:	db 0b       	sbc	r29, r27
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	09 94       	ijmp

00002dce <__epilogue_restores__>:
    2dce:	2a 88       	ldd	r2, Y+18	; 0x12
    2dd0:	39 88       	ldd	r3, Y+17	; 0x11
    2dd2:	48 88       	ldd	r4, Y+16	; 0x10
    2dd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dda:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ddc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dde:	aa 84       	ldd	r10, Y+10	; 0x0a
    2de0:	b9 84       	ldd	r11, Y+9	; 0x09
    2de2:	c8 84       	ldd	r12, Y+8	; 0x08
    2de4:	df 80       	ldd	r13, Y+7	; 0x07
    2de6:	ee 80       	ldd	r14, Y+6	; 0x06
    2de8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dea:	0c 81       	ldd	r16, Y+4	; 0x04
    2dec:	1b 81       	ldd	r17, Y+3	; 0x03
    2dee:	aa 81       	ldd	r26, Y+2	; 0x02
    2df0:	b9 81       	ldd	r27, Y+1	; 0x01
    2df2:	ce 0f       	add	r28, r30
    2df4:	d1 1d       	adc	r29, r1
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	ed 01       	movw	r28, r26
    2dfc:	08 95       	ret

00002dfe <_exit>:
    2dfe:	f8 94       	cli

00002e00 <__stop_program>:
    2e00:	ff cf       	rjmp	.-2      	; 0x2e00 <__stop_program>
