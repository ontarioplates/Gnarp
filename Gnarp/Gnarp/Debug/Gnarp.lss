
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  00003232  000032c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  0080213c  0080213c  00003402  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000338  00000000  00000000  00003b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c61  00000000  00000000  00003e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000073d6  00000000  00000000  00004aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002427  00000000  00000000  0000bec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040ed  00000000  00000000  0000e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  000123d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c29  00000000  00000000  00012cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000028f8  00000000  00000000  000148e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000f31  00000000  00000000  000171d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  0001810a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_17>
      48:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 e3       	ldi	r30, 0x32	; 50
     18c:	f2 e3       	ldi	r31, 0x32	; 50
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 33       	cpi	r26, 0x3C	; 60
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e3       	ldi	r26, 0x3C	; 60
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 37       	cpi	r26, 0x70	; 112
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 15 06 	call	0xc2a	; 0xc2a <main>
     1ae:	0c 94 17 19 	jmp	0x322e	; 0x322e <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
#include <avr/interrupt.h>
#include <avr/io.h>

#include "arpeggiator.h"

ISR(TCC0_CCA_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:

ISR(TCC0_CCD_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:

static uint16_t BPM;

void configure_beat_clock_timer(){
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     226:	20 91 3c 21 	lds	r18, 0x213C
     22a:	30 91 3d 21 	lds	r19, 0x213D
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     306:	80 93 3c 21 	sts	0x213C, r24
     30a:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
}
     33a:	08 95       	ret

0000033c <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     33c:	80 91 3c 21 	lds	r24, 0x213C
     340:	90 91 3d 21 	lds	r25, 0x213D
     344:	08 95       	ret

00000346 <increment_BPM>:

void increment_BPM(){
    BPM += 1;
     346:	80 91 3c 21 	lds	r24, 0x213C
     34a:	90 91 3d 21 	lds	r25, 0x213D
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 3c 21 	sts	0x213C, r24
     354:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     35c:	08 95       	ret

0000035e <decrement_BPM>:

void decrement_BPM(){
    BPM -= 1;
     35e:	80 91 3c 21 	lds	r24, 0x213C
     362:	90 91 3d 21 	lds	r25, 0x213D
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	80 93 3c 21 	sts	0x213C, r24
     36c:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     374:	08 95       	ret

00000376 <initialize_hardware_manager>:
#include "hardware.h"

static Hardware_Manager manager;
	
void initialize_hardware_manager(){
	manager.encoder_state = TURN_NONE;
     376:	10 92 3e 21 	sts	0x213E, r1
    manager.pushbutton_switch_edge = EDGE_NONE;
     37a:	10 92 3f 21 	sts	0x213F, r1
    manager.toggle_switch_edge = EDGE_NONE;
     37e:	10 92 40 21 	sts	0x2140, r1
    manager.encoder_switch_edge = EDGE_NONE;
     382:	10 92 41 21 	sts	0x2141, r1
    manager.pushbutton_switch_state = 0;
     386:	10 92 42 21 	sts	0x2142, r1
    manager.toggle_switch_state = 0;
     38a:	10 92 43 21 	sts	0x2143, r1
    manager.encoder_switch_state = 0;
     38e:	10 92 44 21 	sts	0x2144, r1
	
	for (uint8_t i = 0; i < NUM_POTS; i++)
        manager.pot_values[i] = 0; 
     392:	10 92 45 21 	sts	0x2145, r1
     396:	10 92 46 21 	sts	0x2146, r1
     39a:	10 92 47 21 	sts	0x2147, r1
     39e:	10 92 48 21 	sts	0x2148, r1
     3a2:	10 92 49 21 	sts	0x2149, r1
     3a6:	10 92 4a 21 	sts	0x214A, r1
     3aa:	10 92 4b 21 	sts	0x214B, r1
     3ae:	10 92 4c 21 	sts	0x214C, r1
     3b2:	10 92 4d 21 	sts	0x214D, r1
     3b6:	10 92 4e 21 	sts	0x214E, r1
}	
     3ba:	08 95       	ret

000003bc <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return manager.encoder_state;
}
     3bc:	80 91 3e 21 	lds	r24, 0x213E
     3c0:	08 95       	ret

000003c2 <get_pot_value>:
            manager.pot_values[i] = manager.pot_values[i] - POT_MIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot_select, uint16_t output_min, uint16_t output_max){
     3c2:	5f 92       	push	r5
     3c4:	6f 92       	push	r6
     3c6:	7f 92       	push	r7
     3c8:	8f 92       	push	r8
     3ca:	9f 92       	push	r9
     3cc:	af 92       	push	r10
     3ce:	bf 92       	push	r11
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	25 97       	sbiw	r28, 0x05	; 5
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	58 2e       	mov	r5, r24
     3ec:	7b 01       	movw	r14, r22
     3ee:	8a 01       	movw	r16, r20
    //output_min: minimum value to output
    //output_max: maximum value to output
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    volatile float temp;
	volatile bool stop_me = 0;
     3f0:	19 82       	std	Y+1, r1	; 0x01
    
    temp = 1.0*manager.pot_values[pot_select]/pot_range;
     3f2:	e8 2f       	mov	r30, r24
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e2 5c       	subi	r30, 0xC2	; 194
     3fc:	fe 4d       	sbci	r31, 0xDE	; 222
     3fe:	67 81       	ldd	r22, Z+7	; 0x07
     400:	70 85       	ldd	r23, Z+8	; 0x08
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	42 e7       	ldi	r20, 0x72	; 114
     410:	55 e4       	ldi	r21, 0x45	; 69
     412:	0e 94 ed 13 	call	0x27da	; 0x27da <__divsf3>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	2a 83       	std	Y+2, r18	; 0x02
     41c:	3b 83       	std	Y+3, r19	; 0x03
     41e:	4c 83       	std	Y+4, r20	; 0x04
     420:	5d 83       	std	Y+5, r21	; 0x05
    temp = temp*(output_max - output_min + 1) + output_min;
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	8c 80       	ldd	r8, Y+4	; 0x04
     428:	9d 80       	ldd	r9, Y+5	; 0x05
     42a:	b7 01       	movw	r22, r14
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     434:	5b 01       	movw	r10, r22
     436:	6c 01       	movw	r12, r24
     438:	b8 01       	movw	r22, r16
     43a:	6e 19       	sub	r22, r14
     43c:	7f 09       	sbc	r23, r15
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	c4 01       	movw	r24, r8
     450:	b3 01       	movw	r22, r6
     452:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	0e 94 95 12 	call	0x252a	; 0x252a <__addsf3>
     45e:	9b 01       	movw	r18, r22
     460:	ac 01       	movw	r20, r24
     462:	2a 83       	std	Y+2, r18	; 0x02
     464:	3b 83       	std	Y+3, r19	; 0x03
     466:	4c 83       	std	Y+4, r20	; 0x04
     468:	5d 83       	std	Y+5, r21	; 0x05
    
    if (temp > output_max)
     46a:	6a 80       	ldd	r6, Y+2	; 0x02
     46c:	7b 80       	ldd	r7, Y+3	; 0x03
     46e:	8c 80       	ldd	r8, Y+4	; 0x04
     470:	9d 80       	ldd	r9, Y+5	; 0x05
     472:	b8 01       	movw	r22, r16
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     47c:	7b 01       	movw	r14, r22
     47e:	8c 01       	movw	r16, r24
     480:	c4 01       	movw	r24, r8
     482:	b3 01       	movw	r22, r6
     484:	a8 01       	movw	r20, r16
     486:	97 01       	movw	r18, r14
     488:	0e 94 cb 14 	call	0x2996	; 0x2996 <__gtsf2>
     48c:	18 16       	cp	r1, r24
     48e:	24 f4       	brge	.+8      	; 0x498 <get_pot_value+0xd6>
        temp = output_max;
     490:	ea 82       	std	Y+2, r14	; 0x02
     492:	fb 82       	std	Y+3, r15	; 0x03
     494:	0c 83       	std	Y+4, r16	; 0x04
     496:	1d 83       	std	Y+5, r17	; 0x05
        
    if (temp < output_min)
     498:	6a 81       	ldd	r22, Y+2	; 0x02
     49a:	7b 81       	ldd	r23, Y+3	; 0x03
     49c:	8c 81       	ldd	r24, Y+4	; 0x04
     49e:	9d 81       	ldd	r25, Y+5	; 0x05
     4a0:	a6 01       	movw	r20, r12
     4a2:	95 01       	movw	r18, r10
     4a4:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__ltsf2>
     4a8:	87 ff       	sbrs	r24, 7
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <get_pot_value+0xf2>
        temp = output_min;
     4ac:	aa 82       	std	Y+2, r10	; 0x02
     4ae:	bb 82       	std	Y+3, r11	; 0x03
     4b0:	cc 82       	std	Y+4, r12	; 0x04
     4b2:	dd 82       	std	Y+5, r13	; 0x05
		
	if (temp == 0 && pot_select == 4)
     4b4:	6a 81       	ldd	r22, Y+2	; 0x02
     4b6:	7b 81       	ldd	r23, Y+3	; 0x03
     4b8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ba:	9d 81       	ldd	r25, Y+5	; 0x05
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	a9 01       	movw	r20, r18
     4c2:	0e 94 9b 14 	call	0x2936	; 0x2936 <__eqsf2>
     4c6:	88 23       	and	r24, r24
     4c8:	29 f4       	brne	.+10     	; 0x4d4 <get_pot_value+0x112>
     4ca:	85 2d       	mov	r24, r5
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <get_pot_value+0x112>
	    stop_me = 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	89 83       	std	Y+1, r24	; 0x01
    
    return (uint16_t) temp;
     4d4:	6a 81       	ldd	r22, Y+2	; 0x02
     4d6:	7b 81       	ldd	r23, Y+3	; 0x03
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	9d 81       	ldd	r25, Y+5	; 0x05
     4dc:	0e 94 1f 11 	call	0x223e	; 0x223e <__fixunssfsi>
}
     4e0:	cb 01       	movw	r24, r22
     4e2:	25 96       	adiw	r28, 0x05	; 5
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	7f 90       	pop	r7
     502:	6f 90       	pop	r6
     504:	5f 90       	pop	r5
     506:	08 95       	ret

00000508 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	fc 01       	movw	r30, r24
     522:	22 e0       	ldi	r18, 0x02	; 2
     524:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     526:	ca e0       	ldi	r28, 0x0A	; 10
     528:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     52a:	73 e0       	ldi	r23, 0x03	; 3
     52c:	c7 2e       	mov	r12, r23
     52e:	d1 2c       	mov	r13, r1
     530:	68 e0       	ldi	r22, 0x08	; 8
     532:	a6 2e       	mov	r10, r22
     534:	b1 2c       	mov	r11, r1
     536:	00 e6       	ldi	r16, 0x60	; 96
     538:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     53a:	50 e4       	ldi	r21, 0x40	; 64
     53c:	e5 2e       	mov	r14, r21
     53e:	56 e0       	ldi	r21, 0x06	; 6
     540:	f5 2e       	mov	r15, r21
     542:	40 ef       	ldi	r20, 0xF0	; 240
     544:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     546:	98 e3       	ldi	r25, 0x38	; 56
     548:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     54a:	cf 01       	movw	r24, r30
     54c:	be 01       	movw	r22, r28
     54e:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
     552:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     554:	30 97       	sbiw	r30, 0x00	; 0
     556:	19 f4       	brne	.+6      	; 0x55e <set_seven_segment_LEDs+0x56>
     558:	22 30       	cpi	r18, 0x02	; 2
     55a:	09 f0       	breq	.+2      	; 0x55e <set_seven_segment_LEDs+0x56>
            digit = 10;
     55c:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     55e:	c9 01       	movw	r24, r18
     560:	b6 01       	movw	r22, r12
     562:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
     566:	b5 01       	movw	r22, r10
     568:	02 c0       	rjmp	.+4      	; 0x56e <set_seven_segment_LEDs+0x66>
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	8a 95       	dec	r24
     570:	e2 f7       	brpl	.-8      	; 0x56a <set_seven_segment_LEDs+0x62>
     572:	d8 01       	movw	r26, r16
     574:	16 96       	adiw	r26, 0x06	; 6
     576:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     578:	d7 01       	movw	r26, r14
     57a:	16 96       	adiw	r26, 0x06	; 6
     57c:	9c 92       	st	X, r9
     57e:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     580:	42 95       	swap	r20
     582:	40 7f       	andi	r20, 0xF0	; 240
     584:	15 96       	adiw	r26, 0x05	; 5
     586:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     588:	d8 01       	movw	r26, r16
     58a:	15 96       	adiw	r26, 0x05	; 5
     58c:	8c 92       	st	X, r8
     58e:	15 97       	sbiw	r26, 0x05	; 5
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     594:	25 30       	cpi	r18, 0x05	; 5
     596:	31 05       	cpc	r19, r1
     598:	31 f0       	breq	.+12     	; 0x5a6 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     59a:	cf 01       	movw	r24, r30
     59c:	be 01       	movw	r22, r28
     59e:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
     5a2:	fb 01       	movw	r30, r22
     5a4:	d2 cf       	rjmp	.-92     	; 0x54a <set_seven_segment_LEDs+0x42>
    }
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     5c0:	88 23       	and	r24, r24
     5c2:	21 f0       	breq	.+8      	; 0x5cc <set_LEDs_on+0xc>
        PORTC.OUTCLR = 0x08;
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	e0 e4       	ldi	r30, 0x40	; 64
     5c8:	f6 e0       	ldi	r31, 0x06	; 6
     5ca:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_0)
     5cc:	66 23       	and	r22, r22
     5ce:	21 f0       	breq	.+8      	; 0x5d8 <set_LEDs_on+0x18>
        PORTD.OUTSET = 0x04;
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	e0 e6       	ldi	r30, 0x60	; 96
     5d4:	f6 e0       	ldi	r31, 0x06	; 6
     5d6:	85 83       	std	Z+5, r24	; 0x05
        
    if (decimal_point_1)
     5d8:	44 23       	and	r20, r20
     5da:	21 f0       	breq	.+8      	; 0x5e4 <set_LEDs_on+0x24>
        PORTD.OUTSET = 0x01;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	e0 e6       	ldi	r30, 0x60	; 96
     5e0:	f6 e0       	ldi	r31, 0x06	; 6
     5e2:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_2)
     5e4:	22 23       	and	r18, r18
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <set_LEDs_on+0x30>
        PORTD.OUTSET = 0x02;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	e0 e6       	ldi	r30, 0x60	; 96
     5ec:	f6 e0       	ldi	r31, 0x06	; 6
     5ee:	85 83       	std	Z+5, r24	; 0x05
     5f0:	08 95       	ret

000005f2 <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     5f2:	88 23       	and	r24, r24
     5f4:	21 f0       	breq	.+8      	; 0x5fe <set_LEDs_off+0xc>
        PORTC.OUTSET = 0x08;
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	e0 e4       	ldi	r30, 0x40	; 64
     5fa:	f6 e0       	ldi	r31, 0x06	; 6
     5fc:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_0)
     5fe:	66 23       	and	r22, r22
     600:	21 f0       	breq	.+8      	; 0x60a <set_LEDs_off+0x18>
        PORTD.OUTCLR = 0x04;
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	e0 e6       	ldi	r30, 0x60	; 96
     606:	f6 e0       	ldi	r31, 0x06	; 6
     608:	86 83       	std	Z+6, r24	; 0x06
        
    if (decimal_point_1)
     60a:	44 23       	and	r20, r20
     60c:	21 f0       	breq	.+8      	; 0x616 <set_LEDs_off+0x24>
        PORTD.OUTCLR = 0x01;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	e0 e6       	ldi	r30, 0x60	; 96
     612:	f6 e0       	ldi	r31, 0x06	; 6
     614:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_2)
     616:	22 23       	and	r18, r18
     618:	21 f0       	breq	.+8      	; 0x622 <set_LEDs_off+0x30>
        PORTD.OUTCLR = 0x02;
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	e0 e6       	ldi	r30, 0x60	; 96
     61e:	f6 e0       	ldi	r31, 0x06	; 6
     620:	86 83       	std	Z+6, r24	; 0x06
     622:	08 95       	ret

00000624 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return manager.encoder_switch_state;
}
     624:	80 91 44 21 	lds	r24, 0x2144
     628:	08 95       	ret

0000062a <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return manager.encoder_switch_edge;
}
     62a:	80 91 41 21 	lds	r24, 0x2141
     62e:	08 95       	ret

00000630 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return manager.pushbutton_switch_state;
}
     630:	80 91 42 21 	lds	r24, 0x2142
     634:	08 95       	ret

00000636 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return manager.pushbutton_switch_edge;
}
     636:	80 91 3f 21 	lds	r24, 0x213F
     63a:	08 95       	ret

0000063c <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return manager.toggle_switch_state;
}
     63c:	80 91 43 21 	lds	r24, 0x2143
     640:	08 95       	ret

00000642 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return manager.toggle_switch_edge;
}
     642:	80 91 40 21 	lds	r24, 0x2140
     646:	08 95       	ret

00000648 <initialize_hardware>:

void initialize_hardware(){
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
	initialize_hardware_manager();
     64c:	0e 94 bb 01 	call	0x376	; 0x376 <initialize_hardware_manager>
        manager.pot_values[i] = 0; 
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     650:	e0 e4       	ldi	r30, 0x40	; 64
     652:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     654:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     656:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     658:	c0 e5       	ldi	r28, 0x50	; 80
     65a:	d0 e0       	ldi	r29, 0x00	; 0
     65c:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     65e:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     660:	a0 e5       	ldi	r26, 0x50	; 80
     662:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     664:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     666:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     668:	98 ed       	ldi	r25, 0xD8	; 216
     66a:	15 c0       	rjmp	.+42     	; 0x696 <initialize_hardware+0x4e>
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     66c:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     66e:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     670:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     672:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     676:	70 91 51 00 	lds	r23, 0x0051
     67a:	73 ff       	sbrs	r23, 3
     67c:	fc cf       	rjmp	.-8      	; 0x676 <initialize_hardware+0x2e>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     67e:	15 96       	adiw	r26, 0x05	; 5
     680:	3c 93       	st	X, r19
     682:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     684:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     688:	70 91 51 00 	lds	r23, 0x0051
     68c:	74 ff       	sbrs	r23, 4
     68e:	fc cf       	rjmp	.-8      	; 0x688 <initialize_hardware+0x40>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     690:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     692:	80 93 40 00 	sts	0x0040, r24
        manager.pot_values[i] = 0; 
}	
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     696:	70 91 40 00 	lds	r23, 0x0040
     69a:	74 30       	cpi	r23, 0x04	; 4
     69c:	39 f7       	brne	.-50     	; 0x66c <initialize_hardware+0x24>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     69e:	f8 94       	cli
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     6a0:	a0 e6       	ldi	r26, 0x60	; 96
     6a2:	b6 e0       	ldi	r27, 0x06	; 6
     6a4:	80 e8       	ldi	r24, 0x80	; 128
     6a6:	15 96       	adiw	r26, 0x05	; 5
     6a8:	8c 93       	st	X, r24
     6aa:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     6ac:	90 e4       	ldi	r25, 0x40	; 64
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	9c 93       	st	X, r25
     6b2:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	8c 93       	st	X, r24
     6b8:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     6ba:	e0 eb       	ldi	r30, 0xB0	; 176
     6bc:	f9 e0       	ldi	r31, 0x09	; 9
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     6c2:	90 e2       	ldi	r25, 0x20	; 32
     6c4:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     6c6:	33 e0       	ldi	r19, 0x03	; 3
     6c8:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     6ca:	8f e2       	ldi	r24, 0x2F	; 47
     6cc:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     6ce:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     6d0:	80 91 a2 00 	lds	r24, 0x00A2
     6d4:	87 68       	ori	r24, 0x87	; 135
     6d6:	e0 ea       	ldi	r30, 0xA0	; 160
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     6dc:	78 94       	sei
turn_state get_encoder(){
    return manager.encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     6de:	c0 e0       	ldi	r28, 0x00	; 0
     6e0:	d6 e0       	ldi	r29, 0x06	; 6
     6e2:	89 ef       	ldi	r24, 0xF9	; 249
     6e4:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6ee:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6f0:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6f2:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6f8:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6fa:	80 91 00 02 	lds	r24, 0x0200
     6fe:	81 60       	ori	r24, 0x01	; 1
     700:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     704:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     706:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     708:	12 a2       	std	Z+34, r1	; 0x22
    if (decimal_point_2)
        PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     70a:	40 e2       	ldi	r20, 0x20	; 32
     70c:	56 e0       	ldi	r21, 0x06	; 6
     70e:	8c e0       	ldi	r24, 0x0C	; 12
     710:	fa 01       	movw	r30, r20
     712:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     714:	28 e0       	ldi	r18, 0x08	; 8
     716:	80 e8       	ldi	r24, 0x80	; 128
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	fc 01       	movw	r30, r24
     71c:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     71e:	fa 01       	movw	r30, r20
     720:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     722:	86 e0       	ldi	r24, 0x06	; 6
     724:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     726:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     728:	e0 e4       	ldi	r30, 0x40	; 64
     72a:	f6 e0       	ldi	r31, 0x06	; 6
     72c:	88 ef       	ldi	r24, 0xF8	; 248
     72e:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     730:	8f e3       	ldi	r24, 0x3F	; 63
     732:	11 96       	adiw	r26, 0x01	; 1
     734:	8c 93       	st	X, r24
     736:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     738:	88 e3       	ldi	r24, 0x38	; 56
     73a:	15 96       	adiw	r26, 0x05	; 5
     73c:	8c 93       	st	X, r24
     73e:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     740:	90 ef       	ldi	r25, 0xF0	; 240
     742:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     744:	16 96       	adiw	r26, 0x06	; 6
     746:	8c 93       	st	X, r24
     748:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     74a:	87 e0       	ldi	r24, 0x07	; 7
     74c:	16 96       	adiw	r26, 0x06	; 6
     74e:	8c 93       	st	X, r24
     750:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     752:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <read_hardware>:

void read_hardware(){
     75a:	4f 92       	push	r4
     75c:	5f 92       	push	r5
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	00 d0       	rcall	.+0      	; 0x77a <read_hardware+0x20>
     77a:	0f 92       	push	r0
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     780:	80 91 88 06 	lds	r24, 0x0688
     784:	86 95       	lsr	r24
     786:	86 95       	lsr	r24
     788:	86 95       	lsr	r24
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	09 f0       	breq	.+2      	; 0x790 <read_hardware+0x36>
     78e:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     790:	80 91 28 06 	lds	r24, 0x0628
     794:	86 95       	lsr	r24
     796:	86 95       	lsr	r24
     798:	80 fd       	sbrc	r24, 0
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <read_hardware+0x46>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <read_hardware+0x48>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	c8 2e       	mov	r12, r24
     7a4:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     7a6:	80 91 28 06 	lds	r24, 0x0628
     7aa:	86 95       	lsr	r24
     7ac:	86 95       	lsr	r24
     7ae:	86 95       	lsr	r24
     7b0:	80 fd       	sbrc	r24, 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <read_hardware+0x5e>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <read_hardware+0x60>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	c8 2a       	or	r12, r24
     7bc:	c0 92 54 21 	sts	0x2154, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     7c0:	60 91 53 21 	lds	r22, 0x2153
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	e0 90 52 21 	lds	r14, 0x2152
     7ca:	ef e4       	ldi	r30, 0x4F	; 79
     7cc:	f1 e2       	ldi	r31, 0x21	; 33
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	4c 2d       	mov	r20, r12
     7d4:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     7da:	88 2e       	mov	r8, r24
     7dc:	8a 01       	movw	r16, r20
     7de:	08 2e       	mov	r0, r24
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <read_hardware+0x8c>
     7e2:	15 95       	asr	r17
     7e4:	07 95       	ror	r16
     7e6:	0a 94       	dec	r0
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <read_hardware+0x88>
     7ea:	db 01       	movw	r26, r22
     7ec:	08 2e       	mov	r0, r24
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <read_hardware+0x9a>
     7f0:	b5 95       	asr	r27
     7f2:	a7 95       	ror	r26
     7f4:	0a 94       	dec	r0
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <read_hardware+0x96>
     7f8:	0a 17       	cp	r16, r26
     7fa:	1b 07       	cpc	r17, r27
     7fc:	21 f4       	brne	.+8      	; 0x806 <read_hardware+0xac>
            switch_history_counts[i]++;                            //increment count        
     7fe:	a0 81       	ld	r26, Z
     800:	af 5f       	subi	r26, 0xFF	; 255
     802:	a0 83       	st	Z, r26
     804:	01 c0       	rjmp	.+2      	; 0x808 <read_hardware+0xae>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     806:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     808:	a0 81       	ld	r26, Z
     80a:	a9 30       	cpi	r26, 0x09	; 9
     80c:	60 f0       	brcs	.+24     	; 0x826 <read_hardware+0xcc>
            final_switch_states &= ~(1 << i);
     80e:	d9 01       	movw	r26, r18
     810:	02 c0       	rjmp	.+4      	; 0x816 <read_hardware+0xbc>
     812:	aa 0f       	add	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	8a 94       	dec	r8
     818:	e2 f7       	brpl	.-8      	; 0x812 <read_hardware+0xb8>
     81a:	ba 2f       	mov	r27, r26
     81c:	b0 95       	com	r27
     81e:	eb 22       	and	r14, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     820:	ac 21       	and	r26, r12
     822:	ea 2a       	or	r14, r26
            switch_history_counts[i] = 0;                          //and reset count
     824:	10 82       	st	Z, r1
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     82a:	83 30       	cpi	r24, 0x03	; 3
     82c:	91 05       	cpc	r25, r1
     82e:	a9 f6       	brne	.-86     	; 0x7da <read_hardware+0x80>
     830:	e0 92 52 21 	sts	0x2152, r14
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     834:	c0 92 53 21 	sts	0x2153, r12
     838:	80 91 43 21 	lds	r24, 0x2143
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     83c:	e0 fe       	sbrs	r14, 0
     83e:	0c c0       	rjmp	.+24     	; 0x858 <read_hardware+0xfe>
        if (manager.toggle_switch_state)                //if toggle WAS on
     840:	88 23       	and	r24, r24
     842:	19 f0       	breq	.+6      	; 0x84a <read_hardware+0xf0>
            manager.toggle_switch_edge = EDGE_NONE;     //no edge
     844:	10 92 40 21 	sts	0x2140, r1
     848:	03 c0       	rjmp	.+6      	; 0x850 <read_hardware+0xf6>
        else                                    //else (toggle WAS off)
            manager.toggle_switch_edge = EDGE_RISE;     //new on
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 40 21 	sts	0x2140, r24
        manager.toggle_switch_state = 1;                //set current value
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 43 21 	sts	0x2143, r24
     856:	0a c0       	rjmp	.+20     	; 0x86c <read_hardware+0x112>
    }        
    else{                                       //if toggle IS off
        if (manager.toggle_switch_state)                //if toggle WAS on
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <read_hardware+0x10a>
            manager.toggle_switch_edge = EDGE_FALL;     //new off
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	80 93 40 21 	sts	0x2140, r24
     862:	02 c0       	rjmp	.+4      	; 0x868 <read_hardware+0x10e>
        else                                    //else (toggle WAS off)
            manager.toggle_switch_edge = EDGE_NONE;     //no edge
     864:	10 92 40 21 	sts	0x2140, r1
        manager.toggle_switch_state = 0;                //set current value
     868:	10 92 43 21 	sts	0x2143, r1
     86c:	80 91 42 21 	lds	r24, 0x2142
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     870:	e1 fe       	sbrs	r14, 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <read_hardware+0x132>
        if (manager.pushbutton_switch_state)                //if pushbutton WAS on
     874:	88 23       	and	r24, r24
     876:	19 f0       	breq	.+6      	; 0x87e <read_hardware+0x124>
            manager.pushbutton_switch_edge = EDGE_NONE;     //no edge
     878:	10 92 3f 21 	sts	0x213F, r1
     87c:	03 c0       	rjmp	.+6      	; 0x884 <read_hardware+0x12a>
        else                                        //else (pushbutton WAS off)
            manager.pushbutton_switch_edge = EDGE_RISE;     //new on
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 3f 21 	sts	0x213F, r24
        manager.pushbutton_switch_state = 1;                //set current value
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 42 21 	sts	0x2142, r24
     88a:	0a c0       	rjmp	.+20     	; 0x8a0 <read_hardware+0x146>
    }        
    else{                                           //if pushbutton IS off
        if (manager.pushbutton_switch_state)                //if pushbutton WAS on
     88c:	88 23       	and	r24, r24
     88e:	21 f0       	breq	.+8      	; 0x898 <read_hardware+0x13e>
            manager.pushbutton_switch_edge = EDGE_FALL;     //new off
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	80 93 3f 21 	sts	0x213F, r24
     896:	02 c0       	rjmp	.+4      	; 0x89c <read_hardware+0x142>
        else                                        //else (pushbutton WAS off)
            manager.pushbutton_switch_edge = EDGE_NONE;     //no edge
     898:	10 92 3f 21 	sts	0x213F, r1
        manager.pushbutton_switch_state = 0;                //set current value
     89c:	10 92 42 21 	sts	0x2142, r1
     8a0:	80 91 44 21 	lds	r24, 0x2144
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     8a4:	e2 fe       	sbrs	r14, 2
     8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <read_hardware+0x166>
        if (manager.encoder_switch_state)                //if encoder WAS on
     8a8:	88 23       	and	r24, r24
     8aa:	19 f0       	breq	.+6      	; 0x8b2 <read_hardware+0x158>
            manager.encoder_switch_edge = EDGE_NONE;     //no edge
     8ac:	10 92 41 21 	sts	0x2141, r1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <read_hardware+0x15e>
        else                                     //else (encoder WAS off)
            manager.encoder_switch_edge = EDGE_RISE;     //new on
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 41 21 	sts	0x2141, r24
        manager.encoder_switch_state = 1;                //set current value
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 44 21 	sts	0x2144, r24
     8be:	0a c0       	rjmp	.+20     	; 0x8d4 <read_hardware+0x17a>
    }        
    else{                                        //if encoder IS off
        if (manager.encoder_switch_state)                //if encoder WAS on
     8c0:	88 23       	and	r24, r24
     8c2:	21 f0       	breq	.+8      	; 0x8cc <read_hardware+0x172>
            manager.encoder_switch_edge = EDGE_FALL;     //new off
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 93 41 21 	sts	0x2141, r24
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <read_hardware+0x176>
        else                                     //else (encoder WAS off)
            manager.encoder_switch_edge = EDGE_NONE;     //no edge
     8cc:	10 92 41 21 	sts	0x2141, r1
        manager.encoder_switch_state = 0;                //set current value
     8d0:	10 92 44 21 	sts	0x2144, r1
    volatile uint8_t i;
	volatile uint16_t new_reading;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     8d4:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     8d6:	e1 2c       	mov	r14, r1
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	f6 2e       	mov	r15, r22
     8dc:	94 c0       	rjmp	.+296    	; 0xa06 <read_hardware+0x2ac>
     8de:	80 91 23 02 	lds	r24, 0x0223
     8e2:	81 60       	ori	r24, 0x01	; 1
     8e4:	f7 01       	movw	r30, r14
     8e6:	83 a3       	std	Z+35, r24	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     8e8:	80 91 21 02 	lds	r24, 0x0221
     8ec:	87 7c       	andi	r24, 0xC7	; 199
     8ee:	81 a3       	std	Z+33, r24	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     8f0:	20 91 21 02 	lds	r18, 0x0221
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	03 96       	adiw	r24, 0x03	; 3
     8fa:	53 e0       	ldi	r21, 0x03	; 3
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	5a 95       	dec	r21
     902:	e1 f7       	brne	.-8      	; 0x8fc <read_hardware+0x1a2>
     904:	28 2b       	or	r18, r24
     906:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     908:	80 91 20 02 	lds	r24, 0x0220
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	80 a3       	std	Z+32, r24	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     910:	80 91 23 02 	lds	r24, 0x0223
     914:	80 ff       	sbrs	r24, 0
     916:	fc cf       	rjmp	.-8      	; 0x910 <read_hardware+0x1b6>

        //load ADC value into the new variable
        new_reading = ADCA.CH0.RESL;
     918:	80 91 24 02 	lds	r24, 0x0224
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	9b 83       	std	Y+3, r25	; 0x03
        new_reading |= ADCA.CH0.RESH << 8;
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	9b 81       	ldd	r25, Y+3	; 0x03
     926:	20 91 25 02 	lds	r18, 0x0225
     92a:	52 2e       	mov	r5, r18
     92c:	44 24       	eor	r4, r4
     92e:	84 29       	or	r24, r4
     930:	95 29       	or	r25, r5
     932:	8a 83       	std	Y+2, r24	; 0x02
     934:	9b 83       	std	Y+3, r25	; 0x03
		
		//LPF on new value to reduce noise
		manager.pot_values[i] = manager.pot_values[i] + (new_reading - manager.pot_values[i])/POT_FILTER_COEFF + POT_FILTER_COEFF;
     936:	09 81       	ldd	r16, Y+1	; 0x01
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	ca 80       	ldd	r12, Y+2	; 0x02
     93c:	db 80       	ldd	r13, Y+3	; 0x03
     93e:	79 80       	ldd	r7, Y+1	; 0x01
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	00 0f       	add	r16, r16
     944:	11 1f       	adc	r17, r17
     946:	02 5c       	subi	r16, 0xC2	; 194
     948:	1e 4d       	sbci	r17, 0xDE	; 222
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	e2 5c       	subi	r30, 0xC2	; 194
     952:	fe 4d       	sbci	r31, 0xDE	; 222
     954:	67 81       	ldd	r22, Z+7	; 0x07
     956:	70 85       	ldd	r23, Z+8	; 0x08
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     960:	4b 01       	movw	r8, r22
     962:	5c 01       	movw	r10, r24
     964:	e7 2d       	mov	r30, r7
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	e2 5c       	subi	r30, 0xC2	; 194
     96e:	fe 4d       	sbci	r31, 0xDE	; 222
     970:	87 81       	ldd	r24, Z+7	; 0x07
     972:	90 85       	ldd	r25, Z+8	; 0x08
     974:	c8 1a       	sub	r12, r24
     976:	d9 0a       	sbc	r13, r25
     978:	b6 01       	movw	r22, r12
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__floatunsisf>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5e e3       	ldi	r21, 0x3E	; 62
     98a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	c5 01       	movw	r24, r10
     994:	b4 01       	movw	r22, r8
     996:	0e 94 95 12 	call	0x252a	; 0x252a <__addsf3>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e8       	ldi	r20, 0x80	; 128
     9a0:	50 e4       	ldi	r21, 0x40	; 64
     9a2:	0e 94 95 12 	call	0x252a	; 0x252a <__addsf3>
     9a6:	0e 94 1f 11 	call	0x223e	; 0x223e <__fixunssfsi>
     9aa:	f8 01       	movw	r30, r16
     9ac:	67 83       	std	Z+7, r22	; 0x07
     9ae:	70 87       	std	Z+8, r23	; 0x08
        
        if (manager.pot_values[i] < POT_MIN)
     9b0:	e9 81       	ldd	r30, Y+1	; 0x01
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	e2 5c       	subi	r30, 0xC2	; 194
     9ba:	fe 4d       	sbci	r31, 0xDE	; 222
     9bc:	87 81       	ldd	r24, Z+7	; 0x07
     9be:	90 85       	ldd	r25, Z+8	; 0x08
     9c0:	80 3e       	cpi	r24, 0xE0	; 224
     9c2:	91 05       	cpc	r25, r1
     9c4:	48 f4       	brcc	.+18     	; 0x9d8 <read_hardware+0x27e>
            manager.pot_values[i] = 0;
     9c6:	e9 81       	ldd	r30, Y+1	; 0x01
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	e2 5c       	subi	r30, 0xC2	; 194
     9d0:	fe 4d       	sbci	r31, 0xDE	; 222
     9d2:	17 82       	std	Z+7, r1	; 0x07
     9d4:	10 86       	std	Z+8, r1	; 0x08
     9d6:	14 c0       	rjmp	.+40     	; 0xa00 <read_hardware+0x2a6>
        else
            manager.pot_values[i] = manager.pot_values[i] - POT_MIN;
     9d8:	e9 81       	ldd	r30, Y+1	; 0x01
     9da:	a9 81       	ldd	r26, Y+1	; 0x01
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e2 5c       	subi	r30, 0xC2	; 194
     9e4:	fe 4d       	sbci	r31, 0xDE	; 222
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	aa 0f       	add	r26, r26
     9ea:	bb 1f       	adc	r27, r27
     9ec:	a2 5c       	subi	r26, 0xC2	; 194
     9ee:	be 4d       	sbci	r27, 0xDE	; 222
     9f0:	17 96       	adiw	r26, 0x07	; 7
     9f2:	8d 91       	ld	r24, X+
     9f4:	9c 91       	ld	r25, X
     9f6:	18 97       	sbiw	r26, 0x08	; 8
     9f8:	80 5e       	subi	r24, 0xE0	; 224
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	87 83       	std	Z+7, r24	; 0x07
     9fe:	90 87       	std	Z+8, r25	; 0x08
    volatile uint8_t i;
	volatile uint16_t new_reading;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	85 30       	cpi	r24, 0x05	; 5
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <read_hardware+0x2b4>
     a0c:	68 cf       	rjmp	.-304    	; 0x8de <read_hardware+0x184>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     a0e:	80 91 28 06 	lds	r24, 0x0628
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	80 fd       	sbrc	r24, 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     a18:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     a1c:	84 2f       	mov	r24, r20
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	20 91 55 21 	lds	r18, 0x2155
     a24:	51 e0       	ldi	r21, 0x01	; 1
     a26:	25 27       	eor	r18, r21
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	82 23       	and	r24, r18
     a2c:	93 23       	and	r25, r19
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	59 f0       	breq	.+22     	; 0xa48 <read_hardware+0x2ee>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     a32:	86 2f       	mov	r24, r22
     a34:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     a36:	80 fd       	sbrc	r24, 0
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <read_hardware+0x2e6>
            manager.encoder_state = TURN_CW;    //CW        
     a3a:	50 93 3e 21 	sts	0x213E, r21
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <read_hardware+0x2f2>
        else
            manager.encoder_state = TURN_CCW;    //CCW
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	80 93 3e 21 	sts	0x213E, r24
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <read_hardware+0x2f2>
    }
    else
        manager.encoder_state = TURN_NONE;   
     a48:	10 92 3e 21 	sts	0x213E, r1
    last_a = current_a;
     a4c:	40 93 55 21 	sts	0x2155, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     a50:	23 96       	adiw	r28, 0x03	; 3
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	7f 90       	pop	r7
     a70:	5f 90       	pop	r5
     a72:	4f 90       	pop	r4
     a74:	08 95       	ret

00000a76 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
    
    //set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     a76:	08 95       	ret

00000a78 <__vector_91>:
#include "arpeggiator.h"

static Sequencer sequencer;
static MidiDevice midi_device;

ISR(USARTD1_RXC_vect){
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
    midi_device_input(&midi_device,1,&(USARTD1.DATA));
     a9e:	cf e7       	ldi	r28, 0x7F	; 127
     aa0:	d2 e2       	ldi	r29, 0x22	; 34
     aa2:	ce 01       	movw	r24, r28
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	40 eb       	ldi	r20, 0xB0	; 176
     aa8:	59 e0       	ldi	r21, 0x09	; 9
     aaa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_process(&midi_device);
     aae:	ce 01       	movw	r24, r28
     ab0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_device_process>
}
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_17>:

//interrupt to start the next note
ISR(TCC0_CCB_vect){
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(&sequencer, 0);
     afc:	86 e5       	ldi	r24, 0x56	; 86
     afe:	91 e2       	ldi	r25, 0x21	; 33
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	0e 94 20 0a 	call	0x1440	; 0x1440 <continue_sequencer>
}
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(&sequencer, 0);
     b4a:	86 e5       	ldi	r24, 0x56	; 86
     b4c:	91 e2       	ldi	r25, 0x21	; 33
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_sequencer>
}
     b54:	ff 91       	pop	r31
     b56:	ef 91       	pop	r30
     b58:	bf 91       	pop	r27
     b5a:	af 91       	pop	r26
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	7f 91       	pop	r23
     b62:	6f 91       	pop	r22
     b64:	5f 91       	pop	r21
     b66:	4f 91       	pop	r20
     b68:	3f 91       	pop	r19
     b6a:	2f 91       	pop	r18
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <fake_midi_noteon_input>:


void fake_midi_noteon_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <fake_midi_noteon_input+0xa>
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	8c 01       	movw	r16, r24
     b88:	6a 83       	std	Y+2, r22	; 0x02
     b8a:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteon_byte1 = 144;
     b8c:	80 e9       	ldi	r24, 0x90	; 144
     b8e:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteon_byte1);
     b90:	c8 01       	movw	r24, r16
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	ae 01       	movw	r20, r28
     b96:	4f 5f       	subi	r20, 0xFF	; 255
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     b9e:	c8 01       	movw	r24, r16
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	ae 01       	movw	r20, r28
     ba4:	4e 5f       	subi	r20, 0xFE	; 254
     ba6:	5f 4f       	sbci	r21, 0xFF	; 255
     ba8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     bac:	c8 01       	movw	r24, r16
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	ae 01       	movw	r20, r28
     bb2:	4d 5f       	subi	r20, 0xFD	; 253
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_process(midi_device);
     bba:	c8 01       	movw	r24, r16
     bbc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_device_process>
}
     bc0:	23 96       	adiw	r28, 0x03	; 3
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <fake_midi_noteff_input>:

void fake_midi_noteff_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <fake_midi_noteff_input+0xa>
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	8c 01       	movw	r16, r24
     be2:	6a 83       	std	Y+2, r22	; 0x02
     be4:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteoff_byte1 = 128;
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteoff_byte1);
     bea:	c8 01       	movw	r24, r16
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	ae 01       	movw	r20, r28
     bf0:	4f 5f       	subi	r20, 0xFF	; 255
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     bf8:	c8 01       	movw	r24, r16
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	ae 01       	movw	r20, r28
     bfe:	4e 5f       	subi	r20, 0xFE	; 254
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     c06:	c8 01       	movw	r24, r16
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	ae 01       	movw	r20, r28
     c0c:	4d 5f       	subi	r20, 0xFD	; 253
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <midi_device_input>
    midi_device_process(midi_device);
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <midi_device_process>
}
     c1a:	23 96       	adiw	r28, 0x03	; 3
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <main>:

int main(void) {
    const uint16_t initial_BPM = 60;
	
    initialize_hardware();
     c2a:	0e 94 24 03 	call	0x648	; 0x648 <initialize_hardware>
    initialize_sequencer(&sequencer);
     c2e:	86 e5       	ldi	r24, 0x56	; 86
     c30:	91 e2       	ldi	r25, 0x21	; 33
     c32:	0e 94 ae 09 	call	0x135c	; 0x135c <initialize_sequencer>
	initialize_serial_midi(&midi_device, &sequencer);
     c36:	8f e7       	ldi	r24, 0x7F	; 127
     c38:	92 e2       	ldi	r25, 0x22	; 34
     c3a:	66 e5       	ldi	r22, 0x56	; 86
     c3c:	71 e2       	ldi	r23, 0x21	; 33
     c3e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <initialize_serial_midi>
    initialize_beat_clock(initial_BPM);
     c42:	8c e3       	ldi	r24, 0x3C	; 60
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
    set_seven_segment_LEDs(get_BPM());
     c4a:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     c4e:	0e 94 84 02 	call	0x508	; 0x508 <set_seven_segment_LEDs>
	
	add_note_to_arpeggiator(&sequencer, 60, 100);
     c52:	86 e5       	ldi	r24, 0x56	; 86
     c54:	91 e2       	ldi	r25, 0x21	; 33
     c56:	6c e3       	ldi	r22, 0x3C	; 60
     c58:	44 e6       	ldi	r20, 0x64	; 100
     c5a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <add_note_to_arpeggiator>
	add_note_to_arpeggiator(&sequencer, 67, 100);
     c5e:	86 e5       	ldi	r24, 0x56	; 86
     c60:	91 e2       	ldi	r25, 0x21	; 33
     c62:	63 e4       	ldi	r22, 0x43	; 67
     c64:	44 e6       	ldi	r20, 0x64	; 100
     c66:	0e 94 4c 0c 	call	0x1898	; 0x1898 <add_note_to_arpeggiator>
	add_note_to_arpeggiator(&sequencer, 69, 100);
     c6a:	86 e5       	ldi	r24, 0x56	; 86
     c6c:	91 e2       	ldi	r25, 0x21	; 33
     c6e:	65 e4       	ldi	r22, 0x45	; 69
     c70:	44 e6       	ldi	r20, 0x64	; 100
     c72:	0e 94 4c 0c 	call	0x1898	; 0x1898 <add_note_to_arpeggiator>

    while(1){
        read_hardware();
     c76:	0e 94 ad 03 	call	0x75a	; 0x75a <read_hardware>
        
        if (get_encoder() == TURN_CW)
     c7a:	0e 94 de 01 	call	0x3bc	; 0x3bc <get_encoder>
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	19 f4       	brne	.+6      	; 0xc88 <main+0x5e>
            increment_BPM();
     c82:	0e 94 a3 01 	call	0x346	; 0x346 <increment_BPM>
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <main+0x6a>
        else if (get_encoder() == TURN_CCW)
     c88:	0e 94 de 01 	call	0x3bc	; 0x3bc <get_encoder>
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	11 f4       	brne	.+4      	; 0xc94 <main+0x6a>
            decrement_BPM();    
     c90:	0e 94 af 01 	call	0x35e	; 0x35e <decrement_BPM>
        
        set_seven_segment_LEDs(sequencer.repeat_max);
     c94:	80 91 5d 21 	lds	r24, 0x215D
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 84 02 	call	0x508	; 0x508 <set_seven_segment_LEDs>
		    stop_sequencer(&sequencer, 1);
		}			
		else if (get_encoder_switch_edge() == EDGE_RISE){
			continue_sequencer(&sequencer, 1);
		}				 */   
    }
     c9e:	eb cf       	rjmp	.-42     	; 0xc76 <main+0x4c>

00000ca0 <initialize_note_list>:
    note->previous_note_by_trigger = NULL;
}

//Reset all data in the note list
//Reset all data in each note of the list 
void initialize_note_list(NoteList* note_list){
     ca0:	fc 01       	movw	r30, r24
    uint8_t i;

    note_list->length = 0;
     ca2:	10 82       	st	Z, r1
    note_list->head_pitch = NULL;
     ca4:	dc 01       	movw	r26, r24
     ca6:	af 54       	subi	r26, 0x4F	; 79
     ca8:	bf 4f       	sbci	r27, 0xFF	; 255
     caa:	1d 92       	st	X+, r1
     cac:	1c 92       	st	X, r1
    note_list->tail_pitch = NULL;
     cae:	dc 01       	movw	r26, r24
     cb0:	ad 54       	subi	r26, 0x4D	; 77
     cb2:	bf 4f       	sbci	r27, 0xFF	; 255
     cb4:	1d 92       	st	X+, r1
     cb6:	1c 92       	st	X, r1
    note_list->head_trigger = NULL;
     cb8:	dc 01       	movw	r26, r24
     cba:	ab 54       	subi	r26, 0x4B	; 75
     cbc:	bf 4f       	sbci	r27, 0xFF	; 255
     cbe:	1d 92       	st	X+, r1
     cc0:	1c 92       	st	X, r1
    note_list->tail_trigger = NULL;
     cc2:	dc 01       	movw	r26, r24
     cc4:	a9 54       	subi	r26, 0x49	; 73
     cc6:	bf 4f       	sbci	r27, 0xFF	; 255
     cc8:	1d 92       	st	X+, r1
     cca:	1c 92       	st	X, r1
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	80 e1       	ldi	r24, 0x10	; 16
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     cd0:	12 82       	std	Z+2, r1	; 0x02
    note->velocity = 0;
     cd2:	13 82       	std	Z+3, r1	; 0x03
    note->status = 0;
     cd4:	11 82       	std	Z+1, r1	; 0x01
    note->next_note_by_pitch = NULL;
     cd6:	14 82       	std	Z+4, r1	; 0x04
     cd8:	15 82       	std	Z+5, r1	; 0x05
    note->previous_note_by_pitch = NULL;
     cda:	16 82       	std	Z+6, r1	; 0x06
     cdc:	17 82       	std	Z+7, r1	; 0x07
    note->next_note_by_trigger = NULL;
     cde:	10 86       	std	Z+8, r1	; 0x08
     ce0:	11 86       	std	Z+9, r1	; 0x09
    note->previous_note_by_trigger = NULL;
     ce2:	12 86       	std	Z+10, r1	; 0x0a
     ce4:	13 86       	std	Z+11, r1	; 0x0b
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	3b 96       	adiw	r30, 0x0b	; 11
    note_list->head_pitch = NULL;
    note_list->tail_pitch = NULL;
    note_list->head_trigger = NULL;
    note_list->tail_trigger = NULL;

    for(i = 0; i<MAX_LIST_NOTES; i++)
     cea:	88 23       	and	r24, r24
     cec:	89 f7       	brne	.-30     	; 0xcd0 <initialize_note_list+0x30>
        free_note(&(note_list->note_bank[i]));
}
     cee:	08 95       	ret

00000cf0 <remove_note_by_pitch>:
}

//Search for note by pitch in the note list
//If it is found, adjust surrounding pointers
//And remove and free the note
bool remove_note_by_pitch(NoteList* note_list, uint8_t pitch){
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     cf4:	fc 01       	movw	r30, r24
     cf6:	ef 54       	subi	r30, 0x4F	; 79
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	01 90       	ld	r0, Z+
     cfc:	f0 81       	ld	r31, Z
     cfe:	e0 2d       	mov	r30, r0
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <remove_note_by_pitch+0x1e>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     d02:	21 81       	ldd	r18, Z+1	; 0x01
     d04:	26 17       	cp	r18, r22
     d06:	30 f4       	brcc	.+12     	; 0xd14 <remove_note_by_pitch+0x24>
            break;

        target_note = target_note->next_note_by_pitch;
     d08:	03 80       	ldd	r0, Z+3	; 0x03
     d0a:	f4 81       	ldd	r31, Z+4	; 0x04
     d0c:	e0 2d       	mov	r30, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     d0e:	30 97       	sbiw	r30, 0x00	; 0
     d10:	c1 f7       	brne	.-16     	; 0xd02 <remove_note_by_pitch+0x12>
     d12:	51 c0       	rjmp	.+162    	; 0xdb6 <remove_note_by_pitch+0xc6>
    //note not found (reached the end of the note list)
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
     d14:	26 17       	cp	r18, r22
     d16:	09 f0       	breq	.+2      	; 0xd1a <remove_note_by_pitch+0x2a>
     d18:	4e c0       	rjmp	.+156    	; 0xdb6 <remove_note_by_pitch+0xc6>
        return 0;
        
    //otherwise, the note was found and ready to be removed
    note_list->length += -1;
     d1a:	dc 01       	movw	r26, r24
     d1c:	2c 91       	ld	r18, X
     d1e:	21 50       	subi	r18, 0x01	; 1
     d20:	2c 93       	st	X, r18
    
    //check for empty list
    if (note_list->length == 0){
     d22:	22 23       	and	r18, r18
     d24:	19 f4       	brne	.+6      	; 0xd2c <remove_note_by_pitch+0x3c>
        initialize_note_list(note_list);
     d26:	0e 94 50 06 	call	0xca0	; 0xca0 <initialize_note_list>
     d2a:	43 c0       	rjmp	.+134    	; 0xdb2 <remove_note_by_pitch+0xc2>
    }
    
    //adjust surrounding pointers
    //set new heads and tails if necessary
    
    if (dead_note->previous_note_by_pitch)
     d2c:	a5 81       	ldd	r26, Z+5	; 0x05
     d2e:	b6 81       	ldd	r27, Z+6	; 0x06
     d30:	23 81       	ldd	r18, Z+3	; 0x03
     d32:	34 81       	ldd	r19, Z+4	; 0x04
     d34:	10 97       	sbiw	r26, 0x00	; 0
     d36:	29 f0       	breq	.+10     	; 0xd42 <remove_note_by_pitch+0x52>
        dead_note->previous_note_by_pitch->next_note_by_pitch = dead_note->next_note_by_pitch;
     d38:	13 96       	adiw	r26, 0x03	; 3
     d3a:	2d 93       	st	X+, r18
     d3c:	3c 93       	st	X, r19
     d3e:	14 97       	sbiw	r26, 0x04	; 4
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <remove_note_by_pitch+0x5c>
    else
        note_list->head_pitch = dead_note->next_note_by_pitch;
     d42:	ec 01       	movw	r28, r24
     d44:	cf 54       	subi	r28, 0x4F	; 79
     d46:	df 4f       	sbci	r29, 0xFF	; 255
     d48:	28 83       	st	Y, r18
     d4a:	39 83       	std	Y+1, r19	; 0x01
    
    if (dead_note->next_note_by_pitch)
     d4c:	c3 81       	ldd	r28, Z+3	; 0x03
     d4e:	d4 81       	ldd	r29, Z+4	; 0x04
     d50:	20 97       	sbiw	r28, 0x00	; 0
     d52:	19 f0       	breq	.+6      	; 0xd5a <remove_note_by_pitch+0x6a>
        dead_note->next_note_by_pitch->previous_note_by_pitch = dead_note->previous_note_by_pitch;
     d54:	ad 83       	std	Y+5, r26	; 0x05
     d56:	be 83       	std	Y+6, r27	; 0x06
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <remove_note_by_pitch+0x74>
    else
        note_list->tail_pitch = dead_note->previous_note_by_pitch;
     d5a:	ec 01       	movw	r28, r24
     d5c:	cd 54       	subi	r28, 0x4D	; 77
     d5e:	df 4f       	sbci	r29, 0xFF	; 255
     d60:	a8 83       	st	Y, r26
     d62:	b9 83       	std	Y+1, r27	; 0x01
        
    if (dead_note->previous_note_by_trigger)
     d64:	a1 85       	ldd	r26, Z+9	; 0x09
     d66:	b2 85       	ldd	r27, Z+10	; 0x0a
     d68:	27 81       	ldd	r18, Z+7	; 0x07
     d6a:	30 85       	ldd	r19, Z+8	; 0x08
     d6c:	10 97       	sbiw	r26, 0x00	; 0
     d6e:	29 f0       	breq	.+10     	; 0xd7a <remove_note_by_pitch+0x8a>
        dead_note->previous_note_by_trigger->next_note_by_trigger = dead_note->next_note_by_trigger;
     d70:	17 96       	adiw	r26, 0x07	; 7
     d72:	2d 93       	st	X+, r18
     d74:	3c 93       	st	X, r19
     d76:	18 97       	sbiw	r26, 0x08	; 8
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <remove_note_by_pitch+0x94>
    else
        note_list->head_trigger = dead_note->next_note_by_trigger;
     d7a:	ec 01       	movw	r28, r24
     d7c:	cb 54       	subi	r28, 0x4B	; 75
     d7e:	df 4f       	sbci	r29, 0xFF	; 255
     d80:	28 83       	st	Y, r18
     d82:	39 83       	std	Y+1, r19	; 0x01
    
    if (dead_note->next_note_by_trigger)
     d84:	c7 81       	ldd	r28, Z+7	; 0x07
     d86:	d0 85       	ldd	r29, Z+8	; 0x08
     d88:	20 97       	sbiw	r28, 0x00	; 0
     d8a:	19 f0       	breq	.+6      	; 0xd92 <remove_note_by_pitch+0xa2>
        dead_note->next_note_by_trigger->previous_note_by_trigger = dead_note->previous_note_by_trigger;
     d8c:	a9 87       	std	Y+9, r26	; 0x09
     d8e:	ba 87       	std	Y+10, r27	; 0x0a
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <remove_note_by_pitch+0xac>
    else
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
     d92:	89 54       	subi	r24, 0x49	; 73
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	ec 01       	movw	r28, r24
     d98:	a8 83       	st	Y, r26
     d9a:	b9 83       	std	Y+1, r27	; 0x01
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     d9c:	11 82       	std	Z+1, r1	; 0x01
    note->velocity = 0;
     d9e:	12 82       	std	Z+2, r1	; 0x02
    note->status = 0;
     da0:	10 82       	st	Z, r1
    note->next_note_by_pitch = NULL;
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     da6:	15 82       	std	Z+5, r1	; 0x05
     da8:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     daa:	17 82       	std	Z+7, r1	; 0x07
     dac:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     dae:	11 86       	std	Z+9, r1	; 0x09
     db0:	12 86       	std	Z+10, r1	; 0x0a
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <remove_note_by_pitch+0xc8>
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
        return 0;
     db6:	80 e0       	ldi	r24, 0x00	; 0
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <insert_note>:
}

//insert new note in complete order
//return 0 if unsuccessful (no free note banks)
//return 1 if successful
bool insert_note(NoteList* note_list, uint8_t pitch, uint8_t velocity){
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     dc8:	dc 01       	movw	r26, r24
     dca:	af 54       	subi	r26, 0x4F	; 79
     dcc:	bf 4f       	sbci	r27, 0xFF	; 255
     dce:	0d 90       	ld	r0, X+
     dd0:	bc 91       	ld	r27, X
     dd2:	a0 2d       	mov	r26, r0
     dd4:	09 c0       	rjmp	.+18     	; 0xde8 <insert_note+0x2a>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	8c 91       	ld	r24, X
     dda:	11 97       	sbiw	r26, 0x01	; 1
     ddc:	86 17       	cp	r24, r22
     dde:	30 f4       	brcc	.+12     	; 0xdec <insert_note+0x2e>
            break;

        target_note = target_note->next_note_by_pitch;
     de0:	13 96       	adiw	r26, 0x03	; 3
     de2:	0d 90       	ld	r0, X+
     de4:	bc 91       	ld	r27, X
     de6:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     de8:	10 97       	sbiw	r26, 0x00	; 0
     dea:	a9 f7       	brne	.-22     	; 0xdd6 <insert_note+0x18>
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	8c 91       	ld	r24, X
     df0:	11 97       	sbiw	r26, 0x01	; 1
     df2:	86 17       	cp	r24, r22
     df4:	09 f0       	breq	.+2      	; 0xdf8 <insert_note+0x3a>
     df6:	55 c0       	rjmp	.+170    	; 0xea2 <insert_note+0xe4>
    return 1;
}

//Change the velocity of an existing note
static Note* update_note_velocity(Note* note, uint8_t velocity){
    note->velocity = velocity;
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	4c 93       	st	X, r20
     dfc:	12 97       	sbiw	r26, 0x02	; 2
//Place note at the end of the trigger order
//If the note is the only member of the note_list, assign it to the head    
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is already at the tail (also catches the case of a single-member list)
    if (note_list->tail_trigger == note)
     dfe:	ef 01       	movw	r28, r30
     e00:	c9 54       	subi	r28, 0x49	; 73
     e02:	df 4f       	sbci	r29, 0xFF	; 255
     e04:	88 81       	ld	r24, Y
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	8a 17       	cp	r24, r26
     e0a:	9b 07       	cpc	r25, r27
     e0c:	09 f4       	brne	.+2      	; 0xe10 <insert_note+0x52>
     e0e:	ed c0       	rjmp	.+474    	; 0xfea <insert_note+0x22c>
        return;
            
    //check for head
    if (note_list->head_trigger == note){
     e10:	cf 01       	movw	r24, r30
     e12:	8b 54       	subi	r24, 0x4B	; 75
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	ec 01       	movw	r28, r24
     e18:	28 81       	ld	r18, Y
     e1a:	39 81       	ldd	r19, Y+1	; 0x01
     e1c:	2a 17       	cp	r18, r26
     e1e:	3b 07       	cpc	r19, r27
     e20:	51 f4       	brne	.+20     	; 0xe36 <insert_note+0x78>
        //update head and remove note
        note_list->head_trigger = note->next_note_by_trigger;
     e22:	17 96       	adiw	r26, 0x07	; 7
     e24:	2d 91       	ld	r18, X+
     e26:	3c 91       	ld	r19, X
     e28:	18 97       	sbiw	r26, 0x08	; 8
     e2a:	28 83       	st	Y, r18
     e2c:	39 83       	std	Y+1, r19	; 0x01
        note_list->head_trigger->previous_note_by_trigger = NULL;
     e2e:	e9 01       	movw	r28, r18
     e30:	19 86       	std	Y+9, r1	; 0x09
     e32:	1a 86       	std	Y+10, r1	; 0x0a
     e34:	12 c0       	rjmp	.+36     	; 0xe5a <insert_note+0x9c>
    }
    else{
        //otherwise remove note normally
        note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     e36:	19 96       	adiw	r26, 0x09	; 9
     e38:	2d 91       	ld	r18, X+
     e3a:	3c 91       	ld	r19, X
     e3c:	1a 97       	sbiw	r26, 0x0a	; 10
     e3e:	17 96       	adiw	r26, 0x07	; 7
     e40:	8d 91       	ld	r24, X+
     e42:	9c 91       	ld	r25, X
     e44:	18 97       	sbiw	r26, 0x08	; 8
     e46:	e9 01       	movw	r28, r18
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	98 87       	std	Y+8, r25	; 0x08
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     e4c:	17 96       	adiw	r26, 0x07	; 7
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	18 97       	sbiw	r26, 0x08	; 8
     e54:	ec 01       	movw	r28, r24
     e56:	29 87       	std	Y+9, r18	; 0x09
     e58:	3a 87       	std	Y+10, r19	; 0x0a

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     e5a:	80 81       	ld	r24, Z
     e5c:	ef 01       	movw	r28, r30
     e5e:	c9 54       	subi	r28, 0x49	; 73
     e60:	df 4f       	sbci	r29, 0xFF	; 255
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	79 f4       	brne	.+30     	; 0xe84 <insert_note+0xc6>
        note_list->tail_trigger = note;
     e66:	a8 83       	st	Y, r26
     e68:	b9 83       	std	Y+1, r27	; 0x01
        note_list->head_trigger = note;
     e6a:	eb 54       	subi	r30, 0x4B	; 75
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	a0 83       	st	Z, r26
     e70:	b1 83       	std	Z+1, r27	; 0x01
        note->next_note_by_trigger = NULL;
     e72:	17 96       	adiw	r26, 0x07	; 7
     e74:	1d 92       	st	X+, r1
     e76:	1c 92       	st	X, r1
     e78:	18 97       	sbiw	r26, 0x08	; 8
        note->previous_note_by_trigger = NULL;
     e7a:	19 96       	adiw	r26, 0x09	; 9
     e7c:	1d 92       	st	X+, r1
     e7e:	1c 92       	st	X, r1
     e80:	1a 97       	sbiw	r26, 0x0a	; 10
     e82:	b6 c0       	rjmp	.+364    	; 0xff0 <insert_note+0x232>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     e84:	17 96       	adiw	r26, 0x07	; 7
     e86:	1d 92       	st	X+, r1
     e88:	1c 92       	st	X, r1
     e8a:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = note_list->tail_trigger;
     e8c:	e8 81       	ld	r30, Y
     e8e:	f9 81       	ldd	r31, Y+1	; 0x01
     e90:	19 96       	adiw	r26, 0x09	; 9
     e92:	ed 93       	st	X+, r30
     e94:	fc 93       	st	X, r31
     e96:	1a 97       	sbiw	r26, 0x0a	; 10
    note_list->tail_trigger->next_note_by_trigger = note;
     e98:	a7 83       	std	Z+7, r26	; 0x07
     e9a:	b0 87       	std	Z+8, r27	; 0x08
    note_list->tail_trigger = note;
     e9c:	a8 83       	st	Y, r26
     e9e:	b9 83       	std	Y+1, r27	; 0x01
     ea0:	a4 c0       	rjmp	.+328    	; 0xfea <insert_note+0x22c>
     ea2:	ef 01       	movw	r28, r30
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    note->previous_note_by_trigger = note_list->tail_trigger;
    note_list->tail_trigger->next_note_by_trigger = note;
    note_list->tail_trigger = note;
     ea8:	28 2f       	mov	r18, r24
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     eaa:	39 81       	ldd	r19, Y+1	; 0x01
     eac:	33 23       	and	r19, r19
     eae:	e1 f4       	brne	.+56     	; 0xee8 <insert_note+0x12a>
            note_list->note_bank[i].status = 1;
     eb0:	0b e0       	ldi	r16, 0x0B	; 11
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	80 9f       	mul	r24, r16
     eb6:	e0 01       	movw	r28, r0
     eb8:	81 9f       	mul	r24, r17
     eba:	d0 0d       	add	r29, r0
     ebc:	90 9f       	mul	r25, r16
     ebe:	d0 0d       	add	r29, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	ce 0f       	add	r28, r30
     ec4:	df 1f       	adc	r29, r31
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
            return &(note_list->note_bank[i]);
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	20 9f       	mul	r18, r16
     ece:	e0 01       	movw	r28, r0
     ed0:	21 9f       	mul	r18, r17
     ed2:	d0 0d       	add	r29, r0
     ed4:	30 9f       	mul	r19, r16
     ed6:	d0 0d       	add	r29, r0
     ed8:	11 24       	eor	r1, r1
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	8e 0f       	add	r24, r30
     ee0:	9f 1f       	adc	r25, r31
//return NULL otherwise
static Note* add_note_at_previous_pitch(NoteList* note_list, Note* target_note, uint8_t pitch, uint8_t velocity){
    Note* new_note = allocate_note(note_list);
    
    //return NULL if there are no more notes
    if (new_note == NULL)
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	39 f4       	brne	.+14     	; 0xef4 <insert_note+0x136>
     ee6:	83 c0       	rjmp	.+262    	; 0xfee <insert_note+0x230>
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	2b 96       	adiw	r28, 0x0b	; 11
//Iterate through the bank of notes to find an available note to use
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     eec:	80 31       	cpi	r24, 0x10	; 16
     eee:	91 05       	cpc	r25, r1
     ef0:	d9 f6       	brne	.-74     	; 0xea8 <insert_note+0xea>
     ef2:	7d c0       	rjmp	.+250    	; 0xfee <insert_note+0x230>
    
    //return NULL if there are no more notes
    if (new_note == NULL)
        return NULL;
    
    note_list->length += 1;
     ef4:	50 81       	ld	r21, Z
     ef6:	5f 5f       	subi	r21, 0xFF	; 255
     ef8:	50 83       	st	Z, r21
    
    //set data of new note
    new_note->pitch = pitch;
     efa:	ce 0f       	add	r28, r30
     efc:	df 1f       	adc	r29, r31
     efe:	6a 83       	std	Y+2, r22	; 0x02
    new_note->velocity = velocity;
     f00:	4b 83       	std	Y+3, r20	; 0x03
    
    //new_note is the only member of the list
    if (note_list->length == 1){
     f02:	51 30       	cpi	r21, 0x01	; 1
     f04:	69 f4       	brne	.+26     	; 0xf20 <insert_note+0x162>
        new_note->next_note_by_pitch = NULL;
     f06:	1c 82       	std	Y+4, r1	; 0x04
     f08:	1d 82       	std	Y+5, r1	; 0x05
        new_note->previous_note_by_pitch = NULL;
     f0a:	1e 82       	std	Y+6, r1	; 0x06
     f0c:	1f 82       	std	Y+7, r1	; 0x07
        note_list->head_pitch = new_note;
     f0e:	df 01       	movw	r26, r30
     f10:	af 54       	subi	r26, 0x4F	; 79
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	8d 93       	st	X+, r24
     f16:	9c 93       	st	X, r25
        note_list->tail_pitch = new_note;
     f18:	df 01       	movw	r26, r30
     f1a:	ad 54       	subi	r26, 0x4D	; 77
     f1c:	bf 4f       	sbci	r27, 0xFF	; 255
     f1e:	23 c0       	rjmp	.+70     	; 0xf66 <insert_note+0x1a8>
        return new_note;        
    }
    
    //if new_note isn't the only note, but target_note is NULL, new_note is at the tail pitch
    if (target_note == NULL){
     f20:	10 97       	sbiw	r26, 0x00	; 0
     f22:	71 f4       	brne	.+28     	; 0xf40 <insert_note+0x182>
        new_note->previous_note_by_pitch = note_list->tail_pitch;
     f24:	df 01       	movw	r26, r30
     f26:	ad 54       	subi	r26, 0x4D	; 77
     f28:	bf 4f       	sbci	r27, 0xFF	; 255
     f2a:	4d 91       	ld	r20, X+
     f2c:	5c 91       	ld	r21, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	4e 83       	std	Y+6, r20	; 0x06
     f32:	5f 83       	std	Y+7, r21	; 0x07
        new_note->next_note_by_pitch = NULL;
     f34:	1c 82       	std	Y+4, r1	; 0x04
     f36:	1d 82       	std	Y+5, r1	; 0x05
        note_list->tail_pitch->next_note_by_pitch = new_note;
     f38:	ea 01       	movw	r28, r20
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <insert_note+0x1a8>
        note_list->tail_pitch = new_note;
        return new_note;
    }
    
    //otherwise, adjust pointers
    new_note->next_note_by_pitch = target_note;
     f40:	ac 83       	std	Y+4, r26	; 0x04
     f42:	bd 83       	std	Y+5, r27	; 0x05
    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     f44:	15 96       	adiw	r26, 0x05	; 5
     f46:	4d 91       	ld	r20, X+
     f48:	5c 91       	ld	r21, X
     f4a:	16 97       	sbiw	r26, 0x06	; 6
     f4c:	4e 83       	std	Y+6, r20	; 0x06
     f4e:	5f 83       	std	Y+7, r21	; 0x07
    target_note->previous_note_by_pitch = new_note;
     f50:	15 96       	adiw	r26, 0x05	; 5
     f52:	8d 93       	st	X+, r24
     f54:	9c 93       	st	X, r25
     f56:	16 97       	sbiw	r26, 0x06	; 6

    //check for head
    if (new_note->previous_note_by_pitch == NULL)
     f58:	ae 81       	ldd	r26, Y+6	; 0x06
     f5a:	bf 81       	ldd	r27, Y+7	; 0x07
     f5c:	10 97       	sbiw	r26, 0x00	; 0
     f5e:	39 f4       	brne	.+14     	; 0xf6e <insert_note+0x1b0>
        note_list->head_pitch = new_note;
     f60:	df 01       	movw	r26, r30
     f62:	af 54       	subi	r26, 0x4F	; 79
     f64:	bf 4f       	sbci	r27, 0xFF	; 255
     f66:	8d 93       	st	X+, r24
     f68:	9c 93       	st	X, r25
     f6a:	11 97       	sbiw	r26, 0x01	; 1
     f6c:	46 c0       	rjmp	.+140    	; 0xffa <insert_note+0x23c>
    else
        new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	8d 93       	st	X+, r24
     f72:	9c 93       	st	X, r25
     f74:	14 97       	sbiw	r26, 0x04	; 4
     f76:	41 c0       	rjmp	.+130    	; 0xffa <insert_note+0x23c>
//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
        note_list->tail_trigger = note;
     f78:	df 01       	movw	r26, r30
     f7a:	a9 54       	subi	r26, 0x49	; 73
     f7c:	bf 4f       	sbci	r27, 0xFF	; 255
     f7e:	8d 93       	st	X+, r24
     f80:	9c 93       	st	X, r25
        note_list->head_trigger = note;
     f82:	df 01       	movw	r26, r30
     f84:	ab 54       	subi	r26, 0x4B	; 75
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	8d 93       	st	X+, r24
     f8a:	9c 93       	st	X, r25
        note->next_note_by_trigger = NULL;
     f8c:	8b e0       	ldi	r24, 0x0B	; 11
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	28 9f       	mul	r18, r24
     f92:	d0 01       	movw	r26, r0
     f94:	29 9f       	mul	r18, r25
     f96:	b0 0d       	add	r27, r0
     f98:	38 9f       	mul	r19, r24
     f9a:	b0 0d       	add	r27, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	ae 0f       	add	r26, r30
     fa0:	bf 1f       	adc	r27, r31
     fa2:	18 96       	adiw	r26, 0x08	; 8
     fa4:	1d 92       	st	X+, r1
     fa6:	1c 92       	st	X, r1
     fa8:	19 97       	sbiw	r26, 0x09	; 9
        note->previous_note_by_trigger = NULL;
     faa:	1a 96       	adiw	r26, 0x0a	; 10
     fac:	1d 92       	st	X+, r1
     fae:	1c 92       	st	X, r1
     fb0:	1b 97       	sbiw	r26, 0x0b	; 11
     fb2:	1b c0       	rjmp	.+54     	; 0xfea <insert_note+0x22c>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     fb4:	4b e0       	ldi	r20, 0x0B	; 11
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	24 9f       	mul	r18, r20
     fba:	d0 01       	movw	r26, r0
     fbc:	25 9f       	mul	r18, r21
     fbe:	b0 0d       	add	r27, r0
     fc0:	34 9f       	mul	r19, r20
     fc2:	b0 0d       	add	r27, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	ae 0f       	add	r26, r30
     fc8:	bf 1f       	adc	r27, r31
     fca:	18 96       	adiw	r26, 0x08	; 8
     fcc:	1d 92       	st	X+, r1
     fce:	1c 92       	st	X, r1
     fd0:	19 97       	sbiw	r26, 0x09	; 9
    note->previous_note_by_trigger = note_list->tail_trigger;
     fd2:	e9 54       	subi	r30, 0x49	; 73
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	c0 81       	ld	r28, Z
     fd8:	d1 81       	ldd	r29, Z+1	; 0x01
     fda:	1a 96       	adiw	r26, 0x0a	; 10
     fdc:	cd 93       	st	X+, r28
     fde:	dc 93       	st	X, r29
     fe0:	1b 97       	sbiw	r26, 0x0b	; 11
    note_list->tail_trigger->next_note_by_trigger = note;
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	98 87       	std	Y+8, r25	; 0x08
    note_list->tail_trigger = note;
     fe6:	80 83       	st	Z, r24
     fe8:	91 83       	std	Z+1, r25	; 0x01
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <insert_note+0x232>
    }
    else{
        //if the note is new, add it in the proper pitch position
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
     fee:	80 e0       	ldi	r24, 0x00	; 0
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     ffa:	40 81       	ld	r20, Z
     ffc:	41 30       	cpi	r20, 0x01	; 1
     ffe:	d1 f6       	brne	.-76     	; 0xfb4 <insert_note+0x1f6>
    1000:	bb cf       	rjmp	.-138    	; 0xf78 <insert_note+0x1ba>

00001002 <calculate_start_time_increment>:
	uint16_t final_velocity;
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	return (uint8_t) final_velocity;
}

static void calculate_start_time_increment(Sequencer* sequencer){
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <calculate_start_time_increment+0xa>
    100c:	00 d0       	rcall	.+0      	; 0x100e <calculate_start_time_increment+0xc>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
    1014:	80 91 28 08 	lds	r24, 0x0828
    1018:	90 91 29 08 	lds	r25, 0x0829
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	ab 83       	std	Y+3, r26	; 0x03
    1026:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
    1028:	f8 01       	movw	r30, r16
    102a:	87 85       	ldd	r24, Z+15	; 0x0f
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	89 f1       	breq	.+98     	; 0x1092 <calculate_start_time_increment+0x90>
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	30 f4       	brcc	.+12     	; 0x1040 <calculate_start_time_increment+0x3e>
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	69 f0       	breq	.+26     	; 0x1052 <calculate_start_time_increment+0x50>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	09 f0       	breq	.+2      	; 0x103e <calculate_start_time_increment+0x3c>
    103c:	6f c0       	rjmp	.+222    	; 0x111c <calculate_start_time_increment+0x11a>
    103e:	1c c0       	rjmp	.+56     	; 0x1078 <calculate_start_time_increment+0x76>
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	09 f4       	brne	.+2      	; 0x1046 <calculate_start_time_increment+0x44>
    1044:	4d c0       	rjmp	.+154    	; 0x10e0 <calculate_start_time_increment+0xde>
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	68 f1       	brcs	.+90     	; 0x10a4 <calculate_start_time_increment+0xa2>
    104a:	86 30       	cpi	r24, 0x06	; 6
    104c:	09 f0       	breq	.+2      	; 0x1050 <calculate_start_time_increment+0x4e>
    104e:	66 c0       	rjmp	.+204    	; 0x111c <calculate_start_time_increment+0x11a>
    1050:	56 c0       	rjmp	.+172    	; 0x10fe <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1: new_start_time_increment *= 3;
    1052:	29 81       	ldd	r18, Y+1	; 0x01
    1054:	3a 81       	ldd	r19, Y+2	; 0x02
    1056:	4b 81       	ldd	r20, Y+3	; 0x03
    1058:	5c 81       	ldd	r21, Y+4	; 0x04
    105a:	da 01       	movw	r26, r20
    105c:	c9 01       	movw	r24, r18
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	a4 1f       	adc	r26, r20
    106c:	b5 1f       	adc	r27, r21
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	ab 83       	std	Y+3, r26	; 0x03
    1074:	bc 83       	std	Y+4, r27	; 0x04
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	ab 81       	ldd	r26, Y+3	; 0x03
    107e:	bc 81       	ldd	r27, Y+4	; 0x04
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	aa 1f       	adc	r26, r26
    1086:	bb 1f       	adc	r27, r27
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	ab 83       	std	Y+3, r26	; 0x03
    108e:	bc 83       	std	Y+4, r27	; 0x04
    1090:	27 c0       	rjmp	.+78     	; 0x10e0 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	ab 81       	ldd	r26, Y+3	; 0x03
    1098:	bc 81       	ldd	r27, Y+4	; 0x04
    109a:	b6 95       	lsr	r27
    109c:	a7 95       	ror	r26
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	38 c0       	rjmp	.+112    	; 0x1114 <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	3a 81       	ldd	r19, Y+2	; 0x02
    10a8:	4b 81       	ldd	r20, Y+3	; 0x03
    10aa:	5c 81       	ldd	r21, Y+4	; 0x04
    10ac:	da 01       	movw	r26, r20
    10ae:	c9 01       	movw	r24, r18
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	a4 1f       	adc	r26, r20
    10be:	b5 1f       	adc	r27, r21
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	ab 83       	std	Y+3, r26	; 0x03
    10c6:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	ab 81       	ldd	r26, Y+3	; 0x03
    10ce:	bc 81       	ldd	r27, Y+4	; 0x04
    10d0:	33 e0       	ldi	r19, 0x03	; 3
    10d2:	b6 95       	lsr	r27
    10d4:	a7 95       	ror	r26
    10d6:	97 95       	ror	r25
    10d8:	87 95       	ror	r24
    10da:	3a 95       	dec	r19
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <calculate_start_time_increment+0xd0>
    10de:	1a c0       	rjmp	.+52     	; 0x1114 <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
    10e0:	69 81       	ldd	r22, Y+1	; 0x01
    10e2:	7a 81       	ldd	r23, Y+2	; 0x02
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	23 e0       	ldi	r18, 0x03	; 3
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
    10f4:	29 83       	std	Y+1, r18	; 0x01
    10f6:	3a 83       	std	Y+2, r19	; 0x02
    10f8:	4b 83       	std	Y+3, r20	; 0x03
    10fa:	5c 83       	std	Y+4, r21	; 0x04
                break;
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	ab 81       	ldd	r26, Y+3	; 0x03
    1104:	bc 81       	ldd	r27, Y+4	; 0x04
    1106:	22 e0       	ldi	r18, 0x02	; 2
    1108:	b6 95       	lsr	r27
    110a:	a7 95       	ror	r26
    110c:	97 95       	ror	r25
    110e:	87 95       	ror	r24
    1110:	2a 95       	dec	r18
    1112:	d1 f7       	brne	.-12     	; 0x1108 <calculate_start_time_increment+0x106>
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	ab 83       	std	Y+3, r26	; 0x03
    111a:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
    111c:	69 81       	ldd	r22, Y+1	; 0x01
    111e:	7a 81       	ldd	r23, Y+2	; 0x02
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	f8 01       	movw	r30, r16
    1126:	27 81       	ldd	r18, Z+7	; 0x07
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	44 27       	eor	r20, r20
    1130:	37 fd       	sbrc	r19, 7
    1132:	40 95       	com	r20
    1134:	54 2f       	mov	r21, r20
    1136:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
    113a:	29 83       	std	Y+1, r18	; 0x01
    113c:	3a 83       	std	Y+2, r19	; 0x02
    113e:	4b 83       	std	Y+3, r20	; 0x03
    1140:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	ab 81       	ldd	r26, Y+3	; 0x03
    1148:	bc 81       	ldd	r27, Y+4	; 0x04
    114a:	f8 01       	movw	r30, r16
    114c:	81 87       	std	Z+9, r24	; 0x09
    114e:	92 87       	std	Z+10, r25	; 0x0a
}
    1150:	24 96       	adiw	r28, 0x04	; 4
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <build_play_list>:
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    1160:	2f 92       	push	r2
    1162:	3f 92       	push	r3
    1164:	5f 92       	push	r5
    1166:	6f 92       	push	r6
    1168:	7f 92       	push	r7
    116a:	8f 92       	push	r8
    116c:	9f 92       	push	r9
    116e:	af 92       	push	r10
    1170:	bf 92       	push	r11
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	8c 01       	movw	r16, r24
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    
    return;
}
    1188:	2d b6       	in	r2, 0x3d	; 61
    118a:	3e b6       	in	r3, 0x3e	; 62
static void build_play_list(Sequencer* sequencer){
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    118c:	dc 01       	movw	r26, r24
    118e:	1d 96       	adiw	r26, 0x0d	; 13
    1190:	8c 91       	ld	r24, X
    1192:	1d 97       	sbiw	r26, 0x0d	; 13
    
    uint8_t play_list_index = 0;
    Note* current_note;
    
    uint8_t note_list_size = note_list->length;
    1194:	f8 01       	movw	r30, r16
    1196:	e0 59       	subi	r30, 0x90	; 144
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	90 80       	ld	r9, Z
	
    uint8_t random_order[note_list_size];
    119c:	69 2c       	mov	r6, r9
    119e:	77 24       	eor	r7, r7
    11a0:	ed b7       	in	r30, 0x3d	; 61
    11a2:	fe b7       	in	r31, 0x3e	; 62
    11a4:	e6 19       	sub	r30, r6
    11a6:	f7 09       	sbc	r31, r7
    11a8:	ed bf       	out	0x3d, r30	; 61
    11aa:	fe bf       	out	0x3e, r31	; 62
    11ac:	ed b6       	in	r14, 0x3d	; 61
    11ae:	fe b6       	in	r15, 0x3e	; 62
    11b0:	08 94       	sec
    11b2:	e1 1c       	adc	r14, r1
    11b4:	f1 1c       	adc	r15, r1
    uint8_t i;
    uint8_t mirror = 0;

//    pattern = 0;

    switch(pattern){
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	09 f4       	brne	.+2      	; 0x11bc <build_play_list+0x5c>
    11ba:	42 c0       	rjmp	.+132    	; 0x1240 <build_play_list+0xe0>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	30 f4       	brcc	.+12     	; 0x11cc <build_play_list+0x6c>
    11c0:	88 23       	and	r24, r24
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <build_play_list+0x80>
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <build_play_list+0x6a>
    11c8:	ac c0       	rjmp	.+344    	; 0x1322 <build_play_list+0x1c2>
    11ca:	22 c0       	rjmp	.+68     	; 0x1210 <build_play_list+0xb0>
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <build_play_list+0x72>
    11d0:	4f c0       	rjmp	.+158    	; 0x1270 <build_play_list+0x110>
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <build_play_list+0x78>
    11d6:	a5 c0       	rjmp	.+330    	; 0x1322 <build_play_list+0x1c2>
    11d8:	57 01       	movw	r10, r14
    11da:	f7 01       	movw	r30, r14
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	62 c0       	rjmp	.+196    	; 0x12a4 <build_play_list+0x144>
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    11e0:	f8 01       	movw	r30, r16
    11e2:	ef 5d       	subi	r30, 0xDF	; 223
    11e4:	fe 4f       	sbci	r31, 0xFE	; 254
    11e6:	a0 81       	ld	r26, Z
    11e8:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <build_play_list+0xaa>
                sequencer->play_list[play_list_index++] = current_note;
    11ee:	e8 2f       	mov	r30, r24
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	38 96       	adiw	r30, 0x08	; 8
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	e0 0f       	add	r30, r16
    11fa:	f1 1f       	adc	r31, r17
    11fc:	a0 83       	st	Z, r26
    11fe:	b1 83       	std	Z+1, r27	; 0x01
    1200:	8f 5f       	subi	r24, 0xFF	; 255
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    1202:	13 96       	adiw	r26, 0x03	; 3
    1204:	0d 90       	ld	r0, X+
    1206:	bc 91       	ld	r27, X
    1208:	a0 2d       	mov	r26, r0
    120a:	10 97       	sbiw	r26, 0x00	; 0
    120c:	81 f7       	brne	.-32     	; 0x11ee <build_play_list+0x8e>
    120e:	8a c0       	rjmp	.+276    	; 0x1324 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1210:	f8 01       	movw	r30, r16
    1212:	ed 5d       	subi	r30, 0xDD	; 221
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	a0 81       	ld	r26, Z
    1218:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    121a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    121c:	0e c0       	rjmp	.+28     	; 0x123a <build_play_list+0xda>
                sequencer->play_list[play_list_index++] = current_note;
    121e:	e8 2f       	mov	r30, r24
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	38 96       	adiw	r30, 0x08	; 8
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	e0 0f       	add	r30, r16
    122a:	f1 1f       	adc	r31, r17
    122c:	a0 83       	st	Z, r26
    122e:	b1 83       	std	Z+1, r27	; 0x01
    1230:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1232:	15 96       	adiw	r26, 0x05	; 5
    1234:	0d 90       	ld	r0, X+
    1236:	bc 91       	ld	r27, X
    1238:	a0 2d       	mov	r26, r0
    123a:	10 97       	sbiw	r26, 0x00	; 0
    123c:	81 f7       	brne	.-32     	; 0x121e <build_play_list+0xbe>
    123e:	72 c0       	rjmp	.+228    	; 0x1324 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1240:	f8 01       	movw	r30, r16
    1242:	eb 5d       	subi	r30, 0xDB	; 219
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	a0 81       	ld	r26, Z
    1248:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    124c:	0e c0       	rjmp	.+28     	; 0x126a <build_play_list+0x10a>
                sequencer->play_list[play_list_index++] = current_note;
    124e:	e8 2f       	mov	r30, r24
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	38 96       	adiw	r30, 0x08	; 8
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e0 0f       	add	r30, r16
    125a:	f1 1f       	adc	r31, r17
    125c:	a0 83       	st	Z, r26
    125e:	b1 83       	std	Z+1, r27	; 0x01
    1260:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1262:	17 96       	adiw	r26, 0x07	; 7
    1264:	0d 90       	ld	r0, X+
    1266:	bc 91       	ld	r27, X
    1268:	a0 2d       	mov	r26, r0
    126a:	10 97       	sbiw	r26, 0x00	; 0
    126c:	81 f7       	brne	.-32     	; 0x124e <build_play_list+0xee>
    126e:	5a c0       	rjmp	.+180    	; 0x1324 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1270:	f8 01       	movw	r30, r16
    1272:	e9 5d       	subi	r30, 0xD9	; 217
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	a0 81       	ld	r26, Z
    1278:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    127a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    127c:	0e c0       	rjmp	.+28     	; 0x129a <build_play_list+0x13a>
                sequencer->play_list[play_list_index++] = current_note;
    127e:	e8 2f       	mov	r30, r24
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	38 96       	adiw	r30, 0x08	; 8
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e0 0f       	add	r30, r16
    128a:	f1 1f       	adc	r31, r17
    128c:	a0 83       	st	Z, r26
    128e:	b1 83       	std	Z+1, r27	; 0x01
    1290:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1292:	19 96       	adiw	r26, 0x09	; 9
    1294:	0d 90       	ld	r0, X+
    1296:	bc 91       	ld	r27, X
    1298:	a0 2d       	mov	r26, r0
    129a:	10 97       	sbiw	r26, 0x00	; 0
    129c:	81 f7       	brne	.-32     	; 0x127e <build_play_list+0x11e>
    129e:	42 c0       	rjmp	.+132    	; 0x1324 <build_play_list+0x1c4>
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
    12a0:	81 93       	st	Z+, r24
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	89 15       	cp	r24, r9
    12a6:	e0 f3       	brcs	.-8      	; 0x12a0 <build_play_list+0x140>
    12a8:	67 01       	movw	r12, r14
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    12aa:	89 2c       	mov	r8, r9
    12ac:	55 24       	eor	r5, r5
    12ae:	10 c0       	rjmp	.+32     	; 0x12d0 <build_play_list+0x170>
    12b0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <rand>
				temp = random_order[i];
    12b4:	d6 01       	movw	r26, r12
    12b6:	2c 91       	ld	r18, X
        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    12b8:	68 2d       	mov	r22, r8
    12ba:	75 2d       	mov	r23, r5
    12bc:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
				temp = random_order[i];
				random_order[i] = random_order[j];
    12c0:	f7 01       	movw	r30, r14
    12c2:	e8 0f       	add	r30, r24
    12c4:	f1 1d       	adc	r31, r1
    12c6:	80 81       	ld	r24, Z
    12c8:	d6 01       	movw	r26, r12
    12ca:	8d 93       	st	X+, r24
    12cc:	6d 01       	movw	r12, r26
				random_order[j] = temp;
    12ce:	20 83       	st	Z, r18

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
    12d0:	8c 2d       	mov	r24, r12
    12d2:	8e 19       	sub	r24, r14
    12d4:	89 15       	cp	r24, r9
    12d6:	60 f3       	brcs	.-40     	; 0x12b0 <build_play_list+0x150>
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    12d8:	b8 01       	movw	r22, r16
    12da:	60 5f       	subi	r22, 0xF0	; 240
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	c3 01       	movw	r24, r6
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	40 96       	adiw	r24, 0x10	; 16
    12e6:	80 0f       	add	r24, r16
    12e8:	91 1f       	adc	r25, r17
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
    12ea:	98 01       	movw	r18, r16
    12ec:	2f 5d       	subi	r18, 0xDF	; 223
    12ee:	3e 4f       	sbci	r19, 0xFE	; 254
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <build_play_list+0x1b8>
    12f2:	f9 01       	movw	r30, r18
    12f4:	a0 81       	ld	r26, Z
    12f6:	b1 81       	ldd	r27, Z+1	; 0x01
				for (j = 0; j < random_order[i]; j++)
    12f8:	f5 01       	movw	r30, r10
    12fa:	51 91       	ld	r21, Z+
    12fc:	5f 01       	movw	r10, r30
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	05 c0       	rjmp	.+10     	; 0x130c <build_play_list+0x1ac>
				    current_note = current_note->next_note_by_pitch;
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	0d 90       	ld	r0, X+
    1306:	bc 91       	ld	r27, X
    1308:	a0 2d       	mov	r26, r0
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
				for (j = 0; j < random_order[i]; j++)
    130a:	4f 5f       	subi	r20, 0xFF	; 255
    130c:	45 17       	cp	r20, r21
    130e:	c8 f3       	brcs	.-14     	; 0x1302 <build_play_list+0x1a2>
				    current_note = current_note->next_note_by_pitch;
				sequencer->play_list[play_list_index++] = current_note;
    1310:	fb 01       	movw	r30, r22
    1312:	a1 93       	st	Z+, r26
    1314:	b1 93       	st	Z+, r27
    1316:	bf 01       	movw	r22, r30
				j = rand() % note_list_size;
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
    1318:	68 17       	cp	r22, r24
    131a:	79 07       	cpc	r23, r25
    131c:	51 f7       	brne	.-44     	; 0x12f2 <build_play_list+0x192>
    131e:	89 2d       	mov	r24, r9
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <build_play_list+0x1c4>
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    1322:	80 e0       	ldi	r24, 0x00	; 0
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index - 1;
    1324:	81 50       	subi	r24, 0x01	; 1
    1326:	d8 01       	movw	r26, r16
    1328:	16 96       	adiw	r26, 0x06	; 6
    132a:	8c 93       	st	X, r24
    132c:	16 97       	sbiw	r26, 0x06	; 6
    
    //check if the list is now shorter than the current note_index
//    while (sequencer->note_index > sequencer->note_max)
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	1c 92       	st	X, r1
    1332:	12 97       	sbiw	r26, 0x02	; 2
    
    return;
}
    1334:	2d be       	out	0x3d, r2	; 61
    1336:	3e be       	out	0x3e, r3	; 62
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	af 90       	pop	r10
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	7f 90       	pop	r7
    1352:	6f 90       	pop	r6
    1354:	5f 90       	pop	r5
    1356:	3f 90       	pop	r3
    1358:	2f 90       	pop	r2
    135a:	08 95       	ret

0000135c <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <initialize_sequencer+0xa>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <initialize_sequencer+0xc>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8c 01       	movw	r16, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    136e:	e0 e0       	ldi	r30, 0x00	; 0
    1370:	f8 e0       	ldi	r31, 0x08	; 8
    1372:	80 91 01 08 	lds	r24, 0x0801
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    137a:	80 91 01 08 	lds	r24, 0x0801
    137e:	8f 7b       	andi	r24, 0xBF	; 191
    1380:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    1382:	80 91 07 08 	lds	r24, 0x0807
    1386:	8f 7c       	andi	r24, 0xCF	; 207
    1388:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    138a:	80 91 07 08 	lds	r24, 0x0807
    138e:	80 62       	ori	r24, 0x20	; 32
    1390:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    1392:	80 91 07 08 	lds	r24, 0x0807
    1396:	83 7f       	andi	r24, 0xF3	; 243
    1398:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    139a:	80 91 07 08 	lds	r24, 0x0807
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    13a2:	c8 01       	movw	r24, r16
    13a4:	80 59       	subi	r24, 0x90	; 144
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	0e 94 50 06 	call	0xca0	; 0xca0 <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    13ac:	f8 01       	movw	r30, r16
    13ae:	70 96       	adiw	r30, 0x10	; 16
    13b0:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    13b2:	11 92       	st	Z+, r1
    13b4:	11 92       	st	Z+, r1
    13b6:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <initialize_sequencer+0x56>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    13ba:	f8 01       	movw	r30, r16
    13bc:	13 82       	std	Z+3, r1	; 0x03
    sequencer->octave_index = 0;
    13be:	15 82       	std	Z+5, r1	; 0x05
    sequencer->repeat_index = 0;
    13c0:	14 82       	std	Z+4, r1	; 0x04
    sequencer->note_max = 0;
    13c2:	16 82       	std	Z+6, r1	; 0x06
    sequencer->repeat_max = 0;
    13c4:	17 82       	std	Z+7, r1	; 0x07
    sequencer->octave_max = 0;
    13c6:	10 86       	std	Z+8, r1	; 0x08
    sequencer->start_time_increment = 0;
    13c8:	11 86       	std	Z+9, r1	; 0x09
    13ca:	12 86       	std	Z+10, r1	; 0x0a
    sequencer->stop_time_increment = 0;
    13cc:	13 86       	std	Z+11, r1	; 0x0b
    13ce:	14 86       	std	Z+12, r1	; 0x0c
    sequencer->pattern = 0;
    13d0:	15 86       	std	Z+13, r1	; 0x0d
    sequencer->duration = 0;
    13d2:	16 86       	std	Z+14, r1	; 0x0e
    sequencer->division = 0;
    13d4:	17 86       	std	Z+15, r1	; 0x0f
    sequencer->play_status = 0;
    13d6:	11 82       	std	Z+1, r1	; 0x01
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->rebuild_play_list = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	82 83       	std	Z+2, r24	; 0x02
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    13dc:	c8 01       	movw	r24, r16
    13de:	0e 94 01 08 	call	0x1002	; 0x1002 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    13e2:	f8 01       	movw	r30, r16
    13e4:	66 85       	ldd	r22, Z+14	; 0x0e
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	21 85       	ldd	r18, Z+9	; 0x09
    13ee:	32 85       	ldd	r19, Z+10	; 0x0a
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	0e 94 0f 18 	call	0x301e	; 0x301e <__mulsi3>
    13f8:	69 83       	std	Y+1, r22	; 0x01
    13fa:	7a 83       	std	Y+2, r23	; 0x02
    13fc:	8b 83       	std	Y+3, r24	; 0x03
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    1400:	69 81       	ldd	r22, Y+1	; 0x01
    1402:	7a 81       	ldd	r23, Y+2	; 0x02
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	2f ef       	ldi	r18, 0xFF	; 255
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
    1414:	29 83       	std	Y+1, r18	; 0x01
    1416:	3a 83       	std	Y+2, r19	; 0x02
    1418:	4b 83       	std	Y+3, r20	; 0x03
    141a:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	ab 81       	ldd	r26, Y+3	; 0x03
    1422:	bc 81       	ldd	r27, Y+4	; 0x04
    1424:	f8 01       	movw	r30, r16
    1426:	83 87       	std	Z+11, r24	; 0x0b
    1428:	94 87       	std	Z+12, r25	; 0x0c
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    142a:	24 96       	adiw	r28, 0x04	; 4
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <set_rebuild_play_list>:
    return;
}


void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    143a:	fc 01       	movw	r30, r24
    143c:	62 83       	std	Z+2, r22	; 0x02
}
    143e:	08 95       	ret

00001440 <continue_sequencer>:
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment || restart)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	65 97       	sbiw	r28, 0x15	; 21
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	8c 01       	movw	r16, r24
    1458:	f6 2e       	mov	r15, r22
    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f8 e0       	ldi	r31, 0x08	; 8
    145e:	80 91 01 08 	lds	r24, 0x0801
    1462:	8f 7d       	andi	r24, 0xDF	; 223
    1464:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    1466:	80 91 01 08 	lds	r24, 0x0801
    146a:	8f 7b       	andi	r24, 0xBF	; 191
    146c:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    146e:	80 91 0c 08 	lds	r24, 0x080C
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1476:	80 91 0c 08 	lds	r24, 0x080C
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    147e:	f8 01       	movw	r30, r16
    1480:	e0 59       	subi	r30, 0x90	; 144
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <continue_sequencer+0x4c>
    148a:	b2 c1       	rjmp	.+868    	; 0x17f0 <continue_sequencer+0x3b0>
        return;
    
    current_time = (uint32_t) TCC0.CNT;
    148c:	80 91 20 08 	lds	r24, 0x0820
    1490:	90 91 21 08 	lds	r25, 0x0821
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	8e 83       	std	Y+6, r24	; 0x06
    149a:	9f 83       	std	Y+7, r25	; 0x07
    149c:	a8 87       	std	Y+8, r26	; 0x08
    149e:	b9 87       	std	Y+9, r27	; 0x09
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    14a0:	d8 01       	movw	r26, r16
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	8c 91       	ld	r24, X
    14a6:	11 97       	sbiw	r26, 0x01	; 1
    14a8:	88 23       	and	r24, r24
    14aa:	61 f1       	breq	.+88     	; 0x1504 <continue_sequencer+0xc4>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    14ac:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    14b0:	d8 01       	movw	r26, r16
    14b2:	13 96       	adiw	r26, 0x03	; 3
    14b4:	ec 91       	ld	r30, X
    14b6:	13 97       	sbiw	r26, 0x03	; 3
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	38 96       	adiw	r30, 0x08	; 8
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	e0 0f       	add	r30, r16
    14c2:	f1 1f       	adc	r31, r17
    14c4:	01 90       	ld	r0, Z+
    14c6:	f0 81       	ld	r31, Z
    14c8:	e0 2d       	mov	r30, r0
    14ca:	15 96       	adiw	r26, 0x05	; 5
    14cc:	4c 91       	ld	r20, X
    14ce:	15 97       	sbiw	r26, 0x05	; 5
    14d0:	2c e0       	ldi	r18, 0x0C	; 12
    14d2:	42 9f       	mul	r20, r18
    14d4:	a0 01       	movw	r20, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	21 81       	ldd	r18, Z+1	; 0x01
    14da:	42 0f       	add	r20, r18
    14dc:	51 1d       	adc	r21, r1
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <continue_sequencer+0xa4>
	while (final_pitch > 255)
	        final_pitch -= 12;
    14e0:	4c 50       	subi	r20, 0x0C	; 12
    14e2:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    14e4:	4f 3f       	cpi	r20, 0xFF	; 255
    14e6:	51 05       	cpc	r21, r1
    14e8:	09 f0       	breq	.+2      	; 0x14ec <continue_sequencer+0xac>
    14ea:	d0 f7       	brcc	.-12     	; 0x14e0 <continue_sequencer+0xa0>
    
    current_time = (uint32_t) TCC0.CNT;
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	22 81       	ldd	r18, Z+2	; 0x02
    14f0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <set_LEDs_off>
        sequencer->play_status = 0;
    1500:	f8 01       	movw	r30, r16
    1502:	11 82       	std	Z+1, r1	; 0x01
}


static void set_sequencer_parameters(Sequencer* sequencer, bool restart){
    //read the new values from the pots
    volatile uint8_t octave_max_new = get_pot_value(POT_SEL_OCTAVE, POT_MIN_OCTAVE, POT_MAX_OCTAVE);
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	43 e0       	ldi	r20, 0x03	; 3
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_pot_value>
    1512:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t repeat_max_new = get_pot_value(POT_SEL_REPEAT, POT_MIN_REPEAT, POT_MAX_REPEAT);
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	47 e0       	ldi	r20, 0x07	; 7
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_pot_value>
    1522:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint8_t division_new = get_pot_value(POT_SEL_DIVISION, POT_MIN_DIVISION, POT_MAX_DIVISION);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	46 e0       	ldi	r20, 0x06	; 6
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_pot_value>
    1532:	8b 83       	std	Y+3, r24	; 0x03
    volatile uint8_t duration_new = get_pot_value(POT_SEL_DURATION, POT_MIN_DURATION, POT_MAX_DURATION);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	6b e0       	ldi	r22, 0x0B	; 11
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	4f ef       	ldi	r20, 0xFF	; 255
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_pot_value>
    1542:	8c 83       	std	Y+4, r24	; 0x04
    volatile uint8_t pattern_new = get_pot_value(POT_SEL_PATTERN, POT_MIN_PATTERN, POT_MAX_PATTERN);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	44 e0       	ldi	r20, 0x04	; 4
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_pot_value>
    1552:	8d 83       	std	Y+5, r24	; 0x05
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    1554:	d8 01       	movw	r26, r16
    1556:	17 96       	adiw	r26, 0x07	; 7
    1558:	2c 91       	ld	r18, X
    155a:	17 97       	sbiw	r26, 0x07	; 7
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	1f 96       	adiw	r26, 0x0f	; 15
    1562:	3c 91       	ld	r19, X
    1564:	1f 97       	sbiw	r26, 0x0f	; 15
    1566:	38 17       	cp	r19, r24
    1568:	29 f4       	brne	.+10     	; 0x1574 <continue_sequencer+0x134>
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment || restart)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	29 17       	cp	r18, r25
    156e:	19 f4       	brne	.+6      	; 0x1576 <continue_sequencer+0x136>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <continue_sequencer+0x136>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	f8 01       	movw	r30, r16
    157a:	26 85       	ldd	r18, Z+14	; 0x0e
    157c:	29 17       	cp	r18, r25
    157e:	11 f4       	brne	.+4      	; 0x1584 <continue_sequencer+0x144>
    1580:	e8 2e       	mov	r14, r24
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <continue_sequencer+0x148>
        update_stop_time_increment = 1;
    1584:	ee 24       	eor	r14, r14
    1586:	e3 94       	inc	r14
    }
    
    if (sequencer->pattern != pattern_new){
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	d8 01       	movw	r26, r16
    158c:	1d 96       	adiw	r26, 0x0d	; 13
    158e:	2c 91       	ld	r18, X
    1590:	1d 97       	sbiw	r26, 0x0d	; 13
    1592:	29 17       	cp	r18, r25
    1594:	21 f0       	breq	.+8      	; 0x159e <continue_sequencer+0x15e>
        sequencer->rebuild_play_list = 1;
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	9c 93       	st	X, r25
    159c:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	f8 01       	movw	r30, r16
    15a2:	90 87       	std	Z+8, r25	; 0x08
    sequencer->repeat_max = repeat_max_new;
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	97 83       	std	Z+7, r25	; 0x07
    sequencer->division = division_new;
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	97 87       	std	Z+15, r25	; 0x0f
    sequencer->duration = duration_new;
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	96 87       	std	Z+14, r25	; 0x0e
    sequencer->pattern = pattern_new;
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	95 87       	std	Z+13, r25	; 0x0d
    
    if (update_start_time_increment || restart)
    15b4:	88 23       	and	r24, r24
    15b6:	11 f4       	brne	.+4      	; 0x15bc <continue_sequencer+0x17c>
    15b8:	ff 20       	and	r15, r15
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <continue_sequencer+0x182>
        calculate_start_time_increment(sequencer);
    15bc:	c8 01       	movw	r24, r16
    15be:	0e 94 01 08 	call	0x1002	; 0x1002 <calculate_start_time_increment>
    if (update_stop_time_increment || restart)
    15c2:	ee 20       	and	r14, r14
    15c4:	11 f4       	brne	.+4      	; 0x15ca <continue_sequencer+0x18a>
    15c6:	ff 20       	and	r15, r15
    15c8:	41 f1       	breq	.+80     	; 0x161a <continue_sequencer+0x1da>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    15ca:	d8 01       	movw	r26, r16
    15cc:	1e 96       	adiw	r26, 0x0e	; 14
    15ce:	6c 91       	ld	r22, X
    15d0:	1e 97       	sbiw	r26, 0x0e	; 14
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	19 96       	adiw	r26, 0x09	; 9
    15da:	2d 91       	ld	r18, X+
    15dc:	3c 91       	ld	r19, X
    15de:	1a 97       	sbiw	r26, 0x0a	; 10
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 0f 18 	call	0x301e	; 0x301e <__mulsi3>
    15e8:	6a 8b       	std	Y+18, r22	; 0x12
    15ea:	7b 8b       	std	Y+19, r23	; 0x13
    15ec:	8c 8b       	std	Y+20, r24	; 0x14
    15ee:	9d 8b       	std	Y+21, r25	; 0x15
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    15f0:	6a 89       	ldd	r22, Y+18	; 0x12
    15f2:	7b 89       	ldd	r23, Y+19	; 0x13
    15f4:	8c 89       	ldd	r24, Y+20	; 0x14
    15f6:	9d 89       	ldd	r25, Y+21	; 0x15
    15f8:	2f ef       	ldi	r18, 0xFF	; 255
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodsi4>
    1604:	2a 8b       	std	Y+18, r18	; 0x12
    1606:	3b 8b       	std	Y+19, r19	; 0x13
    1608:	4c 8b       	std	Y+20, r20	; 0x14
    160a:	5d 8b       	std	Y+21, r21	; 0x15
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    160c:	8a 89       	ldd	r24, Y+18	; 0x12
    160e:	9b 89       	ldd	r25, Y+19	; 0x13
    1610:	ac 89       	ldd	r26, Y+20	; 0x14
    1612:	bd 89       	ldd	r27, Y+21	; 0x15
    1614:	f8 01       	movw	r30, r16
    1616:	83 87       	std	Z+11, r24	; 0x0b
    1618:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer, restart);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    161a:	2e 81       	ldd	r18, Y+6	; 0x06
    161c:	3f 81       	ldd	r19, Y+7	; 0x07
    161e:	48 85       	ldd	r20, Y+8	; 0x08
    1620:	59 85       	ldd	r21, Y+9	; 0x09
    1622:	d8 01       	movw	r26, r16
    1624:	19 96       	adiw	r26, 0x09	; 9
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	1a 97       	sbiw	r26, 0x0a	; 10
    162c:	a0 e0       	ldi	r26, 0x00	; 0
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	a4 1f       	adc	r26, r20
    1636:	b5 1f       	adc	r27, r21
    1638:	8a 87       	std	Y+10, r24	; 0x0a
    163a:	9b 87       	std	Y+11, r25	; 0x0b
    163c:	ac 87       	std	Y+12, r26	; 0x0c
    163e:	bd 87       	std	Y+13, r27	; 0x0d
    next_stop_time = current_time + sequencer->stop_time_increment;
    1640:	2e 81       	ldd	r18, Y+6	; 0x06
    1642:	3f 81       	ldd	r19, Y+7	; 0x07
    1644:	48 85       	ldd	r20, Y+8	; 0x08
    1646:	59 85       	ldd	r21, Y+9	; 0x09
    1648:	f8 01       	movw	r30, r16
    164a:	83 85       	ldd	r24, Z+11	; 0x0b
    164c:	94 85       	ldd	r25, Z+12	; 0x0c
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	a4 1f       	adc	r26, r20
    1658:	b5 1f       	adc	r27, r21
    165a:	8e 87       	std	Y+14, r24	; 0x0e
    165c:	9f 87       	std	Y+15, r25	; 0x0f
    165e:	a8 8b       	std	Y+16, r26	; 0x10
    1660:	b9 8b       	std	Y+17, r27	; 0x11
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    1662:	2a 85       	ldd	r18, Y+10	; 0x0a
    1664:	3b 85       	ldd	r19, Y+11	; 0x0b
    1666:	4c 85       	ldd	r20, Y+12	; 0x0c
    1668:	5d 85       	ldd	r21, Y+13	; 0x0d
    166a:	80 91 28 08 	lds	r24, 0x0828
    166e:	90 91 29 08 	lds	r25, 0x0829
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	82 17       	cp	r24, r18
    1678:	93 07       	cpc	r25, r19
    167a:	a4 07       	cpc	r26, r20
    167c:	b5 07       	cpc	r27, r21
    167e:	90 f4       	brcc	.+36     	; 0x16a4 <continue_sequencer+0x264>
        next_start_time = next_start_time - TCC0.CCA;
    1680:	8a 85       	ldd	r24, Y+10	; 0x0a
    1682:	9b 85       	ldd	r25, Y+11	; 0x0b
    1684:	ac 85       	ldd	r26, Y+12	; 0x0c
    1686:	bd 85       	ldd	r27, Y+13	; 0x0d
    1688:	20 91 28 08 	lds	r18, 0x0828
    168c:	30 91 29 08 	lds	r19, 0x0829
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	82 1b       	sub	r24, r18
    1696:	93 0b       	sbc	r25, r19
    1698:	a4 0b       	sbc	r26, r20
    169a:	b5 0b       	sbc	r27, r21
    169c:	8a 87       	std	Y+10, r24	; 0x0a
    169e:	9b 87       	std	Y+11, r25	; 0x0b
    16a0:	ac 87       	std	Y+12, r26	; 0x0c
    16a2:	bd 87       	std	Y+13, r27	; 0x0d
    if (next_stop_time > TCC0.CCA)
    16a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    16a6:	3f 85       	ldd	r19, Y+15	; 0x0f
    16a8:	48 89       	ldd	r20, Y+16	; 0x10
    16aa:	59 89       	ldd	r21, Y+17	; 0x11
    16ac:	80 91 28 08 	lds	r24, 0x0828
    16b0:	90 91 29 08 	lds	r25, 0x0829
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	82 17       	cp	r24, r18
    16ba:	93 07       	cpc	r25, r19
    16bc:	a4 07       	cpc	r26, r20
    16be:	b5 07       	cpc	r27, r21
    16c0:	90 f4       	brcc	.+36     	; 0x16e6 <continue_sequencer+0x2a6>
        next_stop_time = next_stop_time - TCC0.CCA;
    16c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c6:	a8 89       	ldd	r26, Y+16	; 0x10
    16c8:	b9 89       	ldd	r27, Y+17	; 0x11
    16ca:	20 91 28 08 	lds	r18, 0x0828
    16ce:	30 91 29 08 	lds	r19, 0x0829
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	82 1b       	sub	r24, r18
    16d8:	93 0b       	sbc	r25, r19
    16da:	a4 0b       	sbc	r26, r20
    16dc:	b5 0b       	sbc	r27, r21
    16de:	8e 87       	std	Y+14, r24	; 0x0e
    16e0:	9f 87       	std	Y+15, r25	; 0x0f
    16e2:	a8 8b       	std	Y+16, r26	; 0x10
    16e4:	b9 8b       	std	Y+17, r27	; 0x11
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    16e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ea:	ac 85       	ldd	r26, Y+12	; 0x0c
    16ec:	bd 85       	ldd	r27, Y+13	; 0x0d
    16ee:	e0 e0       	ldi	r30, 0x00	; 0
    16f0:	f8 e0       	ldi	r31, 0x08	; 8
    16f2:	82 a7       	std	Z+42, r24	; 0x2a
    16f4:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    16f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fa:	a8 89       	ldd	r26, Y+16	; 0x10
    16fc:	b9 89       	ldd	r27, Y+17	; 0x11
    16fe:	84 a7       	std	Z+44, r24	; 0x2c
    1700:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    1702:	d8 01       	movw	r26, r16
    1704:	12 96       	adiw	r26, 0x02	; 2
    1706:	8c 91       	ld	r24, X
    1708:	12 97       	sbiw	r26, 0x02	; 2
    170a:	88 23       	and	r24, r24
    170c:	19 f0       	breq	.+6      	; 0x1714 <continue_sequencer+0x2d4>
        build_play_list(sequencer);
    170e:	c8 01       	movw	r24, r16
    1710:	0e 94 b0 08 	call	0x1160	; 0x1160 <build_play_list>
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    1714:	ff 20       	and	r15, r15
    1716:	59 f5       	brne	.+86     	; 0x176e <continue_sequencer+0x32e>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    1718:	f8 01       	movw	r30, r16
    171a:	84 81       	ldd	r24, Z+4	; 0x04
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	84 83       	std	Z+4, r24	; 0x04
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    1720:	97 81       	ldd	r25, Z+7	; 0x07
    1722:	98 17       	cp	r25, r24
    1724:	20 f4       	brcc	.+8      	; 0x172e <continue_sequencer+0x2ee>
        sequencer->repeat_index = 0;
    1726:	14 82       	std	Z+4, r1	; 0x04
        sequencer->note_index += 1;
    1728:	83 81       	ldd	r24, Z+3	; 0x03
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	83 83       	std	Z+3, r24	; 0x03
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    172e:	d8 01       	movw	r26, r16
    1730:	13 96       	adiw	r26, 0x03	; 3
    1732:	9c 91       	ld	r25, X
    1734:	13 97       	sbiw	r26, 0x03	; 3
    1736:	16 96       	adiw	r26, 0x06	; 6
    1738:	8c 91       	ld	r24, X
    173a:	16 97       	sbiw	r26, 0x06	; 6
    173c:	89 17       	cp	r24, r25
    173e:	50 f4       	brcc	.+20     	; 0x1754 <continue_sequencer+0x314>
        sequencer->note_index = 0;
    1740:	13 96       	adiw	r26, 0x03	; 3
    1742:	1c 92       	st	X, r1
    1744:	13 97       	sbiw	r26, 0x03	; 3
        sequencer->octave_index += 1;		
    1746:	15 96       	adiw	r26, 0x05	; 5
    1748:	8c 91       	ld	r24, X
    174a:	15 97       	sbiw	r26, 0x05	; 5
    174c:	8f 5f       	subi	r24, 0xFF	; 255
    174e:	15 96       	adiw	r26, 0x05	; 5
    1750:	8c 93       	st	X, r24
    1752:	15 97       	sbiw	r26, 0x05	; 5
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    1754:	f8 01       	movw	r30, r16
    1756:	95 81       	ldd	r25, Z+5	; 0x05
    1758:	80 85       	ldd	r24, Z+8	; 0x08
    175a:	89 17       	cp	r24, r25
    175c:	88 f4       	brcc	.+34     	; 0x1780 <continue_sequencer+0x340>
        sequencer->octave_index = 0;
    175e:	15 82       	std	Z+5, r1	; 0x05
		
		//build a new random playlist if necessary
		if (sequencer->pattern == 4)
    1760:	85 85       	ldd	r24, Z+13	; 0x0d
    1762:	84 30       	cpi	r24, 0x04	; 4
    1764:	69 f4       	brne	.+26     	; 0x1780 <continue_sequencer+0x340>
		    build_play_list(sequencer);
    1766:	c8 01       	movw	r24, r16
    1768:	0e 94 b0 08 	call	0x1160	; 0x1160 <build_play_list>
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <continue_sequencer+0x340>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    176e:	d8 01       	movw	r26, r16
    1770:	15 96       	adiw	r26, 0x05	; 5
    1772:	1c 92       	st	X, r1
    1774:	15 97       	sbiw	r26, 0x05	; 5
    sequencer->note_index = 0;
    1776:	13 96       	adiw	r26, 0x03	; 3
    1778:	1c 92       	st	X, r1
    177a:	13 97       	sbiw	r26, 0x03	; 3
    sequencer->repeat_index = 0;
    177c:	14 96       	adiw	r26, 0x04	; 4
    177e:	1c 92       	st	X, r1
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    1780:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1784:	d8 01       	movw	r26, r16
    1786:	13 96       	adiw	r26, 0x03	; 3
    1788:	ec 91       	ld	r30, X
    178a:	13 97       	sbiw	r26, 0x03	; 3
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	38 96       	adiw	r30, 0x08	; 8
    1790:	ee 0f       	add	r30, r30
    1792:	ff 1f       	adc	r31, r31
    1794:	e0 0f       	add	r30, r16
    1796:	f1 1f       	adc	r31, r17
    1798:	01 90       	ld	r0, Z+
    179a:	f0 81       	ld	r31, Z
    179c:	e0 2d       	mov	r30, r0
    179e:	15 96       	adiw	r26, 0x05	; 5
    17a0:	4c 91       	ld	r20, X
    17a2:	15 97       	sbiw	r26, 0x05	; 5
    17a4:	2c e0       	ldi	r18, 0x0C	; 12
    17a6:	42 9f       	mul	r20, r18
    17a8:	a0 01       	movw	r20, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	21 81       	ldd	r18, Z+1	; 0x01
    17ae:	42 0f       	add	r20, r18
    17b0:	51 1d       	adc	r21, r1
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <continue_sequencer+0x378>
	while (final_pitch > 255)
	        final_pitch -= 12;
    17b4:	4c 50       	subi	r20, 0x0C	; 12
    17b6:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    17b8:	4f 3f       	cpi	r20, 0xFF	; 255
    17ba:	51 05       	cpc	r21, r1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <continue_sequencer+0x380>
    17be:	d0 f7       	brcc	.-12     	; 0x17b4 <continue_sequencer+0x374>
    else{
        reset_play_list_indeces(sequencer);
    }
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	22 81       	ldd	r18, Z+2	; 0x02
    17c4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <midi_send_noteon>
    set_LEDs_on(0,0,0,1);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	f8 01       	movw	r30, r16
    17d8:	81 83       	std	Z+1, r24	; 0x01
    
    //set run flag
    sequencer->run_status = 1;
    17da:	80 83       	st	Z, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    17dc:	e0 e0       	ldi	r30, 0x00	; 0
    17de:	f8 e0       	ldi	r31, 0x08	; 8
    17e0:	80 91 01 08 	lds	r24, 0x0801
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    17e8:	80 91 01 08 	lds	r24, 0x0801
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	81 83       	std	Z+1, r24	; 0x01
}
    17f0:	65 96       	adiw	r28, 0x15	; 21
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	08 95       	ret

00001804 <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	ec 01       	movw	r28, r24
    180c:	16 2f       	mov	r17, r22
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    180e:	e0 e0       	ldi	r30, 0x00	; 0
    1810:	f8 e0       	ldi	r31, 0x08	; 8
    1812:	80 91 01 08 	lds	r24, 0x0801
    1816:	8f 7d       	andi	r24, 0xDF	; 223
    1818:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    181a:	80 91 01 08 	lds	r24, 0x0801
    181e:	8f 7b       	andi	r24, 0xBF	; 191
    1820:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    1822:	80 91 0c 08 	lds	r24, 0x080C
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	88 23       	and	r24, r24
    182e:	31 f1       	breq	.+76     	; 0x187c <stop_sequencer+0x78>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    1830:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <get_midi_device>
#include "serial_midi.h"
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1834:	eb 81       	ldd	r30, Y+3	; 0x03
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	38 96       	adiw	r30, 0x08	; 8
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	ec 0f       	add	r30, r28
    1840:	fd 1f       	adc	r31, r29
    1842:	01 90       	ld	r0, Z+
    1844:	f0 81       	ld	r31, Z
    1846:	e0 2d       	mov	r30, r0
    1848:	4d 81       	ldd	r20, Y+5	; 0x05
    184a:	2c e0       	ldi	r18, 0x0C	; 12
    184c:	42 9f       	mul	r20, r18
    184e:	a0 01       	movw	r20, r0
    1850:	11 24       	eor	r1, r1
    1852:	21 81       	ldd	r18, Z+1	; 0x01
    1854:	42 0f       	add	r20, r18
    1856:	51 1d       	adc	r21, r1
    1858:	02 c0       	rjmp	.+4      	; 0x185e <stop_sequencer+0x5a>
	while (final_pitch > 255)
	        final_pitch -= 12;
    185a:	4c 50       	subi	r20, 0x0C	; 12
    185c:	50 40       	sbci	r21, 0x00	; 0
#include "hardware.h"

static uint8_t final_pitch(Sequencer* sequencer){
	uint16_t final_pitch;
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	while (final_pitch > 255)
    185e:	4f 3f       	cpi	r20, 0xFF	; 255
    1860:	51 05       	cpc	r21, r1
    1862:	09 f0       	breq	.+2      	; 0x1866 <stop_sequencer+0x62>
    1864:	d0 f7       	brcc	.-12     	; 0x185a <stop_sequencer+0x56>
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    
    //stop the current note if it's playing
    if (sequencer->play_status){
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch(sequencer),final_velocity(sequencer));
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	22 81       	ldd	r18, Z+2	; 0x02
    186a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <set_LEDs_off>
        sequencer->play_status = 0;
    187a:	19 82       	std	Y+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, reenable the note on interrupt
    if (full_stop)
    187c:	11 23       	and	r17, r17
    187e:	11 f0       	breq	.+4      	; 0x1884 <stop_sequencer+0x80>
        sequencer->run_status = 0;
    1880:	18 82       	st	Y, r1
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <stop_sequencer+0x8c>
    else    
        TCC0.CTRLB |= 0x20;
    1884:	80 91 01 08 	lds	r24, 0x0801
    1888:	80 62       	ori	r24, 0x20	; 32
    188a:	e0 e0       	ldi	r30, 0x00	; 0
    188c:	f8 e0       	ldi	r31, 0x08	; 8
    188e:	81 83       	std	Z+1, r24	; 0x01
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	08 95       	ret

00001898 <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    18a2:	8c 01       	movw	r16, r24
    18a4:	00 59       	subi	r16, 0x90	; 144
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	c8 01       	movw	r24, r16
    18aa:	0e 94 df 06 	call	0xdbe	; 0xdbe <insert_note>
    18ae:	88 23       	and	r24, r24
    18b0:	51 f0       	breq	.+20     	; 0x18c6 <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	8a 83       	std	Y+2, r24	; 0x02
        
		if (sequencer->note_list.length == 1)
    18b6:	f8 01       	movw	r30, r16
    18b8:	80 81       	ld	r24, Z
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    18be:	ce 01       	movw	r24, r28
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 20 0a 	call	0x1440	; 0x1440 <continue_sequencer>
    }
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
    18dc:	f6 2e       	mov	r15, r22
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
	
	//if note is playing, stop it
	if (sequencer->play_list[sequencer->note_index]->pitch == pitch)
    18de:	eb 81       	ldd	r30, Y+3	; 0x03
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	38 96       	adiw	r30, 0x08	; 8
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	e8 0f       	add	r30, r24
    18ea:	f9 1f       	adc	r31, r25
    18ec:	01 90       	ld	r0, Z+
    18ee:	f0 81       	ld	r31, Z
    18f0:	e0 2d       	mov	r30, r0
    18f2:	81 81       	ldd	r24, Z+1	; 0x01
    18f4:	86 17       	cp	r24, r22
    18f6:	21 f4       	brne	.+8      	; 0x1900 <remove_note_from_arpeggiator+0x30>
	    stop_sequencer(sequencer,0);
    18f8:	ce 01       	movw	r24, r28
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_sequencer>
		
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    1900:	8e 01       	movw	r16, r28
    1902:	00 59       	subi	r16, 0x90	; 144
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	c8 01       	movw	r24, r16
    1908:	6f 2d       	mov	r22, r15
    190a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <remove_note_by_pitch>
    190e:	88 23       	and	r24, r24
    1910:	51 f0       	breq	.+20     	; 0x1926 <remove_note_from_arpeggiator+0x56>
        sequencer->rebuild_play_list = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	8a 83       	std	Y+2, r24	; 0x02
        
        if (sequencer->note_list.length == 0)
    1916:	f8 01       	movw	r30, r16
    1918:	80 81       	ld	r24, Z
    191a:	88 23       	and	r24, r24
    191c:	21 f4       	brne	.+8      	; 0x1926 <remove_note_from_arpeggiator+0x56>
            stop_sequencer(sequencer, 1);
    191e:	ce 01       	movw	r24, r28
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_sequencer>
    }	
	
}
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	08 95       	ret

00001932 <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    1932:	fc 01       	movw	r30, r24
    1934:	20 81       	ld	r18, Z
    1936:	22 23       	and	r18, r18
    1938:	19 f0       	breq	.+6      	; 0x1940 <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	0e 94 20 0a 	call	0x1440	; 0x1440 <continue_sequencer>
    1940:	08 95       	ret

00001942 <serial_midi_send>:

MidiDevice* get_midi_device() {
   return stored_midi_device;
}

void serial_midi_send(MidiDevice* midi_device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1942:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1944:	80 91 b1 09 	lds	r24, 0x09B1
    1948:	85 ff       	sbrs	r24, 5
    194a:	fc cf       	rjmp	.-8      	; 0x1944 <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    194c:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    1950:	62 30       	cpi	r22, 0x02	; 2
    1952:	70 f0       	brcs	.+28     	; 0x1970 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1954:	80 91 b1 09 	lds	r24, 0x09B1
    1958:	85 ff       	sbrs	r24, 5
    195a:	fc cf       	rjmp	.-8      	; 0x1954 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    195c:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    1960:	63 30       	cpi	r22, 0x03	; 3
    1962:	31 f4       	brne	.+12     	; 0x1970 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1964:	80 91 b1 09 	lds	r24, 0x09B1
    1968:	85 ff       	sbrs	r24, 5
    196a:	fc cf       	rjmp	.-8      	; 0x1964 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    196c:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <noteoff_to_arpeggiator>:
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
}

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
    1974:	80 91 6c 23 	lds	r24, 0x236C
    1978:	90 91 6d 23 	lds	r25, 0x236D
    197c:	64 2f       	mov	r22, r20
    197e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <remove_note_from_arpeggiator>
}
    1982:	08 95       	ret

00001984 <noteon_to_arpeggiator>:
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1984:	64 2f       	mov	r22, r20
    1986:	80 91 6c 23 	lds	r24, 0x236C
    198a:	90 91 6d 23 	lds	r25, 0x236D
	if (inByte2 == 0)
    198e:	22 23       	and	r18, r18
    1990:	19 f4       	brne	.+6      	; 0x1998 <noteon_to_arpeggiator+0x14>
	    remove_note_from_arpeggiator(stored_sequencer, inByte1);
    1992:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <remove_note_from_arpeggiator>
    1996:	08 95       	ret
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
    1998:	42 2f       	mov	r20, r18
    199a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <add_note_to_arpeggiator>
    199e:	08 95       	ret

000019a0 <get_midi_device>:
static Sequencer* stored_sequencer;
static MidiDevice* stored_midi_device;

MidiDevice* get_midi_device() {
   return stored_midi_device;
}
    19a0:	80 91 6e 23 	lds	r24, 0x236E
    19a4:	90 91 6f 23 	lds	r25, 0x236F
    19a8:	08 95       	ret

000019aa <initialize_serial_midi>:

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
}

void initialize_serial_midi(MidiDevice* midi_device, Sequencer* sequencer){
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	ec 01       	movw	r28, r24
    19b8:	7b 01       	movw	r14, r22
   //set up the device
   midi_device_init(midi_device);
    19ba:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <midi_device_init>
   
   midi_device_set_send_func(midi_device, serial_midi_send);
    19be:	01 ea       	ldi	r16, 0xA1	; 161
    19c0:	1c e0       	ldi	r17, 0x0C	; 12
    19c2:	ce 01       	movw	r24, r28
    19c4:	b8 01       	movw	r22, r16
    19c6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <midi_device_set_send_func>
   midi_register_noteon_callback(midi_device, noteon_to_arpeggiator);
    19ca:	ce 01       	movw	r24, r28
    19cc:	62 ec       	ldi	r22, 0xC2	; 194
    19ce:	7c e0       	ldi	r23, 0x0C	; 12
    19d0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <midi_register_noteon_callback>
   midi_register_noteoff_callback(midi_device, noteoff_to_arpeggiator);
    19d4:	ce 01       	movw	r24, r28
    19d6:	6a eb       	ldi	r22, 0xBA	; 186
    19d8:	7c e0       	ldi	r23, 0x0C	; 12
    19da:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be sent through to midi out
   midi_register_fallthrough_callback(midi_device, serial_midi_send);
    19de:	ce 01       	movw	r24, r28
    19e0:	b8 01       	movw	r22, r16
    19e2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <midi_register_fallthrough_callback>
   
   //store the device and sequencer pointers
   stored_sequencer = sequencer;
    19e6:	e0 92 6c 23 	sts	0x236C, r14
    19ea:	f0 92 6d 23 	sts	0x236D, r15
   stored_midi_device = midi_device;
    19ee:	c0 93 6e 23 	sts	0x236E, r28
    19f2:	d0 93 6f 23 	sts	0x236F, r29
}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	08 95       	ret

00001a04 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1a04:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1a06:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1a08:	63 83       	std	Z+3, r22	; 0x03
    1a0a:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    1a0c:	11 82       	std	Z+1, r1	; 0x01
    1a0e:	10 82       	st	Z, r1
}
    1a10:	08 95       	ret

00001a12 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	ec 01       	movw	r28, r24
    1a1c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a1e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <store_and_clear_interrupt>
    1a22:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1a24:	29 81       	ldd	r18, Y+1	; 0x01
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	c9 01       	movw	r24, r18
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
    1a34:	48 81       	ld	r20, Y
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	84 17       	cp	r24, r20
    1a3a:	95 07       	cpc	r25, r21
    1a3c:	29 f4       	brne	.+10     	; 0x1a48 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    1a3e:	80 2f       	mov	r24, r16
    1a40:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <restore_interrupt_setting>
      return false;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    1a48:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1a52:	29 81       	ldd	r18, Y+1	; 0x01
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
    1a64:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1a66:	80 2f       	mov	r24, r16
    1a68:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <restore_interrupt_setting>
      return true;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a80:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	98 81       	ld	r25, Y
    1a88:	29 17       	cp	r18, r25
    1a8a:	10 f0       	brcs	.+4      	; 0x1a90 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1a8c:	12 2f       	mov	r17, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    1a90:	1a 81       	ldd	r17, Y+2	; 0x02
    1a92:	12 0f       	add	r17, r18
    1a94:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1a96:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <restore_interrupt_setting>
   return len;
}
    1a9a:	81 2f       	mov	r24, r17
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	08 95       	ret

00001aa4 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1aa4:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1aa6:	80 81       	ld	r24, Z
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	86 0f       	add	r24, r22
    1aac:	91 1d       	adc	r25, r1
    1aae:	62 81       	ldd	r22, Z+2	; 0x02
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
    1ab6:	03 80       	ldd	r0, Z+3	; 0x03
    1ab8:	f4 81       	ldd	r31, Z+4	; 0x04
    1aba:	e0 2d       	mov	r30, r0
    1abc:	e8 0f       	add	r30, r24
    1abe:	f9 1f       	adc	r31, r25
}
    1ac0:	80 81       	ld	r24, Z
    1ac2:	08 95       	ret

00001ac4 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	0f 92       	push	r0
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    1ad4:	69 83       	std	Y+1, r22	; 0x01
    1ad6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <store_and_clear_interrupt>
    1ada:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1adc:	f8 01       	movw	r30, r16
    1ade:	20 81       	ld	r18, Z
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	69 81       	ldd	r22, Y+1	; 0x01
    1ae4:	26 0f       	add	r18, r22
    1ae6:	31 1d       	adc	r19, r1
    1ae8:	62 81       	ldd	r22, Z+2	; 0x02
    1aea:	c9 01       	movw	r24, r18
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodhi4>
    1af2:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1af4:	84 2f       	mov	r24, r20
    1af6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <restore_interrupt_setting>
}
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <store_and_clear_interrupt>:
interrupt_setting_t store_and_clear_interrupt(void) {
//   uint8_t sreg = SREG;
    uint8_t sreg = 0;
//    cli();
    return sreg;
}
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	08 95       	ret

00001b0a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
//   SREG = setting;
}
    1b0a:	08 95       	ret

00001b0c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	88 27       	eor	r24, r24
    1b10:	88 1f       	adc	r24, r24
    1b12:	08 95       	ret

00001b14 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	88 3f       	cpi	r24, 0xF8	; 248
    1b18:	08 f4       	brcc	.+2      	; 0x1b1c <midi_is_realtime+0x8>
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
}
    1b1c:	89 2f       	mov	r24, r25
    1b1e:	08 95       	ret

00001b20 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	20 7f       	andi	r18, 0xF0	; 240
    1b26:	30 70       	andi	r19, 0x00	; 0
    1b28:	20 3b       	cpi	r18, 0xB0	; 176
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	f1 f0       	breq	.+60     	; 0x1b6a <midi_packet_length+0x4a>
    1b2e:	21 3b       	cpi	r18, 0xB1	; 177
    1b30:	31 05       	cpc	r19, r1
    1b32:	54 f4       	brge	.+20     	; 0x1b48 <midi_packet_length+0x28>
    1b34:	20 39       	cpi	r18, 0x90	; 144
    1b36:	31 05       	cpc	r19, r1
    1b38:	c1 f0       	breq	.+48     	; 0x1b6a <midi_packet_length+0x4a>
    1b3a:	20 3a       	cpi	r18, 0xA0	; 160
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	a9 f0       	breq	.+42     	; 0x1b6a <midi_packet_length+0x4a>
    1b40:	20 38       	cpi	r18, 0x80	; 128
    1b42:	31 05       	cpc	r19, r1
    1b44:	e9 f4       	brne	.+58     	; 0x1b80 <midi_packet_length+0x60>
    1b46:	11 c0       	rjmp	.+34     	; 0x1b6a <midi_packet_length+0x4a>
    1b48:	20 3d       	cpi	r18, 0xD0	; 208
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	d9 f0       	breq	.+54     	; 0x1b84 <midi_packet_length+0x64>
    1b4e:	21 3d       	cpi	r18, 0xD1	; 209
    1b50:	31 05       	cpc	r19, r1
    1b52:	24 f4       	brge	.+8      	; 0x1b5c <midi_packet_length+0x3c>
    1b54:	20 3c       	cpi	r18, 0xC0	; 192
    1b56:	31 05       	cpc	r19, r1
    1b58:	99 f4       	brne	.+38     	; 0x1b80 <midi_packet_length+0x60>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <midi_packet_length+0x64>
    1b5c:	20 3e       	cpi	r18, 0xE0	; 224
    1b5e:	31 05       	cpc	r19, r1
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <midi_packet_length+0x4a>
    1b62:	20 3f       	cpi	r18, 0xF0	; 240
    1b64:	31 05       	cpc	r19, r1
    1b66:	61 f4       	brne	.+24     	; 0x1b80 <midi_packet_length+0x60>
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1b6e:	e8 2f       	mov	r30, r24
    1b70:	e1 5f       	subi	r30, 0xF1	; 241
    1b72:	ef 30       	cpi	r30, 0x0F	; 15
    1b74:	48 f4       	brcc	.+18     	; 0x1b88 <midi_packet_length+0x68>
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e0 5e       	subi	r30, 0xE0	; 224
    1b7a:	ff 4d       	sbci	r31, 0xDF	; 223
    1b7c:	80 81       	ld	r24, Z
    1b7e:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	08 95       	ret
    1b88:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1b8a:	08 95       	ret

00001b8c <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1b8c:	0f 93       	push	r16
    1b8e:	36 2f       	mov	r19, r22
    1b90:	54 2f       	mov	r21, r20
    1b92:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1b94:	3f 70       	andi	r19, 0x0F	; 15
    1b96:	30 6b       	ori	r19, 0xB0	; 176
    1b98:	5f 77       	andi	r21, 0x7F	; 127
    1b9a:	0f 77       	andi	r16, 0x7F	; 127
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	63 e0       	ldi	r22, 0x03	; 3
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	43 2f       	mov	r20, r19
    1ba8:	25 2f       	mov	r18, r21
    1baa:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1bb0:	0f 93       	push	r16
    1bb2:	36 2f       	mov	r19, r22
    1bb4:	54 2f       	mov	r21, r20
    1bb6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1bb8:	3f 70       	andi	r19, 0x0F	; 15
    1bba:	30 69       	ori	r19, 0x90	; 144
    1bbc:	5f 77       	andi	r21, 0x7F	; 127
    1bbe:	0f 77       	andi	r16, 0x7F	; 127
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	ed 91       	ld	r30, X+
    1bc4:	fc 91       	ld	r31, X
    1bc6:	63 e0       	ldi	r22, 0x03	; 3
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	43 2f       	mov	r20, r19
    1bcc:	25 2f       	mov	r18, r21
    1bce:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1bd4:	0f 93       	push	r16
    1bd6:	36 2f       	mov	r19, r22
    1bd8:	54 2f       	mov	r21, r20
    1bda:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1bdc:	3f 70       	andi	r19, 0x0F	; 15
    1bde:	30 68       	ori	r19, 0x80	; 128
    1be0:	5f 77       	andi	r21, 0x7F	; 127
    1be2:	0f 77       	andi	r16, 0x7F	; 127
    1be4:	dc 01       	movw	r26, r24
    1be6:	ed 91       	ld	r30, X+
    1be8:	fc 91       	ld	r31, X
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	43 2f       	mov	r20, r19
    1bf0:	25 2f       	mov	r18, r21
    1bf2:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1bf8:	0f 93       	push	r16
    1bfa:	36 2f       	mov	r19, r22
    1bfc:	54 2f       	mov	r21, r20
    1bfe:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1c00:	3f 70       	andi	r19, 0x0F	; 15
    1c02:	30 6a       	ori	r19, 0xA0	; 160
    1c04:	5f 77       	andi	r21, 0x7F	; 127
    1c06:	0f 77       	andi	r16, 0x7F	; 127
    1c08:	dc 01       	movw	r26, r24
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	63 e0       	ldi	r22, 0x03	; 3
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	43 2f       	mov	r20, r19
    1c14:	25 2f       	mov	r18, r21
    1c16:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1c22:	20 e2       	ldi	r18, 0x20	; 32
    1c24:	40 30       	cpi	r20, 0x00	; 0
    1c26:	52 07       	cpc	r21, r18
    1c28:	3c f4       	brge	.+14     	; 0x1c38 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1c2a:	a0 ee       	ldi	r26, 0xE0	; 224
    1c2c:	40 30       	cpi	r20, 0x00	; 0
    1c2e:	5a 07       	cpc	r21, r26
    1c30:	34 f0       	brlt	.+12     	; 0x1c3e <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1c32:	00 50       	subi	r16, 0x00	; 0
    1c34:	10 4e       	sbci	r17, 0xE0	; 224
    1c36:	05 c0       	rjmp	.+10     	; 0x1c42 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1c38:	0f ef       	ldi	r16, 0xFF	; 255
    1c3a:	1f e3       	ldi	r17, 0x3F	; 63
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1c3e:	00 e0       	ldi	r16, 0x00	; 0
    1c40:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1c42:	46 2f       	mov	r20, r22
    1c44:	4f 70       	andi	r20, 0x0F	; 15
    1c46:	40 6e       	ori	r20, 0xE0	; 224
    1c48:	20 2f       	mov	r18, r16
    1c4a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1c4c:	00 0f       	add	r16, r16
    1c4e:	01 2f       	mov	r16, r17
    1c50:	00 1f       	adc	r16, r16
    1c52:	11 0b       	sbc	r17, r17
    1c54:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1c56:	0f 77       	andi	r16, 0x7F	; 127
    1c58:	dc 01       	movw	r26, r24
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1c6a:	0f 93       	push	r16
    1c6c:	36 2f       	mov	r19, r22
    1c6e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1c70:	3f 70       	andi	r19, 0x0F	; 15
    1c72:	30 6c       	ori	r19, 0xC0	; 192
    1c74:	2f 77       	andi	r18, 0x7F	; 127
    1c76:	dc 01       	movw	r26, r24
    1c78:	ed 91       	ld	r30, X+
    1c7a:	fc 91       	ld	r31, X
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	43 2f       	mov	r20, r19
    1c82:	00 e0       	ldi	r16, 0x00	; 0
    1c84:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1c86:	0f 91       	pop	r16
    1c88:	08 95       	ret

00001c8a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1c8a:	0f 93       	push	r16
    1c8c:	36 2f       	mov	r19, r22
    1c8e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1c90:	3f 70       	andi	r19, 0x0F	; 15
    1c92:	30 6d       	ori	r19, 0xD0	; 208
    1c94:	2f 77       	andi	r18, 0x7F	; 127
    1c96:	dc 01       	movw	r26, r24
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	43 2f       	mov	r20, r19
    1ca2:	00 e0       	ldi	r16, 0x00	; 0
    1ca4:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1caa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1cac:	dc 01       	movw	r26, r24
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	48 ef       	ldi	r20, 0xF8	; 248
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	00 e0       	ldi	r16, 0x00	; 0
    1cbc:	09 95       	icall
}
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1cc2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	ed 91       	ld	r30, X+
    1cc8:	fc 91       	ld	r31, X
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	49 ef       	ldi	r20, 0xF9	; 249
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	00 e0       	ldi	r16, 0x00	; 0
    1cd4:	09 95       	icall
}
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1cda:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1cdc:	dc 01       	movw	r26, r24
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	09 95       	icall
}
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1cf2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	4b ef       	ldi	r20, 0xFB	; 251
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	09 95       	icall
}
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1d0a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	4c ef       	ldi	r20, 0xFC	; 252
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	00 e0       	ldi	r16, 0x00	; 0
    1d1c:	09 95       	icall
}
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1d22:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1d24:	dc 01       	movw	r26, r24
    1d26:	ed 91       	ld	r30, X+
    1d28:	fc 91       	ld	r31, X
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	4e ef       	ldi	r20, 0xFE	; 254
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	09 95       	icall
}
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1d3a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	ed 91       	ld	r30, X+
    1d40:	fc 91       	ld	r31, X
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	00 e0       	ldi	r16, 0x00	; 0
    1d4c:	09 95       	icall
}
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1d52:	0f 93       	push	r16
    1d54:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1d56:	2f 77       	andi	r18, 0x7F	; 127
    1d58:	dc 01       	movw	r26, r24
    1d5a:	ed 91       	ld	r30, X+
    1d5c:	fc 91       	ld	r31, X
    1d5e:	62 e0       	ldi	r22, 0x02	; 2
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	41 ef       	ldi	r20, 0xF1	; 241
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1d68:	0f 91       	pop	r16
    1d6a:	08 95       	ret

00001d6c <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
   device->send_func(device, 3,
    1d70:	26 2f       	mov	r18, r22
    1d72:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1d74:	8b 01       	movw	r16, r22
    1d76:	00 0f       	add	r16, r16
    1d78:	01 2f       	mov	r16, r17
    1d7a:	00 1f       	adc	r16, r16
    1d7c:	11 0b       	sbc	r17, r17
    1d7e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1d80:	0f 77       	andi	r16, 0x7F	; 127
    1d82:	dc 01       	movw	r26, r24
    1d84:	ed 91       	ld	r30, X+
    1d86:	fc 91       	ld	r31, X
    1d88:	63 e0       	ldi	r22, 0x03	; 3
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	42 ef       	ldi	r20, 0xF2	; 242
    1d8e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1d96:	0f 93       	push	r16
    1d98:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1d9a:	2f 77       	andi	r18, 0x7F	; 127
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	43 ef       	ldi	r20, 0xF3	; 243
    1da8:	00 e0       	ldi	r16, 0x00	; 0
    1daa:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1db0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1db2:	dc 01       	movw	r26, r24
    1db4:	ed 91       	ld	r30, X+
    1db6:	fc 91       	ld	r31, X
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	46 ef       	ldi	r20, 0xF6	; 246
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	00 e0       	ldi	r16, 0x00	; 0
    1dc2:	09 95       	icall
}
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1dc8:	0f 93       	push	r16
    1dca:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1dcc:	dc 01       	movw	r26, r24
    1dce:	ed 91       	ld	r30, X+
    1dd0:	fc 91       	ld	r31, X
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	00 e0       	ldi	r16, 0x00	; 0
    1dda:	09 95       	icall
}
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1de0:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1de2:	dc 01       	movw	r26, r24
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	09 95       	icall
}
    1dea:	0f 91       	pop	r16
    1dec:	08 95       	ret

00001dee <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1dee:	fc 01       	movw	r30, r24
    1df0:	62 83       	std	Z+2, r22	; 0x02
    1df2:	73 83       	std	Z+3, r23	; 0x03
}
    1df4:	08 95       	ret

00001df6 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1df6:	fc 01       	movw	r30, r24
    1df8:	64 83       	std	Z+4, r22	; 0x04
    1dfa:	75 83       	std	Z+5, r23	; 0x05
}
    1dfc:	08 95       	ret

00001dfe <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1dfe:	fc 01       	movw	r30, r24
    1e00:	66 83       	std	Z+6, r22	; 0x06
    1e02:	77 83       	std	Z+7, r23	; 0x07
}
    1e04:	08 95       	ret

00001e06 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1e06:	fc 01       	movw	r30, r24
    1e08:	60 87       	std	Z+8, r22	; 0x08
    1e0a:	71 87       	std	Z+9, r23	; 0x09
}
    1e0c:	08 95       	ret

00001e0e <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1e0e:	fc 01       	movw	r30, r24
    1e10:	62 87       	std	Z+10, r22	; 0x0a
    1e12:	73 87       	std	Z+11, r23	; 0x0b
}
    1e14:	08 95       	ret

00001e16 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1e16:	fc 01       	movw	r30, r24
    1e18:	64 87       	std	Z+12, r22	; 0x0c
    1e1a:	75 87       	std	Z+13, r23	; 0x0d
}
    1e1c:	08 95       	ret

00001e1e <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1e1e:	fc 01       	movw	r30, r24
    1e20:	66 87       	std	Z+14, r22	; 0x0e
    1e22:	77 87       	std	Z+15, r23	; 0x0f
}
    1e24:	08 95       	ret

00001e26 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1e26:	fc 01       	movw	r30, r24
    1e28:	60 8b       	std	Z+16, r22	; 0x10
    1e2a:	71 8b       	std	Z+17, r23	; 0x11
}
    1e2c:	08 95       	ret

00001e2e <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1e2e:	fc 01       	movw	r30, r24
    1e30:	62 8b       	std	Z+18, r22	; 0x12
    1e32:	73 8b       	std	Z+19, r23	; 0x13
}
    1e34:	08 95       	ret

00001e36 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1e36:	fc 01       	movw	r30, r24
    1e38:	64 8b       	std	Z+20, r22	; 0x14
    1e3a:	75 8b       	std	Z+21, r23	; 0x15
}
    1e3c:	08 95       	ret

00001e3e <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1e3e:	fc 01       	movw	r30, r24
    1e40:	66 8b       	std	Z+22, r22	; 0x16
    1e42:	77 8b       	std	Z+23, r23	; 0x17
}
    1e44:	08 95       	ret

00001e46 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1e46:	fc 01       	movw	r30, r24
    1e48:	60 8f       	std	Z+24, r22	; 0x18
    1e4a:	71 8f       	std	Z+25, r23	; 0x19
}
    1e4c:	08 95       	ret

00001e4e <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1e4e:	fc 01       	movw	r30, r24
    1e50:	62 8f       	std	Z+26, r22	; 0x1a
    1e52:	73 8f       	std	Z+27, r23	; 0x1b
}
    1e54:	08 95       	ret

00001e56 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1e56:	fc 01       	movw	r30, r24
    1e58:	64 8f       	std	Z+28, r22	; 0x1c
    1e5a:	75 8f       	std	Z+29, r23	; 0x1d
}
    1e5c:	08 95       	ret

00001e5e <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1e5e:	fc 01       	movw	r30, r24
    1e60:	66 8f       	std	Z+30, r22	; 0x1e
    1e62:	77 8f       	std	Z+31, r23	; 0x1f
}
    1e64:	08 95       	ret

00001e66 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1e6c:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1e6e:	1e a2       	std	Y+38, r1	; 0x26
    1e70:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1e72:	bc 01       	movw	r22, r24
    1e74:	68 5d       	subi	r22, 0xD8	; 216
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	88 51       	subi	r24, 0x18	; 24
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	40 ec       	ldi	r20, 0xC0	; 192
    1e7e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1e82:	1a 82       	std	Y+2, r1	; 0x02
    1e84:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1e86:	1c 82       	std	Y+4, r1	; 0x04
    1e88:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1e8a:	1e 82       	std	Y+6, r1	; 0x06
    1e8c:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1e8e:	18 86       	std	Y+8, r1	; 0x08
    1e90:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1e92:	1a 86       	std	Y+10, r1	; 0x0a
    1e94:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1e96:	1c 86       	std	Y+12, r1	; 0x0c
    1e98:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1e9a:	1e 86       	std	Y+14, r1	; 0x0e
    1e9c:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1e9e:	18 8a       	std	Y+16, r1	; 0x10
    1ea0:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1ea2:	1a 8a       	std	Y+18, r1	; 0x12
    1ea4:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1ea6:	1c 8a       	std	Y+20, r1	; 0x14
    1ea8:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1eaa:	1e 8a       	std	Y+22, r1	; 0x16
    1eac:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1eae:	18 8e       	std	Y+24, r1	; 0x18
    1eb0:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1eb2:	1a 8e       	std	Y+26, r1	; 0x1a
    1eb4:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1eb6:	1c 8e       	std	Y+28, r1	; 0x1c
    1eb8:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1eba:	1e 8e       	std	Y+30, r1	; 0x1e
    1ebc:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1ebe:	18 a2       	std	Y+32, r1	; 0x20
    1ec0:	19 a2       	std	Y+33, r1	; 0x21
}
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1ede:	e4 2f       	mov	r30, r20
    1ee0:	f5 2f       	mov	r31, r21
    1ee2:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1ee4:	8c 01       	movw	r16, r24
    1ee6:	08 51       	subi	r16, 0x18	; 24
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1eea:	08 c0       	rjmp	.+16     	; 0x1efc <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1eec:	f6 01       	movw	r30, r12
    1eee:	61 91       	ld	r22, Z+
    1ef0:	6f 01       	movw	r12, r30
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	49 83       	std	Y+1, r20	; 0x01
    1ef6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <bytequeue_enqueue>
    1efa:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1efc:	8c 2d       	mov	r24, r12
    1efe:	84 1b       	sub	r24, r20
    1f00:	8f 15       	cp	r24, r15
    1f02:	a0 f3       	brcs	.-24     	; 0x1eec <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	08 95       	ret

00001f16 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1f16:	fc 01       	movw	r30, r24
    1f18:	60 83       	st	Z, r22
    1f1a:	71 83       	std	Z+1, r23	; 0x01
}
    1f1c:	08 95       	ret

00001f1e <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1f1e:	fc 01       	movw	r30, r24
    1f20:	60 a3       	std	Z+32, r22	; 0x20
    1f22:	71 a3       	std	Z+33, r23	; 0x21
}
    1f24:	08 95       	ret

00001f26 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	ec 01       	movw	r28, r24
    1f38:	6b 01       	movw	r12, r22
    1f3a:	14 2f       	mov	r17, r20
    1f3c:	e2 2e       	mov	r14, r18
    1f3e:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	31 f4       	brne	.+12     	; 0x1f52 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1f46:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f48:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <midi_input_callbacks+0x2a>
    1f4e:	83 c0       	rjmp	.+262    	; 0x2056 <midi_input_callbacks+0x130>
    1f50:	95 c0       	rjmp	.+298    	; 0x207c <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1f52:	62 30       	cpi	r22, 0x02	; 2
    1f54:	71 05       	cpc	r23, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <midi_input_callbacks+0x34>
    1f58:	42 c0       	rjmp	.+132    	; 0x1fde <midi_input_callbacks+0xb8>
    1f5a:	63 30       	cpi	r22, 0x03	; 3
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <midi_input_callbacks+0x44>
    1f60:	61 30       	cpi	r22, 0x01	; 1
    1f62:	71 05       	cpc	r23, r1
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <midi_input_callbacks+0x42>
    1f66:	73 c0       	rjmp	.+230    	; 0x204e <midi_input_callbacks+0x128>
    1f68:	60 c0       	rjmp	.+192    	; 0x202a <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1f6a:	84 2f       	mov	r24, r20
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	80 7f       	andi	r24, 0xF0	; 240
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	80 3a       	cpi	r24, 0xA0	; 160
    1f74:	91 05       	cpc	r25, r1
    1f76:	e1 f0       	breq	.+56     	; 0x1fb0 <midi_input_callbacks+0x8a>
    1f78:	81 3a       	cpi	r24, 0xA1	; 161
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	3c f4       	brge	.+14     	; 0x1f8c <midi_input_callbacks+0x66>
    1f7e:	80 38       	cpi	r24, 0x80	; 128
    1f80:	91 05       	cpc	r25, r1
    1f82:	99 f0       	breq	.+38     	; 0x1faa <midi_input_callbacks+0x84>
    1f84:	80 39       	cpi	r24, 0x90	; 144
    1f86:	91 05       	cpc	r25, r1
    1f88:	f9 f4       	brne	.+62     	; 0x1fc8 <midi_input_callbacks+0xa2>
    1f8a:	0c c0       	rjmp	.+24     	; 0x1fa4 <midi_input_callbacks+0x7e>
    1f8c:	80 3e       	cpi	r24, 0xE0	; 224
    1f8e:	91 05       	cpc	r25, r1
    1f90:	91 f0       	breq	.+36     	; 0x1fb6 <midi_input_callbacks+0x90>
    1f92:	80 3f       	cpi	r24, 0xF0	; 240
    1f94:	91 05       	cpc	r25, r1
    1f96:	91 f0       	breq	.+36     	; 0x1fbc <midi_input_callbacks+0x96>
    1f98:	80 3b       	cpi	r24, 0xB0	; 176
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	a9 f4       	brne	.+42     	; 0x1fc8 <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1f9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa0:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa6:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1fa8:	11 c0       	rjmp	.+34     	; 0x1fcc <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1faa:	ee 81       	ldd	r30, Y+6	; 0x06
    1fac:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1fae:	0e c0       	rjmp	.+28     	; 0x1fcc <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1fb0:	e8 85       	ldd	r30, Y+8	; 0x08
    1fb2:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1fb4:	0b c0       	rjmp	.+22     	; 0x1fcc <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1fb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1fb8:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1fba:	08 c0       	rjmp	.+16     	; 0x1fcc <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1fbc:	42 3f       	cpi	r20, 0xF2	; 242
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <midi_input_callbacks+0x9c>
    1fc0:	5d c0       	rjmp	.+186    	; 0x207c <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1fc2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fc4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1fc8:	e0 e0       	ldi	r30, 0x00	; 0
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <midi_input_callbacks+0xac>
    1fd0:	55 c0       	rjmp	.+170    	; 0x207c <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	61 2f       	mov	r22, r17
    1fd6:	4e 2d       	mov	r20, r14
    1fd8:	2f 2d       	mov	r18, r15
    1fda:	09 95       	icall
    1fdc:	42 c0       	rjmp	.+132    	; 0x2062 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1fde:	84 2f       	mov	r24, r20
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	80 7f       	andi	r24, 0xF0	; 240
    1fe4:	90 70       	andi	r25, 0x00	; 0
    1fe6:	80 3d       	cpi	r24, 0xD0	; 208
    1fe8:	91 05       	cpc	r25, r1
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <midi_input_callbacks+0xd8>
    1fec:	80 3f       	cpi	r24, 0xF0	; 240
    1fee:	91 05       	cpc	r25, r1
    1ff0:	49 f0       	breq	.+18     	; 0x2004 <midi_input_callbacks+0xde>
    1ff2:	80 3c       	cpi	r24, 0xC0	; 192
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	81 f4       	brne	.+32     	; 0x2018 <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1ff8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ffa:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1ffe:	e8 89       	ldd	r30, Y+16	; 0x10
    2000:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    2002:	0c c0       	rjmp	.+24     	; 0x201c <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    2004:	43 3f       	cpi	r20, 0xF3	; 243
    2006:	19 f4       	brne	.+6      	; 0x200e <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    2008:	ea 89       	ldd	r30, Y+18	; 0x12
    200a:	fb 89       	ldd	r31, Y+19	; 0x13
    200c:	07 c0       	rjmp	.+14     	; 0x201c <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    200e:	41 3f       	cpi	r20, 0xF1	; 241
    2010:	a9 f5       	brne	.+106    	; 0x207c <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    2012:	ec 89       	ldd	r30, Y+20	; 0x14
    2014:	fd 89       	ldd	r31, Y+21	; 0x15
    2016:	02 c0       	rjmp	.+4      	; 0x201c <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    2018:	e0 e0       	ldi	r30, 0x00	; 0
    201a:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    201c:	30 97       	sbiw	r30, 0x00	; 0
    201e:	71 f1       	breq	.+92     	; 0x207c <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    2020:	ce 01       	movw	r24, r28
    2022:	61 2f       	mov	r22, r17
    2024:	4e 2d       	mov	r20, r14
    2026:	09 95       	icall
    2028:	1c c0       	rjmp	.+56     	; 0x2062 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    202a:	84 2f       	mov	r24, r20
    202c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <midi_is_realtime>
    2030:	88 23       	and	r24, r24
    2032:	19 f0       	breq	.+6      	; 0x203a <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    2034:	ee 89       	ldd	r30, Y+22	; 0x16
    2036:	ff 89       	ldd	r31, Y+23	; 0x17
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    203a:	16 3f       	cpi	r17, 0xF6	; 246
    203c:	f9 f4       	brne	.+62     	; 0x207c <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    203e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2040:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    2042:	30 97       	sbiw	r30, 0x00	; 0
    2044:	d9 f0       	breq	.+54     	; 0x207c <midi_input_callbacks+0x156>
                  func(device, byte0);
    2046:	ce 01       	movw	r24, r28
    2048:	61 2f       	mov	r22, r17
    204a:	09 95       	icall
    204c:	0a c0       	rjmp	.+20     	; 0x2062 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    204e:	64 30       	cpi	r22, 0x04	; 4
    2050:	71 05       	cpc	r23, r1
    2052:	90 f4       	brcc	.+36     	; 0x2078 <midi_input_callbacks+0x152>
    2054:	13 c0       	rjmp	.+38     	; 0x207c <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2056:	ce 01       	movw	r24, r28
    2058:	b6 01       	movw	r22, r12
    205a:	41 2f       	mov	r20, r17
    205c:	2e 2d       	mov	r18, r14
    205e:	0f 2d       	mov	r16, r15
    2060:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    2062:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2064:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2066:	30 97       	sbiw	r30, 0x00	; 0
    2068:	71 f0       	breq	.+28     	; 0x2086 <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    206a:	ce 01       	movw	r24, r28
    206c:	b6 01       	movw	r22, r12
    206e:	41 2f       	mov	r20, r17
    2070:	2e 2d       	mov	r18, r14
    2072:	0f 2d       	mov	r16, r15
    2074:	09 95       	icall
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    2078:	cc 24       	eor	r12, r12
    207a:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    207c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    207e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2080:	30 97       	sbiw	r30, 0x00	; 0
    2082:	49 f7       	brne	.-46     	; 0x2056 <midi_input_callbacks+0x130>
    2084:	ee cf       	rjmp	.-36     	; 0x2062 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	08 95       	ret

00002098 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	ec 01       	movw	r28, r24
    20a6:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    20a8:	86 2f       	mov	r24, r22
    20aa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <midi_is_realtime>
    20ae:	88 23       	and	r24, r24
    20b0:	69 f0       	breq	.+26     	; 0x20cc <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    20b2:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    20b8:	ce 01       	movw	r24, r28
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	41 2f       	mov	r20, r17
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <midi_input_callbacks>
      device->input_state = state;
    20c8:	ed a2       	std	Y+37, r14	; 0x25
    20ca:	7e c0       	rjmp	.+252    	; 0x21c8 <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    20cc:	81 2f       	mov	r24, r17
    20ce:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <midi_is_statusbyte>
    20d2:	4d a1       	ldd	r20, Y+37	; 0x25
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <midi_process_byte+0x42>
    20d8:	42 c0       	rjmp	.+132    	; 0x215e <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    20da:	44 30       	cpi	r20, 0x04	; 4
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    20de:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	8e a3       	std	Y+38, r24	; 0x26
    20e6:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    20e8:	81 2f       	mov	r24, r17
    20ea:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <midi_packet_length>
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	39 f0       	breq	.+14     	; 0x2100 <midi_process_byte+0x68>
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	78 f0       	brcs	.+30     	; 0x2114 <midi_process_byte+0x7c>
    20f6:	82 30       	cpi	r24, 0x02	; 2
    20f8:	59 f0       	breq	.+22     	; 0x2110 <midi_process_byte+0x78>
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	61 f5       	brne	.+88     	; 0x2156 <midi_process_byte+0xbe>
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    2100:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    2102:	ce 01       	movw	r24, r28
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	41 2f       	mov	r20, r17
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	00 e0       	ldi	r16, 0x00	; 0
    210e:	1f c0       	rjmp	.+62     	; 0x214e <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    2110:	8d a3       	std	Y+37, r24	; 0x25
            break;
    2112:	5a c0       	rjmp	.+180    	; 0x21c8 <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    2114:	10 3f       	cpi	r17, 0xF0	; 240
    2116:	19 f0       	breq	.+6      	; 0x211e <midi_process_byte+0x86>
    2118:	17 3f       	cpi	r17, 0xF7	; 247
    211a:	e9 f4       	brne	.+58     	; 0x2156 <midi_process_byte+0xbe>
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    2122:	1a a3       	std	Y+34, r17	; 0x22
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    2126:	2e a1       	ldd	r18, Y+38	; 0x26
    2128:	3f a1       	ldd	r19, Y+39	; 0x27
    212a:	c9 01       	movw	r24, r18
    212c:	63 e0       	ldi	r22, 0x03	; 3
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
    2134:	8c 0f       	add	r24, r28
    2136:	9d 1f       	adc	r25, r29
    2138:	fc 01       	movw	r30, r24
    213a:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    213c:	b9 01       	movw	r22, r18
    213e:	6f 5f       	subi	r22, 0xFF	; 255
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	6e a3       	std	Y+38, r22	; 0x26
    2144:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    2146:	ce 01       	movw	r24, r28
    2148:	4a a1       	ldd	r20, Y+34	; 0x22
    214a:	2b a1       	ldd	r18, Y+35	; 0x23
    214c:	0c a1       	ldd	r16, Y+36	; 0x24
    214e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    2152:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    2154:	39 c0       	rjmp	.+114    	; 0x21c8 <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    2156:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    2158:	1e a2       	std	Y+38, r1	; 0x26
    215a:	1f a2       	std	Y+39, r1	; 0x27
            break;
    215c:	35 c0       	rjmp	.+106    	; 0x21c8 <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    215e:	44 23       	and	r20, r20
    2160:	99 f1       	breq	.+102    	; 0x21c8 <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    2162:	2e a1       	ldd	r18, Y+38	; 0x26
    2164:	3f a1       	ldd	r19, Y+39	; 0x27
    2166:	c9 01       	movw	r24, r18
    2168:	63 e0       	ldi	r22, 0x03	; 3
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
    2170:	7c 01       	movw	r14, r24
    2172:	fe 01       	movw	r30, r28
    2174:	e8 0f       	add	r30, r24
    2176:	f9 1f       	adc	r31, r25
    2178:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    217a:	b9 01       	movw	r22, r18
    217c:	6f 5f       	subi	r22, 0xFF	; 255
    217e:	7f 4f       	sbci	r23, 0xFF	; 255
    2180:	6e a3       	std	Y+38, r22	; 0x26
    2182:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	91 05       	cpc	r25, r1
    2188:	91 f0       	breq	.+36     	; 0x21ae <midi_process_byte+0x116>
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	e8 16       	cp	r14, r24
    218e:	f1 04       	cpc	r15, r1
    2190:	d9 f4       	brne	.+54     	; 0x21c8 <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    2192:	ce 01       	movw	r24, r28
    2194:	4a a1       	ldd	r20, Y+34	; 0x22
    2196:	2b a1       	ldd	r18, Y+35	; 0x23
    2198:	0c a1       	ldd	r16, Y+36	; 0x24
    219a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    219e:	8d a1       	ldd	r24, Y+37	; 0x25
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	91 f0       	breq	.+36     	; 0x21c8 <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	8e a3       	std	Y+38, r24	; 0x26
    21aa:	9f a3       	std	Y+39, r25	; 0x27
    21ac:	0d c0       	rjmp	.+26     	; 0x21c8 <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    21ae:	42 30       	cpi	r20, 0x02	; 2
    21b0:	59 f4       	brne	.+22     	; 0x21c8 <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    21b2:	ce 01       	movw	r24, r28
    21b4:	4a a1       	ldd	r20, Y+34	; 0x22
    21b6:	2b a1       	ldd	r18, Y+35	; 0x23
    21b8:	00 e0       	ldi	r16, 0x00	; 0
    21ba:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    21be:	8d a1       	ldd	r24, Y+37	; 0x25
    21c0:	84 30       	cpi	r24, 0x04	; 4
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    21c4:	ee a2       	std	Y+38, r14	; 0x26
    21c6:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	08 95       	ret

000021d6 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    21e8:	e8 a1       	ldd	r30, Y+32	; 0x20
    21ea:	f9 a1       	ldd	r31, Y+33	; 0x21
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    21f0:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    21f2:	8e 01       	movw	r16, r28
    21f4:	08 51       	subi	r16, 0x18	; 24
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    21fe:	ee 24       	eor	r14, r14
    2200:	ff 24       	eor	r15, r15
    2202:	c8 2e       	mov	r12, r24
    2204:	dd 24       	eor	r13, r13
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    2208:	c8 01       	movw	r24, r16
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <bytequeue_get>
    2210:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    2212:	ce 01       	movw	r24, r28
    2214:	0e 94 4c 10 	call	0x2098	; 0x2098 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    2218:	c8 01       	movw	r24, r16
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    2220:	08 94       	sec
    2222:	e1 1c       	adc	r14, r1
    2224:	f1 1c       	adc	r15, r1
    2226:	ec 14       	cp	r14, r12
    2228:	fd 04       	cpc	r15, r13
    222a:	70 f3       	brcs	.-36     	; 0x2208 <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	08 95       	ret

0000223e <__fixunssfsi>:
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	7b 01       	movw	r14, r22
    2248:	8c 01       	movw	r16, r24
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	5f e4       	ldi	r21, 0x4F	; 79
    2252:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__gesf2>
    2256:	87 fd       	sbrc	r24, 7
    2258:	11 c0       	rjmp	.+34     	; 0x227c <__fixunssfsi+0x3e>
    225a:	c8 01       	movw	r24, r16
    225c:	b7 01       	movw	r22, r14
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	5f e4       	ldi	r21, 0x4F	; 79
    2266:	0e 94 c2 12 	call	0x2584	; 0x2584 <__subsf3>
    226a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fixsfsi>
    226e:	9b 01       	movw	r18, r22
    2270:	ac 01       	movw	r20, r24
    2272:	20 50       	subi	r18, 0x00	; 0
    2274:	30 40       	sbci	r19, 0x00	; 0
    2276:	40 40       	sbci	r20, 0x00	; 0
    2278:	50 48       	sbci	r21, 0x80	; 128
    227a:	06 c0       	rjmp	.+12     	; 0x2288 <__fixunssfsi+0x4a>
    227c:	c8 01       	movw	r24, r16
    227e:	b7 01       	movw	r22, r14
    2280:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fixsfsi>
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	b9 01       	movw	r22, r18
    228a:	ca 01       	movw	r24, r20
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	ef 90       	pop	r14
    2294:	08 95       	ret

00002296 <_fpadd_parts>:
    2296:	a0 e0       	ldi	r26, 0x00	; 0
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e1 e5       	ldi	r30, 0x51	; 81
    229c:	f1 e1       	ldi	r31, 0x11	; 17
    229e:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__+0x8>
    22a2:	fc 01       	movw	r30, r24
    22a4:	ea 01       	movw	r28, r20
    22a6:	80 81       	ld	r24, Z
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <_fpadd_parts+0x18>
    22ac:	38 c1       	rjmp	.+624    	; 0x251e <_fpadd_parts+0x288>
    22ae:	db 01       	movw	r26, r22
    22b0:	9c 91       	ld	r25, X
    22b2:	92 30       	cpi	r25, 0x02	; 2
    22b4:	08 f4       	brcc	.+2      	; 0x22b8 <_fpadd_parts+0x22>
    22b6:	30 c1       	rjmp	.+608    	; 0x2518 <_fpadd_parts+0x282>
    22b8:	84 30       	cpi	r24, 0x04	; 4
    22ba:	59 f4       	brne	.+22     	; 0x22d2 <_fpadd_parts+0x3c>
    22bc:	94 30       	cpi	r25, 0x04	; 4
    22be:	09 f0       	breq	.+2      	; 0x22c2 <_fpadd_parts+0x2c>
    22c0:	2e c1       	rjmp	.+604    	; 0x251e <_fpadd_parts+0x288>
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	8c 91       	ld	r24, X
    22c8:	11 97       	sbiw	r26, 0x01	; 1
    22ca:	98 17       	cp	r25, r24
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <_fpadd_parts+0x3a>
    22ce:	21 c1       	rjmp	.+578    	; 0x2512 <_fpadd_parts+0x27c>
    22d0:	26 c1       	rjmp	.+588    	; 0x251e <_fpadd_parts+0x288>
    22d2:	94 30       	cpi	r25, 0x04	; 4
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <_fpadd_parts+0x42>
    22d6:	20 c1       	rjmp	.+576    	; 0x2518 <_fpadd_parts+0x282>
    22d8:	92 30       	cpi	r25, 0x02	; 2
    22da:	b1 f4       	brne	.+44     	; 0x2308 <_fpadd_parts+0x72>
    22dc:	82 30       	cpi	r24, 0x02	; 2
    22de:	09 f0       	breq	.+2      	; 0x22e2 <_fpadd_parts+0x4c>
    22e0:	1e c1       	rjmp	.+572    	; 0x251e <_fpadd_parts+0x288>
    22e2:	ca 01       	movw	r24, r20
    22e4:	af 01       	movw	r20, r30
    22e6:	28 e0       	ldi	r18, 0x08	; 8
    22e8:	da 01       	movw	r26, r20
    22ea:	0d 90       	ld	r0, X+
    22ec:	ad 01       	movw	r20, r26
    22ee:	dc 01       	movw	r26, r24
    22f0:	0d 92       	st	X+, r0
    22f2:	cd 01       	movw	r24, r26
    22f4:	21 50       	subi	r18, 0x01	; 1
    22f6:	c1 f7       	brne	.-16     	; 0x22e8 <_fpadd_parts+0x52>
    22f8:	db 01       	movw	r26, r22
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	8c 91       	ld	r24, X
    22fe:	11 97       	sbiw	r26, 0x01	; 1
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	89 23       	and	r24, r25
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	0a c1       	rjmp	.+532    	; 0x251c <_fpadd_parts+0x286>
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	09 f4       	brne	.+2      	; 0x230e <_fpadd_parts+0x78>
    230c:	05 c1       	rjmp	.+522    	; 0x2518 <_fpadd_parts+0x282>
    230e:	c2 80       	ldd	r12, Z+2	; 0x02
    2310:	d3 80       	ldd	r13, Z+3	; 0x03
    2312:	db 01       	movw	r26, r22
    2314:	12 96       	adiw	r26, 0x02	; 2
    2316:	6d 90       	ld	r6, X+
    2318:	7c 90       	ld	r7, X
    231a:	13 97       	sbiw	r26, 0x03	; 3
    231c:	24 81       	ldd	r18, Z+4	; 0x04
    231e:	35 81       	ldd	r19, Z+5	; 0x05
    2320:	46 81       	ldd	r20, Z+6	; 0x06
    2322:	57 81       	ldd	r21, Z+7	; 0x07
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	ed 90       	ld	r14, X+
    2328:	fd 90       	ld	r15, X+
    232a:	0d 91       	ld	r16, X+
    232c:	1c 91       	ld	r17, X
    232e:	17 97       	sbiw	r26, 0x07	; 7
    2330:	c6 01       	movw	r24, r12
    2332:	86 19       	sub	r24, r6
    2334:	97 09       	sbc	r25, r7
    2336:	5c 01       	movw	r10, r24
    2338:	97 ff       	sbrs	r25, 7
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <_fpadd_parts+0xae>
    233c:	aa 24       	eor	r10, r10
    233e:	bb 24       	eor	r11, r11
    2340:	a8 1a       	sub	r10, r24
    2342:	b9 0a       	sbc	r11, r25
    2344:	b0 e2       	ldi	r27, 0x20	; 32
    2346:	ab 16       	cp	r10, r27
    2348:	b1 04       	cpc	r11, r1
    234a:	0c f0       	brlt	.+2      	; 0x234e <_fpadd_parts+0xb8>
    234c:	61 c0       	rjmp	.+194    	; 0x2410 <_fpadd_parts+0x17a>
    234e:	18 16       	cp	r1, r24
    2350:	19 06       	cpc	r1, r25
    2352:	6c f5       	brge	.+90     	; 0x23ae <_fpadd_parts+0x118>
    2354:	37 01       	movw	r6, r14
    2356:	48 01       	movw	r8, r16
    2358:	0a 2c       	mov	r0, r10
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <_fpadd_parts+0xce>
    235c:	96 94       	lsr	r9
    235e:	87 94       	ror	r8
    2360:	77 94       	ror	r7
    2362:	67 94       	ror	r6
    2364:	0a 94       	dec	r0
    2366:	d2 f7       	brpl	.-12     	; 0x235c <_fpadd_parts+0xc6>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e0       	ldi	r26, 0x00	; 0
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	0a 2c       	mov	r0, r10
    2372:	04 c0       	rjmp	.+8      	; 0x237c <_fpadd_parts+0xe6>
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	aa 1f       	adc	r26, r26
    237a:	bb 1f       	adc	r27, r27
    237c:	0a 94       	dec	r0
    237e:	d2 f7       	brpl	.-12     	; 0x2374 <_fpadd_parts+0xde>
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	a1 09       	sbc	r26, r1
    2384:	b1 09       	sbc	r27, r1
    2386:	8e 21       	and	r24, r14
    2388:	9f 21       	and	r25, r15
    238a:	a0 23       	and	r26, r16
    238c:	b1 23       	and	r27, r17
    238e:	ee 24       	eor	r14, r14
    2390:	ff 24       	eor	r15, r15
    2392:	87 01       	movw	r16, r14
    2394:	e3 94       	inc	r14
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	a1 05       	cpc	r26, r1
    239a:	b1 05       	cpc	r27, r1
    239c:	19 f4       	brne	.+6      	; 0x23a4 <_fpadd_parts+0x10e>
    239e:	ee 24       	eor	r14, r14
    23a0:	ff 24       	eor	r15, r15
    23a2:	87 01       	movw	r16, r14
    23a4:	e6 28       	or	r14, r6
    23a6:	f7 28       	or	r15, r7
    23a8:	08 29       	or	r16, r8
    23aa:	19 29       	or	r17, r9
    23ac:	3c c0       	rjmp	.+120    	; 0x2426 <_fpadd_parts+0x190>
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	d1 f1       	breq	.+116    	; 0x2426 <_fpadd_parts+0x190>
    23b2:	ca 0c       	add	r12, r10
    23b4:	db 1c       	adc	r13, r11
    23b6:	39 01       	movw	r6, r18
    23b8:	4a 01       	movw	r8, r20
    23ba:	0a 2c       	mov	r0, r10
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <_fpadd_parts+0x130>
    23be:	96 94       	lsr	r9
    23c0:	87 94       	ror	r8
    23c2:	77 94       	ror	r7
    23c4:	67 94       	ror	r6
    23c6:	0a 94       	dec	r0
    23c8:	d2 f7       	brpl	.-12     	; 0x23be <_fpadd_parts+0x128>
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	0a 2c       	mov	r0, r10
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <_fpadd_parts+0x148>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	aa 1f       	adc	r26, r26
    23dc:	bb 1f       	adc	r27, r27
    23de:	0a 94       	dec	r0
    23e0:	d2 f7       	brpl	.-12     	; 0x23d6 <_fpadd_parts+0x140>
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	a1 09       	sbc	r26, r1
    23e6:	b1 09       	sbc	r27, r1
    23e8:	82 23       	and	r24, r18
    23ea:	93 23       	and	r25, r19
    23ec:	a4 23       	and	r26, r20
    23ee:	b5 23       	and	r27, r21
    23f0:	21 e0       	ldi	r18, 0x01	; 1
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	a1 05       	cpc	r26, r1
    23fc:	b1 05       	cpc	r27, r1
    23fe:	19 f4       	brne	.+6      	; 0x2406 <_fpadd_parts+0x170>
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	a9 01       	movw	r20, r18
    2406:	26 29       	or	r18, r6
    2408:	37 29       	or	r19, r7
    240a:	48 29       	or	r20, r8
    240c:	59 29       	or	r21, r9
    240e:	0b c0       	rjmp	.+22     	; 0x2426 <_fpadd_parts+0x190>
    2410:	6c 14       	cp	r6, r12
    2412:	7d 04       	cpc	r7, r13
    2414:	24 f4       	brge	.+8      	; 0x241e <_fpadd_parts+0x188>
    2416:	ee 24       	eor	r14, r14
    2418:	ff 24       	eor	r15, r15
    241a:	87 01       	movw	r16, r14
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <_fpadd_parts+0x190>
    241e:	63 01       	movw	r12, r6
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	a9 01       	movw	r20, r18
    2426:	81 81       	ldd	r24, Z+1	; 0x01
    2428:	fb 01       	movw	r30, r22
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	89 17       	cp	r24, r25
    242e:	09 f4       	brne	.+2      	; 0x2432 <_fpadd_parts+0x19c>
    2430:	45 c0       	rjmp	.+138    	; 0x24bc <_fpadd_parts+0x226>
    2432:	88 23       	and	r24, r24
    2434:	49 f0       	breq	.+18     	; 0x2448 <_fpadd_parts+0x1b2>
    2436:	d8 01       	movw	r26, r16
    2438:	c7 01       	movw	r24, r14
    243a:	82 1b       	sub	r24, r18
    243c:	93 0b       	sbc	r25, r19
    243e:	a4 0b       	sbc	r26, r20
    2440:	b5 0b       	sbc	r27, r21
    2442:	9c 01       	movw	r18, r24
    2444:	ad 01       	movw	r20, r26
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <_fpadd_parts+0x1ba>
    2448:	2e 19       	sub	r18, r14
    244a:	3f 09       	sbc	r19, r15
    244c:	40 0b       	sbc	r20, r16
    244e:	51 0b       	sbc	r21, r17
    2450:	57 fd       	sbrc	r21, 7
    2452:	04 c0       	rjmp	.+8      	; 0x245c <_fpadd_parts+0x1c6>
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	ca 82       	std	Y+2, r12	; 0x02
    2458:	db 82       	std	Y+3, r13	; 0x03
    245a:	0b c0       	rjmp	.+22     	; 0x2472 <_fpadd_parts+0x1dc>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	ca 82       	std	Y+2, r12	; 0x02
    2462:	db 82       	std	Y+3, r13	; 0x03
    2464:	50 95       	com	r21
    2466:	40 95       	com	r20
    2468:	30 95       	com	r19
    246a:	21 95       	neg	r18
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	4f 4f       	sbci	r20, 0xFF	; 255
    2470:	5f 4f       	sbci	r21, 0xFF	; 255
    2472:	2c 83       	std	Y+4, r18	; 0x04
    2474:	3d 83       	std	Y+5, r19	; 0x05
    2476:	4e 83       	std	Y+6, r20	; 0x06
    2478:	5f 83       	std	Y+7, r21	; 0x07
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <_fpadd_parts+0x200>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	aa 1f       	adc	r26, r26
    2482:	bb 1f       	adc	r27, r27
    2484:	8c 83       	std	Y+4, r24	; 0x04
    2486:	9d 83       	std	Y+5, r25	; 0x05
    2488:	ae 83       	std	Y+6, r26	; 0x06
    248a:	bf 83       	std	Y+7, r27	; 0x07
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	8a 83       	std	Y+2, r24	; 0x02
    2494:	9b 83       	std	Y+3, r25	; 0x03
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	ae 81       	ldd	r26, Y+6	; 0x06
    249c:	bf 81       	ldd	r27, Y+7	; 0x07
    249e:	9c 01       	movw	r18, r24
    24a0:	ad 01       	movw	r20, r26
    24a2:	21 50       	subi	r18, 0x01	; 1
    24a4:	30 40       	sbci	r19, 0x00	; 0
    24a6:	40 40       	sbci	r20, 0x00	; 0
    24a8:	50 40       	sbci	r21, 0x00	; 0
    24aa:	2f 3f       	cpi	r18, 0xFF	; 255
    24ac:	ef ef       	ldi	r30, 0xFF	; 255
    24ae:	3e 07       	cpc	r19, r30
    24b0:	ef ef       	ldi	r30, 0xFF	; 255
    24b2:	4e 07       	cpc	r20, r30
    24b4:	ef e3       	ldi	r30, 0x3F	; 63
    24b6:	5e 07       	cpc	r21, r30
    24b8:	08 f3       	brcs	.-62     	; 0x247c <_fpadd_parts+0x1e6>
    24ba:	0b c0       	rjmp	.+22     	; 0x24d2 <_fpadd_parts+0x23c>
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	ca 82       	std	Y+2, r12	; 0x02
    24c0:	db 82       	std	Y+3, r13	; 0x03
    24c2:	2e 0d       	add	r18, r14
    24c4:	3f 1d       	adc	r19, r15
    24c6:	40 1f       	adc	r20, r16
    24c8:	51 1f       	adc	r21, r17
    24ca:	2c 83       	std	Y+4, r18	; 0x04
    24cc:	3d 83       	std	Y+5, r19	; 0x05
    24ce:	4e 83       	std	Y+6, r20	; 0x06
    24d0:	5f 83       	std	Y+7, r21	; 0x07
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	88 83       	st	Y, r24
    24d6:	2c 81       	ldd	r18, Y+4	; 0x04
    24d8:	3d 81       	ldd	r19, Y+5	; 0x05
    24da:	4e 81       	ldd	r20, Y+6	; 0x06
    24dc:	5f 81       	ldd	r21, Y+7	; 0x07
    24de:	57 ff       	sbrs	r21, 7
    24e0:	1d c0       	rjmp	.+58     	; 0x251c <_fpadd_parts+0x286>
    24e2:	da 01       	movw	r26, r20
    24e4:	c9 01       	movw	r24, r18
    24e6:	81 70       	andi	r24, 0x01	; 1
    24e8:	90 70       	andi	r25, 0x00	; 0
    24ea:	a0 70       	andi	r26, 0x00	; 0
    24ec:	b0 70       	andi	r27, 0x00	; 0
    24ee:	56 95       	lsr	r21
    24f0:	47 95       	ror	r20
    24f2:	37 95       	ror	r19
    24f4:	27 95       	ror	r18
    24f6:	82 2b       	or	r24, r18
    24f8:	93 2b       	or	r25, r19
    24fa:	a4 2b       	or	r26, r20
    24fc:	b5 2b       	or	r27, r21
    24fe:	8c 83       	std	Y+4, r24	; 0x04
    2500:	9d 83       	std	Y+5, r25	; 0x05
    2502:	ae 83       	std	Y+6, r26	; 0x06
    2504:	bf 83       	std	Y+7, r27	; 0x07
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	9b 83       	std	Y+3, r25	; 0x03
    2510:	05 c0       	rjmp	.+10     	; 0x251c <_fpadd_parts+0x286>
    2512:	ef e2       	ldi	r30, 0x2F	; 47
    2514:	f0 e2       	ldi	r31, 0x20	; 32
    2516:	03 c0       	rjmp	.+6      	; 0x251e <_fpadd_parts+0x288>
    2518:	fb 01       	movw	r30, r22
    251a:	01 c0       	rjmp	.+2      	; 0x251e <_fpadd_parts+0x288>
    251c:	fe 01       	movw	r30, r28
    251e:	cf 01       	movw	r24, r30
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	ee e0       	ldi	r30, 0x0E	; 14
    2526:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__+0x8>

0000252a <__addsf3>:
    252a:	a0 e2       	ldi	r26, 0x20	; 32
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e9       	ldi	r30, 0x9B	; 155
    2530:	f2 e1       	ldi	r31, 0x12	; 18
    2532:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    2536:	69 83       	std	Y+1, r22	; 0x01
    2538:	7a 83       	std	Y+2, r23	; 0x02
    253a:	8b 83       	std	Y+3, r24	; 0x03
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	2d 83       	std	Y+5, r18	; 0x05
    2540:	3e 83       	std	Y+6, r19	; 0x06
    2542:	4f 83       	std	Y+7, r20	; 0x07
    2544:	58 87       	std	Y+8, r21	; 0x08
    2546:	89 e0       	ldi	r24, 0x09	; 9
    2548:	e8 2e       	mov	r14, r24
    254a:	f1 2c       	mov	r15, r1
    254c:	ec 0e       	add	r14, r28
    254e:	fd 1e       	adc	r15, r29
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	b7 01       	movw	r22, r14
    2556:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    255a:	8e 01       	movw	r16, r28
    255c:	0f 5e       	subi	r16, 0xEF	; 239
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	ce 01       	movw	r24, r28
    2562:	05 96       	adiw	r24, 0x05	; 5
    2564:	b8 01       	movw	r22, r16
    2566:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    256a:	c7 01       	movw	r24, r14
    256c:	b8 01       	movw	r22, r16
    256e:	ae 01       	movw	r20, r28
    2570:	47 5e       	subi	r20, 0xE7	; 231
    2572:	5f 4f       	sbci	r21, 0xFF	; 255
    2574:	0e 94 4b 11 	call	0x2296	; 0x2296 <_fpadd_parts>
    2578:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__pack_f>
    257c:	a0 96       	adiw	r28, 0x20	; 32
    257e:	e6 e0       	ldi	r30, 0x06	; 6
    2580:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

00002584 <__subsf3>:
    2584:	a0 e2       	ldi	r26, 0x20	; 32
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e8 ec       	ldi	r30, 0xC8	; 200
    258a:	f2 e1       	ldi	r31, 0x12	; 18
    258c:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    2590:	69 83       	std	Y+1, r22	; 0x01
    2592:	7a 83       	std	Y+2, r23	; 0x02
    2594:	8b 83       	std	Y+3, r24	; 0x03
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	2d 83       	std	Y+5, r18	; 0x05
    259a:	3e 83       	std	Y+6, r19	; 0x06
    259c:	4f 83       	std	Y+7, r20	; 0x07
    259e:	58 87       	std	Y+8, r21	; 0x08
    25a0:	8e 01       	movw	r16, r28
    25a2:	07 5f       	subi	r16, 0xF7	; 247
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	ce 01       	movw	r24, r28
    25a8:	01 96       	adiw	r24, 0x01	; 1
    25aa:	b8 01       	movw	r22, r16
    25ac:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    25b0:	91 e1       	ldi	r25, 0x11	; 17
    25b2:	e9 2e       	mov	r14, r25
    25b4:	f1 2c       	mov	r15, r1
    25b6:	ec 0e       	add	r14, r28
    25b8:	fd 1e       	adc	r15, r29
    25ba:	ce 01       	movw	r24, r28
    25bc:	05 96       	adiw	r24, 0x05	; 5
    25be:	b7 01       	movw	r22, r14
    25c0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    25c4:	8a 89       	ldd	r24, Y+18	; 0x12
    25c6:	91 e0       	ldi	r25, 0x01	; 1
    25c8:	89 27       	eor	r24, r25
    25ca:	8a 8b       	std	Y+18, r24	; 0x12
    25cc:	c8 01       	movw	r24, r16
    25ce:	b7 01       	movw	r22, r14
    25d0:	ae 01       	movw	r20, r28
    25d2:	47 5e       	subi	r20, 0xE7	; 231
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255
    25d6:	0e 94 4b 11 	call	0x2296	; 0x2296 <_fpadd_parts>
    25da:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__pack_f>
    25de:	a0 96       	adiw	r28, 0x20	; 32
    25e0:	e6 e0       	ldi	r30, 0x06	; 6
    25e2:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

000025e6 <__mulsf3>:
    25e6:	a0 e2       	ldi	r26, 0x20	; 32
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e9 ef       	ldi	r30, 0xF9	; 249
    25ec:	f2 e1       	ldi	r31, 0x12	; 18
    25ee:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__>
    25f2:	69 83       	std	Y+1, r22	; 0x01
    25f4:	7a 83       	std	Y+2, r23	; 0x02
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	2d 83       	std	Y+5, r18	; 0x05
    25fc:	3e 83       	std	Y+6, r19	; 0x06
    25fe:	4f 83       	std	Y+7, r20	; 0x07
    2600:	58 87       	std	Y+8, r21	; 0x08
    2602:	ce 01       	movw	r24, r28
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	be 01       	movw	r22, r28
    2608:	67 5f       	subi	r22, 0xF7	; 247
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2610:	ce 01       	movw	r24, r28
    2612:	05 96       	adiw	r24, 0x05	; 5
    2614:	be 01       	movw	r22, r28
    2616:	6f 5e       	subi	r22, 0xEF	; 239
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    261e:	99 85       	ldd	r25, Y+9	; 0x09
    2620:	92 30       	cpi	r25, 0x02	; 2
    2622:	78 f0       	brcs	.+30     	; 0x2642 <__mulsf3+0x5c>
    2624:	89 89       	ldd	r24, Y+17	; 0x11
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	c0 f0       	brcs	.+48     	; 0x265a <__mulsf3+0x74>
    262a:	94 30       	cpi	r25, 0x04	; 4
    262c:	19 f4       	brne	.+6      	; 0x2634 <__mulsf3+0x4e>
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	41 f4       	brne	.+16     	; 0x2642 <__mulsf3+0x5c>
    2632:	cb c0       	rjmp	.+406    	; 0x27ca <__mulsf3+0x1e4>
    2634:	84 30       	cpi	r24, 0x04	; 4
    2636:	19 f4       	brne	.+6      	; 0x263e <__mulsf3+0x58>
    2638:	92 30       	cpi	r25, 0x02	; 2
    263a:	79 f4       	brne	.+30     	; 0x265a <__mulsf3+0x74>
    263c:	c6 c0       	rjmp	.+396    	; 0x27ca <__mulsf3+0x1e4>
    263e:	92 30       	cpi	r25, 0x02	; 2
    2640:	51 f4       	brne	.+20     	; 0x2656 <__mulsf3+0x70>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	2a 85       	ldd	r18, Y+10	; 0x0a
    2646:	9a 89       	ldd	r25, Y+18	; 0x12
    2648:	29 17       	cp	r18, r25
    264a:	09 f4       	brne	.+2      	; 0x264e <__mulsf3+0x68>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	8a 87       	std	Y+10, r24	; 0x0a
    2650:	ce 01       	movw	r24, r28
    2652:	09 96       	adiw	r24, 0x09	; 9
    2654:	bc c0       	rjmp	.+376    	; 0x27ce <__mulsf3+0x1e8>
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	51 f4       	brne	.+20     	; 0x266e <__mulsf3+0x88>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	2a 85       	ldd	r18, Y+10	; 0x0a
    265e:	9a 89       	ldd	r25, Y+18	; 0x12
    2660:	29 17       	cp	r18, r25
    2662:	09 f4       	brne	.+2      	; 0x2666 <__mulsf3+0x80>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	8a 8b       	std	Y+18, r24	; 0x12
    2668:	ce 01       	movw	r24, r28
    266a:	41 96       	adiw	r24, 0x11	; 17
    266c:	b0 c0       	rjmp	.+352    	; 0x27ce <__mulsf3+0x1e8>
    266e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2670:	7e 84       	ldd	r7, Y+14	; 0x0e
    2672:	8f 84       	ldd	r8, Y+15	; 0x0f
    2674:	98 88       	ldd	r9, Y+16	; 0x10
    2676:	ed 88       	ldd	r14, Y+21	; 0x15
    2678:	fe 88       	ldd	r15, Y+22	; 0x16
    267a:	0f 89       	ldd	r16, Y+23	; 0x17
    267c:	18 8d       	ldd	r17, Y+24	; 0x18
    267e:	e0 e2       	ldi	r30, 0x20	; 32
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	dc 01       	movw	r26, r24
    2688:	aa 24       	eor	r10, r10
    268a:	bb 24       	eor	r11, r11
    268c:	65 01       	movw	r12, r10
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	a9 01       	movw	r20, r18
    2694:	b3 01       	movw	r22, r6
    2696:	61 70       	andi	r22, 0x01	; 1
    2698:	70 70       	andi	r23, 0x00	; 0
    269a:	61 15       	cp	r22, r1
    269c:	71 05       	cpc	r23, r1
    269e:	d1 f0       	breq	.+52     	; 0x26d4 <__mulsf3+0xee>
    26a0:	2e 0d       	add	r18, r14
    26a2:	3f 1d       	adc	r19, r15
    26a4:	40 1f       	adc	r20, r16
    26a6:	51 1f       	adc	r21, r17
    26a8:	15 01       	movw	r2, r10
    26aa:	26 01       	movw	r4, r12
    26ac:	28 0e       	add	r2, r24
    26ae:	39 1e       	adc	r3, r25
    26b0:	4a 1e       	adc	r4, r26
    26b2:	5b 1e       	adc	r5, r27
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	2e 15       	cp	r18, r14
    26be:	3f 05       	cpc	r19, r15
    26c0:	40 07       	cpc	r20, r16
    26c2:	51 07       	cpc	r21, r17
    26c4:	18 f0       	brcs	.+6      	; 0x26cc <__mulsf3+0xe6>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	dc 01       	movw	r26, r24
    26cc:	82 0d       	add	r24, r2
    26ce:	93 1d       	adc	r25, r3
    26d0:	a4 1d       	adc	r26, r4
    26d2:	b5 1d       	adc	r27, r5
    26d4:	aa 0c       	add	r10, r10
    26d6:	bb 1c       	adc	r11, r11
    26d8:	cc 1c       	adc	r12, r12
    26da:	dd 1c       	adc	r13, r13
    26dc:	17 ff       	sbrs	r17, 7
    26de:	09 c0       	rjmp	.+18     	; 0x26f2 <__mulsf3+0x10c>
    26e0:	61 e0       	ldi	r22, 0x01	; 1
    26e2:	26 2e       	mov	r2, r22
    26e4:	31 2c       	mov	r3, r1
    26e6:	41 2c       	mov	r4, r1
    26e8:	51 2c       	mov	r5, r1
    26ea:	a2 28       	or	r10, r2
    26ec:	b3 28       	or	r11, r3
    26ee:	c4 28       	or	r12, r4
    26f0:	d5 28       	or	r13, r5
    26f2:	31 97       	sbiw	r30, 0x01	; 1
    26f4:	49 f0       	breq	.+18     	; 0x2708 <__mulsf3+0x122>
    26f6:	ee 0c       	add	r14, r14
    26f8:	ff 1c       	adc	r15, r15
    26fa:	00 1f       	adc	r16, r16
    26fc:	11 1f       	adc	r17, r17
    26fe:	96 94       	lsr	r9
    2700:	87 94       	ror	r8
    2702:	77 94       	ror	r7
    2704:	67 94       	ror	r6
    2706:	c6 cf       	rjmp	.-116    	; 0x2694 <__mulsf3+0xae>
    2708:	6b 89       	ldd	r22, Y+19	; 0x13
    270a:	7c 89       	ldd	r23, Y+20	; 0x14
    270c:	eb 85       	ldd	r30, Y+11	; 0x0b
    270e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2710:	6e 0f       	add	r22, r30
    2712:	7f 1f       	adc	r23, r31
    2714:	6e 5f       	subi	r22, 0xFE	; 254
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	6b 8f       	std	Y+27, r22	; 0x1b
    271a:	7c 8f       	std	Y+28, r23	; 0x1c
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2720:	7a 89       	ldd	r23, Y+18	; 0x12
    2722:	e7 17       	cp	r30, r23
    2724:	09 f4       	brne	.+2      	; 0x2728 <__mulsf3+0x142>
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	6a 8f       	std	Y+26, r22	; 0x1a
    272a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    272c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    272e:	10 c0       	rjmp	.+32     	; 0x2750 <__mulsf3+0x16a>
    2730:	fc 01       	movw	r30, r24
    2732:	e1 70       	andi	r30, 0x01	; 1
    2734:	f0 70       	andi	r31, 0x00	; 0
    2736:	30 97       	sbiw	r30, 0x00	; 0
    2738:	29 f0       	breq	.+10     	; 0x2744 <__mulsf3+0x15e>
    273a:	56 95       	lsr	r21
    273c:	47 95       	ror	r20
    273e:	37 95       	ror	r19
    2740:	27 95       	ror	r18
    2742:	50 68       	ori	r21, 0x80	; 128
    2744:	b6 95       	lsr	r27
    2746:	a7 95       	ror	r26
    2748:	97 95       	ror	r25
    274a:	87 95       	ror	r24
    274c:	6f 5f       	subi	r22, 0xFF	; 255
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	b7 fd       	sbrc	r27, 7
    2752:	ee cf       	rjmp	.-36     	; 0x2730 <__mulsf3+0x14a>
    2754:	0c c0       	rjmp	.+24     	; 0x276e <__mulsf3+0x188>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	aa 1f       	adc	r26, r26
    275c:	bb 1f       	adc	r27, r27
    275e:	57 fd       	sbrc	r21, 7
    2760:	81 60       	ori	r24, 0x01	; 1
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	44 1f       	adc	r20, r20
    2768:	55 1f       	adc	r21, r21
    276a:	61 50       	subi	r22, 0x01	; 1
    276c:	70 40       	sbci	r23, 0x00	; 0
    276e:	80 30       	cpi	r24, 0x00	; 0
    2770:	e0 e0       	ldi	r30, 0x00	; 0
    2772:	9e 07       	cpc	r25, r30
    2774:	e0 e0       	ldi	r30, 0x00	; 0
    2776:	ae 07       	cpc	r26, r30
    2778:	e0 e4       	ldi	r30, 0x40	; 64
    277a:	be 07       	cpc	r27, r30
    277c:	60 f3       	brcs	.-40     	; 0x2756 <__mulsf3+0x170>
    277e:	6b 8f       	std	Y+27, r22	; 0x1b
    2780:	7c 8f       	std	Y+28, r23	; 0x1c
    2782:	6f e7       	ldi	r22, 0x7F	; 127
    2784:	e6 2e       	mov	r14, r22
    2786:	f1 2c       	mov	r15, r1
    2788:	01 2d       	mov	r16, r1
    278a:	11 2d       	mov	r17, r1
    278c:	e8 22       	and	r14, r24
    278e:	f9 22       	and	r15, r25
    2790:	0a 23       	and	r16, r26
    2792:	1b 23       	and	r17, r27
    2794:	60 e4       	ldi	r22, 0x40	; 64
    2796:	e6 16       	cp	r14, r22
    2798:	f1 04       	cpc	r15, r1
    279a:	01 05       	cpc	r16, r1
    279c:	11 05       	cpc	r17, r1
    279e:	61 f4       	brne	.+24     	; 0x27b8 <__mulsf3+0x1d2>
    27a0:	87 fd       	sbrc	r24, 7
    27a2:	0a c0       	rjmp	.+20     	; 0x27b8 <__mulsf3+0x1d2>
    27a4:	21 15       	cp	r18, r1
    27a6:	31 05       	cpc	r19, r1
    27a8:	41 05       	cpc	r20, r1
    27aa:	51 05       	cpc	r21, r1
    27ac:	29 f0       	breq	.+10     	; 0x27b8 <__mulsf3+0x1d2>
    27ae:	80 5c       	subi	r24, 0xC0	; 192
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	af 4f       	sbci	r26, 0xFF	; 255
    27b4:	bf 4f       	sbci	r27, 0xFF	; 255
    27b6:	80 78       	andi	r24, 0x80	; 128
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	9e 8f       	std	Y+30, r25	; 0x1e
    27bc:	af 8f       	std	Y+31, r26	; 0x1f
    27be:	b8 a3       	std	Y+32, r27	; 0x20
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	89 8f       	std	Y+25, r24	; 0x19
    27c4:	ce 01       	movw	r24, r28
    27c6:	49 96       	adiw	r24, 0x19	; 25
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <__mulsf3+0x1e8>
    27ca:	8f e2       	ldi	r24, 0x2F	; 47
    27cc:	90 e2       	ldi	r25, 0x20	; 32
    27ce:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__pack_f>
    27d2:	a0 96       	adiw	r28, 0x20	; 32
    27d4:	e2 e1       	ldi	r30, 0x12	; 18
    27d6:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__>

000027da <__divsf3>:
    27da:	a8 e1       	ldi	r26, 0x18	; 24
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e3 ef       	ldi	r30, 0xF3	; 243
    27e0:	f3 e1       	ldi	r31, 0x13	; 19
    27e2:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x10>
    27e6:	69 83       	std	Y+1, r22	; 0x01
    27e8:	7a 83       	std	Y+2, r23	; 0x02
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	2d 83       	std	Y+5, r18	; 0x05
    27f0:	3e 83       	std	Y+6, r19	; 0x06
    27f2:	4f 83       	std	Y+7, r20	; 0x07
    27f4:	58 87       	std	Y+8, r21	; 0x08
    27f6:	8e 01       	movw	r16, r28
    27f8:	07 5f       	subi	r16, 0xF7	; 247
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	b8 01       	movw	r22, r16
    2802:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2806:	81 e1       	ldi	r24, 0x11	; 17
    2808:	e8 2e       	mov	r14, r24
    280a:	f1 2c       	mov	r15, r1
    280c:	ec 0e       	add	r14, r28
    280e:	fd 1e       	adc	r15, r29
    2810:	ce 01       	movw	r24, r28
    2812:	05 96       	adiw	r24, 0x05	; 5
    2814:	b7 01       	movw	r22, r14
    2816:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    281a:	99 85       	ldd	r25, Y+9	; 0x09
    281c:	92 30       	cpi	r25, 0x02	; 2
    281e:	08 f4       	brcc	.+2      	; 0x2822 <__stack+0x23>
    2820:	83 c0       	rjmp	.+262    	; 0x2928 <__stack+0x129>
    2822:	89 89       	ldd	r24, Y+17	; 0x11
    2824:	82 30       	cpi	r24, 0x02	; 2
    2826:	08 f4       	brcc	.+2      	; 0x282a <__stack+0x2b>
    2828:	7b c0       	rjmp	.+246    	; 0x2920 <__stack+0x121>
    282a:	2a 85       	ldd	r18, Y+10	; 0x0a
    282c:	3a 89       	ldd	r19, Y+18	; 0x12
    282e:	23 27       	eor	r18, r19
    2830:	2a 87       	std	Y+10, r18	; 0x0a
    2832:	94 30       	cpi	r25, 0x04	; 4
    2834:	11 f0       	breq	.+4      	; 0x283a <__stack+0x3b>
    2836:	92 30       	cpi	r25, 0x02	; 2
    2838:	21 f4       	brne	.+8      	; 0x2842 <__stack+0x43>
    283a:	98 17       	cp	r25, r24
    283c:	09 f0       	breq	.+2      	; 0x2840 <__stack+0x41>
    283e:	6c c0       	rjmp	.+216    	; 0x2918 <__stack+0x119>
    2840:	71 c0       	rjmp	.+226    	; 0x2924 <__stack+0x125>
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	39 f4       	brne	.+14     	; 0x2854 <__stack+0x55>
    2846:	1d 86       	std	Y+13, r1	; 0x0d
    2848:	1e 86       	std	Y+14, r1	; 0x0e
    284a:	1f 86       	std	Y+15, r1	; 0x0f
    284c:	18 8a       	std	Y+16, r1	; 0x10
    284e:	1b 86       	std	Y+11, r1	; 0x0b
    2850:	1c 86       	std	Y+12, r1	; 0x0c
    2852:	6a c0       	rjmp	.+212    	; 0x2928 <__stack+0x129>
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	19 f4       	brne	.+6      	; 0x285e <__stack+0x5f>
    2858:	84 e0       	ldi	r24, 0x04	; 4
    285a:	89 87       	std	Y+9, r24	; 0x09
    285c:	65 c0       	rjmp	.+202    	; 0x2928 <__stack+0x129>
    285e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2860:	9c 85       	ldd	r25, Y+12	; 0x0c
    2862:	2b 89       	ldd	r18, Y+19	; 0x13
    2864:	3c 89       	ldd	r19, Y+20	; 0x14
    2866:	82 1b       	sub	r24, r18
    2868:	93 0b       	sbc	r25, r19
    286a:	8b 87       	std	Y+11, r24	; 0x0b
    286c:	9c 87       	std	Y+12, r25	; 0x0c
    286e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2870:	3e 85       	ldd	r19, Y+14	; 0x0e
    2872:	4f 85       	ldd	r20, Y+15	; 0x0f
    2874:	58 89       	ldd	r21, Y+16	; 0x10
    2876:	ed 88       	ldd	r14, Y+21	; 0x15
    2878:	fe 88       	ldd	r15, Y+22	; 0x16
    287a:	0f 89       	ldd	r16, Y+23	; 0x17
    287c:	18 8d       	ldd	r17, Y+24	; 0x18
    287e:	2e 15       	cp	r18, r14
    2880:	3f 05       	cpc	r19, r15
    2882:	40 07       	cpc	r20, r16
    2884:	51 07       	cpc	r21, r17
    2886:	38 f4       	brcc	.+14     	; 0x2896 <__stack+0x97>
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	44 1f       	adc	r20, r20
    288e:	55 1f       	adc	r21, r21
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	8b 87       	std	Y+11, r24	; 0x0b
    2894:	9c 87       	std	Y+12, r25	; 0x0c
    2896:	6f e1       	ldi	r22, 0x1F	; 31
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	a1 2c       	mov	r10, r1
    289c:	b1 2c       	mov	r11, r1
    289e:	c1 2c       	mov	r12, r1
    28a0:	a0 e4       	ldi	r26, 0x40	; 64
    28a2:	da 2e       	mov	r13, r26
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	dc 01       	movw	r26, r24
    28aa:	2e 15       	cp	r18, r14
    28ac:	3f 05       	cpc	r19, r15
    28ae:	40 07       	cpc	r20, r16
    28b0:	51 07       	cpc	r21, r17
    28b2:	40 f0       	brcs	.+16     	; 0x28c4 <__stack+0xc5>
    28b4:	8a 29       	or	r24, r10
    28b6:	9b 29       	or	r25, r11
    28b8:	ac 29       	or	r26, r12
    28ba:	bd 29       	or	r27, r13
    28bc:	2e 19       	sub	r18, r14
    28be:	3f 09       	sbc	r19, r15
    28c0:	40 0b       	sbc	r20, r16
    28c2:	51 0b       	sbc	r21, r17
    28c4:	d6 94       	lsr	r13
    28c6:	c7 94       	ror	r12
    28c8:	b7 94       	ror	r11
    28ca:	a7 94       	ror	r10
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	44 1f       	adc	r20, r20
    28d2:	55 1f       	adc	r21, r21
    28d4:	61 50       	subi	r22, 0x01	; 1
    28d6:	70 40       	sbci	r23, 0x00	; 0
    28d8:	41 f7       	brne	.-48     	; 0x28aa <__stack+0xab>
    28da:	6f e7       	ldi	r22, 0x7F	; 127
    28dc:	e6 2e       	mov	r14, r22
    28de:	f1 2c       	mov	r15, r1
    28e0:	01 2d       	mov	r16, r1
    28e2:	11 2d       	mov	r17, r1
    28e4:	e8 22       	and	r14, r24
    28e6:	f9 22       	and	r15, r25
    28e8:	0a 23       	and	r16, r26
    28ea:	1b 23       	and	r17, r27
    28ec:	60 e4       	ldi	r22, 0x40	; 64
    28ee:	e6 16       	cp	r14, r22
    28f0:	f1 04       	cpc	r15, r1
    28f2:	01 05       	cpc	r16, r1
    28f4:	11 05       	cpc	r17, r1
    28f6:	61 f4       	brne	.+24     	; 0x2910 <__stack+0x111>
    28f8:	87 fd       	sbrc	r24, 7
    28fa:	0a c0       	rjmp	.+20     	; 0x2910 <__stack+0x111>
    28fc:	21 15       	cp	r18, r1
    28fe:	31 05       	cpc	r19, r1
    2900:	41 05       	cpc	r20, r1
    2902:	51 05       	cpc	r21, r1
    2904:	29 f0       	breq	.+10     	; 0x2910 <__stack+0x111>
    2906:	80 5c       	subi	r24, 0xC0	; 192
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	af 4f       	sbci	r26, 0xFF	; 255
    290c:	bf 4f       	sbci	r27, 0xFF	; 255
    290e:	80 78       	andi	r24, 0x80	; 128
    2910:	8d 87       	std	Y+13, r24	; 0x0d
    2912:	9e 87       	std	Y+14, r25	; 0x0e
    2914:	af 87       	std	Y+15, r26	; 0x0f
    2916:	b8 8b       	std	Y+16, r27	; 0x10
    2918:	8e 01       	movw	r16, r28
    291a:	07 5f       	subi	r16, 0xF7	; 247
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <__stack+0x129>
    2920:	87 01       	movw	r16, r14
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <__stack+0x129>
    2924:	0f e2       	ldi	r16, 0x2F	; 47
    2926:	10 e2       	ldi	r17, 0x20	; 32
    2928:	c8 01       	movw	r24, r16
    292a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__pack_f>
    292e:	68 96       	adiw	r28, 0x18	; 24
    2930:	ea e0       	ldi	r30, 0x0A	; 10
    2932:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__epilogue_restores__+0x10>

00002936 <__eqsf2>:
    2936:	a8 e1       	ldi	r26, 0x18	; 24
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e1 ea       	ldi	r30, 0xA1	; 161
    293c:	f4 e1       	ldi	r31, 0x14	; 20
    293e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    2942:	69 83       	std	Y+1, r22	; 0x01
    2944:	7a 83       	std	Y+2, r23	; 0x02
    2946:	8b 83       	std	Y+3, r24	; 0x03
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	2d 83       	std	Y+5, r18	; 0x05
    294c:	3e 83       	std	Y+6, r19	; 0x06
    294e:	4f 83       	std	Y+7, r20	; 0x07
    2950:	58 87       	std	Y+8, r21	; 0x08
    2952:	8e 01       	movw	r16, r28
    2954:	07 5f       	subi	r16, 0xF7	; 247
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	b8 01       	movw	r22, r16
    295e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2962:	81 e1       	ldi	r24, 0x11	; 17
    2964:	e8 2e       	mov	r14, r24
    2966:	f1 2c       	mov	r15, r1
    2968:	ec 0e       	add	r14, r28
    296a:	fd 1e       	adc	r15, r29
    296c:	ce 01       	movw	r24, r28
    296e:	05 96       	adiw	r24, 0x05	; 5
    2970:	b7 01       	movw	r22, r14
    2972:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	40 f0       	brcs	.+16     	; 0x298c <__eqsf2+0x56>
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	28 f0       	brcs	.+10     	; 0x298c <__eqsf2+0x56>
    2982:	c8 01       	movw	r24, r16
    2984:	b7 01       	movw	r22, r14
    2986:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__fpcmp_parts_f>
    298a:	01 c0       	rjmp	.+2      	; 0x298e <__eqsf2+0x58>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	68 96       	adiw	r28, 0x18	; 24
    2990:	e6 e0       	ldi	r30, 0x06	; 6
    2992:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

00002996 <__gtsf2>:
    2996:	a8 e1       	ldi	r26, 0x18	; 24
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e1 ed       	ldi	r30, 0xD1	; 209
    299c:	f4 e1       	ldi	r31, 0x14	; 20
    299e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    29a2:	69 83       	std	Y+1, r22	; 0x01
    29a4:	7a 83       	std	Y+2, r23	; 0x02
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	2d 83       	std	Y+5, r18	; 0x05
    29ac:	3e 83       	std	Y+6, r19	; 0x06
    29ae:	4f 83       	std	Y+7, r20	; 0x07
    29b0:	58 87       	std	Y+8, r21	; 0x08
    29b2:	8e 01       	movw	r16, r28
    29b4:	07 5f       	subi	r16, 0xF7	; 247
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	b8 01       	movw	r22, r16
    29be:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    29c2:	81 e1       	ldi	r24, 0x11	; 17
    29c4:	e8 2e       	mov	r14, r24
    29c6:	f1 2c       	mov	r15, r1
    29c8:	ec 0e       	add	r14, r28
    29ca:	fd 1e       	adc	r15, r29
    29cc:	ce 01       	movw	r24, r28
    29ce:	05 96       	adiw	r24, 0x05	; 5
    29d0:	b7 01       	movw	r22, r14
    29d2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	40 f0       	brcs	.+16     	; 0x29ec <__gtsf2+0x56>
    29dc:	89 89       	ldd	r24, Y+17	; 0x11
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	28 f0       	brcs	.+10     	; 0x29ec <__gtsf2+0x56>
    29e2:	c8 01       	movw	r24, r16
    29e4:	b7 01       	movw	r22, r14
    29e6:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__fpcmp_parts_f>
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <__gtsf2+0x58>
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	68 96       	adiw	r28, 0x18	; 24
    29f0:	e6 e0       	ldi	r30, 0x06	; 6
    29f2:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

000029f6 <__gesf2>:
    29f6:	a8 e1       	ldi	r26, 0x18	; 24
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e0       	ldi	r30, 0x01	; 1
    29fc:	f5 e1       	ldi	r31, 0x15	; 21
    29fe:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    2a02:	69 83       	std	Y+1, r22	; 0x01
    2a04:	7a 83       	std	Y+2, r23	; 0x02
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	2d 83       	std	Y+5, r18	; 0x05
    2a0c:	3e 83       	std	Y+6, r19	; 0x06
    2a0e:	4f 83       	std	Y+7, r20	; 0x07
    2a10:	58 87       	std	Y+8, r21	; 0x08
    2a12:	8e 01       	movw	r16, r28
    2a14:	07 5f       	subi	r16, 0xF7	; 247
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	ce 01       	movw	r24, r28
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	b8 01       	movw	r22, r16
    2a1e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2a22:	81 e1       	ldi	r24, 0x11	; 17
    2a24:	e8 2e       	mov	r14, r24
    2a26:	f1 2c       	mov	r15, r1
    2a28:	ec 0e       	add	r14, r28
    2a2a:	fd 1e       	adc	r15, r29
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	05 96       	adiw	r24, 0x05	; 5
    2a30:	b7 01       	movw	r22, r14
    2a32:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	82 30       	cpi	r24, 0x02	; 2
    2a3a:	40 f0       	brcs	.+16     	; 0x2a4c <__gesf2+0x56>
    2a3c:	89 89       	ldd	r24, Y+17	; 0x11
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	28 f0       	brcs	.+10     	; 0x2a4c <__gesf2+0x56>
    2a42:	c8 01       	movw	r24, r16
    2a44:	b7 01       	movw	r22, r14
    2a46:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__fpcmp_parts_f>
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <__gesf2+0x58>
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	68 96       	adiw	r28, 0x18	; 24
    2a50:	e6 e0       	ldi	r30, 0x06	; 6
    2a52:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

00002a56 <__ltsf2>:
    2a56:	a8 e1       	ldi	r26, 0x18	; 24
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e1 e3       	ldi	r30, 0x31	; 49
    2a5c:	f5 e1       	ldi	r31, 0x15	; 21
    2a5e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x18>
    2a62:	69 83       	std	Y+1, r22	; 0x01
    2a64:	7a 83       	std	Y+2, r23	; 0x02
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	2d 83       	std	Y+5, r18	; 0x05
    2a6c:	3e 83       	std	Y+6, r19	; 0x06
    2a6e:	4f 83       	std	Y+7, r20	; 0x07
    2a70:	58 87       	std	Y+8, r21	; 0x08
    2a72:	8e 01       	movw	r16, r28
    2a74:	07 5f       	subi	r16, 0xF7	; 247
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	ce 01       	movw	r24, r28
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	b8 01       	movw	r22, r16
    2a7e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2a82:	81 e1       	ldi	r24, 0x11	; 17
    2a84:	e8 2e       	mov	r14, r24
    2a86:	f1 2c       	mov	r15, r1
    2a88:	ec 0e       	add	r14, r28
    2a8a:	fd 1e       	adc	r15, r29
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	05 96       	adiw	r24, 0x05	; 5
    2a90:	b7 01       	movw	r22, r14
    2a92:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	40 f0       	brcs	.+16     	; 0x2aac <__ltsf2+0x56>
    2a9c:	89 89       	ldd	r24, Y+17	; 0x11
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	28 f0       	brcs	.+10     	; 0x2aac <__ltsf2+0x56>
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	b7 01       	movw	r22, r14
    2aa6:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__fpcmp_parts_f>
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <__ltsf2+0x58>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	68 96       	adiw	r28, 0x18	; 24
    2ab0:	e6 e0       	ldi	r30, 0x06	; 6
    2ab2:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

00002ab6 <__fixsfsi>:
    2ab6:	ac e0       	ldi	r26, 0x0C	; 12
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e1 e6       	ldi	r30, 0x61	; 97
    2abc:	f5 e1       	ldi	r31, 0x15	; 21
    2abe:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x20>
    2ac2:	69 83       	std	Y+1, r22	; 0x01
    2ac4:	7a 83       	std	Y+2, r23	; 0x02
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	ce 01       	movw	r24, r28
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	be 01       	movw	r22, r28
    2ad0:	6b 5f       	subi	r22, 0xFB	; 251
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__unpack_f>
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	81 f1       	breq	.+96     	; 0x2b3e <__fixsfsi+0x88>
    2ade:	82 30       	cpi	r24, 0x02	; 2
    2ae0:	70 f1       	brcs	.+92     	; 0x2b3e <__fixsfsi+0x88>
    2ae2:	84 30       	cpi	r24, 0x04	; 4
    2ae4:	21 f4       	brne	.+8      	; 0x2aee <__fixsfsi+0x38>
    2ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae8:	88 23       	and	r24, r24
    2aea:	69 f1       	breq	.+90     	; 0x2b46 <__fixsfsi+0x90>
    2aec:	0a c0       	rjmp	.+20     	; 0x2b02 <__fixsfsi+0x4c>
    2aee:	2f 81       	ldd	r18, Y+7	; 0x07
    2af0:	38 85       	ldd	r19, Y+8	; 0x08
    2af2:	37 fd       	sbrc	r19, 7
    2af4:	24 c0       	rjmp	.+72     	; 0x2b3e <__fixsfsi+0x88>
    2af6:	6e 81       	ldd	r22, Y+6	; 0x06
    2af8:	2f 31       	cpi	r18, 0x1F	; 31
    2afa:	31 05       	cpc	r19, r1
    2afc:	3c f0       	brlt	.+14     	; 0x2b0c <__fixsfsi+0x56>
    2afe:	66 23       	and	r22, r22
    2b00:	11 f1       	breq	.+68     	; 0x2b46 <__fixsfsi+0x90>
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e8       	ldi	r21, 0x80	; 128
    2b0a:	21 c0       	rjmp	.+66     	; 0x2b4e <__fixsfsi+0x98>
    2b0c:	8e e1       	ldi	r24, 0x1E	; 30
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	82 1b       	sub	r24, r18
    2b12:	93 0b       	sbc	r25, r19
    2b14:	29 85       	ldd	r18, Y+9	; 0x09
    2b16:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b18:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b1c:	04 c0       	rjmp	.+8      	; 0x2b26 <__fixsfsi+0x70>
    2b1e:	56 95       	lsr	r21
    2b20:	47 95       	ror	r20
    2b22:	37 95       	ror	r19
    2b24:	27 95       	ror	r18
    2b26:	8a 95       	dec	r24
    2b28:	d2 f7       	brpl	.-12     	; 0x2b1e <__fixsfsi+0x68>
    2b2a:	66 23       	and	r22, r22
    2b2c:	81 f0       	breq	.+32     	; 0x2b4e <__fixsfsi+0x98>
    2b2e:	50 95       	com	r21
    2b30:	40 95       	com	r20
    2b32:	30 95       	com	r19
    2b34:	21 95       	neg	r18
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	4f 4f       	sbci	r20, 0xFF	; 255
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	08 c0       	rjmp	.+16     	; 0x2b4e <__fixsfsi+0x98>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	a9 01       	movw	r20, r18
    2b44:	04 c0       	rjmp	.+8      	; 0x2b4e <__fixsfsi+0x98>
    2b46:	2f ef       	ldi	r18, 0xFF	; 255
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f ef       	ldi	r20, 0xFF	; 255
    2b4c:	5f e7       	ldi	r21, 0x7F	; 127
    2b4e:	b9 01       	movw	r22, r18
    2b50:	ca 01       	movw	r24, r20
    2b52:	2c 96       	adiw	r28, 0x0c	; 12
    2b54:	e2 e0       	ldi	r30, 0x02	; 2
    2b56:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x20>

00002b5a <__floatunsisf>:
    2b5a:	a8 e0       	ldi	r26, 0x08	; 8
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e3 eb       	ldi	r30, 0xB3	; 179
    2b60:	f5 e1       	ldi	r31, 0x15	; 21
    2b62:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__prologue_saves__+0x14>
    2b66:	7b 01       	movw	r14, r22
    2b68:	8c 01       	movw	r16, r24
    2b6a:	1a 82       	std	Y+2, r1	; 0x02
    2b6c:	61 15       	cp	r22, r1
    2b6e:	71 05       	cpc	r23, r1
    2b70:	81 05       	cpc	r24, r1
    2b72:	91 05       	cpc	r25, r1
    2b74:	19 f4       	brne	.+6      	; 0x2b7c <__floatunsisf+0x22>
    2b76:	82 e0       	ldi	r24, 0x02	; 2
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	5f c0       	rjmp	.+190    	; 0x2c3a <__floatunsisf+0xe0>
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	8e e1       	ldi	r24, 0x1E	; 30
    2b82:	c8 2e       	mov	r12, r24
    2b84:	d1 2c       	mov	r13, r1
    2b86:	cb 82       	std	Y+3, r12	; 0x03
    2b88:	dc 82       	std	Y+4, r13	; 0x04
    2b8a:	ed 82       	std	Y+5, r14	; 0x05
    2b8c:	fe 82       	std	Y+6, r15	; 0x06
    2b8e:	0f 83       	std	Y+7, r16	; 0x07
    2b90:	18 87       	std	Y+8, r17	; 0x08
    2b92:	c8 01       	movw	r24, r16
    2b94:	b7 01       	movw	r22, r14
    2b96:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__clzsi2>
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	31 97       	sbiw	r30, 0x01	; 1
    2b9e:	f7 ff       	sbrs	r31, 7
    2ba0:	3a c0       	rjmp	.+116    	; 0x2c16 <__floatunsisf+0xbc>
    2ba2:	aa 27       	eor	r26, r26
    2ba4:	bb 27       	eor	r27, r27
    2ba6:	ae 1b       	sub	r26, r30
    2ba8:	bf 0b       	sbc	r27, r31
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	0a 2e       	mov	r0, r26
    2bb4:	04 c0       	rjmp	.+8      	; 0x2bbe <__floatunsisf+0x64>
    2bb6:	22 0f       	add	r18, r18
    2bb8:	33 1f       	adc	r19, r19
    2bba:	44 1f       	adc	r20, r20
    2bbc:	55 1f       	adc	r21, r21
    2bbe:	0a 94       	dec	r0
    2bc0:	d2 f7       	brpl	.-12     	; 0x2bb6 <__floatunsisf+0x5c>
    2bc2:	21 50       	subi	r18, 0x01	; 1
    2bc4:	30 40       	sbci	r19, 0x00	; 0
    2bc6:	40 40       	sbci	r20, 0x00	; 0
    2bc8:	50 40       	sbci	r21, 0x00	; 0
    2bca:	2e 21       	and	r18, r14
    2bcc:	3f 21       	and	r19, r15
    2bce:	40 23       	and	r20, r16
    2bd0:	51 23       	and	r21, r17
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	21 15       	cp	r18, r1
    2bdc:	31 05       	cpc	r19, r1
    2bde:	41 05       	cpc	r20, r1
    2be0:	51 05       	cpc	r21, r1
    2be2:	19 f4       	brne	.+6      	; 0x2bea <__floatunsisf+0x90>
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	cb 01       	movw	r24, r22
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <__floatunsisf+0x9a>
    2bec:	16 95       	lsr	r17
    2bee:	07 95       	ror	r16
    2bf0:	f7 94       	ror	r15
    2bf2:	e7 94       	ror	r14
    2bf4:	aa 95       	dec	r26
    2bf6:	d2 f7       	brpl	.-12     	; 0x2bec <__floatunsisf+0x92>
    2bf8:	e6 2a       	or	r14, r22
    2bfa:	f7 2a       	or	r15, r23
    2bfc:	08 2b       	or	r16, r24
    2bfe:	19 2b       	or	r17, r25
    2c00:	ed 82       	std	Y+5, r14	; 0x05
    2c02:	fe 82       	std	Y+6, r15	; 0x06
    2c04:	0f 83       	std	Y+7, r16	; 0x07
    2c06:	18 87       	std	Y+8, r17	; 0x08
    2c08:	8e e1       	ldi	r24, 0x1E	; 30
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	8e 1b       	sub	r24, r30
    2c0e:	9f 0b       	sbc	r25, r31
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	12 c0       	rjmp	.+36     	; 0x2c3a <__floatunsisf+0xe0>
    2c16:	30 97       	sbiw	r30, 0x00	; 0
    2c18:	81 f0       	breq	.+32     	; 0x2c3a <__floatunsisf+0xe0>
    2c1a:	0e 2e       	mov	r0, r30
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <__floatunsisf+0xcc>
    2c1e:	ee 0c       	add	r14, r14
    2c20:	ff 1c       	adc	r15, r15
    2c22:	00 1f       	adc	r16, r16
    2c24:	11 1f       	adc	r17, r17
    2c26:	0a 94       	dec	r0
    2c28:	d2 f7       	brpl	.-12     	; 0x2c1e <__floatunsisf+0xc4>
    2c2a:	ed 82       	std	Y+5, r14	; 0x05
    2c2c:	fe 82       	std	Y+6, r15	; 0x06
    2c2e:	0f 83       	std	Y+7, r16	; 0x07
    2c30:	18 87       	std	Y+8, r17	; 0x08
    2c32:	ce 1a       	sub	r12, r30
    2c34:	df 0a       	sbc	r13, r31
    2c36:	cb 82       	std	Y+3, r12	; 0x03
    2c38:	dc 82       	std	Y+4, r13	; 0x04
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__pack_f>
    2c42:	28 96       	adiw	r28, 0x08	; 8
    2c44:	e8 e0       	ldi	r30, 0x08	; 8
    2c46:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__epilogue_restores__+0x14>

00002c4a <__clzsi2>:
    2c4a:	af 92       	push	r10
    2c4c:	bf 92       	push	r11
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	7b 01       	movw	r14, r22
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	e8 16       	cp	r14, r24
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	f8 06       	cpc	r15, r24
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	08 07       	cpc	r16, r24
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	18 07       	cpc	r17, r24
    2c6e:	58 f4       	brcc	.+22     	; 0x2c86 <__clzsi2+0x3c>
    2c70:	ef ef       	ldi	r30, 0xFF	; 255
    2c72:	ee 16       	cp	r14, r30
    2c74:	f1 04       	cpc	r15, r1
    2c76:	01 05       	cpc	r16, r1
    2c78:	11 05       	cpc	r17, r1
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <__clzsi2+0x34>
    2c7c:	90 f4       	brcc	.+36     	; 0x2ca2 <__clzsi2+0x58>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	dc 01       	movw	r26, r24
    2c84:	17 c0       	rjmp	.+46     	; 0x2cb4 <__clzsi2+0x6a>
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	ef 16       	cp	r14, r31
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	ff 06       	cpc	r15, r31
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	0f 07       	cpc	r16, r31
    2c92:	f1 e0       	ldi	r31, 0x01	; 1
    2c94:	1f 07       	cpc	r17, r31
    2c96:	50 f4       	brcc	.+20     	; 0x2cac <__clzsi2+0x62>
    2c98:	80 e1       	ldi	r24, 0x10	; 16
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	09 c0       	rjmp	.+18     	; 0x2cb4 <__clzsi2+0x6a>
    2ca2:	88 e0       	ldi	r24, 0x08	; 8
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a0 e0       	ldi	r26, 0x00	; 0
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <__clzsi2+0x6a>
    2cac:	88 e1       	ldi	r24, 0x18	; 24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e0       	ldi	r26, 0x00	; 0
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	20 e2       	ldi	r18, 0x20	; 32
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	28 1b       	sub	r18, r24
    2cbe:	39 0b       	sbc	r19, r25
    2cc0:	4a 0b       	sbc	r20, r26
    2cc2:	5b 0b       	sbc	r21, r27
    2cc4:	57 01       	movw	r10, r14
    2cc6:	68 01       	movw	r12, r16
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <__clzsi2+0x88>
    2cca:	d6 94       	lsr	r13
    2ccc:	c7 94       	ror	r12
    2cce:	b7 94       	ror	r11
    2cd0:	a7 94       	ror	r10
    2cd2:	8a 95       	dec	r24
    2cd4:	d2 f7       	brpl	.-12     	; 0x2cca <__clzsi2+0x80>
    2cd6:	d6 01       	movw	r26, r12
    2cd8:	c5 01       	movw	r24, r10
    2cda:	89 5c       	subi	r24, 0xC9	; 201
    2cdc:	9f 4d       	sbci	r25, 0xDF	; 223
    2cde:	fc 01       	movw	r30, r24
    2ce0:	80 81       	ld	r24, Z
    2ce2:	28 1b       	sub	r18, r24
    2ce4:	31 09       	sbc	r19, r1
    2ce6:	41 09       	sbc	r20, r1
    2ce8:	51 09       	sbc	r21, r1
    2cea:	c9 01       	movw	r24, r18
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	08 95       	ret

00002cfe <__pack_f>:
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	24 81       	ldd	r18, Z+4	; 0x04
    2d0e:	35 81       	ldd	r19, Z+5	; 0x05
    2d10:	46 81       	ldd	r20, Z+6	; 0x06
    2d12:	57 81       	ldd	r21, Z+7	; 0x07
    2d14:	61 81       	ldd	r22, Z+1	; 0x01
    2d16:	80 81       	ld	r24, Z
    2d18:	82 30       	cpi	r24, 0x02	; 2
    2d1a:	20 f4       	brcc	.+8      	; 0x2d24 <__pack_f+0x26>
    2d1c:	40 61       	ori	r20, 0x10	; 16
    2d1e:	ef ef       	ldi	r30, 0xFF	; 255
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	a3 c0       	rjmp	.+326    	; 0x2e6a <__pack_f+0x16c>
    2d24:	84 30       	cpi	r24, 0x04	; 4
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <__pack_f+0x2c>
    2d28:	9b c0       	rjmp	.+310    	; 0x2e60 <__pack_f+0x162>
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <__pack_f+0x32>
    2d2e:	92 c0       	rjmp	.+292    	; 0x2e54 <__pack_f+0x156>
    2d30:	21 15       	cp	r18, r1
    2d32:	31 05       	cpc	r19, r1
    2d34:	41 05       	cpc	r20, r1
    2d36:	51 05       	cpc	r21, r1
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <__pack_f+0x3e>
    2d3a:	8f c0       	rjmp	.+286    	; 0x2e5a <__pack_f+0x15c>
    2d3c:	02 80       	ldd	r0, Z+2	; 0x02
    2d3e:	f3 81       	ldd	r31, Z+3	; 0x03
    2d40:	e0 2d       	mov	r30, r0
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	e2 38       	cpi	r30, 0x82	; 130
    2d46:	f8 07       	cpc	r31, r24
    2d48:	0c f0       	brlt	.+2      	; 0x2d4c <__pack_f+0x4e>
    2d4a:	5a c0       	rjmp	.+180    	; 0x2e00 <__pack_f+0x102>
    2d4c:	c2 e8       	ldi	r28, 0x82	; 130
    2d4e:	df ef       	ldi	r29, 0xFF	; 255
    2d50:	ce 1b       	sub	r28, r30
    2d52:	df 0b       	sbc	r29, r31
    2d54:	ca 31       	cpi	r28, 0x1A	; 26
    2d56:	d1 05       	cpc	r29, r1
    2d58:	6c f5       	brge	.+90     	; 0x2db4 <__pack_f+0xb6>
    2d5a:	79 01       	movw	r14, r18
    2d5c:	8a 01       	movw	r16, r20
    2d5e:	0c 2e       	mov	r0, r28
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <__pack_f+0x6c>
    2d62:	16 95       	lsr	r17
    2d64:	07 95       	ror	r16
    2d66:	f7 94       	ror	r15
    2d68:	e7 94       	ror	r14
    2d6a:	0a 94       	dec	r0
    2d6c:	d2 f7       	brpl	.-12     	; 0x2d62 <__pack_f+0x64>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a0 e0       	ldi	r26, 0x00	; 0
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	0c 2e       	mov	r0, r28
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <__pack_f+0x84>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	aa 1f       	adc	r26, r26
    2d80:	bb 1f       	adc	r27, r27
    2d82:	0a 94       	dec	r0
    2d84:	d2 f7       	brpl	.-12     	; 0x2d7a <__pack_f+0x7c>
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	a1 09       	sbc	r26, r1
    2d8a:	b1 09       	sbc	r27, r1
    2d8c:	82 23       	and	r24, r18
    2d8e:	93 23       	and	r25, r19
    2d90:	a4 23       	and	r26, r20
    2d92:	b5 23       	and	r27, r21
    2d94:	21 e0       	ldi	r18, 0x01	; 1
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	a1 05       	cpc	r26, r1
    2da0:	b1 05       	cpc	r27, r1
    2da2:	19 f4       	brne	.+6      	; 0x2daa <__pack_f+0xac>
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	a9 01       	movw	r20, r18
    2daa:	2e 29       	or	r18, r14
    2dac:	3f 29       	or	r19, r15
    2dae:	40 2b       	or	r20, r16
    2db0:	51 2b       	or	r21, r17
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <__pack_f+0xbc>
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	a9 01       	movw	r20, r18
    2dba:	da 01       	movw	r26, r20
    2dbc:	c9 01       	movw	r24, r18
    2dbe:	8f 77       	andi	r24, 0x7F	; 127
    2dc0:	90 70       	andi	r25, 0x00	; 0
    2dc2:	a0 70       	andi	r26, 0x00	; 0
    2dc4:	b0 70       	andi	r27, 0x00	; 0
    2dc6:	80 34       	cpi	r24, 0x40	; 64
    2dc8:	91 05       	cpc	r25, r1
    2dca:	a1 05       	cpc	r26, r1
    2dcc:	b1 05       	cpc	r27, r1
    2dce:	39 f4       	brne	.+14     	; 0x2dde <__pack_f+0xe0>
    2dd0:	27 ff       	sbrs	r18, 7
    2dd2:	09 c0       	rjmp	.+18     	; 0x2de6 <__pack_f+0xe8>
    2dd4:	20 5c       	subi	r18, 0xC0	; 192
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <__pack_f+0xe8>
    2dde:	21 5c       	subi	r18, 0xC1	; 193
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	4f 4f       	sbci	r20, 0xFF	; 255
    2de4:	5f 4f       	sbci	r21, 0xFF	; 255
    2de6:	e1 e0       	ldi	r30, 0x01	; 1
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	20 30       	cpi	r18, 0x00	; 0
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	38 07       	cpc	r19, r24
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	48 07       	cpc	r20, r24
    2df4:	80 e4       	ldi	r24, 0x40	; 64
    2df6:	58 07       	cpc	r21, r24
    2df8:	28 f5       	brcc	.+74     	; 0x2e44 <__pack_f+0x146>
    2dfa:	e0 e0       	ldi	r30, 0x00	; 0
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	22 c0       	rjmp	.+68     	; 0x2e44 <__pack_f+0x146>
    2e00:	e0 38       	cpi	r30, 0x80	; 128
    2e02:	f1 05       	cpc	r31, r1
    2e04:	6c f5       	brge	.+90     	; 0x2e60 <__pack_f+0x162>
    2e06:	e1 58       	subi	r30, 0x81	; 129
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	da 01       	movw	r26, r20
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	8f 77       	andi	r24, 0x7F	; 127
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	a0 70       	andi	r26, 0x00	; 0
    2e14:	b0 70       	andi	r27, 0x00	; 0
    2e16:	80 34       	cpi	r24, 0x40	; 64
    2e18:	91 05       	cpc	r25, r1
    2e1a:	a1 05       	cpc	r26, r1
    2e1c:	b1 05       	cpc	r27, r1
    2e1e:	39 f4       	brne	.+14     	; 0x2e2e <__pack_f+0x130>
    2e20:	27 ff       	sbrs	r18, 7
    2e22:	09 c0       	rjmp	.+18     	; 0x2e36 <__pack_f+0x138>
    2e24:	20 5c       	subi	r18, 0xC0	; 192
    2e26:	3f 4f       	sbci	r19, 0xFF	; 255
    2e28:	4f 4f       	sbci	r20, 0xFF	; 255
    2e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <__pack_f+0x138>
    2e2e:	21 5c       	subi	r18, 0xC1	; 193
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	4f 4f       	sbci	r20, 0xFF	; 255
    2e34:	5f 4f       	sbci	r21, 0xFF	; 255
    2e36:	57 ff       	sbrs	r21, 7
    2e38:	05 c0       	rjmp	.+10     	; 0x2e44 <__pack_f+0x146>
    2e3a:	56 95       	lsr	r21
    2e3c:	47 95       	ror	r20
    2e3e:	37 95       	ror	r19
    2e40:	27 95       	ror	r18
    2e42:	31 96       	adiw	r30, 0x01	; 1
    2e44:	87 e0       	ldi	r24, 0x07	; 7
    2e46:	56 95       	lsr	r21
    2e48:	47 95       	ror	r20
    2e4a:	37 95       	ror	r19
    2e4c:	27 95       	ror	r18
    2e4e:	8a 95       	dec	r24
    2e50:	d1 f7       	brne	.-12     	; 0x2e46 <__pack_f+0x148>
    2e52:	0b c0       	rjmp	.+22     	; 0x2e6a <__pack_f+0x16c>
    2e54:	e0 e0       	ldi	r30, 0x00	; 0
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	05 c0       	rjmp	.+10     	; 0x2e64 <__pack_f+0x166>
    2e5a:	e0 e0       	ldi	r30, 0x00	; 0
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	05 c0       	rjmp	.+10     	; 0x2e6a <__pack_f+0x16c>
    2e60:	ef ef       	ldi	r30, 0xFF	; 255
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	a9 01       	movw	r20, r18
    2e6a:	8e 2f       	mov	r24, r30
    2e6c:	87 95       	ror	r24
    2e6e:	88 27       	eor	r24, r24
    2e70:	87 95       	ror	r24
    2e72:	94 2f       	mov	r25, r20
    2e74:	9f 77       	andi	r25, 0x7F	; 127
    2e76:	67 95       	ror	r22
    2e78:	66 27       	eor	r22, r22
    2e7a:	67 95       	ror	r22
    2e7c:	e6 95       	lsr	r30
    2e7e:	e2 2e       	mov	r14, r18
    2e80:	a9 2f       	mov	r26, r25
    2e82:	a8 2b       	or	r26, r24
    2e84:	fe 2f       	mov	r31, r30
    2e86:	f6 2b       	or	r31, r22
    2e88:	62 2f       	mov	r22, r18
    2e8a:	73 2f       	mov	r23, r19
    2e8c:	8a 2f       	mov	r24, r26
    2e8e:	9f 2f       	mov	r25, r31
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	e6 e0       	ldi	r30, 0x06	; 6
    2e96:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

00002e9a <__unpack_f>:
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	fb 01       	movw	r30, r22
    2e9e:	2c 91       	ld	r18, X
    2ea0:	11 96       	adiw	r26, 0x01	; 1
    2ea2:	3c 91       	ld	r19, X
    2ea4:	11 97       	sbiw	r26, 0x01	; 1
    2ea6:	12 96       	adiw	r26, 0x02	; 2
    2ea8:	8c 91       	ld	r24, X
    2eaa:	12 97       	sbiw	r26, 0x02	; 2
    2eac:	48 2f       	mov	r20, r24
    2eae:	4f 77       	andi	r20, 0x7F	; 127
    2eb0:	50 e0       	ldi	r21, 0x00	; 0
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	99 27       	eor	r25, r25
    2eb8:	99 1f       	adc	r25, r25
    2eba:	13 96       	adiw	r26, 0x03	; 3
    2ebc:	6c 91       	ld	r22, X
    2ebe:	13 97       	sbiw	r26, 0x03	; 3
    2ec0:	86 2f       	mov	r24, r22
    2ec2:	88 0f       	add	r24, r24
    2ec4:	89 2b       	or	r24, r25
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	66 1f       	adc	r22, r22
    2eca:	66 27       	eor	r22, r22
    2ecc:	66 1f       	adc	r22, r22
    2ece:	61 83       	std	Z+1, r22	; 0x01
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	39 f5       	brne	.+78     	; 0x2f22 <__unpack_f+0x88>
    2ed4:	21 15       	cp	r18, r1
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	41 05       	cpc	r20, r1
    2eda:	51 05       	cpc	r21, r1
    2edc:	11 f4       	brne	.+4      	; 0x2ee2 <__unpack_f+0x48>
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	29 c0       	rjmp	.+82     	; 0x2f34 <__unpack_f+0x9a>
    2ee2:	82 e8       	ldi	r24, 0x82	; 130
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
    2ee6:	82 83       	std	Z+2, r24	; 0x02
    2ee8:	93 83       	std	Z+3, r25	; 0x03
    2eea:	67 e0       	ldi	r22, 0x07	; 7
    2eec:	22 0f       	add	r18, r18
    2eee:	33 1f       	adc	r19, r19
    2ef0:	44 1f       	adc	r20, r20
    2ef2:	55 1f       	adc	r21, r21
    2ef4:	6a 95       	dec	r22
    2ef6:	d1 f7       	brne	.-12     	; 0x2eec <__unpack_f+0x52>
    2ef8:	83 e0       	ldi	r24, 0x03	; 3
    2efa:	80 83       	st	Z, r24
    2efc:	09 c0       	rjmp	.+18     	; 0x2f10 <__unpack_f+0x76>
    2efe:	22 0f       	add	r18, r18
    2f00:	33 1f       	adc	r19, r19
    2f02:	44 1f       	adc	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	82 83       	std	Z+2, r24	; 0x02
    2f0e:	93 83       	std	Z+3, r25	; 0x03
    2f10:	20 30       	cpi	r18, 0x00	; 0
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	38 07       	cpc	r19, r24
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	48 07       	cpc	r20, r24
    2f1a:	80 e4       	ldi	r24, 0x40	; 64
    2f1c:	58 07       	cpc	r21, r24
    2f1e:	78 f3       	brcs	.-34     	; 0x2efe <__unpack_f+0x64>
    2f20:	20 c0       	rjmp	.+64     	; 0x2f62 <__unpack_f+0xc8>
    2f22:	8f 3f       	cpi	r24, 0xFF	; 255
    2f24:	91 05       	cpc	r25, r1
    2f26:	79 f4       	brne	.+30     	; 0x2f46 <__unpack_f+0xac>
    2f28:	21 15       	cp	r18, r1
    2f2a:	31 05       	cpc	r19, r1
    2f2c:	41 05       	cpc	r20, r1
    2f2e:	51 05       	cpc	r21, r1
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <__unpack_f+0x9e>
    2f32:	84 e0       	ldi	r24, 0x04	; 4
    2f34:	80 83       	st	Z, r24
    2f36:	08 95       	ret
    2f38:	44 ff       	sbrs	r20, 4
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <__unpack_f+0xa8>
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 83       	st	Z, r24
    2f40:	10 c0       	rjmp	.+32     	; 0x2f62 <__unpack_f+0xc8>
    2f42:	10 82       	st	Z, r1
    2f44:	0e c0       	rjmp	.+28     	; 0x2f62 <__unpack_f+0xc8>
    2f46:	8f 57       	subi	r24, 0x7F	; 127
    2f48:	90 40       	sbci	r25, 0x00	; 0
    2f4a:	82 83       	std	Z+2, r24	; 0x02
    2f4c:	93 83       	std	Z+3, r25	; 0x03
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	80 83       	st	Z, r24
    2f52:	87 e0       	ldi	r24, 0x07	; 7
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	44 1f       	adc	r20, r20
    2f5a:	55 1f       	adc	r21, r21
    2f5c:	8a 95       	dec	r24
    2f5e:	d1 f7       	brne	.-12     	; 0x2f54 <__unpack_f+0xba>
    2f60:	50 64       	ori	r21, 0x40	; 64
    2f62:	24 83       	std	Z+4, r18	; 0x04
    2f64:	35 83       	std	Z+5, r19	; 0x05
    2f66:	46 83       	std	Z+6, r20	; 0x06
    2f68:	57 83       	std	Z+7, r21	; 0x07
    2f6a:	08 95       	ret

00002f6c <__fpcmp_parts_f>:
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	db 01       	movw	r26, r22
    2f70:	90 81       	ld	r25, Z
    2f72:	92 30       	cpi	r25, 0x02	; 2
    2f74:	08 f4       	brcc	.+2      	; 0x2f78 <__fpcmp_parts_f+0xc>
    2f76:	49 c0       	rjmp	.+146    	; 0x300a <__fpcmp_parts_f+0x9e>
    2f78:	8c 91       	ld	r24, X
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <__fpcmp_parts_f+0x14>
    2f7e:	45 c0       	rjmp	.+138    	; 0x300a <__fpcmp_parts_f+0x9e>
    2f80:	94 30       	cpi	r25, 0x04	; 4
    2f82:	51 f4       	brne	.+20     	; 0x2f98 <__fpcmp_parts_f+0x2c>
    2f84:	61 81       	ldd	r22, Z+1	; 0x01
    2f86:	84 30       	cpi	r24, 0x04	; 4
    2f88:	b1 f5       	brne	.+108    	; 0x2ff6 <__fpcmp_parts_f+0x8a>
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	2c 91       	ld	r18, X
    2f8e:	11 97       	sbiw	r26, 0x01	; 1
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	26 1b       	sub	r18, r22
    2f94:	31 09       	sbc	r19, r1
    2f96:	41 c0       	rjmp	.+130    	; 0x301a <__fpcmp_parts_f+0xae>
    2f98:	84 30       	cpi	r24, 0x04	; 4
    2f9a:	21 f0       	breq	.+8      	; 0x2fa4 <__fpcmp_parts_f+0x38>
    2f9c:	92 30       	cpi	r25, 0x02	; 2
    2f9e:	41 f4       	brne	.+16     	; 0x2fb0 <__fpcmp_parts_f+0x44>
    2fa0:	82 30       	cpi	r24, 0x02	; 2
    2fa2:	b1 f1       	breq	.+108    	; 0x3010 <__fpcmp_parts_f+0xa4>
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	8c 91       	ld	r24, X
    2fa8:	11 97       	sbiw	r26, 0x01	; 1
    2faa:	88 23       	and	r24, r24
    2fac:	a1 f1       	breq	.+104    	; 0x3016 <__fpcmp_parts_f+0xaa>
    2fae:	2d c0       	rjmp	.+90     	; 0x300a <__fpcmp_parts_f+0x9e>
    2fb0:	61 81       	ldd	r22, Z+1	; 0x01
    2fb2:	82 30       	cpi	r24, 0x02	; 2
    2fb4:	01 f1       	breq	.+64     	; 0x2ff6 <__fpcmp_parts_f+0x8a>
    2fb6:	11 96       	adiw	r26, 0x01	; 1
    2fb8:	8c 91       	ld	r24, X
    2fba:	11 97       	sbiw	r26, 0x01	; 1
    2fbc:	68 17       	cp	r22, r24
    2fbe:	d9 f4       	brne	.+54     	; 0x2ff6 <__fpcmp_parts_f+0x8a>
    2fc0:	22 81       	ldd	r18, Z+2	; 0x02
    2fc2:	33 81       	ldd	r19, Z+3	; 0x03
    2fc4:	12 96       	adiw	r26, 0x02	; 2
    2fc6:	8d 91       	ld	r24, X+
    2fc8:	9c 91       	ld	r25, X
    2fca:	13 97       	sbiw	r26, 0x03	; 3
    2fcc:	82 17       	cp	r24, r18
    2fce:	93 07       	cpc	r25, r19
    2fd0:	94 f0       	brlt	.+36     	; 0x2ff6 <__fpcmp_parts_f+0x8a>
    2fd2:	28 17       	cp	r18, r24
    2fd4:	39 07       	cpc	r19, r25
    2fd6:	bc f0       	brlt	.+46     	; 0x3006 <__fpcmp_parts_f+0x9a>
    2fd8:	24 81       	ldd	r18, Z+4	; 0x04
    2fda:	35 81       	ldd	r19, Z+5	; 0x05
    2fdc:	46 81       	ldd	r20, Z+6	; 0x06
    2fde:	57 81       	ldd	r21, Z+7	; 0x07
    2fe0:	14 96       	adiw	r26, 0x04	; 4
    2fe2:	8d 91       	ld	r24, X+
    2fe4:	9d 91       	ld	r25, X+
    2fe6:	0d 90       	ld	r0, X+
    2fe8:	bc 91       	ld	r27, X
    2fea:	a0 2d       	mov	r26, r0
    2fec:	82 17       	cp	r24, r18
    2fee:	93 07       	cpc	r25, r19
    2ff0:	a4 07       	cpc	r26, r20
    2ff2:	b5 07       	cpc	r27, r21
    2ff4:	18 f4       	brcc	.+6      	; 0x2ffc <__fpcmp_parts_f+0x90>
    2ff6:	66 23       	and	r22, r22
    2ff8:	41 f0       	breq	.+16     	; 0x300a <__fpcmp_parts_f+0x9e>
    2ffa:	0d c0       	rjmp	.+26     	; 0x3016 <__fpcmp_parts_f+0xaa>
    2ffc:	28 17       	cp	r18, r24
    2ffe:	39 07       	cpc	r19, r25
    3000:	4a 07       	cpc	r20, r26
    3002:	5b 07       	cpc	r21, r27
    3004:	28 f4       	brcc	.+10     	; 0x3010 <__fpcmp_parts_f+0xa4>
    3006:	66 23       	and	r22, r22
    3008:	31 f0       	breq	.+12     	; 0x3016 <__fpcmp_parts_f+0xaa>
    300a:	21 e0       	ldi	r18, 0x01	; 1
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	05 c0       	rjmp	.+10     	; 0x301a <__fpcmp_parts_f+0xae>
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	02 c0       	rjmp	.+4      	; 0x301a <__fpcmp_parts_f+0xae>
    3016:	2f ef       	ldi	r18, 0xFF	; 255
    3018:	3f ef       	ldi	r19, 0xFF	; 255
    301a:	c9 01       	movw	r24, r18
    301c:	08 95       	ret

0000301e <__mulsi3>:
    301e:	62 9f       	mul	r22, r18
    3020:	d0 01       	movw	r26, r0
    3022:	73 9f       	mul	r23, r19
    3024:	f0 01       	movw	r30, r0
    3026:	82 9f       	mul	r24, r18
    3028:	e0 0d       	add	r30, r0
    302a:	f1 1d       	adc	r31, r1
    302c:	64 9f       	mul	r22, r20
    302e:	e0 0d       	add	r30, r0
    3030:	f1 1d       	adc	r31, r1
    3032:	92 9f       	mul	r25, r18
    3034:	f0 0d       	add	r31, r0
    3036:	83 9f       	mul	r24, r19
    3038:	f0 0d       	add	r31, r0
    303a:	74 9f       	mul	r23, r20
    303c:	f0 0d       	add	r31, r0
    303e:	65 9f       	mul	r22, r21
    3040:	f0 0d       	add	r31, r0
    3042:	99 27       	eor	r25, r25
    3044:	72 9f       	mul	r23, r18
    3046:	b0 0d       	add	r27, r0
    3048:	e1 1d       	adc	r30, r1
    304a:	f9 1f       	adc	r31, r25
    304c:	63 9f       	mul	r22, r19
    304e:	b0 0d       	add	r27, r0
    3050:	e1 1d       	adc	r30, r1
    3052:	f9 1f       	adc	r31, r25
    3054:	bd 01       	movw	r22, r26
    3056:	cf 01       	movw	r24, r30
    3058:	11 24       	eor	r1, r1
    305a:	08 95       	ret

0000305c <__udivmodhi4>:
    305c:	aa 1b       	sub	r26, r26
    305e:	bb 1b       	sub	r27, r27
    3060:	51 e1       	ldi	r21, 0x11	; 17
    3062:	07 c0       	rjmp	.+14     	; 0x3072 <__udivmodhi4_ep>

00003064 <__udivmodhi4_loop>:
    3064:	aa 1f       	adc	r26, r26
    3066:	bb 1f       	adc	r27, r27
    3068:	a6 17       	cp	r26, r22
    306a:	b7 07       	cpc	r27, r23
    306c:	10 f0       	brcs	.+4      	; 0x3072 <__udivmodhi4_ep>
    306e:	a6 1b       	sub	r26, r22
    3070:	b7 0b       	sbc	r27, r23

00003072 <__udivmodhi4_ep>:
    3072:	88 1f       	adc	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	5a 95       	dec	r21
    3078:	a9 f7       	brne	.-22     	; 0x3064 <__udivmodhi4_loop>
    307a:	80 95       	com	r24
    307c:	90 95       	com	r25
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	08 95       	ret

00003084 <__divmodhi4>:
    3084:	97 fb       	bst	r25, 7
    3086:	09 2e       	mov	r0, r25
    3088:	07 26       	eor	r0, r23
    308a:	0a d0       	rcall	.+20     	; 0x30a0 <__divmodhi4_neg1>
    308c:	77 fd       	sbrc	r23, 7
    308e:	04 d0       	rcall	.+8      	; 0x3098 <__divmodhi4_neg2>
    3090:	e5 df       	rcall	.-54     	; 0x305c <__udivmodhi4>
    3092:	06 d0       	rcall	.+12     	; 0x30a0 <__divmodhi4_neg1>
    3094:	00 20       	and	r0, r0
    3096:	1a f4       	brpl	.+6      	; 0x309e <__divmodhi4_exit>

00003098 <__divmodhi4_neg2>:
    3098:	70 95       	com	r23
    309a:	61 95       	neg	r22
    309c:	7f 4f       	sbci	r23, 0xFF	; 255

0000309e <__divmodhi4_exit>:
    309e:	08 95       	ret

000030a0 <__divmodhi4_neg1>:
    30a0:	f6 f7       	brtc	.-4      	; 0x309e <__divmodhi4_exit>
    30a2:	90 95       	com	r25
    30a4:	81 95       	neg	r24
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	08 95       	ret

000030aa <__udivmodsi4>:
    30aa:	a1 e2       	ldi	r26, 0x21	; 33
    30ac:	1a 2e       	mov	r1, r26
    30ae:	aa 1b       	sub	r26, r26
    30b0:	bb 1b       	sub	r27, r27
    30b2:	fd 01       	movw	r30, r26
    30b4:	0d c0       	rjmp	.+26     	; 0x30d0 <__udivmodsi4_ep>

000030b6 <__udivmodsi4_loop>:
    30b6:	aa 1f       	adc	r26, r26
    30b8:	bb 1f       	adc	r27, r27
    30ba:	ee 1f       	adc	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	a2 17       	cp	r26, r18
    30c0:	b3 07       	cpc	r27, r19
    30c2:	e4 07       	cpc	r30, r20
    30c4:	f5 07       	cpc	r31, r21
    30c6:	20 f0       	brcs	.+8      	; 0x30d0 <__udivmodsi4_ep>
    30c8:	a2 1b       	sub	r26, r18
    30ca:	b3 0b       	sbc	r27, r19
    30cc:	e4 0b       	sbc	r30, r20
    30ce:	f5 0b       	sbc	r31, r21

000030d0 <__udivmodsi4_ep>:
    30d0:	66 1f       	adc	r22, r22
    30d2:	77 1f       	adc	r23, r23
    30d4:	88 1f       	adc	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	1a 94       	dec	r1
    30da:	69 f7       	brne	.-38     	; 0x30b6 <__udivmodsi4_loop>
    30dc:	60 95       	com	r22
    30de:	70 95       	com	r23
    30e0:	80 95       	com	r24
    30e2:	90 95       	com	r25
    30e4:	9b 01       	movw	r18, r22
    30e6:	ac 01       	movw	r20, r24
    30e8:	bd 01       	movw	r22, r26
    30ea:	cf 01       	movw	r24, r30
    30ec:	08 95       	ret

000030ee <__prologue_saves__>:
    30ee:	2f 92       	push	r2
    30f0:	3f 92       	push	r3
    30f2:	4f 92       	push	r4
    30f4:	5f 92       	push	r5
    30f6:	6f 92       	push	r6
    30f8:	7f 92       	push	r7
    30fa:	8f 92       	push	r8
    30fc:	9f 92       	push	r9
    30fe:	af 92       	push	r10
    3100:	bf 92       	push	r11
    3102:	cf 92       	push	r12
    3104:	df 92       	push	r13
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	ca 1b       	sub	r28, r26
    3118:	db 0b       	sbc	r29, r27
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	09 94       	ijmp

00003120 <__epilogue_restores__>:
    3120:	2a 88       	ldd	r2, Y+18	; 0x12
    3122:	39 88       	ldd	r3, Y+17	; 0x11
    3124:	48 88       	ldd	r4, Y+16	; 0x10
    3126:	5f 84       	ldd	r5, Y+15	; 0x0f
    3128:	6e 84       	ldd	r6, Y+14	; 0x0e
    312a:	7d 84       	ldd	r7, Y+13	; 0x0d
    312c:	8c 84       	ldd	r8, Y+12	; 0x0c
    312e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3130:	aa 84       	ldd	r10, Y+10	; 0x0a
    3132:	b9 84       	ldd	r11, Y+9	; 0x09
    3134:	c8 84       	ldd	r12, Y+8	; 0x08
    3136:	df 80       	ldd	r13, Y+7	; 0x07
    3138:	ee 80       	ldd	r14, Y+6	; 0x06
    313a:	fd 80       	ldd	r15, Y+5	; 0x05
    313c:	0c 81       	ldd	r16, Y+4	; 0x04
    313e:	1b 81       	ldd	r17, Y+3	; 0x03
    3140:	aa 81       	ldd	r26, Y+2	; 0x02
    3142:	b9 81       	ldd	r27, Y+1	; 0x01
    3144:	ce 0f       	add	r28, r30
    3146:	d1 1d       	adc	r29, r1
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	ed 01       	movw	r28, r26
    314e:	08 95       	ret

00003150 <do_rand>:
    3150:	a0 e0       	ldi	r26, 0x00	; 0
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ee ea       	ldi	r30, 0xAE	; 174
    3156:	f8 e1       	ldi	r31, 0x18	; 24
    3158:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x10>
    315c:	ec 01       	movw	r28, r24
    315e:	68 81       	ld	r22, Y
    3160:	79 81       	ldd	r23, Y+1	; 0x01
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	9b 81       	ldd	r25, Y+3	; 0x03
    3166:	61 15       	cp	r22, r1
    3168:	71 05       	cpc	r23, r1
    316a:	81 05       	cpc	r24, r1
    316c:	91 05       	cpc	r25, r1
    316e:	21 f4       	brne	.+8      	; 0x3178 <do_rand+0x28>
    3170:	64 e2       	ldi	r22, 0x24	; 36
    3172:	79 ed       	ldi	r23, 0xD9	; 217
    3174:	8b e5       	ldi	r24, 0x5B	; 91
    3176:	97 e0       	ldi	r25, 0x07	; 7
    3178:	2d e1       	ldi	r18, 0x1D	; 29
    317a:	33 ef       	ldi	r19, 0xF3	; 243
    317c:	41 e0       	ldi	r20, 0x01	; 1
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divmodsi4>
    3184:	79 01       	movw	r14, r18
    3186:	8a 01       	movw	r16, r20
    3188:	27 ea       	ldi	r18, 0xA7	; 167
    318a:	31 e4       	ldi	r19, 0x41	; 65
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	0e 94 0f 18 	call	0x301e	; 0x301e <__mulsi3>
    3194:	5b 01       	movw	r10, r22
    3196:	6c 01       	movw	r12, r24
    3198:	c8 01       	movw	r24, r16
    319a:	b7 01       	movw	r22, r14
    319c:	2c ee       	ldi	r18, 0xEC	; 236
    319e:	34 ef       	ldi	r19, 0xF4	; 244
    31a0:	4f ef       	ldi	r20, 0xFF	; 255
    31a2:	5f ef       	ldi	r21, 0xFF	; 255
    31a4:	0e 94 0f 18 	call	0x301e	; 0x301e <__mulsi3>
    31a8:	6a 0d       	add	r22, r10
    31aa:	7b 1d       	adc	r23, r11
    31ac:	8c 1d       	adc	r24, r12
    31ae:	9d 1d       	adc	r25, r13
    31b0:	97 ff       	sbrs	r25, 7
    31b2:	04 c0       	rjmp	.+8      	; 0x31bc <do_rand+0x6c>
    31b4:	61 50       	subi	r22, 0x01	; 1
    31b6:	70 40       	sbci	r23, 0x00	; 0
    31b8:	80 40       	sbci	r24, 0x00	; 0
    31ba:	90 48       	sbci	r25, 0x80	; 128
    31bc:	68 83       	st	Y, r22
    31be:	79 83       	std	Y+1, r23	; 0x01
    31c0:	8a 83       	std	Y+2, r24	; 0x02
    31c2:	9b 83       	std	Y+3, r25	; 0x03
    31c4:	7f 77       	andi	r23, 0x7F	; 127
    31c6:	cb 01       	movw	r24, r22
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	ea e0       	ldi	r30, 0x0A	; 10
    31ce:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__epilogue_restores__+0x10>

000031d2 <rand_r>:
    31d2:	0e 94 a8 18 	call	0x3150	; 0x3150 <do_rand>
    31d6:	08 95       	ret

000031d8 <rand>:
    31d8:	87 e3       	ldi	r24, 0x37	; 55
    31da:	91 e2       	ldi	r25, 0x21	; 33
    31dc:	0e 94 a8 18 	call	0x3150	; 0x3150 <do_rand>
    31e0:	08 95       	ret

000031e2 <srand>:
    31e2:	a0 e0       	ldi	r26, 0x00	; 0
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	80 93 37 21 	sts	0x2137, r24
    31ea:	90 93 38 21 	sts	0x2138, r25
    31ee:	a0 93 39 21 	sts	0x2139, r26
    31f2:	b0 93 3a 21 	sts	0x213A, r27
    31f6:	08 95       	ret

000031f8 <__divmodsi4>:
    31f8:	97 fb       	bst	r25, 7
    31fa:	09 2e       	mov	r0, r25
    31fc:	05 26       	eor	r0, r21
    31fe:	0e d0       	rcall	.+28     	; 0x321c <__divmodsi4_neg1>
    3200:	57 fd       	sbrc	r21, 7
    3202:	04 d0       	rcall	.+8      	; 0x320c <__divmodsi4_neg2>
    3204:	52 df       	rcall	.-348    	; 0x30aa <__udivmodsi4>
    3206:	0a d0       	rcall	.+20     	; 0x321c <__divmodsi4_neg1>
    3208:	00 1c       	adc	r0, r0
    320a:	38 f4       	brcc	.+14     	; 0x321a <__divmodsi4_exit>

0000320c <__divmodsi4_neg2>:
    320c:	50 95       	com	r21
    320e:	40 95       	com	r20
    3210:	30 95       	com	r19
    3212:	21 95       	neg	r18
    3214:	3f 4f       	sbci	r19, 0xFF	; 255
    3216:	4f 4f       	sbci	r20, 0xFF	; 255
    3218:	5f 4f       	sbci	r21, 0xFF	; 255

0000321a <__divmodsi4_exit>:
    321a:	08 95       	ret

0000321c <__divmodsi4_neg1>:
    321c:	f6 f7       	brtc	.-4      	; 0x321a <__divmodsi4_exit>
    321e:	90 95       	com	r25
    3220:	80 95       	com	r24
    3222:	70 95       	com	r23
    3224:	61 95       	neg	r22
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	8f 4f       	sbci	r24, 0xFF	; 255
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	08 95       	ret

0000322e <_exit>:
    322e:	f8 94       	cli

00003230 <__stop_program>:
    3230:	ff cf       	rjmp	.-2      	; 0x3230 <__stop_program>
