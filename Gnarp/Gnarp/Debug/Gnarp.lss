
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00002d6c  00002e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000235  00802138  00802138  00002f38  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000bf3  00000000  00000000  00003969  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006fe2  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021a2  00000000  00000000  0000b53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003bf5  00000000  00000000  0000d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000850  00000000  00000000  000112d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c82  00000000  00000000  00011b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000025fb  00000000  00000000  000137aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e64  00000000  00000000  00015da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  00016c09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_17>
      48:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	ec e6       	ldi	r30, 0x6C	; 108
     18c:	fd e2       	ldi	r31, 0x2D	; 45
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 33       	cpi	r26, 0x38	; 56
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ad 36       	cpi	r26, 0x6D	; 109
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
     1ae:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
#include "arpeggiator.h"

#include <avr/interrupt.h>
#include <avr/io.h>

ISR(TCC0_CCA_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:

ISR(TCC0_CCD_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:

static uint16_t BPM;

void configure_beat_clock_timer(){
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     226:	20 91 38 21 	lds	r18, 0x2138
     22a:	30 91 39 21 	lds	r19, 0x2139
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     306:	80 93 38 21 	sts	0x2138, r24
     30a:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
}
     33a:	08 95       	ret

0000033c <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     33c:	80 91 38 21 	lds	r24, 0x2138
     340:	90 91 39 21 	lds	r25, 0x2139
     344:	08 95       	ret

00000346 <increment_BPM>:

void increment_BPM(){
    BPM += 1;
     346:	80 91 38 21 	lds	r24, 0x2138
     34a:	90 91 39 21 	lds	r25, 0x2139
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 38 21 	sts	0x2138, r24
     354:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     35c:	08 95       	ret

0000035e <decrement_BPM>:

void decrement_BPM(){
    BPM -= 1;
     35e:	80 91 38 21 	lds	r24, 0x2138
     362:	90 91 39 21 	lds	r25, 0x2139
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	80 93 38 21 	sts	0x2138, r24
     36c:	90 93 39 21 	sts	0x2139, r25
    configure_beat_clock_timer();
     370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     374:	08 95       	ret

00000376 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     376:	80 91 50 21 	lds	r24, 0x2150
     37a:	08 95       	ret

0000037c <get_pot_value>:
            pot_values[i] = pot_values[i] - POT_MIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot_select, uint16_t output_min, uint16_t output_max){
     37c:	2f 92       	push	r2
     37e:	3f 92       	push	r3
     380:	4f 92       	push	r4
     382:	5f 92       	push	r5
     384:	6f 92       	push	r6
     386:	7f 92       	push	r7
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <get_pot_value+0x26>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6b 01       	movw	r12, r22
     3a8:	2a 01       	movw	r4, r20
    //output_max: maximum value to output
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ea 5b       	subi	r30, 0xBA	; 186
     3b4:	fe 4d       	sbci	r31, 0xDE	; 222
     3b6:	60 81       	ld	r22, Z
     3b8:	71 81       	ldd	r23, Z+1	; 0x01
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	42 e7       	ldi	r20, 0x72	; 114
     3c8:	55 e4       	ldi	r21, 0x45	; 69
     3ca:	0e 94 29 12 	call	0x2452	; 0x2452 <__divsf3>
     3ce:	7b 01       	movw	r14, r22
     3d0:	8c 01       	movw	r16, r24
    temp = temp*(output_max - output_min + 1) + output_min;
     3d2:	b2 01       	movw	r22, r4
     3d4:	6c 19       	sub	r22, r12
     3d6:	7d 09       	sbc	r23, r13
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 2f 11 	call	0x225e	; 0x225e <__mulsf3>
     3f0:	7b 01       	movw	r14, r22
     3f2:	8c 01       	movw	r16, r24
     3f4:	b6 01       	movw	r22, r12
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     3fe:	d6 2e       	mov	r13, r22
     400:	c7 2e       	mov	r12, r23
     402:	b8 2e       	mov	r11, r24
     404:	a9 2e       	mov	r10, r25
     406:	16 01       	movw	r2, r12
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	6e 2d       	mov	r22, r14
     40e:	7f 2d       	mov	r23, r15
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	d6 01       	movw	r26, r12
     416:	f5 01       	movw	r30, r10
     418:	2b 2f       	mov	r18, r27
     41a:	3a 2f       	mov	r19, r26
     41c:	4f 2f       	mov	r20, r31
     41e:	5e 2f       	mov	r21, r30
     420:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__addsf3>
     424:	96 2e       	mov	r9, r22
     426:	87 2e       	mov	r8, r23
     428:	78 2e       	mov	r7, r24
     42a:	69 2e       	mov	r6, r25
    
    if (temp > output_max)
     42c:	b2 01       	movw	r22, r4
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     436:	f6 2e       	mov	r15, r22
     438:	07 2f       	mov	r16, r23
     43a:	18 2f       	mov	r17, r24
     43c:	e9 2e       	mov	r14, r25
     43e:	a4 01       	movw	r20, r8
     440:	93 01       	movw	r18, r6
     442:	65 2f       	mov	r22, r21
     444:	74 2f       	mov	r23, r20
     446:	83 2f       	mov	r24, r19
     448:	92 2f       	mov	r25, r18
     44a:	2f 2d       	mov	r18, r15
     44c:	30 2f       	mov	r19, r16
     44e:	41 2f       	mov	r20, r17
     450:	5e 2d       	mov	r21, r14
     452:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__gtsf2>
     456:	18 16       	cp	r1, r24
     458:	24 f0       	brlt	.+8      	; 0x462 <get_pot_value+0xe6>
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
    temp = temp*(output_max - output_min + 1) + output_min;
     45a:	f9 2c       	mov	r15, r9
     45c:	08 2d       	mov	r16, r8
     45e:	17 2d       	mov	r17, r7
     460:	e6 2c       	mov	r14, r6
    
    if (temp > output_max)
        temp = output_max;
        
    if (temp < output_min)
     462:	6f 2d       	mov	r22, r15
     464:	70 2f       	mov	r23, r16
     466:	81 2f       	mov	r24, r17
     468:	9e 2d       	mov	r25, r14
     46a:	d6 01       	movw	r26, r12
     46c:	f5 01       	movw	r30, r10
     46e:	2b 2f       	mov	r18, r27
     470:	3c 2d       	mov	r19, r12
     472:	4f 2f       	mov	r20, r31
     474:	5a 2d       	mov	r21, r10
     476:	0e 94 37 13 	call	0x266e	; 0x266e <__ltsf2>
     47a:	87 fd       	sbrc	r24, 7
     47c:	04 c0       	rjmp	.+8      	; 0x486 <get_pot_value+0x10a>
     47e:	3f 2c       	mov	r3, r15
     480:	20 2e       	mov	r2, r16
     482:	19 83       	std	Y+1, r17	; 0x01
     484:	ea 82       	std	Y+2, r14	; 0x02
        temp = output_min;
    
    return (uint16_t) temp;
     486:	a1 01       	movw	r20, r2
     488:	39 81       	ldd	r19, Y+1	; 0x01
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	65 2f       	mov	r22, r21
     48e:	72 2d       	mov	r23, r2
     490:	83 2f       	mov	r24, r19
     492:	92 2f       	mov	r25, r18
     494:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__fixunssfsi>
}
     498:	cb 01       	movw	r24, r22
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	3f 90       	pop	r3
     4c0:	2f 90       	pop	r2
     4c2:	08 95       	ret

000004c4 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     4e2:	ca e0       	ldi	r28, 0x0A	; 10
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     4e6:	73 e0       	ldi	r23, 0x03	; 3
     4e8:	c7 2e       	mov	r12, r23
     4ea:	d1 2c       	mov	r13, r1
     4ec:	68 e0       	ldi	r22, 0x08	; 8
     4ee:	a6 2e       	mov	r10, r22
     4f0:	b1 2c       	mov	r11, r1
     4f2:	00 e6       	ldi	r16, 0x60	; 96
     4f4:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	e5 2e       	mov	r14, r21
     4fa:	56 e0       	ldi	r21, 0x06	; 6
     4fc:	f5 2e       	mov	r15, r21
     4fe:	40 ef       	ldi	r20, 0xF0	; 240
     500:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     502:	98 e3       	ldi	r25, 0x38	; 56
     504:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     506:	cf 01       	movw	r24, r30
     508:	be 01       	movw	r22, r28
     50a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
     50e:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     510:	30 97       	sbiw	r30, 0x00	; 0
     512:	19 f4       	brne	.+6      	; 0x51a <set_seven_segment_LEDs+0x56>
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <set_seven_segment_LEDs+0x56>
            digit = 10;
     518:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     51a:	c9 01       	movw	r24, r18
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
     522:	b5 01       	movw	r22, r10
     524:	02 c0       	rjmp	.+4      	; 0x52a <set_seven_segment_LEDs+0x66>
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	8a 95       	dec	r24
     52c:	e2 f7       	brpl	.-8      	; 0x526 <set_seven_segment_LEDs+0x62>
     52e:	d8 01       	movw	r26, r16
     530:	16 96       	adiw	r26, 0x06	; 6
     532:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     534:	d7 01       	movw	r26, r14
     536:	16 96       	adiw	r26, 0x06	; 6
     538:	9c 92       	st	X, r9
     53a:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     53c:	42 95       	swap	r20
     53e:	40 7f       	andi	r20, 0xF0	; 240
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     544:	d8 01       	movw	r26, r16
     546:	15 96       	adiw	r26, 0x05	; 5
     548:	8c 92       	st	X, r8
     54a:	15 97       	sbiw	r26, 0x05	; 5
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     550:	25 30       	cpi	r18, 0x05	; 5
     552:	31 05       	cpc	r19, r1
     554:	31 f0       	breq	.+12     	; 0x562 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     556:	cf 01       	movw	r24, r30
     558:	be 01       	movw	r22, r28
     55a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
     55e:	fb 01       	movw	r30, r22
     560:	d2 cf       	rjmp	.-92     	; 0x506 <set_seven_segment_LEDs+0x42>
    }
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <set_LEDs_on+0xc>
        PORTC.OUTCLR = 0x08;
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_0)
     588:	66 23       	and	r22, r22
     58a:	21 f0       	breq	.+8      	; 0x594 <set_LEDs_on+0x18>
        PORTD.OUTSET = 0x04;
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	e0 e6       	ldi	r30, 0x60	; 96
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	85 83       	std	Z+5, r24	; 0x05
        
    if (decimal_point_1)
     594:	44 23       	and	r20, r20
     596:	21 f0       	breq	.+8      	; 0x5a0 <set_LEDs_on+0x24>
        PORTD.OUTSET = 0x01;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e0 e6       	ldi	r30, 0x60	; 96
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_2)
     5a0:	22 23       	and	r18, r18
     5a2:	21 f0       	breq	.+8      	; 0x5ac <set_LEDs_on+0x30>
        PORTD.OUTSET = 0x02;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
     5ac:	08 95       	ret

000005ae <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <set_LEDs_off+0xc>
        PORTC.OUTSET = 0x08;
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_0)
     5ba:	66 23       	and	r22, r22
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <set_LEDs_off+0x18>
        PORTD.OUTCLR = 0x04;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	e0 e6       	ldi	r30, 0x60	; 96
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	86 83       	std	Z+6, r24	; 0x06
        
    if (decimal_point_1)
     5c6:	44 23       	and	r20, r20
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <set_LEDs_off+0x24>
        PORTD.OUTCLR = 0x01;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_2)
     5d2:	22 23       	and	r18, r18
     5d4:	21 f0       	breq	.+8      	; 0x5de <set_LEDs_off+0x30>
        PORTD.OUTCLR = 0x02;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	86 83       	std	Z+6, r24	; 0x06
     5de:	08 95       	ret

000005e0 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     5e0:	80 91 3e 21 	lds	r24, 0x213E
     5e4:	08 95       	ret

000005e6 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     5e6:	80 91 3f 21 	lds	r24, 0x213F
     5ea:	08 95       	ret

000005ec <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     5ec:	80 91 3c 21 	lds	r24, 0x213C
     5f0:	08 95       	ret

000005f2 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     5f2:	80 91 3d 21 	lds	r24, 0x213D
     5f6:	08 95       	ret

000005f8 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     5f8:	80 91 3a 21 	lds	r24, 0x213A
     5fc:	08 95       	ret

000005fe <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     5fe:	80 91 3b 21 	lds	r24, 0x213B
     602:	08 95       	ret

00000604 <initialize_hardware>:

void initialize_hardware(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     608:	e0 e4       	ldi	r30, 0x40	; 64
     60a:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     60c:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     60e:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     610:	c0 e5       	ldi	r28, 0x50	; 80
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     616:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     618:	a0 e5       	ldi	r26, 0x50	; 80
     61a:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     61c:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     61e:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     620:	98 ed       	ldi	r25, 0xD8	; 216
     622:	15 c0       	rjmp	.+42     	; 0x64e <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     624:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     626:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     628:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     62a:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     62e:	70 91 51 00 	lds	r23, 0x0051
     632:	73 ff       	sbrs	r23, 3
     634:	fc cf       	rjmp	.-8      	; 0x62e <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     636:	15 96       	adiw	r26, 0x05	; 5
     638:	3c 93       	st	X, r19
     63a:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     63c:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     640:	70 91 51 00 	lds	r23, 0x0051
     644:	74 ff       	sbrs	r23, 4
     646:	fc cf       	rjmp	.-8      	; 0x640 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     648:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     64a:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     64e:	70 91 40 00 	lds	r23, 0x0040
     652:	74 30       	cpi	r23, 0x04	; 4
     654:	39 f7       	brne	.-50     	; 0x624 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     656:	f8 94       	cli
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     658:	a0 e6       	ldi	r26, 0x60	; 96
     65a:	b6 e0       	ldi	r27, 0x06	; 6
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	8c 93       	st	X, r24
     662:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     664:	90 e4       	ldi	r25, 0x40	; 64
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	9c 93       	st	X, r25
     66a:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8c 93       	st	X, r24
     670:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     672:	e0 eb       	ldi	r30, 0xB0	; 176
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     67a:	90 e2       	ldi	r25, 0x20	; 32
     67c:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     682:	8f e2       	ldi	r24, 0x2F	; 47
     684:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     686:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     688:	80 91 a2 00 	lds	r24, 0x00A2
     68c:	87 68       	ori	r24, 0x87	; 135
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     694:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	d6 e0       	ldi	r29, 0x06	; 6
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6a6:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6a8:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6aa:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6b0:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6b2:	80 91 00 02 	lds	r24, 0x0200
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     6bc:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     6be:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     6c0:	12 a2       	std	Z+34, r1	; 0x22
    if (decimal_point_2)
        PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	56 e0       	ldi	r21, 0x06	; 6
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	fa 01       	movw	r30, r20
     6ca:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     6cc:	28 e0       	ldi	r18, 0x08	; 8
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	fc 01       	movw	r30, r24
     6d4:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     6d6:	fa 01       	movw	r30, r20
     6d8:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     6de:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     6e0:	e0 e4       	ldi	r30, 0x40	; 64
     6e2:	f6 e0       	ldi	r31, 0x06	; 6
     6e4:	88 ef       	ldi	r24, 0xF8	; 248
     6e6:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8c 93       	st	X, r24
     6ee:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     6f0:	88 e3       	ldi	r24, 0x38	; 56
     6f2:	15 96       	adiw	r26, 0x05	; 5
     6f4:	8c 93       	st	X, r24
     6f6:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     6f8:	90 ef       	ldi	r25, 0xF0	; 240
     6fa:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     6fc:	16 96       	adiw	r26, 0x06	; 6
     6fe:	8c 93       	st	X, r24
     700:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     702:	87 e0       	ldi	r24, 0x07	; 7
     704:	16 96       	adiw	r26, 0x06	; 6
     706:	8c 93       	st	X, r24
     708:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     70a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <read_hardware>:

void read_hardware(){
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	0f 92       	push	r0
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     72a:	80 91 88 06 	lds	r24, 0x0688
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <read_hardware+0x28>
     738:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     73a:	80 91 28 06 	lds	r24, 0x0628
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	80 fd       	sbrc	r24, 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <read_hardware+0x38>
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	01 c0       	rjmp	.+2      	; 0x74c <read_hardware+0x3a>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	c8 2e       	mov	r12, r24
     74e:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     750:	80 91 28 06 	lds	r24, 0x0628
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	86 95       	lsr	r24
     75a:	80 fd       	sbrc	r24, 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <read_hardware+0x50>
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	01 c0       	rjmp	.+2      	; 0x764 <read_hardware+0x52>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c8 2a       	or	r12, r24
     766:	c0 92 45 21 	sts	0x2145, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     76a:	60 91 44 21 	lds	r22, 0x2144
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	d0 90 43 21 	lds	r13, 0x2143
     774:	e0 e4       	ldi	r30, 0x40	; 64
     776:	f1 e2       	ldi	r31, 0x21	; 33
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	4c 2d       	mov	r20, r12
     77e:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     784:	b8 2e       	mov	r11, r24
     786:	8a 01       	movw	r16, r20
     788:	08 2e       	mov	r0, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <read_hardware+0x7e>
     78c:	15 95       	asr	r17
     78e:	07 95       	ror	r16
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <read_hardware+0x7a>
     794:	db 01       	movw	r26, r22
     796:	08 2e       	mov	r0, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <read_hardware+0x8c>
     79a:	b5 95       	asr	r27
     79c:	a7 95       	ror	r26
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <read_hardware+0x88>
     7a2:	0a 17       	cp	r16, r26
     7a4:	1b 07       	cpc	r17, r27
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     7a8:	a0 81       	ld	r26, Z
     7aa:	af 5f       	subi	r26, 0xFF	; 255
     7ac:	a0 83       	st	Z, r26
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     7b0:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     7b2:	a0 81       	ld	r26, Z
     7b4:	a9 30       	cpi	r26, 0x09	; 9
     7b6:	60 f0       	brcs	.+24     	; 0x7d0 <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     7b8:	d9 01       	movw	r26, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <read_hardware+0xae>
     7bc:	aa 0f       	add	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	ba 94       	dec	r11
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <read_hardware+0xaa>
     7c4:	ba 2f       	mov	r27, r26
     7c6:	b0 95       	com	r27
     7c8:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     7ca:	ac 21       	and	r26, r12
     7cc:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     7ce:	10 82       	st	Z, r1
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f6       	brne	.-86     	; 0x784 <read_hardware+0x72>
     7da:	d0 92 43 21 	sts	0x2143, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     7de:	c0 92 44 21 	sts	0x2144, r12
     7e2:	80 91 3a 21 	lds	r24, 0x213A
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     7e6:	d0 fe       	sbrs	r13, 0
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     7ea:	88 23       	and	r24, r24
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     7ee:	10 92 3b 21 	sts	0x213B, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 3b 21 	sts	0x213B, r24
        toggle_switch_state = 1;                //set current value
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 3a 21 	sts	0x213A, r24
     800:	0a c0       	rjmp	.+20     	; 0x816 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	80 93 3b 21 	sts	0x213B, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     80e:	10 92 3b 21 	sts	0x213B, r1
        toggle_switch_state = 0;                //set current value
     812:	10 92 3a 21 	sts	0x213A, r1
     816:	80 91 3c 21 	lds	r24, 0x213C
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     81a:	d1 fe       	sbrs	r13, 1
     81c:	0c c0       	rjmp	.+24     	; 0x836 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     81e:	88 23       	and	r24, r24
     820:	19 f0       	breq	.+6      	; 0x828 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     822:	10 92 3d 21 	sts	0x213D, r1
     826:	03 c0       	rjmp	.+6      	; 0x82e <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 3d 21 	sts	0x213D, r24
        pushbutton_switch_state = 1;                //set current value
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 3c 21 	sts	0x213C, r24
     834:	0a c0       	rjmp	.+20     	; 0x84a <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     836:	88 23       	and	r24, r24
     838:	21 f0       	breq	.+8      	; 0x842 <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 3d 21 	sts	0x213D, r24
     840:	02 c0       	rjmp	.+4      	; 0x846 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     842:	10 92 3d 21 	sts	0x213D, r1
        pushbutton_switch_state = 0;                //set current value
     846:	10 92 3c 21 	sts	0x213C, r1
     84a:	80 91 3e 21 	lds	r24, 0x213E
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     84e:	d2 fe       	sbrs	r13, 2
     850:	0c c0       	rjmp	.+24     	; 0x86a <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     856:	10 92 3f 21 	sts	0x213F, r1
     85a:	03 c0       	rjmp	.+6      	; 0x862 <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 3f 21 	sts	0x213F, r24
        encoder_switch_state = 1;                //set current value
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 3e 21 	sts	0x213E, r24
     868:	0a c0       	rjmp	.+20     	; 0x87e <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 3f 21 	sts	0x213F, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     876:	10 92 3f 21 	sts	0x213F, r1
        encoder_switch_state = 0;                //set current value
     87a:	10 92 3e 21 	sts	0x213E, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     87e:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	62 c0       	rjmp	.+196    	; 0x94a <read_hardware+0x238>
     886:	20 91 23 02 	lds	r18, 0x0223
     88a:	21 60       	ori	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     890:	20 91 21 02 	lds	r18, 0x0221
     894:	27 7c       	andi	r18, 0xC7	; 199
     896:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     898:	40 91 21 02 	lds	r20, 0x0221
     89c:	29 81       	ldd	r18, Y+1	; 0x01
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	2d 5f       	subi	r18, 0xFD	; 253
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	6a 95       	dec	r22
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <read_hardware+0x194>
     8ae:	42 2b       	or	r20, r18
     8b0:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     8b2:	20 91 20 02 	lds	r18, 0x0220
     8b6:	20 68       	ori	r18, 0x80	; 128
     8b8:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     8ba:	20 91 23 02 	lds	r18, 0x0223
     8be:	20 ff       	sbrs	r18, 0
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	20 91 24 02 	lds	r18, 0x0224
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ea 5b       	subi	r30, 0xBA	; 186
     8d0:	fe 4d       	sbci	r31, 0xDE	; 222
     8d2:	20 83       	st	Z, r18
     8d4:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	20 91 25 02 	lds	r18, 0x0225
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ea 5b       	subi	r30, 0xBA	; 186
     8e4:	fe 4d       	sbci	r31, 0xDE	; 222
     8e6:	f2 2e       	mov	r15, r18
     8e8:	ee 24       	eor	r14, r14
     8ea:	20 81       	ld	r18, Z
     8ec:	31 81       	ldd	r19, Z+1	; 0x01
     8ee:	2e 29       	or	r18, r14
     8f0:	3f 29       	or	r19, r15
     8f2:	20 83       	st	Z, r18
     8f4:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POT_MIN)
     8f6:	e9 81       	ldd	r30, Y+1	; 0x01
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ea 5b       	subi	r30, 0xBA	; 186
     900:	fe 4d       	sbci	r31, 0xDE	; 222
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	20 3e       	cpi	r18, 0xE0	; 224
     908:	31 05       	cpc	r19, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <read_hardware+0x20c>
            pot_values[i] = 0;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ea 5b       	subi	r30, 0xBA	; 186
     916:	fe 4d       	sbci	r31, 0xDE	; 222
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	13 c0       	rjmp	.+38     	; 0x944 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POT_MIN;
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	a9 81       	ldd	r26, Y+1	; 0x01
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ea 5b       	subi	r30, 0xBA	; 186
     92a:	fe 4d       	sbci	r31, 0xDE	; 222
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	aa 5b       	subi	r26, 0xBA	; 186
     934:	be 4d       	sbci	r27, 0xDE	; 222
     936:	2d 91       	ld	r18, X+
     938:	3c 91       	ld	r19, X
     93a:	11 97       	sbiw	r26, 0x01	; 1
     93c:	20 5e       	subi	r18, 0xE0	; 224
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     944:	29 81       	ldd	r18, Y+1	; 0x01
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	29 83       	std	Y+1, r18	; 0x01
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	25 30       	cpi	r18, 0x05	; 5
     94e:	08 f4       	brcc	.+2      	; 0x952 <read_hardware+0x240>
     950:	9a cf       	rjmp	.-204    	; 0x886 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     952:	80 91 28 06 	lds	r24, 0x0628
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	80 fd       	sbrc	r24, 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     95c:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     960:	84 2f       	mov	r24, r20
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	20 91 51 21 	lds	r18, 0x2151
     968:	51 e0       	ldi	r21, 0x01	; 1
     96a:	25 27       	eor	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	82 23       	and	r24, r18
     970:	93 23       	and	r25, r19
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	59 f0       	breq	.+22     	; 0x98c <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     976:	86 2f       	mov	r24, r22
     978:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     97a:	80 fd       	sbrc	r24, 0
     97c:	03 c0       	rjmp	.+6      	; 0x984 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     97e:	50 93 50 21 	sts	0x2150, r21
     982:	06 c0       	rjmp	.+12     	; 0x990 <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 93 50 21 	sts	0x2150, r24
     98a:	02 c0       	rjmp	.+4      	; 0x990 <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     98c:	10 92 50 21 	sts	0x2150, r1
    last_a = current_a;
     990:	40 93 51 21 	sts	0x2151, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	08 95       	ret

000009aa <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
    
    //set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     9aa:	08 95       	ret

000009ac <__vector_91>:
#include <stdint.h>

static Sequencer sequencer;
static MidiDevice midi_device;

ISR(USARTD1_RXC_vect){
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
    midi_device_input(&midi_device,1,&(USARTD1.DATA));
     9d2:	cc e7       	ldi	r28, 0x7C	; 124
     9d4:	d2 e2       	ldi	r29, 0x22	; 34
     9d6:	ce 01       	movw	r24, r28
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	40 eb       	ldi	r20, 0xB0	; 176
     9dc:	59 e0       	ldi	r21, 0x09	; 9
     9de:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_process(&midi_device);
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <midi_device_process>
}
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_17>:

//interrupt to start the next note
ISR(TCC0_CCB_vect){
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(&sequencer, 0);
     a30:	82 e5       	ldi	r24, 0x52	; 82
     a32:	91 e2       	ldi	r25, 0x21	; 33
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	0e 94 93 08 	call	0x1126	; 0x1126 <continue_sequencer>
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(&sequencer, 0);
     a7e:	82 e5       	ldi	r24, 0x52	; 82
     a80:	91 e2       	ldi	r25, 0x21	; 33
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 67 0a 	call	0x14ce	; 0x14ce <stop_sequencer>
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <fake_midi_noteon_input>:


void fake_midi_noteon_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <fake_midi_noteon_input+0xa>
     ab4:	0f 92       	push	r0
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	8c 01       	movw	r16, r24
     abc:	6a 83       	std	Y+2, r22	; 0x02
     abe:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteon_byte1 = 144;
     ac0:	80 e9       	ldi	r24, 0x90	; 144
     ac2:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteon_byte1);
     ac4:	c8 01       	movw	r24, r16
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	ae 01       	movw	r20, r28
     aca:	4f 5f       	subi	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     ad2:	c8 01       	movw	r24, r16
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	ae 01       	movw	r20, r28
     ad8:	4e 5f       	subi	r20, 0xFE	; 254
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     ae0:	c8 01       	movw	r24, r16
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	ae 01       	movw	r20, r28
     ae6:	4d 5f       	subi	r20, 0xFD	; 253
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_process(midi_device);
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <midi_device_process>
}
     af4:	23 96       	adiw	r28, 0x03	; 3
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <fake_midi_noteff_input>:

void fake_midi_noteff_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <fake_midi_noteff_input+0xa>
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 01       	movw	r16, r24
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteoff_byte1 = 128;
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteoff_byte1);
     b1e:	c8 01       	movw	r24, r16
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	ae 01       	movw	r20, r28
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     b2c:	c8 01       	movw	r24, r16
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	ae 01       	movw	r20, r28
     b32:	4e 5f       	subi	r20, 0xFE	; 254
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     b3a:	c8 01       	movw	r24, r16
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	ae 01       	movw	r20, r28
     b40:	4d 5f       	subi	r20, 0xFD	; 253
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_device_input>
    midi_device_process(midi_device);
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <midi_device_process>
}
     b4e:	23 96       	adiw	r28, 0x03	; 3
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <main>:

int main(void) {
     b5e:	1f 93       	push	r17
    const initial_BPM = 120;


    uint8_t pitch = 100;
    
    initialize_hardware();
     b60:	0e 94 02 03 	call	0x604	; 0x604 <initialize_hardware>
    initialize_sequencer(&sequencer);
     b64:	82 e5       	ldi	r24, 0x52	; 82
     b66:	91 e2       	ldi	r25, 0x21	; 33
     b68:	0e 94 20 08 	call	0x1040	; 0x1040 <initialize_sequencer>
	initialize_serial_midi(&midi_device, &sequencer);
     b6c:	8c e7       	ldi	r24, 0x7C	; 124
     b6e:	92 e2       	ldi	r25, 0x22	; 34
     b70:	62 e5       	ldi	r22, 0x52	; 82
     b72:	71 e2       	ldi	r23, 0x21	; 33
     b74:	0e 94 11 0b 	call	0x1622	; 0x1622 <initialize_serial_midi>
    initialize_beat_clock(initial_BPM);
     b78:	88 e7       	ldi	r24, 0x78	; 120
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
    set_seven_segment_LEDs(get_BPM());
     b80:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     b84:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>

int main(void) {
    const initial_BPM = 120;


    uint8_t pitch = 100;
     b88:	14 e6       	ldi	r17, 0x64	; 100
	initialize_serial_midi(&midi_device, &sequencer);
    initialize_beat_clock(initial_BPM);
    set_seven_segment_LEDs(get_BPM());

    while(1){
        read_hardware();
     b8a:	0e 94 89 03 	call	0x712	; 0x712 <read_hardware>
        
        if (get_encoder() == TURN_CW)
     b8e:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	11 f4       	brne	.+4      	; 0xb9a <main+0x3c>
            pitch++;
     b96:	1f 5f       	subi	r17, 0xFF	; 255
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <main+0x46>
        else if (get_encoder() == TURN_CCW)
     b9a:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	09 f4       	brne	.+2      	; 0xba4 <main+0x46>
            pitch -= 1;    
     ba2:	11 50       	subi	r17, 0x01	; 1
        
        set_seven_segment_LEDs((uint16_t) pitch);
     ba4:	81 2f       	mov	r24, r17
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>
        
        if (get_encoder_switch_edge() == EDGE_RISE)
     bac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_encoder_switch_edge>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	31 f4       	brne	.+12     	; 0xbc0 <main+0x62>
            fake_midi_noteon_input(&midi_device, pitch,100);
     bb4:	8c e7       	ldi	r24, 0x7C	; 124
     bb6:	92 e2       	ldi	r25, 0x22	; 34
     bb8:	61 2f       	mov	r22, r17
     bba:	44 e6       	ldi	r20, 0x64	; 100
     bbc:	0e 94 55 05 	call	0xaaa	; 0xaaa <fake_midi_noteon_input>
        
        if (get_pushbutton_switch_edge() == EDGE_RISE)
     bc0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <get_pushbutton_switch_edge>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f7       	brne	.-62     	; 0xb8a <main+0x2c>
            fake_midi_noteff_input(&midi_device, pitch,100);
     bc8:	8c e7       	ldi	r24, 0x7C	; 124
     bca:	92 e2       	ldi	r25, 0x22	; 34
     bcc:	61 2f       	mov	r22, r17
     bce:	44 e6       	ldi	r20, 0x64	; 100
     bd0:	0e 94 82 05 	call	0xb04	; 0xb04 <fake_midi_noteff_input>
     bd4:	da cf       	rjmp	.-76     	; 0xb8a <main+0x2c>

00000bd6 <initialize_note_list>:
    note->previous_note_by_trigger = NULL;
}

//Reset all data in the note list
//Reset all data in each note of the list 
void initialize_note_list(NoteList* note_list){
     bd6:	fc 01       	movw	r30, r24
    uint8_t i;

    note_list->length = 0;
     bd8:	10 82       	st	Z, r1
    note_list->head_pitch = NULL;
     bda:	11 82       	std	Z+1, r1	; 0x01
     bdc:	12 82       	std	Z+2, r1	; 0x02
    note_list->tail_pitch = NULL;
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	14 82       	std	Z+4, r1	; 0x04
    note_list->head_trigger = NULL;
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	16 82       	std	Z+6, r1	; 0x06
    note_list->tail_trigger = NULL;
     be6:	17 82       	std	Z+7, r1	; 0x07
     be8:	10 86       	std	Z+8, r1	; 0x08
     bea:	80 e1       	ldi	r24, 0x10	; 16
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     bec:	11 86       	std	Z+9, r1	; 0x09
    note->velocity = 0;
     bee:	12 86       	std	Z+10, r1	; 0x0a
    note->status = 0;
     bf0:	13 86       	std	Z+11, r1	; 0x0b
    note->next_note_by_pitch = NULL;
     bf2:	14 86       	std	Z+12, r1	; 0x0c
     bf4:	15 86       	std	Z+13, r1	; 0x0d
    note->previous_note_by_pitch = NULL;
     bf6:	16 86       	std	Z+14, r1	; 0x0e
     bf8:	17 86       	std	Z+15, r1	; 0x0f
    note->next_note_by_trigger = NULL;
     bfa:	10 8a       	std	Z+16, r1	; 0x10
     bfc:	11 8a       	std	Z+17, r1	; 0x11
    note->previous_note_by_trigger = NULL;
     bfe:	12 8a       	std	Z+18, r1	; 0x12
     c00:	13 8a       	std	Z+19, r1	; 0x13
     c02:	81 50       	subi	r24, 0x01	; 1
     c04:	3b 96       	adiw	r30, 0x0b	; 11
    note_list->head_pitch = NULL;
    note_list->tail_pitch = NULL;
    note_list->head_trigger = NULL;
    note_list->tail_trigger = NULL;

    for(i = 0; i<MAX_LIST_NOTES; i++)
     c06:	88 23       	and	r24, r24
     c08:	89 f7       	brne	.-30     	; 0xbec <initialize_note_list+0x16>
        free_note(&(note_list->note_bank[i]));
}
     c0a:	08 95       	ret

00000c0c <remove_note_by_pitch>:
}

//Search for note by pitch in the note list
//If it is found, adjust surrounding pointers
//And remove and free the note
bool remove_note_by_pitch(NoteList* note_list, uint8_t pitch){
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     c12:	a1 81       	ldd	r26, Z+1	; 0x01
     c14:	b2 81       	ldd	r27, Z+2	; 0x02
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <remove_note_by_pitch+0x1a>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     c18:	8c 91       	ld	r24, X
     c1a:	86 17       	cp	r24, r22
     c1c:	38 f4       	brcc	.+14     	; 0xc2c <remove_note_by_pitch+0x20>
            break;

        target_note = target_note->next_note_by_pitch;
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	0d 90       	ld	r0, X+
     c22:	bc 91       	ld	r27, X
     c24:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     c26:	10 97       	sbiw	r26, 0x00	; 0
     c28:	b9 f7       	brne	.-18     	; 0xc18 <remove_note_by_pitch+0xc>
     c2a:	5d c0       	rjmp	.+186    	; 0xce6 <remove_note_by_pitch+0xda>
    //note not found (reached the end of the note list)
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
     c2c:	86 17       	cp	r24, r22
     c2e:	09 f0       	breq	.+2      	; 0xc32 <remove_note_by_pitch+0x26>
     c30:	5a c0       	rjmp	.+180    	; 0xce6 <remove_note_by_pitch+0xda>
        return 0;
        
    //otherwise, the note was found and ready to be removed
    note_list->length += -1;
     c32:	80 81       	ld	r24, Z
     c34:	81 50       	subi	r24, 0x01	; 1
     c36:	80 83       	st	Z, r24
    
    //check for empty list
    if (note_list->length == 0){
     c38:	88 23       	and	r24, r24
     c3a:	21 f4       	brne	.+8      	; 0xc44 <remove_note_by_pitch+0x38>
        initialize_note_list(note_list);
     c3c:	cf 01       	movw	r24, r30
     c3e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <initialize_note_list>
     c42:	4f c0       	rjmp	.+158    	; 0xce2 <remove_note_by_pitch+0xd6>
    }
    
    //adjust surrounding pointers
    //set new heads and tails if necessary
    
    if (dead_note->previous_note_by_pitch)
     c44:	15 96       	adiw	r26, 0x05	; 5
     c46:	2d 91       	ld	r18, X+
     c48:	3c 91       	ld	r19, X
     c4a:	16 97       	sbiw	r26, 0x06	; 6
     c4c:	13 96       	adiw	r26, 0x03	; 3
     c4e:	8d 91       	ld	r24, X+
     c50:	9c 91       	ld	r25, X
     c52:	14 97       	sbiw	r26, 0x04	; 4
     c54:	21 15       	cp	r18, r1
     c56:	31 05       	cpc	r19, r1
     c58:	21 f0       	breq	.+8      	; 0xc62 <remove_note_by_pitch+0x56>
        dead_note->previous_note_by_pitch->next_note_by_pitch = dead_note->next_note_by_pitch;
     c5a:	e9 01       	movw	r28, r18
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <remove_note_by_pitch+0x5a>
    else
        note_list->head_pitch = dead_note->next_note_by_pitch;
     c62:	81 83       	std	Z+1, r24	; 0x01
     c64:	92 83       	std	Z+2, r25	; 0x02
    
    if (dead_note->next_note_by_pitch)
     c66:	13 96       	adiw	r26, 0x03	; 3
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	14 97       	sbiw	r26, 0x04	; 4
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	21 f0       	breq	.+8      	; 0xc7a <remove_note_by_pitch+0x6e>
        dead_note->next_note_by_pitch->previous_note_by_pitch = dead_note->previous_note_by_pitch;
     c72:	ec 01       	movw	r28, r24
     c74:	2d 83       	std	Y+5, r18	; 0x05
     c76:	3e 83       	std	Y+6, r19	; 0x06
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <remove_note_by_pitch+0x72>
    else
        note_list->tail_pitch = dead_note->previous_note_by_pitch;
     c7a:	23 83       	std	Z+3, r18	; 0x03
     c7c:	34 83       	std	Z+4, r19	; 0x04
        
    if (dead_note->previous_note_by_trigger)
     c7e:	19 96       	adiw	r26, 0x09	; 9
     c80:	cd 91       	ld	r28, X+
     c82:	dc 91       	ld	r29, X
     c84:	1a 97       	sbiw	r26, 0x0a	; 10
     c86:	17 96       	adiw	r26, 0x07	; 7
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	18 97       	sbiw	r26, 0x08	; 8
     c8e:	20 97       	sbiw	r28, 0x00	; 0
     c90:	19 f0       	breq	.+6      	; 0xc98 <remove_note_by_pitch+0x8c>
        dead_note->previous_note_by_trigger->next_note_by_trigger = dead_note->next_note_by_trigger;
     c92:	8f 83       	std	Y+7, r24	; 0x07
     c94:	98 87       	std	Y+8, r25	; 0x08
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <remove_note_by_pitch+0x90>
    else
        note_list->head_trigger = dead_note->next_note_by_trigger;
     c98:	85 83       	std	Z+5, r24	; 0x05
     c9a:	96 83       	std	Z+6, r25	; 0x06
    
    if (dead_note->next_note_by_trigger)
     c9c:	17 96       	adiw	r26, 0x07	; 7
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	18 97       	sbiw	r26, 0x08	; 8
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <remove_note_by_pitch+0xa4>
        dead_note->next_note_by_trigger->previous_note_by_trigger = dead_note->previous_note_by_trigger;
     ca8:	fc 01       	movw	r30, r24
     caa:	c1 87       	std	Z+9, r28	; 0x09
     cac:	d2 87       	std	Z+10, r29	; 0x0a
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <remove_note_by_pitch+0xa8>
    else
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
     cb0:	c7 83       	std	Z+7, r28	; 0x07
     cb2:	d0 87       	std	Z+8, r29	; 0x08
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     cb4:	1c 92       	st	X, r1
    note->velocity = 0;
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	1c 92       	st	X, r1
     cba:	11 97       	sbiw	r26, 0x01	; 1
    note->status = 0;
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	1c 92       	st	X, r1
     cc0:	12 97       	sbiw	r26, 0x02	; 2
    note->next_note_by_pitch = NULL;
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	1d 92       	st	X+, r1
     cc6:	1c 92       	st	X, r1
     cc8:	14 97       	sbiw	r26, 0x04	; 4
    note->previous_note_by_pitch = NULL;
     cca:	15 96       	adiw	r26, 0x05	; 5
     ccc:	1d 92       	st	X+, r1
     cce:	1c 92       	st	X, r1
     cd0:	16 97       	sbiw	r26, 0x06	; 6
    note->next_note_by_trigger = NULL;
     cd2:	17 96       	adiw	r26, 0x07	; 7
     cd4:	1d 92       	st	X+, r1
     cd6:	1c 92       	st	X, r1
     cd8:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = NULL;
     cda:	19 96       	adiw	r26, 0x09	; 9
     cdc:	1d 92       	st	X+, r1
     cde:	1c 92       	st	X, r1
     ce0:	1a 97       	sbiw	r26, 0x0a	; 10
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <remove_note_by_pitch+0xdc>
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
        return 0;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <insert_note>:
}

//insert new note in complete order
//return 0 if unsuccessful (no free note banks)
//return 1 if successful
bool insert_note(NoteList* note_list, uint8_t pitch, uint8_t velocity){
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     cf8:	a1 81       	ldd	r26, Z+1	; 0x01
     cfa:	b2 81       	ldd	r27, Z+2	; 0x02
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <insert_note+0x1e>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     cfe:	8c 91       	ld	r24, X
     d00:	86 17       	cp	r24, r22
     d02:	30 f4       	brcc	.+12     	; 0xd10 <insert_note+0x22>
            break;

        target_note = target_note->next_note_by_pitch;
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	0d 90       	ld	r0, X+
     d08:	bc 91       	ld	r27, X
     d0a:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     d0c:	10 97       	sbiw	r26, 0x00	; 0
     d0e:	b9 f7       	brne	.-18     	; 0xcfe <insert_note+0x10>
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     d10:	8c 91       	ld	r24, X
     d12:	86 17       	cp	r24, r22
     d14:	09 f0       	breq	.+2      	; 0xd18 <insert_note+0x2a>
     d16:	48 c0       	rjmp	.+144    	; 0xda8 <insert_note+0xba>
    return 1;
}

//Change the velocity of an existing note
static Note* update_note_velocity(Note* note, uint8_t velocity){
    note->velocity = velocity;
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	4c 93       	st	X, r20
     d1c:	11 97       	sbiw	r26, 0x01	; 1
//Place note at the end of the trigger order
//If the note is the only member of the note_list, assign it to the head    
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is already at the tail (also catches the case of a single-member list)
    if (note_list->tail_trigger == note)
     d1e:	87 81       	ldd	r24, Z+7	; 0x07
     d20:	90 85       	ldd	r25, Z+8	; 0x08
     d22:	8a 17       	cp	r24, r26
     d24:	9b 07       	cpc	r25, r27
     d26:	09 f4       	brne	.+2      	; 0xd2a <insert_note+0x3c>
     d28:	d0 c0       	rjmp	.+416    	; 0xeca <insert_note+0x1dc>
        return;
            
    //check for head
    if (note_list->head_trigger == note){
     d2a:	85 81       	ldd	r24, Z+5	; 0x05
     d2c:	96 81       	ldd	r25, Z+6	; 0x06
     d2e:	8a 17       	cp	r24, r26
     d30:	9b 07       	cpc	r25, r27
     d32:	49 f4       	brne	.+18     	; 0xd46 <insert_note+0x58>
        //update head and remove note
        note_list->head_trigger = note->next_note_by_trigger;
     d34:	17 96       	adiw	r26, 0x07	; 7
     d36:	cd 91       	ld	r28, X+
     d38:	dc 91       	ld	r29, X
     d3a:	18 97       	sbiw	r26, 0x08	; 8
     d3c:	c5 83       	std	Z+5, r28	; 0x05
     d3e:	d6 83       	std	Z+6, r29	; 0x06
        note_list->head_trigger->previous_note_by_trigger = NULL;
     d40:	19 86       	std	Y+9, r1	; 0x09
     d42:	1a 86       	std	Y+10, r1	; 0x0a
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <insert_note+0x7c>
    }
    else{
        //otherwise remove note normally
        note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     d46:	19 96       	adiw	r26, 0x09	; 9
     d48:	2d 91       	ld	r18, X+
     d4a:	3c 91       	ld	r19, X
     d4c:	1a 97       	sbiw	r26, 0x0a	; 10
     d4e:	17 96       	adiw	r26, 0x07	; 7
     d50:	8d 91       	ld	r24, X+
     d52:	9c 91       	ld	r25, X
     d54:	18 97       	sbiw	r26, 0x08	; 8
     d56:	e9 01       	movw	r28, r18
     d58:	8f 83       	std	Y+7, r24	; 0x07
     d5a:	98 87       	std	Y+8, r25	; 0x08
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     d5c:	17 96       	adiw	r26, 0x07	; 7
     d5e:	8d 91       	ld	r24, X+
     d60:	9c 91       	ld	r25, X
     d62:	18 97       	sbiw	r26, 0x08	; 8
     d64:	ec 01       	movw	r28, r24
     d66:	29 87       	std	Y+9, r18	; 0x09
     d68:	3a 87       	std	Y+10, r19	; 0x0a

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     d6a:	80 81       	ld	r24, Z
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	69 f4       	brne	.+26     	; 0xd8a <insert_note+0x9c>
        note_list->tail_trigger = note;
     d70:	a7 83       	std	Z+7, r26	; 0x07
     d72:	b0 87       	std	Z+8, r27	; 0x08
        note_list->head_trigger = note;
     d74:	a5 83       	std	Z+5, r26	; 0x05
     d76:	b6 83       	std	Z+6, r27	; 0x06
        note->next_note_by_trigger = NULL;
     d78:	17 96       	adiw	r26, 0x07	; 7
     d7a:	1d 92       	st	X+, r1
     d7c:	1c 92       	st	X, r1
     d7e:	18 97       	sbiw	r26, 0x08	; 8
        note->previous_note_by_trigger = NULL;
     d80:	19 96       	adiw	r26, 0x09	; 9
     d82:	1d 92       	st	X+, r1
     d84:	1c 92       	st	X, r1
     d86:	1a 97       	sbiw	r26, 0x0a	; 10
     d88:	a3 c0       	rjmp	.+326    	; 0xed0 <insert_note+0x1e2>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     d8a:	17 96       	adiw	r26, 0x07	; 7
     d8c:	1d 92       	st	X+, r1
     d8e:	1c 92       	st	X, r1
     d90:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = note_list->tail_trigger;
     d92:	c7 81       	ldd	r28, Z+7	; 0x07
     d94:	d0 85       	ldd	r29, Z+8	; 0x08
     d96:	19 96       	adiw	r26, 0x09	; 9
     d98:	cd 93       	st	X+, r28
     d9a:	dc 93       	st	X, r29
     d9c:	1a 97       	sbiw	r26, 0x0a	; 10
    note_list->tail_trigger->next_note_by_trigger = note;
     d9e:	af 83       	std	Y+7, r26	; 0x07
     da0:	b8 87       	std	Y+8, r27	; 0x08
    note_list->tail_trigger = note;
     da2:	a7 83       	std	Z+7, r26	; 0x07
     da4:	b0 87       	std	Z+8, r27	; 0x08
     da6:	91 c0       	rjmp	.+290    	; 0xeca <insert_note+0x1dc>
     da8:	ef 01       	movw	r28, r30
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    note->previous_note_by_trigger = note_list->tail_trigger;
    note_list->tail_trigger->next_note_by_trigger = note;
    note_list->tail_trigger = note;
     dae:	28 2f       	mov	r18, r24
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     db0:	3b 85       	ldd	r19, Y+11	; 0x0b
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	33 23       	and	r19, r19
     db6:	e1 f4       	brne	.+56     	; 0xdf0 <insert_note+0x102>
            note_list->note_bank[i].status = 1;
     db8:	0b e0       	ldi	r16, 0x0B	; 11
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	80 9f       	mul	r24, r16
     dbe:	e0 01       	movw	r28, r0
     dc0:	81 9f       	mul	r24, r17
     dc2:	d0 0d       	add	r29, r0
     dc4:	90 9f       	mul	r25, r16
     dc6:	d0 0d       	add	r29, r0
     dc8:	11 24       	eor	r1, r1
     dca:	ce 0f       	add	r28, r30
     dcc:	df 1f       	adc	r29, r31
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	88 83       	st	Y, r24
            return &(note_list->note_bank[i]);
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	20 9f       	mul	r18, r16
     dd6:	e0 01       	movw	r28, r0
     dd8:	21 9f       	mul	r18, r17
     dda:	d0 0d       	add	r29, r0
     ddc:	30 9f       	mul	r19, r16
     dde:	d0 0d       	add	r29, r0
     de0:	11 24       	eor	r1, r1
     de2:	ce 01       	movw	r24, r28
     de4:	09 96       	adiw	r24, 0x09	; 9
     de6:	8e 0f       	add	r24, r30
     de8:	9f 1f       	adc	r25, r31
//return NULL otherwise
static Note* add_note_at_previous_pitch(NoteList* note_list, Note* target_note, uint8_t pitch, uint8_t velocity){
    Note* new_note = allocate_note(note_list);
    
    //return NULL if there are no more notes
    if (new_note == NULL)
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	31 f4       	brne	.+12     	; 0xdfa <insert_note+0x10c>
     dee:	6f c0       	rjmp	.+222    	; 0xece <insert_note+0x1e0>
     df0:	2b 96       	adiw	r28, 0x0b	; 11
//Iterate through the bank of notes to find an available note to use
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	91 05       	cpc	r25, r1
     df6:	d9 f6       	brne	.-74     	; 0xdae <insert_note+0xc0>
     df8:	6a c0       	rjmp	.+212    	; 0xece <insert_note+0x1e0>
    
    //return NULL if there are no more notes
    if (new_note == NULL)
        return NULL;
    
    note_list->length += 1;
     dfa:	50 81       	ld	r21, Z
     dfc:	5f 5f       	subi	r21, 0xFF	; 255
     dfe:	50 83       	st	Z, r21
    
    //set data of new note
    new_note->pitch = pitch;
     e00:	ce 0f       	add	r28, r30
     e02:	df 1f       	adc	r29, r31
     e04:	69 87       	std	Y+9, r22	; 0x09
    new_note->velocity = velocity;
     e06:	4a 87       	std	Y+10, r20	; 0x0a
    
    //new_note is the only member of the list
    if (note_list->length == 1){
     e08:	51 30       	cpi	r21, 0x01	; 1
     e0a:	39 f4       	brne	.+14     	; 0xe1a <insert_note+0x12c>
        new_note->next_note_by_pitch = NULL;
     e0c:	1c 86       	std	Y+12, r1	; 0x0c
     e0e:	1d 86       	std	Y+13, r1	; 0x0d
        new_note->previous_note_by_pitch = NULL;
     e10:	1e 86       	std	Y+14, r1	; 0x0e
     e12:	1f 86       	std	Y+15, r1	; 0x0f
        note_list->head_pitch = new_note;
     e14:	81 83       	std	Z+1, r24	; 0x01
     e16:	92 83       	std	Z+2, r25	; 0x02
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <insert_note+0x144>
        note_list->tail_pitch = new_note;
        return new_note;        
    }
    
    //if new_note isn't the only note, but target_note is NULL, new_note is at the tail pitch
    if (target_note == NULL){
     e1a:	10 97       	sbiw	r26, 0x00	; 0
     e1c:	69 f4       	brne	.+26     	; 0xe38 <insert_note+0x14a>
        new_note->previous_note_by_pitch = note_list->tail_pitch;
     e1e:	a3 81       	ldd	r26, Z+3	; 0x03
     e20:	b4 81       	ldd	r27, Z+4	; 0x04
     e22:	ae 87       	std	Y+14, r26	; 0x0e
     e24:	bf 87       	std	Y+15, r27	; 0x0f
        new_note->next_note_by_pitch = NULL;
     e26:	1c 86       	std	Y+12, r1	; 0x0c
     e28:	1d 86       	std	Y+13, r1	; 0x0d
        note_list->tail_pitch->next_note_by_pitch = new_note;
     e2a:	13 96       	adiw	r26, 0x03	; 3
     e2c:	8d 93       	st	X+, r24
     e2e:	9c 93       	st	X, r25
     e30:	14 97       	sbiw	r26, 0x04	; 4
        note_list->tail_pitch = new_note;
     e32:	83 83       	std	Z+3, r24	; 0x03
     e34:	94 83       	std	Z+4, r25	; 0x04
     e36:	51 c0       	rjmp	.+162    	; 0xeda <insert_note+0x1ec>
        return new_note;
    }
    
    //otherwise, adjust pointers
    new_note->next_note_by_pitch = target_note;
     e38:	ac 87       	std	Y+12, r26	; 0x0c
     e3a:	bd 87       	std	Y+13, r27	; 0x0d
    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     e3c:	15 96       	adiw	r26, 0x05	; 5
     e3e:	4d 91       	ld	r20, X+
     e40:	5c 91       	ld	r21, X
     e42:	16 97       	sbiw	r26, 0x06	; 6
     e44:	4e 87       	std	Y+14, r20	; 0x0e
     e46:	5f 87       	std	Y+15, r21	; 0x0f
    target_note->previous_note_by_pitch = new_note;
     e48:	15 96       	adiw	r26, 0x05	; 5
     e4a:	8d 93       	st	X+, r24
     e4c:	9c 93       	st	X, r25
     e4e:	16 97       	sbiw	r26, 0x06	; 6

    //check for head
    if (new_note->previous_note_by_pitch == NULL)
     e50:	ae 85       	ldd	r26, Y+14	; 0x0e
     e52:	bf 85       	ldd	r27, Y+15	; 0x0f
     e54:	10 97       	sbiw	r26, 0x00	; 0
     e56:	19 f4       	brne	.+6      	; 0xe5e <insert_note+0x170>
        note_list->head_pitch = new_note;
     e58:	81 83       	std	Z+1, r24	; 0x01
     e5a:	92 83       	std	Z+2, r25	; 0x02
     e5c:	3e c0       	rjmp	.+124    	; 0xeda <insert_note+0x1ec>
    else
        new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     e5e:	13 96       	adiw	r26, 0x03	; 3
     e60:	8d 93       	st	X+, r24
     e62:	9c 93       	st	X, r25
     e64:	14 97       	sbiw	r26, 0x04	; 4
     e66:	39 c0       	rjmp	.+114    	; 0xeda <insert_note+0x1ec>
//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
        note_list->tail_trigger = note;
     e68:	87 83       	std	Z+7, r24	; 0x07
     e6a:	90 87       	std	Z+8, r25	; 0x08
        note_list->head_trigger = note;
     e6c:	85 83       	std	Z+5, r24	; 0x05
     e6e:	96 83       	std	Z+6, r25	; 0x06
        note->next_note_by_trigger = NULL;
     e70:	8b e0       	ldi	r24, 0x0B	; 11
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	28 9f       	mul	r18, r24
     e76:	d0 01       	movw	r26, r0
     e78:	29 9f       	mul	r18, r25
     e7a:	b0 0d       	add	r27, r0
     e7c:	38 9f       	mul	r19, r24
     e7e:	b0 0d       	add	r27, r0
     e80:	11 24       	eor	r1, r1
     e82:	ae 0f       	add	r26, r30
     e84:	bf 1f       	adc	r27, r31
     e86:	50 96       	adiw	r26, 0x10	; 16
     e88:	1d 92       	st	X+, r1
     e8a:	1c 92       	st	X, r1
     e8c:	51 97       	sbiw	r26, 0x11	; 17
        note->previous_note_by_trigger = NULL;
     e8e:	52 96       	adiw	r26, 0x12	; 18
     e90:	1d 92       	st	X+, r1
     e92:	1c 92       	st	X, r1
     e94:	53 97       	sbiw	r26, 0x13	; 19
     e96:	19 c0       	rjmp	.+50     	; 0xeca <insert_note+0x1dc>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     e98:	4b e0       	ldi	r20, 0x0B	; 11
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	24 9f       	mul	r18, r20
     e9e:	d0 01       	movw	r26, r0
     ea0:	25 9f       	mul	r18, r21
     ea2:	b0 0d       	add	r27, r0
     ea4:	34 9f       	mul	r19, r20
     ea6:	b0 0d       	add	r27, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ae 0f       	add	r26, r30
     eac:	bf 1f       	adc	r27, r31
     eae:	50 96       	adiw	r26, 0x10	; 16
     eb0:	1d 92       	st	X+, r1
     eb2:	1c 92       	st	X, r1
     eb4:	51 97       	sbiw	r26, 0x11	; 17
    note->previous_note_by_trigger = note_list->tail_trigger;
     eb6:	c7 81       	ldd	r28, Z+7	; 0x07
     eb8:	d0 85       	ldd	r29, Z+8	; 0x08
     eba:	52 96       	adiw	r26, 0x12	; 18
     ebc:	cd 93       	st	X+, r28
     ebe:	dc 93       	st	X, r29
     ec0:	53 97       	sbiw	r26, 0x13	; 19
    note_list->tail_trigger->next_note_by_trigger = note;
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	98 87       	std	Y+8, r25	; 0x08
    note_list->tail_trigger = note;
     ec6:	87 83       	std	Z+7, r24	; 0x07
     ec8:	90 87       	std	Z+8, r25	; 0x08
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <insert_note+0x1e2>
    }
    else{
        //if the note is new, add it in the proper pitch position
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
     ece:	80 e0       	ldi	r24, 0x00	; 0
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     eda:	40 81       	ld	r20, Z
     edc:	41 30       	cpi	r20, 0x01	; 1
     ede:	e1 f6       	brne	.-72     	; 0xe98 <insert_note+0x1aa>
     ee0:	c3 cf       	rjmp	.-122    	; 0xe68 <insert_note+0x17a>

00000ee2 <calculate_start_time_increment>:
#include "hardware.h"

#include <avr/interrupt.h>
#include <avr/io.h>

static void calculate_start_time_increment(Sequencer* sequencer){
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <calculate_start_time_increment+0xa>
     eec:	00 d0       	rcall	.+0      	; 0xeee <calculate_start_time_increment+0xc>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
     ef4:	80 91 28 08 	lds	r24, 0x0828
     ef8:	90 91 29 08 	lds	r25, 0x0829
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	ab 83       	std	Y+3, r26	; 0x03
     f06:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
     f08:	f8 01       	movw	r30, r16
     f0a:	80 89       	ldd	r24, Z+16	; 0x10
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	89 f1       	breq	.+98     	; 0xf72 <calculate_start_time_increment+0x90>
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	30 f4       	brcc	.+12     	; 0xf20 <calculate_start_time_increment+0x3e>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	69 f0       	breq	.+26     	; 0xf32 <calculate_start_time_increment+0x50>
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	09 f0       	breq	.+2      	; 0xf1e <calculate_start_time_increment+0x3c>
     f1c:	6f c0       	rjmp	.+222    	; 0xffc <calculate_start_time_increment+0x11a>
     f1e:	1c c0       	rjmp	.+56     	; 0xf58 <calculate_start_time_increment+0x76>
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	09 f4       	brne	.+2      	; 0xf26 <calculate_start_time_increment+0x44>
     f24:	4d c0       	rjmp	.+154    	; 0xfc0 <calculate_start_time_increment+0xde>
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	68 f1       	brcs	.+90     	; 0xf84 <calculate_start_time_increment+0xa2>
     f2a:	86 30       	cpi	r24, 0x06	; 6
     f2c:	09 f0       	breq	.+2      	; 0xf30 <calculate_start_time_increment+0x4e>
     f2e:	66 c0       	rjmp	.+204    	; 0xffc <calculate_start_time_increment+0x11a>
     f30:	56 c0       	rjmp	.+172    	; 0xfde <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1:    new_start_time_increment *= 3;
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	3a 81       	ldd	r19, Y+2	; 0x02
     f36:	4b 81       	ldd	r20, Y+3	; 0x03
     f38:	5c 81       	ldd	r21, Y+4	; 0x04
     f3a:	da 01       	movw	r26, r20
     f3c:	c9 01       	movw	r24, r18
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	82 0f       	add	r24, r18
     f48:	93 1f       	adc	r25, r19
     f4a:	a4 1f       	adc	r26, r20
     f4c:	b5 1f       	adc	r27, r21
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	ab 83       	std	Y+3, r26	; 0x03
     f54:	bc 83       	std	Y+4, r27	; 0x04
     f56:	43 c0       	rjmp	.+134    	; 0xfde <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	ab 81       	ldd	r26, Y+3	; 0x03
     f5e:	bc 81       	ldd	r27, Y+4	; 0x04
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	ab 83       	std	Y+3, r26	; 0x03
     f6e:	bc 83       	std	Y+4, r27	; 0x04
     f70:	27 c0       	rjmp	.+78     	; 0xfc0 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	ab 81       	ldd	r26, Y+3	; 0x03
     f78:	bc 81       	ldd	r27, Y+4	; 0x04
     f7a:	b6 95       	lsr	r27
     f7c:	a7 95       	ror	r26
     f7e:	97 95       	ror	r25
     f80:	87 95       	ror	r24
     f82:	38 c0       	rjmp	.+112    	; 0xff4 <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
     f84:	29 81       	ldd	r18, Y+1	; 0x01
     f86:	3a 81       	ldd	r19, Y+2	; 0x02
     f88:	4b 81       	ldd	r20, Y+3	; 0x03
     f8a:	5c 81       	ldd	r21, Y+4	; 0x04
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	aa 1f       	adc	r26, r26
     f96:	bb 1f       	adc	r27, r27
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	a4 1f       	adc	r26, r20
     f9e:	b5 1f       	adc	r27, r21
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	ab 83       	std	Y+3, r26	; 0x03
     fa6:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	ab 81       	ldd	r26, Y+3	; 0x03
     fae:	bc 81       	ldd	r27, Y+4	; 0x04
     fb0:	33 e0       	ldi	r19, 0x03	; 3
     fb2:	b6 95       	lsr	r27
     fb4:	a7 95       	ror	r26
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	3a 95       	dec	r19
     fbc:	d1 f7       	brne	.-12     	; 0xfb2 <calculate_start_time_increment+0xd0>
     fbe:	1a c0       	rjmp	.+52     	; 0xff4 <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	7a 81       	ldd	r23, Y+2	; 0x02
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	23 e0       	ldi	r18, 0x03	; 3
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
     fd4:	29 83       	std	Y+1, r18	; 0x01
     fd6:	3a 83       	std	Y+2, r19	; 0x02
     fd8:	4b 83       	std	Y+3, r20	; 0x03
     fda:	5c 83       	std	Y+4, r21	; 0x04
                break;
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	ab 81       	ldd	r26, Y+3	; 0x03
     fe4:	bc 81       	ldd	r27, Y+4	; 0x04
     fe6:	22 e0       	ldi	r18, 0x02	; 2
     fe8:	b6 95       	lsr	r27
     fea:	a7 95       	ror	r26
     fec:	97 95       	ror	r25
     fee:	87 95       	ror	r24
     ff0:	2a 95       	dec	r18
     ff2:	d1 f7       	brne	.-12     	; 0xfe8 <calculate_start_time_increment+0x106>
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	ab 83       	std	Y+3, r26	; 0x03
     ffa:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
     ffc:	69 81       	ldd	r22, Y+1	; 0x01
     ffe:	7a 81       	ldd	r23, Y+2	; 0x02
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	f8 01       	movw	r30, r16
    1006:	27 81       	ldd	r18, Z+7	; 0x07
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	44 27       	eor	r20, r20
    1010:	37 fd       	sbrc	r19, 7
    1012:	40 95       	com	r20
    1014:	54 2f       	mov	r21, r20
    1016:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
    101a:	29 83       	std	Y+1, r18	; 0x01
    101c:	3a 83       	std	Y+2, r19	; 0x02
    101e:	4b 83       	std	Y+3, r20	; 0x03
    1020:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	ab 81       	ldd	r26, Y+3	; 0x03
    1028:	bc 81       	ldd	r27, Y+4	; 0x04
    102a:	f8 01       	movw	r30, r16
    102c:	81 87       	std	Z+9, r24	; 0x09
    102e:	92 87       	std	Z+10, r25	; 0x0a
}
    1030:	24 96       	adiw	r28, 0x04	; 4
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <initialize_sequencer+0xa>
    104a:	00 d0       	rcall	.+0      	; 0x104c <initialize_sequencer+0xc>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	8c 01       	movw	r16, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    1052:	e0 e0       	ldi	r30, 0x00	; 0
    1054:	f8 e0       	ldi	r31, 0x08	; 8
    1056:	80 91 01 08 	lds	r24, 0x0801
    105a:	8f 7d       	andi	r24, 0xDF	; 223
    105c:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    105e:	80 91 01 08 	lds	r24, 0x0801
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    1066:	80 91 07 08 	lds	r24, 0x0807
    106a:	8f 7c       	andi	r24, 0xCF	; 207
    106c:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    106e:	80 91 07 08 	lds	r24, 0x0807
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    1076:	80 91 07 08 	lds	r24, 0x0807
    107a:	83 7f       	andi	r24, 0xF3	; 243
    107c:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    107e:	80 91 07 08 	lds	r24, 0x0807
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    1086:	c8 01       	movw	r24, r16
    1088:	8f 58       	subi	r24, 0x8F	; 143
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    1090:	f8 01       	movw	r30, r16
    1092:	71 96       	adiw	r30, 0x11	; 17
    1094:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    1096:	11 92       	st	Z+, r1
    1098:	11 92       	st	Z+, r1
    109a:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    109c:	e1 f7       	brne	.-8      	; 0x1096 <initialize_sequencer+0x56>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    109e:	f8 01       	movw	r30, r16
    10a0:	13 82       	std	Z+3, r1	; 0x03
    sequencer->octave_index = 0;
    10a2:	15 82       	std	Z+5, r1	; 0x05
    sequencer->repeat_index = 0;
    10a4:	14 82       	std	Z+4, r1	; 0x04
    sequencer->note_max = 0;
    10a6:	16 82       	std	Z+6, r1	; 0x06
    sequencer->repeat_max = 0;
    10a8:	17 82       	std	Z+7, r1	; 0x07
    sequencer->octave_max = 0;
    10aa:	10 86       	std	Z+8, r1	; 0x08
    sequencer->start_time_increment = 0;
    10ac:	11 86       	std	Z+9, r1	; 0x09
    10ae:	12 86       	std	Z+10, r1	; 0x0a
    sequencer->stop_time_increment = 0;
    10b0:	13 86       	std	Z+11, r1	; 0x0b
    10b2:	14 86       	std	Z+12, r1	; 0x0c
    sequencer->pattern = 0;
    10b4:	15 86       	std	Z+13, r1	; 0x0d
    sequencer->duration = 0;
    10b6:	16 86       	std	Z+14, r1	; 0x0e
    10b8:	17 86       	std	Z+15, r1	; 0x0f
    sequencer->division = 0;
    10ba:	10 8a       	std	Z+16, r1	; 0x10
    sequencer->play_status = 0;
    10bc:	11 82       	std	Z+1, r1	; 0x01
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->rebuild_play_list = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	82 83       	std	Z+2, r24	; 0x02
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    10c2:	c8 01       	movw	r24, r16
    10c4:	0e 94 71 07 	call	0xee2	; 0xee2 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    10c8:	f8 01       	movw	r30, r16
    10ca:	66 85       	ldd	r22, Z+14	; 0x0e
    10cc:	77 85       	ldd	r23, Z+15	; 0x0f
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	21 85       	ldd	r18, Z+9	; 0x09
    10d4:	32 85       	ldd	r19, Z+10	; 0x0a
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__mulsi3>
    10de:	69 83       	std	Y+1, r22	; 0x01
    10e0:	7a 83       	std	Y+2, r23	; 0x02
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    10e6:	69 81       	ldd	r22, Y+1	; 0x01
    10e8:	7a 81       	ldd	r23, Y+2	; 0x02
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
    10fa:	29 83       	std	Y+1, r18	; 0x01
    10fc:	3a 83       	std	Y+2, r19	; 0x02
    10fe:	4b 83       	std	Y+3, r20	; 0x03
    1100:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	ab 81       	ldd	r26, Y+3	; 0x03
    1108:	bc 81       	ldd	r27, Y+4	; 0x04
    110a:	f8 01       	movw	r30, r16
    110c:	83 87       	std	Z+11, r24	; 0x0b
    110e:	94 87       	std	Z+12, r25	; 0x0c
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    1110:	24 96       	adiw	r28, 0x04	; 4
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <set_rebuild_play_list>:

void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    1120:	fc 01       	movw	r30, r24
    1122:	62 83       	std	Z+2, r22	; 0x02
}
    1124:	08 95       	ret

00001126 <continue_sequencer>:
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	60 97       	sbiw	r28, 0x10	; 16
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	8c 01       	movw	r16, r24
    1148:	d6 2e       	mov	r13, r22

    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	f8 e0       	ldi	r31, 0x08	; 8
    114e:	80 91 01 08 	lds	r24, 0x0801
    1152:	8f 7d       	andi	r24, 0xDF	; 223
    1154:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    1156:	80 91 01 08 	lds	r24, 0x0801
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    115e:	80 91 0c 08 	lds	r24, 0x080C
    1162:	80 62       	ori	r24, 0x20	; 32
    1164:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    1166:	80 91 0c 08 	lds	r24, 0x080C
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    116e:	f8 01       	movw	r30, r16
    1170:	ef 58       	subi	r30, 0x8F	; 143
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 81       	ld	r24, Z
    1176:	88 23       	and	r24, r24
    1178:	09 f4       	brne	.+2      	; 0x117c <continue_sequencer+0x56>
    117a:	9a c1       	rjmp	.+820    	; 0x14b0 <continue_sequencer+0x38a>
        return;
    
    
    current_time = (uint32_t) TCC0.CNT;
    117c:	80 91 20 08 	lds	r24, 0x0820
    1180:	90 91 21 08 	lds	r25, 0x0821
    1184:	a0 e0       	ldi	r26, 0x00	; 0
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	ab 83       	std	Y+3, r26	; 0x03
    118e:	bc 83       	std	Y+4, r27	; 0x04
    }
    */
    
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    1190:	d8 01       	movw	r26, r16
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	8c 91       	ld	r24, X
    1196:	11 97       	sbiw	r26, 0x01	; 1
    1198:	88 23       	and	r24, r24
    119a:	a1 f0       	breq	.+40     	; 0x11c4 <continue_sequencer+0x9e>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    119c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_midi_device>
    11a0:	d8 01       	movw	r26, r16
    11a2:	13 96       	adiw	r26, 0x03	; 3
    11a4:	ec 91       	ld	r30, X
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	e0 0f       	add	r30, r16
    11ae:	f1 1f       	adc	r31, r17
    11b0:	01 88       	ldd	r0, Z+17	; 0x11
    11b2:	f2 89       	ldd	r31, Z+18	; 0x12
    11b4:	e0 2d       	mov	r30, r0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	40 81       	ld	r20, Z
    11ba:	21 81       	ldd	r18, Z+1	; 0x01
    11bc:	0e 94 26 0c 	call	0x184c	; 0x184c <midi_send_noteoff>
        sequencer->play_status = 0;
    11c0:	f8 01       	movw	r30, r16
    11c2:	11 82       	std	Z+1, r1	; 0x01
    const uint8_t pattern_pot_sel= 4;
    const uint8_t pattern_pot_min = 0;
    const uint8_t pattern_pot_max = 6;
    
    //read the new values from the pots
    uint8_t octave_max_new = get_pot_value(octave_pot_sel, octave_pot_min, octave_pot_max);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	43 e0       	ldi	r20, 0x03	; 3
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    11d2:	a8 2e       	mov	r10, r24
    uint8_t repeat_max_new = get_pot_value(repeat_pot_sel, repeat_pot_min, repeat_pot_max);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	44 e0       	ldi	r20, 0x04	; 4
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    11e2:	b8 2e       	mov	r11, r24
    uint8_t division_new = get_pot_value(division_pot_sel,division_pot_min,division_pot_max);
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	46 e0       	ldi	r20, 0x06	; 6
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    11f2:	c8 2e       	mov	r12, r24
    uint16_t duration_new = get_pot_value(duration_pot_sel, duration_pot_min, duration_pot_max);
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	4f ef       	ldi	r20, 0xFF	; 255
    11fc:	5f ef       	ldi	r21, 0xFF	; 255
    11fe:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    1202:	7c 01       	movw	r14, r24
    uint8_t pattern_new = get_pot_value(pattern_pot_sel, pattern_pot_min, pattern_pot_max);
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	46 e0       	ldi	r20, 0x06	; 6
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    1212:	d8 01       	movw	r26, r16
    1214:	17 96       	adiw	r26, 0x07	; 7
    1216:	2c 91       	ld	r18, X
    1218:	17 97       	sbiw	r26, 0x07	; 7
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    121a:	50 96       	adiw	r26, 0x10	; 16
    121c:	9c 91       	ld	r25, X
    121e:	50 97       	sbiw	r26, 0x10	; 16
    1220:	9c 15       	cp	r25, r12
    1222:	29 f4       	brne	.+10     	; 0x122e <continue_sequencer+0x108>
    sequencer->rebuild_play_list = 0;
    
    return;
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	2b 15       	cp	r18, r11
    1228:	19 f4       	brne	.+6      	; 0x1230 <continue_sequencer+0x10a>
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <continue_sequencer+0x10a>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    122e:	91 e0       	ldi	r25, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    1230:	f8 01       	movw	r30, r16
    1232:	26 85       	ldd	r18, Z+14	; 0x0e
    1234:	37 85       	ldd	r19, Z+15	; 0x0f
    1236:	2e 15       	cp	r18, r14
    1238:	3f 05       	cpc	r19, r15
    123a:	11 f4       	brne	.+4      	; 0x1240 <continue_sequencer+0x11a>
    123c:	99 2e       	mov	r9, r25
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <continue_sequencer+0x11e>
        update_stop_time_increment = 1;
    1240:	99 24       	eor	r9, r9
    1242:	93 94       	inc	r9
    }
    
    if (sequencer->pattern != pattern_new){
    1244:	d8 01       	movw	r26, r16
    1246:	1d 96       	adiw	r26, 0x0d	; 13
    1248:	2c 91       	ld	r18, X
    124a:	1d 97       	sbiw	r26, 0x0d	; 13
    124c:	28 17       	cp	r18, r24
    124e:	21 f0       	breq	.+8      	; 0x1258 <continue_sequencer+0x132>
        sequencer->rebuild_play_list = 1;
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	2c 93       	st	X, r18
    1256:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    1258:	f8 01       	movw	r30, r16
    125a:	a0 86       	std	Z+8, r10	; 0x08
    sequencer->repeat_max = repeat_max_new;
    125c:	b7 82       	std	Z+7, r11	; 0x07
    sequencer->division = division_new;
    125e:	c0 8a       	std	Z+16, r12	; 0x10
    sequencer->duration = duration_new;
    1260:	e6 86       	std	Z+14, r14	; 0x0e
    1262:	f7 86       	std	Z+15, r15	; 0x0f
    sequencer->pattern = pattern_new;
    1264:	85 87       	std	Z+13, r24	; 0x0d
    
    if (update_start_time_increment)
    1266:	99 23       	and	r25, r25
    1268:	19 f0       	breq	.+6      	; 0x1270 <continue_sequencer+0x14a>
        calculate_start_time_increment(sequencer);
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 71 07 	call	0xee2	; 0xee2 <calculate_start_time_increment>
    if (update_stop_time_increment)
    1270:	99 20       	and	r9, r9
    1272:	41 f1       	breq	.+80     	; 0x12c4 <continue_sequencer+0x19e>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    1274:	d8 01       	movw	r26, r16
    1276:	1e 96       	adiw	r26, 0x0e	; 14
    1278:	6d 91       	ld	r22, X+
    127a:	7c 91       	ld	r23, X
    127c:	1f 97       	sbiw	r26, 0x0f	; 15
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	19 96       	adiw	r26, 0x09	; 9
    1284:	2d 91       	ld	r18, X+
    1286:	3c 91       	ld	r19, X
    1288:	1a 97       	sbiw	r26, 0x0a	; 10
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__mulsi3>
    1292:	6d 87       	std	Y+13, r22	; 0x0d
    1294:	7e 87       	std	Y+14, r23	; 0x0e
    1296:	8f 87       	std	Y+15, r24	; 0x0f
    1298:	98 8b       	std	Y+16, r25	; 0x10
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    129a:	6d 85       	ldd	r22, Y+13	; 0x0d
    129c:	7e 85       	ldd	r23, Y+14	; 0x0e
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodsi4>
    12ae:	2d 87       	std	Y+13, r18	; 0x0d
    12b0:	3e 87       	std	Y+14, r19	; 0x0e
    12b2:	4f 87       	std	Y+15, r20	; 0x0f
    12b4:	58 8b       	std	Y+16, r21	; 0x10
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	af 85       	ldd	r26, Y+15	; 0x0f
    12bc:	b8 89       	ldd	r27, Y+16	; 0x10
    12be:	f8 01       	movw	r30, r16
    12c0:	83 87       	std	Z+11, r24	; 0x0b
    12c2:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ca:	5c 81       	ldd	r21, Y+4	; 0x04
    12cc:	d8 01       	movw	r26, r16
    12ce:	19 96       	adiw	r26, 0x09	; 9
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	1a 97       	sbiw	r26, 0x0a	; 10
    12d6:	a0 e0       	ldi	r26, 0x00	; 0
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	a4 1f       	adc	r26, r20
    12e0:	b5 1f       	adc	r27, r21
    12e2:	8d 83       	std	Y+5, r24	; 0x05
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	af 83       	std	Y+7, r26	; 0x07
    12e8:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	3a 81       	ldd	r19, Y+2	; 0x02
    12ee:	4b 81       	ldd	r20, Y+3	; 0x03
    12f0:	5c 81       	ldd	r21, Y+4	; 0x04
    12f2:	f8 01       	movw	r30, r16
    12f4:	83 85       	ldd	r24, Z+11	; 0x0b
    12f6:	94 85       	ldd	r25, Z+12	; 0x0c
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	a4 1f       	adc	r26, r20
    1302:	b5 1f       	adc	r27, r21
    1304:	89 87       	std	Y+9, r24	; 0x09
    1306:	9a 87       	std	Y+10, r25	; 0x0a
    1308:	ab 87       	std	Y+11, r26	; 0x0b
    130a:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    130c:	2d 81       	ldd	r18, Y+5	; 0x05
    130e:	3e 81       	ldd	r19, Y+6	; 0x06
    1310:	4f 81       	ldd	r20, Y+7	; 0x07
    1312:	58 85       	ldd	r21, Y+8	; 0x08
    1314:	80 91 28 08 	lds	r24, 0x0828
    1318:	90 91 29 08 	lds	r25, 0x0829
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	82 17       	cp	r24, r18
    1322:	93 07       	cpc	r25, r19
    1324:	a4 07       	cpc	r26, r20
    1326:	b5 07       	cpc	r27, r21
    1328:	90 f4       	brcc	.+36     	; 0x134e <continue_sequencer+0x228>
        next_start_time = next_start_time - TCC0.CCA;
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	af 81       	ldd	r26, Y+7	; 0x07
    1330:	b8 85       	ldd	r27, Y+8	; 0x08
    1332:	20 91 28 08 	lds	r18, 0x0828
    1336:	30 91 29 08 	lds	r19, 0x0829
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	82 1b       	sub	r24, r18
    1340:	93 0b       	sbc	r25, r19
    1342:	a4 0b       	sbc	r26, r20
    1344:	b5 0b       	sbc	r27, r21
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	af 83       	std	Y+7, r26	; 0x07
    134c:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    134e:	29 85       	ldd	r18, Y+9	; 0x09
    1350:	3a 85       	ldd	r19, Y+10	; 0x0a
    1352:	4b 85       	ldd	r20, Y+11	; 0x0b
    1354:	5c 85       	ldd	r21, Y+12	; 0x0c
    1356:	80 91 28 08 	lds	r24, 0x0828
    135a:	90 91 29 08 	lds	r25, 0x0829
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	82 17       	cp	r24, r18
    1364:	93 07       	cpc	r25, r19
    1366:	a4 07       	cpc	r26, r20
    1368:	b5 07       	cpc	r27, r21
    136a:	90 f4       	brcc	.+36     	; 0x1390 <continue_sequencer+0x26a>
        next_stop_time = next_stop_time - TCC0.CCA;
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	ab 85       	ldd	r26, Y+11	; 0x0b
    1372:	bc 85       	ldd	r27, Y+12	; 0x0c
    1374:	20 91 28 08 	lds	r18, 0x0828
    1378:	30 91 29 08 	lds	r19, 0x0829
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	82 1b       	sub	r24, r18
    1382:	93 0b       	sbc	r25, r19
    1384:	a4 0b       	sbc	r26, r20
    1386:	b5 0b       	sbc	r27, r21
    1388:	89 87       	std	Y+9, r24	; 0x09
    138a:	9a 87       	std	Y+10, r25	; 0x0a
    138c:	ab 87       	std	Y+11, r26	; 0x0b
    138e:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	af 81       	ldd	r26, Y+7	; 0x07
    1396:	b8 85       	ldd	r27, Y+8	; 0x08
    1398:	e0 e0       	ldi	r30, 0x00	; 0
    139a:	f8 e0       	ldi	r31, 0x08	; 8
    139c:	82 a7       	std	Z+42, r24	; 0x2a
    139e:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    13a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    13a8:	84 a7       	std	Z+44, r24	; 0x2c
    13aa:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    13ac:	d8 01       	movw	r26, r16
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	8c 91       	ld	r24, X
    13b2:	12 97       	sbiw	r26, 0x02	; 2
    13b4:	88 23       	and	r24, r24
    13b6:	19 f1       	breq	.+70     	; 0x13fe <continue_sequencer+0x2d8>
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    13b8:	f8 01       	movw	r30, r16
    13ba:	ee 58       	subi	r30, 0x8E	; 142
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	a0 81       	ld	r26, Z
    13c0:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0d c0       	rjmp	.+26     	; 0x13e0 <continue_sequencer+0x2ba>

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
                sequencer->play_list[play_list_index++] = current_note;
    13c6:	e8 2f       	mov	r30, r24
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	e0 0f       	add	r30, r16
    13d0:	f1 1f       	adc	r31, r17
    13d2:	a1 8b       	std	Z+17, r26	; 0x11
    13d4:	b2 8b       	std	Z+18, r27	; 0x12
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	0d 90       	ld	r0, X+
    13dc:	bc 91       	ld	r27, X
    13de:	a0 2d       	mov	r26, r0
    13e0:	10 97       	sbiw	r26, 0x00	; 0
    13e2:	89 f7       	brne	.-30     	; 0x13c6 <continue_sequencer+0x2a0>
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index;
    13e4:	f8 01       	movw	r30, r16
    13e6:	86 83       	std	Z+6, r24	; 0x06
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <continue_sequencer+0x2ce>
    
    //check if the list is now shorter than the current note_index
    while (sequencer->note_index > sequencer->note_max)
        sequencer->note_index -= sequencer->note_max;
    13ea:	98 1b       	sub	r25, r24
    13ec:	d8 01       	movw	r26, r16
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	9c 93       	st	X, r25
    13f2:	13 97       	sbiw	r26, 0x03	; 3
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index;
    
    //check if the list is now shorter than the current note_index
    while (sequencer->note_index > sequencer->note_max)
    13f4:	f8 01       	movw	r30, r16
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	89 17       	cp	r24, r25
    13fa:	b8 f3       	brcs	.-18     	; 0x13ea <continue_sequencer+0x2c4>
        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    13fc:	12 82       	std	Z+2, r1	; 0x02
    if (sequencer->rebuild_play_list)
        build_play_list(sequencer);
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    13fe:	dd 20       	and	r13, r13
    1400:	69 f5       	brne	.+90     	; 0x145c <continue_sequencer+0x336>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    1402:	d8 01       	movw	r26, r16
    1404:	14 96       	adiw	r26, 0x04	; 4
    1406:	8c 91       	ld	r24, X
    1408:	14 97       	sbiw	r26, 0x04	; 4
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	14 96       	adiw	r26, 0x04	; 4
    140e:	8c 93       	st	X, r24
    1410:	14 97       	sbiw	r26, 0x04	; 4
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    1412:	17 96       	adiw	r26, 0x07	; 7
    1414:	9c 91       	ld	r25, X
    1416:	17 97       	sbiw	r26, 0x07	; 7
    1418:	98 17       	cp	r25, r24
    141a:	50 f4       	brcc	.+20     	; 0x1430 <continue_sequencer+0x30a>
        sequencer->repeat_index = 0;
    141c:	14 96       	adiw	r26, 0x04	; 4
    141e:	1c 92       	st	X, r1
    1420:	14 97       	sbiw	r26, 0x04	; 4
        sequencer->note_index += 1;
    1422:	13 96       	adiw	r26, 0x03	; 3
    1424:	8c 91       	ld	r24, X
    1426:	13 97       	sbiw	r26, 0x03	; 3
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	13 96       	adiw	r26, 0x03	; 3
    142c:	8c 93       	st	X, r24
    142e:	13 97       	sbiw	r26, 0x03	; 3
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    1430:	f8 01       	movw	r30, r16
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	86 81       	ldd	r24, Z+6	; 0x06
    1436:	89 17       	cp	r24, r25
    1438:	20 f4       	brcc	.+8      	; 0x1442 <continue_sequencer+0x31c>
        sequencer->note_index = 0;
    143a:	13 82       	std	Z+3, r1	; 0x03
        sequencer->octave_index += 1;
    143c:	85 81       	ldd	r24, Z+5	; 0x05
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	85 83       	std	Z+5, r24	; 0x05
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    1442:	d8 01       	movw	r26, r16
    1444:	15 96       	adiw	r26, 0x05	; 5
    1446:	9c 91       	ld	r25, X
    1448:	15 97       	sbiw	r26, 0x05	; 5
    144a:	18 96       	adiw	r26, 0x08	; 8
    144c:	8c 91       	ld	r24, X
    144e:	18 97       	sbiw	r26, 0x08	; 8
    1450:	89 17       	cp	r24, r25
    1452:	40 f4       	brcc	.+16     	; 0x1464 <continue_sequencer+0x33e>
        sequencer->octave_index = 0;
    1454:	15 96       	adiw	r26, 0x05	; 5
    1456:	1c 92       	st	X, r1
    1458:	15 97       	sbiw	r26, 0x05	; 5
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <continue_sequencer+0x33e>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    145c:	f8 01       	movw	r30, r16
    145e:	15 82       	std	Z+5, r1	; 0x05
    sequencer->note_index = 0;
    1460:	13 82       	std	Z+3, r1	; 0x03
    sequencer->repeat_index = 0;
    1462:	14 82       	std	Z+4, r1	; 0x04
    else{
        reset_play_list_indeces(sequencer);
    }
    
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    1464:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_midi_device>
    1468:	d8 01       	movw	r26, r16
    146a:	13 96       	adiw	r26, 0x03	; 3
    146c:	ec 91       	ld	r30, X
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	e0 0f       	add	r30, r16
    1476:	f1 1f       	adc	r31, r17
    1478:	01 88       	ldd	r0, Z+17	; 0x11
    147a:	f2 89       	ldd	r31, Z+18	; 0x12
    147c:	e0 2d       	mov	r30, r0
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	40 81       	ld	r20, Z
    1482:	21 81       	ldd	r18, Z+1	; 0x01
    1484:	0e 94 14 0c 	call	0x1828	; 0x1828 <midi_send_noteon>
    
    set_LEDs_on(0,0,0,1);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	0e 94 be 02 	call	0x57c	; 0x57c <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	f8 01       	movw	r30, r16
    1498:	81 83       	std	Z+1, r24	; 0x01
    
    //set run flag
    sequencer->run_status = 1;
    149a:	80 83       	st	Z, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    149c:	e0 e0       	ldi	r30, 0x00	; 0
    149e:	f8 e0       	ldi	r31, 0x08	; 8
    14a0:	80 91 01 08 	lds	r24, 0x0801
    14a4:	80 62       	ori	r24, 0x20	; 32
    14a6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    14a8:	80 91 01 08 	lds	r24, 0x0801
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	81 83       	std	Z+1, r24	; 0x01
}
    14b0:	60 96       	adiw	r28, 0x10	; 16
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	08 95       	ret

000014ce <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	16 2f       	mov	r17, r22
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    14d8:	e0 e0       	ldi	r30, 0x00	; 0
    14da:	f8 e0       	ldi	r31, 0x08	; 8
    14dc:	80 91 01 08 	lds	r24, 0x0801
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    14e4:	80 91 01 08 	lds	r24, 0x0801
    14e8:	8f 7b       	andi	r24, 0xBF	; 191
    14ea:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    14ec:	80 91 0c 08 	lds	r24, 0x080C
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	88 23       	and	r24, r24
    14f8:	b9 f0       	breq	.+46     	; 0x1528 <stop_sequencer+0x5a>
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,sequencer->play_list[sequencer->note_index]->pitch,sequencer->play_list[sequencer->note_index]->velocity);
    14fa:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_midi_device>
    14fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	ec 0f       	add	r30, r28
    1508:	fd 1f       	adc	r31, r29
    150a:	01 88       	ldd	r0, Z+17	; 0x11
    150c:	f2 89       	ldd	r31, Z+18	; 0x12
    150e:	e0 2d       	mov	r30, r0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	40 81       	ld	r20, Z
    1514:	21 81       	ldd	r18, Z+1	; 0x01
    1516:	0e 94 26 0c 	call	0x184c	; 0x184c <midi_send_noteoff>
        set_LEDs_off(0,0,0,1);
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	21 e0       	ldi	r18, 0x01	; 1
    1522:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_LEDs_off>
        sequencer->play_status = 0;
    1526:	19 82       	std	Y+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, renable the note on interrupt
    if (full_stop)
    1528:	11 23       	and	r17, r17
    152a:	11 f0       	breq	.+4      	; 0x1530 <stop_sequencer+0x62>
        sequencer->run_status = 0;
    152c:	18 82       	st	Y, r1
    152e:	06 c0       	rjmp	.+12     	; 0x153c <stop_sequencer+0x6e>
    else    
        TCC0.CTRLB |= 0x20;
    1530:	80 91 01 08 	lds	r24, 0x0801
    1534:	80 62       	ori	r24, 0x20	; 32
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	f8 e0       	ldi	r31, 0x08	; 8
    153a:	81 83       	std	Z+1, r24	; 0x01
    
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	08 95       	ret

00001544 <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    154e:	8c 01       	movw	r16, r24
    1550:	0f 58       	subi	r16, 0x8F	; 143
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	c8 01       	movw	r24, r16
    1556:	0e 94 77 06 	call	0xcee	; 0xcee <insert_note>
    155a:	88 23       	and	r24, r24
    155c:	51 f0       	breq	.+20     	; 0x1572 <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	8a 83       	std	Y+2, r24	; 0x02
        
		if (sequencer->note_list.length == 1)
    1562:	f8 01       	movw	r30, r16
    1564:	80 81       	ld	r24, Z
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	21 f4       	brne	.+8      	; 0x1572 <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    156a:	ce 01       	movw	r24, r28
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	0e 94 93 08 	call	0x1126	; 0x1126 <continue_sequencer>
    }
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
    
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    1586:	8c 01       	movw	r16, r24
    1588:	0f 58       	subi	r16, 0x8F	; 143
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	c8 01       	movw	r24, r16
    158e:	0e 94 06 06 	call	0xc0c	; 0xc0c <remove_note_by_pitch>
    1592:	88 23       	and	r24, r24
    1594:	51 f0       	breq	.+20     	; 0x15aa <remove_note_from_arpeggiator+0x2e>
        sequencer->rebuild_play_list = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	8a 83       	std	Y+2, r24	; 0x02
        
        if (sequencer->note_list.length == 0)
    159a:	f8 01       	movw	r30, r16
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	21 f4       	brne	.+8      	; 0x15aa <remove_note_from_arpeggiator+0x2e>
            stop_sequencer(sequencer, 1);
    15a2:	ce 01       	movw	r24, r28
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <stop_sequencer>
    }	
	
}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 81       	ld	r18, Z
    15b8:	22 23       	and	r18, r18
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	0e 94 93 08 	call	0x1126	; 0x1126 <continue_sequencer>
    15c2:	08 95       	ret

000015c4 <serial_midi_send>:

MidiDevice* get_midi_device() {
   return stored_midi_device;
}

void serial_midi_send(MidiDevice* midi_device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    15c4:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    15c6:	80 91 b1 09 	lds	r24, 0x09B1
    15ca:	85 ff       	sbrs	r24, 5
    15cc:	fc cf       	rjmp	.-8      	; 0x15c6 <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    15ce:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    15d2:	62 30       	cpi	r22, 0x02	; 2
    15d4:	70 f0       	brcs	.+28     	; 0x15f2 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    15d6:	80 91 b1 09 	lds	r24, 0x09B1
    15da:	85 ff       	sbrs	r24, 5
    15dc:	fc cf       	rjmp	.-8      	; 0x15d6 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    15de:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    15e2:	63 30       	cpi	r22, 0x03	; 3
    15e4:	31 f4       	brne	.+12     	; 0x15f2 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    15e6:	80 91 b1 09 	lds	r24, 0x09B1
    15ea:	85 ff       	sbrs	r24, 5
    15ec:	fc cf       	rjmp	.-8      	; 0x15e6 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    15ee:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <noteoff_to_arpeggiator>:
void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
}

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
    15f6:	80 91 69 23 	lds	r24, 0x2369
    15fa:	90 91 6a 23 	lds	r25, 0x236A
    15fe:	64 2f       	mov	r22, r20
    1600:	0e 94 be 0a 	call	0x157c	; 0x157c <remove_note_from_arpeggiator>
}
    1604:	08 95       	ret

00001606 <noteon_to_arpeggiator>:
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
    1606:	80 91 69 23 	lds	r24, 0x2369
    160a:	90 91 6a 23 	lds	r25, 0x236A
    160e:	64 2f       	mov	r22, r20
    1610:	42 2f       	mov	r20, r18
    1612:	0e 94 a2 0a 	call	0x1544	; 0x1544 <add_note_to_arpeggiator>
}
    1616:	08 95       	ret

00001618 <get_midi_device>:
static Sequencer* stored_sequencer;
static MidiDevice* stored_midi_device;

MidiDevice* get_midi_device() {
   return stored_midi_device;
}
    1618:	80 91 6b 23 	lds	r24, 0x236B
    161c:	90 91 6c 23 	lds	r25, 0x236C
    1620:	08 95       	ret

00001622 <initialize_serial_midi>:

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
}

void initialize_serial_midi(MidiDevice* midi_device, Sequencer* sequencer){
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
    1630:	7b 01       	movw	r14, r22
   //set up the device
   midi_device_init(midi_device);
    1632:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <midi_device_init>
   
   midi_device_set_send_func(midi_device, serial_midi_send);
    1636:	02 ee       	ldi	r16, 0xE2	; 226
    1638:	1a e0       	ldi	r17, 0x0A	; 10
    163a:	ce 01       	movw	r24, r28
    163c:	b8 01       	movw	r22, r16
    163e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <midi_device_set_send_func>
   midi_register_noteon_callback(midi_device, noteon_to_arpeggiator);
    1642:	ce 01       	movw	r24, r28
    1644:	63 e0       	ldi	r22, 0x03	; 3
    1646:	7b e0       	ldi	r23, 0x0B	; 11
    1648:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <midi_register_noteon_callback>
   midi_register_noteoff_callback(midi_device, noteoff_to_arpeggiator);
    164c:	ce 01       	movw	r24, r28
    164e:	6b ef       	ldi	r22, 0xFB	; 251
    1650:	7a e0       	ldi	r23, 0x0A	; 10
    1652:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be sent through to midi out
   midi_register_fallthrough_callback(midi_device, serial_midi_send);
    1656:	ce 01       	movw	r24, r28
    1658:	b8 01       	movw	r22, r16
    165a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <midi_register_fallthrough_callback>
   
   //store the device and sequencer pointers
   stored_sequencer = sequencer;
    165e:	e0 92 69 23 	sts	0x2369, r14
    1662:	f0 92 6a 23 	sts	0x236A, r15
   stored_midi_device = midi_device;
    1666:	c0 93 6b 23 	sts	0x236B, r28
    166a:	d0 93 6c 23 	sts	0x236C, r29
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	08 95       	ret

0000167c <bytequeue_init>:
    167c:	fc 01       	movw	r30, r24
    167e:	42 83       	std	Z+2, r20	; 0x02
    1680:	63 83       	std	Z+3, r22	; 0x03
    1682:	74 83       	std	Z+4, r23	; 0x04
    1684:	11 82       	std	Z+1, r1	; 0x01
    1686:	10 82       	st	Z, r1
    1688:	08 95       	ret

0000168a <bytequeue_enqueue>:
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	16 2f       	mov	r17, r22
    1696:	0e 94 bf 0b 	call	0x177e	; 0x177e <store_and_clear_interrupt>
    169a:	08 2f       	mov	r16, r24
    169c:	29 81       	ldd	r18, Y+1	; 0x01
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	c9 01       	movw	r24, r18
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	6a 81       	ldd	r22, Y+2	; 0x02
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    16ac:	48 81       	ld	r20, Y
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	84 17       	cp	r24, r20
    16b2:	95 07       	cpc	r25, r21
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <bytequeue_enqueue+0x36>
    16b6:	80 2f       	mov	r24, r16
    16b8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <restore_interrupt_setting>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <bytequeue_enqueue+0x5c>
    16c0:	eb 81       	ldd	r30, Y+3	; 0x03
    16c2:	fc 81       	ldd	r31, Y+4	; 0x04
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	10 83       	st	Z, r17
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	6a 81       	ldd	r22, Y+2	; 0x02
    16d4:	c9 01       	movw	r24, r18
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	80 2f       	mov	r24, r16
    16e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <restore_interrupt_setting>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <bytequeue_length>:
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    16f8:	0e 94 bf 0b 	call	0x177e	; 0x177e <store_and_clear_interrupt>
    16fc:	29 81       	ldd	r18, Y+1	; 0x01
    16fe:	98 81       	ld	r25, Y
    1700:	29 17       	cp	r18, r25
    1702:	10 f0       	brcs	.+4      	; 0x1708 <bytequeue_length+0x18>
    1704:	12 2f       	mov	r17, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <bytequeue_length+0x1c>
    1708:	1a 81       	ldd	r17, Y+2	; 0x02
    170a:	12 0f       	add	r17, r18
    170c:	19 1b       	sub	r17, r25
    170e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <restore_interrupt_setting>
    1712:	81 2f       	mov	r24, r17
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	08 95       	ret

0000171c <bytequeue_get>:
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	86 0f       	add	r24, r22
    1724:	91 1d       	adc	r25, r1
    1726:	62 81       	ldd	r22, Z+2	; 0x02
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    172e:	03 80       	ldd	r0, Z+3	; 0x03
    1730:	f4 81       	ldd	r31, Z+4	; 0x04
    1732:	e0 2d       	mov	r30, r0
    1734:	e8 0f       	add	r30, r24
    1736:	f9 1f       	adc	r31, r25
    1738:	80 81       	ld	r24, Z
    173a:	08 95       	ret

0000173c <bytequeue_remove>:
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	0f 92       	push	r0
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	8c 01       	movw	r16, r24
    174c:	69 83       	std	Y+1, r22	; 0x01
    174e:	0e 94 bf 0b 	call	0x177e	; 0x177e <store_and_clear_interrupt>
    1752:	48 2f       	mov	r20, r24
    1754:	f8 01       	movw	r30, r16
    1756:	20 81       	ld	r18, Z
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	69 81       	ldd	r22, Y+1	; 0x01
    175c:	26 0f       	add	r18, r22
    175e:	31 1d       	adc	r19, r1
    1760:	62 81       	ldd	r22, Z+2	; 0x02
    1762:	c9 01       	movw	r24, r18
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    176a:	80 83       	st	Z, r24
    176c:	84 2f       	mov	r24, r20
    176e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <restore_interrupt_setting>
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <store_and_clear_interrupt>:
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	08 95       	ret

00001782 <restore_interrupt_setting>:
    1782:	08 95       	ret

00001784 <midi_is_statusbyte>:
    1784:	88 1f       	adc	r24, r24
    1786:	88 27       	eor	r24, r24
    1788:	88 1f       	adc	r24, r24
    178a:	08 95       	ret

0000178c <midi_is_realtime>:
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	88 3f       	cpi	r24, 0xF8	; 248
    1790:	08 f4       	brcc	.+2      	; 0x1794 <midi_is_realtime+0x8>
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	89 2f       	mov	r24, r25
    1796:	08 95       	ret

00001798 <midi_packet_length>:
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	20 7f       	andi	r18, 0xF0	; 240
    179e:	30 70       	andi	r19, 0x00	; 0
    17a0:	20 3b       	cpi	r18, 0xB0	; 176
    17a2:	31 05       	cpc	r19, r1
    17a4:	f1 f0       	breq	.+60     	; 0x17e2 <midi_packet_length+0x4a>
    17a6:	21 3b       	cpi	r18, 0xB1	; 177
    17a8:	31 05       	cpc	r19, r1
    17aa:	54 f4       	brge	.+20     	; 0x17c0 <midi_packet_length+0x28>
    17ac:	20 39       	cpi	r18, 0x90	; 144
    17ae:	31 05       	cpc	r19, r1
    17b0:	c1 f0       	breq	.+48     	; 0x17e2 <midi_packet_length+0x4a>
    17b2:	20 3a       	cpi	r18, 0xA0	; 160
    17b4:	31 05       	cpc	r19, r1
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <midi_packet_length+0x4a>
    17b8:	20 38       	cpi	r18, 0x80	; 128
    17ba:	31 05       	cpc	r19, r1
    17bc:	e9 f4       	brne	.+58     	; 0x17f8 <midi_packet_length+0x60>
    17be:	11 c0       	rjmp	.+34     	; 0x17e2 <midi_packet_length+0x4a>
    17c0:	20 3d       	cpi	r18, 0xD0	; 208
    17c2:	31 05       	cpc	r19, r1
    17c4:	d9 f0       	breq	.+54     	; 0x17fc <midi_packet_length+0x64>
    17c6:	21 3d       	cpi	r18, 0xD1	; 209
    17c8:	31 05       	cpc	r19, r1
    17ca:	24 f4       	brge	.+8      	; 0x17d4 <midi_packet_length+0x3c>
    17cc:	20 3c       	cpi	r18, 0xC0	; 192
    17ce:	31 05       	cpc	r19, r1
    17d0:	99 f4       	brne	.+38     	; 0x17f8 <midi_packet_length+0x60>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <midi_packet_length+0x64>
    17d4:	20 3e       	cpi	r18, 0xE0	; 224
    17d6:	31 05       	cpc	r19, r1
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <midi_packet_length+0x4a>
    17da:	20 3f       	cpi	r18, 0xF0	; 240
    17dc:	31 05       	cpc	r19, r1
    17de:	61 f4       	brne	.+24     	; 0x17f8 <midi_packet_length+0x60>
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <midi_packet_length+0x4e>
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	08 95       	ret
    17e6:	e8 2f       	mov	r30, r24
    17e8:	e1 5f       	subi	r30, 0xF1	; 241
    17ea:	ef 30       	cpi	r30, 0x0F	; 15
    17ec:	48 f4       	brcc	.+18     	; 0x1800 <midi_packet_length+0x68>
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	e0 5e       	subi	r30, 0xE0	; 224
    17f2:	ff 4d       	sbci	r31, 0xDF	; 223
    17f4:	80 81       	ld	r24, Z
    17f6:	08 95       	ret
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	08 95       	ret
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	08 95       	ret
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	08 95       	ret

00001804 <midi_send_cc>:
    1804:	0f 93       	push	r16
    1806:	36 2f       	mov	r19, r22
    1808:	54 2f       	mov	r21, r20
    180a:	02 2f       	mov	r16, r18
    180c:	3f 70       	andi	r19, 0x0F	; 15
    180e:	30 6b       	ori	r19, 0xB0	; 176
    1810:	5f 77       	andi	r21, 0x7F	; 127
    1812:	0f 77       	andi	r16, 0x7F	; 127
    1814:	dc 01       	movw	r26, r24
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	43 2f       	mov	r20, r19
    1820:	25 2f       	mov	r18, r21
    1822:	09 95       	icall
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <midi_send_noteon>:
    1828:	0f 93       	push	r16
    182a:	36 2f       	mov	r19, r22
    182c:	54 2f       	mov	r21, r20
    182e:	02 2f       	mov	r16, r18
    1830:	3f 70       	andi	r19, 0x0F	; 15
    1832:	30 69       	ori	r19, 0x90	; 144
    1834:	5f 77       	andi	r21, 0x7F	; 127
    1836:	0f 77       	andi	r16, 0x7F	; 127
    1838:	dc 01       	movw	r26, r24
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	63 e0       	ldi	r22, 0x03	; 3
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	43 2f       	mov	r20, r19
    1844:	25 2f       	mov	r18, r21
    1846:	09 95       	icall
    1848:	0f 91       	pop	r16
    184a:	08 95       	ret

0000184c <midi_send_noteoff>:
    184c:	0f 93       	push	r16
    184e:	36 2f       	mov	r19, r22
    1850:	54 2f       	mov	r21, r20
    1852:	02 2f       	mov	r16, r18
    1854:	3f 70       	andi	r19, 0x0F	; 15
    1856:	30 68       	ori	r19, 0x80	; 128
    1858:	5f 77       	andi	r21, 0x7F	; 127
    185a:	0f 77       	andi	r16, 0x7F	; 127
    185c:	dc 01       	movw	r26, r24
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	63 e0       	ldi	r22, 0x03	; 3
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	43 2f       	mov	r20, r19
    1868:	25 2f       	mov	r18, r21
    186a:	09 95       	icall
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <midi_send_aftertouch>:
    1870:	0f 93       	push	r16
    1872:	36 2f       	mov	r19, r22
    1874:	54 2f       	mov	r21, r20
    1876:	02 2f       	mov	r16, r18
    1878:	3f 70       	andi	r19, 0x0F	; 15
    187a:	30 6a       	ori	r19, 0xA0	; 160
    187c:	5f 77       	andi	r21, 0x7F	; 127
    187e:	0f 77       	andi	r16, 0x7F	; 127
    1880:	dc 01       	movw	r26, r24
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	43 2f       	mov	r20, r19
    188c:	25 2f       	mov	r18, r21
    188e:	09 95       	icall
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <midi_send_pitchbend>:
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	8a 01       	movw	r16, r20
    189a:	20 e2       	ldi	r18, 0x20	; 32
    189c:	40 30       	cpi	r20, 0x00	; 0
    189e:	52 07       	cpc	r21, r18
    18a0:	3c f4       	brge	.+14     	; 0x18b0 <midi_send_pitchbend+0x1c>
    18a2:	a0 ee       	ldi	r26, 0xE0	; 224
    18a4:	40 30       	cpi	r20, 0x00	; 0
    18a6:	5a 07       	cpc	r21, r26
    18a8:	34 f0       	brlt	.+12     	; 0x18b6 <midi_send_pitchbend+0x22>
    18aa:	00 50       	subi	r16, 0x00	; 0
    18ac:	10 4e       	sbci	r17, 0xE0	; 224
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <midi_send_pitchbend+0x26>
    18b0:	0f ef       	ldi	r16, 0xFF	; 255
    18b2:	1f e3       	ldi	r17, 0x3F	; 63
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <midi_send_pitchbend+0x26>
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	46 2f       	mov	r20, r22
    18bc:	4f 70       	andi	r20, 0x0F	; 15
    18be:	40 6e       	ori	r20, 0xE0	; 224
    18c0:	20 2f       	mov	r18, r16
    18c2:	2f 77       	andi	r18, 0x7F	; 127
    18c4:	00 0f       	add	r16, r16
    18c6:	01 2f       	mov	r16, r17
    18c8:	00 1f       	adc	r16, r16
    18ca:	11 0b       	sbc	r17, r17
    18cc:	11 95       	neg	r17
    18ce:	0f 77       	andi	r16, 0x7F	; 127
    18d0:	dc 01       	movw	r26, r24
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	63 e0       	ldi	r22, 0x03	; 3
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	09 95       	icall
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <midi_send_programchange>:
    18e2:	0f 93       	push	r16
    18e4:	36 2f       	mov	r19, r22
    18e6:	24 2f       	mov	r18, r20
    18e8:	3f 70       	andi	r19, 0x0F	; 15
    18ea:	30 6c       	ori	r19, 0xC0	; 192
    18ec:	2f 77       	andi	r18, 0x7F	; 127
    18ee:	dc 01       	movw	r26, r24
    18f0:	ed 91       	ld	r30, X+
    18f2:	fc 91       	ld	r31, X
    18f4:	62 e0       	ldi	r22, 0x02	; 2
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	43 2f       	mov	r20, r19
    18fa:	00 e0       	ldi	r16, 0x00	; 0
    18fc:	09 95       	icall
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <midi_send_channelpressure>:
    1902:	0f 93       	push	r16
    1904:	36 2f       	mov	r19, r22
    1906:	24 2f       	mov	r18, r20
    1908:	3f 70       	andi	r19, 0x0F	; 15
    190a:	30 6d       	ori	r19, 0xD0	; 208
    190c:	2f 77       	andi	r18, 0x7F	; 127
    190e:	dc 01       	movw	r26, r24
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	43 2f       	mov	r20, r19
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	09 95       	icall
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <midi_send_clock>:
    1922:	0f 93       	push	r16
    1924:	dc 01       	movw	r26, r24
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	48 ef       	ldi	r20, 0xF8	; 248
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	09 95       	icall
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <midi_send_tick>:
    193a:	0f 93       	push	r16
    193c:	dc 01       	movw	r26, r24
    193e:	ed 91       	ld	r30, X+
    1940:	fc 91       	ld	r31, X
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	49 ef       	ldi	r20, 0xF9	; 249
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	00 e0       	ldi	r16, 0x00	; 0
    194c:	09 95       	icall
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <midi_send_start>:
    1952:	0f 93       	push	r16
    1954:	dc 01       	movw	r26, r24
    1956:	ed 91       	ld	r30, X+
    1958:	fc 91       	ld	r31, X
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	4a ef       	ldi	r20, 0xFA	; 250
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	00 e0       	ldi	r16, 0x00	; 0
    1964:	09 95       	icall
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <midi_send_continue>:
    196a:	0f 93       	push	r16
    196c:	dc 01       	movw	r26, r24
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	4b ef       	ldi	r20, 0xFB	; 251
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	00 e0       	ldi	r16, 0x00	; 0
    197c:	09 95       	icall
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <midi_send_stop>:
    1982:	0f 93       	push	r16
    1984:	dc 01       	movw	r26, r24
    1986:	ed 91       	ld	r30, X+
    1988:	fc 91       	ld	r31, X
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	4c ef       	ldi	r20, 0xFC	; 252
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	00 e0       	ldi	r16, 0x00	; 0
    1994:	09 95       	icall
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <midi_send_activesense>:
    199a:	0f 93       	push	r16
    199c:	dc 01       	movw	r26, r24
    199e:	ed 91       	ld	r30, X+
    19a0:	fc 91       	ld	r31, X
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	4e ef       	ldi	r20, 0xFE	; 254
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	00 e0       	ldi	r16, 0x00	; 0
    19ac:	09 95       	icall
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <midi_send_reset>:
    19b2:	0f 93       	push	r16
    19b4:	dc 01       	movw	r26, r24
    19b6:	ed 91       	ld	r30, X+
    19b8:	fc 91       	ld	r31, X
    19ba:	61 e0       	ldi	r22, 0x01	; 1
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	4f ef       	ldi	r20, 0xFF	; 255
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	00 e0       	ldi	r16, 0x00	; 0
    19c4:	09 95       	icall
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <midi_send_tcquarterframe>:
    19ca:	0f 93       	push	r16
    19cc:	26 2f       	mov	r18, r22
    19ce:	2f 77       	andi	r18, 0x7F	; 127
    19d0:	dc 01       	movw	r26, r24
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	62 e0       	ldi	r22, 0x02	; 2
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	41 ef       	ldi	r20, 0xF1	; 241
    19dc:	00 e0       	ldi	r16, 0x00	; 0
    19de:	09 95       	icall
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <midi_send_songposition>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	26 2f       	mov	r18, r22
    19ea:	2f 77       	andi	r18, 0x7F	; 127
    19ec:	8b 01       	movw	r16, r22
    19ee:	00 0f       	add	r16, r16
    19f0:	01 2f       	mov	r16, r17
    19f2:	00 1f       	adc	r16, r16
    19f4:	11 0b       	sbc	r17, r17
    19f6:	11 95       	neg	r17
    19f8:	0f 77       	andi	r16, 0x7F	; 127
    19fa:	dc 01       	movw	r26, r24
    19fc:	ed 91       	ld	r30, X+
    19fe:	fc 91       	ld	r31, X
    1a00:	63 e0       	ldi	r22, 0x03	; 3
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	42 ef       	ldi	r20, 0xF2	; 242
    1a06:	09 95       	icall
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <midi_send_songselect>:
    1a0e:	0f 93       	push	r16
    1a10:	26 2f       	mov	r18, r22
    1a12:	2f 77       	andi	r18, 0x7F	; 127
    1a14:	dc 01       	movw	r26, r24
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	62 e0       	ldi	r22, 0x02	; 2
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	43 ef       	ldi	r20, 0xF3	; 243
    1a20:	00 e0       	ldi	r16, 0x00	; 0
    1a22:	09 95       	icall
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <midi_send_tunerequest>:
    1a28:	0f 93       	push	r16
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	46 ef       	ldi	r20, 0xF6	; 246
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	09 95       	icall
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <midi_send_byte>:
    1a40:	0f 93       	push	r16
    1a42:	46 2f       	mov	r20, r22
    1a44:	dc 01       	movw	r26, r24
    1a46:	ed 91       	ld	r30, X+
    1a48:	fc 91       	ld	r31, X
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	00 e0       	ldi	r16, 0x00	; 0
    1a52:	09 95       	icall
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <midi_send_data>:
    1a58:	0f 93       	push	r16
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	09 95       	icall
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <midi_register_cc_callback>:
    1a66:	fc 01       	movw	r30, r24
    1a68:	62 83       	std	Z+2, r22	; 0x02
    1a6a:	73 83       	std	Z+3, r23	; 0x03
    1a6c:	08 95       	ret

00001a6e <midi_register_noteon_callback>:
    1a6e:	fc 01       	movw	r30, r24
    1a70:	64 83       	std	Z+4, r22	; 0x04
    1a72:	75 83       	std	Z+5, r23	; 0x05
    1a74:	08 95       	ret

00001a76 <midi_register_noteoff_callback>:
    1a76:	fc 01       	movw	r30, r24
    1a78:	66 83       	std	Z+6, r22	; 0x06
    1a7a:	77 83       	std	Z+7, r23	; 0x07
    1a7c:	08 95       	ret

00001a7e <midi_register_aftertouch_callback>:
    1a7e:	fc 01       	movw	r30, r24
    1a80:	60 87       	std	Z+8, r22	; 0x08
    1a82:	71 87       	std	Z+9, r23	; 0x09
    1a84:	08 95       	ret

00001a86 <midi_register_pitchbend_callback>:
    1a86:	fc 01       	movw	r30, r24
    1a88:	62 87       	std	Z+10, r22	; 0x0a
    1a8a:	73 87       	std	Z+11, r23	; 0x0b
    1a8c:	08 95       	ret

00001a8e <midi_register_songposition_callback>:
    1a8e:	fc 01       	movw	r30, r24
    1a90:	64 87       	std	Z+12, r22	; 0x0c
    1a92:	75 87       	std	Z+13, r23	; 0x0d
    1a94:	08 95       	ret

00001a96 <midi_register_progchange_callback>:
    1a96:	fc 01       	movw	r30, r24
    1a98:	66 87       	std	Z+14, r22	; 0x0e
    1a9a:	77 87       	std	Z+15, r23	; 0x0f
    1a9c:	08 95       	ret

00001a9e <midi_register_chanpressure_callback>:
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	60 8b       	std	Z+16, r22	; 0x10
    1aa2:	71 8b       	std	Z+17, r23	; 0x11
    1aa4:	08 95       	ret

00001aa6 <midi_register_songselect_callback>:
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	62 8b       	std	Z+18, r22	; 0x12
    1aaa:	73 8b       	std	Z+19, r23	; 0x13
    1aac:	08 95       	ret

00001aae <midi_register_tc_quarterframe_callback>:
    1aae:	fc 01       	movw	r30, r24
    1ab0:	64 8b       	std	Z+20, r22	; 0x14
    1ab2:	75 8b       	std	Z+21, r23	; 0x15
    1ab4:	08 95       	ret

00001ab6 <midi_register_realtime_callback>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	66 8b       	std	Z+22, r22	; 0x16
    1aba:	77 8b       	std	Z+23, r23	; 0x17
    1abc:	08 95       	ret

00001abe <midi_register_tunerequest_callback>:
    1abe:	fc 01       	movw	r30, r24
    1ac0:	60 8f       	std	Z+24, r22	; 0x18
    1ac2:	71 8f       	std	Z+25, r23	; 0x19
    1ac4:	08 95       	ret

00001ac6 <midi_register_sysex_callback>:
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	62 8f       	std	Z+26, r22	; 0x1a
    1aca:	73 8f       	std	Z+27, r23	; 0x1b
    1acc:	08 95       	ret

00001ace <midi_register_fallthrough_callback>:
    1ace:	fc 01       	movw	r30, r24
    1ad0:	64 8f       	std	Z+28, r22	; 0x1c
    1ad2:	75 8f       	std	Z+29, r23	; 0x1d
    1ad4:	08 95       	ret

00001ad6 <midi_register_catchall_callback>:
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	66 8f       	std	Z+30, r22	; 0x1e
    1ada:	77 8f       	std	Z+31, r23	; 0x1f
    1adc:	08 95       	ret

00001ade <midi_device_init>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
    1ae4:	1d a2       	std	Y+37, r1	; 0x25
    1ae6:	1e a2       	std	Y+38, r1	; 0x26
    1ae8:	1f a2       	std	Y+39, r1	; 0x27
    1aea:	bc 01       	movw	r22, r24
    1aec:	68 5d       	subi	r22, 0xD8	; 216
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	88 51       	subi	r24, 0x18	; 24
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	40 ec       	ldi	r20, 0xC0	; 192
    1af6:	0e 94 3e 0b 	call	0x167c	; 0x167c <bytequeue_init>
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	1b 82       	std	Y+3, r1	; 0x03
    1afe:	1c 82       	std	Y+4, r1	; 0x04
    1b00:	1d 82       	std	Y+5, r1	; 0x05
    1b02:	1e 82       	std	Y+6, r1	; 0x06
    1b04:	1f 82       	std	Y+7, r1	; 0x07
    1b06:	18 86       	std	Y+8, r1	; 0x08
    1b08:	19 86       	std	Y+9, r1	; 0x09
    1b0a:	1a 86       	std	Y+10, r1	; 0x0a
    1b0c:	1b 86       	std	Y+11, r1	; 0x0b
    1b0e:	1c 86       	std	Y+12, r1	; 0x0c
    1b10:	1d 86       	std	Y+13, r1	; 0x0d
    1b12:	1e 86       	std	Y+14, r1	; 0x0e
    1b14:	1f 86       	std	Y+15, r1	; 0x0f
    1b16:	18 8a       	std	Y+16, r1	; 0x10
    1b18:	19 8a       	std	Y+17, r1	; 0x11
    1b1a:	1a 8a       	std	Y+18, r1	; 0x12
    1b1c:	1b 8a       	std	Y+19, r1	; 0x13
    1b1e:	1c 8a       	std	Y+20, r1	; 0x14
    1b20:	1d 8a       	std	Y+21, r1	; 0x15
    1b22:	1e 8a       	std	Y+22, r1	; 0x16
    1b24:	1f 8a       	std	Y+23, r1	; 0x17
    1b26:	18 8e       	std	Y+24, r1	; 0x18
    1b28:	19 8e       	std	Y+25, r1	; 0x19
    1b2a:	1a 8e       	std	Y+26, r1	; 0x1a
    1b2c:	1b 8e       	std	Y+27, r1	; 0x1b
    1b2e:	1c 8e       	std	Y+28, r1	; 0x1c
    1b30:	1d 8e       	std	Y+29, r1	; 0x1d
    1b32:	1e 8e       	std	Y+30, r1	; 0x1e
    1b34:	1f 8e       	std	Y+31, r1	; 0x1f
    1b36:	18 a2       	std	Y+32, r1	; 0x20
    1b38:	19 a2       	std	Y+33, r1	; 0x21
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <midi_device_input>:
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	f6 2e       	mov	r15, r22
    1b56:	e4 2f       	mov	r30, r20
    1b58:	f5 2f       	mov	r31, r21
    1b5a:	6f 01       	movw	r12, r30
    1b5c:	8c 01       	movw	r16, r24
    1b5e:	08 51       	subi	r16, 0x18	; 24
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	08 c0       	rjmp	.+16     	; 0x1b74 <midi_device_input+0x34>
    1b64:	f6 01       	movw	r30, r12
    1b66:	61 91       	ld	r22, Z+
    1b68:	6f 01       	movw	r12, r30
    1b6a:	c8 01       	movw	r24, r16
    1b6c:	49 83       	std	Y+1, r20	; 0x01
    1b6e:	0e 94 45 0b 	call	0x168a	; 0x168a <bytequeue_enqueue>
    1b72:	49 81       	ldd	r20, Y+1	; 0x01
    1b74:	8c 2d       	mov	r24, r12
    1b76:	84 1b       	sub	r24, r20
    1b78:	8f 15       	cp	r24, r15
    1b7a:	a0 f3       	brcs	.-24     	; 0x1b64 <midi_device_input+0x24>
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	08 95       	ret

00001b8e <midi_device_set_send_func>:
    1b8e:	fc 01       	movw	r30, r24
    1b90:	60 83       	st	Z, r22
    1b92:	71 83       	std	Z+1, r23	; 0x01
    1b94:	08 95       	ret

00001b96 <midi_device_set_pre_input_process_func>:
    1b96:	fc 01       	movw	r30, r24
    1b98:	60 a3       	std	Z+32, r22	; 0x20
    1b9a:	71 a3       	std	Z+33, r23	; 0x21
    1b9c:	08 95       	ret

00001b9e <midi_input_callbacks>:
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
    1bb0:	6b 01       	movw	r12, r22
    1bb2:	14 2f       	mov	r17, r20
    1bb4:	e2 2e       	mov	r14, r18
    1bb6:	f0 2e       	mov	r15, r16
    1bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	31 f4       	brne	.+12     	; 0x1bca <midi_input_callbacks+0x2c>
    1bbe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bc0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bc2:	30 97       	sbiw	r30, 0x00	; 0
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <midi_input_callbacks+0x2a>
    1bc6:	83 c0       	rjmp	.+262    	; 0x1cce <midi_input_callbacks+0x130>
    1bc8:	95 c0       	rjmp	.+298    	; 0x1cf4 <midi_input_callbacks+0x156>
    1bca:	62 30       	cpi	r22, 0x02	; 2
    1bcc:	71 05       	cpc	r23, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <midi_input_callbacks+0x34>
    1bd0:	42 c0       	rjmp	.+132    	; 0x1c56 <midi_input_callbacks+0xb8>
    1bd2:	63 30       	cpi	r22, 0x03	; 3
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <midi_input_callbacks+0x44>
    1bd8:	61 30       	cpi	r22, 0x01	; 1
    1bda:	71 05       	cpc	r23, r1
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <midi_input_callbacks+0x42>
    1bde:	73 c0       	rjmp	.+230    	; 0x1cc6 <midi_input_callbacks+0x128>
    1be0:	60 c0       	rjmp	.+192    	; 0x1ca2 <midi_input_callbacks+0x104>
    1be2:	84 2f       	mov	r24, r20
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	80 7f       	andi	r24, 0xF0	; 240
    1be8:	90 70       	andi	r25, 0x00	; 0
    1bea:	80 3a       	cpi	r24, 0xA0	; 160
    1bec:	91 05       	cpc	r25, r1
    1bee:	e1 f0       	breq	.+56     	; 0x1c28 <midi_input_callbacks+0x8a>
    1bf0:	81 3a       	cpi	r24, 0xA1	; 161
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	3c f4       	brge	.+14     	; 0x1c04 <midi_input_callbacks+0x66>
    1bf6:	80 38       	cpi	r24, 0x80	; 128
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	99 f0       	breq	.+38     	; 0x1c22 <midi_input_callbacks+0x84>
    1bfc:	80 39       	cpi	r24, 0x90	; 144
    1bfe:	91 05       	cpc	r25, r1
    1c00:	f9 f4       	brne	.+62     	; 0x1c40 <midi_input_callbacks+0xa2>
    1c02:	0c c0       	rjmp	.+24     	; 0x1c1c <midi_input_callbacks+0x7e>
    1c04:	80 3e       	cpi	r24, 0xE0	; 224
    1c06:	91 05       	cpc	r25, r1
    1c08:	91 f0       	breq	.+36     	; 0x1c2e <midi_input_callbacks+0x90>
    1c0a:	80 3f       	cpi	r24, 0xF0	; 240
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	91 f0       	breq	.+36     	; 0x1c34 <midi_input_callbacks+0x96>
    1c10:	80 3b       	cpi	r24, 0xB0	; 176
    1c12:	91 05       	cpc	r25, r1
    1c14:	a9 f4       	brne	.+42     	; 0x1c40 <midi_input_callbacks+0xa2>
    1c16:	ea 81       	ldd	r30, Y+2	; 0x02
    1c18:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <midi_input_callbacks+0xa6>
    1c1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c20:	11 c0       	rjmp	.+34     	; 0x1c44 <midi_input_callbacks+0xa6>
    1c22:	ee 81       	ldd	r30, Y+6	; 0x06
    1c24:	ff 81       	ldd	r31, Y+7	; 0x07
    1c26:	0e c0       	rjmp	.+28     	; 0x1c44 <midi_input_callbacks+0xa6>
    1c28:	e8 85       	ldd	r30, Y+8	; 0x08
    1c2a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c2c:	0b c0       	rjmp	.+22     	; 0x1c44 <midi_input_callbacks+0xa6>
    1c2e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c30:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <midi_input_callbacks+0xa6>
    1c34:	42 3f       	cpi	r20, 0xF2	; 242
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <midi_input_callbacks+0x9c>
    1c38:	5d c0       	rjmp	.+186    	; 0x1cf4 <midi_input_callbacks+0x156>
    1c3a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c3c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <midi_input_callbacks+0xa6>
    1c40:	e0 e0       	ldi	r30, 0x00	; 0
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	30 97       	sbiw	r30, 0x00	; 0
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <midi_input_callbacks+0xac>
    1c48:	55 c0       	rjmp	.+170    	; 0x1cf4 <midi_input_callbacks+0x156>
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	61 2f       	mov	r22, r17
    1c4e:	4e 2d       	mov	r20, r14
    1c50:	2f 2d       	mov	r18, r15
    1c52:	09 95       	icall
    1c54:	42 c0       	rjmp	.+132    	; 0x1cda <midi_input_callbacks+0x13c>
    1c56:	84 2f       	mov	r24, r20
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	80 7f       	andi	r24, 0xF0	; 240
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	80 3d       	cpi	r24, 0xD0	; 208
    1c60:	91 05       	cpc	r25, r1
    1c62:	49 f0       	breq	.+18     	; 0x1c76 <midi_input_callbacks+0xd8>
    1c64:	80 3f       	cpi	r24, 0xF0	; 240
    1c66:	91 05       	cpc	r25, r1
    1c68:	49 f0       	breq	.+18     	; 0x1c7c <midi_input_callbacks+0xde>
    1c6a:	80 3c       	cpi	r24, 0xC0	; 192
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	81 f4       	brne	.+32     	; 0x1c90 <midi_input_callbacks+0xf2>
    1c70:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c72:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <midi_input_callbacks+0xf6>
    1c76:	e8 89       	ldd	r30, Y+16	; 0x10
    1c78:	f9 89       	ldd	r31, Y+17	; 0x11
    1c7a:	0c c0       	rjmp	.+24     	; 0x1c94 <midi_input_callbacks+0xf6>
    1c7c:	43 3f       	cpi	r20, 0xF3	; 243
    1c7e:	19 f4       	brne	.+6      	; 0x1c86 <midi_input_callbacks+0xe8>
    1c80:	ea 89       	ldd	r30, Y+18	; 0x12
    1c82:	fb 89       	ldd	r31, Y+19	; 0x13
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <midi_input_callbacks+0xf6>
    1c86:	41 3f       	cpi	r20, 0xF1	; 241
    1c88:	a9 f5       	brne	.+106    	; 0x1cf4 <midi_input_callbacks+0x156>
    1c8a:	ec 89       	ldd	r30, Y+20	; 0x14
    1c8c:	fd 89       	ldd	r31, Y+21	; 0x15
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <midi_input_callbacks+0xf6>
    1c90:	e0 e0       	ldi	r30, 0x00	; 0
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	30 97       	sbiw	r30, 0x00	; 0
    1c96:	71 f1       	breq	.+92     	; 0x1cf4 <midi_input_callbacks+0x156>
    1c98:	ce 01       	movw	r24, r28
    1c9a:	61 2f       	mov	r22, r17
    1c9c:	4e 2d       	mov	r20, r14
    1c9e:	09 95       	icall
    1ca0:	1c c0       	rjmp	.+56     	; 0x1cda <midi_input_callbacks+0x13c>
    1ca2:	84 2f       	mov	r24, r20
    1ca4:	0e 94 c6 0b 	call	0x178c	; 0x178c <midi_is_realtime>
    1ca8:	88 23       	and	r24, r24
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <midi_input_callbacks+0x114>
    1cac:	ee 89       	ldd	r30, Y+22	; 0x16
    1cae:	ff 89       	ldd	r31, Y+23	; 0x17
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <midi_input_callbacks+0x11c>
    1cb2:	16 3f       	cpi	r17, 0xF6	; 246
    1cb4:	f9 f4       	brne	.+62     	; 0x1cf4 <midi_input_callbacks+0x156>
    1cb6:	e8 8d       	ldd	r30, Y+24	; 0x18
    1cb8:	f9 8d       	ldd	r31, Y+25	; 0x19
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	d9 f0       	breq	.+54     	; 0x1cf4 <midi_input_callbacks+0x156>
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	61 2f       	mov	r22, r17
    1cc2:	09 95       	icall
    1cc4:	0a c0       	rjmp	.+20     	; 0x1cda <midi_input_callbacks+0x13c>
    1cc6:	64 30       	cpi	r22, 0x04	; 4
    1cc8:	71 05       	cpc	r23, r1
    1cca:	90 f4       	brcc	.+36     	; 0x1cf0 <midi_input_callbacks+0x152>
    1ccc:	13 c0       	rjmp	.+38     	; 0x1cf4 <midi_input_callbacks+0x156>
    1cce:	ce 01       	movw	r24, r28
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	41 2f       	mov	r20, r17
    1cd4:	2e 2d       	mov	r18, r14
    1cd6:	0f 2d       	mov	r16, r15
    1cd8:	09 95       	icall
    1cda:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1cdc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1cde:	30 97       	sbiw	r30, 0x00	; 0
    1ce0:	71 f0       	breq	.+28     	; 0x1cfe <midi_input_callbacks+0x160>
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	41 2f       	mov	r20, r17
    1ce8:	2e 2d       	mov	r18, r14
    1cea:	0f 2d       	mov	r16, r15
    1cec:	09 95       	icall
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <midi_input_callbacks+0x160>
    1cf0:	cc 24       	eor	r12, r12
    1cf2:	dd 24       	eor	r13, r13
    1cf4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cf6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	49 f7       	brne	.-46     	; 0x1cce <midi_input_callbacks+0x130>
    1cfc:	ee cf       	rjmp	.-36     	; 0x1cda <midi_input_callbacks+0x13c>
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	ff 90       	pop	r15
    1d08:	ef 90       	pop	r14
    1d0a:	df 90       	pop	r13
    1d0c:	cf 90       	pop	r12
    1d0e:	08 95       	ret

00001d10 <midi_process_byte>:
    1d10:	ef 92       	push	r14
    1d12:	ff 92       	push	r15
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	16 2f       	mov	r17, r22
    1d20:	86 2f       	mov	r24, r22
    1d22:	0e 94 c6 0b 	call	0x178c	; 0x178c <midi_is_realtime>
    1d26:	88 23       	and	r24, r24
    1d28:	69 f0       	breq	.+26     	; 0x1d44 <midi_process_byte+0x34>
    1d2a:	ed a0       	ldd	r14, Y+37	; 0x25
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	8d a3       	std	Y+37, r24	; 0x25
    1d30:	ce 01       	movw	r24, r28
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	41 2f       	mov	r20, r17
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	00 e0       	ldi	r16, 0x00	; 0
    1d3c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <midi_input_callbacks>
    1d40:	ed a2       	std	Y+37, r14	; 0x25
    1d42:	7e c0       	rjmp	.+252    	; 0x1e40 <midi_process_byte+0x130>
    1d44:	81 2f       	mov	r24, r17
    1d46:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_is_statusbyte>
    1d4a:	4d a1       	ldd	r20, Y+37	; 0x25
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <midi_process_byte+0x42>
    1d50:	42 c0       	rjmp	.+132    	; 0x1dd6 <midi_process_byte+0xc6>
    1d52:	44 30       	cpi	r20, 0x04	; 4
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <midi_process_byte+0x50>
    1d56:	1a a3       	std	Y+34, r17	; 0x22
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	8e a3       	std	Y+38, r24	; 0x26
    1d5e:	9f a3       	std	Y+39, r25	; 0x27
    1d60:	81 2f       	mov	r24, r17
    1d62:	0e 94 cc 0b 	call	0x1798	; 0x1798 <midi_packet_length>
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	39 f0       	breq	.+14     	; 0x1d78 <midi_process_byte+0x68>
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	78 f0       	brcs	.+30     	; 0x1d8c <midi_process_byte+0x7c>
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	59 f0       	breq	.+22     	; 0x1d88 <midi_process_byte+0x78>
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	61 f5       	brne	.+88     	; 0x1dce <midi_process_byte+0xbe>
    1d76:	08 c0       	rjmp	.+16     	; 0x1d88 <midi_process_byte+0x78>
    1d78:	8d a3       	std	Y+37, r24	; 0x25
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	41 2f       	mov	r20, r17
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	00 e0       	ldi	r16, 0x00	; 0
    1d86:	1f c0       	rjmp	.+62     	; 0x1dc6 <midi_process_byte+0xb6>
    1d88:	8d a3       	std	Y+37, r24	; 0x25
    1d8a:	5a c0       	rjmp	.+180    	; 0x1e40 <midi_process_byte+0x130>
    1d8c:	10 3f       	cpi	r17, 0xF0	; 240
    1d8e:	19 f0       	breq	.+6      	; 0x1d96 <midi_process_byte+0x86>
    1d90:	17 3f       	cpi	r17, 0xF7	; 247
    1d92:	e9 f4       	brne	.+58     	; 0x1dce <midi_process_byte+0xbe>
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <midi_process_byte+0x8e>
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	8d a3       	std	Y+37, r24	; 0x25
    1d9a:	1a a3       	std	Y+34, r17	; 0x22
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <midi_process_byte+0x10c>
    1d9e:	2e a1       	ldd	r18, Y+38	; 0x26
    1da0:	3f a1       	ldd	r19, Y+39	; 0x27
    1da2:	c9 01       	movw	r24, r18
    1da4:	63 e0       	ldi	r22, 0x03	; 3
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
    1dac:	8c 0f       	add	r24, r28
    1dae:	9d 1f       	adc	r25, r29
    1db0:	fc 01       	movw	r30, r24
    1db2:	12 a3       	std	Z+34, r17	; 0x22
    1db4:	b9 01       	movw	r22, r18
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	6e a3       	std	Y+38, r22	; 0x26
    1dbc:	7f a3       	std	Y+39, r23	; 0x27
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	4a a1       	ldd	r20, Y+34	; 0x22
    1dc2:	2b a1       	ldd	r18, Y+35	; 0x23
    1dc4:	0c a1       	ldd	r16, Y+36	; 0x24
    1dc6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <midi_input_callbacks>
    1dca:	1d a2       	std	Y+37, r1	; 0x25
    1dcc:	39 c0       	rjmp	.+114    	; 0x1e40 <midi_process_byte+0x130>
    1dce:	1d a2       	std	Y+37, r1	; 0x25
    1dd0:	1e a2       	std	Y+38, r1	; 0x26
    1dd2:	1f a2       	std	Y+39, r1	; 0x27
    1dd4:	35 c0       	rjmp	.+106    	; 0x1e40 <midi_process_byte+0x130>
    1dd6:	44 23       	and	r20, r20
    1dd8:	99 f1       	breq	.+102    	; 0x1e40 <midi_process_byte+0x130>
    1dda:	2e a1       	ldd	r18, Y+38	; 0x26
    1ddc:	3f a1       	ldd	r19, Y+39	; 0x27
    1dde:	c9 01       	movw	r24, r18
    1de0:	63 e0       	ldi	r22, 0x03	; 3
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
    1de8:	7c 01       	movw	r14, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	e8 0f       	add	r30, r24
    1dee:	f9 1f       	adc	r31, r25
    1df0:	12 a3       	std	Z+34, r17	; 0x22
    1df2:	b9 01       	movw	r22, r18
    1df4:	6f 5f       	subi	r22, 0xFF	; 255
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	6e a3       	std	Y+38, r22	; 0x26
    1dfa:	7f a3       	std	Y+39, r23	; 0x27
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	91 f0       	breq	.+36     	; 0x1e26 <midi_process_byte+0x116>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	e8 16       	cp	r14, r24
    1e06:	f1 04       	cpc	r15, r1
    1e08:	d9 f4       	brne	.+54     	; 0x1e40 <midi_process_byte+0x130>
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	4a a1       	ldd	r20, Y+34	; 0x22
    1e0e:	2b a1       	ldd	r18, Y+35	; 0x23
    1e10:	0c a1       	ldd	r16, Y+36	; 0x24
    1e12:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <midi_input_callbacks>
    1e16:	8d a1       	ldd	r24, Y+37	; 0x25
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	91 f0       	breq	.+36     	; 0x1e40 <midi_process_byte+0x130>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	8e a3       	std	Y+38, r24	; 0x26
    1e22:	9f a3       	std	Y+39, r25	; 0x27
    1e24:	0d c0       	rjmp	.+26     	; 0x1e40 <midi_process_byte+0x130>
    1e26:	42 30       	cpi	r20, 0x02	; 2
    1e28:	59 f4       	brne	.+22     	; 0x1e40 <midi_process_byte+0x130>
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	4a a1       	ldd	r20, Y+34	; 0x22
    1e2e:	2b a1       	ldd	r18, Y+35	; 0x23
    1e30:	00 e0       	ldi	r16, 0x00	; 0
    1e32:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <midi_input_callbacks>
    1e36:	8d a1       	ldd	r24, Y+37	; 0x25
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	11 f0       	breq	.+4      	; 0x1e40 <midi_process_byte+0x130>
    1e3c:	ee a2       	std	Y+38, r14	; 0x26
    1e3e:	ff a2       	std	Y+39, r15	; 0x27
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	08 95       	ret

00001e4e <midi_device_process>:
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	ec 01       	movw	r28, r24
    1e60:	e8 a1       	ldd	r30, Y+32	; 0x20
    1e62:	f9 a1       	ldd	r31, Y+33	; 0x21
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <midi_device_process+0x1c>
    1e68:	09 95       	icall
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	08 51       	subi	r16, 0x18	; 24
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	c8 01       	movw	r24, r16
    1e72:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <bytequeue_length>
    1e76:	ee 24       	eor	r14, r14
    1e78:	ff 24       	eor	r15, r15
    1e7a:	c8 2e       	mov	r12, r24
    1e7c:	dd 24       	eor	r13, r13
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <midi_device_process+0x50>
    1e80:	c8 01       	movw	r24, r16
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	0e 94 8e 0b 	call	0x171c	; 0x171c <bytequeue_get>
    1e88:	68 2f       	mov	r22, r24
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <midi_process_byte>
    1e90:	c8 01       	movw	r24, r16
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	0e 94 9e 0b 	call	0x173c	; 0x173c <bytequeue_remove>
    1e98:	08 94       	sec
    1e9a:	e1 1c       	adc	r14, r1
    1e9c:	f1 1c       	adc	r15, r1
    1e9e:	ec 14       	cp	r14, r12
    1ea0:	fd 04       	cpc	r15, r13
    1ea2:	70 f3       	brcs	.-36     	; 0x1e80 <midi_device_process+0x32>
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	08 95       	ret

00001eb6 <__fixunssfsi>:
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	7b 01       	movw	r14, r22
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	5f e4       	ldi	r21, 0x4F	; 79
    1eca:	0e 94 07 13 	call	0x260e	; 0x260e <__gesf2>
    1ece:	87 fd       	sbrc	r24, 7
    1ed0:	11 c0       	rjmp	.+34     	; 0x1ef4 <__fixunssfsi+0x3e>
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	5f e4       	ldi	r21, 0x4F	; 79
    1ede:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__subsf3>
    1ee2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fixsfsi>
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
    1eea:	20 50       	subi	r18, 0x00	; 0
    1eec:	30 40       	sbci	r19, 0x00	; 0
    1eee:	40 40       	sbci	r20, 0x00	; 0
    1ef0:	50 48       	sbci	r21, 0x80	; 128
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <__fixunssfsi+0x4a>
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fixsfsi>
    1efc:	9b 01       	movw	r18, r22
    1efe:	ac 01       	movw	r20, r24
    1f00:	b9 01       	movw	r22, r18
    1f02:	ca 01       	movw	r24, r20
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret

00001f0e <_fpadd_parts>:
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ed e8       	ldi	r30, 0x8D	; 141
    1f14:	ff e0       	ldi	r31, 0x0F	; 15
    1f16:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__prologue_saves__+0x8>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	ea 01       	movw	r28, r20
    1f1e:	80 81       	ld	r24, Z
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	08 f4       	brcc	.+2      	; 0x1f26 <_fpadd_parts+0x18>
    1f24:	38 c1       	rjmp	.+624    	; 0x2196 <_fpadd_parts+0x288>
    1f26:	db 01       	movw	r26, r22
    1f28:	9c 91       	ld	r25, X
    1f2a:	92 30       	cpi	r25, 0x02	; 2
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <_fpadd_parts+0x22>
    1f2e:	30 c1       	rjmp	.+608    	; 0x2190 <_fpadd_parts+0x282>
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	59 f4       	brne	.+22     	; 0x1f4a <_fpadd_parts+0x3c>
    1f34:	94 30       	cpi	r25, 0x04	; 4
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <_fpadd_parts+0x2c>
    1f38:	2e c1       	rjmp	.+604    	; 0x2196 <_fpadd_parts+0x288>
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	8c 91       	ld	r24, X
    1f40:	11 97       	sbiw	r26, 0x01	; 1
    1f42:	98 17       	cp	r25, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <_fpadd_parts+0x3a>
    1f46:	21 c1       	rjmp	.+578    	; 0x218a <_fpadd_parts+0x27c>
    1f48:	26 c1       	rjmp	.+588    	; 0x2196 <_fpadd_parts+0x288>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <_fpadd_parts+0x42>
    1f4e:	20 c1       	rjmp	.+576    	; 0x2190 <_fpadd_parts+0x282>
    1f50:	92 30       	cpi	r25, 0x02	; 2
    1f52:	b1 f4       	brne	.+44     	; 0x1f80 <_fpadd_parts+0x72>
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <_fpadd_parts+0x4c>
    1f58:	1e c1       	rjmp	.+572    	; 0x2196 <_fpadd_parts+0x288>
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	af 01       	movw	r20, r30
    1f5e:	28 e0       	ldi	r18, 0x08	; 8
    1f60:	da 01       	movw	r26, r20
    1f62:	0d 90       	ld	r0, X+
    1f64:	ad 01       	movw	r20, r26
    1f66:	dc 01       	movw	r26, r24
    1f68:	0d 92       	st	X+, r0
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	21 50       	subi	r18, 0x01	; 1
    1f6e:	c1 f7       	brne	.-16     	; 0x1f60 <_fpadd_parts+0x52>
    1f70:	db 01       	movw	r26, r22
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	8c 91       	ld	r24, X
    1f76:	11 97       	sbiw	r26, 0x01	; 1
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	89 23       	and	r24, r25
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	0a c1       	rjmp	.+532    	; 0x2194 <_fpadd_parts+0x286>
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <_fpadd_parts+0x78>
    1f84:	05 c1       	rjmp	.+522    	; 0x2190 <_fpadd_parts+0x282>
    1f86:	c2 80       	ldd	r12, Z+2	; 0x02
    1f88:	d3 80       	ldd	r13, Z+3	; 0x03
    1f8a:	db 01       	movw	r26, r22
    1f8c:	12 96       	adiw	r26, 0x02	; 2
    1f8e:	6d 90       	ld	r6, X+
    1f90:	7c 90       	ld	r7, X
    1f92:	13 97       	sbiw	r26, 0x03	; 3
    1f94:	24 81       	ldd	r18, Z+4	; 0x04
    1f96:	35 81       	ldd	r19, Z+5	; 0x05
    1f98:	46 81       	ldd	r20, Z+6	; 0x06
    1f9a:	57 81       	ldd	r21, Z+7	; 0x07
    1f9c:	14 96       	adiw	r26, 0x04	; 4
    1f9e:	ed 90       	ld	r14, X+
    1fa0:	fd 90       	ld	r15, X+
    1fa2:	0d 91       	ld	r16, X+
    1fa4:	1c 91       	ld	r17, X
    1fa6:	17 97       	sbiw	r26, 0x07	; 7
    1fa8:	c6 01       	movw	r24, r12
    1faa:	86 19       	sub	r24, r6
    1fac:	97 09       	sbc	r25, r7
    1fae:	5c 01       	movw	r10, r24
    1fb0:	97 ff       	sbrs	r25, 7
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <_fpadd_parts+0xae>
    1fb4:	aa 24       	eor	r10, r10
    1fb6:	bb 24       	eor	r11, r11
    1fb8:	a8 1a       	sub	r10, r24
    1fba:	b9 0a       	sbc	r11, r25
    1fbc:	b0 e2       	ldi	r27, 0x20	; 32
    1fbe:	ab 16       	cp	r10, r27
    1fc0:	b1 04       	cpc	r11, r1
    1fc2:	0c f0       	brlt	.+2      	; 0x1fc6 <_fpadd_parts+0xb8>
    1fc4:	61 c0       	rjmp	.+194    	; 0x2088 <_fpadd_parts+0x17a>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	19 06       	cpc	r1, r25
    1fca:	6c f5       	brge	.+90     	; 0x2026 <_fpadd_parts+0x118>
    1fcc:	37 01       	movw	r6, r14
    1fce:	48 01       	movw	r8, r16
    1fd0:	0a 2c       	mov	r0, r10
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <_fpadd_parts+0xce>
    1fd4:	96 94       	lsr	r9
    1fd6:	87 94       	ror	r8
    1fd8:	77 94       	ror	r7
    1fda:	67 94       	ror	r6
    1fdc:	0a 94       	dec	r0
    1fde:	d2 f7       	brpl	.-12     	; 0x1fd4 <_fpadd_parts+0xc6>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	0a 2c       	mov	r0, r10
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <_fpadd_parts+0xe6>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	0a 94       	dec	r0
    1ff6:	d2 f7       	brpl	.-12     	; 0x1fec <_fpadd_parts+0xde>
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	a1 09       	sbc	r26, r1
    1ffc:	b1 09       	sbc	r27, r1
    1ffe:	8e 21       	and	r24, r14
    2000:	9f 21       	and	r25, r15
    2002:	a0 23       	and	r26, r16
    2004:	b1 23       	and	r27, r17
    2006:	ee 24       	eor	r14, r14
    2008:	ff 24       	eor	r15, r15
    200a:	87 01       	movw	r16, r14
    200c:	e3 94       	inc	r14
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	a1 05       	cpc	r26, r1
    2012:	b1 05       	cpc	r27, r1
    2014:	19 f4       	brne	.+6      	; 0x201c <_fpadd_parts+0x10e>
    2016:	ee 24       	eor	r14, r14
    2018:	ff 24       	eor	r15, r15
    201a:	87 01       	movw	r16, r14
    201c:	e6 28       	or	r14, r6
    201e:	f7 28       	or	r15, r7
    2020:	08 29       	or	r16, r8
    2022:	19 29       	or	r17, r9
    2024:	3c c0       	rjmp	.+120    	; 0x209e <_fpadd_parts+0x190>
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	d1 f1       	breq	.+116    	; 0x209e <_fpadd_parts+0x190>
    202a:	ca 0c       	add	r12, r10
    202c:	db 1c       	adc	r13, r11
    202e:	39 01       	movw	r6, r18
    2030:	4a 01       	movw	r8, r20
    2032:	0a 2c       	mov	r0, r10
    2034:	04 c0       	rjmp	.+8      	; 0x203e <_fpadd_parts+0x130>
    2036:	96 94       	lsr	r9
    2038:	87 94       	ror	r8
    203a:	77 94       	ror	r7
    203c:	67 94       	ror	r6
    203e:	0a 94       	dec	r0
    2040:	d2 f7       	brpl	.-12     	; 0x2036 <_fpadd_parts+0x128>
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e0       	ldi	r26, 0x00	; 0
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	0a 2c       	mov	r0, r10
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <_fpadd_parts+0x148>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	aa 1f       	adc	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	0a 94       	dec	r0
    2058:	d2 f7       	brpl	.-12     	; 0x204e <_fpadd_parts+0x140>
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	a1 09       	sbc	r26, r1
    205e:	b1 09       	sbc	r27, r1
    2060:	82 23       	and	r24, r18
    2062:	93 23       	and	r25, r19
    2064:	a4 23       	and	r26, r20
    2066:	b5 23       	and	r27, r21
    2068:	21 e0       	ldi	r18, 0x01	; 1
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	a1 05       	cpc	r26, r1
    2074:	b1 05       	cpc	r27, r1
    2076:	19 f4       	brne	.+6      	; 0x207e <_fpadd_parts+0x170>
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	a9 01       	movw	r20, r18
    207e:	26 29       	or	r18, r6
    2080:	37 29       	or	r19, r7
    2082:	48 29       	or	r20, r8
    2084:	59 29       	or	r21, r9
    2086:	0b c0       	rjmp	.+22     	; 0x209e <_fpadd_parts+0x190>
    2088:	6c 14       	cp	r6, r12
    208a:	7d 04       	cpc	r7, r13
    208c:	24 f4       	brge	.+8      	; 0x2096 <_fpadd_parts+0x188>
    208e:	ee 24       	eor	r14, r14
    2090:	ff 24       	eor	r15, r15
    2092:	87 01       	movw	r16, r14
    2094:	04 c0       	rjmp	.+8      	; 0x209e <_fpadd_parts+0x190>
    2096:	63 01       	movw	r12, r6
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	a9 01       	movw	r20, r18
    209e:	81 81       	ldd	r24, Z+1	; 0x01
    20a0:	fb 01       	movw	r30, r22
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	89 17       	cp	r24, r25
    20a6:	09 f4       	brne	.+2      	; 0x20aa <_fpadd_parts+0x19c>
    20a8:	45 c0       	rjmp	.+138    	; 0x2134 <_fpadd_parts+0x226>
    20aa:	88 23       	and	r24, r24
    20ac:	49 f0       	breq	.+18     	; 0x20c0 <_fpadd_parts+0x1b2>
    20ae:	d8 01       	movw	r26, r16
    20b0:	c7 01       	movw	r24, r14
    20b2:	82 1b       	sub	r24, r18
    20b4:	93 0b       	sbc	r25, r19
    20b6:	a4 0b       	sbc	r26, r20
    20b8:	b5 0b       	sbc	r27, r21
    20ba:	9c 01       	movw	r18, r24
    20bc:	ad 01       	movw	r20, r26
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <_fpadd_parts+0x1ba>
    20c0:	2e 19       	sub	r18, r14
    20c2:	3f 09       	sbc	r19, r15
    20c4:	40 0b       	sbc	r20, r16
    20c6:	51 0b       	sbc	r21, r17
    20c8:	57 fd       	sbrc	r21, 7
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <_fpadd_parts+0x1c6>
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	ca 82       	std	Y+2, r12	; 0x02
    20d0:	db 82       	std	Y+3, r13	; 0x03
    20d2:	0b c0       	rjmp	.+22     	; 0x20ea <_fpadd_parts+0x1dc>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	ca 82       	std	Y+2, r12	; 0x02
    20da:	db 82       	std	Y+3, r13	; 0x03
    20dc:	50 95       	com	r21
    20de:	40 95       	com	r20
    20e0:	30 95       	com	r19
    20e2:	21 95       	neg	r18
    20e4:	3f 4f       	sbci	r19, 0xFF	; 255
    20e6:	4f 4f       	sbci	r20, 0xFF	; 255
    20e8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ea:	2c 83       	std	Y+4, r18	; 0x04
    20ec:	3d 83       	std	Y+5, r19	; 0x05
    20ee:	4e 83       	std	Y+6, r20	; 0x06
    20f0:	5f 83       	std	Y+7, r21	; 0x07
    20f2:	0d c0       	rjmp	.+26     	; 0x210e <_fpadd_parts+0x200>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	8c 83       	std	Y+4, r24	; 0x04
    20fe:	9d 83       	std	Y+5, r25	; 0x05
    2100:	ae 83       	std	Y+6, r26	; 0x06
    2102:	bf 83       	std	Y+7, r27	; 0x07
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	9b 81       	ldd	r25, Y+3	; 0x03
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	9b 83       	std	Y+3, r25	; 0x03
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	ae 81       	ldd	r26, Y+6	; 0x06
    2114:	bf 81       	ldd	r27, Y+7	; 0x07
    2116:	9c 01       	movw	r18, r24
    2118:	ad 01       	movw	r20, r26
    211a:	21 50       	subi	r18, 0x01	; 1
    211c:	30 40       	sbci	r19, 0x00	; 0
    211e:	40 40       	sbci	r20, 0x00	; 0
    2120:	50 40       	sbci	r21, 0x00	; 0
    2122:	2f 3f       	cpi	r18, 0xFF	; 255
    2124:	ef ef       	ldi	r30, 0xFF	; 255
    2126:	3e 07       	cpc	r19, r30
    2128:	ef ef       	ldi	r30, 0xFF	; 255
    212a:	4e 07       	cpc	r20, r30
    212c:	ef e3       	ldi	r30, 0x3F	; 63
    212e:	5e 07       	cpc	r21, r30
    2130:	08 f3       	brcs	.-62     	; 0x20f4 <_fpadd_parts+0x1e6>
    2132:	0b c0       	rjmp	.+22     	; 0x214a <_fpadd_parts+0x23c>
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	ca 82       	std	Y+2, r12	; 0x02
    2138:	db 82       	std	Y+3, r13	; 0x03
    213a:	2e 0d       	add	r18, r14
    213c:	3f 1d       	adc	r19, r15
    213e:	40 1f       	adc	r20, r16
    2140:	51 1f       	adc	r21, r17
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	3d 83       	std	Y+5, r19	; 0x05
    2146:	4e 83       	std	Y+6, r20	; 0x06
    2148:	5f 83       	std	Y+7, r21	; 0x07
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	88 83       	st	Y, r24
    214e:	2c 81       	ldd	r18, Y+4	; 0x04
    2150:	3d 81       	ldd	r19, Y+5	; 0x05
    2152:	4e 81       	ldd	r20, Y+6	; 0x06
    2154:	5f 81       	ldd	r21, Y+7	; 0x07
    2156:	57 ff       	sbrs	r21, 7
    2158:	1d c0       	rjmp	.+58     	; 0x2194 <_fpadd_parts+0x286>
    215a:	da 01       	movw	r26, r20
    215c:	c9 01       	movw	r24, r18
    215e:	81 70       	andi	r24, 0x01	; 1
    2160:	90 70       	andi	r25, 0x00	; 0
    2162:	a0 70       	andi	r26, 0x00	; 0
    2164:	b0 70       	andi	r27, 0x00	; 0
    2166:	56 95       	lsr	r21
    2168:	47 95       	ror	r20
    216a:	37 95       	ror	r19
    216c:	27 95       	ror	r18
    216e:	82 2b       	or	r24, r18
    2170:	93 2b       	or	r25, r19
    2172:	a4 2b       	or	r26, r20
    2174:	b5 2b       	or	r27, r21
    2176:	8c 83       	std	Y+4, r24	; 0x04
    2178:	9d 83       	std	Y+5, r25	; 0x05
    217a:	ae 83       	std	Y+6, r26	; 0x06
    217c:	bf 83       	std	Y+7, r27	; 0x07
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	8a 83       	std	Y+2, r24	; 0x02
    2186:	9b 83       	std	Y+3, r25	; 0x03
    2188:	05 c0       	rjmp	.+10     	; 0x2194 <_fpadd_parts+0x286>
    218a:	ef e2       	ldi	r30, 0x2F	; 47
    218c:	f0 e2       	ldi	r31, 0x20	; 32
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <_fpadd_parts+0x288>
    2190:	fb 01       	movw	r30, r22
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <_fpadd_parts+0x288>
    2194:	fe 01       	movw	r30, r28
    2196:	cf 01       	movw	r24, r30
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	ee e0       	ldi	r30, 0x0E	; 14
    219e:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__epilogue_restores__+0x8>

000021a2 <__addsf3>:
    21a2:	a0 e2       	ldi	r26, 0x20	; 32
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e7 ed       	ldi	r30, 0xD7	; 215
    21a8:	f0 e1       	ldi	r31, 0x10	; 16
    21aa:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__+0x18>
    21ae:	69 83       	std	Y+1, r22	; 0x01
    21b0:	7a 83       	std	Y+2, r23	; 0x02
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	9c 83       	std	Y+4, r25	; 0x04
    21b6:	2d 83       	std	Y+5, r18	; 0x05
    21b8:	3e 83       	std	Y+6, r19	; 0x06
    21ba:	4f 83       	std	Y+7, r20	; 0x07
    21bc:	58 87       	std	Y+8, r21	; 0x08
    21be:	89 e0       	ldi	r24, 0x09	; 9
    21c0:	e8 2e       	mov	r14, r24
    21c2:	f1 2c       	mov	r15, r1
    21c4:	ec 0e       	add	r14, r28
    21c6:	fd 1e       	adc	r15, r29
    21c8:	ce 01       	movw	r24, r28
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	b7 01       	movw	r22, r14
    21ce:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    21d2:	8e 01       	movw	r16, r28
    21d4:	0f 5e       	subi	r16, 0xEF	; 239
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	ce 01       	movw	r24, r28
    21da:	05 96       	adiw	r24, 0x05	; 5
    21dc:	b8 01       	movw	r22, r16
    21de:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    21e2:	c7 01       	movw	r24, r14
    21e4:	b8 01       	movw	r22, r16
    21e6:	ae 01       	movw	r20, r28
    21e8:	47 5e       	subi	r20, 0xE7	; 231
    21ea:	5f 4f       	sbci	r21, 0xFF	; 255
    21ec:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_fpadd_parts>
    21f0:	0e 94 8b 14 	call	0x2916	; 0x2916 <__pack_f>
    21f4:	a0 96       	adiw	r28, 0x20	; 32
    21f6:	e6 e0       	ldi	r30, 0x06	; 6
    21f8:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000021fc <__subsf3>:
    21fc:	a0 e2       	ldi	r26, 0x20	; 32
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e4 e0       	ldi	r30, 0x04	; 4
    2202:	f1 e1       	ldi	r31, 0x11	; 17
    2204:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__+0x18>
    2208:	69 83       	std	Y+1, r22	; 0x01
    220a:	7a 83       	std	Y+2, r23	; 0x02
    220c:	8b 83       	std	Y+3, r24	; 0x03
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	2d 83       	std	Y+5, r18	; 0x05
    2212:	3e 83       	std	Y+6, r19	; 0x06
    2214:	4f 83       	std	Y+7, r20	; 0x07
    2216:	58 87       	std	Y+8, r21	; 0x08
    2218:	8e 01       	movw	r16, r28
    221a:	07 5f       	subi	r16, 0xF7	; 247
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	b8 01       	movw	r22, r16
    2224:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    2228:	91 e1       	ldi	r25, 0x11	; 17
    222a:	e9 2e       	mov	r14, r25
    222c:	f1 2c       	mov	r15, r1
    222e:	ec 0e       	add	r14, r28
    2230:	fd 1e       	adc	r15, r29
    2232:	ce 01       	movw	r24, r28
    2234:	05 96       	adiw	r24, 0x05	; 5
    2236:	b7 01       	movw	r22, r14
    2238:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    223c:	8a 89       	ldd	r24, Y+18	; 0x12
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	89 27       	eor	r24, r25
    2242:	8a 8b       	std	Y+18, r24	; 0x12
    2244:	c8 01       	movw	r24, r16
    2246:	b7 01       	movw	r22, r14
    2248:	ae 01       	movw	r20, r28
    224a:	47 5e       	subi	r20, 0xE7	; 231
    224c:	5f 4f       	sbci	r21, 0xFF	; 255
    224e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_fpadd_parts>
    2252:	0e 94 8b 14 	call	0x2916	; 0x2916 <__pack_f>
    2256:	a0 96       	adiw	r28, 0x20	; 32
    2258:	e6 e0       	ldi	r30, 0x06	; 6
    225a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

0000225e <__mulsf3>:
    225e:	a0 e2       	ldi	r26, 0x20	; 32
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e3       	ldi	r30, 0x35	; 53
    2264:	f1 e1       	ldi	r31, 0x11	; 17
    2266:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__>
    226a:	69 83       	std	Y+1, r22	; 0x01
    226c:	7a 83       	std	Y+2, r23	; 0x02
    226e:	8b 83       	std	Y+3, r24	; 0x03
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	2d 83       	std	Y+5, r18	; 0x05
    2274:	3e 83       	std	Y+6, r19	; 0x06
    2276:	4f 83       	std	Y+7, r20	; 0x07
    2278:	58 87       	std	Y+8, r21	; 0x08
    227a:	ce 01       	movw	r24, r28
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	be 01       	movw	r22, r28
    2280:	67 5f       	subi	r22, 0xF7	; 247
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    2288:	ce 01       	movw	r24, r28
    228a:	05 96       	adiw	r24, 0x05	; 5
    228c:	be 01       	movw	r22, r28
    228e:	6f 5e       	subi	r22, 0xEF	; 239
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    2296:	99 85       	ldd	r25, Y+9	; 0x09
    2298:	92 30       	cpi	r25, 0x02	; 2
    229a:	78 f0       	brcs	.+30     	; 0x22ba <__mulsf3+0x5c>
    229c:	89 89       	ldd	r24, Y+17	; 0x11
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	c0 f0       	brcs	.+48     	; 0x22d2 <__mulsf3+0x74>
    22a2:	94 30       	cpi	r25, 0x04	; 4
    22a4:	19 f4       	brne	.+6      	; 0x22ac <__mulsf3+0x4e>
    22a6:	82 30       	cpi	r24, 0x02	; 2
    22a8:	41 f4       	brne	.+16     	; 0x22ba <__mulsf3+0x5c>
    22aa:	cb c0       	rjmp	.+406    	; 0x2442 <__mulsf3+0x1e4>
    22ac:	84 30       	cpi	r24, 0x04	; 4
    22ae:	19 f4       	brne	.+6      	; 0x22b6 <__mulsf3+0x58>
    22b0:	92 30       	cpi	r25, 0x02	; 2
    22b2:	79 f4       	brne	.+30     	; 0x22d2 <__mulsf3+0x74>
    22b4:	c6 c0       	rjmp	.+396    	; 0x2442 <__mulsf3+0x1e4>
    22b6:	92 30       	cpi	r25, 0x02	; 2
    22b8:	51 f4       	brne	.+20     	; 0x22ce <__mulsf3+0x70>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    22be:	9a 89       	ldd	r25, Y+18	; 0x12
    22c0:	29 17       	cp	r18, r25
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <__mulsf3+0x68>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	8a 87       	std	Y+10, r24	; 0x0a
    22c8:	ce 01       	movw	r24, r28
    22ca:	09 96       	adiw	r24, 0x09	; 9
    22cc:	bc c0       	rjmp	.+376    	; 0x2446 <__mulsf3+0x1e8>
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	51 f4       	brne	.+20     	; 0x22e6 <__mulsf3+0x88>
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    22d6:	9a 89       	ldd	r25, Y+18	; 0x12
    22d8:	29 17       	cp	r18, r25
    22da:	09 f4       	brne	.+2      	; 0x22de <__mulsf3+0x80>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	8a 8b       	std	Y+18, r24	; 0x12
    22e0:	ce 01       	movw	r24, r28
    22e2:	41 96       	adiw	r24, 0x11	; 17
    22e4:	b0 c0       	rjmp	.+352    	; 0x2446 <__mulsf3+0x1e8>
    22e6:	6d 84       	ldd	r6, Y+13	; 0x0d
    22e8:	7e 84       	ldd	r7, Y+14	; 0x0e
    22ea:	8f 84       	ldd	r8, Y+15	; 0x0f
    22ec:	98 88       	ldd	r9, Y+16	; 0x10
    22ee:	ed 88       	ldd	r14, Y+21	; 0x15
    22f0:	fe 88       	ldd	r15, Y+22	; 0x16
    22f2:	0f 89       	ldd	r16, Y+23	; 0x17
    22f4:	18 8d       	ldd	r17, Y+24	; 0x18
    22f6:	e0 e2       	ldi	r30, 0x20	; 32
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	dc 01       	movw	r26, r24
    2300:	aa 24       	eor	r10, r10
    2302:	bb 24       	eor	r11, r11
    2304:	65 01       	movw	r12, r10
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	a9 01       	movw	r20, r18
    230c:	b3 01       	movw	r22, r6
    230e:	61 70       	andi	r22, 0x01	; 1
    2310:	70 70       	andi	r23, 0x00	; 0
    2312:	61 15       	cp	r22, r1
    2314:	71 05       	cpc	r23, r1
    2316:	d1 f0       	breq	.+52     	; 0x234c <__mulsf3+0xee>
    2318:	2e 0d       	add	r18, r14
    231a:	3f 1d       	adc	r19, r15
    231c:	40 1f       	adc	r20, r16
    231e:	51 1f       	adc	r21, r17
    2320:	15 01       	movw	r2, r10
    2322:	26 01       	movw	r4, r12
    2324:	28 0e       	add	r2, r24
    2326:	39 1e       	adc	r3, r25
    2328:	4a 1e       	adc	r4, r26
    232a:	5b 1e       	adc	r5, r27
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e0       	ldi	r26, 0x00	; 0
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	2e 15       	cp	r18, r14
    2336:	3f 05       	cpc	r19, r15
    2338:	40 07       	cpc	r20, r16
    233a:	51 07       	cpc	r21, r17
    233c:	18 f0       	brcs	.+6      	; 0x2344 <__mulsf3+0xe6>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	dc 01       	movw	r26, r24
    2344:	82 0d       	add	r24, r2
    2346:	93 1d       	adc	r25, r3
    2348:	a4 1d       	adc	r26, r4
    234a:	b5 1d       	adc	r27, r5
    234c:	aa 0c       	add	r10, r10
    234e:	bb 1c       	adc	r11, r11
    2350:	cc 1c       	adc	r12, r12
    2352:	dd 1c       	adc	r13, r13
    2354:	17 ff       	sbrs	r17, 7
    2356:	09 c0       	rjmp	.+18     	; 0x236a <__mulsf3+0x10c>
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	26 2e       	mov	r2, r22
    235c:	31 2c       	mov	r3, r1
    235e:	41 2c       	mov	r4, r1
    2360:	51 2c       	mov	r5, r1
    2362:	a2 28       	or	r10, r2
    2364:	b3 28       	or	r11, r3
    2366:	c4 28       	or	r12, r4
    2368:	d5 28       	or	r13, r5
    236a:	31 97       	sbiw	r30, 0x01	; 1
    236c:	49 f0       	breq	.+18     	; 0x2380 <__mulsf3+0x122>
    236e:	ee 0c       	add	r14, r14
    2370:	ff 1c       	adc	r15, r15
    2372:	00 1f       	adc	r16, r16
    2374:	11 1f       	adc	r17, r17
    2376:	96 94       	lsr	r9
    2378:	87 94       	ror	r8
    237a:	77 94       	ror	r7
    237c:	67 94       	ror	r6
    237e:	c6 cf       	rjmp	.-116    	; 0x230c <__mulsf3+0xae>
    2380:	6b 89       	ldd	r22, Y+19	; 0x13
    2382:	7c 89       	ldd	r23, Y+20	; 0x14
    2384:	eb 85       	ldd	r30, Y+11	; 0x0b
    2386:	fc 85       	ldd	r31, Y+12	; 0x0c
    2388:	6e 0f       	add	r22, r30
    238a:	7f 1f       	adc	r23, r31
    238c:	6e 5f       	subi	r22, 0xFE	; 254
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	6b 8f       	std	Y+27, r22	; 0x1b
    2392:	7c 8f       	std	Y+28, r23	; 0x1c
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	ea 85       	ldd	r30, Y+10	; 0x0a
    2398:	7a 89       	ldd	r23, Y+18	; 0x12
    239a:	e7 17       	cp	r30, r23
    239c:	09 f4       	brne	.+2      	; 0x23a0 <__mulsf3+0x142>
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	6a 8f       	std	Y+26, r22	; 0x1a
    23a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23a6:	10 c0       	rjmp	.+32     	; 0x23c8 <__mulsf3+0x16a>
    23a8:	fc 01       	movw	r30, r24
    23aa:	e1 70       	andi	r30, 0x01	; 1
    23ac:	f0 70       	andi	r31, 0x00	; 0
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	29 f0       	breq	.+10     	; 0x23bc <__mulsf3+0x15e>
    23b2:	56 95       	lsr	r21
    23b4:	47 95       	ror	r20
    23b6:	37 95       	ror	r19
    23b8:	27 95       	ror	r18
    23ba:	50 68       	ori	r21, 0x80	; 128
    23bc:	b6 95       	lsr	r27
    23be:	a7 95       	ror	r26
    23c0:	97 95       	ror	r25
    23c2:	87 95       	ror	r24
    23c4:	6f 5f       	subi	r22, 0xFF	; 255
    23c6:	7f 4f       	sbci	r23, 0xFF	; 255
    23c8:	b7 fd       	sbrc	r27, 7
    23ca:	ee cf       	rjmp	.-36     	; 0x23a8 <__mulsf3+0x14a>
    23cc:	0c c0       	rjmp	.+24     	; 0x23e6 <__mulsf3+0x188>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	aa 1f       	adc	r26, r26
    23d4:	bb 1f       	adc	r27, r27
    23d6:	57 fd       	sbrc	r21, 7
    23d8:	81 60       	ori	r24, 0x01	; 1
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	44 1f       	adc	r20, r20
    23e0:	55 1f       	adc	r21, r21
    23e2:	61 50       	subi	r22, 0x01	; 1
    23e4:	70 40       	sbci	r23, 0x00	; 0
    23e6:	80 30       	cpi	r24, 0x00	; 0
    23e8:	e0 e0       	ldi	r30, 0x00	; 0
    23ea:	9e 07       	cpc	r25, r30
    23ec:	e0 e0       	ldi	r30, 0x00	; 0
    23ee:	ae 07       	cpc	r26, r30
    23f0:	e0 e4       	ldi	r30, 0x40	; 64
    23f2:	be 07       	cpc	r27, r30
    23f4:	60 f3       	brcs	.-40     	; 0x23ce <__mulsf3+0x170>
    23f6:	6b 8f       	std	Y+27, r22	; 0x1b
    23f8:	7c 8f       	std	Y+28, r23	; 0x1c
    23fa:	6f e7       	ldi	r22, 0x7F	; 127
    23fc:	e6 2e       	mov	r14, r22
    23fe:	f1 2c       	mov	r15, r1
    2400:	01 2d       	mov	r16, r1
    2402:	11 2d       	mov	r17, r1
    2404:	e8 22       	and	r14, r24
    2406:	f9 22       	and	r15, r25
    2408:	0a 23       	and	r16, r26
    240a:	1b 23       	and	r17, r27
    240c:	60 e4       	ldi	r22, 0x40	; 64
    240e:	e6 16       	cp	r14, r22
    2410:	f1 04       	cpc	r15, r1
    2412:	01 05       	cpc	r16, r1
    2414:	11 05       	cpc	r17, r1
    2416:	61 f4       	brne	.+24     	; 0x2430 <__mulsf3+0x1d2>
    2418:	87 fd       	sbrc	r24, 7
    241a:	0a c0       	rjmp	.+20     	; 0x2430 <__mulsf3+0x1d2>
    241c:	21 15       	cp	r18, r1
    241e:	31 05       	cpc	r19, r1
    2420:	41 05       	cpc	r20, r1
    2422:	51 05       	cpc	r21, r1
    2424:	29 f0       	breq	.+10     	; 0x2430 <__mulsf3+0x1d2>
    2426:	80 5c       	subi	r24, 0xC0	; 192
    2428:	9f 4f       	sbci	r25, 0xFF	; 255
    242a:	af 4f       	sbci	r26, 0xFF	; 255
    242c:	bf 4f       	sbci	r27, 0xFF	; 255
    242e:	80 78       	andi	r24, 0x80	; 128
    2430:	8d 8f       	std	Y+29, r24	; 0x1d
    2432:	9e 8f       	std	Y+30, r25	; 0x1e
    2434:	af 8f       	std	Y+31, r26	; 0x1f
    2436:	b8 a3       	std	Y+32, r27	; 0x20
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	89 8f       	std	Y+25, r24	; 0x19
    243c:	ce 01       	movw	r24, r28
    243e:	49 96       	adiw	r24, 0x19	; 25
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <__mulsf3+0x1e8>
    2442:	8f e2       	ldi	r24, 0x2F	; 47
    2444:	90 e2       	ldi	r25, 0x20	; 32
    2446:	0e 94 8b 14 	call	0x2916	; 0x2916 <__pack_f>
    244a:	a0 96       	adiw	r28, 0x20	; 32
    244c:	e2 e1       	ldi	r30, 0x12	; 18
    244e:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__>

00002452 <__divsf3>:
    2452:	a8 e1       	ldi	r26, 0x18	; 24
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ef e2       	ldi	r30, 0x2F	; 47
    2458:	f2 e1       	ldi	r31, 0x12	; 18
    245a:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__+0x10>
    245e:	69 83       	std	Y+1, r22	; 0x01
    2460:	7a 83       	std	Y+2, r23	; 0x02
    2462:	8b 83       	std	Y+3, r24	; 0x03
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	2d 83       	std	Y+5, r18	; 0x05
    2468:	3e 83       	std	Y+6, r19	; 0x06
    246a:	4f 83       	std	Y+7, r20	; 0x07
    246c:	58 87       	std	Y+8, r21	; 0x08
    246e:	8e 01       	movw	r16, r28
    2470:	07 5f       	subi	r16, 0xF7	; 247
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	ce 01       	movw	r24, r28
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	b8 01       	movw	r22, r16
    247a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    247e:	81 e1       	ldi	r24, 0x11	; 17
    2480:	e8 2e       	mov	r14, r24
    2482:	f1 2c       	mov	r15, r1
    2484:	ec 0e       	add	r14, r28
    2486:	fd 1e       	adc	r15, r29
    2488:	ce 01       	movw	r24, r28
    248a:	05 96       	adiw	r24, 0x05	; 5
    248c:	b7 01       	movw	r22, r14
    248e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    2492:	99 85       	ldd	r25, Y+9	; 0x09
    2494:	92 30       	cpi	r25, 0x02	; 2
    2496:	08 f4       	brcc	.+2      	; 0x249a <__divsf3+0x48>
    2498:	83 c0       	rjmp	.+262    	; 0x25a0 <__divsf3+0x14e>
    249a:	89 89       	ldd	r24, Y+17	; 0x11
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	08 f4       	brcc	.+2      	; 0x24a2 <__divsf3+0x50>
    24a0:	7b c0       	rjmp	.+246    	; 0x2598 <__divsf3+0x146>
    24a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24a4:	3a 89       	ldd	r19, Y+18	; 0x12
    24a6:	23 27       	eor	r18, r19
    24a8:	2a 87       	std	Y+10, r18	; 0x0a
    24aa:	94 30       	cpi	r25, 0x04	; 4
    24ac:	11 f0       	breq	.+4      	; 0x24b2 <__divsf3+0x60>
    24ae:	92 30       	cpi	r25, 0x02	; 2
    24b0:	21 f4       	brne	.+8      	; 0x24ba <__divsf3+0x68>
    24b2:	98 17       	cp	r25, r24
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <__divsf3+0x66>
    24b6:	6c c0       	rjmp	.+216    	; 0x2590 <__divsf3+0x13e>
    24b8:	71 c0       	rjmp	.+226    	; 0x259c <__divsf3+0x14a>
    24ba:	84 30       	cpi	r24, 0x04	; 4
    24bc:	39 f4       	brne	.+14     	; 0x24cc <__divsf3+0x7a>
    24be:	1d 86       	std	Y+13, r1	; 0x0d
    24c0:	1e 86       	std	Y+14, r1	; 0x0e
    24c2:	1f 86       	std	Y+15, r1	; 0x0f
    24c4:	18 8a       	std	Y+16, r1	; 0x10
    24c6:	1b 86       	std	Y+11, r1	; 0x0b
    24c8:	1c 86       	std	Y+12, r1	; 0x0c
    24ca:	6a c0       	rjmp	.+212    	; 0x25a0 <__divsf3+0x14e>
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <__divsf3+0x84>
    24d0:	84 e0       	ldi	r24, 0x04	; 4
    24d2:	89 87       	std	Y+9, r24	; 0x09
    24d4:	65 c0       	rjmp	.+202    	; 0x25a0 <__divsf3+0x14e>
    24d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24da:	2b 89       	ldd	r18, Y+19	; 0x13
    24dc:	3c 89       	ldd	r19, Y+20	; 0x14
    24de:	82 1b       	sub	r24, r18
    24e0:	93 0b       	sbc	r25, r19
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    24e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    24ea:	4f 85       	ldd	r20, Y+15	; 0x0f
    24ec:	58 89       	ldd	r21, Y+16	; 0x10
    24ee:	ed 88       	ldd	r14, Y+21	; 0x15
    24f0:	fe 88       	ldd	r15, Y+22	; 0x16
    24f2:	0f 89       	ldd	r16, Y+23	; 0x17
    24f4:	18 8d       	ldd	r17, Y+24	; 0x18
    24f6:	2e 15       	cp	r18, r14
    24f8:	3f 05       	cpc	r19, r15
    24fa:	40 07       	cpc	r20, r16
    24fc:	51 07       	cpc	r21, r17
    24fe:	38 f4       	brcc	.+14     	; 0x250e <__divsf3+0xbc>
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	44 1f       	adc	r20, r20
    2506:	55 1f       	adc	r21, r21
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	8b 87       	std	Y+11, r24	; 0x0b
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	6f e1       	ldi	r22, 0x1F	; 31
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	a1 2c       	mov	r10, r1
    2514:	b1 2c       	mov	r11, r1
    2516:	c1 2c       	mov	r12, r1
    2518:	a0 e4       	ldi	r26, 0x40	; 64
    251a:	da 2e       	mov	r13, r26
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	dc 01       	movw	r26, r24
    2522:	2e 15       	cp	r18, r14
    2524:	3f 05       	cpc	r19, r15
    2526:	40 07       	cpc	r20, r16
    2528:	51 07       	cpc	r21, r17
    252a:	40 f0       	brcs	.+16     	; 0x253c <__divsf3+0xea>
    252c:	8a 29       	or	r24, r10
    252e:	9b 29       	or	r25, r11
    2530:	ac 29       	or	r26, r12
    2532:	bd 29       	or	r27, r13
    2534:	2e 19       	sub	r18, r14
    2536:	3f 09       	sbc	r19, r15
    2538:	40 0b       	sbc	r20, r16
    253a:	51 0b       	sbc	r21, r17
    253c:	d6 94       	lsr	r13
    253e:	c7 94       	ror	r12
    2540:	b7 94       	ror	r11
    2542:	a7 94       	ror	r10
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	44 1f       	adc	r20, r20
    254a:	55 1f       	adc	r21, r21
    254c:	61 50       	subi	r22, 0x01	; 1
    254e:	70 40       	sbci	r23, 0x00	; 0
    2550:	41 f7       	brne	.-48     	; 0x2522 <__divsf3+0xd0>
    2552:	6f e7       	ldi	r22, 0x7F	; 127
    2554:	e6 2e       	mov	r14, r22
    2556:	f1 2c       	mov	r15, r1
    2558:	01 2d       	mov	r16, r1
    255a:	11 2d       	mov	r17, r1
    255c:	e8 22       	and	r14, r24
    255e:	f9 22       	and	r15, r25
    2560:	0a 23       	and	r16, r26
    2562:	1b 23       	and	r17, r27
    2564:	60 e4       	ldi	r22, 0x40	; 64
    2566:	e6 16       	cp	r14, r22
    2568:	f1 04       	cpc	r15, r1
    256a:	01 05       	cpc	r16, r1
    256c:	11 05       	cpc	r17, r1
    256e:	61 f4       	brne	.+24     	; 0x2588 <__divsf3+0x136>
    2570:	87 fd       	sbrc	r24, 7
    2572:	0a c0       	rjmp	.+20     	; 0x2588 <__divsf3+0x136>
    2574:	21 15       	cp	r18, r1
    2576:	31 05       	cpc	r19, r1
    2578:	41 05       	cpc	r20, r1
    257a:	51 05       	cpc	r21, r1
    257c:	29 f0       	breq	.+10     	; 0x2588 <__divsf3+0x136>
    257e:	80 5c       	subi	r24, 0xC0	; 192
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	af 4f       	sbci	r26, 0xFF	; 255
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	80 78       	andi	r24, 0x80	; 128
    2588:	8d 87       	std	Y+13, r24	; 0x0d
    258a:	9e 87       	std	Y+14, r25	; 0x0e
    258c:	af 87       	std	Y+15, r26	; 0x0f
    258e:	b8 8b       	std	Y+16, r27	; 0x10
    2590:	8e 01       	movw	r16, r28
    2592:	07 5f       	subi	r16, 0xF7	; 247
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__divsf3+0x14e>
    2598:	87 01       	movw	r16, r14
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <__divsf3+0x14e>
    259c:	0f e2       	ldi	r16, 0x2F	; 47
    259e:	10 e2       	ldi	r17, 0x20	; 32
    25a0:	c8 01       	movw	r24, r16
    25a2:	0e 94 8b 14 	call	0x2916	; 0x2916 <__pack_f>
    25a6:	68 96       	adiw	r28, 0x18	; 24
    25a8:	ea e0       	ldi	r30, 0x0A	; 10
    25aa:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x10>

000025ae <__gtsf2>:
    25ae:	a8 e1       	ldi	r26, 0x18	; 24
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	ed ed       	ldi	r30, 0xDD	; 221
    25b4:	f2 e1       	ldi	r31, 0x12	; 18
    25b6:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__+0x18>
    25ba:	69 83       	std	Y+1, r22	; 0x01
    25bc:	7a 83       	std	Y+2, r23	; 0x02
    25be:	8b 83       	std	Y+3, r24	; 0x03
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	2d 83       	std	Y+5, r18	; 0x05
    25c4:	3e 83       	std	Y+6, r19	; 0x06
    25c6:	4f 83       	std	Y+7, r20	; 0x07
    25c8:	58 87       	std	Y+8, r21	; 0x08
    25ca:	8e 01       	movw	r16, r28
    25cc:	07 5f       	subi	r16, 0xF7	; 247
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	ce 01       	movw	r24, r28
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	b8 01       	movw	r22, r16
    25d6:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    25da:	81 e1       	ldi	r24, 0x11	; 17
    25dc:	e8 2e       	mov	r14, r24
    25de:	f1 2c       	mov	r15, r1
    25e0:	ec 0e       	add	r14, r28
    25e2:	fd 1e       	adc	r15, r29
    25e4:	ce 01       	movw	r24, r28
    25e6:	05 96       	adiw	r24, 0x05	; 5
    25e8:	b7 01       	movw	r22, r14
    25ea:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	82 30       	cpi	r24, 0x02	; 2
    25f2:	40 f0       	brcs	.+16     	; 0x2604 <__gtsf2+0x56>
    25f4:	89 89       	ldd	r24, Y+17	; 0x11
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	28 f0       	brcs	.+10     	; 0x2604 <__gtsf2+0x56>
    25fa:	c8 01       	movw	r24, r16
    25fc:	b7 01       	movw	r22, r14
    25fe:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__fpcmp_parts_f>
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <__gtsf2+0x58>
    2604:	8f ef       	ldi	r24, 0xFF	; 255
    2606:	68 96       	adiw	r28, 0x18	; 24
    2608:	e6 e0       	ldi	r30, 0x06	; 6
    260a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

0000260e <__gesf2>:
    260e:	a8 e1       	ldi	r26, 0x18	; 24
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ed e0       	ldi	r30, 0x0D	; 13
    2614:	f3 e1       	ldi	r31, 0x13	; 19
    2616:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__+0x18>
    261a:	69 83       	std	Y+1, r22	; 0x01
    261c:	7a 83       	std	Y+2, r23	; 0x02
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	2d 83       	std	Y+5, r18	; 0x05
    2624:	3e 83       	std	Y+6, r19	; 0x06
    2626:	4f 83       	std	Y+7, r20	; 0x07
    2628:	58 87       	std	Y+8, r21	; 0x08
    262a:	8e 01       	movw	r16, r28
    262c:	07 5f       	subi	r16, 0xF7	; 247
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	ce 01       	movw	r24, r28
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	b8 01       	movw	r22, r16
    2636:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    263a:	81 e1       	ldi	r24, 0x11	; 17
    263c:	e8 2e       	mov	r14, r24
    263e:	f1 2c       	mov	r15, r1
    2640:	ec 0e       	add	r14, r28
    2642:	fd 1e       	adc	r15, r29
    2644:	ce 01       	movw	r24, r28
    2646:	05 96       	adiw	r24, 0x05	; 5
    2648:	b7 01       	movw	r22, r14
    264a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	40 f0       	brcs	.+16     	; 0x2664 <__gesf2+0x56>
    2654:	89 89       	ldd	r24, Y+17	; 0x11
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	28 f0       	brcs	.+10     	; 0x2664 <__gesf2+0x56>
    265a:	c8 01       	movw	r24, r16
    265c:	b7 01       	movw	r22, r14
    265e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__fpcmp_parts_f>
    2662:	01 c0       	rjmp	.+2      	; 0x2666 <__gesf2+0x58>
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	68 96       	adiw	r28, 0x18	; 24
    2668:	e6 e0       	ldi	r30, 0x06	; 6
    266a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

0000266e <__ltsf2>:
    266e:	a8 e1       	ldi	r26, 0x18	; 24
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ed e3       	ldi	r30, 0x3D	; 61
    2674:	f3 e1       	ldi	r31, 0x13	; 19
    2676:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__+0x18>
    267a:	69 83       	std	Y+1, r22	; 0x01
    267c:	7a 83       	std	Y+2, r23	; 0x02
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	2d 83       	std	Y+5, r18	; 0x05
    2684:	3e 83       	std	Y+6, r19	; 0x06
    2686:	4f 83       	std	Y+7, r20	; 0x07
    2688:	58 87       	std	Y+8, r21	; 0x08
    268a:	8e 01       	movw	r16, r28
    268c:	07 5f       	subi	r16, 0xF7	; 247
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	ce 01       	movw	r24, r28
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	b8 01       	movw	r22, r16
    2696:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    269a:	81 e1       	ldi	r24, 0x11	; 17
    269c:	e8 2e       	mov	r14, r24
    269e:	f1 2c       	mov	r15, r1
    26a0:	ec 0e       	add	r14, r28
    26a2:	fd 1e       	adc	r15, r29
    26a4:	ce 01       	movw	r24, r28
    26a6:	05 96       	adiw	r24, 0x05	; 5
    26a8:	b7 01       	movw	r22, r14
    26aa:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	40 f0       	brcs	.+16     	; 0x26c4 <__ltsf2+0x56>
    26b4:	89 89       	ldd	r24, Y+17	; 0x11
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	28 f0       	brcs	.+10     	; 0x26c4 <__ltsf2+0x56>
    26ba:	c8 01       	movw	r24, r16
    26bc:	b7 01       	movw	r22, r14
    26be:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__fpcmp_parts_f>
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <__ltsf2+0x58>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	68 96       	adiw	r28, 0x18	; 24
    26c8:	e6 e0       	ldi	r30, 0x06	; 6
    26ca:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000026ce <__fixsfsi>:
    26ce:	ac e0       	ldi	r26, 0x0C	; 12
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ed e6       	ldi	r30, 0x6D	; 109
    26d4:	f3 e1       	ldi	r31, 0x13	; 19
    26d6:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x20>
    26da:	69 83       	std	Y+1, r22	; 0x01
    26dc:	7a 83       	std	Y+2, r23	; 0x02
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	ce 01       	movw	r24, r28
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	be 01       	movw	r22, r28
    26e8:	6b 5f       	subi	r22, 0xFB	; 251
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__unpack_f>
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	82 30       	cpi	r24, 0x02	; 2
    26f4:	81 f1       	breq	.+96     	; 0x2756 <__fixsfsi+0x88>
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	70 f1       	brcs	.+92     	; 0x2756 <__fixsfsi+0x88>
    26fa:	84 30       	cpi	r24, 0x04	; 4
    26fc:	21 f4       	brne	.+8      	; 0x2706 <__fixsfsi+0x38>
    26fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2700:	88 23       	and	r24, r24
    2702:	69 f1       	breq	.+90     	; 0x275e <__fixsfsi+0x90>
    2704:	0a c0       	rjmp	.+20     	; 0x271a <__fixsfsi+0x4c>
    2706:	2f 81       	ldd	r18, Y+7	; 0x07
    2708:	38 85       	ldd	r19, Y+8	; 0x08
    270a:	37 fd       	sbrc	r19, 7
    270c:	24 c0       	rjmp	.+72     	; 0x2756 <__fixsfsi+0x88>
    270e:	6e 81       	ldd	r22, Y+6	; 0x06
    2710:	2f 31       	cpi	r18, 0x1F	; 31
    2712:	31 05       	cpc	r19, r1
    2714:	3c f0       	brlt	.+14     	; 0x2724 <__fixsfsi+0x56>
    2716:	66 23       	and	r22, r22
    2718:	11 f1       	breq	.+68     	; 0x275e <__fixsfsi+0x90>
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	50 e8       	ldi	r21, 0x80	; 128
    2722:	21 c0       	rjmp	.+66     	; 0x2766 <__fixsfsi+0x98>
    2724:	8e e1       	ldi	r24, 0x1E	; 30
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	82 1b       	sub	r24, r18
    272a:	93 0b       	sbc	r25, r19
    272c:	29 85       	ldd	r18, Y+9	; 0x09
    272e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2730:	4b 85       	ldd	r20, Y+11	; 0x0b
    2732:	5c 85       	ldd	r21, Y+12	; 0x0c
    2734:	04 c0       	rjmp	.+8      	; 0x273e <__fixsfsi+0x70>
    2736:	56 95       	lsr	r21
    2738:	47 95       	ror	r20
    273a:	37 95       	ror	r19
    273c:	27 95       	ror	r18
    273e:	8a 95       	dec	r24
    2740:	d2 f7       	brpl	.-12     	; 0x2736 <__fixsfsi+0x68>
    2742:	66 23       	and	r22, r22
    2744:	81 f0       	breq	.+32     	; 0x2766 <__fixsfsi+0x98>
    2746:	50 95       	com	r21
    2748:	40 95       	com	r20
    274a:	30 95       	com	r19
    274c:	21 95       	neg	r18
    274e:	3f 4f       	sbci	r19, 0xFF	; 255
    2750:	4f 4f       	sbci	r20, 0xFF	; 255
    2752:	5f 4f       	sbci	r21, 0xFF	; 255
    2754:	08 c0       	rjmp	.+16     	; 0x2766 <__fixsfsi+0x98>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	a9 01       	movw	r20, r18
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <__fixsfsi+0x98>
    275e:	2f ef       	ldi	r18, 0xFF	; 255
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f ef       	ldi	r20, 0xFF	; 255
    2764:	5f e7       	ldi	r21, 0x7F	; 127
    2766:	b9 01       	movw	r22, r18
    2768:	ca 01       	movw	r24, r20
    276a:	2c 96       	adiw	r28, 0x0c	; 12
    276c:	e2 e0       	ldi	r30, 0x02	; 2
    276e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x20>

00002772 <__floatunsisf>:
    2772:	a8 e0       	ldi	r26, 0x08	; 8
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ef eb       	ldi	r30, 0xBF	; 191
    2778:	f3 e1       	ldi	r31, 0x13	; 19
    277a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x14>
    277e:	7b 01       	movw	r14, r22
    2780:	8c 01       	movw	r16, r24
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	61 15       	cp	r22, r1
    2786:	71 05       	cpc	r23, r1
    2788:	81 05       	cpc	r24, r1
    278a:	91 05       	cpc	r25, r1
    278c:	19 f4       	brne	.+6      	; 0x2794 <__floatunsisf+0x22>
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	5f c0       	rjmp	.+190    	; 0x2852 <__stack+0x53>
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	8e e1       	ldi	r24, 0x1E	; 30
    279a:	c8 2e       	mov	r12, r24
    279c:	d1 2c       	mov	r13, r1
    279e:	cb 82       	std	Y+3, r12	; 0x03
    27a0:	dc 82       	std	Y+4, r13	; 0x04
    27a2:	ed 82       	std	Y+5, r14	; 0x05
    27a4:	fe 82       	std	Y+6, r15	; 0x06
    27a6:	0f 83       	std	Y+7, r16	; 0x07
    27a8:	18 87       	std	Y+8, r17	; 0x08
    27aa:	c8 01       	movw	r24, r16
    27ac:	b7 01       	movw	r22, r14
    27ae:	0e 94 31 14 	call	0x2862	; 0x2862 <__clzsi2>
    27b2:	fc 01       	movw	r30, r24
    27b4:	31 97       	sbiw	r30, 0x01	; 1
    27b6:	f7 ff       	sbrs	r31, 7
    27b8:	3a c0       	rjmp	.+116    	; 0x282e <__stack+0x2f>
    27ba:	aa 27       	eor	r26, r26
    27bc:	bb 27       	eor	r27, r27
    27be:	ae 1b       	sub	r26, r30
    27c0:	bf 0b       	sbc	r27, r31
    27c2:	21 e0       	ldi	r18, 0x01	; 1
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	0a 2e       	mov	r0, r26
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <__floatunsisf+0x64>
    27ce:	22 0f       	add	r18, r18
    27d0:	33 1f       	adc	r19, r19
    27d2:	44 1f       	adc	r20, r20
    27d4:	55 1f       	adc	r21, r21
    27d6:	0a 94       	dec	r0
    27d8:	d2 f7       	brpl	.-12     	; 0x27ce <__floatunsisf+0x5c>
    27da:	21 50       	subi	r18, 0x01	; 1
    27dc:	30 40       	sbci	r19, 0x00	; 0
    27de:	40 40       	sbci	r20, 0x00	; 0
    27e0:	50 40       	sbci	r21, 0x00	; 0
    27e2:	2e 21       	and	r18, r14
    27e4:	3f 21       	and	r19, r15
    27e6:	40 23       	and	r20, r16
    27e8:	51 23       	and	r21, r17
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	21 15       	cp	r18, r1
    27f4:	31 05       	cpc	r19, r1
    27f6:	41 05       	cpc	r20, r1
    27f8:	51 05       	cpc	r21, r1
    27fa:	19 f4       	brne	.+6      	; 0x2802 <__stack+0x3>
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	cb 01       	movw	r24, r22
    2802:	04 c0       	rjmp	.+8      	; 0x280c <__stack+0xd>
    2804:	16 95       	lsr	r17
    2806:	07 95       	ror	r16
    2808:	f7 94       	ror	r15
    280a:	e7 94       	ror	r14
    280c:	aa 95       	dec	r26
    280e:	d2 f7       	brpl	.-12     	; 0x2804 <__stack+0x5>
    2810:	e6 2a       	or	r14, r22
    2812:	f7 2a       	or	r15, r23
    2814:	08 2b       	or	r16, r24
    2816:	19 2b       	or	r17, r25
    2818:	ed 82       	std	Y+5, r14	; 0x05
    281a:	fe 82       	std	Y+6, r15	; 0x06
    281c:	0f 83       	std	Y+7, r16	; 0x07
    281e:	18 87       	std	Y+8, r17	; 0x08
    2820:	8e e1       	ldi	r24, 0x1E	; 30
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	8e 1b       	sub	r24, r30
    2826:	9f 0b       	sbc	r25, r31
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	12 c0       	rjmp	.+36     	; 0x2852 <__stack+0x53>
    282e:	30 97       	sbiw	r30, 0x00	; 0
    2830:	81 f0       	breq	.+32     	; 0x2852 <__stack+0x53>
    2832:	0e 2e       	mov	r0, r30
    2834:	04 c0       	rjmp	.+8      	; 0x283e <__stack+0x3f>
    2836:	ee 0c       	add	r14, r14
    2838:	ff 1c       	adc	r15, r15
    283a:	00 1f       	adc	r16, r16
    283c:	11 1f       	adc	r17, r17
    283e:	0a 94       	dec	r0
    2840:	d2 f7       	brpl	.-12     	; 0x2836 <__stack+0x37>
    2842:	ed 82       	std	Y+5, r14	; 0x05
    2844:	fe 82       	std	Y+6, r15	; 0x06
    2846:	0f 83       	std	Y+7, r16	; 0x07
    2848:	18 87       	std	Y+8, r17	; 0x08
    284a:	ce 1a       	sub	r12, r30
    284c:	df 0a       	sbc	r13, r31
    284e:	cb 82       	std	Y+3, r12	; 0x03
    2850:	dc 82       	std	Y+4, r13	; 0x04
    2852:	ce 01       	movw	r24, r28
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	0e 94 8b 14 	call	0x2916	; 0x2916 <__pack_f>
    285a:	28 96       	adiw	r28, 0x08	; 8
    285c:	e8 e0       	ldi	r30, 0x08	; 8
    285e:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__+0x14>

00002862 <__clzsi2>:
    2862:	af 92       	push	r10
    2864:	bf 92       	push	r11
    2866:	cf 92       	push	r12
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	7b 01       	movw	r14, r22
    2874:	8c 01       	movw	r16, r24
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	e8 16       	cp	r14, r24
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	f8 06       	cpc	r15, r24
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	08 07       	cpc	r16, r24
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	18 07       	cpc	r17, r24
    2886:	58 f4       	brcc	.+22     	; 0x289e <__clzsi2+0x3c>
    2888:	ef ef       	ldi	r30, 0xFF	; 255
    288a:	ee 16       	cp	r14, r30
    288c:	f1 04       	cpc	r15, r1
    288e:	01 05       	cpc	r16, r1
    2890:	11 05       	cpc	r17, r1
    2892:	09 f0       	breq	.+2      	; 0x2896 <__clzsi2+0x34>
    2894:	90 f4       	brcc	.+36     	; 0x28ba <__clzsi2+0x58>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	dc 01       	movw	r26, r24
    289c:	17 c0       	rjmp	.+46     	; 0x28cc <__clzsi2+0x6a>
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	ef 16       	cp	r14, r31
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ff 06       	cpc	r15, r31
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	0f 07       	cpc	r16, r31
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	1f 07       	cpc	r17, r31
    28ae:	50 f4       	brcc	.+20     	; 0x28c4 <__clzsi2+0x62>
    28b0:	80 e1       	ldi	r24, 0x10	; 16
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <__clzsi2+0x6a>
    28ba:	88 e0       	ldi	r24, 0x08	; 8
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e0       	ldi	r26, 0x00	; 0
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <__clzsi2+0x6a>
    28c4:	88 e1       	ldi	r24, 0x18	; 24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e0       	ldi	r26, 0x00	; 0
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	20 e2       	ldi	r18, 0x20	; 32
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	28 1b       	sub	r18, r24
    28d6:	39 0b       	sbc	r19, r25
    28d8:	4a 0b       	sbc	r20, r26
    28da:	5b 0b       	sbc	r21, r27
    28dc:	57 01       	movw	r10, r14
    28de:	68 01       	movw	r12, r16
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <__clzsi2+0x88>
    28e2:	d6 94       	lsr	r13
    28e4:	c7 94       	ror	r12
    28e6:	b7 94       	ror	r11
    28e8:	a7 94       	ror	r10
    28ea:	8a 95       	dec	r24
    28ec:	d2 f7       	brpl	.-12     	; 0x28e2 <__clzsi2+0x80>
    28ee:	d6 01       	movw	r26, r12
    28f0:	c5 01       	movw	r24, r10
    28f2:	89 5c       	subi	r24, 0xC9	; 201
    28f4:	9f 4d       	sbci	r25, 0xDF	; 223
    28f6:	fc 01       	movw	r30, r24
    28f8:	80 81       	ld	r24, Z
    28fa:	28 1b       	sub	r18, r24
    28fc:	31 09       	sbc	r19, r1
    28fe:	41 09       	sbc	r20, r1
    2900:	51 09       	sbc	r21, r1
    2902:	c9 01       	movw	r24, r18
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	bf 90       	pop	r11
    2912:	af 90       	pop	r10
    2914:	08 95       	ret

00002916 <__pack_f>:
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	fc 01       	movw	r30, r24
    2924:	24 81       	ldd	r18, Z+4	; 0x04
    2926:	35 81       	ldd	r19, Z+5	; 0x05
    2928:	46 81       	ldd	r20, Z+6	; 0x06
    292a:	57 81       	ldd	r21, Z+7	; 0x07
    292c:	61 81       	ldd	r22, Z+1	; 0x01
    292e:	80 81       	ld	r24, Z
    2930:	82 30       	cpi	r24, 0x02	; 2
    2932:	20 f4       	brcc	.+8      	; 0x293c <__pack_f+0x26>
    2934:	40 61       	ori	r20, 0x10	; 16
    2936:	ef ef       	ldi	r30, 0xFF	; 255
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	a3 c0       	rjmp	.+326    	; 0x2a82 <__pack_f+0x16c>
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	09 f4       	brne	.+2      	; 0x2942 <__pack_f+0x2c>
    2940:	9b c0       	rjmp	.+310    	; 0x2a78 <__pack_f+0x162>
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	09 f4       	brne	.+2      	; 0x2948 <__pack_f+0x32>
    2946:	92 c0       	rjmp	.+292    	; 0x2a6c <__pack_f+0x156>
    2948:	21 15       	cp	r18, r1
    294a:	31 05       	cpc	r19, r1
    294c:	41 05       	cpc	r20, r1
    294e:	51 05       	cpc	r21, r1
    2950:	09 f4       	brne	.+2      	; 0x2954 <__pack_f+0x3e>
    2952:	8f c0       	rjmp	.+286    	; 0x2a72 <__pack_f+0x15c>
    2954:	02 80       	ldd	r0, Z+2	; 0x02
    2956:	f3 81       	ldd	r31, Z+3	; 0x03
    2958:	e0 2d       	mov	r30, r0
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	e2 38       	cpi	r30, 0x82	; 130
    295e:	f8 07       	cpc	r31, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <__pack_f+0x4e>
    2962:	5a c0       	rjmp	.+180    	; 0x2a18 <__pack_f+0x102>
    2964:	c2 e8       	ldi	r28, 0x82	; 130
    2966:	df ef       	ldi	r29, 0xFF	; 255
    2968:	ce 1b       	sub	r28, r30
    296a:	df 0b       	sbc	r29, r31
    296c:	ca 31       	cpi	r28, 0x1A	; 26
    296e:	d1 05       	cpc	r29, r1
    2970:	6c f5       	brge	.+90     	; 0x29cc <__pack_f+0xb6>
    2972:	79 01       	movw	r14, r18
    2974:	8a 01       	movw	r16, r20
    2976:	0c 2e       	mov	r0, r28
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <__pack_f+0x6c>
    297a:	16 95       	lsr	r17
    297c:	07 95       	ror	r16
    297e:	f7 94       	ror	r15
    2980:	e7 94       	ror	r14
    2982:	0a 94       	dec	r0
    2984:	d2 f7       	brpl	.-12     	; 0x297a <__pack_f+0x64>
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e0       	ldi	r26, 0x00	; 0
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	0c 2e       	mov	r0, r28
    2990:	04 c0       	rjmp	.+8      	; 0x299a <__pack_f+0x84>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	aa 1f       	adc	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	0a 94       	dec	r0
    299c:	d2 f7       	brpl	.-12     	; 0x2992 <__pack_f+0x7c>
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	a1 09       	sbc	r26, r1
    29a2:	b1 09       	sbc	r27, r1
    29a4:	82 23       	and	r24, r18
    29a6:	93 23       	and	r25, r19
    29a8:	a4 23       	and	r26, r20
    29aa:	b5 23       	and	r27, r21
    29ac:	21 e0       	ldi	r18, 0x01	; 1
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	a1 05       	cpc	r26, r1
    29b8:	b1 05       	cpc	r27, r1
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <__pack_f+0xac>
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	a9 01       	movw	r20, r18
    29c2:	2e 29       	or	r18, r14
    29c4:	3f 29       	or	r19, r15
    29c6:	40 2b       	or	r20, r16
    29c8:	51 2b       	or	r21, r17
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <__pack_f+0xbc>
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	a9 01       	movw	r20, r18
    29d2:	da 01       	movw	r26, r20
    29d4:	c9 01       	movw	r24, r18
    29d6:	8f 77       	andi	r24, 0x7F	; 127
    29d8:	90 70       	andi	r25, 0x00	; 0
    29da:	a0 70       	andi	r26, 0x00	; 0
    29dc:	b0 70       	andi	r27, 0x00	; 0
    29de:	80 34       	cpi	r24, 0x40	; 64
    29e0:	91 05       	cpc	r25, r1
    29e2:	a1 05       	cpc	r26, r1
    29e4:	b1 05       	cpc	r27, r1
    29e6:	39 f4       	brne	.+14     	; 0x29f6 <__pack_f+0xe0>
    29e8:	27 ff       	sbrs	r18, 7
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <__pack_f+0xe8>
    29ec:	20 5c       	subi	r18, 0xC0	; 192
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	4f 4f       	sbci	r20, 0xFF	; 255
    29f2:	5f 4f       	sbci	r21, 0xFF	; 255
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <__pack_f+0xe8>
    29f6:	21 5c       	subi	r18, 0xC1	; 193
    29f8:	3f 4f       	sbci	r19, 0xFF	; 255
    29fa:	4f 4f       	sbci	r20, 0xFF	; 255
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	e1 e0       	ldi	r30, 0x01	; 1
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	20 30       	cpi	r18, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	38 07       	cpc	r19, r24
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	48 07       	cpc	r20, r24
    2a0c:	80 e4       	ldi	r24, 0x40	; 64
    2a0e:	58 07       	cpc	r21, r24
    2a10:	28 f5       	brcc	.+74     	; 0x2a5c <__pack_f+0x146>
    2a12:	e0 e0       	ldi	r30, 0x00	; 0
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	22 c0       	rjmp	.+68     	; 0x2a5c <__pack_f+0x146>
    2a18:	e0 38       	cpi	r30, 0x80	; 128
    2a1a:	f1 05       	cpc	r31, r1
    2a1c:	6c f5       	brge	.+90     	; 0x2a78 <__pack_f+0x162>
    2a1e:	e1 58       	subi	r30, 0x81	; 129
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	da 01       	movw	r26, r20
    2a24:	c9 01       	movw	r24, r18
    2a26:	8f 77       	andi	r24, 0x7F	; 127
    2a28:	90 70       	andi	r25, 0x00	; 0
    2a2a:	a0 70       	andi	r26, 0x00	; 0
    2a2c:	b0 70       	andi	r27, 0x00	; 0
    2a2e:	80 34       	cpi	r24, 0x40	; 64
    2a30:	91 05       	cpc	r25, r1
    2a32:	a1 05       	cpc	r26, r1
    2a34:	b1 05       	cpc	r27, r1
    2a36:	39 f4       	brne	.+14     	; 0x2a46 <__pack_f+0x130>
    2a38:	27 ff       	sbrs	r18, 7
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <__pack_f+0x138>
    2a3c:	20 5c       	subi	r18, 0xC0	; 192
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	4f 4f       	sbci	r20, 0xFF	; 255
    2a42:	5f 4f       	sbci	r21, 0xFF	; 255
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <__pack_f+0x138>
    2a46:	21 5c       	subi	r18, 0xC1	; 193
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4e:	57 ff       	sbrs	r21, 7
    2a50:	05 c0       	rjmp	.+10     	; 0x2a5c <__pack_f+0x146>
    2a52:	56 95       	lsr	r21
    2a54:	47 95       	ror	r20
    2a56:	37 95       	ror	r19
    2a58:	27 95       	ror	r18
    2a5a:	31 96       	adiw	r30, 0x01	; 1
    2a5c:	87 e0       	ldi	r24, 0x07	; 7
    2a5e:	56 95       	lsr	r21
    2a60:	47 95       	ror	r20
    2a62:	37 95       	ror	r19
    2a64:	27 95       	ror	r18
    2a66:	8a 95       	dec	r24
    2a68:	d1 f7       	brne	.-12     	; 0x2a5e <__pack_f+0x148>
    2a6a:	0b c0       	rjmp	.+22     	; 0x2a82 <__pack_f+0x16c>
    2a6c:	e0 e0       	ldi	r30, 0x00	; 0
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	05 c0       	rjmp	.+10     	; 0x2a7c <__pack_f+0x166>
    2a72:	e0 e0       	ldi	r30, 0x00	; 0
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <__pack_f+0x16c>
    2a78:	ef ef       	ldi	r30, 0xFF	; 255
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	a9 01       	movw	r20, r18
    2a82:	8e 2f       	mov	r24, r30
    2a84:	87 95       	ror	r24
    2a86:	88 27       	eor	r24, r24
    2a88:	87 95       	ror	r24
    2a8a:	94 2f       	mov	r25, r20
    2a8c:	9f 77       	andi	r25, 0x7F	; 127
    2a8e:	67 95       	ror	r22
    2a90:	66 27       	eor	r22, r22
    2a92:	67 95       	ror	r22
    2a94:	e6 95       	lsr	r30
    2a96:	e2 2e       	mov	r14, r18
    2a98:	a9 2f       	mov	r26, r25
    2a9a:	a8 2b       	or	r26, r24
    2a9c:	fe 2f       	mov	r31, r30
    2a9e:	f6 2b       	or	r31, r22
    2aa0:	62 2f       	mov	r22, r18
    2aa2:	73 2f       	mov	r23, r19
    2aa4:	8a 2f       	mov	r24, r26
    2aa6:	9f 2f       	mov	r25, r31
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	e6 e0       	ldi	r30, 0x06	; 6
    2aae:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

00002ab2 <__unpack_f>:
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	fb 01       	movw	r30, r22
    2ab6:	2c 91       	ld	r18, X
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	3c 91       	ld	r19, X
    2abc:	11 97       	sbiw	r26, 0x01	; 1
    2abe:	12 96       	adiw	r26, 0x02	; 2
    2ac0:	8c 91       	ld	r24, X
    2ac2:	12 97       	sbiw	r26, 0x02	; 2
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	4f 77       	andi	r20, 0x7F	; 127
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	98 2f       	mov	r25, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	99 27       	eor	r25, r25
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	13 96       	adiw	r26, 0x03	; 3
    2ad4:	6c 91       	ld	r22, X
    2ad6:	13 97       	sbiw	r26, 0x03	; 3
    2ad8:	86 2f       	mov	r24, r22
    2ada:	88 0f       	add	r24, r24
    2adc:	89 2b       	or	r24, r25
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	66 27       	eor	r22, r22
    2ae4:	66 1f       	adc	r22, r22
    2ae6:	61 83       	std	Z+1, r22	; 0x01
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	39 f5       	brne	.+78     	; 0x2b3a <__unpack_f+0x88>
    2aec:	21 15       	cp	r18, r1
    2aee:	31 05       	cpc	r19, r1
    2af0:	41 05       	cpc	r20, r1
    2af2:	51 05       	cpc	r21, r1
    2af4:	11 f4       	brne	.+4      	; 0x2afa <__unpack_f+0x48>
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	29 c0       	rjmp	.+82     	; 0x2b4c <__unpack_f+0x9a>
    2afa:	82 e8       	ldi	r24, 0x82	; 130
    2afc:	9f ef       	ldi	r25, 0xFF	; 255
    2afe:	82 83       	std	Z+2, r24	; 0x02
    2b00:	93 83       	std	Z+3, r25	; 0x03
    2b02:	67 e0       	ldi	r22, 0x07	; 7
    2b04:	22 0f       	add	r18, r18
    2b06:	33 1f       	adc	r19, r19
    2b08:	44 1f       	adc	r20, r20
    2b0a:	55 1f       	adc	r21, r21
    2b0c:	6a 95       	dec	r22
    2b0e:	d1 f7       	brne	.-12     	; 0x2b04 <__unpack_f+0x52>
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	80 83       	st	Z, r24
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <__unpack_f+0x76>
    2b16:	22 0f       	add	r18, r18
    2b18:	33 1f       	adc	r19, r19
    2b1a:	44 1f       	adc	r20, r20
    2b1c:	55 1f       	adc	r21, r21
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	82 83       	std	Z+2, r24	; 0x02
    2b26:	93 83       	std	Z+3, r25	; 0x03
    2b28:	20 30       	cpi	r18, 0x00	; 0
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	38 07       	cpc	r19, r24
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	48 07       	cpc	r20, r24
    2b32:	80 e4       	ldi	r24, 0x40	; 64
    2b34:	58 07       	cpc	r21, r24
    2b36:	78 f3       	brcs	.-34     	; 0x2b16 <__unpack_f+0x64>
    2b38:	20 c0       	rjmp	.+64     	; 0x2b7a <__unpack_f+0xc8>
    2b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	79 f4       	brne	.+30     	; 0x2b5e <__unpack_f+0xac>
    2b40:	21 15       	cp	r18, r1
    2b42:	31 05       	cpc	r19, r1
    2b44:	41 05       	cpc	r20, r1
    2b46:	51 05       	cpc	r21, r1
    2b48:	19 f4       	brne	.+6      	; 0x2b50 <__unpack_f+0x9e>
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	80 83       	st	Z, r24
    2b4e:	08 95       	ret
    2b50:	44 ff       	sbrs	r20, 4
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <__unpack_f+0xa8>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 83       	st	Z, r24
    2b58:	10 c0       	rjmp	.+32     	; 0x2b7a <__unpack_f+0xc8>
    2b5a:	10 82       	st	Z, r1
    2b5c:	0e c0       	rjmp	.+28     	; 0x2b7a <__unpack_f+0xc8>
    2b5e:	8f 57       	subi	r24, 0x7F	; 127
    2b60:	90 40       	sbci	r25, 0x00	; 0
    2b62:	82 83       	std	Z+2, r24	; 0x02
    2b64:	93 83       	std	Z+3, r25	; 0x03
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	80 83       	st	Z, r24
    2b6a:	87 e0       	ldi	r24, 0x07	; 7
    2b6c:	22 0f       	add	r18, r18
    2b6e:	33 1f       	adc	r19, r19
    2b70:	44 1f       	adc	r20, r20
    2b72:	55 1f       	adc	r21, r21
    2b74:	8a 95       	dec	r24
    2b76:	d1 f7       	brne	.-12     	; 0x2b6c <__unpack_f+0xba>
    2b78:	50 64       	ori	r21, 0x40	; 64
    2b7a:	24 83       	std	Z+4, r18	; 0x04
    2b7c:	35 83       	std	Z+5, r19	; 0x05
    2b7e:	46 83       	std	Z+6, r20	; 0x06
    2b80:	57 83       	std	Z+7, r21	; 0x07
    2b82:	08 95       	ret

00002b84 <__fpcmp_parts_f>:
    2b84:	fc 01       	movw	r30, r24
    2b86:	db 01       	movw	r26, r22
    2b88:	90 81       	ld	r25, Z
    2b8a:	92 30       	cpi	r25, 0x02	; 2
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <__fpcmp_parts_f+0xc>
    2b8e:	49 c0       	rjmp	.+146    	; 0x2c22 <__fpcmp_parts_f+0x9e>
    2b90:	8c 91       	ld	r24, X
    2b92:	82 30       	cpi	r24, 0x02	; 2
    2b94:	08 f4       	brcc	.+2      	; 0x2b98 <__fpcmp_parts_f+0x14>
    2b96:	45 c0       	rjmp	.+138    	; 0x2c22 <__fpcmp_parts_f+0x9e>
    2b98:	94 30       	cpi	r25, 0x04	; 4
    2b9a:	51 f4       	brne	.+20     	; 0x2bb0 <__fpcmp_parts_f+0x2c>
    2b9c:	61 81       	ldd	r22, Z+1	; 0x01
    2b9e:	84 30       	cpi	r24, 0x04	; 4
    2ba0:	b1 f5       	brne	.+108    	; 0x2c0e <__fpcmp_parts_f+0x8a>
    2ba2:	11 96       	adiw	r26, 0x01	; 1
    2ba4:	2c 91       	ld	r18, X
    2ba6:	11 97       	sbiw	r26, 0x01	; 1
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	26 1b       	sub	r18, r22
    2bac:	31 09       	sbc	r19, r1
    2bae:	41 c0       	rjmp	.+130    	; 0x2c32 <__fpcmp_parts_f+0xae>
    2bb0:	84 30       	cpi	r24, 0x04	; 4
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <__fpcmp_parts_f+0x38>
    2bb4:	92 30       	cpi	r25, 0x02	; 2
    2bb6:	41 f4       	brne	.+16     	; 0x2bc8 <__fpcmp_parts_f+0x44>
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	b1 f1       	breq	.+108    	; 0x2c28 <__fpcmp_parts_f+0xa4>
    2bbc:	11 96       	adiw	r26, 0x01	; 1
    2bbe:	8c 91       	ld	r24, X
    2bc0:	11 97       	sbiw	r26, 0x01	; 1
    2bc2:	88 23       	and	r24, r24
    2bc4:	a1 f1       	breq	.+104    	; 0x2c2e <__fpcmp_parts_f+0xaa>
    2bc6:	2d c0       	rjmp	.+90     	; 0x2c22 <__fpcmp_parts_f+0x9e>
    2bc8:	61 81       	ldd	r22, Z+1	; 0x01
    2bca:	82 30       	cpi	r24, 0x02	; 2
    2bcc:	01 f1       	breq	.+64     	; 0x2c0e <__fpcmp_parts_f+0x8a>
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	8c 91       	ld	r24, X
    2bd2:	11 97       	sbiw	r26, 0x01	; 1
    2bd4:	68 17       	cp	r22, r24
    2bd6:	d9 f4       	brne	.+54     	; 0x2c0e <__fpcmp_parts_f+0x8a>
    2bd8:	22 81       	ldd	r18, Z+2	; 0x02
    2bda:	33 81       	ldd	r19, Z+3	; 0x03
    2bdc:	12 96       	adiw	r26, 0x02	; 2
    2bde:	8d 91       	ld	r24, X+
    2be0:	9c 91       	ld	r25, X
    2be2:	13 97       	sbiw	r26, 0x03	; 3
    2be4:	82 17       	cp	r24, r18
    2be6:	93 07       	cpc	r25, r19
    2be8:	94 f0       	brlt	.+36     	; 0x2c0e <__fpcmp_parts_f+0x8a>
    2bea:	28 17       	cp	r18, r24
    2bec:	39 07       	cpc	r19, r25
    2bee:	bc f0       	brlt	.+46     	; 0x2c1e <__fpcmp_parts_f+0x9a>
    2bf0:	24 81       	ldd	r18, Z+4	; 0x04
    2bf2:	35 81       	ldd	r19, Z+5	; 0x05
    2bf4:	46 81       	ldd	r20, Z+6	; 0x06
    2bf6:	57 81       	ldd	r21, Z+7	; 0x07
    2bf8:	14 96       	adiw	r26, 0x04	; 4
    2bfa:	8d 91       	ld	r24, X+
    2bfc:	9d 91       	ld	r25, X+
    2bfe:	0d 90       	ld	r0, X+
    2c00:	bc 91       	ld	r27, X
    2c02:	a0 2d       	mov	r26, r0
    2c04:	82 17       	cp	r24, r18
    2c06:	93 07       	cpc	r25, r19
    2c08:	a4 07       	cpc	r26, r20
    2c0a:	b5 07       	cpc	r27, r21
    2c0c:	18 f4       	brcc	.+6      	; 0x2c14 <__fpcmp_parts_f+0x90>
    2c0e:	66 23       	and	r22, r22
    2c10:	41 f0       	breq	.+16     	; 0x2c22 <__fpcmp_parts_f+0x9e>
    2c12:	0d c0       	rjmp	.+26     	; 0x2c2e <__fpcmp_parts_f+0xaa>
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	4a 07       	cpc	r20, r26
    2c1a:	5b 07       	cpc	r21, r27
    2c1c:	28 f4       	brcc	.+10     	; 0x2c28 <__fpcmp_parts_f+0xa4>
    2c1e:	66 23       	and	r22, r22
    2c20:	31 f0       	breq	.+12     	; 0x2c2e <__fpcmp_parts_f+0xaa>
    2c22:	21 e0       	ldi	r18, 0x01	; 1
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	05 c0       	rjmp	.+10     	; 0x2c32 <__fpcmp_parts_f+0xae>
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <__fpcmp_parts_f+0xae>
    2c2e:	2f ef       	ldi	r18, 0xFF	; 255
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	c9 01       	movw	r24, r18
    2c34:	08 95       	ret

00002c36 <__mulsi3>:
    2c36:	62 9f       	mul	r22, r18
    2c38:	d0 01       	movw	r26, r0
    2c3a:	73 9f       	mul	r23, r19
    2c3c:	f0 01       	movw	r30, r0
    2c3e:	82 9f       	mul	r24, r18
    2c40:	e0 0d       	add	r30, r0
    2c42:	f1 1d       	adc	r31, r1
    2c44:	64 9f       	mul	r22, r20
    2c46:	e0 0d       	add	r30, r0
    2c48:	f1 1d       	adc	r31, r1
    2c4a:	92 9f       	mul	r25, r18
    2c4c:	f0 0d       	add	r31, r0
    2c4e:	83 9f       	mul	r24, r19
    2c50:	f0 0d       	add	r31, r0
    2c52:	74 9f       	mul	r23, r20
    2c54:	f0 0d       	add	r31, r0
    2c56:	65 9f       	mul	r22, r21
    2c58:	f0 0d       	add	r31, r0
    2c5a:	99 27       	eor	r25, r25
    2c5c:	72 9f       	mul	r23, r18
    2c5e:	b0 0d       	add	r27, r0
    2c60:	e1 1d       	adc	r30, r1
    2c62:	f9 1f       	adc	r31, r25
    2c64:	63 9f       	mul	r22, r19
    2c66:	b0 0d       	add	r27, r0
    2c68:	e1 1d       	adc	r30, r1
    2c6a:	f9 1f       	adc	r31, r25
    2c6c:	bd 01       	movw	r22, r26
    2c6e:	cf 01       	movw	r24, r30
    2c70:	11 24       	eor	r1, r1
    2c72:	08 95       	ret

00002c74 <__udivmodhi4>:
    2c74:	aa 1b       	sub	r26, r26
    2c76:	bb 1b       	sub	r27, r27
    2c78:	51 e1       	ldi	r21, 0x11	; 17
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <__udivmodhi4_ep>

00002c7c <__udivmodhi4_loop>:
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	a6 17       	cp	r26, r22
    2c82:	b7 07       	cpc	r27, r23
    2c84:	10 f0       	brcs	.+4      	; 0x2c8a <__udivmodhi4_ep>
    2c86:	a6 1b       	sub	r26, r22
    2c88:	b7 0b       	sbc	r27, r23

00002c8a <__udivmodhi4_ep>:
    2c8a:	88 1f       	adc	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	5a 95       	dec	r21
    2c90:	a9 f7       	brne	.-22     	; 0x2c7c <__udivmodhi4_loop>
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	08 95       	ret

00002c9c <__divmodhi4>:
    2c9c:	97 fb       	bst	r25, 7
    2c9e:	09 2e       	mov	r0, r25
    2ca0:	07 26       	eor	r0, r23
    2ca2:	0a d0       	rcall	.+20     	; 0x2cb8 <__divmodhi4_neg1>
    2ca4:	77 fd       	sbrc	r23, 7
    2ca6:	04 d0       	rcall	.+8      	; 0x2cb0 <__divmodhi4_neg2>
    2ca8:	e5 df       	rcall	.-54     	; 0x2c74 <__udivmodhi4>
    2caa:	06 d0       	rcall	.+12     	; 0x2cb8 <__divmodhi4_neg1>
    2cac:	00 20       	and	r0, r0
    2cae:	1a f4       	brpl	.+6      	; 0x2cb6 <__divmodhi4_exit>

00002cb0 <__divmodhi4_neg2>:
    2cb0:	70 95       	com	r23
    2cb2:	61 95       	neg	r22
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255

00002cb6 <__divmodhi4_exit>:
    2cb6:	08 95       	ret

00002cb8 <__divmodhi4_neg1>:
    2cb8:	f6 f7       	brtc	.-4      	; 0x2cb6 <__divmodhi4_exit>
    2cba:	90 95       	com	r25
    2cbc:	81 95       	neg	r24
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	08 95       	ret

00002cc2 <__udivmodsi4>:
    2cc2:	a1 e2       	ldi	r26, 0x21	; 33
    2cc4:	1a 2e       	mov	r1, r26
    2cc6:	aa 1b       	sub	r26, r26
    2cc8:	bb 1b       	sub	r27, r27
    2cca:	fd 01       	movw	r30, r26
    2ccc:	0d c0       	rjmp	.+26     	; 0x2ce8 <__udivmodsi4_ep>

00002cce <__udivmodsi4_loop>:
    2cce:	aa 1f       	adc	r26, r26
    2cd0:	bb 1f       	adc	r27, r27
    2cd2:	ee 1f       	adc	r30, r30
    2cd4:	ff 1f       	adc	r31, r31
    2cd6:	a2 17       	cp	r26, r18
    2cd8:	b3 07       	cpc	r27, r19
    2cda:	e4 07       	cpc	r30, r20
    2cdc:	f5 07       	cpc	r31, r21
    2cde:	20 f0       	brcs	.+8      	; 0x2ce8 <__udivmodsi4_ep>
    2ce0:	a2 1b       	sub	r26, r18
    2ce2:	b3 0b       	sbc	r27, r19
    2ce4:	e4 0b       	sbc	r30, r20
    2ce6:	f5 0b       	sbc	r31, r21

00002ce8 <__udivmodsi4_ep>:
    2ce8:	66 1f       	adc	r22, r22
    2cea:	77 1f       	adc	r23, r23
    2cec:	88 1f       	adc	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	1a 94       	dec	r1
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <__udivmodsi4_loop>
    2cf4:	60 95       	com	r22
    2cf6:	70 95       	com	r23
    2cf8:	80 95       	com	r24
    2cfa:	90 95       	com	r25
    2cfc:	9b 01       	movw	r18, r22
    2cfe:	ac 01       	movw	r20, r24
    2d00:	bd 01       	movw	r22, r26
    2d02:	cf 01       	movw	r24, r30
    2d04:	08 95       	ret

00002d06 <__prologue_saves__>:
    2d06:	2f 92       	push	r2
    2d08:	3f 92       	push	r3
    2d0a:	4f 92       	push	r4
    2d0c:	5f 92       	push	r5
    2d0e:	6f 92       	push	r6
    2d10:	7f 92       	push	r7
    2d12:	8f 92       	push	r8
    2d14:	9f 92       	push	r9
    2d16:	af 92       	push	r10
    2d18:	bf 92       	push	r11
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	ca 1b       	sub	r28, r26
    2d30:	db 0b       	sbc	r29, r27
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	09 94       	ijmp

00002d38 <__epilogue_restores__>:
    2d38:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3a:	39 88       	ldd	r3, Y+17	; 0x11
    2d3c:	48 88       	ldd	r4, Y+16	; 0x10
    2d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d4e:	df 80       	ldd	r13, Y+7	; 0x07
    2d50:	ee 80       	ldd	r14, Y+6	; 0x06
    2d52:	fd 80       	ldd	r15, Y+5	; 0x05
    2d54:	0c 81       	ldd	r16, Y+4	; 0x04
    2d56:	1b 81       	ldd	r17, Y+3	; 0x03
    2d58:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5c:	ce 0f       	add	r28, r30
    2d5e:	d1 1d       	adc	r29, r1
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	ed 01       	movw	r28, r26
    2d66:	08 95       	ret

00002d68 <_exit>:
    2d68:	f8 94       	cli

00002d6a <__stop_program>:
    2d6a:	ff cf       	rjmp	.-2      	; 0x2d6a <__stop_program>
