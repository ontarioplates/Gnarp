
Gnarp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  000030fc  00003190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  0080213c  0080213c  000032cc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000032cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000318  00000000  00000000  00003a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c23  00000000  00000000  00003d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007186  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002290  00000000  00000000  0000bade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f6f  00000000  00000000  0000dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008b0  00000000  00000000  00011ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cc9  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a01  00000000  00000000  00014259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e76  00000000  00000000  00016c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
      44:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_17>
      48:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_18>
      4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	ec ef       	ldi	r30, 0xFC	; 252
     18c:	f0 e3       	ldi	r31, 0x30	; 48
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 33       	cpi	r26, 0x3C	; 60
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e3       	ldi	r26, 0x3C	; 60
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 37       	cpi	r26, 0x70	; 112
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
     1ae:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_16>:
#include <avr/interrupt.h>
#include <avr/io.h>

#include "arpeggiator.h"

ISR(TCC0_CCA_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
    //reset beat clock
    TCC0.CNT = 0;
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	10 a2       	std	Z+32, r1	; 0x20
     1ca:	11 a2       	std	Z+33, r1	; 0x21
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_19>:

ISR(TCC0_CCD_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    //midi_send_clock(serial_midi_device());  //send clock tick
    //calculate time for next clock tick
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <configure_beat_clock_timer>:

static uint16_t BPM;

void configure_beat_clock_timer(){
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	ae 97       	sbiw	r28, 0x2e	; 46
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	de bf       	out	0x3e, r29	; 62
    //system clock = 24MHz; cyc/beat = 1.44Trillion/BPM
    const uint32_t numerator = 1440000000;
    
    //corresponds to division value for TCxx.CTRLA
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};
     200:	de 01       	movw	r26, r28
     202:	1f 96       	adiw	r26, 0x0f	; 15
     204:	e0 e0       	ldi	r30, 0x00	; 0
     206:	f0 e2       	ldi	r31, 0x20	; 32
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <configure_beat_clock_timer+0x1c>
            
    volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     212:	80 91 00 08 	lds	r24, 0x0800
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	89 83       	std	Y+1, r24	; 0x01
    volatile uint8_t new_clock_divide_select = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint32_t adjusted_count = 0;
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
     222:	1d 82       	std	Y+5, r1	; 0x05
     224:	1e 82       	std	Y+6, r1	; 0x06
    
    //compare value for no divider
    volatile uint32_t cycle_per_beat = numerator/BPM;
     226:	20 91 3c 21 	lds	r18, 0x213C
     22a:	30 91 3d 21 	lds	r19, 0x213D
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	78 ea       	ldi	r23, 0xA8	; 168
     236:	84 ed       	ldi	r24, 0xD4	; 212
     238:	95 e5       	ldi	r25, 0x55	; 85
     23a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
     23e:	2f 83       	std	Y+7, r18	; 0x07
     240:	38 87       	std	Y+8, r19	; 0x08
     242:	49 87       	std	Y+9, r20	; 0x09
     244:	5a 87       	std	Y+10, r21	; 0x0a
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     246:	6f 81       	ldd	r22, Y+7	; 0x07
     248:	78 85       	ldd	r23, Y+8	; 0x08
     24a:	89 85       	ldd	r24, Y+9	; 0x09
     24c:	9a 85       	ldd	r25, Y+10	; 0x0a
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	11 c0       	rjmp	.+34     	; 0x284 <configure_beat_clock_timer+0x96>
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
        //try the next highest divider
        new_clock_divide_select++;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
        
        //unless you've explored all of them
        if (new_clock_divide_select > 7)
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	08 f0       	brcs	.+2      	; 0x270 <configure_beat_clock_timer+0x82>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <configure_beat_clock_timer+0x108>
            return;
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     270:	6f 81       	ldd	r22, Y+7	; 0x07
     272:	78 85       	ldd	r23, Y+8	; 0x08
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	26 85       	ldd	r18, Z+14	; 0x0e
     28a:	37 85       	ldd	r19, Z+15	; 0x0f
     28c:	40 89       	ldd	r20, Z+16	; 0x10
     28e:	51 89       	ldd	r21, Z+17	; 0x11
     290:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
     294:	2b 87       	std	Y+11, r18	; 0x0b
     296:	3c 87       	std	Y+12, r19	; 0x0c
     298:	4d 87       	std	Y+13, r20	; 0x0d
     29a:	5e 87       	std	Y+14, r21	; 0x0e
    volatile uint32_t cycle_per_beat = numerator/BPM;
    
    volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    
    //run loop until compare_value is a 16 bit number
    while (compare_value > 0xFFFF){
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2a2:	be 85       	ldd	r27, Y+14	; 0x0e
     2a4:	80 30       	cpi	r24, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	92 07       	cpc	r25, r18
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	a2 07       	cpc	r26, r18
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	b2 07       	cpc	r27, r18
     2b2:	b8 f6       	brcc	.-82     	; 0x262 <configure_beat_clock_timer+0x74>
        
        compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    }
    
    //stop and reset the counter
    TCC0.CTRLA = 0;
     2b4:	e0 e0       	ldi	r30, 0x00	; 0
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	10 92 00 08 	sts	0x0800, r1
    TCC0.CNT = 0;
     2bc:	10 a2       	std	Z+32, r1	; 0x20
     2be:	11 a2       	std	Z+33, r1	; 0x21
        }            
    }            
*/    
    
    //set the new compare value for beat
    TCC0.CCA = (uint16_t) compare_value;
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2c6:	be 85       	ldd	r27, Y+14	; 0x0e
     2c8:	80 a7       	std	Z+40, r24	; 0x28
     2ca:	91 a7       	std	Z+41, r25	; 0x29
    //set the new compare value for midi-clock ticks
    TCC0.CCD = (uint16_t) compare_value/24;
     2cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d0:	ad 85       	ldd	r26, Y+13	; 0x0d
     2d2:	be 85       	ldd	r27, Y+14	; 0x0e
     2d4:	68 e1       	ldi	r22, 0x18	; 24
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     2dc:	66 a7       	std	Z+46, r22	; 0x2e
     2de:	77 a7       	std	Z+47, r23	; 0x2f
    
    //enable CCA (beat count) and CCD (midi tick) interrupt
    TCC0.CTRLB |= 0x10;
     2e0:	80 91 01 08 	lds	r24, 0x0801
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x80;
     2e8:	80 91 01 08 	lds	r24, 0x0801
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	81 83       	std	Z+1, r24	; 0x01
    
    //set the new clock divider and start the clock
    TCC0.CTRLA = new_clock_divide_select;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 93 00 08 	sts	0x0800, r24

    return;
}
     2f6:	ae 96       	adiw	r28, 0x2e	; 46
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <initialize_beat_clock>:

void initialize_beat_clock(uint16_t new_BPM){
    BPM = new_BPM;
     306:	80 93 3c 21 	sts	0x213C, r24
     30a:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
    
    //configure CCA and CCD as mid-level interrupts
    TCC0.INTCTRLB &= ~0xC0;
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	87 81       	ldd	r24, Z+7	; 0x07
     318:	8f 73       	andi	r24, 0x3F	; 63
     31a:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x80;
     31c:	87 81       	ldd	r24, Z+7	; 0x07
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x03;
     322:	87 81       	ldd	r24, Z+7	; 0x07
     324:	8c 7f       	andi	r24, 0xFC	; 252
     326:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x02;
     328:	87 81       	ldd	r24, Z+7	; 0x07
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	87 83       	std	Z+7, r24	; 0x07
    
    //enable CCA and CCD interrupts
    TCC0.CTRLB |= 0x80;
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	80 68       	ori	r24, 0x80	; 128
     332:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x10;
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	80 61       	ori	r24, 0x10	; 16
     338:	81 83       	std	Z+1, r24	; 0x01
}
     33a:	08 95       	ret

0000033c <get_BPM>:

uint16_t get_BPM(){
    return BPM;
}
     33c:	80 91 3c 21 	lds	r24, 0x213C
     340:	90 91 3d 21 	lds	r25, 0x213D
     344:	08 95       	ret

00000346 <increment_BPM>:

void increment_BPM(){
    BPM += 1;
     346:	80 91 3c 21 	lds	r24, 0x213C
     34a:	90 91 3d 21 	lds	r25, 0x213D
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 3c 21 	sts	0x213C, r24
     354:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     35c:	08 95       	ret

0000035e <decrement_BPM>:

void decrement_BPM(){
    BPM -= 1;
     35e:	80 91 3c 21 	lds	r24, 0x213C
     362:	90 91 3d 21 	lds	r25, 0x213D
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	80 93 3c 21 	sts	0x213C, r24
     36c:	90 93 3d 21 	sts	0x213D, r25
    configure_beat_clock_timer();
     370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <configure_beat_clock_timer>
}
     374:	08 95       	ret

00000376 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     376:	80 91 54 21 	lds	r24, 0x2154
     37a:	08 95       	ret

0000037c <get_pot_value>:
            pot_values[i] = pot_values[i] - POT_MIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot_select, uint16_t output_min, uint16_t output_max){
     37c:	2f 92       	push	r2
     37e:	3f 92       	push	r3
     380:	4f 92       	push	r4
     382:	5f 92       	push	r5
     384:	6f 92       	push	r6
     386:	7f 92       	push	r7
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <get_pot_value+0x26>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6b 01       	movw	r12, r22
     3a8:	2a 01       	movw	r4, r20
    //output_max: maximum value to output
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	e6 5b       	subi	r30, 0xB6	; 182
     3b4:	fe 4d       	sbci	r31, 0xDE	; 222
     3b6:	60 81       	ld	r22, Z
     3b8:	71 81       	ldd	r23, Z+1	; 0x01
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__floatunsisf>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	42 e7       	ldi	r20, 0x72	; 114
     3c8:	55 e4       	ldi	r21, 0x45	; 69
     3ca:	0e 94 82 13 	call	0x2704	; 0x2704 <__divsf3>
     3ce:	7b 01       	movw	r14, r22
     3d0:	8c 01       	movw	r16, r24
    temp = temp*(output_max - output_min + 1) + output_min;
     3d2:	b2 01       	movw	r22, r4
     3d4:	6c 19       	sub	r22, r12
     3d6:	7d 09       	sbc	r23, r13
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__floatunsisf>
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 88 12 	call	0x2510	; 0x2510 <__mulsf3>
     3f0:	7b 01       	movw	r14, r22
     3f2:	8c 01       	movw	r16, r24
     3f4:	b6 01       	movw	r22, r12
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__floatunsisf>
     3fe:	d6 2e       	mov	r13, r22
     400:	c7 2e       	mov	r12, r23
     402:	b8 2e       	mov	r11, r24
     404:	a9 2e       	mov	r10, r25
     406:	16 01       	movw	r2, r12
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	6e 2d       	mov	r22, r14
     40e:	7f 2d       	mov	r23, r15
     410:	80 2f       	mov	r24, r16
     412:	91 2f       	mov	r25, r17
     414:	d6 01       	movw	r26, r12
     416:	f5 01       	movw	r30, r10
     418:	2b 2f       	mov	r18, r27
     41a:	3a 2f       	mov	r19, r26
     41c:	4f 2f       	mov	r20, r31
     41e:	5e 2f       	mov	r21, r30
     420:	0e 94 2a 12 	call	0x2454	; 0x2454 <__addsf3>
     424:	96 2e       	mov	r9, r22
     426:	87 2e       	mov	r8, r23
     428:	78 2e       	mov	r7, r24
     42a:	69 2e       	mov	r6, r25
    
    if (temp > output_max)
     42c:	b2 01       	movw	r22, r4
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__floatunsisf>
     436:	f6 2e       	mov	r15, r22
     438:	07 2f       	mov	r16, r23
     43a:	18 2f       	mov	r17, r24
     43c:	e9 2e       	mov	r14, r25
     43e:	a4 01       	movw	r20, r8
     440:	93 01       	movw	r18, r6
     442:	65 2f       	mov	r22, r21
     444:	74 2f       	mov	r23, r20
     446:	83 2f       	mov	r24, r19
     448:	92 2f       	mov	r25, r18
     44a:	2f 2d       	mov	r18, r15
     44c:	30 2f       	mov	r19, r16
     44e:	41 2f       	mov	r20, r17
     450:	5e 2d       	mov	r21, r14
     452:	0e 94 30 14 	call	0x2860	; 0x2860 <__gtsf2>
     456:	18 16       	cp	r1, r24
     458:	24 f0       	brlt	.+8      	; 0x462 <get_pot_value+0xe6>
    
    const uint16_t pot_range = POT_MAX - POT_MIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot_select]/pot_range;
    temp = temp*(output_max - output_min + 1) + output_min;
     45a:	f9 2c       	mov	r15, r9
     45c:	08 2d       	mov	r16, r8
     45e:	17 2d       	mov	r17, r7
     460:	e6 2c       	mov	r14, r6
    
    if (temp > output_max)
        temp = output_max;
        
    if (temp < output_min)
     462:	6f 2d       	mov	r22, r15
     464:	70 2f       	mov	r23, r16
     466:	81 2f       	mov	r24, r17
     468:	9e 2d       	mov	r25, r14
     46a:	d6 01       	movw	r26, r12
     46c:	f5 01       	movw	r30, r10
     46e:	2b 2f       	mov	r18, r27
     470:	3c 2d       	mov	r19, r12
     472:	4f 2f       	mov	r20, r31
     474:	5a 2d       	mov	r21, r10
     476:	0e 94 90 14 	call	0x2920	; 0x2920 <__ltsf2>
     47a:	87 fd       	sbrc	r24, 7
     47c:	04 c0       	rjmp	.+8      	; 0x486 <get_pot_value+0x10a>
     47e:	3f 2c       	mov	r3, r15
     480:	20 2e       	mov	r2, r16
     482:	19 83       	std	Y+1, r17	; 0x01
     484:	ea 82       	std	Y+2, r14	; 0x02
        temp = output_min;
    
    return (uint16_t) temp;
     486:	a1 01       	movw	r20, r2
     488:	39 81       	ldd	r19, Y+1	; 0x01
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	65 2f       	mov	r22, r21
     48e:	72 2d       	mov	r23, r2
     490:	83 2f       	mov	r24, r19
     492:	92 2f       	mov	r25, r18
     494:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fixunssfsi>
}
     498:	cb 01       	movw	r24, r22
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	3f 90       	pop	r3
     4c0:	2f 90       	pop	r2
     4c2:	08 95       	ret

000004c4 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     4e2:	ca e0       	ldi	r28, 0x0A	; 10
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     4e6:	73 e0       	ldi	r23, 0x03	; 3
     4e8:	c7 2e       	mov	r12, r23
     4ea:	d1 2c       	mov	r13, r1
     4ec:	68 e0       	ldi	r22, 0x08	; 8
     4ee:	a6 2e       	mov	r10, r22
     4f0:	b1 2c       	mov	r11, r1
     4f2:	00 e6       	ldi	r16, 0x60	; 96
     4f4:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	e5 2e       	mov	r14, r21
     4fa:	56 e0       	ldi	r21, 0x06	; 6
     4fc:	f5 2e       	mov	r15, r21
     4fe:	40 ef       	ldi	r20, 0xF0	; 240
     500:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     502:	98 e3       	ldi	r25, 0x38	; 56
     504:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     506:	cf 01       	movw	r24, r30
     508:	be 01       	movw	r22, r28
     50a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     50e:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     510:	30 97       	sbiw	r30, 0x00	; 0
     512:	19 f4       	brne	.+6      	; 0x51a <set_seven_segment_LEDs+0x56>
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <set_seven_segment_LEDs+0x56>
            digit = 10;
     518:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     51a:	c9 01       	movw	r24, r18
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
     522:	b5 01       	movw	r22, r10
     524:	02 c0       	rjmp	.+4      	; 0x52a <set_seven_segment_LEDs+0x66>
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	8a 95       	dec	r24
     52c:	e2 f7       	brpl	.-8      	; 0x526 <set_seven_segment_LEDs+0x62>
     52e:	d8 01       	movw	r26, r16
     530:	16 96       	adiw	r26, 0x06	; 6
     532:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     534:	d7 01       	movw	r26, r14
     536:	16 96       	adiw	r26, 0x06	; 6
     538:	9c 92       	st	X, r9
     53a:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     53c:	42 95       	swap	r20
     53e:	40 7f       	andi	r20, 0xF0	; 240
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     544:	d8 01       	movw	r26, r16
     546:	15 96       	adiw	r26, 0x05	; 5
     548:	8c 92       	st	X, r8
     54a:	15 97       	sbiw	r26, 0x05	; 5
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     550:	25 30       	cpi	r18, 0x05	; 5
     552:	31 05       	cpc	r19, r1
     554:	31 f0       	breq	.+12     	; 0x562 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     556:	cf 01       	movw	r24, r30
     558:	be 01       	movw	r22, r28
     55a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     55e:	fb 01       	movw	r30, r22
     560:	d2 cf       	rjmp	.-92     	; 0x506 <set_seven_segment_LEDs+0x42>
    }
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <set_LEDs_on+0xc>
        PORTC.OUTCLR = 0x08;
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_0)
     588:	66 23       	and	r22, r22
     58a:	21 f0       	breq	.+8      	; 0x594 <set_LEDs_on+0x18>
        PORTD.OUTSET = 0x04;
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	e0 e6       	ldi	r30, 0x60	; 96
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	85 83       	std	Z+5, r24	; 0x05
        
    if (decimal_point_1)
     594:	44 23       	and	r20, r20
     596:	21 f0       	breq	.+8      	; 0x5a0 <set_LEDs_on+0x24>
        PORTD.OUTSET = 0x01;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e0 e6       	ldi	r30, 0x60	; 96
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_2)
     5a0:	22 23       	and	r18, r18
     5a2:	21 f0       	breq	.+8      	; 0x5ac <set_LEDs_on+0x30>
        PORTD.OUTSET = 0x02;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
     5ac:	08 95       	ret

000005ae <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
    if (status_LED)
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <set_LEDs_off+0xc>
        PORTC.OUTSET = 0x08;
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	85 83       	std	Z+5, r24	; 0x05
    
    if (decimal_point_0)
     5ba:	66 23       	and	r22, r22
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <set_LEDs_off+0x18>
        PORTD.OUTCLR = 0x04;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	e0 e6       	ldi	r30, 0x60	; 96
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	86 83       	std	Z+6, r24	; 0x06
        
    if (decimal_point_1)
     5c6:	44 23       	and	r20, r20
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <set_LEDs_off+0x24>
        PORTD.OUTCLR = 0x01;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	86 83       	std	Z+6, r24	; 0x06
    
    if (decimal_point_2)
     5d2:	22 23       	and	r18, r18
     5d4:	21 f0       	breq	.+8      	; 0x5de <set_LEDs_off+0x30>
        PORTD.OUTCLR = 0x02;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	86 83       	std	Z+6, r24	; 0x06
     5de:	08 95       	ret

000005e0 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     5e0:	80 91 42 21 	lds	r24, 0x2142
     5e4:	08 95       	ret

000005e6 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     5e6:	80 91 43 21 	lds	r24, 0x2143
     5ea:	08 95       	ret

000005ec <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     5ec:	80 91 40 21 	lds	r24, 0x2140
     5f0:	08 95       	ret

000005f2 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     5f2:	80 91 41 21 	lds	r24, 0x2141
     5f6:	08 95       	ret

000005f8 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     5f8:	80 91 3e 21 	lds	r24, 0x213E
     5fc:	08 95       	ret

000005fe <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     5fe:	80 91 3f 21 	lds	r24, 0x213F
     602:	08 95       	ret

00000604 <initialize_hardware>:

void initialize_hardware(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     608:	e0 e4       	ldi	r30, 0x40	; 64
     60a:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     60c:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     60e:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     610:	c0 e5       	ldi	r28, 0x50	; 80
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     616:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     618:	a0 e5       	ldi	r26, 0x50	; 80
     61a:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     61c:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     61e:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     620:	98 ed       	ldi	r25, 0xD8	; 216
     622:	15 c0       	rjmp	.+42     	; 0x64e <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     624:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     626:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     628:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     62a:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     62e:	70 91 51 00 	lds	r23, 0x0051
     632:	73 ff       	sbrs	r23, 3
     634:	fc cf       	rjmp	.-8      	; 0x62e <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     636:	15 96       	adiw	r26, 0x05	; 5
     638:	3c 93       	st	X, r19
     63a:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     63c:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     640:	70 91 51 00 	lds	r23, 0x0051
     644:	74 ff       	sbrs	r23, 4
     646:	fc cf       	rjmp	.-8      	; 0x640 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     648:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     64a:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     64e:	70 91 40 00 	lds	r23, 0x0040
     652:	74 30       	cpi	r23, 0x04	; 4
     654:	39 f7       	brne	.-50     	; 0x624 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     656:	f8 94       	cli
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     658:	a0 e6       	ldi	r26, 0x60	; 96
     65a:	b6 e0       	ldi	r27, 0x06	; 6
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	8c 93       	st	X, r24
     662:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     664:	90 e4       	ldi	r25, 0x40	; 64
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	9c 93       	st	X, r25
     66a:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8c 93       	st	X, r24
     670:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     672:	e0 eb       	ldi	r30, 0xB0	; 176
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     67a:	90 e2       	ldi	r25, 0x20	; 32
     67c:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     682:	8f e2       	ldi	r24, 0x2F	; 47
     684:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     686:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     688:	80 91 a2 00 	lds	r24, 0x00A2
     68c:	87 68       	ori	r24, 0x87	; 135
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     694:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	d6 e0       	ldi	r29, 0x06	; 6
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6a6:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6a8:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6aa:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6b0:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6b2:	80 91 00 02 	lds	r24, 0x0200
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     6bc:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     6be:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     6c0:	12 a2       	std	Z+34, r1	; 0x22
    if (decimal_point_2)
        PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	56 e0       	ldi	r21, 0x06	; 6
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	fa 01       	movw	r30, r20
     6ca:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     6cc:	28 e0       	ldi	r18, 0x08	; 8
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	fc 01       	movw	r30, r24
     6d4:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     6d6:	fa 01       	movw	r30, r20
     6d8:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     6de:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     6e0:	e0 e4       	ldi	r30, 0x40	; 64
     6e2:	f6 e0       	ldi	r31, 0x06	; 6
     6e4:	88 ef       	ldi	r24, 0xF8	; 248
     6e6:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8c 93       	st	X, r24
     6ee:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     6f0:	88 e3       	ldi	r24, 0x38	; 56
     6f2:	15 96       	adiw	r26, 0x05	; 5
     6f4:	8c 93       	st	X, r24
     6f6:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     6f8:	90 ef       	ldi	r25, 0xF0	; 240
     6fa:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     6fc:	16 96       	adiw	r26, 0x06	; 6
     6fe:	8c 93       	st	X, r24
     700:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     702:	87 e0       	ldi	r24, 0x07	; 7
     704:	16 96       	adiw	r26, 0x06	; 6
     706:	8c 93       	st	X, r24
     708:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     70a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <read_hardware>:

void read_hardware(){
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	0f 92       	push	r0
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     72a:	80 91 88 06 	lds	r24, 0x0688
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <read_hardware+0x28>
     738:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     73a:	80 91 28 06 	lds	r24, 0x0628
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	80 fd       	sbrc	r24, 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <read_hardware+0x38>
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	01 c0       	rjmp	.+2      	; 0x74c <read_hardware+0x3a>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	c8 2e       	mov	r12, r24
     74e:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     750:	80 91 28 06 	lds	r24, 0x0628
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	86 95       	lsr	r24
     75a:	80 fd       	sbrc	r24, 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <read_hardware+0x50>
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	01 c0       	rjmp	.+2      	; 0x764 <read_hardware+0x52>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c8 2a       	or	r12, r24
     766:	c0 92 49 21 	sts	0x2149, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     76a:	60 91 48 21 	lds	r22, 0x2148
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	d0 90 47 21 	lds	r13, 0x2147
     774:	e4 e4       	ldi	r30, 0x44	; 68
     776:	f1 e2       	ldi	r31, 0x21	; 33
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	4c 2d       	mov	r20, r12
     77e:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     784:	b8 2e       	mov	r11, r24
     786:	8a 01       	movw	r16, r20
     788:	08 2e       	mov	r0, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <read_hardware+0x7e>
     78c:	15 95       	asr	r17
     78e:	07 95       	ror	r16
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <read_hardware+0x7a>
     794:	db 01       	movw	r26, r22
     796:	08 2e       	mov	r0, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <read_hardware+0x8c>
     79a:	b5 95       	asr	r27
     79c:	a7 95       	ror	r26
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <read_hardware+0x88>
     7a2:	0a 17       	cp	r16, r26
     7a4:	1b 07       	cpc	r17, r27
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     7a8:	a0 81       	ld	r26, Z
     7aa:	af 5f       	subi	r26, 0xFF	; 255
     7ac:	a0 83       	st	Z, r26
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     7b0:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     7b2:	a0 81       	ld	r26, Z
     7b4:	a9 30       	cpi	r26, 0x09	; 9
     7b6:	60 f0       	brcs	.+24     	; 0x7d0 <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     7b8:	d9 01       	movw	r26, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <read_hardware+0xae>
     7bc:	aa 0f       	add	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	ba 94       	dec	r11
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <read_hardware+0xaa>
     7c4:	ba 2f       	mov	r27, r26
     7c6:	b0 95       	com	r27
     7c8:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     7ca:	ac 21       	and	r26, r12
     7cc:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     7ce:	10 82       	st	Z, r1
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f6       	brne	.-86     	; 0x784 <read_hardware+0x72>
     7da:	d0 92 47 21 	sts	0x2147, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     7de:	c0 92 48 21 	sts	0x2148, r12
     7e2:	80 91 3e 21 	lds	r24, 0x213E
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     7e6:	d0 fe       	sbrs	r13, 0
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     7ea:	88 23       	and	r24, r24
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     7ee:	10 92 3f 21 	sts	0x213F, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 3f 21 	sts	0x213F, r24
        toggle_switch_state = 1;                //set current value
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 3e 21 	sts	0x213E, r24
     800:	0a c0       	rjmp	.+20     	; 0x816 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	80 93 3f 21 	sts	0x213F, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     80e:	10 92 3f 21 	sts	0x213F, r1
        toggle_switch_state = 0;                //set current value
     812:	10 92 3e 21 	sts	0x213E, r1
     816:	80 91 40 21 	lds	r24, 0x2140
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     81a:	d1 fe       	sbrs	r13, 1
     81c:	0c c0       	rjmp	.+24     	; 0x836 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     81e:	88 23       	and	r24, r24
     820:	19 f0       	breq	.+6      	; 0x828 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     822:	10 92 41 21 	sts	0x2141, r1
     826:	03 c0       	rjmp	.+6      	; 0x82e <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 41 21 	sts	0x2141, r24
        pushbutton_switch_state = 1;                //set current value
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 40 21 	sts	0x2140, r24
     834:	0a c0       	rjmp	.+20     	; 0x84a <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     836:	88 23       	and	r24, r24
     838:	21 f0       	breq	.+8      	; 0x842 <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 41 21 	sts	0x2141, r24
     840:	02 c0       	rjmp	.+4      	; 0x846 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     842:	10 92 41 21 	sts	0x2141, r1
        pushbutton_switch_state = 0;                //set current value
     846:	10 92 40 21 	sts	0x2140, r1
     84a:	80 91 42 21 	lds	r24, 0x2142
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     84e:	d2 fe       	sbrs	r13, 2
     850:	0c c0       	rjmp	.+24     	; 0x86a <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     856:	10 92 43 21 	sts	0x2143, r1
     85a:	03 c0       	rjmp	.+6      	; 0x862 <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 43 21 	sts	0x2143, r24
        encoder_switch_state = 1;                //set current value
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 42 21 	sts	0x2142, r24
     868:	0a c0       	rjmp	.+20     	; 0x87e <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 43 21 	sts	0x2143, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     876:	10 92 43 21 	sts	0x2143, r1
        encoder_switch_state = 0;                //set current value
     87a:	10 92 42 21 	sts	0x2142, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     87e:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	62 c0       	rjmp	.+196    	; 0x94a <read_hardware+0x238>
     886:	20 91 23 02 	lds	r18, 0x0223
     88a:	21 60       	ori	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     890:	20 91 21 02 	lds	r18, 0x0221
     894:	27 7c       	andi	r18, 0xC7	; 199
     896:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     898:	40 91 21 02 	lds	r20, 0x0221
     89c:	29 81       	ldd	r18, Y+1	; 0x01
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	2d 5f       	subi	r18, 0xFD	; 253
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	6a 95       	dec	r22
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <read_hardware+0x194>
     8ae:	42 2b       	or	r20, r18
     8b0:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     8b2:	20 91 20 02 	lds	r18, 0x0220
     8b6:	20 68       	ori	r18, 0x80	; 128
     8b8:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     8ba:	20 91 23 02 	lds	r18, 0x0223
     8be:	20 ff       	sbrs	r18, 0
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	20 91 24 02 	lds	r18, 0x0224
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e6 5b       	subi	r30, 0xB6	; 182
     8d0:	fe 4d       	sbci	r31, 0xDE	; 222
     8d2:	20 83       	st	Z, r18
     8d4:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	20 91 25 02 	lds	r18, 0x0225
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e6 5b       	subi	r30, 0xB6	; 182
     8e4:	fe 4d       	sbci	r31, 0xDE	; 222
     8e6:	f2 2e       	mov	r15, r18
     8e8:	ee 24       	eor	r14, r14
     8ea:	20 81       	ld	r18, Z
     8ec:	31 81       	ldd	r19, Z+1	; 0x01
     8ee:	2e 29       	or	r18, r14
     8f0:	3f 29       	or	r19, r15
     8f2:	20 83       	st	Z, r18
     8f4:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POT_MIN)
     8f6:	e9 81       	ldd	r30, Y+1	; 0x01
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	e6 5b       	subi	r30, 0xB6	; 182
     900:	fe 4d       	sbci	r31, 0xDE	; 222
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	20 3e       	cpi	r18, 0xE0	; 224
     908:	31 05       	cpc	r19, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <read_hardware+0x20c>
            pot_values[i] = 0;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e6 5b       	subi	r30, 0xB6	; 182
     916:	fe 4d       	sbci	r31, 0xDE	; 222
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	13 c0       	rjmp	.+38     	; 0x944 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POT_MIN;
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	a9 81       	ldd	r26, Y+1	; 0x01
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	e6 5b       	subi	r30, 0xB6	; 182
     92a:	fe 4d       	sbci	r31, 0xDE	; 222
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	a6 5b       	subi	r26, 0xB6	; 182
     934:	be 4d       	sbci	r27, 0xDE	; 222
     936:	2d 91       	ld	r18, X+
     938:	3c 91       	ld	r19, X
     93a:	11 97       	sbiw	r26, 0x01	; 1
     93c:	20 5e       	subi	r18, 0xE0	; 224
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     944:	29 81       	ldd	r18, Y+1	; 0x01
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	29 83       	std	Y+1, r18	; 0x01
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	25 30       	cpi	r18, 0x05	; 5
     94e:	08 f4       	brcc	.+2      	; 0x952 <read_hardware+0x240>
     950:	9a cf       	rjmp	.-204    	; 0x886 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     952:	80 91 28 06 	lds	r24, 0x0628
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	80 fd       	sbrc	r24, 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     95c:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     960:	84 2f       	mov	r24, r20
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	20 91 55 21 	lds	r18, 0x2155
     968:	51 e0       	ldi	r21, 0x01	; 1
     96a:	25 27       	eor	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	82 23       	and	r24, r18
     970:	93 23       	and	r25, r19
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	59 f0       	breq	.+22     	; 0x98c <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     976:	86 2f       	mov	r24, r22
     978:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     97a:	80 fd       	sbrc	r24, 0
     97c:	03 c0       	rjmp	.+6      	; 0x984 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     97e:	50 93 54 21 	sts	0x2154, r21
     982:	06 c0       	rjmp	.+12     	; 0x990 <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 93 54 21 	sts	0x2154, r24
     98a:	02 c0       	rjmp	.+4      	; 0x990 <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     98c:	10 92 54 21 	sts	0x2154, r1
    last_a = current_a;
     990:	40 93 55 21 	sts	0x2155, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	08 95       	ret

000009aa <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
    
    //set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     9aa:	08 95       	ret

000009ac <__vector_91>:
#include "arpeggiator.h"

static Sequencer sequencer;
static MidiDevice midi_device;

ISR(USARTD1_RXC_vect){
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
    midi_device_input(&midi_device,1,&(USARTD1.DATA));
     9d2:	cf e7       	ldi	r28, 0x7F	; 127
     9d4:	d2 e2       	ldi	r29, 0x22	; 34
     9d6:	ce 01       	movw	r24, r28
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	40 eb       	ldi	r20, 0xB0	; 176
     9dc:	59 e0       	ldi	r21, 0x09	; 9
     9de:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_process(&midi_device);
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 80 10 	call	0x2100	; 0x2100 <midi_device_process>
}
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_17>:

//interrupt to start the next note
ISR(TCC0_CCB_vect){
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
    //continue to the next note without restarting
    continue_sequencer(&sequencer, 0);
     a30:	86 e5       	ldi	r24, 0x56	; 86
     a32:	91 e2       	ldi	r25, 0x21	; 33
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_18>:

//interrupt to stop the current note
ISR(TCC0_CCC_vect){
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
    //stop the sequencer note without a full stop
    stop_sequencer(&sequencer, 0);
     a7e:	86 e5       	ldi	r24, 0x56	; 86
     a80:	91 e2       	ldi	r25, 0x21	; 33
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <stop_sequencer>
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <fake_midi_noteon_input>:


void fake_midi_noteon_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <fake_midi_noteon_input+0xa>
     ab4:	0f 92       	push	r0
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	8c 01       	movw	r16, r24
     abc:	6a 83       	std	Y+2, r22	; 0x02
     abe:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteon_byte1 = 144;
     ac0:	80 e9       	ldi	r24, 0x90	; 144
     ac2:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteon_byte1);
     ac4:	c8 01       	movw	r24, r16
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	ae 01       	movw	r20, r28
     aca:	4f 5f       	subi	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     ad2:	c8 01       	movw	r24, r16
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	ae 01       	movw	r20, r28
     ad8:	4e 5f       	subi	r20, 0xFE	; 254
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     ae0:	c8 01       	movw	r24, r16
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	ae 01       	movw	r20, r28
     ae6:	4d 5f       	subi	r20, 0xFD	; 253
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_process(midi_device);
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 80 10 	call	0x2100	; 0x2100 <midi_device_process>
}
     af4:	23 96       	adiw	r28, 0x03	; 3
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <fake_midi_noteff_input>:

void fake_midi_noteff_input(MidiDevice* midi_device, uint8_t pitch, uint8_t velocity){
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <fake_midi_noteff_input+0xa>
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 01       	movw	r16, r24
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
    const uint8_t noteoff_byte1 = 128;
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	89 83       	std	Y+1, r24	; 0x01
    
    midi_device_input(midi_device, 1, &noteoff_byte1);
     b1e:	c8 01       	movw	r24, r16
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	ae 01       	movw	r20, r28
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_input(midi_device, 1, &pitch);
     b2c:	c8 01       	movw	r24, r16
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	ae 01       	movw	r20, r28
     b32:	4e 5f       	subi	r20, 0xFE	; 254
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_input(midi_device, 1, &velocity);
     b3a:	c8 01       	movw	r24, r16
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	ae 01       	movw	r20, r28
     b40:	4d 5f       	subi	r20, 0xFD	; 253
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <midi_device_input>
    midi_device_process(midi_device);
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 80 10 	call	0x2100	; 0x2100 <midi_device_process>
}
     b4e:	23 96       	adiw	r28, 0x03	; 3
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <main>:

int main(void) {
    const uint16_t initial_BPM = 60;
	
    initialize_hardware();
     b5e:	0e 94 02 03 	call	0x604	; 0x604 <initialize_hardware>
    initialize_sequencer(&sequencer);
     b62:	86 e5       	ldi	r24, 0x56	; 86
     b64:	91 e2       	ldi	r25, 0x21	; 33
     b66:	0e 94 26 09 	call	0x124c	; 0x124c <initialize_sequencer>
	initialize_serial_midi(&midi_device, &sequencer);
     b6a:	8f e7       	ldi	r24, 0x7F	; 127
     b6c:	92 e2       	ldi	r25, 0x22	; 34
     b6e:	66 e5       	ldi	r22, 0x56	; 86
     b70:	71 e2       	ldi	r23, 0x21	; 33
     b72:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <initialize_serial_midi>
    initialize_beat_clock(initial_BPM);
     b76:	8c e3       	ldi	r24, 0x3C	; 60
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 83 01 	call	0x306	; 0x306 <initialize_beat_clock>
    set_seven_segment_LEDs(get_BPM());
     b7e:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     b82:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>

    while(1){
        read_hardware();
     b86:	0e 94 89 03 	call	0x712	; 0x712 <read_hardware>
        
        if (get_encoder() == TURN_CW)
     b8a:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	19 f4       	brne	.+6      	; 0xb98 <main+0x3a>
            increment_BPM();
     b92:	0e 94 a3 01 	call	0x346	; 0x346 <increment_BPM>
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <main+0x46>
        else if (get_encoder() == TURN_CCW)
     b98:	0e 94 bb 01 	call	0x376	; 0x376 <get_encoder>
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	11 f4       	brne	.+4      	; 0xba4 <main+0x46>
            decrement_BPM();    
     ba0:	0e 94 af 01 	call	0x35e	; 0x35e <decrement_BPM>
        
        set_seven_segment_LEDs(get_BPM());
     ba4:	0e 94 9e 01 	call	0x33c	; 0x33c <get_BPM>
     ba8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_seven_segment_LEDs>

        if (get_pushbutton_switch_edge() == EDGE_RISE)
     bac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <get_pushbutton_switch_edge>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	29 f4       	brne	.+10     	; 0xbbe <main+0x60>
		    continue_sequencer(&sequencer, 1);
     bb4:	86 e5       	ldi	r24, 0x56	; 86
     bb6:	91 e2       	ldi	r25, 0x21	; 33
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>

		if (get_toggle_switch_edge() == EDGE_FALL){
     bbe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <get_toggle_switch_edge>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <main+0x74>
		    stop_sequencer(&sequencer, 1);
     bc6:	86 e5       	ldi	r24, 0x56	; 86
     bc8:	91 e2       	ldi	r25, 0x21	; 33
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <stop_sequencer>
     bd0:	da cf       	rjmp	.-76     	; 0xb86 <main+0x28>
		}			
		else if (get_encoder_switch_edge() == EDGE_RISE){
     bd2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_encoder_switch_edge>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	b1 f6       	brne	.-84     	; 0xb86 <main+0x28>
			continue_sequencer(&sequencer, 1);
     bda:	86 e5       	ldi	r24, 0x56	; 86
     bdc:	91 e2       	ldi	r25, 0x21	; 33
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
     be4:	d0 cf       	rjmp	.-96     	; 0xb86 <main+0x28>

00000be6 <initialize_note_list>:
    note->previous_note_by_trigger = NULL;
}

//Reset all data in the note list
//Reset all data in each note of the list 
void initialize_note_list(NoteList* note_list){
     be6:	fc 01       	movw	r30, r24
    uint8_t i;

    note_list->length = 0;
     be8:	10 82       	st	Z, r1
    note_list->head_pitch = NULL;
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	12 82       	std	Z+2, r1	; 0x02
    note_list->tail_pitch = NULL;
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	14 82       	std	Z+4, r1	; 0x04
    note_list->head_trigger = NULL;
     bf2:	15 82       	std	Z+5, r1	; 0x05
     bf4:	16 82       	std	Z+6, r1	; 0x06
    note_list->tail_trigger = NULL;
     bf6:	17 82       	std	Z+7, r1	; 0x07
     bf8:	10 86       	std	Z+8, r1	; 0x08
     bfa:	80 e1       	ldi	r24, 0x10	; 16
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     bfc:	11 86       	std	Z+9, r1	; 0x09
    note->velocity = 0;
     bfe:	12 86       	std	Z+10, r1	; 0x0a
    note->status = 0;
     c00:	13 86       	std	Z+11, r1	; 0x0b
    note->next_note_by_pitch = NULL;
     c02:	14 86       	std	Z+12, r1	; 0x0c
     c04:	15 86       	std	Z+13, r1	; 0x0d
    note->previous_note_by_pitch = NULL;
     c06:	16 86       	std	Z+14, r1	; 0x0e
     c08:	17 86       	std	Z+15, r1	; 0x0f
    note->next_note_by_trigger = NULL;
     c0a:	10 8a       	std	Z+16, r1	; 0x10
     c0c:	11 8a       	std	Z+17, r1	; 0x11
    note->previous_note_by_trigger = NULL;
     c0e:	12 8a       	std	Z+18, r1	; 0x12
     c10:	13 8a       	std	Z+19, r1	; 0x13
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	3b 96       	adiw	r30, 0x0b	; 11
    note_list->head_pitch = NULL;
    note_list->tail_pitch = NULL;
    note_list->head_trigger = NULL;
    note_list->tail_trigger = NULL;

    for(i = 0; i<MAX_LIST_NOTES; i++)
     c16:	88 23       	and	r24, r24
     c18:	89 f7       	brne	.-30     	; 0xbfc <initialize_note_list+0x16>
        free_note(&(note_list->note_bank[i]));
}
     c1a:	08 95       	ret

00000c1c <remove_note_by_pitch>:
}

//Search for note by pitch in the note list
//If it is found, adjust surrounding pointers
//And remove and free the note
bool remove_note_by_pitch(NoteList* note_list, uint8_t pitch){
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     c22:	a1 81       	ldd	r26, Z+1	; 0x01
     c24:	b2 81       	ldd	r27, Z+2	; 0x02
     c26:	07 c0       	rjmp	.+14     	; 0xc36 <remove_note_by_pitch+0x1a>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     c28:	8c 91       	ld	r24, X
     c2a:	86 17       	cp	r24, r22
     c2c:	38 f4       	brcc	.+14     	; 0xc3c <remove_note_by_pitch+0x20>
            break;

        target_note = target_note->next_note_by_pitch;
     c2e:	13 96       	adiw	r26, 0x03	; 3
     c30:	0d 90       	ld	r0, X+
     c32:	bc 91       	ld	r27, X
     c34:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     c36:	10 97       	sbiw	r26, 0x00	; 0
     c38:	b9 f7       	brne	.-18     	; 0xc28 <remove_note_by_pitch+0xc>
     c3a:	5d c0       	rjmp	.+186    	; 0xcf6 <remove_note_by_pitch+0xda>
    //note not found (reached the end of the note list)
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
     c3c:	86 17       	cp	r24, r22
     c3e:	09 f0       	breq	.+2      	; 0xc42 <remove_note_by_pitch+0x26>
     c40:	5a c0       	rjmp	.+180    	; 0xcf6 <remove_note_by_pitch+0xda>
        return 0;
        
    //otherwise, the note was found and ready to be removed
    note_list->length += -1;
     c42:	80 81       	ld	r24, Z
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	80 83       	st	Z, r24
    
    //check for empty list
    if (note_list->length == 0){
     c48:	88 23       	and	r24, r24
     c4a:	21 f4       	brne	.+8      	; 0xc54 <remove_note_by_pitch+0x38>
        initialize_note_list(note_list);
     c4c:	cf 01       	movw	r24, r30
     c4e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <initialize_note_list>
     c52:	4f c0       	rjmp	.+158    	; 0xcf2 <remove_note_by_pitch+0xd6>
    }
    
    //adjust surrounding pointers
    //set new heads and tails if necessary
    
    if (dead_note->previous_note_by_pitch)
     c54:	15 96       	adiw	r26, 0x05	; 5
     c56:	2d 91       	ld	r18, X+
     c58:	3c 91       	ld	r19, X
     c5a:	16 97       	sbiw	r26, 0x06	; 6
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	8d 91       	ld	r24, X+
     c60:	9c 91       	ld	r25, X
     c62:	14 97       	sbiw	r26, 0x04	; 4
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	21 f0       	breq	.+8      	; 0xc72 <remove_note_by_pitch+0x56>
        dead_note->previous_note_by_pitch->next_note_by_pitch = dead_note->next_note_by_pitch;
     c6a:	e9 01       	movw	r28, r18
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <remove_note_by_pitch+0x5a>
    else
        note_list->head_pitch = dead_note->next_note_by_pitch;
     c72:	81 83       	std	Z+1, r24	; 0x01
     c74:	92 83       	std	Z+2, r25	; 0x02
    
    if (dead_note->next_note_by_pitch)
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	8d 91       	ld	r24, X+
     c7a:	9c 91       	ld	r25, X
     c7c:	14 97       	sbiw	r26, 0x04	; 4
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	21 f0       	breq	.+8      	; 0xc8a <remove_note_by_pitch+0x6e>
        dead_note->next_note_by_pitch->previous_note_by_pitch = dead_note->previous_note_by_pitch;
     c82:	ec 01       	movw	r28, r24
     c84:	2d 83       	std	Y+5, r18	; 0x05
     c86:	3e 83       	std	Y+6, r19	; 0x06
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <remove_note_by_pitch+0x72>
    else
        note_list->tail_pitch = dead_note->previous_note_by_pitch;
     c8a:	23 83       	std	Z+3, r18	; 0x03
     c8c:	34 83       	std	Z+4, r19	; 0x04
        
    if (dead_note->previous_note_by_trigger)
     c8e:	19 96       	adiw	r26, 0x09	; 9
     c90:	cd 91       	ld	r28, X+
     c92:	dc 91       	ld	r29, X
     c94:	1a 97       	sbiw	r26, 0x0a	; 10
     c96:	17 96       	adiw	r26, 0x07	; 7
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	18 97       	sbiw	r26, 0x08	; 8
     c9e:	20 97       	sbiw	r28, 0x00	; 0
     ca0:	19 f0       	breq	.+6      	; 0xca8 <remove_note_by_pitch+0x8c>
        dead_note->previous_note_by_trigger->next_note_by_trigger = dead_note->next_note_by_trigger;
     ca2:	8f 83       	std	Y+7, r24	; 0x07
     ca4:	98 87       	std	Y+8, r25	; 0x08
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <remove_note_by_pitch+0x90>
    else
        note_list->head_trigger = dead_note->next_note_by_trigger;
     ca8:	85 83       	std	Z+5, r24	; 0x05
     caa:	96 83       	std	Z+6, r25	; 0x06
    
    if (dead_note->next_note_by_trigger)
     cac:	17 96       	adiw	r26, 0x07	; 7
     cae:	8d 91       	ld	r24, X+
     cb0:	9c 91       	ld	r25, X
     cb2:	18 97       	sbiw	r26, 0x08	; 8
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <remove_note_by_pitch+0xa4>
        dead_note->next_note_by_trigger->previous_note_by_trigger = dead_note->previous_note_by_trigger;
     cb8:	fc 01       	movw	r30, r24
     cba:	c1 87       	std	Z+9, r28	; 0x09
     cbc:	d2 87       	std	Z+10, r29	; 0x0a
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <remove_note_by_pitch+0xa8>
    else
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
     cc0:	c7 83       	std	Z+7, r28	; 0x07
     cc2:	d0 87       	std	Z+8, r29	; 0x08
}

//Reset all data in a given note
//Set its status to 0, to signify that it's available
static void free_note(Note* note){
    note->pitch = 0;
     cc4:	1c 92       	st	X, r1
    note->velocity = 0;
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 92       	st	X, r1
     cca:	11 97       	sbiw	r26, 0x01	; 1
    note->status = 0;
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	1c 92       	st	X, r1
     cd0:	12 97       	sbiw	r26, 0x02	; 2
    note->next_note_by_pitch = NULL;
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	1d 92       	st	X+, r1
     cd6:	1c 92       	st	X, r1
     cd8:	14 97       	sbiw	r26, 0x04	; 4
    note->previous_note_by_pitch = NULL;
     cda:	15 96       	adiw	r26, 0x05	; 5
     cdc:	1d 92       	st	X+, r1
     cde:	1c 92       	st	X, r1
     ce0:	16 97       	sbiw	r26, 0x06	; 6
    note->next_note_by_trigger = NULL;
     ce2:	17 96       	adiw	r26, 0x07	; 7
     ce4:	1d 92       	st	X+, r1
     ce6:	1c 92       	st	X, r1
     ce8:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = NULL;
     cea:	19 96       	adiw	r26, 0x09	; 9
     cec:	1d 92       	st	X+, r1
     cee:	1c 92       	st	X, r1
     cf0:	1a 97       	sbiw	r26, 0x0a	; 10
        note_list->tail_trigger = dead_note->previous_note_by_trigger;
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <remove_note_by_pitch+0xdc>
    if (dead_note == NULL)
        return 0;
    
    //note not found (did not reach the end of the note list)
    if (dead_note->pitch != pitch)
        return 0;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
    
    //clear all note data and set its status to available
    free_note(dead_note);
    
    return 1;
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <insert_note>:
}

//insert new note in complete order
//return 0 if unsuccessful (no free note banks)
//return 1 if successful
bool insert_note(NoteList* note_list, uint8_t pitch, uint8_t velocity){
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	fc 01       	movw	r30, r24
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     d08:	a1 81       	ldd	r26, Z+1	; 0x01
     d0a:	b2 81       	ldd	r27, Z+2	; 0x02
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <insert_note+0x1e>
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
        if (pitch <= target_note->pitch)
     d0e:	8c 91       	ld	r24, X
     d10:	86 17       	cp	r24, r22
     d12:	30 f4       	brcc	.+12     	; 0xd20 <insert_note+0x22>
            break;

        target_note = target_note->next_note_by_pitch;
     d14:	13 96       	adiw	r26, 0x03	; 3
     d16:	0d 90       	ld	r0, X+
     d18:	bc 91       	ld	r27, X
     d1a:	a0 2d       	mov	r26, r0
//Return the next note's pointer if not found
//Return NULL if end of the list is reached
static Note* find_note_by_pitch(NoteList* note_list, uint8_t pitch){
    Note* target_note = note_list->head_pitch;
    
    while(target_note != NULL){
     d1c:	10 97       	sbiw	r26, 0x00	; 0
     d1e:	b9 f7       	brne	.-18     	; 0xd0e <insert_note+0x10>
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     d20:	8c 91       	ld	r24, X
     d22:	86 17       	cp	r24, r22
     d24:	09 f0       	breq	.+2      	; 0xd28 <insert_note+0x2a>
     d26:	48 c0       	rjmp	.+144    	; 0xdb8 <insert_note+0xba>
    return 1;
}

//Change the velocity of an existing note
static Note* update_note_velocity(Note* note, uint8_t velocity){
    note->velocity = velocity;
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	4c 93       	st	X, r20
     d2c:	11 97       	sbiw	r26, 0x01	; 1
//Place note at the end of the trigger order
//If the note is the only member of the note_list, assign it to the head    
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is already at the tail (also catches the case of a single-member list)
    if (note_list->tail_trigger == note)
     d2e:	87 81       	ldd	r24, Z+7	; 0x07
     d30:	90 85       	ldd	r25, Z+8	; 0x08
     d32:	8a 17       	cp	r24, r26
     d34:	9b 07       	cpc	r25, r27
     d36:	09 f4       	brne	.+2      	; 0xd3a <insert_note+0x3c>
     d38:	d0 c0       	rjmp	.+416    	; 0xeda <insert_note+0x1dc>
        return;
            
    //check for head
    if (note_list->head_trigger == note){
     d3a:	85 81       	ldd	r24, Z+5	; 0x05
     d3c:	96 81       	ldd	r25, Z+6	; 0x06
     d3e:	8a 17       	cp	r24, r26
     d40:	9b 07       	cpc	r25, r27
     d42:	49 f4       	brne	.+18     	; 0xd56 <insert_note+0x58>
        //update head and remove note
        note_list->head_trigger = note->next_note_by_trigger;
     d44:	17 96       	adiw	r26, 0x07	; 7
     d46:	cd 91       	ld	r28, X+
     d48:	dc 91       	ld	r29, X
     d4a:	18 97       	sbiw	r26, 0x08	; 8
     d4c:	c5 83       	std	Z+5, r28	; 0x05
     d4e:	d6 83       	std	Z+6, r29	; 0x06
        note_list->head_trigger->previous_note_by_trigger = NULL;
     d50:	19 86       	std	Y+9, r1	; 0x09
     d52:	1a 86       	std	Y+10, r1	; 0x0a
     d54:	12 c0       	rjmp	.+36     	; 0xd7a <insert_note+0x7c>
    }
    else{
        //otherwise remove note normally
        note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     d56:	19 96       	adiw	r26, 0x09	; 9
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	1a 97       	sbiw	r26, 0x0a	; 10
     d5e:	17 96       	adiw	r26, 0x07	; 7
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	18 97       	sbiw	r26, 0x08	; 8
     d66:	e9 01       	movw	r28, r18
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     d6c:	17 96       	adiw	r26, 0x07	; 7
     d6e:	8d 91       	ld	r24, X+
     d70:	9c 91       	ld	r25, X
     d72:	18 97       	sbiw	r26, 0x08	; 8
     d74:	ec 01       	movw	r28, r24
     d76:	29 87       	std	Y+9, r18	; 0x09
     d78:	3a 87       	std	Y+10, r19	; 0x0a

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     d7a:	80 81       	ld	r24, Z
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	69 f4       	brne	.+26     	; 0xd9a <insert_note+0x9c>
        note_list->tail_trigger = note;
     d80:	a7 83       	std	Z+7, r26	; 0x07
     d82:	b0 87       	std	Z+8, r27	; 0x08
        note_list->head_trigger = note;
     d84:	a5 83       	std	Z+5, r26	; 0x05
     d86:	b6 83       	std	Z+6, r27	; 0x06
        note->next_note_by_trigger = NULL;
     d88:	17 96       	adiw	r26, 0x07	; 7
     d8a:	1d 92       	st	X+, r1
     d8c:	1c 92       	st	X, r1
     d8e:	18 97       	sbiw	r26, 0x08	; 8
        note->previous_note_by_trigger = NULL;
     d90:	19 96       	adiw	r26, 0x09	; 9
     d92:	1d 92       	st	X+, r1
     d94:	1c 92       	st	X, r1
     d96:	1a 97       	sbiw	r26, 0x0a	; 10
     d98:	a3 c0       	rjmp	.+326    	; 0xee0 <insert_note+0x1e2>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     d9a:	17 96       	adiw	r26, 0x07	; 7
     d9c:	1d 92       	st	X+, r1
     d9e:	1c 92       	st	X, r1
     da0:	18 97       	sbiw	r26, 0x08	; 8
    note->previous_note_by_trigger = note_list->tail_trigger;
     da2:	c7 81       	ldd	r28, Z+7	; 0x07
     da4:	d0 85       	ldd	r29, Z+8	; 0x08
     da6:	19 96       	adiw	r26, 0x09	; 9
     da8:	cd 93       	st	X+, r28
     daa:	dc 93       	st	X, r29
     dac:	1a 97       	sbiw	r26, 0x0a	; 10
    note_list->tail_trigger->next_note_by_trigger = note;
     dae:	af 83       	std	Y+7, r26	; 0x07
     db0:	b8 87       	std	Y+8, r27	; 0x08
    note_list->tail_trigger = note;
     db2:	a7 83       	std	Z+7, r26	; 0x07
     db4:	b0 87       	std	Z+8, r27	; 0x08
     db6:	91 c0       	rjmp	.+290    	; 0xeda <insert_note+0x1dc>
     db8:	ef 01       	movw	r28, r30
    //search for pitch position
    Note* target_note = find_note_by_pitch(note_list,pitch);
    Note* new_note;
    
    //check if the note is already in the list
    if (target_note->pitch == pitch){
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
    note->previous_note_by_trigger = note_list->tail_trigger;
    note_list->tail_trigger->next_note_by_trigger = note;
    note_list->tail_trigger = note;
     dbe:	28 2f       	mov	r18, r24
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     dc0:	3b 85       	ldd	r19, Y+11	; 0x0b
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	33 23       	and	r19, r19
     dc6:	e1 f4       	brne	.+56     	; 0xe00 <insert_note+0x102>
            note_list->note_bank[i].status = 1;
     dc8:	0b e0       	ldi	r16, 0x0B	; 11
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	80 9f       	mul	r24, r16
     dce:	e0 01       	movw	r28, r0
     dd0:	81 9f       	mul	r24, r17
     dd2:	d0 0d       	add	r29, r0
     dd4:	90 9f       	mul	r25, r16
     dd6:	d0 0d       	add	r29, r0
     dd8:	11 24       	eor	r1, r1
     dda:	ce 0f       	add	r28, r30
     ddc:	df 1f       	adc	r29, r31
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	88 83       	st	Y, r24
            return &(note_list->note_bank[i]);
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	20 9f       	mul	r18, r16
     de6:	e0 01       	movw	r28, r0
     de8:	21 9f       	mul	r18, r17
     dea:	d0 0d       	add	r29, r0
     dec:	30 9f       	mul	r19, r16
     dee:	d0 0d       	add	r29, r0
     df0:	11 24       	eor	r1, r1
     df2:	ce 01       	movw	r24, r28
     df4:	09 96       	adiw	r24, 0x09	; 9
     df6:	8e 0f       	add	r24, r30
     df8:	9f 1f       	adc	r25, r31
//return NULL otherwise
static Note* add_note_at_previous_pitch(NoteList* note_list, Note* target_note, uint8_t pitch, uint8_t velocity){
    Note* new_note = allocate_note(note_list);
    
    //return NULL if there are no more notes
    if (new_note == NULL)
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	31 f4       	brne	.+12     	; 0xe0a <insert_note+0x10c>
     dfe:	6f c0       	rjmp	.+222    	; 0xede <insert_note+0x1e0>
     e00:	2b 96       	adiw	r28, 0x0b	; 11
//Iterate through the bank of notes to find an available note to use
//Return NULL if all notes are taken
//Return note pointer if there is one available
static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     e02:	80 31       	cpi	r24, 0x10	; 16
     e04:	91 05       	cpc	r25, r1
     e06:	d9 f6       	brne	.-74     	; 0xdbe <insert_note+0xc0>
     e08:	6a c0       	rjmp	.+212    	; 0xede <insert_note+0x1e0>
    
    //return NULL if there are no more notes
    if (new_note == NULL)
        return NULL;
    
    note_list->length += 1;
     e0a:	50 81       	ld	r21, Z
     e0c:	5f 5f       	subi	r21, 0xFF	; 255
     e0e:	50 83       	st	Z, r21
    
    //set data of new note
    new_note->pitch = pitch;
     e10:	ce 0f       	add	r28, r30
     e12:	df 1f       	adc	r29, r31
     e14:	69 87       	std	Y+9, r22	; 0x09
    new_note->velocity = velocity;
     e16:	4a 87       	std	Y+10, r20	; 0x0a
    
    //new_note is the only member of the list
    if (note_list->length == 1){
     e18:	51 30       	cpi	r21, 0x01	; 1
     e1a:	39 f4       	brne	.+14     	; 0xe2a <insert_note+0x12c>
        new_note->next_note_by_pitch = NULL;
     e1c:	1c 86       	std	Y+12, r1	; 0x0c
     e1e:	1d 86       	std	Y+13, r1	; 0x0d
        new_note->previous_note_by_pitch = NULL;
     e20:	1e 86       	std	Y+14, r1	; 0x0e
     e22:	1f 86       	std	Y+15, r1	; 0x0f
        note_list->head_pitch = new_note;
     e24:	81 83       	std	Z+1, r24	; 0x01
     e26:	92 83       	std	Z+2, r25	; 0x02
     e28:	0c c0       	rjmp	.+24     	; 0xe42 <insert_note+0x144>
        note_list->tail_pitch = new_note;
        return new_note;        
    }
    
    //if new_note isn't the only note, but target_note is NULL, new_note is at the tail pitch
    if (target_note == NULL){
     e2a:	10 97       	sbiw	r26, 0x00	; 0
     e2c:	69 f4       	brne	.+26     	; 0xe48 <insert_note+0x14a>
        new_note->previous_note_by_pitch = note_list->tail_pitch;
     e2e:	a3 81       	ldd	r26, Z+3	; 0x03
     e30:	b4 81       	ldd	r27, Z+4	; 0x04
     e32:	ae 87       	std	Y+14, r26	; 0x0e
     e34:	bf 87       	std	Y+15, r27	; 0x0f
        new_note->next_note_by_pitch = NULL;
     e36:	1c 86       	std	Y+12, r1	; 0x0c
     e38:	1d 86       	std	Y+13, r1	; 0x0d
        note_list->tail_pitch->next_note_by_pitch = new_note;
     e3a:	13 96       	adiw	r26, 0x03	; 3
     e3c:	8d 93       	st	X+, r24
     e3e:	9c 93       	st	X, r25
     e40:	14 97       	sbiw	r26, 0x04	; 4
        note_list->tail_pitch = new_note;
     e42:	83 83       	std	Z+3, r24	; 0x03
     e44:	94 83       	std	Z+4, r25	; 0x04
     e46:	51 c0       	rjmp	.+162    	; 0xeea <insert_note+0x1ec>
        return new_note;
    }
    
    //otherwise, adjust pointers
    new_note->next_note_by_pitch = target_note;
     e48:	ac 87       	std	Y+12, r26	; 0x0c
     e4a:	bd 87       	std	Y+13, r27	; 0x0d
    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     e4c:	15 96       	adiw	r26, 0x05	; 5
     e4e:	4d 91       	ld	r20, X+
     e50:	5c 91       	ld	r21, X
     e52:	16 97       	sbiw	r26, 0x06	; 6
     e54:	4e 87       	std	Y+14, r20	; 0x0e
     e56:	5f 87       	std	Y+15, r21	; 0x0f
    target_note->previous_note_by_pitch = new_note;
     e58:	15 96       	adiw	r26, 0x05	; 5
     e5a:	8d 93       	st	X+, r24
     e5c:	9c 93       	st	X, r25
     e5e:	16 97       	sbiw	r26, 0x06	; 6

    //check for head
    if (new_note->previous_note_by_pitch == NULL)
     e60:	ae 85       	ldd	r26, Y+14	; 0x0e
     e62:	bf 85       	ldd	r27, Y+15	; 0x0f
     e64:	10 97       	sbiw	r26, 0x00	; 0
     e66:	19 f4       	brne	.+6      	; 0xe6e <insert_note+0x170>
        note_list->head_pitch = new_note;
     e68:	81 83       	std	Z+1, r24	; 0x01
     e6a:	92 83       	std	Z+2, r25	; 0x02
     e6c:	3e c0       	rjmp	.+124    	; 0xeea <insert_note+0x1ec>
    else
        new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	8d 93       	st	X+, r24
     e72:	9c 93       	st	X, r25
     e74:	14 97       	sbiw	r26, 0x04	; 4
     e76:	39 c0       	rjmp	.+114    	; 0xeea <insert_note+0x1ec>
//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
        note_list->tail_trigger = note;
     e78:	87 83       	std	Z+7, r24	; 0x07
     e7a:	90 87       	std	Z+8, r25	; 0x08
        note_list->head_trigger = note;
     e7c:	85 83       	std	Z+5, r24	; 0x05
     e7e:	96 83       	std	Z+6, r25	; 0x06
        note->next_note_by_trigger = NULL;
     e80:	8b e0       	ldi	r24, 0x0B	; 11
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	28 9f       	mul	r18, r24
     e86:	d0 01       	movw	r26, r0
     e88:	29 9f       	mul	r18, r25
     e8a:	b0 0d       	add	r27, r0
     e8c:	38 9f       	mul	r19, r24
     e8e:	b0 0d       	add	r27, r0
     e90:	11 24       	eor	r1, r1
     e92:	ae 0f       	add	r26, r30
     e94:	bf 1f       	adc	r27, r31
     e96:	50 96       	adiw	r26, 0x10	; 16
     e98:	1d 92       	st	X+, r1
     e9a:	1c 92       	st	X, r1
     e9c:	51 97       	sbiw	r26, 0x11	; 17
        note->previous_note_by_trigger = NULL;
     e9e:	52 96       	adiw	r26, 0x12	; 18
     ea0:	1d 92       	st	X+, r1
     ea2:	1c 92       	st	X, r1
     ea4:	53 97       	sbiw	r26, 0x13	; 19
     ea6:	19 c0       	rjmp	.+50     	; 0xeda <insert_note+0x1dc>
        return;
    }
    
    //otherwise, set note as tail normally
    note->next_note_by_trigger = NULL;
     ea8:	4b e0       	ldi	r20, 0x0B	; 11
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	24 9f       	mul	r18, r20
     eae:	d0 01       	movw	r26, r0
     eb0:	25 9f       	mul	r18, r21
     eb2:	b0 0d       	add	r27, r0
     eb4:	34 9f       	mul	r19, r20
     eb6:	b0 0d       	add	r27, r0
     eb8:	11 24       	eor	r1, r1
     eba:	ae 0f       	add	r26, r30
     ebc:	bf 1f       	adc	r27, r31
     ebe:	50 96       	adiw	r26, 0x10	; 16
     ec0:	1d 92       	st	X+, r1
     ec2:	1c 92       	st	X, r1
     ec4:	51 97       	sbiw	r26, 0x11	; 17
    note->previous_note_by_trigger = note_list->tail_trigger;
     ec6:	c7 81       	ldd	r28, Z+7	; 0x07
     ec8:	d0 85       	ldd	r29, Z+8	; 0x08
     eca:	52 96       	adiw	r26, 0x12	; 18
     ecc:	cd 93       	st	X+, r28
     ece:	dc 93       	st	X, r29
     ed0:	53 97       	sbiw	r26, 0x13	; 19
    note_list->tail_trigger->next_note_by_trigger = note;
     ed2:	8f 83       	std	Y+7, r24	; 0x07
     ed4:	98 87       	std	Y+8, r25	; 0x08
    note_list->tail_trigger = note;
     ed6:	87 83       	std	Z+7, r24	; 0x07
     ed8:	90 87       	std	Z+8, r25	; 0x08
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <insert_note+0x1e2>
    }
    else{
        //if the note is new, add it in the proper pitch position
        new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
        if (new_note == NULL)
            return 0;
     ede:	80 e0       	ldi	r24, 0x00	; 0
        else{
            insert_note_at_tail_trigger(note_list, new_note);
            return 1;
        }            
    }
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

//insert note at the end of the trigger order
static void insert_note_at_tail_trigger(NoteList* note_list, Note* note){

    //check if the note is the only member of the list
    if (note_list->length == 1){
     eea:	40 81       	ld	r20, Z
     eec:	41 30       	cpi	r20, 0x01	; 1
     eee:	e1 f6       	brne	.-72     	; 0xea8 <insert_note+0x1aa>
     ef0:	c3 cf       	rjmp	.-122    	; 0xe78 <insert_note+0x17a>

00000ef2 <calculate_start_time_increment>:
#include "./xnorMIDI/midi.h"

#include "serial_midi.h"
#include "hardware.h"

static void calculate_start_time_increment(Sequencer* sequencer){
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <calculate_start_time_increment+0xa>
     efc:	00 d0       	rcall	.+0      	; 0xefe <calculate_start_time_increment+0xc>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8c 01       	movw	r16, r24
    //4 - dotted 16th (3/8)
    //5 - triplet 8th (1/3)
    //6 - 16th (1/4)
    
    //start with the time for a single beat
    volatile uint32_t new_start_time_increment = (uint32_t) TCC0.CCA;
     f04:	80 91 28 08 	lds	r24, 0x0828
     f08:	90 91 29 08 	lds	r25, 0x0829
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	ab 83       	std	Y+3, r26	; 0x03
     f16:	bc 83       	std	Y+4, r27	; 0x04
    
    //based on the division selection, scale the time
    switch(sequencer->division){
     f18:	f8 01       	movw	r30, r16
     f1a:	87 85       	ldd	r24, Z+15	; 0x0f
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	89 f1       	breq	.+98     	; 0xf82 <calculate_start_time_increment+0x90>
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	30 f4       	brcc	.+12     	; 0xf30 <calculate_start_time_increment+0x3e>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	69 f0       	breq	.+26     	; 0xf42 <calculate_start_time_increment+0x50>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	09 f0       	breq	.+2      	; 0xf2e <calculate_start_time_increment+0x3c>
     f2c:	6f c0       	rjmp	.+222    	; 0x100c <calculate_start_time_increment+0x11a>
     f2e:	1c c0       	rjmp	.+56     	; 0xf68 <calculate_start_time_increment+0x76>
     f30:	85 30       	cpi	r24, 0x05	; 5
     f32:	09 f4       	brne	.+2      	; 0xf36 <calculate_start_time_increment+0x44>
     f34:	4d c0       	rjmp	.+154    	; 0xfd0 <calculate_start_time_increment+0xde>
     f36:	85 30       	cpi	r24, 0x05	; 5
     f38:	68 f1       	brcs	.+90     	; 0xf94 <calculate_start_time_increment+0xa2>
     f3a:	86 30       	cpi	r24, 0x06	; 6
     f3c:	09 f0       	breq	.+2      	; 0xf40 <calculate_start_time_increment+0x4e>
     f3e:	66 c0       	rjmp	.+204    	; 0x100c <calculate_start_time_increment+0x11a>
     f40:	56 c0       	rjmp	.+172    	; 0xfee <calculate_start_time_increment+0xfc>
        case 0:    break;
        
        case 1: new_start_time_increment *= 3;
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	4b 81       	ldd	r20, Y+3	; 0x03
     f48:	5c 81       	ldd	r21, Y+4	; 0x04
     f4a:	da 01       	movw	r26, r20
     f4c:	c9 01       	movw	r24, r18
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	aa 1f       	adc	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	a4 1f       	adc	r26, r20
     f5c:	b5 1f       	adc	r27, r21
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	ab 83       	std	Y+3, r26	; 0x03
     f64:	bc 83       	std	Y+4, r27	; 0x04
     f66:	43 c0       	rjmp	.+134    	; 0xfee <calculate_start_time_increment+0xfc>
                new_start_time_increment /= 4;
                break;
                
        case 2: new_start_time_increment *= 2;
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	ab 81       	ldd	r26, Y+3	; 0x03
     f6e:	bc 81       	ldd	r27, Y+4	; 0x04
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	ab 83       	std	Y+3, r26	; 0x03
     f7e:	bc 83       	std	Y+4, r27	; 0x04
     f80:	27 c0       	rjmp	.+78     	; 0xfd0 <calculate_start_time_increment+0xde>
                new_start_time_increment /= 3;
                break;
                
        case 3: new_start_time_increment /= 2;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	ab 81       	ldd	r26, Y+3	; 0x03
     f88:	bc 81       	ldd	r27, Y+4	; 0x04
     f8a:	b6 95       	lsr	r27
     f8c:	a7 95       	ror	r26
     f8e:	97 95       	ror	r25
     f90:	87 95       	ror	r24
     f92:	38 c0       	rjmp	.+112    	; 0x1004 <calculate_start_time_increment+0x112>
                break;
                
        case 4: new_start_time_increment *= 3;
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	3a 81       	ldd	r19, Y+2	; 0x02
     f98:	4b 81       	ldd	r20, Y+3	; 0x03
     f9a:	5c 81       	ldd	r21, Y+4	; 0x04
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	aa 1f       	adc	r26, r26
     fa6:	bb 1f       	adc	r27, r27
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	a4 1f       	adc	r26, r20
     fae:	b5 1f       	adc	r27, r21
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04
                new_start_time_increment /= 8;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	ab 81       	ldd	r26, Y+3	; 0x03
     fbe:	bc 81       	ldd	r27, Y+4	; 0x04
     fc0:	33 e0       	ldi	r19, 0x03	; 3
     fc2:	b6 95       	lsr	r27
     fc4:	a7 95       	ror	r26
     fc6:	97 95       	ror	r25
     fc8:	87 95       	ror	r24
     fca:	3a 95       	dec	r19
     fcc:	d1 f7       	brne	.-12     	; 0xfc2 <calculate_start_time_increment+0xd0>
     fce:	1a c0       	rjmp	.+52     	; 0x1004 <calculate_start_time_increment+0x112>
                break;
        
        case 5: new_start_time_increment /= 3;
     fd0:	69 81       	ldd	r22, Y+1	; 0x01
     fd2:	7a 81       	ldd	r23, Y+2	; 0x02
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	23 e0       	ldi	r18, 0x03	; 3
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
     fe4:	29 83       	std	Y+1, r18	; 0x01
     fe6:	3a 83       	std	Y+2, r19	; 0x02
     fe8:	4b 83       	std	Y+3, r20	; 0x03
     fea:	5c 83       	std	Y+4, r21	; 0x04
                break;
     fec:	0f c0       	rjmp	.+30     	; 0x100c <calculate_start_time_increment+0x11a>
                
        case 6: new_start_time_increment /= 4;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	ab 81       	ldd	r26, Y+3	; 0x03
     ff4:	bc 81       	ldd	r27, Y+4	; 0x04
     ff6:	22 e0       	ldi	r18, 0x02	; 2
     ff8:	b6 95       	lsr	r27
     ffa:	a7 95       	ror	r26
     ffc:	97 95       	ror	r25
     ffe:	87 95       	ror	r24
    1000:	2a 95       	dec	r18
    1002:	d1 f7       	brne	.-12     	; 0xff8 <calculate_start_time_increment+0x106>
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	ab 83       	std	Y+3, r26	; 0x03
    100a:	bc 83       	std	Y+4, r27	; 0x04
                break;
    }
    
    //divide by repeat parameter to fit in all the repeats
    new_start_time_increment /= (sequencer->repeat_max + 1);
    100c:	69 81       	ldd	r22, Y+1	; 0x01
    100e:	7a 81       	ldd	r23, Y+2	; 0x02
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	f8 01       	movw	r30, r16
    1016:	27 81       	ldd	r18, Z+7	; 0x07
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	44 27       	eor	r20, r20
    1020:	37 fd       	sbrc	r19, 7
    1022:	40 95       	com	r20
    1024:	54 2f       	mov	r21, r20
    1026:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
    102a:	29 83       	std	Y+1, r18	; 0x01
    102c:	3a 83       	std	Y+2, r19	; 0x02
    102e:	4b 83       	std	Y+3, r20	; 0x03
    1030:	5c 83       	std	Y+4, r21	; 0x04
    
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	ab 81       	ldd	r26, Y+3	; 0x03
    1038:	bc 81       	ldd	r27, Y+4	; 0x04
    103a:	f8 01       	movw	r30, r16
    103c:	81 87       	std	Z+9, r24	; 0x09
    103e:	92 87       	std	Z+10, r25	; 0x0a
}
    1040:	24 96       	adiw	r28, 0x04	; 4
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <build_play_list>:
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    1050:	2f 92       	push	r2
    1052:	3f 92       	push	r3
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8c 01       	movw	r16, r24
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    
    return;
}
    1078:	2d b6       	in	r2, 0x3d	; 61
    107a:	3e b6       	in	r3, 0x3e	; 62
static void build_play_list(Sequencer* sequencer){
    
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    107c:	dc 01       	movw	r26, r24
    107e:	1d 96       	adiw	r26, 0x0d	; 13
    1080:	8c 91       	ld	r24, X
    1082:	1d 97       	sbiw	r26, 0x0d	; 13
    
    uint8_t play_list_index = 0;
    Note* current_note;
    
    uint8_t note_list_size = note_list->length;
    1084:	f8 01       	movw	r30, r16
    1086:	e0 59       	subi	r30, 0x90	; 144
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	90 80       	ld	r9, Z
	
    uint8_t random_order[note_list_size];
    108c:	69 2c       	mov	r6, r9
    108e:	77 24       	eor	r7, r7
    1090:	ed b7       	in	r30, 0x3d	; 61
    1092:	fe b7       	in	r31, 0x3e	; 62
    1094:	e6 19       	sub	r30, r6
    1096:	f7 09       	sbc	r31, r7
    1098:	ed bf       	out	0x3d, r30	; 61
    109a:	fe bf       	out	0x3e, r31	; 62
    109c:	ed b6       	in	r14, 0x3d	; 61
    109e:	fe b6       	in	r15, 0x3e	; 62
    10a0:	08 94       	sec
    10a2:	e1 1c       	adc	r14, r1
    10a4:	f1 1c       	adc	r15, r1
    uint8_t i;
    uint8_t mirror = 0;

//    pattern = 0;

    switch(pattern){
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	09 f4       	brne	.+2      	; 0x10ac <build_play_list+0x5c>
    10aa:	42 c0       	rjmp	.+132    	; 0x1130 <build_play_list+0xe0>
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	30 f4       	brcc	.+12     	; 0x10bc <build_play_list+0x6c>
    10b0:	88 23       	and	r24, r24
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <build_play_list+0x80>
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <build_play_list+0x6a>
    10b8:	ac c0       	rjmp	.+344    	; 0x1212 <build_play_list+0x1c2>
    10ba:	22 c0       	rjmp	.+68     	; 0x1100 <build_play_list+0xb0>
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	09 f4       	brne	.+2      	; 0x10c2 <build_play_list+0x72>
    10c0:	4f c0       	rjmp	.+158    	; 0x1160 <build_play_list+0x110>
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <build_play_list+0x78>
    10c6:	a5 c0       	rjmp	.+330    	; 0x1212 <build_play_list+0x1c2>
    10c8:	57 01       	movw	r10, r14
    10ca:	f7 01       	movw	r30, r14
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	62 c0       	rjmp	.+196    	; 0x1194 <build_play_list+0x144>
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10d0:	f8 01       	movw	r30, r16
    10d2:	ef 58       	subi	r30, 0x8F	; 143
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	a0 81       	ld	r26, Z
    10d8:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    10da:	80 e0       	ldi	r24, 0x00	; 0
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10dc:	0e c0       	rjmp	.+28     	; 0x10fa <build_play_list+0xaa>
                sequencer->play_list[play_list_index++] = current_note;
    10de:	e8 2f       	mov	r30, r24
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	38 96       	adiw	r30, 0x08	; 8
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e0 0f       	add	r30, r16
    10ea:	f1 1f       	adc	r31, r17
    10ec:	a0 83       	st	Z, r26
    10ee:	b1 83       	std	Z+1, r27	; 0x01
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
//    pattern = 0;

    switch(pattern){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
    10f2:	13 96       	adiw	r26, 0x03	; 3
    10f4:	0d 90       	ld	r0, X+
    10f6:	bc 91       	ld	r27, X
    10f8:	a0 2d       	mov	r26, r0
    10fa:	10 97       	sbiw	r26, 0x00	; 0
    10fc:	81 f7       	brne	.-32     	; 0x10de <build_play_list+0x8e>
    10fe:	8a c0       	rjmp	.+276    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1100:	f8 01       	movw	r30, r16
    1102:	ed 58       	subi	r30, 0x8D	; 141
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	a0 81       	ld	r26, Z
    1108:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    110c:	0e c0       	rjmp	.+28     	; 0x112a <build_play_list+0xda>
                sequencer->play_list[play_list_index++] = current_note;
    110e:	e8 2f       	mov	r30, r24
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	38 96       	adiw	r30, 0x08	; 8
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e0 0f       	add	r30, r16
    111a:	f1 1f       	adc	r31, r17
    111c:	a0 83       	st	Z, r26
    111e:	b1 83       	std	Z+1, r27	; 0x01
    1120:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
    1122:	15 96       	adiw	r26, 0x05	; 5
    1124:	0d 90       	ld	r0, X+
    1126:	bc 91       	ld	r27, X
    1128:	a0 2d       	mov	r26, r0
    112a:	10 97       	sbiw	r26, 0x00	; 0
    112c:	81 f7       	brne	.-32     	; 0x110e <build_play_list+0xbe>
    112e:	72 c0       	rjmp	.+228    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1130:	f8 01       	movw	r30, r16
    1132:	eb 58       	subi	r30, 0x8B	; 139
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	a0 81       	ld	r26, Z
    1138:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    113a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    113c:	0e c0       	rjmp	.+28     	; 0x115a <build_play_list+0x10a>
                sequencer->play_list[play_list_index++] = current_note;
    113e:	e8 2f       	mov	r30, r24
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	38 96       	adiw	r30, 0x08	; 8
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e0 0f       	add	r30, r16
    114a:	f1 1f       	adc	r31, r17
    114c:	a0 83       	st	Z, r26
    114e:	b1 83       	std	Z+1, r27	; 0x01
    1150:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
    1152:	17 96       	adiw	r26, 0x07	; 7
    1154:	0d 90       	ld	r0, X+
    1156:	bc 91       	ld	r27, X
    1158:	a0 2d       	mov	r26, r0
    115a:	10 97       	sbiw	r26, 0x00	; 0
    115c:	81 f7       	brne	.-32     	; 0x113e <build_play_list+0xee>
    115e:	5a c0       	rjmp	.+180    	; 0x1214 <build_play_list+0x1c4>
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1160:	f8 01       	movw	r30, r16
    1162:	e9 58       	subi	r30, 0x89	; 137
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	a0 81       	ld	r26, Z
    1168:	b1 81       	ldd	r27, Z+1	; 0x01
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    116a:	80 e0       	ldi	r24, 0x00	; 0
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    116c:	0e c0       	rjmp	.+28     	; 0x118a <build_play_list+0x13a>
                sequencer->play_list[play_list_index++] = current_note;
    116e:	e8 2f       	mov	r30, r24
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	38 96       	adiw	r30, 0x08	; 8
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	e0 0f       	add	r30, r16
    117a:	f1 1f       	adc	r31, r17
    117c:	a0 83       	st	Z, r26
    117e:	b1 83       	std	Z+1, r27	; 0x01
    1180:	8f 5f       	subi	r24, 0xFF	; 255
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
    1182:	19 96       	adiw	r26, 0x09	; 9
    1184:	0d 90       	ld	r0, X+
    1186:	bc 91       	ld	r27, X
    1188:	a0 2d       	mov	r26, r0
    118a:	10 97       	sbiw	r26, 0x00	; 0
    118c:	81 f7       	brne	.-32     	; 0x116e <build_play_list+0x11e>
    118e:	42 c0       	rjmp	.+132    	; 0x1214 <build_play_list+0x1c4>
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
    1190:	81 93       	st	Z+, r24
                sequencer->play_list[play_list_index++] = current_note;
            break;

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	89 15       	cp	r24, r9
    1196:	e0 f3       	brcs	.-8      	; 0x1190 <build_play_list+0x140>
    1198:	67 01       	movw	r12, r14
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    119a:	89 2c       	mov	r8, r9
    119c:	55 24       	eor	r5, r5
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <build_play_list+0x170>
    11a0:	0e 94 51 18 	call	0x30a2	; 0x30a2 <rand>
				temp = random_order[i];
    11a4:	d6 01       	movw	r26, r12
    11a6:	2c 91       	ld	r18, X
        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
				j = rand() % note_list_size;
    11a8:	68 2d       	mov	r22, r8
    11aa:	75 2d       	mov	r23, r5
    11ac:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
				temp = random_order[i];
				random_order[i] = random_order[j];
    11b0:	f7 01       	movw	r30, r14
    11b2:	e8 0f       	add	r30, r24
    11b4:	f1 1d       	adc	r31, r1
    11b6:	80 81       	ld	r24, Z
    11b8:	d6 01       	movw	r26, r12
    11ba:	8d 93       	st	X+, r24
    11bc:	6d 01       	movw	r12, r26
				random_order[j] = temp;
    11be:	20 83       	st	Z, r18

        //random
        case 4:
			for (i = 0; i<note_list_size; i++)
			    random_order[i] = i;
			for (i = 0; i<note_list_size; i++){
    11c0:	8c 2d       	mov	r24, r12
    11c2:	8e 19       	sub	r24, r14
    11c4:	89 15       	cp	r24, r9
    11c6:	60 f3       	brcs	.-40     	; 0x11a0 <build_play_list+0x150>
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}

static void build_play_list(Sequencer* sequencer){
    11c8:	b8 01       	movw	r22, r16
    11ca:	60 5f       	subi	r22, 0xF0	; 240
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	c3 01       	movw	r24, r6
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	40 96       	adiw	r24, 0x10	; 16
    11d6:	80 0f       	add	r24, r16
    11d8:	91 1f       	adc	r25, r17
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
    11da:	98 01       	movw	r18, r16
    11dc:	2f 58       	subi	r18, 0x8F	; 143
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	13 c0       	rjmp	.+38     	; 0x1208 <build_play_list+0x1b8>
    11e2:	f9 01       	movw	r30, r18
    11e4:	a0 81       	ld	r26, Z
    11e6:	b1 81       	ldd	r27, Z+1	; 0x01
				for (j = 0; j < random_order[i]; j++)
    11e8:	f5 01       	movw	r30, r10
    11ea:	51 91       	ld	r21, Z+
    11ec:	5f 01       	movw	r10, r30
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <build_play_list+0x1ac>
				    current_note = current_note->next_note_by_pitch;
    11f2:	13 96       	adiw	r26, 0x03	; 3
    11f4:	0d 90       	ld	r0, X+
    11f6:	bc 91       	ld	r27, X
    11f8:	a0 2d       	mov	r26, r0
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
				current_note = note_list->head_pitch;
				for (j = 0; j < random_order[i]; j++)
    11fa:	4f 5f       	subi	r20, 0xFF	; 255
    11fc:	45 17       	cp	r20, r21
    11fe:	c8 f3       	brcs	.-14     	; 0x11f2 <build_play_list+0x1a2>
				    current_note = current_note->next_note_by_pitch;
				sequencer->play_list[play_list_index++] = current_note;
    1200:	fb 01       	movw	r30, r22
    1202:	a1 93       	st	Z+, r26
    1204:	b1 93       	st	Z+, r27
    1206:	bf 01       	movw	r22, r30
				j = rand() % note_list_size;
				temp = random_order[i];
				random_order[i] = random_order[j];
				random_order[j] = temp;
			}			
			for (i=0; i<note_list_size; i++){
    1208:	68 17       	cp	r22, r24
    120a:	79 07       	cpc	r23, r25
    120c:	51 f7       	brne	.-44     	; 0x11e2 <build_play_list+0x192>
    120e:	89 2d       	mov	r24, r9
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <build_play_list+0x1c4>
    //builds the play list according to pattern selection
    
    NoteList* note_list = &(sequencer->note_list);
    uint8_t pattern = sequencer->pattern;
    
    uint8_t play_list_index = 0;
    1212:	80 e0       	ldi	r24, 0x00	; 0
            }
            play_list_index = mirrored_length;
        }
    }
    //set play list note_max appropriately
    sequencer->note_max = play_list_index - 1;
    1214:	81 50       	subi	r24, 0x01	; 1
    1216:	d8 01       	movw	r26, r16
    1218:	16 96       	adiw	r26, 0x06	; 6
    121a:	8c 93       	st	X, r24
    121c:	16 97       	sbiw	r26, 0x06	; 6
    
    //check if the list is now shorter than the current note_index
//    while (sequencer->note_index > sequencer->note_max)
//        sequencer->note_index -= sequencer->note_max;
    
    sequencer->rebuild_play_list = 0;
    121e:	12 96       	adiw	r26, 0x02	; 2
    1220:	1c 92       	st	X, r1
    1222:	12 97       	sbiw	r26, 0x02	; 2
    
    return;
}
    1224:	2d be       	out	0x3d, r2	; 61
    1226:	3e be       	out	0x3e, r3	; 62
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	3f 90       	pop	r3
    1248:	2f 90       	pop	r2
    124a:	08 95       	ret

0000124c <initialize_sequencer>:
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <initialize_sequencer+0xa>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <initialize_sequencer+0xc>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8c 01       	movw	r16, r24
    uint8_t i;
    
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    125e:	e0 e0       	ldi	r30, 0x00	; 0
    1260:	f8 e0       	ldi	r31, 0x08	; 8
    1262:	80 91 01 08 	lds	r24, 0x0801
    1266:	8f 7d       	andi	r24, 0xDF	; 223
    1268:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    126a:	80 91 01 08 	lds	r24, 0x0801
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	81 83       	std	Z+1, r24	; 0x01
    
    //configure CCB and CCC as mid-level interrupts
    TCC0.INTCTRLB &= ~0x30;
    1272:	80 91 07 08 	lds	r24, 0x0807
    1276:	8f 7c       	andi	r24, 0xCF	; 207
    1278:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x20;
    127a:	80 91 07 08 	lds	r24, 0x0807
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB &= ~0x0C;
    1282:	80 91 07 08 	lds	r24, 0x0807
    1286:	83 7f       	andi	r24, 0xF3	; 243
    1288:	87 83       	std	Z+7, r24	; 0x07
    TCC0.INTCTRLB |= 0x08;
    128a:	80 91 07 08 	lds	r24, 0x0807
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	87 83       	std	Z+7, r24	; 0x07
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
    1292:	c8 01       	movw	r24, r16
    1294:	80 59       	subi	r24, 0x90	; 144
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <initialize_note_list>
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
}

//Reset all data in the sequencer
void initialize_sequencer(Sequencer* sequencer){  
    129c:	f8 01       	movw	r30, r16
    129e:	70 96       	adiw	r30, 0x10	; 16
    12a0:	80 e3       	ldi	r24, 0x30	; 48
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
        sequencer->play_list[i] = NULL;
    12a2:	11 92       	st	Z+, r1
    12a4:	11 92       	st	Z+, r1
    12a6:	81 50       	subi	r24, 0x01	; 1
    
	//initialize the note list
	initialize_note_list(&(sequencer->note_list));
	
    //empty the play list
    for (i = 0; i < MAX_PLAY_NOTES; i++)
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <initialize_sequencer+0x56>
        sequencer->play_list[i] = NULL;
    
    //reset all parameters and indeces
    sequencer->note_index = 0;
    12aa:	f8 01       	movw	r30, r16
    12ac:	13 82       	std	Z+3, r1	; 0x03
    sequencer->octave_index = 0;
    12ae:	15 82       	std	Z+5, r1	; 0x05
    sequencer->repeat_index = 0;
    12b0:	14 82       	std	Z+4, r1	; 0x04
    sequencer->note_max = 0;
    12b2:	16 82       	std	Z+6, r1	; 0x06
    sequencer->repeat_max = 0;
    12b4:	17 82       	std	Z+7, r1	; 0x07
    sequencer->octave_max = 0;
    12b6:	10 86       	std	Z+8, r1	; 0x08
    sequencer->start_time_increment = 0;
    12b8:	11 86       	std	Z+9, r1	; 0x09
    12ba:	12 86       	std	Z+10, r1	; 0x0a
    sequencer->stop_time_increment = 0;
    12bc:	13 86       	std	Z+11, r1	; 0x0b
    12be:	14 86       	std	Z+12, r1	; 0x0c
    sequencer->pattern = 0;
    12c0:	15 86       	std	Z+13, r1	; 0x0d
    sequencer->duration = 0;
    12c2:	16 86       	std	Z+14, r1	; 0x0e
    sequencer->division = 0;
    12c4:	17 86       	std	Z+15, r1	; 0x0f
    sequencer->play_status = 0;
    12c6:	11 82       	std	Z+1, r1	; 0x01
    
    //link the note list to the player and flag to rebuild the play list
    sequencer->rebuild_play_list = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	82 83       	std	Z+2, r24	; 0x02
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    12cc:	c8 01       	movw	r24, r16
    12ce:	0e 94 79 07 	call	0xef2	; 0xef2 <calculate_start_time_increment>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    12d2:	f8 01       	movw	r30, r16
    12d4:	66 85       	ldd	r22, Z+14	; 0x0e
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	21 85       	ldd	r18, Z+9	; 0x09
    12de:	32 85       	ldd	r19, Z+10	; 0x0a
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	7a 83       	std	Y+2, r23	; 0x02
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    12f0:	69 81       	ldd	r22, Y+1	; 0x01
    12f2:	7a 81       	ldd	r23, Y+2	; 0x02
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
    1304:	29 83       	std	Y+1, r18	; 0x01
    1306:	3a 83       	std	Y+2, r19	; 0x02
    1308:	4b 83       	std	Y+3, r20	; 0x03
    130a:	5c 83       	std	Y+4, r21	; 0x04
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	ab 81       	ldd	r26, Y+3	; 0x03
    1312:	bc 81       	ldd	r27, Y+4	; 0x04
    1314:	f8 01       	movw	r30, r16
    1316:	83 87       	std	Z+11, r24	; 0x0b
    1318:	94 87       	std	Z+12, r25	; 0x0c
    sequencer->rebuild_play_list = 1;
    
    //calculate the time increments
    calculate_start_time_increment(sequencer);
    calculate_stop_time_increment(sequencer);
}
    131a:	24 96       	adiw	r28, 0x04	; 4
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	08 95       	ret

0000132a <set_rebuild_play_list>:
    return;
}


void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
    132a:	fc 01       	movw	r30, r24
    132c:	62 83       	std	Z+2, r22	; 0x02
}
    132e:	08 95       	ret

00001330 <continue_sequencer>:
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1330:	af 92       	push	r10
    1332:	bf 92       	push	r11
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	61 97       	sbiw	r28, 0x11	; 17
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	8c 01       	movw	r16, r24
    1350:	d6 2e       	mov	r13, r22
	uint16_t final_pitch;
	uint16_t final_velocity;

    //disable noteon and noteoff interrupts
    TCC0.CTRLB &= ~0x20; 
    1352:	e0 e0       	ldi	r30, 0x00	; 0
    1354:	f8 e0       	ldi	r31, 0x08	; 8
    1356:	80 91 01 08 	lds	r24, 0x0801
    135a:	8f 7d       	andi	r24, 0xDF	; 223
    135c:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    135e:	80 91 01 08 	lds	r24, 0x0801
    1362:	8f 7b       	andi	r24, 0xBF	; 191
    1364:	81 83       	std	Z+1, r24	; 0x01
    
    //clear noteon and noteoff interrupt flags
    TCC0.INTFLAGS |= 0x20;
    1366:	80 91 0c 08 	lds	r24, 0x080C
    136a:	80 62       	ori	r24, 0x20	; 32
    136c:	84 87       	std	Z+12, r24	; 0x0c
    TCC0.INTFLAGS |= 0x40;
    136e:	80 91 0c 08 	lds	r24, 0x080C
    1372:	80 64       	ori	r24, 0x40	; 64
    1374:	84 87       	std	Z+12, r24	; 0x0c
    volatile uint32_t current_time;
    volatile uint32_t next_start_time;
    volatile uint32_t next_stop_time;
    
	//if there are no notes in the list, don't do anything
    if (sequencer->note_list.length == 0)
    1376:	f8 01       	movw	r30, r16
    1378:	e0 59       	subi	r30, 0x90	; 144
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	88 23       	and	r24, r24
    1380:	09 f4       	brne	.+2      	; 0x1384 <continue_sequencer+0x54>
    1382:	ac c1       	rjmp	.+856    	; 0x16dc <continue_sequencer+0x3ac>
        return;
    
    current_time = (uint32_t) TCC0.CNT;
    1384:	80 91 20 08 	lds	r24, 0x0820
    1388:	90 91 21 08 	lds	r25, 0x0821
    138c:	a0 e0       	ldi	r26, 0x00	; 0
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	ab 83       	std	Y+3, r26	; 0x03
    1396:	bc 83       	std	Y+4, r27	; 0x04
	
	
    
    
    //turn off the current note if it is still playing
    if (sequencer->play_status){
    1398:	d8 01       	movw	r26, r16
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	8c 91       	ld	r24, X
    139e:	11 97       	sbiw	r26, 0x01	; 1
    13a0:	88 23       	and	r24, r24
    13a2:	61 f1       	breq	.+88     	; 0x13fc <continue_sequencer+0xcc>
		//calculate the pitch and velocity to play
    	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    13a4:	13 96       	adiw	r26, 0x03	; 3
    13a6:	ec 91       	ld	r30, X
    13a8:	13 97       	sbiw	r26, 0x03	; 3
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	38 96       	adiw	r30, 0x08	; 8
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e0 0f       	add	r30, r16
    13b4:	f1 1f       	adc	r31, r17
    13b6:	01 90       	ld	r0, Z+
    13b8:	f0 81       	ld	r31, Z
    13ba:	e0 2d       	mov	r30, r0
    13bc:	15 96       	adiw	r26, 0x05	; 5
    13be:	9c 91       	ld	r25, X
    13c0:	15 97       	sbiw	r26, 0x05	; 5
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	98 9f       	mul	r25, r24
    13c6:	70 01       	movw	r14, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	80 81       	ld	r24, Z
    13cc:	e8 0e       	add	r14, r24
    13ce:	f1 1c       	adc	r15, r1
    	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    13d0:	21 81       	ldd	r18, Z+1	; 0x01
    	while (final_pitch > 255)
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <continue_sequencer+0xac>
	        final_pitch -= 12;
    13d4:	e4 ef       	ldi	r30, 0xF4	; 244
    13d6:	ff ef       	ldi	r31, 0xFF	; 255
    13d8:	ee 0e       	add	r14, r30
    13da:	ff 1e       	adc	r15, r31
    //turn off the current note if it is still playing
    if (sequencer->play_status){
		//calculate the pitch and velocity to play
    	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    	while (final_pitch > 255)
    13dc:	ff ef       	ldi	r31, 0xFF	; 255
    13de:	ef 16       	cp	r14, r31
    13e0:	f1 04       	cpc	r15, r1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <continue_sequencer+0xb6>
    13e4:	b8 f7       	brcc	.-18     	; 0x13d4 <continue_sequencer+0xa4>
	        final_pitch -= 12;
			
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    13e6:	29 8b       	std	Y+17, r18	; 0x11
    13e8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_midi_device>
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	4e 2d       	mov	r20, r14
    13f0:	29 89       	ldd	r18, Y+17	; 0x11
    13f2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <midi_send_noteoff>
        sequencer->play_status = 0;
    13f6:	d8 01       	movw	r26, r16
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	1c 92       	st	X, r1
    const uint8_t pattern_pot_sel= 4;
    const uint8_t pattern_pot_min = 0;
    const uint8_t pattern_pot_max = 4;
    
    //read the new values from the pots
    uint8_t octave_max_new = get_pot_value(octave_pot_sel, octave_pot_min, octave_pot_max);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	43 e0       	ldi	r20, 0x03	; 3
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    140a:	b8 2e       	mov	r11, r24
    uint8_t repeat_max_new = get_pot_value(repeat_pot_sel, repeat_pot_min, repeat_pot_max);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    141a:	c8 2e       	mov	r12, r24
    uint8_t division_new = get_pot_value(division_pot_sel,division_pot_min,division_pot_max);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	46 e0       	ldi	r20, 0x06	; 6
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    142a:	f8 2e       	mov	r15, r24
    uint8_t duration_new = get_pot_value(duration_pot_sel, duration_pot_min, duration_pot_max);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	6b e0       	ldi	r22, 0x0B	; 11
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	4f ef       	ldi	r20, 0xFF	; 255
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    143a:	e8 2e       	mov	r14, r24
    uint8_t pattern_new = get_pot_value(pattern_pot_sel, pattern_pot_min, pattern_pot_max);
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	44 e0       	ldi	r20, 0x04	; 4
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	0e 94 be 01 	call	0x37c	; 0x37c <get_pot_value>
    
    bool update_start_time_increment = 0;
    bool update_stop_time_increment = 0;
    
    //flag to calculate new interrupt times if necessary
    if (sequencer->repeat_max != repeat_max_new){
    144a:	f8 01       	movw	r30, r16
    144c:	27 81       	ldd	r18, Z+7	; 0x07
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
    144e:	97 85       	ldd	r25, Z+15	; 0x0f
    1450:	9f 15       	cp	r25, r15
    1452:	29 f4       	brne	.+10     	; 0x145e <continue_sequencer+0x12e>
        calculate_start_time_increment(sequencer);
    if (update_stop_time_increment)
        calculate_stop_time_increment(sequencer);
}

void continue_sequencer(Sequencer* sequencer, bool restart){
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	2c 15       	cp	r18, r12
    1458:	19 f4       	brne	.+6      	; 0x1460 <continue_sequencer+0x130>
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <continue_sequencer+0x130>
        update_start_time_increment = 1;
        update_stop_time_increment = 1;
    }
    
    if (sequencer->division != division_new){
        update_start_time_increment = 1;
    145e:	91 e0       	ldi	r25, 0x01	; 1
        update_stop_time_increment = 1;
    }
    
    if (sequencer->duration != duration_new){
    1460:	d8 01       	movw	r26, r16
    1462:	1e 96       	adiw	r26, 0x0e	; 14
    1464:	2c 91       	ld	r18, X
    1466:	1e 97       	sbiw	r26, 0x0e	; 14
    1468:	2e 15       	cp	r18, r14
    146a:	11 f4       	brne	.+4      	; 0x1470 <continue_sequencer+0x140>
    146c:	a9 2e       	mov	r10, r25
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <continue_sequencer+0x144>
        update_stop_time_increment = 1;
    1470:	aa 24       	eor	r10, r10
    1472:	a3 94       	inc	r10
    }
    
    if (sequencer->pattern != pattern_new){
    1474:	f8 01       	movw	r30, r16
    1476:	25 85       	ldd	r18, Z+13	; 0x0d
    1478:	28 17       	cp	r18, r24
    147a:	11 f0       	breq	.+4      	; 0x1480 <continue_sequencer+0x150>
        sequencer->rebuild_play_list = 1;
    147c:	21 e0       	ldi	r18, 0x01	; 1
    147e:	22 83       	std	Z+2, r18	; 0x02
    }
    
    //load the new parameters into the arpeggiator
    sequencer->octave_max = octave_max_new;
    1480:	d8 01       	movw	r26, r16
    1482:	18 96       	adiw	r26, 0x08	; 8
    1484:	bc 92       	st	X, r11
    1486:	18 97       	sbiw	r26, 0x08	; 8
    sequencer->repeat_max = repeat_max_new;
    1488:	17 96       	adiw	r26, 0x07	; 7
    148a:	cc 92       	st	X, r12
    148c:	17 97       	sbiw	r26, 0x07	; 7
    sequencer->division = division_new;
    148e:	1f 96       	adiw	r26, 0x0f	; 15
    1490:	fc 92       	st	X, r15
    1492:	1f 97       	sbiw	r26, 0x0f	; 15
    sequencer->duration = duration_new;
    1494:	1e 96       	adiw	r26, 0x0e	; 14
    1496:	ec 92       	st	X, r14
    1498:	1e 97       	sbiw	r26, 0x0e	; 14
    sequencer->pattern = pattern_new;
    149a:	1d 96       	adiw	r26, 0x0d	; 13
    149c:	8c 93       	st	X, r24
    149e:	1d 97       	sbiw	r26, 0x0d	; 13
    
    if (update_start_time_increment)
    14a0:	99 23       	and	r25, r25
    14a2:	19 f0       	breq	.+6      	; 0x14aa <continue_sequencer+0x17a>
        calculate_start_time_increment(sequencer);
    14a4:	c8 01       	movw	r24, r16
    14a6:	0e 94 79 07 	call	0xef2	; 0xef2 <calculate_start_time_increment>
    if (update_stop_time_increment)
    14aa:	aa 20       	and	r10, r10
    14ac:	21 f1       	breq	.+72     	; 0x14f6 <continue_sequencer+0x1c6>
    //load the start time increment into the sequences
    sequencer->start_time_increment = (uint16_t) new_start_time_increment;
}

static void calculate_stop_time_increment(Sequencer* sequencer){
    volatile uint32_t new_stop_time_increment = (uint32_t) (sequencer->start_time_increment) * sequencer->duration;
    14ae:	f8 01       	movw	r30, r16
    14b0:	66 85       	ldd	r22, Z+14	; 0x0e
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	21 85       	ldd	r18, Z+9	; 0x09
    14ba:	32 85       	ldd	r19, Z+10	; 0x0a
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    14c4:	6d 87       	std	Y+13, r22	; 0x0d
    14c6:	7e 87       	std	Y+14, r23	; 0x0e
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
    14ca:	98 8b       	std	Y+16, r25	; 0x10
    new_stop_time_increment = new_stop_time_increment / MAX_NOTE_DURATION;
    14cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    14ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
    14e0:	2d 87       	std	Y+13, r18	; 0x0d
    14e2:	3e 87       	std	Y+14, r19	; 0x0e
    14e4:	4f 87       	std	Y+15, r20	; 0x0f
    14e6:	58 8b       	std	Y+16, r21	; 0x10
    
    sequencer->stop_time_increment = (uint16_t) new_stop_time_increment;
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	af 85       	ldd	r26, Y+15	; 0x0f
    14ee:	b8 89       	ldd	r27, Y+16	; 0x10
    14f0:	f8 01       	movw	r30, r16
    14f2:	83 87       	std	Z+11, r24	; 0x0b
    14f4:	94 87       	std	Z+12, r25	; 0x0c
        
    //load the new hardware settings from the user
    set_sequencer_parameters(sequencer);
    
    //compute next compare values
    next_start_time = current_time + sequencer->start_time_increment;
    14f6:	29 81       	ldd	r18, Y+1	; 0x01
    14f8:	3a 81       	ldd	r19, Y+2	; 0x02
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	d8 01       	movw	r26, r16
    1500:	19 96       	adiw	r26, 0x09	; 9
    1502:	8d 91       	ld	r24, X+
    1504:	9c 91       	ld	r25, X
    1506:	1a 97       	sbiw	r26, 0x0a	; 10
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	82 0f       	add	r24, r18
    150e:	93 1f       	adc	r25, r19
    1510:	a4 1f       	adc	r26, r20
    1512:	b5 1f       	adc	r27, r21
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	af 83       	std	Y+7, r26	; 0x07
    151a:	b8 87       	std	Y+8, r27	; 0x08
    next_stop_time = current_time + sequencer->stop_time_increment;
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	4b 81       	ldd	r20, Y+3	; 0x03
    1522:	5c 81       	ldd	r21, Y+4	; 0x04
    1524:	f8 01       	movw	r30, r16
    1526:	83 85       	ldd	r24, Z+11	; 0x0b
    1528:	94 85       	ldd	r25, Z+12	; 0x0c
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	a4 1f       	adc	r26, r20
    1534:	b5 1f       	adc	r27, r21
    1536:	89 87       	std	Y+9, r24	; 0x09
    1538:	9a 87       	std	Y+10, r25	; 0x0a
    153a:	ab 87       	std	Y+11, r26	; 0x0b
    153c:	bc 87       	std	Y+12, r27	; 0x0c
    
    //check for overflow
    if (next_start_time > TCC0.CCA)
    153e:	2d 81       	ldd	r18, Y+5	; 0x05
    1540:	3e 81       	ldd	r19, Y+6	; 0x06
    1542:	4f 81       	ldd	r20, Y+7	; 0x07
    1544:	58 85       	ldd	r21, Y+8	; 0x08
    1546:	80 91 28 08 	lds	r24, 0x0828
    154a:	90 91 29 08 	lds	r25, 0x0829
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	a4 07       	cpc	r26, r20
    1558:	b5 07       	cpc	r27, r21
    155a:	90 f4       	brcc	.+36     	; 0x1580 <continue_sequencer+0x250>
        next_start_time = next_start_time - TCC0.CCA;
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	af 81       	ldd	r26, Y+7	; 0x07
    1562:	b8 85       	ldd	r27, Y+8	; 0x08
    1564:	20 91 28 08 	lds	r18, 0x0828
    1568:	30 91 29 08 	lds	r19, 0x0829
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	a4 0b       	sbc	r26, r20
    1576:	b5 0b       	sbc	r27, r21
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	af 83       	std	Y+7, r26	; 0x07
    157e:	b8 87       	std	Y+8, r27	; 0x08
    if (next_stop_time > TCC0.CCA)
    1580:	29 85       	ldd	r18, Y+9	; 0x09
    1582:	3a 85       	ldd	r19, Y+10	; 0x0a
    1584:	4b 85       	ldd	r20, Y+11	; 0x0b
    1586:	5c 85       	ldd	r21, Y+12	; 0x0c
    1588:	80 91 28 08 	lds	r24, 0x0828
    158c:	90 91 29 08 	lds	r25, 0x0829
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	82 17       	cp	r24, r18
    1596:	93 07       	cpc	r25, r19
    1598:	a4 07       	cpc	r26, r20
    159a:	b5 07       	cpc	r27, r21
    159c:	90 f4       	brcc	.+36     	; 0x15c2 <continue_sequencer+0x292>
        next_stop_time = next_stop_time - TCC0.CCA;
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    15a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    15a6:	20 91 28 08 	lds	r18, 0x0828
    15aa:	30 91 29 08 	lds	r19, 0x0829
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	a4 0b       	sbc	r26, r20
    15b8:	b5 0b       	sbc	r27, r21
    15ba:	89 87       	std	Y+9, r24	; 0x09
    15bc:	9a 87       	std	Y+10, r25	; 0x0a
    15be:	ab 87       	std	Y+11, r26	; 0x0b
    15c0:	bc 87       	std	Y+12, r27	; 0x0c
    
    //assign values to compare registers
    TCC0.CCB = (uint16_t) next_start_time;
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	af 81       	ldd	r26, Y+7	; 0x07
    15c8:	b8 85       	ldd	r27, Y+8	; 0x08
    15ca:	e0 e0       	ldi	r30, 0x00	; 0
    15cc:	f8 e0       	ldi	r31, 0x08	; 8
    15ce:	82 a7       	std	Z+42, r24	; 0x2a
    15d0:	93 a7       	std	Z+43, r25	; 0x2b
    TCC0.CCC = (uint16_t) next_stop_time;
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    15d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    15da:	84 a7       	std	Z+44, r24	; 0x2c
    15dc:	95 a7       	std	Z+45, r25	; 0x2d
    
    //rebuild the pattern if necessary
    if (sequencer->rebuild_play_list)
    15de:	d8 01       	movw	r26, r16
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	8c 91       	ld	r24, X
    15e4:	12 97       	sbiw	r26, 0x02	; 2
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <continue_sequencer+0x2c0>
        build_play_list(sequencer);
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 28 08 	call	0x1050	; 0x1050 <build_play_list>
        
    //if this is a continuation, increment the play list indeces
    //otherwise, reset them all
    if (!restart)
    15f0:	dd 20       	and	r13, r13
    15f2:	59 f5       	brne	.+86     	; 0x164a <continue_sequencer+0x31a>
    sequencer->repeat_index = 0;
}

static void increment_play_list_indeces(Sequencer* sequencer){
    //increment repeat count
    sequencer->repeat_index += 1;
    15f4:	f8 01       	movw	r30, r16
    15f6:	84 81       	ldd	r24, Z+4	; 0x04
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	84 83       	std	Z+4, r24	; 0x04
    
    //if note has repeated enough times, reset the repeat index and increment the note index to get the next note to play
    if (sequencer->repeat_index > sequencer->repeat_max){
    15fc:	97 81       	ldd	r25, Z+7	; 0x07
    15fe:	98 17       	cp	r25, r24
    1600:	20 f4       	brcc	.+8      	; 0x160a <continue_sequencer+0x2da>
        sequencer->repeat_index = 0;
    1602:	14 82       	std	Z+4, r1	; 0x04
        sequencer->note_index += 1;
    1604:	83 81       	ldd	r24, Z+3	; 0x03
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	83 83       	std	Z+3, r24	; 0x03
    }
    
    //if the play list is at the end, reset the note index and increment the octave index
    if (sequencer->note_index > sequencer->note_max){
    160a:	d8 01       	movw	r26, r16
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	9c 91       	ld	r25, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	16 96       	adiw	r26, 0x06	; 6
    1614:	8c 91       	ld	r24, X
    1616:	16 97       	sbiw	r26, 0x06	; 6
    1618:	89 17       	cp	r24, r25
    161a:	50 f4       	brcc	.+20     	; 0x1630 <continue_sequencer+0x300>
        sequencer->note_index = 0;
    161c:	13 96       	adiw	r26, 0x03	; 3
    161e:	1c 92       	st	X, r1
    1620:	13 97       	sbiw	r26, 0x03	; 3
        sequencer->octave_index += 1;		
    1622:	15 96       	adiw	r26, 0x05	; 5
    1624:	8c 91       	ld	r24, X
    1626:	15 97       	sbiw	r26, 0x05	; 5
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	15 96       	adiw	r26, 0x05	; 5
    162c:	8c 93       	st	X, r24
    162e:	15 97       	sbiw	r26, 0x05	; 5
    }
    
    //if the last octave is reached, reset the octave index
    if (sequencer->octave_index > sequencer->octave_max){
    1630:	f8 01       	movw	r30, r16
    1632:	95 81       	ldd	r25, Z+5	; 0x05
    1634:	80 85       	ldd	r24, Z+8	; 0x08
    1636:	89 17       	cp	r24, r25
    1638:	88 f4       	brcc	.+34     	; 0x165c <continue_sequencer+0x32c>
        sequencer->octave_index = 0;
    163a:	15 82       	std	Z+5, r1	; 0x05
		
		//build a new random playlist if necessary
		if (sequencer->pattern == 4)
    163c:	85 85       	ldd	r24, Z+13	; 0x0d
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	69 f4       	brne	.+26     	; 0x165c <continue_sequencer+0x32c>
		    build_play_list(sequencer);
    1642:	c8 01       	movw	r24, r16
    1644:	0e 94 28 08 	call	0x1050	; 0x1050 <build_play_list>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <continue_sequencer+0x32c>
void set_rebuild_play_list(Sequencer* sequencer, bool new_flag){
    sequencer->rebuild_play_list = new_flag;
}

static void reset_play_list_indeces(Sequencer* sequencer){
    sequencer->octave_index = 0;
    164a:	d8 01       	movw	r26, r16
    164c:	15 96       	adiw	r26, 0x05	; 5
    164e:	1c 92       	st	X, r1
    1650:	15 97       	sbiw	r26, 0x05	; 5
    sequencer->note_index = 0;
    1652:	13 96       	adiw	r26, 0x03	; 3
    1654:	1c 92       	st	X, r1
    1656:	13 97       	sbiw	r26, 0x03	; 3
    sequencer->repeat_index = 0;
    1658:	14 96       	adiw	r26, 0x04	; 4
    165a:	1c 92       	st	X, r1
    else{
        reset_play_list_indeces(sequencer);
    }
    
	//calculate the pitch and velocity to play
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    165c:	d8 01       	movw	r26, r16
    165e:	13 96       	adiw	r26, 0x03	; 3
    1660:	ec 91       	ld	r30, X
    1662:	13 97       	sbiw	r26, 0x03	; 3
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	38 96       	adiw	r30, 0x08	; 8
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e0 0f       	add	r30, r16
    166e:	f1 1f       	adc	r31, r17
    1670:	01 90       	ld	r0, Z+
    1672:	f0 81       	ld	r31, Z
    1674:	e0 2d       	mov	r30, r0
    1676:	15 96       	adiw	r26, 0x05	; 5
    1678:	9c 91       	ld	r25, X
    167a:	15 97       	sbiw	r26, 0x05	; 5
    167c:	8c e0       	ldi	r24, 0x0C	; 12
    167e:	98 9f       	mul	r25, r24
    1680:	70 01       	movw	r14, r0
    1682:	11 24       	eor	r1, r1
    1684:	80 81       	ld	r24, Z
    1686:	e8 0e       	add	r14, r24
    1688:	f1 1c       	adc	r15, r1
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    168a:	21 81       	ldd	r18, Z+1	; 0x01
	while (final_pitch > 255)
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <continue_sequencer+0x366>
	    final_pitch -= 12;
    168e:	e4 ef       	ldi	r30, 0xF4	; 244
    1690:	ff ef       	ldi	r31, 0xFF	; 255
    1692:	ee 0e       	add	r14, r30
    1694:	ff 1e       	adc	r15, r31
    }
    
	//calculate the pitch and velocity to play
	final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	while (final_pitch > 255)
    1696:	ff ef       	ldi	r31, 0xFF	; 255
    1698:	ef 16       	cp	r14, r31
    169a:	f1 04       	cpc	r15, r1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <continue_sequencer+0x370>
    169e:	b8 f7       	brcc	.-18     	; 0x168e <continue_sequencer+0x35e>
	    final_pitch -= 12;
	
    //send midi message to start the note
    midi_send_noteon(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    16a0:	29 8b       	std	Y+17, r18	; 0x11
    16a2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_midi_device>
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	4e 2d       	mov	r20, r14
    16aa:	29 89       	ldd	r18, Y+17	; 0x11
    16ac:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <midi_send_noteon>
    
    set_LEDs_on(0,0,0,1);
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	21 e0       	ldi	r18, 0x01	; 1
    16b8:	0e 94 be 02 	call	0x57c	; 0x57c <set_LEDs_on>
    
    //set play flag
    sequencer->play_status = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	d8 01       	movw	r26, r16
    16c0:	11 96       	adiw	r26, 0x01	; 1
    16c2:	8c 93       	st	X, r24
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    
    //set run flag
    sequencer->run_status = 1;
    16c6:	8c 93       	st	X, r24
    
    //enable note on and note off interrupts
    TCC0.CTRLB |= 0x20; 
    16c8:	e0 e0       	ldi	r30, 0x00	; 0
    16ca:	f8 e0       	ldi	r31, 0x08	; 8
    16cc:	80 91 01 08 	lds	r24, 0x0801
    16d0:	80 62       	ori	r24, 0x20	; 32
    16d2:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB |= 0x40;
    16d4:	80 91 01 08 	lds	r24, 0x0801
    16d8:	80 64       	ori	r24, 0x40	; 64
    16da:	81 83       	std	Z+1, r24	; 0x01
}
    16dc:	61 96       	adiw	r28, 0x11	; 17
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	08 95       	ret

000016f8 <stop_sequencer>:

void stop_sequencer(Sequencer* sequencer, bool full_stop){
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	0f 92       	push	r0
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	6c 01       	movw	r12, r24
    170e:	f6 2e       	mov	r15, r22
	uint16_t final_pitch;
	uint16_t final_velocity;
	
    //disable CCB (note on) and CCC (note off) interrupts
    TCC0.CTRLB &= ~0x20; 
    1710:	e0 e0       	ldi	r30, 0x00	; 0
    1712:	f8 e0       	ldi	r31, 0x08	; 8
    1714:	80 91 01 08 	lds	r24, 0x0801
    1718:	8f 7d       	andi	r24, 0xDF	; 223
    171a:	81 83       	std	Z+1, r24	; 0x01
    TCC0.CTRLB &= ~0x40;
    171c:	80 91 01 08 	lds	r24, 0x0801
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	81 83       	std	Z+1, r24	; 0x01
    
    //clear note off interrupt flag
    TCC0.INTFLAGS |= 0x40;
    1724:	80 91 0c 08 	lds	r24, 0x080C
    1728:	80 64       	ori	r24, 0x40	; 64
    172a:	84 87       	std	Z+12, r24	; 0x0c
    
    //stop the current note if it's playing
    if (sequencer->play_status){
    172c:	d6 01       	movw	r26, r12
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	8c 91       	ld	r24, X
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	88 23       	and	r24, r24
    1736:	71 f1       	breq	.+92     	; 0x1794 <stop_sequencer+0x9c>
		//calculate the pitch and velocity to play
	    final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
    1738:	13 96       	adiw	r26, 0x03	; 3
    173a:	ec 91       	ld	r30, X
    173c:	13 97       	sbiw	r26, 0x03	; 3
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	38 96       	adiw	r30, 0x08	; 8
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	ec 0d       	add	r30, r12
    1748:	fd 1d       	adc	r31, r13
    174a:	01 90       	ld	r0, Z+
    174c:	f0 81       	ld	r31, Z
    174e:	e0 2d       	mov	r30, r0
    1750:	15 96       	adiw	r26, 0x05	; 5
    1752:	0c 91       	ld	r16, X
    1754:	15 97       	sbiw	r26, 0x05	; 5
    1756:	8c e0       	ldi	r24, 0x0C	; 12
    1758:	08 9f       	mul	r16, r24
    175a:	80 01       	movw	r16, r0
    175c:	11 24       	eor	r1, r1
    175e:	80 81       	ld	r24, Z
    1760:	08 0f       	add	r16, r24
    1762:	11 1d       	adc	r17, r1
	    final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
    1764:	21 81       	ldd	r18, Z+1	; 0x01
	    while (final_pitch > 255)
    1766:	02 c0       	rjmp	.+4      	; 0x176c <stop_sequencer+0x74>
	        final_pitch -= 12;
    1768:	0c 50       	subi	r16, 0x0C	; 12
    176a:	10 40       	sbci	r17, 0x00	; 0
    //stop the current note if it's playing
    if (sequencer->play_status){
		//calculate the pitch and velocity to play
	    final_pitch = sequencer->play_list[sequencer->note_index]->pitch + MIDI_OCTAVE*(sequencer->octave_index);
	    final_velocity = sequencer->play_list[sequencer->note_index]->velocity;
	    while (final_pitch > 255)
    176c:	0f 3f       	cpi	r16, 0xFF	; 255
    176e:	11 05       	cpc	r17, r1
    1770:	09 f0       	breq	.+2      	; 0x1774 <stop_sequencer+0x7c>
    1772:	d0 f7       	brcc	.-12     	; 0x1768 <stop_sequencer+0x70>
	        final_pitch -= 12;
		
        midi_send_noteoff(get_midi_device(),MIDI_CHAN,final_pitch,final_velocity);
    1774:	29 83       	std	Y+1, r18	; 0x01
    1776:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_midi_device>
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	40 2f       	mov	r20, r16
    177e:	29 81       	ldd	r18, Y+1	; 0x01
    1780:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <midi_send_noteoff>
		set_LEDs_off(0,0,0,1);
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	21 e0       	ldi	r18, 0x01	; 1
    178c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_LEDs_off>
        sequencer->play_status = 0;
    1790:	f6 01       	movw	r30, r12
    1792:	11 82       	std	Z+1, r1	; 0x01
    }
    
    //if this is a full stop clear the run status of the sequencer
    //if this is not a full stop, reenable the note on interrupt
    if (full_stop)
    1794:	ff 20       	and	r15, r15
    1796:	19 f0       	breq	.+6      	; 0x179e <stop_sequencer+0xa6>
        sequencer->run_status = 0;
    1798:	d6 01       	movw	r26, r12
    179a:	1c 92       	st	X, r1
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <stop_sequencer+0xb2>
    else    
        TCC0.CTRLB |= 0x20;
    179e:	80 91 01 08 	lds	r24, 0x0801
    17a2:	80 62       	ori	r24, 0x20	; 32
    17a4:	e0 e0       	ldi	r30, 0x00	; 0
    17a6:	f8 e0       	ldi	r31, 0x08	; 8
    17a8:	81 83       	std	Z+1, r24	; 0x01
    
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <add_note_to_arpeggiator>:

void add_note_to_arpeggiator(Sequencer* sequencer, uint8_t pitch, uint8_t velocity){
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ec 01       	movw	r28, r24
    //try to add the note to the note list.
    //if successful, flag to rebuild the play list
    //if it's the first note, restart the sequencer
    
    if (insert_note(&(sequencer->note_list), pitch, velocity)){
    17c6:	8c 01       	movw	r16, r24
    17c8:	00 59       	subi	r16, 0x90	; 144
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	c8 01       	movw	r24, r16
    17ce:	0e 94 7f 06 	call	0xcfe	; 0xcfe <insert_note>
    17d2:	88 23       	and	r24, r24
    17d4:	51 f0       	breq	.+20     	; 0x17ea <add_note_to_arpeggiator+0x2e>
		sequencer->rebuild_play_list = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	8a 83       	std	Y+2, r24	; 0x02
        
		if (sequencer->note_list.length == 1)
    17da:	f8 01       	movw	r30, r16
    17dc:	80 81       	ld	r24, Z
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	21 f4       	brne	.+8      	; 0x17ea <add_note_to_arpeggiator+0x2e>
            continue_sequencer(sequencer, 1);
    17e2:	ce 01       	movw	r24, r28
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
    }
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	08 95       	ret

000017f4 <remove_note_from_arpeggiator>:

void remove_note_from_arpeggiator(Sequencer* sequencer, uint8_t pitch){
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
    1800:	f6 2e       	mov	r15, r22
    //try to remove the note from the list
    //if successful, set the rebuild flag
    //if the note list is now empty, fully stop the sequencer
	
	//if note is playing, stop it
	if (sequencer->play_list[sequencer->note_index]->pitch == pitch)
    1802:	eb 81       	ldd	r30, Y+3	; 0x03
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	38 96       	adiw	r30, 0x08	; 8
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	01 90       	ld	r0, Z+
    1812:	f0 81       	ld	r31, Z
    1814:	e0 2d       	mov	r30, r0
    1816:	80 81       	ld	r24, Z
    1818:	86 17       	cp	r24, r22
    181a:	39 f4       	brne	.+14     	; 0x182a <remove_note_from_arpeggiator+0x36>
	    midi_send_noteoff(get_midi_device(), MIDI_CHAN, pitch, 0);
    181c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_midi_device>
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	4f 2d       	mov	r20, r15
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <midi_send_noteoff>
		
    if (remove_note_by_pitch(&(sequencer->note_list), pitch)){
    182a:	8e 01       	movw	r16, r28
    182c:	00 59       	subi	r16, 0x90	; 144
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	c8 01       	movw	r24, r16
    1832:	6f 2d       	mov	r22, r15
    1834:	0e 94 0e 06 	call	0xc1c	; 0xc1c <remove_note_by_pitch>
    1838:	88 23       	and	r24, r24
    183a:	51 f0       	breq	.+20     	; 0x1850 <remove_note_from_arpeggiator+0x5c>
        sequencer->rebuild_play_list = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	8a 83       	std	Y+2, r24	; 0x02
        
        if (sequencer->note_list.length == 0)
    1840:	f8 01       	movw	r30, r16
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	21 f4       	brne	.+8      	; 0x1850 <remove_note_from_arpeggiator+0x5c>
            stop_sequencer(sequencer, 1);
    1848:	ce 01       	movw	r24, r28
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <stop_sequencer>
    }	
	
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	08 95       	ret

0000185c <adjust_sequencer_to_bpm>:

void adjust_sequencer_to_bpm(Sequencer* sequencer){
    //if the sequencer is running while the bpm changes, restart the sequencer
    if (sequencer->run_status)
    185c:	fc 01       	movw	r30, r24
    185e:	20 81       	ld	r18, Z
    1860:	22 23       	and	r18, r18
    1862:	19 f0       	breq	.+6      	; 0x186a <adjust_sequencer_to_bpm+0xe>
        continue_sequencer(sequencer, 1);
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	0e 94 98 09 	call	0x1330	; 0x1330 <continue_sequencer>
    186a:	08 95       	ret

0000186c <serial_midi_send>:

MidiDevice* get_midi_device() {
   return stored_midi_device;
}

void serial_midi_send(MidiDevice* midi_device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    186c:	0f 93       	push	r16
   //we always send the first byte
    while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    186e:	80 91 b1 09 	lds	r24, 0x09B1
    1872:	85 ff       	sbrs	r24, 5
    1874:	fc cf       	rjmp	.-8      	; 0x186e <serial_midi_send+0x2>
    USARTD1.DATA = inByte0;
    1876:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    187a:	62 30       	cpi	r22, 0x02	; 2
    187c:	70 f0       	brcs	.+28     	; 0x189a <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    187e:	80 91 b1 09 	lds	r24, 0x09B1
    1882:	85 ff       	sbrs	r24, 5
    1884:	fc cf       	rjmp	.-8      	; 0x187e <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    1886:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    188a:	63 30       	cpi	r22, 0x03	; 3
    188c:	31 f4       	brne	.+12     	; 0x189a <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    188e:	80 91 b1 09 	lds	r24, 0x09B1
    1892:	85 ff       	sbrs	r24, 5
    1894:	fc cf       	rjmp	.-8      	; 0x188e <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    1896:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <noteoff_to_arpeggiator>:
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
}

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
    189e:	80 91 6c 23 	lds	r24, 0x236C
    18a2:	90 91 6d 23 	lds	r25, 0x236D
    18a6:	64 2f       	mov	r22, r20
    18a8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <remove_note_from_arpeggiator>
}
    18ac:	08 95       	ret

000018ae <noteon_to_arpeggiator>:
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
      USARTD1.DATA = inByte2;
   }
}

void noteon_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    18ae:	64 2f       	mov	r22, r20
    18b0:	80 91 6c 23 	lds	r24, 0x236C
    18b4:	90 91 6d 23 	lds	r25, 0x236D
	if (inByte2 == 0)
    18b8:	22 23       	and	r18, r18
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <noteon_to_arpeggiator+0x14>
	    remove_note_from_arpeggiator(stored_sequencer, inByte1);
    18bc:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <remove_note_from_arpeggiator>
    18c0:	08 95       	ret
	else
        add_note_to_arpeggiator(stored_sequencer, inByte1, inByte2);
    18c2:	42 2f       	mov	r20, r18
    18c4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <add_note_to_arpeggiator>
    18c8:	08 95       	ret

000018ca <get_midi_device>:
static Sequencer* stored_sequencer;
static MidiDevice* stored_midi_device;

MidiDevice* get_midi_device() {
   return stored_midi_device;
}
    18ca:	80 91 6e 23 	lds	r24, 0x236E
    18ce:	90 91 6f 23 	lds	r25, 0x236F
    18d2:	08 95       	ret

000018d4 <initialize_serial_midi>:

void noteoff_to_arpeggiator(MidiDevice * midi_device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
	remove_note_from_arpeggiator(stored_sequencer, inByte1);
}

void initialize_serial_midi(MidiDevice* midi_device, Sequencer* sequencer){
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	7b 01       	movw	r14, r22
   //set up the device
   midi_device_init(midi_device);
    18e4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <midi_device_init>
   
   midi_device_set_send_func(midi_device, serial_midi_send);
    18e8:	06 e3       	ldi	r16, 0x36	; 54
    18ea:	1c e0       	ldi	r17, 0x0C	; 12
    18ec:	ce 01       	movw	r24, r28
    18ee:	b8 01       	movw	r22, r16
    18f0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <midi_device_set_send_func>
   midi_register_noteon_callback(midi_device, noteon_to_arpeggiator);
    18f4:	ce 01       	movw	r24, r28
    18f6:	67 e5       	ldi	r22, 0x57	; 87
    18f8:	7c e0       	ldi	r23, 0x0C	; 12
    18fa:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <midi_register_noteon_callback>
   midi_register_noteoff_callback(midi_device, noteoff_to_arpeggiator);
    18fe:	ce 01       	movw	r24, r28
    1900:	6f e4       	ldi	r22, 0x4F	; 79
    1902:	7c e0       	ldi	r23, 0x0C	; 12
    1904:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <midi_register_noteoff_callback>
   
   //all midi messages that are not expected will be sent through to midi out
   midi_register_fallthrough_callback(midi_device, serial_midi_send);
    1908:	ce 01       	movw	r24, r28
    190a:	b8 01       	movw	r22, r16
    190c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <midi_register_fallthrough_callback>
   
   //store the device and sequencer pointers
   stored_sequencer = sequencer;
    1910:	e0 92 6c 23 	sts	0x236C, r14
    1914:	f0 92 6d 23 	sts	0x236D, r15
   stored_midi_device = midi_device;
    1918:	c0 93 6e 23 	sts	0x236E, r28
    191c:	d0 93 6f 23 	sts	0x236F, r29
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	08 95       	ret

0000192e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    192e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1930:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1932:	63 83       	std	Z+3, r22	; 0x03
    1934:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    1936:	11 82       	std	Z+1, r1	; 0x01
    1938:	10 82       	st	Z, r1
}
    193a:	08 95       	ret

0000193c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24
    1946:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1948:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <store_and_clear_interrupt>
    194c:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    194e:	29 81       	ldd	r18, Y+1	; 0x01
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	c9 01       	movw	r24, r18
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	6a 81       	ldd	r22, Y+2	; 0x02
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    195e:	48 81       	ld	r20, Y
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	84 17       	cp	r24, r20
    1964:	95 07       	cpc	r25, r21
    1966:	29 f4       	brne	.+10     	; 0x1972 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    1968:	80 2f       	mov	r24, r16
    196a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <restore_interrupt_setting>
      return false;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    1972:	eb 81       	ldd	r30, Y+3	; 0x03
    1974:	fc 81       	ldd	r31, Y+4	; 0x04
    1976:	e2 0f       	add	r30, r18
    1978:	f3 1f       	adc	r31, r19
    197a:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    197c:	29 81       	ldd	r18, Y+1	; 0x01
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	2f 5f       	subi	r18, 0xFF	; 255
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	6a 81       	ldd	r22, Y+2	; 0x02
    1986:	c9 01       	movw	r24, r18
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    198e:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1990:	80 2f       	mov	r24, r16
    1992:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <restore_interrupt_setting>
      return true;
    1996:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    19aa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    19ae:	29 81       	ldd	r18, Y+1	; 0x01
    19b0:	98 81       	ld	r25, Y
    19b2:	29 17       	cp	r18, r25
    19b4:	10 f0       	brcs	.+4      	; 0x19ba <bytequeue_length+0x18>
      len = queue->end - queue->start;
    19b6:	12 2f       	mov	r17, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    19ba:	1a 81       	ldd	r17, Y+2	; 0x02
    19bc:	12 0f       	add	r17, r18
    19be:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    19c0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <restore_interrupt_setting>
   return len;
}
    19c4:	81 2f       	mov	r24, r17
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	08 95       	ret

000019ce <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    19ce:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    19d0:	80 81       	ld	r24, Z
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	86 0f       	add	r24, r22
    19d6:	91 1d       	adc	r25, r1
    19d8:	62 81       	ldd	r22, Z+2	; 0x02
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    19e0:	03 80       	ldd	r0, Z+3	; 0x03
    19e2:	f4 81       	ldd	r31, Z+4	; 0x04
    19e4:	e0 2d       	mov	r30, r0
    19e6:	e8 0f       	add	r30, r24
    19e8:	f9 1f       	adc	r31, r25
}
    19ea:	80 81       	ld	r24, Z
    19ec:	08 95       	ret

000019ee <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	0f 92       	push	r0
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    19fe:	69 83       	std	Y+1, r22	; 0x01
    1a00:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <store_and_clear_interrupt>
    1a04:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1a06:	f8 01       	movw	r30, r16
    1a08:	20 81       	ld	r18, Z
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	69 81       	ldd	r22, Y+1	; 0x01
    1a0e:	26 0f       	add	r18, r22
    1a10:	31 1d       	adc	r19, r1
    1a12:	62 81       	ldd	r22, Z+2	; 0x02
    1a14:	c9 01       	movw	r24, r18
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    1a1c:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1a1e:	84 2f       	mov	r24, r20
    1a20:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <restore_interrupt_setting>
}
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <store_and_clear_interrupt>:
interrupt_setting_t store_and_clear_interrupt(void) {
//   uint8_t sreg = SREG;
    uint8_t sreg = 0;
//    cli();
    return sreg;
}
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	08 95       	ret

00001a34 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
//   SREG = setting;
}
    1a34:	08 95       	ret

00001a36 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1a36:	88 1f       	adc	r24, r24
    1a38:	88 27       	eor	r24, r24
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	08 95       	ret

00001a3e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	88 3f       	cpi	r24, 0xF8	; 248
    1a42:	08 f4       	brcc	.+2      	; 0x1a46 <midi_is_realtime+0x8>
    1a44:	90 e0       	ldi	r25, 0x00	; 0
}
    1a46:	89 2f       	mov	r24, r25
    1a48:	08 95       	ret

00001a4a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	20 7f       	andi	r18, 0xF0	; 240
    1a50:	30 70       	andi	r19, 0x00	; 0
    1a52:	20 3b       	cpi	r18, 0xB0	; 176
    1a54:	31 05       	cpc	r19, r1
    1a56:	f1 f0       	breq	.+60     	; 0x1a94 <midi_packet_length+0x4a>
    1a58:	21 3b       	cpi	r18, 0xB1	; 177
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	54 f4       	brge	.+20     	; 0x1a72 <midi_packet_length+0x28>
    1a5e:	20 39       	cpi	r18, 0x90	; 144
    1a60:	31 05       	cpc	r19, r1
    1a62:	c1 f0       	breq	.+48     	; 0x1a94 <midi_packet_length+0x4a>
    1a64:	20 3a       	cpi	r18, 0xA0	; 160
    1a66:	31 05       	cpc	r19, r1
    1a68:	a9 f0       	breq	.+42     	; 0x1a94 <midi_packet_length+0x4a>
    1a6a:	20 38       	cpi	r18, 0x80	; 128
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	e9 f4       	brne	.+58     	; 0x1aaa <midi_packet_length+0x60>
    1a70:	11 c0       	rjmp	.+34     	; 0x1a94 <midi_packet_length+0x4a>
    1a72:	20 3d       	cpi	r18, 0xD0	; 208
    1a74:	31 05       	cpc	r19, r1
    1a76:	d9 f0       	breq	.+54     	; 0x1aae <midi_packet_length+0x64>
    1a78:	21 3d       	cpi	r18, 0xD1	; 209
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	24 f4       	brge	.+8      	; 0x1a86 <midi_packet_length+0x3c>
    1a7e:	20 3c       	cpi	r18, 0xC0	; 192
    1a80:	31 05       	cpc	r19, r1
    1a82:	99 f4       	brne	.+38     	; 0x1aaa <midi_packet_length+0x60>
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <midi_packet_length+0x64>
    1a86:	20 3e       	cpi	r18, 0xE0	; 224
    1a88:	31 05       	cpc	r19, r1
    1a8a:	21 f0       	breq	.+8      	; 0x1a94 <midi_packet_length+0x4a>
    1a8c:	20 3f       	cpi	r18, 0xF0	; 240
    1a8e:	31 05       	cpc	r19, r1
    1a90:	61 f4       	brne	.+24     	; 0x1aaa <midi_packet_length+0x60>
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1a98:	e8 2f       	mov	r30, r24
    1a9a:	e1 5f       	subi	r30, 0xF1	; 241
    1a9c:	ef 30       	cpi	r30, 0x0F	; 15
    1a9e:	48 f4       	brcc	.+18     	; 0x1ab2 <midi_packet_length+0x68>
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	e0 5e       	subi	r30, 0xE0	; 224
    1aa4:	ff 4d       	sbci	r31, 0xDF	; 223
    1aa6:	80 81       	ld	r24, Z
    1aa8:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	08 95       	ret
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1ab4:	08 95       	ret

00001ab6 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1ab6:	0f 93       	push	r16
    1ab8:	36 2f       	mov	r19, r22
    1aba:	54 2f       	mov	r21, r20
    1abc:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1abe:	3f 70       	andi	r19, 0x0F	; 15
    1ac0:	30 6b       	ori	r19, 0xB0	; 176
    1ac2:	5f 77       	andi	r21, 0x7F	; 127
    1ac4:	0f 77       	andi	r16, 0x7F	; 127
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	ed 91       	ld	r30, X+
    1aca:	fc 91       	ld	r31, X
    1acc:	63 e0       	ldi	r22, 0x03	; 3
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	43 2f       	mov	r20, r19
    1ad2:	25 2f       	mov	r18, r21
    1ad4:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1ada:	0f 93       	push	r16
    1adc:	36 2f       	mov	r19, r22
    1ade:	54 2f       	mov	r21, r20
    1ae0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1ae2:	3f 70       	andi	r19, 0x0F	; 15
    1ae4:	30 69       	ori	r19, 0x90	; 144
    1ae6:	5f 77       	andi	r21, 0x7F	; 127
    1ae8:	0f 77       	andi	r16, 0x7F	; 127
    1aea:	dc 01       	movw	r26, r24
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	63 e0       	ldi	r22, 0x03	; 3
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	43 2f       	mov	r20, r19
    1af6:	25 2f       	mov	r18, r21
    1af8:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1afe:	0f 93       	push	r16
    1b00:	36 2f       	mov	r19, r22
    1b02:	54 2f       	mov	r21, r20
    1b04:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1b06:	3f 70       	andi	r19, 0x0F	; 15
    1b08:	30 68       	ori	r19, 0x80	; 128
    1b0a:	5f 77       	andi	r21, 0x7F	; 127
    1b0c:	0f 77       	andi	r16, 0x7F	; 127
    1b0e:	dc 01       	movw	r26, r24
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	63 e0       	ldi	r22, 0x03	; 3
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	43 2f       	mov	r20, r19
    1b1a:	25 2f       	mov	r18, r21
    1b1c:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1b1e:	0f 91       	pop	r16
    1b20:	08 95       	ret

00001b22 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1b22:	0f 93       	push	r16
    1b24:	36 2f       	mov	r19, r22
    1b26:	54 2f       	mov	r21, r20
    1b28:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1b2a:	3f 70       	andi	r19, 0x0F	; 15
    1b2c:	30 6a       	ori	r19, 0xA0	; 160
    1b2e:	5f 77       	andi	r21, 0x7F	; 127
    1b30:	0f 77       	andi	r16, 0x7F	; 127
    1b32:	dc 01       	movw	r26, r24
    1b34:	ed 91       	ld	r30, X+
    1b36:	fc 91       	ld	r31, X
    1b38:	63 e0       	ldi	r22, 0x03	; 3
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	43 2f       	mov	r20, r19
    1b3e:	25 2f       	mov	r18, r21
    1b40:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1b4c:	20 e2       	ldi	r18, 0x20	; 32
    1b4e:	40 30       	cpi	r20, 0x00	; 0
    1b50:	52 07       	cpc	r21, r18
    1b52:	3c f4       	brge	.+14     	; 0x1b62 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1b54:	a0 ee       	ldi	r26, 0xE0	; 224
    1b56:	40 30       	cpi	r20, 0x00	; 0
    1b58:	5a 07       	cpc	r21, r26
    1b5a:	34 f0       	brlt	.+12     	; 0x1b68 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1b5c:	00 50       	subi	r16, 0x00	; 0
    1b5e:	10 4e       	sbci	r17, 0xE0	; 224
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1b62:	0f ef       	ldi	r16, 0xFF	; 255
    1b64:	1f e3       	ldi	r17, 0x3F	; 63
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1b6c:	46 2f       	mov	r20, r22
    1b6e:	4f 70       	andi	r20, 0x0F	; 15
    1b70:	40 6e       	ori	r20, 0xE0	; 224
    1b72:	20 2f       	mov	r18, r16
    1b74:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1b76:	00 0f       	add	r16, r16
    1b78:	01 2f       	mov	r16, r17
    1b7a:	00 1f       	adc	r16, r16
    1b7c:	11 0b       	sbc	r17, r17
    1b7e:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1b80:	0f 77       	andi	r16, 0x7F	; 127
    1b82:	dc 01       	movw	r26, r24
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	08 95       	ret

00001b94 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1b94:	0f 93       	push	r16
    1b96:	36 2f       	mov	r19, r22
    1b98:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1b9a:	3f 70       	andi	r19, 0x0F	; 15
    1b9c:	30 6c       	ori	r19, 0xC0	; 192
    1b9e:	2f 77       	andi	r18, 0x7F	; 127
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	43 2f       	mov	r20, r19
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1bb4:	0f 93       	push	r16
    1bb6:	36 2f       	mov	r19, r22
    1bb8:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1bba:	3f 70       	andi	r19, 0x0F	; 15
    1bbc:	30 6d       	ori	r19, 0xD0	; 208
    1bbe:	2f 77       	andi	r18, 0x7F	; 127
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	ed 91       	ld	r30, X+
    1bc4:	fc 91       	ld	r31, X
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	43 2f       	mov	r20, r19
    1bcc:	00 e0       	ldi	r16, 0x00	; 0
    1bce:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1bd4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	48 ef       	ldi	r20, 0xF8	; 248
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	09 95       	icall
}
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1bec:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1bee:	dc 01       	movw	r26, r24
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	49 ef       	ldi	r20, 0xF9	; 249
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	09 95       	icall
}
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1c04:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1c06:	dc 01       	movw	r26, r24
    1c08:	ed 91       	ld	r30, X+
    1c0a:	fc 91       	ld	r31, X
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	09 95       	icall
}
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1c1c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1c1e:	dc 01       	movw	r26, r24
    1c20:	ed 91       	ld	r30, X+
    1c22:	fc 91       	ld	r31, X
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	4b ef       	ldi	r20, 0xFB	; 251
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	00 e0       	ldi	r16, 0x00	; 0
    1c2e:	09 95       	icall
}
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1c34:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1c36:	dc 01       	movw	r26, r24
    1c38:	ed 91       	ld	r30, X+
    1c3a:	fc 91       	ld	r31, X
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	4c ef       	ldi	r20, 0xFC	; 252
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	00 e0       	ldi	r16, 0x00	; 0
    1c46:	09 95       	icall
}
    1c48:	0f 91       	pop	r16
    1c4a:	08 95       	ret

00001c4c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1c4c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1c4e:	dc 01       	movw	r26, r24
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	4e ef       	ldi	r20, 0xFE	; 254
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	09 95       	icall
}
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1c64:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1c66:	dc 01       	movw	r26, r24
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	4f ef       	ldi	r20, 0xFF	; 255
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	00 e0       	ldi	r16, 0x00	; 0
    1c76:	09 95       	icall
}
    1c78:	0f 91       	pop	r16
    1c7a:	08 95       	ret

00001c7c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1c7c:	0f 93       	push	r16
    1c7e:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1c80:	2f 77       	andi	r18, 0x7F	; 127
    1c82:	dc 01       	movw	r26, r24
    1c84:	ed 91       	ld	r30, X+
    1c86:	fc 91       	ld	r31, X
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	41 ef       	ldi	r20, 0xF1	; 241
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
   device->send_func(device, 3,
    1c9a:	26 2f       	mov	r18, r22
    1c9c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1c9e:	8b 01       	movw	r16, r22
    1ca0:	00 0f       	add	r16, r16
    1ca2:	01 2f       	mov	r16, r17
    1ca4:	00 1f       	adc	r16, r16
    1ca6:	11 0b       	sbc	r17, r17
    1ca8:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1caa:	0f 77       	andi	r16, 0x7F	; 127
    1cac:	dc 01       	movw	r26, r24
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	42 ef       	ldi	r20, 0xF2	; 242
    1cb8:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1cc0:	0f 93       	push	r16
    1cc2:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1cc4:	2f 77       	andi	r18, 0x7F	; 127
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	43 ef       	ldi	r20, 0xF3	; 243
    1cd2:	00 e0       	ldi	r16, 0x00	; 0
    1cd4:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1cda:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1cdc:	dc 01       	movw	r26, r24
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	46 ef       	ldi	r20, 0xF6	; 246
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	09 95       	icall
}
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1cf2:	0f 93       	push	r16
    1cf4:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	ed 91       	ld	r30, X+
    1cfa:	fc 91       	ld	r31, X
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	09 95       	icall
}
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1d0a:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	09 95       	icall
}
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1d18:	fc 01       	movw	r30, r24
    1d1a:	62 83       	std	Z+2, r22	; 0x02
    1d1c:	73 83       	std	Z+3, r23	; 0x03
}
    1d1e:	08 95       	ret

00001d20 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1d20:	fc 01       	movw	r30, r24
    1d22:	64 83       	std	Z+4, r22	; 0x04
    1d24:	75 83       	std	Z+5, r23	; 0x05
}
    1d26:	08 95       	ret

00001d28 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1d28:	fc 01       	movw	r30, r24
    1d2a:	66 83       	std	Z+6, r22	; 0x06
    1d2c:	77 83       	std	Z+7, r23	; 0x07
}
    1d2e:	08 95       	ret

00001d30 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1d30:	fc 01       	movw	r30, r24
    1d32:	60 87       	std	Z+8, r22	; 0x08
    1d34:	71 87       	std	Z+9, r23	; 0x09
}
    1d36:	08 95       	ret

00001d38 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1d38:	fc 01       	movw	r30, r24
    1d3a:	62 87       	std	Z+10, r22	; 0x0a
    1d3c:	73 87       	std	Z+11, r23	; 0x0b
}
    1d3e:	08 95       	ret

00001d40 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1d40:	fc 01       	movw	r30, r24
    1d42:	64 87       	std	Z+12, r22	; 0x0c
    1d44:	75 87       	std	Z+13, r23	; 0x0d
}
    1d46:	08 95       	ret

00001d48 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1d48:	fc 01       	movw	r30, r24
    1d4a:	66 87       	std	Z+14, r22	; 0x0e
    1d4c:	77 87       	std	Z+15, r23	; 0x0f
}
    1d4e:	08 95       	ret

00001d50 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1d50:	fc 01       	movw	r30, r24
    1d52:	60 8b       	std	Z+16, r22	; 0x10
    1d54:	71 8b       	std	Z+17, r23	; 0x11
}
    1d56:	08 95       	ret

00001d58 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1d58:	fc 01       	movw	r30, r24
    1d5a:	62 8b       	std	Z+18, r22	; 0x12
    1d5c:	73 8b       	std	Z+19, r23	; 0x13
}
    1d5e:	08 95       	ret

00001d60 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1d60:	fc 01       	movw	r30, r24
    1d62:	64 8b       	std	Z+20, r22	; 0x14
    1d64:	75 8b       	std	Z+21, r23	; 0x15
}
    1d66:	08 95       	ret

00001d68 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1d68:	fc 01       	movw	r30, r24
    1d6a:	66 8b       	std	Z+22, r22	; 0x16
    1d6c:	77 8b       	std	Z+23, r23	; 0x17
}
    1d6e:	08 95       	ret

00001d70 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1d70:	fc 01       	movw	r30, r24
    1d72:	60 8f       	std	Z+24, r22	; 0x18
    1d74:	71 8f       	std	Z+25, r23	; 0x19
}
    1d76:	08 95       	ret

00001d78 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1d78:	fc 01       	movw	r30, r24
    1d7a:	62 8f       	std	Z+26, r22	; 0x1a
    1d7c:	73 8f       	std	Z+27, r23	; 0x1b
}
    1d7e:	08 95       	ret

00001d80 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1d80:	fc 01       	movw	r30, r24
    1d82:	64 8f       	std	Z+28, r22	; 0x1c
    1d84:	75 8f       	std	Z+29, r23	; 0x1d
}
    1d86:	08 95       	ret

00001d88 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1d88:	fc 01       	movw	r30, r24
    1d8a:	66 8f       	std	Z+30, r22	; 0x1e
    1d8c:	77 8f       	std	Z+31, r23	; 0x1f
}
    1d8e:	08 95       	ret

00001d90 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1d96:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1d98:	1e a2       	std	Y+38, r1	; 0x26
    1d9a:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	68 5d       	subi	r22, 0xD8	; 216
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	88 51       	subi	r24, 0x18	; 24
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	40 ec       	ldi	r20, 0xC0	; 192
    1da8:	0e 94 97 0c 	call	0x192e	; 0x192e <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1dac:	1a 82       	std	Y+2, r1	; 0x02
    1dae:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1db0:	1c 82       	std	Y+4, r1	; 0x04
    1db2:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1db4:	1e 82       	std	Y+6, r1	; 0x06
    1db6:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1db8:	18 86       	std	Y+8, r1	; 0x08
    1dba:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1dbc:	1a 86       	std	Y+10, r1	; 0x0a
    1dbe:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1dc0:	1c 86       	std	Y+12, r1	; 0x0c
    1dc2:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1dc4:	1e 86       	std	Y+14, r1	; 0x0e
    1dc6:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1dc8:	18 8a       	std	Y+16, r1	; 0x10
    1dca:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1dcc:	1a 8a       	std	Y+18, r1	; 0x12
    1dce:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1dd0:	1c 8a       	std	Y+20, r1	; 0x14
    1dd2:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1dd4:	1e 8a       	std	Y+22, r1	; 0x16
    1dd6:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1dd8:	18 8e       	std	Y+24, r1	; 0x18
    1dda:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1ddc:	1a 8e       	std	Y+26, r1	; 0x1a
    1dde:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1de0:	1c 8e       	std	Y+28, r1	; 0x1c
    1de2:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1de4:	1e 8e       	std	Y+30, r1	; 0x1e
    1de6:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1de8:	18 a2       	std	Y+32, r1	; 0x20
    1dea:	19 a2       	std	Y+33, r1	; 0x21
}
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret

00001df2 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1e08:	e4 2f       	mov	r30, r20
    1e0a:	f5 2f       	mov	r31, r21
    1e0c:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1e0e:	8c 01       	movw	r16, r24
    1e10:	08 51       	subi	r16, 0x18	; 24
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1e16:	f6 01       	movw	r30, r12
    1e18:	61 91       	ld	r22, Z+
    1e1a:	6f 01       	movw	r12, r30
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	49 83       	std	Y+1, r20	; 0x01
    1e20:	0e 94 9e 0c 	call	0x193c	; 0x193c <bytequeue_enqueue>
    1e24:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1e26:	8c 2d       	mov	r24, r12
    1e28:	84 1b       	sub	r24, r20
    1e2a:	8f 15       	cp	r24, r15
    1e2c:	a0 f3       	brcs	.-24     	; 0x1e16 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	df 90       	pop	r13
    1e3c:	cf 90       	pop	r12
    1e3e:	08 95       	ret

00001e40 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1e40:	fc 01       	movw	r30, r24
    1e42:	60 83       	st	Z, r22
    1e44:	71 83       	std	Z+1, r23	; 0x01
}
    1e46:	08 95       	ret

00001e48 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1e48:	fc 01       	movw	r30, r24
    1e4a:	60 a3       	std	Z+32, r22	; 0x20
    1e4c:	71 a3       	std	Z+33, r23	; 0x21
}
    1e4e:	08 95       	ret

00001e50 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	ec 01       	movw	r28, r24
    1e62:	6b 01       	movw	r12, r22
    1e64:	14 2f       	mov	r17, r20
    1e66:	e2 2e       	mov	r14, r18
    1e68:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	84 30       	cpi	r24, 0x04	; 4
    1e6e:	31 f4       	brne	.+12     	; 0x1e7c <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1e70:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e72:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e74:	30 97       	sbiw	r30, 0x00	; 0
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <midi_input_callbacks+0x2a>
    1e78:	83 c0       	rjmp	.+262    	; 0x1f80 <midi_input_callbacks+0x130>
    1e7a:	95 c0       	rjmp	.+298    	; 0x1fa6 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1e7c:	62 30       	cpi	r22, 0x02	; 2
    1e7e:	71 05       	cpc	r23, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <midi_input_callbacks+0x34>
    1e82:	42 c0       	rjmp	.+132    	; 0x1f08 <midi_input_callbacks+0xb8>
    1e84:	63 30       	cpi	r22, 0x03	; 3
    1e86:	71 05       	cpc	r23, r1
    1e88:	29 f0       	breq	.+10     	; 0x1e94 <midi_input_callbacks+0x44>
    1e8a:	61 30       	cpi	r22, 0x01	; 1
    1e8c:	71 05       	cpc	r23, r1
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <midi_input_callbacks+0x42>
    1e90:	73 c0       	rjmp	.+230    	; 0x1f78 <midi_input_callbacks+0x128>
    1e92:	60 c0       	rjmp	.+192    	; 0x1f54 <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1e94:	84 2f       	mov	r24, r20
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	80 7f       	andi	r24, 0xF0	; 240
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	80 3a       	cpi	r24, 0xA0	; 160
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	e1 f0       	breq	.+56     	; 0x1eda <midi_input_callbacks+0x8a>
    1ea2:	81 3a       	cpi	r24, 0xA1	; 161
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	3c f4       	brge	.+14     	; 0x1eb6 <midi_input_callbacks+0x66>
    1ea8:	80 38       	cpi	r24, 0x80	; 128
    1eaa:	91 05       	cpc	r25, r1
    1eac:	99 f0       	breq	.+38     	; 0x1ed4 <midi_input_callbacks+0x84>
    1eae:	80 39       	cpi	r24, 0x90	; 144
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	f9 f4       	brne	.+62     	; 0x1ef2 <midi_input_callbacks+0xa2>
    1eb4:	0c c0       	rjmp	.+24     	; 0x1ece <midi_input_callbacks+0x7e>
    1eb6:	80 3e       	cpi	r24, 0xE0	; 224
    1eb8:	91 05       	cpc	r25, r1
    1eba:	91 f0       	breq	.+36     	; 0x1ee0 <midi_input_callbacks+0x90>
    1ebc:	80 3f       	cpi	r24, 0xF0	; 240
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	91 f0       	breq	.+36     	; 0x1ee6 <midi_input_callbacks+0x96>
    1ec2:	80 3b       	cpi	r24, 0xB0	; 176
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	a9 f4       	brne	.+42     	; 0x1ef2 <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eca:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1ece:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed0:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1ed2:	11 c0       	rjmp	.+34     	; 0x1ef6 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1ed4:	ee 81       	ldd	r30, Y+6	; 0x06
    1ed6:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1ed8:	0e c0       	rjmp	.+28     	; 0x1ef6 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1eda:	e8 85       	ldd	r30, Y+8	; 0x08
    1edc:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1ede:	0b c0       	rjmp	.+22     	; 0x1ef6 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1ee0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ee2:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1ee4:	08 c0       	rjmp	.+16     	; 0x1ef6 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1ee6:	42 3f       	cpi	r20, 0xF2	; 242
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <midi_input_callbacks+0x9c>
    1eea:	5d c0       	rjmp	.+186    	; 0x1fa6 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1eec:	ec 85       	ldd	r30, Y+12	; 0x0c
    1eee:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1ef2:	e0 e0       	ldi	r30, 0x00	; 0
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1ef6:	30 97       	sbiw	r30, 0x00	; 0
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <midi_input_callbacks+0xac>
    1efa:	55 c0       	rjmp	.+170    	; 0x1fa6 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1efc:	ce 01       	movw	r24, r28
    1efe:	61 2f       	mov	r22, r17
    1f00:	4e 2d       	mov	r20, r14
    1f02:	2f 2d       	mov	r18, r15
    1f04:	09 95       	icall
    1f06:	42 c0       	rjmp	.+132    	; 0x1f8c <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1f08:	84 2f       	mov	r24, r20
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	80 7f       	andi	r24, 0xF0	; 240
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	80 3d       	cpi	r24, 0xD0	; 208
    1f12:	91 05       	cpc	r25, r1
    1f14:	49 f0       	breq	.+18     	; 0x1f28 <midi_input_callbacks+0xd8>
    1f16:	80 3f       	cpi	r24, 0xF0	; 240
    1f18:	91 05       	cpc	r25, r1
    1f1a:	49 f0       	breq	.+18     	; 0x1f2e <midi_input_callbacks+0xde>
    1f1c:	80 3c       	cpi	r24, 0xC0	; 192
    1f1e:	91 05       	cpc	r25, r1
    1f20:	81 f4       	brne	.+32     	; 0x1f42 <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1f22:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f24:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1f28:	e8 89       	ldd	r30, Y+16	; 0x10
    1f2a:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1f2c:	0c c0       	rjmp	.+24     	; 0x1f46 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1f2e:	43 3f       	cpi	r20, 0xF3	; 243
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1f32:	ea 89       	ldd	r30, Y+18	; 0x12
    1f34:	fb 89       	ldd	r31, Y+19	; 0x13
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1f38:	41 3f       	cpi	r20, 0xF1	; 241
    1f3a:	a9 f5       	brne	.+106    	; 0x1fa6 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1f3c:	ec 89       	ldd	r30, Y+20	; 0x14
    1f3e:	fd 89       	ldd	r31, Y+21	; 0x15
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1f42:	e0 e0       	ldi	r30, 0x00	; 0
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1f46:	30 97       	sbiw	r30, 0x00	; 0
    1f48:	71 f1       	breq	.+92     	; 0x1fa6 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	61 2f       	mov	r22, r17
    1f4e:	4e 2d       	mov	r20, r14
    1f50:	09 95       	icall
    1f52:	1c c0       	rjmp	.+56     	; 0x1f8c <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1f54:	84 2f       	mov	r24, r20
    1f56:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <midi_is_realtime>
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1f5e:	ee 89       	ldd	r30, Y+22	; 0x16
    1f60:	ff 89       	ldd	r31, Y+23	; 0x17
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1f64:	16 3f       	cpi	r17, 0xF6	; 246
    1f66:	f9 f4       	brne	.+62     	; 0x1fa6 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1f68:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f6a:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1f6c:	30 97       	sbiw	r30, 0x00	; 0
    1f6e:	d9 f0       	breq	.+54     	; 0x1fa6 <midi_input_callbacks+0x156>
                  func(device, byte0);
    1f70:	ce 01       	movw	r24, r28
    1f72:	61 2f       	mov	r22, r17
    1f74:	09 95       	icall
    1f76:	0a c0       	rjmp	.+20     	; 0x1f8c <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1f78:	64 30       	cpi	r22, 0x04	; 4
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	90 f4       	brcc	.+36     	; 0x1fa2 <midi_input_callbacks+0x152>
    1f7e:	13 c0       	rjmp	.+38     	; 0x1fa6 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1f80:	ce 01       	movw	r24, r28
    1f82:	b6 01       	movw	r22, r12
    1f84:	41 2f       	mov	r20, r17
    1f86:	2e 2d       	mov	r18, r14
    1f88:	0f 2d       	mov	r16, r15
    1f8a:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1f8c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f8e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f90:	30 97       	sbiw	r30, 0x00	; 0
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1f94:	ce 01       	movw	r24, r28
    1f96:	b6 01       	movw	r22, r12
    1f98:	41 2f       	mov	r20, r17
    1f9a:	2e 2d       	mov	r18, r14
    1f9c:	0f 2d       	mov	r16, r15
    1f9e:	09 95       	icall
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1fa2:	cc 24       	eor	r12, r12
    1fa4:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1fa6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1fa8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1faa:	30 97       	sbiw	r30, 0x00	; 0
    1fac:	49 f7       	brne	.-46     	; 0x1f80 <midi_input_callbacks+0x130>
    1fae:	ee cf       	rjmp	.-36     	; 0x1f8c <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	08 95       	ret

00001fc2 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1fd2:	86 2f       	mov	r24, r22
    1fd4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <midi_is_realtime>
    1fd8:	88 23       	and	r24, r24
    1fda:	69 f0       	breq	.+26     	; 0x1ff6 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1fdc:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	41 2f       	mov	r20, r17
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	00 e0       	ldi	r16, 0x00	; 0
    1fee:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <midi_input_callbacks>
      device->input_state = state;
    1ff2:	ed a2       	std	Y+37, r14	; 0x25
    1ff4:	7e c0       	rjmp	.+252    	; 0x20f2 <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1ff6:	81 2f       	mov	r24, r17
    1ff8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <midi_is_statusbyte>
    1ffc:	4d a1       	ldd	r20, Y+37	; 0x25
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <midi_process_byte+0x42>
    2002:	42 c0       	rjmp	.+132    	; 0x2088 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    2004:	44 30       	cpi	r20, 0x04	; 4
    2006:	29 f0       	breq	.+10     	; 0x2012 <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    2008:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	8e a3       	std	Y+38, r24	; 0x26
    2010:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    2012:	81 2f       	mov	r24, r17
    2014:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <midi_packet_length>
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	39 f0       	breq	.+14     	; 0x202a <midi_process_byte+0x68>
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	78 f0       	brcs	.+30     	; 0x203e <midi_process_byte+0x7c>
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	59 f0       	breq	.+22     	; 0x203a <midi_process_byte+0x78>
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	61 f5       	brne	.+88     	; 0x2080 <midi_process_byte+0xbe>
    2028:	08 c0       	rjmp	.+16     	; 0x203a <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    202a:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    202c:	ce 01       	movw	r24, r28
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	41 2f       	mov	r20, r17
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    203a:	8d a3       	std	Y+37, r24	; 0x25
            break;
    203c:	5a c0       	rjmp	.+180    	; 0x20f2 <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    203e:	10 3f       	cpi	r17, 0xF0	; 240
    2040:	19 f0       	breq	.+6      	; 0x2048 <midi_process_byte+0x86>
    2042:	17 3f       	cpi	r17, 0xF7	; 247
    2044:	e9 f4       	brne	.+58     	; 0x2080 <midi_process_byte+0xbe>
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    2048:	84 e0       	ldi	r24, 0x04	; 4
    204a:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    204c:	1a a3       	std	Y+34, r17	; 0x22
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    2050:	2e a1       	ldd	r18, Y+38	; 0x26
    2052:	3f a1       	ldd	r19, Y+39	; 0x27
    2054:	c9 01       	movw	r24, r18
    2056:	63 e0       	ldi	r22, 0x03	; 3
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    205e:	8c 0f       	add	r24, r28
    2060:	9d 1f       	adc	r25, r29
    2062:	fc 01       	movw	r30, r24
    2064:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    2066:	b9 01       	movw	r22, r18
    2068:	6f 5f       	subi	r22, 0xFF	; 255
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	6e a3       	std	Y+38, r22	; 0x26
    206e:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    2070:	ce 01       	movw	r24, r28
    2072:	4a a1       	ldd	r20, Y+34	; 0x22
    2074:	2b a1       	ldd	r18, Y+35	; 0x23
    2076:	0c a1       	ldd	r16, Y+36	; 0x24
    2078:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    207c:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    207e:	39 c0       	rjmp	.+114    	; 0x20f2 <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    2080:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    2082:	1e a2       	std	Y+38, r1	; 0x26
    2084:	1f a2       	std	Y+39, r1	; 0x27
            break;
    2086:	35 c0       	rjmp	.+106    	; 0x20f2 <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    2088:	44 23       	and	r20, r20
    208a:	99 f1       	breq	.+102    	; 0x20f2 <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    208c:	2e a1       	ldd	r18, Y+38	; 0x26
    208e:	3f a1       	ldd	r19, Y+39	; 0x27
    2090:	c9 01       	movw	r24, r18
    2092:	63 e0       	ldi	r22, 0x03	; 3
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    209a:	7c 01       	movw	r14, r24
    209c:	fe 01       	movw	r30, r28
    209e:	e8 0f       	add	r30, r24
    20a0:	f9 1f       	adc	r31, r25
    20a2:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    20a4:	b9 01       	movw	r22, r18
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	6e a3       	std	Y+38, r22	; 0x26
    20ac:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	91 f0       	breq	.+36     	; 0x20d8 <midi_process_byte+0x116>
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	e8 16       	cp	r14, r24
    20b8:	f1 04       	cpc	r15, r1
    20ba:	d9 f4       	brne	.+54     	; 0x20f2 <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    20bc:	ce 01       	movw	r24, r28
    20be:	4a a1       	ldd	r20, Y+34	; 0x22
    20c0:	2b a1       	ldd	r18, Y+35	; 0x23
    20c2:	0c a1       	ldd	r16, Y+36	; 0x24
    20c4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    20c8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	91 f0       	breq	.+36     	; 0x20f2 <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	8e a3       	std	Y+38, r24	; 0x26
    20d4:	9f a3       	std	Y+39, r25	; 0x27
    20d6:	0d c0       	rjmp	.+26     	; 0x20f2 <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    20d8:	42 30       	cpi	r20, 0x02	; 2
    20da:	59 f4       	brne	.+22     	; 0x20f2 <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    20dc:	ce 01       	movw	r24, r28
    20de:	4a a1       	ldd	r20, Y+34	; 0x22
    20e0:	2b a1       	ldd	r18, Y+35	; 0x23
    20e2:	00 e0       	ldi	r16, 0x00	; 0
    20e4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	84 30       	cpi	r24, 0x04	; 4
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    20ee:	ee a2       	std	Y+38, r14	; 0x26
    20f0:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	08 95       	ret

00002100 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    2112:	e8 a1       	ldd	r30, Y+32	; 0x20
    2114:	f9 a1       	ldd	r31, Y+33	; 0x21
    2116:	30 97       	sbiw	r30, 0x00	; 0
    2118:	09 f0       	breq	.+2      	; 0x211c <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    211a:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    211c:	8e 01       	movw	r16, r28
    211e:	08 51       	subi	r16, 0x18	; 24
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	c8 01       	movw	r24, r16
    2124:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    2128:	ee 24       	eor	r14, r14
    212a:	ff 24       	eor	r15, r15
    212c:	c8 2e       	mov	r12, r24
    212e:	dd 24       	eor	r13, r13
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    2132:	c8 01       	movw	r24, r16
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <bytequeue_get>
    213a:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    213c:	ce 01       	movw	r24, r28
    213e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    2142:	c8 01       	movw	r24, r16
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    214a:	08 94       	sec
    214c:	e1 1c       	adc	r14, r1
    214e:	f1 1c       	adc	r15, r1
    2150:	ec 14       	cp	r14, r12
    2152:	fd 04       	cpc	r15, r13
    2154:	70 f3       	brcs	.-36     	; 0x2132 <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	08 95       	ret

00002168 <__fixunssfsi>:
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	7b 01       	movw	r14, r22
    2172:	8c 01       	movw	r16, r24
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	5f e4       	ldi	r21, 0x4F	; 79
    217c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__gesf2>
    2180:	87 fd       	sbrc	r24, 7
    2182:	11 c0       	rjmp	.+34     	; 0x21a6 <__fixunssfsi+0x3e>
    2184:	c8 01       	movw	r24, r16
    2186:	b7 01       	movw	r22, r14
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	5f e4       	ldi	r21, 0x4F	; 79
    2190:	0e 94 57 12 	call	0x24ae	; 0x24ae <__subsf3>
    2194:	0e 94 c0 14 	call	0x2980	; 0x2980 <__fixsfsi>
    2198:	9b 01       	movw	r18, r22
    219a:	ac 01       	movw	r20, r24
    219c:	20 50       	subi	r18, 0x00	; 0
    219e:	30 40       	sbci	r19, 0x00	; 0
    21a0:	40 40       	sbci	r20, 0x00	; 0
    21a2:	50 48       	sbci	r21, 0x80	; 128
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <__fixunssfsi+0x4a>
    21a6:	c8 01       	movw	r24, r16
    21a8:	b7 01       	movw	r22, r14
    21aa:	0e 94 c0 14 	call	0x2980	; 0x2980 <__fixsfsi>
    21ae:	9b 01       	movw	r18, r22
    21b0:	ac 01       	movw	r20, r24
    21b2:	b9 01       	movw	r22, r18
    21b4:	ca 01       	movw	r24, r20
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	08 95       	ret

000021c0 <_fpadd_parts>:
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e6 ee       	ldi	r30, 0xE6	; 230
    21c6:	f0 e1       	ldi	r31, 0x10	; 16
    21c8:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__+0x8>
    21cc:	fc 01       	movw	r30, r24
    21ce:	ea 01       	movw	r28, r20
    21d0:	80 81       	ld	r24, Z
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x18>
    21d6:	38 c1       	rjmp	.+624    	; 0x2448 <_fpadd_parts+0x288>
    21d8:	db 01       	movw	r26, r22
    21da:	9c 91       	ld	r25, X
    21dc:	92 30       	cpi	r25, 0x02	; 2
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <_fpadd_parts+0x22>
    21e0:	30 c1       	rjmp	.+608    	; 0x2442 <_fpadd_parts+0x282>
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	59 f4       	brne	.+22     	; 0x21fc <_fpadd_parts+0x3c>
    21e6:	94 30       	cpi	r25, 0x04	; 4
    21e8:	09 f0       	breq	.+2      	; 0x21ec <_fpadd_parts+0x2c>
    21ea:	2e c1       	rjmp	.+604    	; 0x2448 <_fpadd_parts+0x288>
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	11 96       	adiw	r26, 0x01	; 1
    21f0:	8c 91       	ld	r24, X
    21f2:	11 97       	sbiw	r26, 0x01	; 1
    21f4:	98 17       	cp	r25, r24
    21f6:	09 f0       	breq	.+2      	; 0x21fa <_fpadd_parts+0x3a>
    21f8:	21 c1       	rjmp	.+578    	; 0x243c <_fpadd_parts+0x27c>
    21fa:	26 c1       	rjmp	.+588    	; 0x2448 <_fpadd_parts+0x288>
    21fc:	94 30       	cpi	r25, 0x04	; 4
    21fe:	09 f4       	brne	.+2      	; 0x2202 <_fpadd_parts+0x42>
    2200:	20 c1       	rjmp	.+576    	; 0x2442 <_fpadd_parts+0x282>
    2202:	92 30       	cpi	r25, 0x02	; 2
    2204:	b1 f4       	brne	.+44     	; 0x2232 <_fpadd_parts+0x72>
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	09 f0       	breq	.+2      	; 0x220c <_fpadd_parts+0x4c>
    220a:	1e c1       	rjmp	.+572    	; 0x2448 <_fpadd_parts+0x288>
    220c:	ca 01       	movw	r24, r20
    220e:	af 01       	movw	r20, r30
    2210:	28 e0       	ldi	r18, 0x08	; 8
    2212:	da 01       	movw	r26, r20
    2214:	0d 90       	ld	r0, X+
    2216:	ad 01       	movw	r20, r26
    2218:	dc 01       	movw	r26, r24
    221a:	0d 92       	st	X+, r0
    221c:	cd 01       	movw	r24, r26
    221e:	21 50       	subi	r18, 0x01	; 1
    2220:	c1 f7       	brne	.-16     	; 0x2212 <_fpadd_parts+0x52>
    2222:	db 01       	movw	r26, r22
    2224:	11 96       	adiw	r26, 0x01	; 1
    2226:	8c 91       	ld	r24, X
    2228:	11 97       	sbiw	r26, 0x01	; 1
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	89 23       	and	r24, r25
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	0a c1       	rjmp	.+532    	; 0x2446 <_fpadd_parts+0x286>
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	09 f4       	brne	.+2      	; 0x2238 <_fpadd_parts+0x78>
    2236:	05 c1       	rjmp	.+522    	; 0x2442 <_fpadd_parts+0x282>
    2238:	c2 80       	ldd	r12, Z+2	; 0x02
    223a:	d3 80       	ldd	r13, Z+3	; 0x03
    223c:	db 01       	movw	r26, r22
    223e:	12 96       	adiw	r26, 0x02	; 2
    2240:	6d 90       	ld	r6, X+
    2242:	7c 90       	ld	r7, X
    2244:	13 97       	sbiw	r26, 0x03	; 3
    2246:	24 81       	ldd	r18, Z+4	; 0x04
    2248:	35 81       	ldd	r19, Z+5	; 0x05
    224a:	46 81       	ldd	r20, Z+6	; 0x06
    224c:	57 81       	ldd	r21, Z+7	; 0x07
    224e:	14 96       	adiw	r26, 0x04	; 4
    2250:	ed 90       	ld	r14, X+
    2252:	fd 90       	ld	r15, X+
    2254:	0d 91       	ld	r16, X+
    2256:	1c 91       	ld	r17, X
    2258:	17 97       	sbiw	r26, 0x07	; 7
    225a:	c6 01       	movw	r24, r12
    225c:	86 19       	sub	r24, r6
    225e:	97 09       	sbc	r25, r7
    2260:	5c 01       	movw	r10, r24
    2262:	97 ff       	sbrs	r25, 7
    2264:	04 c0       	rjmp	.+8      	; 0x226e <_fpadd_parts+0xae>
    2266:	aa 24       	eor	r10, r10
    2268:	bb 24       	eor	r11, r11
    226a:	a8 1a       	sub	r10, r24
    226c:	b9 0a       	sbc	r11, r25
    226e:	b0 e2       	ldi	r27, 0x20	; 32
    2270:	ab 16       	cp	r10, r27
    2272:	b1 04       	cpc	r11, r1
    2274:	0c f0       	brlt	.+2      	; 0x2278 <_fpadd_parts+0xb8>
    2276:	61 c0       	rjmp	.+194    	; 0x233a <_fpadd_parts+0x17a>
    2278:	18 16       	cp	r1, r24
    227a:	19 06       	cpc	r1, r25
    227c:	6c f5       	brge	.+90     	; 0x22d8 <_fpadd_parts+0x118>
    227e:	37 01       	movw	r6, r14
    2280:	48 01       	movw	r8, r16
    2282:	0a 2c       	mov	r0, r10
    2284:	04 c0       	rjmp	.+8      	; 0x228e <_fpadd_parts+0xce>
    2286:	96 94       	lsr	r9
    2288:	87 94       	ror	r8
    228a:	77 94       	ror	r7
    228c:	67 94       	ror	r6
    228e:	0a 94       	dec	r0
    2290:	d2 f7       	brpl	.-12     	; 0x2286 <_fpadd_parts+0xc6>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e0       	ldi	r26, 0x00	; 0
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	0a 2c       	mov	r0, r10
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <_fpadd_parts+0xe6>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	aa 1f       	adc	r26, r26
    22a4:	bb 1f       	adc	r27, r27
    22a6:	0a 94       	dec	r0
    22a8:	d2 f7       	brpl	.-12     	; 0x229e <_fpadd_parts+0xde>
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	a1 09       	sbc	r26, r1
    22ae:	b1 09       	sbc	r27, r1
    22b0:	8e 21       	and	r24, r14
    22b2:	9f 21       	and	r25, r15
    22b4:	a0 23       	and	r26, r16
    22b6:	b1 23       	and	r27, r17
    22b8:	ee 24       	eor	r14, r14
    22ba:	ff 24       	eor	r15, r15
    22bc:	87 01       	movw	r16, r14
    22be:	e3 94       	inc	r14
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	a1 05       	cpc	r26, r1
    22c4:	b1 05       	cpc	r27, r1
    22c6:	19 f4       	brne	.+6      	; 0x22ce <_fpadd_parts+0x10e>
    22c8:	ee 24       	eor	r14, r14
    22ca:	ff 24       	eor	r15, r15
    22cc:	87 01       	movw	r16, r14
    22ce:	e6 28       	or	r14, r6
    22d0:	f7 28       	or	r15, r7
    22d2:	08 29       	or	r16, r8
    22d4:	19 29       	or	r17, r9
    22d6:	3c c0       	rjmp	.+120    	; 0x2350 <_fpadd_parts+0x190>
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	d1 f1       	breq	.+116    	; 0x2350 <_fpadd_parts+0x190>
    22dc:	ca 0c       	add	r12, r10
    22de:	db 1c       	adc	r13, r11
    22e0:	39 01       	movw	r6, r18
    22e2:	4a 01       	movw	r8, r20
    22e4:	0a 2c       	mov	r0, r10
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <_fpadd_parts+0x130>
    22e8:	96 94       	lsr	r9
    22ea:	87 94       	ror	r8
    22ec:	77 94       	ror	r7
    22ee:	67 94       	ror	r6
    22f0:	0a 94       	dec	r0
    22f2:	d2 f7       	brpl	.-12     	; 0x22e8 <_fpadd_parts+0x128>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	0a 2c       	mov	r0, r10
    22fe:	04 c0       	rjmp	.+8      	; 0x2308 <_fpadd_parts+0x148>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	aa 1f       	adc	r26, r26
    2306:	bb 1f       	adc	r27, r27
    2308:	0a 94       	dec	r0
    230a:	d2 f7       	brpl	.-12     	; 0x2300 <_fpadd_parts+0x140>
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	a1 09       	sbc	r26, r1
    2310:	b1 09       	sbc	r27, r1
    2312:	82 23       	and	r24, r18
    2314:	93 23       	and	r25, r19
    2316:	a4 23       	and	r26, r20
    2318:	b5 23       	and	r27, r21
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	a1 05       	cpc	r26, r1
    2326:	b1 05       	cpc	r27, r1
    2328:	19 f4       	brne	.+6      	; 0x2330 <_fpadd_parts+0x170>
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	26 29       	or	r18, r6
    2332:	37 29       	or	r19, r7
    2334:	48 29       	or	r20, r8
    2336:	59 29       	or	r21, r9
    2338:	0b c0       	rjmp	.+22     	; 0x2350 <_fpadd_parts+0x190>
    233a:	6c 14       	cp	r6, r12
    233c:	7d 04       	cpc	r7, r13
    233e:	24 f4       	brge	.+8      	; 0x2348 <_fpadd_parts+0x188>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <_fpadd_parts+0x190>
    2348:	63 01       	movw	r12, r6
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	a9 01       	movw	r20, r18
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	fb 01       	movw	r30, r22
    2354:	91 81       	ldd	r25, Z+1	; 0x01
    2356:	89 17       	cp	r24, r25
    2358:	09 f4       	brne	.+2      	; 0x235c <_fpadd_parts+0x19c>
    235a:	45 c0       	rjmp	.+138    	; 0x23e6 <_fpadd_parts+0x226>
    235c:	88 23       	and	r24, r24
    235e:	49 f0       	breq	.+18     	; 0x2372 <_fpadd_parts+0x1b2>
    2360:	d8 01       	movw	r26, r16
    2362:	c7 01       	movw	r24, r14
    2364:	82 1b       	sub	r24, r18
    2366:	93 0b       	sbc	r25, r19
    2368:	a4 0b       	sbc	r26, r20
    236a:	b5 0b       	sbc	r27, r21
    236c:	9c 01       	movw	r18, r24
    236e:	ad 01       	movw	r20, r26
    2370:	04 c0       	rjmp	.+8      	; 0x237a <_fpadd_parts+0x1ba>
    2372:	2e 19       	sub	r18, r14
    2374:	3f 09       	sbc	r19, r15
    2376:	40 0b       	sbc	r20, r16
    2378:	51 0b       	sbc	r21, r17
    237a:	57 fd       	sbrc	r21, 7
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <_fpadd_parts+0x1c6>
    237e:	19 82       	std	Y+1, r1	; 0x01
    2380:	ca 82       	std	Y+2, r12	; 0x02
    2382:	db 82       	std	Y+3, r13	; 0x03
    2384:	0b c0       	rjmp	.+22     	; 0x239c <_fpadd_parts+0x1dc>
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	ca 82       	std	Y+2, r12	; 0x02
    238c:	db 82       	std	Y+3, r13	; 0x03
    238e:	50 95       	com	r21
    2390:	40 95       	com	r20
    2392:	30 95       	com	r19
    2394:	21 95       	neg	r18
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	4f 4f       	sbci	r20, 0xFF	; 255
    239a:	5f 4f       	sbci	r21, 0xFF	; 255
    239c:	2c 83       	std	Y+4, r18	; 0x04
    239e:	3d 83       	std	Y+5, r19	; 0x05
    23a0:	4e 83       	std	Y+6, r20	; 0x06
    23a2:	5f 83       	std	Y+7, r21	; 0x07
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <_fpadd_parts+0x200>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	8c 83       	std	Y+4, r24	; 0x04
    23b0:	9d 83       	std	Y+5, r25	; 0x05
    23b2:	ae 83       	std	Y+6, r26	; 0x06
    23b4:	bf 83       	std	Y+7, r27	; 0x07
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	ae 81       	ldd	r26, Y+6	; 0x06
    23c6:	bf 81       	ldd	r27, Y+7	; 0x07
    23c8:	9c 01       	movw	r18, r24
    23ca:	ad 01       	movw	r20, r26
    23cc:	21 50       	subi	r18, 0x01	; 1
    23ce:	30 40       	sbci	r19, 0x00	; 0
    23d0:	40 40       	sbci	r20, 0x00	; 0
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	2f 3f       	cpi	r18, 0xFF	; 255
    23d6:	ef ef       	ldi	r30, 0xFF	; 255
    23d8:	3e 07       	cpc	r19, r30
    23da:	ef ef       	ldi	r30, 0xFF	; 255
    23dc:	4e 07       	cpc	r20, r30
    23de:	ef e3       	ldi	r30, 0x3F	; 63
    23e0:	5e 07       	cpc	r21, r30
    23e2:	08 f3       	brcs	.-62     	; 0x23a6 <_fpadd_parts+0x1e6>
    23e4:	0b c0       	rjmp	.+22     	; 0x23fc <_fpadd_parts+0x23c>
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	ca 82       	std	Y+2, r12	; 0x02
    23ea:	db 82       	std	Y+3, r13	; 0x03
    23ec:	2e 0d       	add	r18, r14
    23ee:	3f 1d       	adc	r19, r15
    23f0:	40 1f       	adc	r20, r16
    23f2:	51 1f       	adc	r21, r17
    23f4:	2c 83       	std	Y+4, r18	; 0x04
    23f6:	3d 83       	std	Y+5, r19	; 0x05
    23f8:	4e 83       	std	Y+6, r20	; 0x06
    23fa:	5f 83       	std	Y+7, r21	; 0x07
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	88 83       	st	Y, r24
    2400:	2c 81       	ldd	r18, Y+4	; 0x04
    2402:	3d 81       	ldd	r19, Y+5	; 0x05
    2404:	4e 81       	ldd	r20, Y+6	; 0x06
    2406:	5f 81       	ldd	r21, Y+7	; 0x07
    2408:	57 ff       	sbrs	r21, 7
    240a:	1d c0       	rjmp	.+58     	; 0x2446 <_fpadd_parts+0x286>
    240c:	da 01       	movw	r26, r20
    240e:	c9 01       	movw	r24, r18
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	8c 83       	std	Y+4, r24	; 0x04
    242a:	9d 83       	std	Y+5, r25	; 0x05
    242c:	ae 83       	std	Y+6, r26	; 0x06
    242e:	bf 83       	std	Y+7, r27	; 0x07
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	9b 81       	ldd	r25, Y+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	8a 83       	std	Y+2, r24	; 0x02
    2438:	9b 83       	std	Y+3, r25	; 0x03
    243a:	05 c0       	rjmp	.+10     	; 0x2446 <_fpadd_parts+0x286>
    243c:	ef e2       	ldi	r30, 0x2F	; 47
    243e:	f0 e2       	ldi	r31, 0x20	; 32
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <_fpadd_parts+0x288>
    2442:	fb 01       	movw	r30, r22
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <_fpadd_parts+0x288>
    2446:	fe 01       	movw	r30, r28
    2448:	cf 01       	movw	r24, r30
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	ee e0       	ldi	r30, 0x0E	; 14
    2450:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x8>

00002454 <__addsf3>:
    2454:	a0 e2       	ldi	r26, 0x20	; 32
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e0 e3       	ldi	r30, 0x30	; 48
    245a:	f2 e1       	ldi	r31, 0x12	; 18
    245c:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x18>
    2460:	69 83       	std	Y+1, r22	; 0x01
    2462:	7a 83       	std	Y+2, r23	; 0x02
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	9c 83       	std	Y+4, r25	; 0x04
    2468:	2d 83       	std	Y+5, r18	; 0x05
    246a:	3e 83       	std	Y+6, r19	; 0x06
    246c:	4f 83       	std	Y+7, r20	; 0x07
    246e:	58 87       	std	Y+8, r21	; 0x08
    2470:	89 e0       	ldi	r24, 0x09	; 9
    2472:	e8 2e       	mov	r14, r24
    2474:	f1 2c       	mov	r15, r1
    2476:	ec 0e       	add	r14, r28
    2478:	fd 1e       	adc	r15, r29
    247a:	ce 01       	movw	r24, r28
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	b7 01       	movw	r22, r14
    2480:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2484:	8e 01       	movw	r16, r28
    2486:	0f 5e       	subi	r16, 0xEF	; 239
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	ce 01       	movw	r24, r28
    248c:	05 96       	adiw	r24, 0x05	; 5
    248e:	b8 01       	movw	r22, r16
    2490:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_fpadd_parts>
    24a2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

000024ae <__subsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	8e 01       	movw	r16, r28
    24cc:	07 5f       	subi	r16, 0xF7	; 247
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	b8 01       	movw	r22, r16
    24d6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    24da:	91 e1       	ldi	r25, 0x11	; 17
    24dc:	e9 2e       	mov	r14, r25
    24de:	f1 2c       	mov	r15, r1
    24e0:	ec 0e       	add	r14, r28
    24e2:	fd 1e       	adc	r15, r29
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b7 01       	movw	r22, r14
    24ea:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    24ee:	8a 89       	ldd	r24, Y+18	; 0x12
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	89 27       	eor	r24, r25
    24f4:	8a 8b       	std	Y+18, r24	; 0x12
    24f6:	c8 01       	movw	r24, r16
    24f8:	b7 01       	movw	r22, r14
    24fa:	ae 01       	movw	r20, r28
    24fc:	47 5e       	subi	r20, 0xE7	; 231
    24fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2500:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_fpadd_parts>
    2504:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    2508:	a0 96       	adiw	r28, 0x20	; 32
    250a:	e6 e0       	ldi	r30, 0x06	; 6
    250c:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

00002510 <__mulsf3>:
    2510:	a0 e2       	ldi	r26, 0x20	; 32
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e8       	ldi	r30, 0x8E	; 142
    2516:	f2 e1       	ldi	r31, 0x12	; 18
    2518:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__prologue_saves__>
    251c:	69 83       	std	Y+1, r22	; 0x01
    251e:	7a 83       	std	Y+2, r23	; 0x02
    2520:	8b 83       	std	Y+3, r24	; 0x03
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	2d 83       	std	Y+5, r18	; 0x05
    2526:	3e 83       	std	Y+6, r19	; 0x06
    2528:	4f 83       	std	Y+7, r20	; 0x07
    252a:	58 87       	std	Y+8, r21	; 0x08
    252c:	ce 01       	movw	r24, r28
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	be 01       	movw	r22, r28
    2532:	67 5f       	subi	r22, 0xF7	; 247
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    253a:	ce 01       	movw	r24, r28
    253c:	05 96       	adiw	r24, 0x05	; 5
    253e:	be 01       	movw	r22, r28
    2540:	6f 5e       	subi	r22, 0xEF	; 239
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2548:	99 85       	ldd	r25, Y+9	; 0x09
    254a:	92 30       	cpi	r25, 0x02	; 2
    254c:	78 f0       	brcs	.+30     	; 0x256c <__mulsf3+0x5c>
    254e:	89 89       	ldd	r24, Y+17	; 0x11
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	c0 f0       	brcs	.+48     	; 0x2584 <__mulsf3+0x74>
    2554:	94 30       	cpi	r25, 0x04	; 4
    2556:	19 f4       	brne	.+6      	; 0x255e <__mulsf3+0x4e>
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	41 f4       	brne	.+16     	; 0x256c <__mulsf3+0x5c>
    255c:	cb c0       	rjmp	.+406    	; 0x26f4 <__mulsf3+0x1e4>
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	19 f4       	brne	.+6      	; 0x2568 <__mulsf3+0x58>
    2562:	92 30       	cpi	r25, 0x02	; 2
    2564:	79 f4       	brne	.+30     	; 0x2584 <__mulsf3+0x74>
    2566:	c6 c0       	rjmp	.+396    	; 0x26f4 <__mulsf3+0x1e4>
    2568:	92 30       	cpi	r25, 0x02	; 2
    256a:	51 f4       	brne	.+20     	; 0x2580 <__mulsf3+0x70>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2570:	9a 89       	ldd	r25, Y+18	; 0x12
    2572:	29 17       	cp	r18, r25
    2574:	09 f4       	brne	.+2      	; 0x2578 <__mulsf3+0x68>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	8a 87       	std	Y+10, r24	; 0x0a
    257a:	ce 01       	movw	r24, r28
    257c:	09 96       	adiw	r24, 0x09	; 9
    257e:	bc c0       	rjmp	.+376    	; 0x26f8 <__mulsf3+0x1e8>
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	51 f4       	brne	.+20     	; 0x2598 <__mulsf3+0x88>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	2a 85       	ldd	r18, Y+10	; 0x0a
    2588:	9a 89       	ldd	r25, Y+18	; 0x12
    258a:	29 17       	cp	r18, r25
    258c:	09 f4       	brne	.+2      	; 0x2590 <__mulsf3+0x80>
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	8a 8b       	std	Y+18, r24	; 0x12
    2592:	ce 01       	movw	r24, r28
    2594:	41 96       	adiw	r24, 0x11	; 17
    2596:	b0 c0       	rjmp	.+352    	; 0x26f8 <__mulsf3+0x1e8>
    2598:	6d 84       	ldd	r6, Y+13	; 0x0d
    259a:	7e 84       	ldd	r7, Y+14	; 0x0e
    259c:	8f 84       	ldd	r8, Y+15	; 0x0f
    259e:	98 88       	ldd	r9, Y+16	; 0x10
    25a0:	ed 88       	ldd	r14, Y+21	; 0x15
    25a2:	fe 88       	ldd	r15, Y+22	; 0x16
    25a4:	0f 89       	ldd	r16, Y+23	; 0x17
    25a6:	18 8d       	ldd	r17, Y+24	; 0x18
    25a8:	e0 e2       	ldi	r30, 0x20	; 32
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	dc 01       	movw	r26, r24
    25b2:	aa 24       	eor	r10, r10
    25b4:	bb 24       	eor	r11, r11
    25b6:	65 01       	movw	r12, r10
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	a9 01       	movw	r20, r18
    25be:	b3 01       	movw	r22, r6
    25c0:	61 70       	andi	r22, 0x01	; 1
    25c2:	70 70       	andi	r23, 0x00	; 0
    25c4:	61 15       	cp	r22, r1
    25c6:	71 05       	cpc	r23, r1
    25c8:	d1 f0       	breq	.+52     	; 0x25fe <__mulsf3+0xee>
    25ca:	2e 0d       	add	r18, r14
    25cc:	3f 1d       	adc	r19, r15
    25ce:	40 1f       	adc	r20, r16
    25d0:	51 1f       	adc	r21, r17
    25d2:	15 01       	movw	r2, r10
    25d4:	26 01       	movw	r4, r12
    25d6:	28 0e       	add	r2, r24
    25d8:	39 1e       	adc	r3, r25
    25da:	4a 1e       	adc	r4, r26
    25dc:	5b 1e       	adc	r5, r27
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	2e 15       	cp	r18, r14
    25e8:	3f 05       	cpc	r19, r15
    25ea:	40 07       	cpc	r20, r16
    25ec:	51 07       	cpc	r21, r17
    25ee:	18 f0       	brcs	.+6      	; 0x25f6 <__mulsf3+0xe6>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	dc 01       	movw	r26, r24
    25f6:	82 0d       	add	r24, r2
    25f8:	93 1d       	adc	r25, r3
    25fa:	a4 1d       	adc	r26, r4
    25fc:	b5 1d       	adc	r27, r5
    25fe:	aa 0c       	add	r10, r10
    2600:	bb 1c       	adc	r11, r11
    2602:	cc 1c       	adc	r12, r12
    2604:	dd 1c       	adc	r13, r13
    2606:	17 ff       	sbrs	r17, 7
    2608:	09 c0       	rjmp	.+18     	; 0x261c <__mulsf3+0x10c>
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	26 2e       	mov	r2, r22
    260e:	31 2c       	mov	r3, r1
    2610:	41 2c       	mov	r4, r1
    2612:	51 2c       	mov	r5, r1
    2614:	a2 28       	or	r10, r2
    2616:	b3 28       	or	r11, r3
    2618:	c4 28       	or	r12, r4
    261a:	d5 28       	or	r13, r5
    261c:	31 97       	sbiw	r30, 0x01	; 1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x122>
    2620:	ee 0c       	add	r14, r14
    2622:	ff 1c       	adc	r15, r15
    2624:	00 1f       	adc	r16, r16
    2626:	11 1f       	adc	r17, r17
    2628:	96 94       	lsr	r9
    262a:	87 94       	ror	r8
    262c:	77 94       	ror	r7
    262e:	67 94       	ror	r6
    2630:	c6 cf       	rjmp	.-116    	; 0x25be <__mulsf3+0xae>
    2632:	6b 89       	ldd	r22, Y+19	; 0x13
    2634:	7c 89       	ldd	r23, Y+20	; 0x14
    2636:	eb 85       	ldd	r30, Y+11	; 0x0b
    2638:	fc 85       	ldd	r31, Y+12	; 0x0c
    263a:	6e 0f       	add	r22, r30
    263c:	7f 1f       	adc	r23, r31
    263e:	6e 5f       	subi	r22, 0xFE	; 254
    2640:	7f 4f       	sbci	r23, 0xFF	; 255
    2642:	6b 8f       	std	Y+27, r22	; 0x1b
    2644:	7c 8f       	std	Y+28, r23	; 0x1c
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	ea 85       	ldd	r30, Y+10	; 0x0a
    264a:	7a 89       	ldd	r23, Y+18	; 0x12
    264c:	e7 17       	cp	r30, r23
    264e:	09 f4       	brne	.+2      	; 0x2652 <__mulsf3+0x142>
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	6a 8f       	std	Y+26, r22	; 0x1a
    2654:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2656:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2658:	10 c0       	rjmp	.+32     	; 0x267a <__mulsf3+0x16a>
    265a:	fc 01       	movw	r30, r24
    265c:	e1 70       	andi	r30, 0x01	; 1
    265e:	f0 70       	andi	r31, 0x00	; 0
    2660:	30 97       	sbiw	r30, 0x00	; 0
    2662:	29 f0       	breq	.+10     	; 0x266e <__mulsf3+0x15e>
    2664:	56 95       	lsr	r21
    2666:	47 95       	ror	r20
    2668:	37 95       	ror	r19
    266a:	27 95       	ror	r18
    266c:	50 68       	ori	r21, 0x80	; 128
    266e:	b6 95       	lsr	r27
    2670:	a7 95       	ror	r26
    2672:	97 95       	ror	r25
    2674:	87 95       	ror	r24
    2676:	6f 5f       	subi	r22, 0xFF	; 255
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	b7 fd       	sbrc	r27, 7
    267c:	ee cf       	rjmp	.-36     	; 0x265a <__mulsf3+0x14a>
    267e:	0c c0       	rjmp	.+24     	; 0x2698 <__mulsf3+0x188>
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	aa 1f       	adc	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	57 fd       	sbrc	r21, 7
    268a:	81 60       	ori	r24, 0x01	; 1
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	44 1f       	adc	r20, r20
    2692:	55 1f       	adc	r21, r21
    2694:	61 50       	subi	r22, 0x01	; 1
    2696:	70 40       	sbci	r23, 0x00	; 0
    2698:	80 30       	cpi	r24, 0x00	; 0
    269a:	e0 e0       	ldi	r30, 0x00	; 0
    269c:	9e 07       	cpc	r25, r30
    269e:	e0 e0       	ldi	r30, 0x00	; 0
    26a0:	ae 07       	cpc	r26, r30
    26a2:	e0 e4       	ldi	r30, 0x40	; 64
    26a4:	be 07       	cpc	r27, r30
    26a6:	60 f3       	brcs	.-40     	; 0x2680 <__mulsf3+0x170>
    26a8:	6b 8f       	std	Y+27, r22	; 0x1b
    26aa:	7c 8f       	std	Y+28, r23	; 0x1c
    26ac:	6f e7       	ldi	r22, 0x7F	; 127
    26ae:	e6 2e       	mov	r14, r22
    26b0:	f1 2c       	mov	r15, r1
    26b2:	01 2d       	mov	r16, r1
    26b4:	11 2d       	mov	r17, r1
    26b6:	e8 22       	and	r14, r24
    26b8:	f9 22       	and	r15, r25
    26ba:	0a 23       	and	r16, r26
    26bc:	1b 23       	and	r17, r27
    26be:	60 e4       	ldi	r22, 0x40	; 64
    26c0:	e6 16       	cp	r14, r22
    26c2:	f1 04       	cpc	r15, r1
    26c4:	01 05       	cpc	r16, r1
    26c6:	11 05       	cpc	r17, r1
    26c8:	61 f4       	brne	.+24     	; 0x26e2 <__mulsf3+0x1d2>
    26ca:	87 fd       	sbrc	r24, 7
    26cc:	0a c0       	rjmp	.+20     	; 0x26e2 <__mulsf3+0x1d2>
    26ce:	21 15       	cp	r18, r1
    26d0:	31 05       	cpc	r19, r1
    26d2:	41 05       	cpc	r20, r1
    26d4:	51 05       	cpc	r21, r1
    26d6:	29 f0       	breq	.+10     	; 0x26e2 <__mulsf3+0x1d2>
    26d8:	80 5c       	subi	r24, 0xC0	; 192
    26da:	9f 4f       	sbci	r25, 0xFF	; 255
    26dc:	af 4f       	sbci	r26, 0xFF	; 255
    26de:	bf 4f       	sbci	r27, 0xFF	; 255
    26e0:	80 78       	andi	r24, 0x80	; 128
    26e2:	8d 8f       	std	Y+29, r24	; 0x1d
    26e4:	9e 8f       	std	Y+30, r25	; 0x1e
    26e6:	af 8f       	std	Y+31, r26	; 0x1f
    26e8:	b8 a3       	std	Y+32, r27	; 0x20
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	89 8f       	std	Y+25, r24	; 0x19
    26ee:	ce 01       	movw	r24, r28
    26f0:	49 96       	adiw	r24, 0x19	; 25
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <__mulsf3+0x1e8>
    26f4:	8f e2       	ldi	r24, 0x2F	; 47
    26f6:	90 e2       	ldi	r25, 0x20	; 32
    26f8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    26fc:	a0 96       	adiw	r28, 0x20	; 32
    26fe:	e2 e1       	ldi	r30, 0x12	; 18
    2700:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__>

00002704 <__divsf3>:
    2704:	a8 e1       	ldi	r26, 0x18	; 24
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e1       	ldi	r31, 0x13	; 19
    270c:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x10>
    2710:	69 83       	std	Y+1, r22	; 0x01
    2712:	7a 83       	std	Y+2, r23	; 0x02
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	2d 83       	std	Y+5, r18	; 0x05
    271a:	3e 83       	std	Y+6, r19	; 0x06
    271c:	4f 83       	std	Y+7, r20	; 0x07
    271e:	58 87       	std	Y+8, r21	; 0x08
    2720:	8e 01       	movw	r16, r28
    2722:	07 5f       	subi	r16, 0xF7	; 247
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	b8 01       	movw	r22, r16
    272c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2730:	81 e1       	ldi	r24, 0x11	; 17
    2732:	e8 2e       	mov	r14, r24
    2734:	f1 2c       	mov	r15, r1
    2736:	ec 0e       	add	r14, r28
    2738:	fd 1e       	adc	r15, r29
    273a:	ce 01       	movw	r24, r28
    273c:	05 96       	adiw	r24, 0x05	; 5
    273e:	b7 01       	movw	r22, r14
    2740:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2744:	99 85       	ldd	r25, Y+9	; 0x09
    2746:	92 30       	cpi	r25, 0x02	; 2
    2748:	08 f4       	brcc	.+2      	; 0x274c <__divsf3+0x48>
    274a:	83 c0       	rjmp	.+262    	; 0x2852 <__stack+0x53>
    274c:	89 89       	ldd	r24, Y+17	; 0x11
    274e:	82 30       	cpi	r24, 0x02	; 2
    2750:	08 f4       	brcc	.+2      	; 0x2754 <__divsf3+0x50>
    2752:	7b c0       	rjmp	.+246    	; 0x284a <__stack+0x4b>
    2754:	2a 85       	ldd	r18, Y+10	; 0x0a
    2756:	3a 89       	ldd	r19, Y+18	; 0x12
    2758:	23 27       	eor	r18, r19
    275a:	2a 87       	std	Y+10, r18	; 0x0a
    275c:	94 30       	cpi	r25, 0x04	; 4
    275e:	11 f0       	breq	.+4      	; 0x2764 <__divsf3+0x60>
    2760:	92 30       	cpi	r25, 0x02	; 2
    2762:	21 f4       	brne	.+8      	; 0x276c <__divsf3+0x68>
    2764:	98 17       	cp	r25, r24
    2766:	09 f0       	breq	.+2      	; 0x276a <__divsf3+0x66>
    2768:	6c c0       	rjmp	.+216    	; 0x2842 <__stack+0x43>
    276a:	71 c0       	rjmp	.+226    	; 0x284e <__stack+0x4f>
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	39 f4       	brne	.+14     	; 0x277e <__divsf3+0x7a>
    2770:	1d 86       	std	Y+13, r1	; 0x0d
    2772:	1e 86       	std	Y+14, r1	; 0x0e
    2774:	1f 86       	std	Y+15, r1	; 0x0f
    2776:	18 8a       	std	Y+16, r1	; 0x10
    2778:	1b 86       	std	Y+11, r1	; 0x0b
    277a:	1c 86       	std	Y+12, r1	; 0x0c
    277c:	6a c0       	rjmp	.+212    	; 0x2852 <__stack+0x53>
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	19 f4       	brne	.+6      	; 0x2788 <__divsf3+0x84>
    2782:	84 e0       	ldi	r24, 0x04	; 4
    2784:	89 87       	std	Y+9, r24	; 0x09
    2786:	65 c0       	rjmp	.+202    	; 0x2852 <__stack+0x53>
    2788:	8b 85       	ldd	r24, Y+11	; 0x0b
    278a:	9c 85       	ldd	r25, Y+12	; 0x0c
    278c:	2b 89       	ldd	r18, Y+19	; 0x13
    278e:	3c 89       	ldd	r19, Y+20	; 0x14
    2790:	82 1b       	sub	r24, r18
    2792:	93 0b       	sbc	r25, r19
    2794:	8b 87       	std	Y+11, r24	; 0x0b
    2796:	9c 87       	std	Y+12, r25	; 0x0c
    2798:	2d 85       	ldd	r18, Y+13	; 0x0d
    279a:	3e 85       	ldd	r19, Y+14	; 0x0e
    279c:	4f 85       	ldd	r20, Y+15	; 0x0f
    279e:	58 89       	ldd	r21, Y+16	; 0x10
    27a0:	ed 88       	ldd	r14, Y+21	; 0x15
    27a2:	fe 88       	ldd	r15, Y+22	; 0x16
    27a4:	0f 89       	ldd	r16, Y+23	; 0x17
    27a6:	18 8d       	ldd	r17, Y+24	; 0x18
    27a8:	2e 15       	cp	r18, r14
    27aa:	3f 05       	cpc	r19, r15
    27ac:	40 07       	cpc	r20, r16
    27ae:	51 07       	cpc	r21, r17
    27b0:	38 f4       	brcc	.+14     	; 0x27c0 <__divsf3+0xbc>
    27b2:	22 0f       	add	r18, r18
    27b4:	33 1f       	adc	r19, r19
    27b6:	44 1f       	adc	r20, r20
    27b8:	55 1f       	adc	r21, r21
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    27c0:	6f e1       	ldi	r22, 0x1F	; 31
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	a1 2c       	mov	r10, r1
    27c6:	b1 2c       	mov	r11, r1
    27c8:	c1 2c       	mov	r12, r1
    27ca:	a0 e4       	ldi	r26, 0x40	; 64
    27cc:	da 2e       	mov	r13, r26
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	dc 01       	movw	r26, r24
    27d4:	2e 15       	cp	r18, r14
    27d6:	3f 05       	cpc	r19, r15
    27d8:	40 07       	cpc	r20, r16
    27da:	51 07       	cpc	r21, r17
    27dc:	40 f0       	brcs	.+16     	; 0x27ee <__divsf3+0xea>
    27de:	8a 29       	or	r24, r10
    27e0:	9b 29       	or	r25, r11
    27e2:	ac 29       	or	r26, r12
    27e4:	bd 29       	or	r27, r13
    27e6:	2e 19       	sub	r18, r14
    27e8:	3f 09       	sbc	r19, r15
    27ea:	40 0b       	sbc	r20, r16
    27ec:	51 0b       	sbc	r21, r17
    27ee:	d6 94       	lsr	r13
    27f0:	c7 94       	ror	r12
    27f2:	b7 94       	ror	r11
    27f4:	a7 94       	ror	r10
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	44 1f       	adc	r20, r20
    27fc:	55 1f       	adc	r21, r21
    27fe:	61 50       	subi	r22, 0x01	; 1
    2800:	70 40       	sbci	r23, 0x00	; 0
    2802:	41 f7       	brne	.-48     	; 0x27d4 <__divsf3+0xd0>
    2804:	6f e7       	ldi	r22, 0x7F	; 127
    2806:	e6 2e       	mov	r14, r22
    2808:	f1 2c       	mov	r15, r1
    280a:	01 2d       	mov	r16, r1
    280c:	11 2d       	mov	r17, r1
    280e:	e8 22       	and	r14, r24
    2810:	f9 22       	and	r15, r25
    2812:	0a 23       	and	r16, r26
    2814:	1b 23       	and	r17, r27
    2816:	60 e4       	ldi	r22, 0x40	; 64
    2818:	e6 16       	cp	r14, r22
    281a:	f1 04       	cpc	r15, r1
    281c:	01 05       	cpc	r16, r1
    281e:	11 05       	cpc	r17, r1
    2820:	61 f4       	brne	.+24     	; 0x283a <__stack+0x3b>
    2822:	87 fd       	sbrc	r24, 7
    2824:	0a c0       	rjmp	.+20     	; 0x283a <__stack+0x3b>
    2826:	21 15       	cp	r18, r1
    2828:	31 05       	cpc	r19, r1
    282a:	41 05       	cpc	r20, r1
    282c:	51 05       	cpc	r21, r1
    282e:	29 f0       	breq	.+10     	; 0x283a <__stack+0x3b>
    2830:	80 5c       	subi	r24, 0xC0	; 192
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	af 4f       	sbci	r26, 0xFF	; 255
    2836:	bf 4f       	sbci	r27, 0xFF	; 255
    2838:	80 78       	andi	r24, 0x80	; 128
    283a:	8d 87       	std	Y+13, r24	; 0x0d
    283c:	9e 87       	std	Y+14, r25	; 0x0e
    283e:	af 87       	std	Y+15, r26	; 0x0f
    2840:	b8 8b       	std	Y+16, r27	; 0x10
    2842:	8e 01       	movw	r16, r28
    2844:	07 5f       	subi	r16, 0xF7	; 247
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <__stack+0x53>
    284a:	87 01       	movw	r16, r14
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <__stack+0x53>
    284e:	0f e2       	ldi	r16, 0x2F	; 47
    2850:	10 e2       	ldi	r17, 0x20	; 32
    2852:	c8 01       	movw	r24, r16
    2854:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    2858:	68 96       	adiw	r28, 0x18	; 24
    285a:	ea e0       	ldi	r30, 0x0A	; 10
    285c:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x10>

00002860 <__gtsf2>:
    2860:	a8 e1       	ldi	r26, 0x18	; 24
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e3       	ldi	r30, 0x36	; 54
    2866:	f4 e1       	ldi	r31, 0x14	; 20
    2868:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x18>
    286c:	69 83       	std	Y+1, r22	; 0x01
    286e:	7a 83       	std	Y+2, r23	; 0x02
    2870:	8b 83       	std	Y+3, r24	; 0x03
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	2d 83       	std	Y+5, r18	; 0x05
    2876:	3e 83       	std	Y+6, r19	; 0x06
    2878:	4f 83       	std	Y+7, r20	; 0x07
    287a:	58 87       	std	Y+8, r21	; 0x08
    287c:	8e 01       	movw	r16, r28
    287e:	07 5f       	subi	r16, 0xF7	; 247
    2880:	1f 4f       	sbci	r17, 0xFF	; 255
    2882:	ce 01       	movw	r24, r28
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	b8 01       	movw	r22, r16
    2888:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    288c:	81 e1       	ldi	r24, 0x11	; 17
    288e:	e8 2e       	mov	r14, r24
    2890:	f1 2c       	mov	r15, r1
    2892:	ec 0e       	add	r14, r28
    2894:	fd 1e       	adc	r15, r29
    2896:	ce 01       	movw	r24, r28
    2898:	05 96       	adiw	r24, 0x05	; 5
    289a:	b7 01       	movw	r22, r14
    289c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	40 f0       	brcs	.+16     	; 0x28b6 <__gtsf2+0x56>
    28a6:	89 89       	ldd	r24, Y+17	; 0x11
    28a8:	82 30       	cpi	r24, 0x02	; 2
    28aa:	28 f0       	brcs	.+10     	; 0x28b6 <__gtsf2+0x56>
    28ac:	c8 01       	movw	r24, r16
    28ae:	b7 01       	movw	r22, r14
    28b0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__fpcmp_parts_f>
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <__gtsf2+0x58>
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	68 96       	adiw	r28, 0x18	; 24
    28ba:	e6 e0       	ldi	r30, 0x06	; 6
    28bc:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

000028c0 <__gesf2>:
    28c0:	a8 e1       	ldi	r26, 0x18	; 24
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e6 e6       	ldi	r30, 0x66	; 102
    28c6:	f4 e1       	ldi	r31, 0x14	; 20
    28c8:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x18>
    28cc:	69 83       	std	Y+1, r22	; 0x01
    28ce:	7a 83       	std	Y+2, r23	; 0x02
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	2d 83       	std	Y+5, r18	; 0x05
    28d6:	3e 83       	std	Y+6, r19	; 0x06
    28d8:	4f 83       	std	Y+7, r20	; 0x07
    28da:	58 87       	std	Y+8, r21	; 0x08
    28dc:	8e 01       	movw	r16, r28
    28de:	07 5f       	subi	r16, 0xF7	; 247
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	ce 01       	movw	r24, r28
    28e4:	01 96       	adiw	r24, 0x01	; 1
    28e6:	b8 01       	movw	r22, r16
    28e8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    28ec:	81 e1       	ldi	r24, 0x11	; 17
    28ee:	e8 2e       	mov	r14, r24
    28f0:	f1 2c       	mov	r15, r1
    28f2:	ec 0e       	add	r14, r28
    28f4:	fd 1e       	adc	r15, r29
    28f6:	ce 01       	movw	r24, r28
    28f8:	05 96       	adiw	r24, 0x05	; 5
    28fa:	b7 01       	movw	r22, r14
    28fc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	82 30       	cpi	r24, 0x02	; 2
    2904:	40 f0       	brcs	.+16     	; 0x2916 <__gesf2+0x56>
    2906:	89 89       	ldd	r24, Y+17	; 0x11
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	28 f0       	brcs	.+10     	; 0x2916 <__gesf2+0x56>
    290c:	c8 01       	movw	r24, r16
    290e:	b7 01       	movw	r22, r14
    2910:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__fpcmp_parts_f>
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <__gesf2+0x58>
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	68 96       	adiw	r28, 0x18	; 24
    291a:	e6 e0       	ldi	r30, 0x06	; 6
    291c:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

00002920 <__ltsf2>:
    2920:	a8 e1       	ldi	r26, 0x18	; 24
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e6 e9       	ldi	r30, 0x96	; 150
    2926:	f4 e1       	ldi	r31, 0x14	; 20
    2928:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x18>
    292c:	69 83       	std	Y+1, r22	; 0x01
    292e:	7a 83       	std	Y+2, r23	; 0x02
    2930:	8b 83       	std	Y+3, r24	; 0x03
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	2d 83       	std	Y+5, r18	; 0x05
    2936:	3e 83       	std	Y+6, r19	; 0x06
    2938:	4f 83       	std	Y+7, r20	; 0x07
    293a:	58 87       	std	Y+8, r21	; 0x08
    293c:	8e 01       	movw	r16, r28
    293e:	07 5f       	subi	r16, 0xF7	; 247
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	ce 01       	movw	r24, r28
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	b8 01       	movw	r22, r16
    2948:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    294c:	81 e1       	ldi	r24, 0x11	; 17
    294e:	e8 2e       	mov	r14, r24
    2950:	f1 2c       	mov	r15, r1
    2952:	ec 0e       	add	r14, r28
    2954:	fd 1e       	adc	r15, r29
    2956:	ce 01       	movw	r24, r28
    2958:	05 96       	adiw	r24, 0x05	; 5
    295a:	b7 01       	movw	r22, r14
    295c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	40 f0       	brcs	.+16     	; 0x2976 <__ltsf2+0x56>
    2966:	89 89       	ldd	r24, Y+17	; 0x11
    2968:	82 30       	cpi	r24, 0x02	; 2
    296a:	28 f0       	brcs	.+10     	; 0x2976 <__ltsf2+0x56>
    296c:	c8 01       	movw	r24, r16
    296e:	b7 01       	movw	r22, r14
    2970:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__fpcmp_parts_f>
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <__ltsf2+0x58>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	68 96       	adiw	r28, 0x18	; 24
    297a:	e6 e0       	ldi	r30, 0x06	; 6
    297c:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

00002980 <__fixsfsi>:
    2980:	ac e0       	ldi	r26, 0x0C	; 12
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e6 ec       	ldi	r30, 0xC6	; 198
    2986:	f4 e1       	ldi	r31, 0x14	; 20
    2988:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x20>
    298c:	69 83       	std	Y+1, r22	; 0x01
    298e:	7a 83       	std	Y+2, r23	; 0x02
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	ce 01       	movw	r24, r28
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	be 01       	movw	r22, r28
    299a:	6b 5f       	subi	r22, 0xFB	; 251
    299c:	7f 4f       	sbci	r23, 0xFF	; 255
    299e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__unpack_f>
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	81 f1       	breq	.+96     	; 0x2a08 <__fixsfsi+0x88>
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	70 f1       	brcs	.+92     	; 0x2a08 <__fixsfsi+0x88>
    29ac:	84 30       	cpi	r24, 0x04	; 4
    29ae:	21 f4       	brne	.+8      	; 0x29b8 <__fixsfsi+0x38>
    29b0:	8e 81       	ldd	r24, Y+6	; 0x06
    29b2:	88 23       	and	r24, r24
    29b4:	69 f1       	breq	.+90     	; 0x2a10 <__fixsfsi+0x90>
    29b6:	0a c0       	rjmp	.+20     	; 0x29cc <__fixsfsi+0x4c>
    29b8:	2f 81       	ldd	r18, Y+7	; 0x07
    29ba:	38 85       	ldd	r19, Y+8	; 0x08
    29bc:	37 fd       	sbrc	r19, 7
    29be:	24 c0       	rjmp	.+72     	; 0x2a08 <__fixsfsi+0x88>
    29c0:	6e 81       	ldd	r22, Y+6	; 0x06
    29c2:	2f 31       	cpi	r18, 0x1F	; 31
    29c4:	31 05       	cpc	r19, r1
    29c6:	3c f0       	brlt	.+14     	; 0x29d6 <__fixsfsi+0x56>
    29c8:	66 23       	and	r22, r22
    29ca:	11 f1       	breq	.+68     	; 0x2a10 <__fixsfsi+0x90>
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e8       	ldi	r21, 0x80	; 128
    29d4:	21 c0       	rjmp	.+66     	; 0x2a18 <__fixsfsi+0x98>
    29d6:	8e e1       	ldi	r24, 0x1E	; 30
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	82 1b       	sub	r24, r18
    29dc:	93 0b       	sbc	r25, r19
    29de:	29 85       	ldd	r18, Y+9	; 0x09
    29e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    29e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    29e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <__fixsfsi+0x70>
    29e8:	56 95       	lsr	r21
    29ea:	47 95       	ror	r20
    29ec:	37 95       	ror	r19
    29ee:	27 95       	ror	r18
    29f0:	8a 95       	dec	r24
    29f2:	d2 f7       	brpl	.-12     	; 0x29e8 <__fixsfsi+0x68>
    29f4:	66 23       	and	r22, r22
    29f6:	81 f0       	breq	.+32     	; 0x2a18 <__fixsfsi+0x98>
    29f8:	50 95       	com	r21
    29fa:	40 95       	com	r20
    29fc:	30 95       	com	r19
    29fe:	21 95       	neg	r18
    2a00:	3f 4f       	sbci	r19, 0xFF	; 255
    2a02:	4f 4f       	sbci	r20, 0xFF	; 255
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	08 c0       	rjmp	.+16     	; 0x2a18 <__fixsfsi+0x98>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	a9 01       	movw	r20, r18
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <__fixsfsi+0x98>
    2a10:	2f ef       	ldi	r18, 0xFF	; 255
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f ef       	ldi	r20, 0xFF	; 255
    2a16:	5f e7       	ldi	r21, 0x7F	; 127
    2a18:	b9 01       	movw	r22, r18
    2a1a:	ca 01       	movw	r24, r20
    2a1c:	2c 96       	adiw	r28, 0x0c	; 12
    2a1e:	e2 e0       	ldi	r30, 0x02	; 2
    2a20:	0c 94 05 18 	jmp	0x300a	; 0x300a <__epilogue_restores__+0x20>

00002a24 <__floatunsisf>:
    2a24:	a8 e0       	ldi	r26, 0x08	; 8
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e8 e1       	ldi	r30, 0x18	; 24
    2a2a:	f5 e1       	ldi	r31, 0x15	; 21
    2a2c:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__+0x14>
    2a30:	7b 01       	movw	r14, r22
    2a32:	8c 01       	movw	r16, r24
    2a34:	1a 82       	std	Y+2, r1	; 0x02
    2a36:	61 15       	cp	r22, r1
    2a38:	71 05       	cpc	r23, r1
    2a3a:	81 05       	cpc	r24, r1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	19 f4       	brne	.+6      	; 0x2a46 <__floatunsisf+0x22>
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	5f c0       	rjmp	.+190    	; 0x2b04 <__floatunsisf+0xe0>
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	8e e1       	ldi	r24, 0x1E	; 30
    2a4c:	c8 2e       	mov	r12, r24
    2a4e:	d1 2c       	mov	r13, r1
    2a50:	cb 82       	std	Y+3, r12	; 0x03
    2a52:	dc 82       	std	Y+4, r13	; 0x04
    2a54:	ed 82       	std	Y+5, r14	; 0x05
    2a56:	fe 82       	std	Y+6, r15	; 0x06
    2a58:	0f 83       	std	Y+7, r16	; 0x07
    2a5a:	18 87       	std	Y+8, r17	; 0x08
    2a5c:	c8 01       	movw	r24, r16
    2a5e:	b7 01       	movw	r22, r14
    2a60:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__clzsi2>
    2a64:	fc 01       	movw	r30, r24
    2a66:	31 97       	sbiw	r30, 0x01	; 1
    2a68:	f7 ff       	sbrs	r31, 7
    2a6a:	3a c0       	rjmp	.+116    	; 0x2ae0 <__floatunsisf+0xbc>
    2a6c:	aa 27       	eor	r26, r26
    2a6e:	bb 27       	eor	r27, r27
    2a70:	ae 1b       	sub	r26, r30
    2a72:	bf 0b       	sbc	r27, r31
    2a74:	21 e0       	ldi	r18, 0x01	; 1
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	0a 2e       	mov	r0, r26
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <__floatunsisf+0x64>
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	44 1f       	adc	r20, r20
    2a86:	55 1f       	adc	r21, r21
    2a88:	0a 94       	dec	r0
    2a8a:	d2 f7       	brpl	.-12     	; 0x2a80 <__floatunsisf+0x5c>
    2a8c:	21 50       	subi	r18, 0x01	; 1
    2a8e:	30 40       	sbci	r19, 0x00	; 0
    2a90:	40 40       	sbci	r20, 0x00	; 0
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	2e 21       	and	r18, r14
    2a96:	3f 21       	and	r19, r15
    2a98:	40 23       	and	r20, r16
    2a9a:	51 23       	and	r21, r17
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	21 15       	cp	r18, r1
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	41 05       	cpc	r20, r1
    2aaa:	51 05       	cpc	r21, r1
    2aac:	19 f4       	brne	.+6      	; 0x2ab4 <__floatunsisf+0x90>
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	04 c0       	rjmp	.+8      	; 0x2abe <__floatunsisf+0x9a>
    2ab6:	16 95       	lsr	r17
    2ab8:	07 95       	ror	r16
    2aba:	f7 94       	ror	r15
    2abc:	e7 94       	ror	r14
    2abe:	aa 95       	dec	r26
    2ac0:	d2 f7       	brpl	.-12     	; 0x2ab6 <__floatunsisf+0x92>
    2ac2:	e6 2a       	or	r14, r22
    2ac4:	f7 2a       	or	r15, r23
    2ac6:	08 2b       	or	r16, r24
    2ac8:	19 2b       	or	r17, r25
    2aca:	ed 82       	std	Y+5, r14	; 0x05
    2acc:	fe 82       	std	Y+6, r15	; 0x06
    2ace:	0f 83       	std	Y+7, r16	; 0x07
    2ad0:	18 87       	std	Y+8, r17	; 0x08
    2ad2:	8e e1       	ldi	r24, 0x1E	; 30
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	8e 1b       	sub	r24, r30
    2ad8:	9f 0b       	sbc	r25, r31
    2ada:	8b 83       	std	Y+3, r24	; 0x03
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	12 c0       	rjmp	.+36     	; 0x2b04 <__floatunsisf+0xe0>
    2ae0:	30 97       	sbiw	r30, 0x00	; 0
    2ae2:	81 f0       	breq	.+32     	; 0x2b04 <__floatunsisf+0xe0>
    2ae4:	0e 2e       	mov	r0, r30
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <__floatunsisf+0xcc>
    2ae8:	ee 0c       	add	r14, r14
    2aea:	ff 1c       	adc	r15, r15
    2aec:	00 1f       	adc	r16, r16
    2aee:	11 1f       	adc	r17, r17
    2af0:	0a 94       	dec	r0
    2af2:	d2 f7       	brpl	.-12     	; 0x2ae8 <__floatunsisf+0xc4>
    2af4:	ed 82       	std	Y+5, r14	; 0x05
    2af6:	fe 82       	std	Y+6, r15	; 0x06
    2af8:	0f 83       	std	Y+7, r16	; 0x07
    2afa:	18 87       	std	Y+8, r17	; 0x08
    2afc:	ce 1a       	sub	r12, r30
    2afe:	df 0a       	sbc	r13, r31
    2b00:	cb 82       	std	Y+3, r12	; 0x03
    2b02:	dc 82       	std	Y+4, r13	; 0x04
    2b04:	ce 01       	movw	r24, r28
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    2b0c:	28 96       	adiw	r28, 0x08	; 8
    2b0e:	e8 e0       	ldi	r30, 0x08	; 8
    2b10:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__epilogue_restores__+0x14>

00002b14 <__clzsi2>:
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	7b 01       	movw	r14, r22
    2b26:	8c 01       	movw	r16, r24
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	e8 16       	cp	r14, r24
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	f8 06       	cpc	r15, r24
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	08 07       	cpc	r16, r24
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	18 07       	cpc	r17, r24
    2b38:	58 f4       	brcc	.+22     	; 0x2b50 <__clzsi2+0x3c>
    2b3a:	ef ef       	ldi	r30, 0xFF	; 255
    2b3c:	ee 16       	cp	r14, r30
    2b3e:	f1 04       	cpc	r15, r1
    2b40:	01 05       	cpc	r16, r1
    2b42:	11 05       	cpc	r17, r1
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <__clzsi2+0x34>
    2b46:	90 f4       	brcc	.+36     	; 0x2b6c <__clzsi2+0x58>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	17 c0       	rjmp	.+46     	; 0x2b7e <__clzsi2+0x6a>
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	ef 16       	cp	r14, r31
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	ff 06       	cpc	r15, r31
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	0f 07       	cpc	r16, r31
    2b5c:	f1 e0       	ldi	r31, 0x01	; 1
    2b5e:	1f 07       	cpc	r17, r31
    2b60:	50 f4       	brcc	.+20     	; 0x2b76 <__clzsi2+0x62>
    2b62:	80 e1       	ldi	r24, 0x10	; 16
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	09 c0       	rjmp	.+18     	; 0x2b7e <__clzsi2+0x6a>
    2b6c:	88 e0       	ldi	r24, 0x08	; 8
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__clzsi2+0x6a>
    2b76:	88 e1       	ldi	r24, 0x18	; 24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	20 e2       	ldi	r18, 0x20	; 32
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	28 1b       	sub	r18, r24
    2b88:	39 0b       	sbc	r19, r25
    2b8a:	4a 0b       	sbc	r20, r26
    2b8c:	5b 0b       	sbc	r21, r27
    2b8e:	57 01       	movw	r10, r14
    2b90:	68 01       	movw	r12, r16
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__clzsi2+0x88>
    2b94:	d6 94       	lsr	r13
    2b96:	c7 94       	ror	r12
    2b98:	b7 94       	ror	r11
    2b9a:	a7 94       	ror	r10
    2b9c:	8a 95       	dec	r24
    2b9e:	d2 f7       	brpl	.-12     	; 0x2b94 <__clzsi2+0x80>
    2ba0:	d6 01       	movw	r26, r12
    2ba2:	c5 01       	movw	r24, r10
    2ba4:	89 5c       	subi	r24, 0xC9	; 201
    2ba6:	9f 4d       	sbci	r25, 0xDF	; 223
    2ba8:	fc 01       	movw	r30, r24
    2baa:	80 81       	ld	r24, Z
    2bac:	28 1b       	sub	r18, r24
    2bae:	31 09       	sbc	r19, r1
    2bb0:	41 09       	sbc	r20, r1
    2bb2:	51 09       	sbc	r21, r1
    2bb4:	c9 01       	movw	r24, r18
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	bf 90       	pop	r11
    2bc4:	af 90       	pop	r10
    2bc6:	08 95       	ret

00002bc8 <__pack_f>:
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	24 81       	ldd	r18, Z+4	; 0x04
    2bd8:	35 81       	ldd	r19, Z+5	; 0x05
    2bda:	46 81       	ldd	r20, Z+6	; 0x06
    2bdc:	57 81       	ldd	r21, Z+7	; 0x07
    2bde:	61 81       	ldd	r22, Z+1	; 0x01
    2be0:	80 81       	ld	r24, Z
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	20 f4       	brcc	.+8      	; 0x2bee <__pack_f+0x26>
    2be6:	40 61       	ori	r20, 0x10	; 16
    2be8:	ef ef       	ldi	r30, 0xFF	; 255
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	a3 c0       	rjmp	.+326    	; 0x2d34 <__pack_f+0x16c>
    2bee:	84 30       	cpi	r24, 0x04	; 4
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <__pack_f+0x2c>
    2bf2:	9b c0       	rjmp	.+310    	; 0x2d2a <__pack_f+0x162>
    2bf4:	82 30       	cpi	r24, 0x02	; 2
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <__pack_f+0x32>
    2bf8:	92 c0       	rjmp	.+292    	; 0x2d1e <__pack_f+0x156>
    2bfa:	21 15       	cp	r18, r1
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	41 05       	cpc	r20, r1
    2c00:	51 05       	cpc	r21, r1
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <__pack_f+0x3e>
    2c04:	8f c0       	rjmp	.+286    	; 0x2d24 <__pack_f+0x15c>
    2c06:	02 80       	ldd	r0, Z+2	; 0x02
    2c08:	f3 81       	ldd	r31, Z+3	; 0x03
    2c0a:	e0 2d       	mov	r30, r0
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	e2 38       	cpi	r30, 0x82	; 130
    2c10:	f8 07       	cpc	r31, r24
    2c12:	0c f0       	brlt	.+2      	; 0x2c16 <__pack_f+0x4e>
    2c14:	5a c0       	rjmp	.+180    	; 0x2cca <__pack_f+0x102>
    2c16:	c2 e8       	ldi	r28, 0x82	; 130
    2c18:	df ef       	ldi	r29, 0xFF	; 255
    2c1a:	ce 1b       	sub	r28, r30
    2c1c:	df 0b       	sbc	r29, r31
    2c1e:	ca 31       	cpi	r28, 0x1A	; 26
    2c20:	d1 05       	cpc	r29, r1
    2c22:	6c f5       	brge	.+90     	; 0x2c7e <__pack_f+0xb6>
    2c24:	79 01       	movw	r14, r18
    2c26:	8a 01       	movw	r16, r20
    2c28:	0c 2e       	mov	r0, r28
    2c2a:	04 c0       	rjmp	.+8      	; 0x2c34 <__pack_f+0x6c>
    2c2c:	16 95       	lsr	r17
    2c2e:	07 95       	ror	r16
    2c30:	f7 94       	ror	r15
    2c32:	e7 94       	ror	r14
    2c34:	0a 94       	dec	r0
    2c36:	d2 f7       	brpl	.-12     	; 0x2c2c <__pack_f+0x64>
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e0       	ldi	r26, 0x00	; 0
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	0c 2e       	mov	r0, r28
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <__pack_f+0x84>
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	aa 1f       	adc	r26, r26
    2c4a:	bb 1f       	adc	r27, r27
    2c4c:	0a 94       	dec	r0
    2c4e:	d2 f7       	brpl	.-12     	; 0x2c44 <__pack_f+0x7c>
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	a1 09       	sbc	r26, r1
    2c54:	b1 09       	sbc	r27, r1
    2c56:	82 23       	and	r24, r18
    2c58:	93 23       	and	r25, r19
    2c5a:	a4 23       	and	r26, r20
    2c5c:	b5 23       	and	r27, r21
    2c5e:	21 e0       	ldi	r18, 0x01	; 1
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	a1 05       	cpc	r26, r1
    2c6a:	b1 05       	cpc	r27, r1
    2c6c:	19 f4       	brne	.+6      	; 0x2c74 <__pack_f+0xac>
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	a9 01       	movw	r20, r18
    2c74:	2e 29       	or	r18, r14
    2c76:	3f 29       	or	r19, r15
    2c78:	40 2b       	or	r20, r16
    2c7a:	51 2b       	or	r21, r17
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <__pack_f+0xbc>
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	a9 01       	movw	r20, r18
    2c84:	da 01       	movw	r26, r20
    2c86:	c9 01       	movw	r24, r18
    2c88:	8f 77       	andi	r24, 0x7F	; 127
    2c8a:	90 70       	andi	r25, 0x00	; 0
    2c8c:	a0 70       	andi	r26, 0x00	; 0
    2c8e:	b0 70       	andi	r27, 0x00	; 0
    2c90:	80 34       	cpi	r24, 0x40	; 64
    2c92:	91 05       	cpc	r25, r1
    2c94:	a1 05       	cpc	r26, r1
    2c96:	b1 05       	cpc	r27, r1
    2c98:	39 f4       	brne	.+14     	; 0x2ca8 <__pack_f+0xe0>
    2c9a:	27 ff       	sbrs	r18, 7
    2c9c:	09 c0       	rjmp	.+18     	; 0x2cb0 <__pack_f+0xe8>
    2c9e:	20 5c       	subi	r18, 0xC0	; 192
    2ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <__pack_f+0xe8>
    2ca8:	21 5c       	subi	r18, 0xC1	; 193
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	4f 4f       	sbci	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	e1 e0       	ldi	r30, 0x01	; 1
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	20 30       	cpi	r18, 0x00	; 0
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	38 07       	cpc	r19, r24
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	48 07       	cpc	r20, r24
    2cbe:	80 e4       	ldi	r24, 0x40	; 64
    2cc0:	58 07       	cpc	r21, r24
    2cc2:	28 f5       	brcc	.+74     	; 0x2d0e <__pack_f+0x146>
    2cc4:	e0 e0       	ldi	r30, 0x00	; 0
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	22 c0       	rjmp	.+68     	; 0x2d0e <__pack_f+0x146>
    2cca:	e0 38       	cpi	r30, 0x80	; 128
    2ccc:	f1 05       	cpc	r31, r1
    2cce:	6c f5       	brge	.+90     	; 0x2d2a <__pack_f+0x162>
    2cd0:	e1 58       	subi	r30, 0x81	; 129
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	da 01       	movw	r26, r20
    2cd6:	c9 01       	movw	r24, r18
    2cd8:	8f 77       	andi	r24, 0x7F	; 127
    2cda:	90 70       	andi	r25, 0x00	; 0
    2cdc:	a0 70       	andi	r26, 0x00	; 0
    2cde:	b0 70       	andi	r27, 0x00	; 0
    2ce0:	80 34       	cpi	r24, 0x40	; 64
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	a1 05       	cpc	r26, r1
    2ce6:	b1 05       	cpc	r27, r1
    2ce8:	39 f4       	brne	.+14     	; 0x2cf8 <__pack_f+0x130>
    2cea:	27 ff       	sbrs	r18, 7
    2cec:	09 c0       	rjmp	.+18     	; 0x2d00 <__pack_f+0x138>
    2cee:	20 5c       	subi	r18, 0xC0	; 192
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf6:	04 c0       	rjmp	.+8      	; 0x2d00 <__pack_f+0x138>
    2cf8:	21 5c       	subi	r18, 0xC1	; 193
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    2cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2d00:	57 ff       	sbrs	r21, 7
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <__pack_f+0x146>
    2d04:	56 95       	lsr	r21
    2d06:	47 95       	ror	r20
    2d08:	37 95       	ror	r19
    2d0a:	27 95       	ror	r18
    2d0c:	31 96       	adiw	r30, 0x01	; 1
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	56 95       	lsr	r21
    2d12:	47 95       	ror	r20
    2d14:	37 95       	ror	r19
    2d16:	27 95       	ror	r18
    2d18:	8a 95       	dec	r24
    2d1a:	d1 f7       	brne	.-12     	; 0x2d10 <__pack_f+0x148>
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <__pack_f+0x16c>
    2d1e:	e0 e0       	ldi	r30, 0x00	; 0
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	05 c0       	rjmp	.+10     	; 0x2d2e <__pack_f+0x166>
    2d24:	e0 e0       	ldi	r30, 0x00	; 0
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <__pack_f+0x16c>
    2d2a:	ef ef       	ldi	r30, 0xFF	; 255
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	a9 01       	movw	r20, r18
    2d34:	8e 2f       	mov	r24, r30
    2d36:	87 95       	ror	r24
    2d38:	88 27       	eor	r24, r24
    2d3a:	87 95       	ror	r24
    2d3c:	94 2f       	mov	r25, r20
    2d3e:	9f 77       	andi	r25, 0x7F	; 127
    2d40:	67 95       	ror	r22
    2d42:	66 27       	eor	r22, r22
    2d44:	67 95       	ror	r22
    2d46:	e6 95       	lsr	r30
    2d48:	e2 2e       	mov	r14, r18
    2d4a:	a9 2f       	mov	r26, r25
    2d4c:	a8 2b       	or	r26, r24
    2d4e:	fe 2f       	mov	r31, r30
    2d50:	f6 2b       	or	r31, r22
    2d52:	62 2f       	mov	r22, r18
    2d54:	73 2f       	mov	r23, r19
    2d56:	8a 2f       	mov	r24, r26
    2d58:	9f 2f       	mov	r25, r31
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	e6 e0       	ldi	r30, 0x06	; 6
    2d60:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__epilogue_restores__+0x18>

00002d64 <__unpack_f>:
    2d64:	dc 01       	movw	r26, r24
    2d66:	fb 01       	movw	r30, r22
    2d68:	2c 91       	ld	r18, X
    2d6a:	11 96       	adiw	r26, 0x01	; 1
    2d6c:	3c 91       	ld	r19, X
    2d6e:	11 97       	sbiw	r26, 0x01	; 1
    2d70:	12 96       	adiw	r26, 0x02	; 2
    2d72:	8c 91       	ld	r24, X
    2d74:	12 97       	sbiw	r26, 0x02	; 2
    2d76:	48 2f       	mov	r20, r24
    2d78:	4f 77       	andi	r20, 0x7F	; 127
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	98 2f       	mov	r25, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	99 27       	eor	r25, r25
    2d82:	99 1f       	adc	r25, r25
    2d84:	13 96       	adiw	r26, 0x03	; 3
    2d86:	6c 91       	ld	r22, X
    2d88:	13 97       	sbiw	r26, 0x03	; 3
    2d8a:	86 2f       	mov	r24, r22
    2d8c:	88 0f       	add	r24, r24
    2d8e:	89 2b       	or	r24, r25
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	66 1f       	adc	r22, r22
    2d94:	66 27       	eor	r22, r22
    2d96:	66 1f       	adc	r22, r22
    2d98:	61 83       	std	Z+1, r22	; 0x01
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	39 f5       	brne	.+78     	; 0x2dec <__unpack_f+0x88>
    2d9e:	21 15       	cp	r18, r1
    2da0:	31 05       	cpc	r19, r1
    2da2:	41 05       	cpc	r20, r1
    2da4:	51 05       	cpc	r21, r1
    2da6:	11 f4       	brne	.+4      	; 0x2dac <__unpack_f+0x48>
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	29 c0       	rjmp	.+82     	; 0x2dfe <__unpack_f+0x9a>
    2dac:	82 e8       	ldi	r24, 0x82	; 130
    2dae:	9f ef       	ldi	r25, 0xFF	; 255
    2db0:	82 83       	std	Z+2, r24	; 0x02
    2db2:	93 83       	std	Z+3, r25	; 0x03
    2db4:	67 e0       	ldi	r22, 0x07	; 7
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	44 1f       	adc	r20, r20
    2dbc:	55 1f       	adc	r21, r21
    2dbe:	6a 95       	dec	r22
    2dc0:	d1 f7       	brne	.-12     	; 0x2db6 <__unpack_f+0x52>
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	80 83       	st	Z, r24
    2dc6:	09 c0       	rjmp	.+18     	; 0x2dda <__unpack_f+0x76>
    2dc8:	22 0f       	add	r18, r18
    2dca:	33 1f       	adc	r19, r19
    2dcc:	44 1f       	adc	r20, r20
    2dce:	55 1f       	adc	r21, r21
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	82 83       	std	Z+2, r24	; 0x02
    2dd8:	93 83       	std	Z+3, r25	; 0x03
    2dda:	20 30       	cpi	r18, 0x00	; 0
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	38 07       	cpc	r19, r24
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	48 07       	cpc	r20, r24
    2de4:	80 e4       	ldi	r24, 0x40	; 64
    2de6:	58 07       	cpc	r21, r24
    2de8:	78 f3       	brcs	.-34     	; 0x2dc8 <__unpack_f+0x64>
    2dea:	20 c0       	rjmp	.+64     	; 0x2e2c <__unpack_f+0xc8>
    2dec:	8f 3f       	cpi	r24, 0xFF	; 255
    2dee:	91 05       	cpc	r25, r1
    2df0:	79 f4       	brne	.+30     	; 0x2e10 <__unpack_f+0xac>
    2df2:	21 15       	cp	r18, r1
    2df4:	31 05       	cpc	r19, r1
    2df6:	41 05       	cpc	r20, r1
    2df8:	51 05       	cpc	r21, r1
    2dfa:	19 f4       	brne	.+6      	; 0x2e02 <__unpack_f+0x9e>
    2dfc:	84 e0       	ldi	r24, 0x04	; 4
    2dfe:	80 83       	st	Z, r24
    2e00:	08 95       	ret
    2e02:	44 ff       	sbrs	r20, 4
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <__unpack_f+0xa8>
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	80 83       	st	Z, r24
    2e0a:	10 c0       	rjmp	.+32     	; 0x2e2c <__unpack_f+0xc8>
    2e0c:	10 82       	st	Z, r1
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <__unpack_f+0xc8>
    2e10:	8f 57       	subi	r24, 0x7F	; 127
    2e12:	90 40       	sbci	r25, 0x00	; 0
    2e14:	82 83       	std	Z+2, r24	; 0x02
    2e16:	93 83       	std	Z+3, r25	; 0x03
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	80 83       	st	Z, r24
    2e1c:	87 e0       	ldi	r24, 0x07	; 7
    2e1e:	22 0f       	add	r18, r18
    2e20:	33 1f       	adc	r19, r19
    2e22:	44 1f       	adc	r20, r20
    2e24:	55 1f       	adc	r21, r21
    2e26:	8a 95       	dec	r24
    2e28:	d1 f7       	brne	.-12     	; 0x2e1e <__unpack_f+0xba>
    2e2a:	50 64       	ori	r21, 0x40	; 64
    2e2c:	24 83       	std	Z+4, r18	; 0x04
    2e2e:	35 83       	std	Z+5, r19	; 0x05
    2e30:	46 83       	std	Z+6, r20	; 0x06
    2e32:	57 83       	std	Z+7, r21	; 0x07
    2e34:	08 95       	ret

00002e36 <__fpcmp_parts_f>:
    2e36:	fc 01       	movw	r30, r24
    2e38:	db 01       	movw	r26, r22
    2e3a:	90 81       	ld	r25, Z
    2e3c:	92 30       	cpi	r25, 0x02	; 2
    2e3e:	08 f4       	brcc	.+2      	; 0x2e42 <__fpcmp_parts_f+0xc>
    2e40:	49 c0       	rjmp	.+146    	; 0x2ed4 <__fpcmp_parts_f+0x9e>
    2e42:	8c 91       	ld	r24, X
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	08 f4       	brcc	.+2      	; 0x2e4a <__fpcmp_parts_f+0x14>
    2e48:	45 c0       	rjmp	.+138    	; 0x2ed4 <__fpcmp_parts_f+0x9e>
    2e4a:	94 30       	cpi	r25, 0x04	; 4
    2e4c:	51 f4       	brne	.+20     	; 0x2e62 <__fpcmp_parts_f+0x2c>
    2e4e:	61 81       	ldd	r22, Z+1	; 0x01
    2e50:	84 30       	cpi	r24, 0x04	; 4
    2e52:	b1 f5       	brne	.+108    	; 0x2ec0 <__fpcmp_parts_f+0x8a>
    2e54:	11 96       	adiw	r26, 0x01	; 1
    2e56:	2c 91       	ld	r18, X
    2e58:	11 97       	sbiw	r26, 0x01	; 1
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	26 1b       	sub	r18, r22
    2e5e:	31 09       	sbc	r19, r1
    2e60:	41 c0       	rjmp	.+130    	; 0x2ee4 <__fpcmp_parts_f+0xae>
    2e62:	84 30       	cpi	r24, 0x04	; 4
    2e64:	21 f0       	breq	.+8      	; 0x2e6e <__fpcmp_parts_f+0x38>
    2e66:	92 30       	cpi	r25, 0x02	; 2
    2e68:	41 f4       	brne	.+16     	; 0x2e7a <__fpcmp_parts_f+0x44>
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	b1 f1       	breq	.+108    	; 0x2eda <__fpcmp_parts_f+0xa4>
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	8c 91       	ld	r24, X
    2e72:	11 97       	sbiw	r26, 0x01	; 1
    2e74:	88 23       	and	r24, r24
    2e76:	a1 f1       	breq	.+104    	; 0x2ee0 <__fpcmp_parts_f+0xaa>
    2e78:	2d c0       	rjmp	.+90     	; 0x2ed4 <__fpcmp_parts_f+0x9e>
    2e7a:	61 81       	ldd	r22, Z+1	; 0x01
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	01 f1       	breq	.+64     	; 0x2ec0 <__fpcmp_parts_f+0x8a>
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	8c 91       	ld	r24, X
    2e84:	11 97       	sbiw	r26, 0x01	; 1
    2e86:	68 17       	cp	r22, r24
    2e88:	d9 f4       	brne	.+54     	; 0x2ec0 <__fpcmp_parts_f+0x8a>
    2e8a:	22 81       	ldd	r18, Z+2	; 0x02
    2e8c:	33 81       	ldd	r19, Z+3	; 0x03
    2e8e:	12 96       	adiw	r26, 0x02	; 2
    2e90:	8d 91       	ld	r24, X+
    2e92:	9c 91       	ld	r25, X
    2e94:	13 97       	sbiw	r26, 0x03	; 3
    2e96:	82 17       	cp	r24, r18
    2e98:	93 07       	cpc	r25, r19
    2e9a:	94 f0       	brlt	.+36     	; 0x2ec0 <__fpcmp_parts_f+0x8a>
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	bc f0       	brlt	.+46     	; 0x2ed0 <__fpcmp_parts_f+0x9a>
    2ea2:	24 81       	ldd	r18, Z+4	; 0x04
    2ea4:	35 81       	ldd	r19, Z+5	; 0x05
    2ea6:	46 81       	ldd	r20, Z+6	; 0x06
    2ea8:	57 81       	ldd	r21, Z+7	; 0x07
    2eaa:	14 96       	adiw	r26, 0x04	; 4
    2eac:	8d 91       	ld	r24, X+
    2eae:	9d 91       	ld	r25, X+
    2eb0:	0d 90       	ld	r0, X+
    2eb2:	bc 91       	ld	r27, X
    2eb4:	a0 2d       	mov	r26, r0
    2eb6:	82 17       	cp	r24, r18
    2eb8:	93 07       	cpc	r25, r19
    2eba:	a4 07       	cpc	r26, r20
    2ebc:	b5 07       	cpc	r27, r21
    2ebe:	18 f4       	brcc	.+6      	; 0x2ec6 <__fpcmp_parts_f+0x90>
    2ec0:	66 23       	and	r22, r22
    2ec2:	41 f0       	breq	.+16     	; 0x2ed4 <__fpcmp_parts_f+0x9e>
    2ec4:	0d c0       	rjmp	.+26     	; 0x2ee0 <__fpcmp_parts_f+0xaa>
    2ec6:	28 17       	cp	r18, r24
    2ec8:	39 07       	cpc	r19, r25
    2eca:	4a 07       	cpc	r20, r26
    2ecc:	5b 07       	cpc	r21, r27
    2ece:	28 f4       	brcc	.+10     	; 0x2eda <__fpcmp_parts_f+0xa4>
    2ed0:	66 23       	and	r22, r22
    2ed2:	31 f0       	breq	.+12     	; 0x2ee0 <__fpcmp_parts_f+0xaa>
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	05 c0       	rjmp	.+10     	; 0x2ee4 <__fpcmp_parts_f+0xae>
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <__fpcmp_parts_f+0xae>
    2ee0:	2f ef       	ldi	r18, 0xFF	; 255
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	c9 01       	movw	r24, r18
    2ee6:	08 95       	ret

00002ee8 <__mulsi3>:
    2ee8:	62 9f       	mul	r22, r18
    2eea:	d0 01       	movw	r26, r0
    2eec:	73 9f       	mul	r23, r19
    2eee:	f0 01       	movw	r30, r0
    2ef0:	82 9f       	mul	r24, r18
    2ef2:	e0 0d       	add	r30, r0
    2ef4:	f1 1d       	adc	r31, r1
    2ef6:	64 9f       	mul	r22, r20
    2ef8:	e0 0d       	add	r30, r0
    2efa:	f1 1d       	adc	r31, r1
    2efc:	92 9f       	mul	r25, r18
    2efe:	f0 0d       	add	r31, r0
    2f00:	83 9f       	mul	r24, r19
    2f02:	f0 0d       	add	r31, r0
    2f04:	74 9f       	mul	r23, r20
    2f06:	f0 0d       	add	r31, r0
    2f08:	65 9f       	mul	r22, r21
    2f0a:	f0 0d       	add	r31, r0
    2f0c:	99 27       	eor	r25, r25
    2f0e:	72 9f       	mul	r23, r18
    2f10:	b0 0d       	add	r27, r0
    2f12:	e1 1d       	adc	r30, r1
    2f14:	f9 1f       	adc	r31, r25
    2f16:	63 9f       	mul	r22, r19
    2f18:	b0 0d       	add	r27, r0
    2f1a:	e1 1d       	adc	r30, r1
    2f1c:	f9 1f       	adc	r31, r25
    2f1e:	bd 01       	movw	r22, r26
    2f20:	cf 01       	movw	r24, r30
    2f22:	11 24       	eor	r1, r1
    2f24:	08 95       	ret

00002f26 <__udivmodhi4>:
    2f26:	aa 1b       	sub	r26, r26
    2f28:	bb 1b       	sub	r27, r27
    2f2a:	51 e1       	ldi	r21, 0x11	; 17
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <__udivmodhi4_ep>

00002f2e <__udivmodhi4_loop>:
    2f2e:	aa 1f       	adc	r26, r26
    2f30:	bb 1f       	adc	r27, r27
    2f32:	a6 17       	cp	r26, r22
    2f34:	b7 07       	cpc	r27, r23
    2f36:	10 f0       	brcs	.+4      	; 0x2f3c <__udivmodhi4_ep>
    2f38:	a6 1b       	sub	r26, r22
    2f3a:	b7 0b       	sbc	r27, r23

00002f3c <__udivmodhi4_ep>:
    2f3c:	88 1f       	adc	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	5a 95       	dec	r21
    2f42:	a9 f7       	brne	.-22     	; 0x2f2e <__udivmodhi4_loop>
    2f44:	80 95       	com	r24
    2f46:	90 95       	com	r25
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	08 95       	ret

00002f4e <__divmodhi4>:
    2f4e:	97 fb       	bst	r25, 7
    2f50:	09 2e       	mov	r0, r25
    2f52:	07 26       	eor	r0, r23
    2f54:	0a d0       	rcall	.+20     	; 0x2f6a <__divmodhi4_neg1>
    2f56:	77 fd       	sbrc	r23, 7
    2f58:	04 d0       	rcall	.+8      	; 0x2f62 <__divmodhi4_neg2>
    2f5a:	e5 df       	rcall	.-54     	; 0x2f26 <__udivmodhi4>
    2f5c:	06 d0       	rcall	.+12     	; 0x2f6a <__divmodhi4_neg1>
    2f5e:	00 20       	and	r0, r0
    2f60:	1a f4       	brpl	.+6      	; 0x2f68 <__divmodhi4_exit>

00002f62 <__divmodhi4_neg2>:
    2f62:	70 95       	com	r23
    2f64:	61 95       	neg	r22
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255

00002f68 <__divmodhi4_exit>:
    2f68:	08 95       	ret

00002f6a <__divmodhi4_neg1>:
    2f6a:	f6 f7       	brtc	.-4      	; 0x2f68 <__divmodhi4_exit>
    2f6c:	90 95       	com	r25
    2f6e:	81 95       	neg	r24
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	08 95       	ret

00002f74 <__udivmodsi4>:
    2f74:	a1 e2       	ldi	r26, 0x21	; 33
    2f76:	1a 2e       	mov	r1, r26
    2f78:	aa 1b       	sub	r26, r26
    2f7a:	bb 1b       	sub	r27, r27
    2f7c:	fd 01       	movw	r30, r26
    2f7e:	0d c0       	rjmp	.+26     	; 0x2f9a <__udivmodsi4_ep>

00002f80 <__udivmodsi4_loop>:
    2f80:	aa 1f       	adc	r26, r26
    2f82:	bb 1f       	adc	r27, r27
    2f84:	ee 1f       	adc	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	a2 17       	cp	r26, r18
    2f8a:	b3 07       	cpc	r27, r19
    2f8c:	e4 07       	cpc	r30, r20
    2f8e:	f5 07       	cpc	r31, r21
    2f90:	20 f0       	brcs	.+8      	; 0x2f9a <__udivmodsi4_ep>
    2f92:	a2 1b       	sub	r26, r18
    2f94:	b3 0b       	sbc	r27, r19
    2f96:	e4 0b       	sbc	r30, r20
    2f98:	f5 0b       	sbc	r31, r21

00002f9a <__udivmodsi4_ep>:
    2f9a:	66 1f       	adc	r22, r22
    2f9c:	77 1f       	adc	r23, r23
    2f9e:	88 1f       	adc	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	1a 94       	dec	r1
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <__udivmodsi4_loop>
    2fa6:	60 95       	com	r22
    2fa8:	70 95       	com	r23
    2faa:	80 95       	com	r24
    2fac:	90 95       	com	r25
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	bd 01       	movw	r22, r26
    2fb4:	cf 01       	movw	r24, r30
    2fb6:	08 95       	ret

00002fb8 <__prologue_saves__>:
    2fb8:	2f 92       	push	r2
    2fba:	3f 92       	push	r3
    2fbc:	4f 92       	push	r4
    2fbe:	5f 92       	push	r5
    2fc0:	6f 92       	push	r6
    2fc2:	7f 92       	push	r7
    2fc4:	8f 92       	push	r8
    2fc6:	9f 92       	push	r9
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	ca 1b       	sub	r28, r26
    2fe2:	db 0b       	sbc	r29, r27
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	09 94       	ijmp

00002fea <__epilogue_restores__>:
    2fea:	2a 88       	ldd	r2, Y+18	; 0x12
    2fec:	39 88       	ldd	r3, Y+17	; 0x11
    2fee:	48 88       	ldd	r4, Y+16	; 0x10
    2ff0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ff2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ff4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ff6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ff8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ffa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ffc:	b9 84       	ldd	r11, Y+9	; 0x09
    2ffe:	c8 84       	ldd	r12, Y+8	; 0x08
    3000:	df 80       	ldd	r13, Y+7	; 0x07
    3002:	ee 80       	ldd	r14, Y+6	; 0x06
    3004:	fd 80       	ldd	r15, Y+5	; 0x05
    3006:	0c 81       	ldd	r16, Y+4	; 0x04
    3008:	1b 81       	ldd	r17, Y+3	; 0x03
    300a:	aa 81       	ldd	r26, Y+2	; 0x02
    300c:	b9 81       	ldd	r27, Y+1	; 0x01
    300e:	ce 0f       	add	r28, r30
    3010:	d1 1d       	adc	r29, r1
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	ed 01       	movw	r28, r26
    3018:	08 95       	ret

0000301a <do_rand>:
    301a:	a0 e0       	ldi	r26, 0x00	; 0
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e3 e1       	ldi	r30, 0x13	; 19
    3020:	f8 e1       	ldi	r31, 0x18	; 24
    3022:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x10>
    3026:	ec 01       	movw	r28, r24
    3028:	68 81       	ld	r22, Y
    302a:	79 81       	ldd	r23, Y+1	; 0x01
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	61 15       	cp	r22, r1
    3032:	71 05       	cpc	r23, r1
    3034:	81 05       	cpc	r24, r1
    3036:	91 05       	cpc	r25, r1
    3038:	21 f4       	brne	.+8      	; 0x3042 <do_rand+0x28>
    303a:	64 e2       	ldi	r22, 0x24	; 36
    303c:	79 ed       	ldi	r23, 0xD9	; 217
    303e:	8b e5       	ldi	r24, 0x5B	; 91
    3040:	97 e0       	ldi	r25, 0x07	; 7
    3042:	2d e1       	ldi	r18, 0x1D	; 29
    3044:	33 ef       	ldi	r19, 0xF3	; 243
    3046:	41 e0       	ldi	r20, 0x01	; 1
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__divmodsi4>
    304e:	79 01       	movw	r14, r18
    3050:	8a 01       	movw	r16, r20
    3052:	27 ea       	ldi	r18, 0xA7	; 167
    3054:	31 e4       	ldi	r19, 0x41	; 65
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    305e:	5b 01       	movw	r10, r22
    3060:	6c 01       	movw	r12, r24
    3062:	c8 01       	movw	r24, r16
    3064:	b7 01       	movw	r22, r14
    3066:	2c ee       	ldi	r18, 0xEC	; 236
    3068:	34 ef       	ldi	r19, 0xF4	; 244
    306a:	4f ef       	ldi	r20, 0xFF	; 255
    306c:	5f ef       	ldi	r21, 0xFF	; 255
    306e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    3072:	6a 0d       	add	r22, r10
    3074:	7b 1d       	adc	r23, r11
    3076:	8c 1d       	adc	r24, r12
    3078:	9d 1d       	adc	r25, r13
    307a:	97 ff       	sbrs	r25, 7
    307c:	04 c0       	rjmp	.+8      	; 0x3086 <do_rand+0x6c>
    307e:	61 50       	subi	r22, 0x01	; 1
    3080:	70 40       	sbci	r23, 0x00	; 0
    3082:	80 40       	sbci	r24, 0x00	; 0
    3084:	90 48       	sbci	r25, 0x80	; 128
    3086:	68 83       	st	Y, r22
    3088:	79 83       	std	Y+1, r23	; 0x01
    308a:	8a 83       	std	Y+2, r24	; 0x02
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	7f 77       	andi	r23, 0x7F	; 127
    3090:	cb 01       	movw	r24, r22
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	ea e0       	ldi	r30, 0x0A	; 10
    3098:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x10>

0000309c <rand_r>:
    309c:	0e 94 0d 18 	call	0x301a	; 0x301a <do_rand>
    30a0:	08 95       	ret

000030a2 <rand>:
    30a2:	87 e3       	ldi	r24, 0x37	; 55
    30a4:	91 e2       	ldi	r25, 0x21	; 33
    30a6:	0e 94 0d 18 	call	0x301a	; 0x301a <do_rand>
    30aa:	08 95       	ret

000030ac <srand>:
    30ac:	a0 e0       	ldi	r26, 0x00	; 0
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	80 93 37 21 	sts	0x2137, r24
    30b4:	90 93 38 21 	sts	0x2138, r25
    30b8:	a0 93 39 21 	sts	0x2139, r26
    30bc:	b0 93 3a 21 	sts	0x213A, r27
    30c0:	08 95       	ret

000030c2 <__divmodsi4>:
    30c2:	97 fb       	bst	r25, 7
    30c4:	09 2e       	mov	r0, r25
    30c6:	05 26       	eor	r0, r21
    30c8:	0e d0       	rcall	.+28     	; 0x30e6 <__divmodsi4_neg1>
    30ca:	57 fd       	sbrc	r21, 7
    30cc:	04 d0       	rcall	.+8      	; 0x30d6 <__divmodsi4_neg2>
    30ce:	52 df       	rcall	.-348    	; 0x2f74 <__udivmodsi4>
    30d0:	0a d0       	rcall	.+20     	; 0x30e6 <__divmodsi4_neg1>
    30d2:	00 1c       	adc	r0, r0
    30d4:	38 f4       	brcc	.+14     	; 0x30e4 <__divmodsi4_exit>

000030d6 <__divmodsi4_neg2>:
    30d6:	50 95       	com	r21
    30d8:	40 95       	com	r20
    30da:	30 95       	com	r19
    30dc:	21 95       	neg	r18
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	4f 4f       	sbci	r20, 0xFF	; 255
    30e2:	5f 4f       	sbci	r21, 0xFF	; 255

000030e4 <__divmodsi4_exit>:
    30e4:	08 95       	ret

000030e6 <__divmodsi4_neg1>:
    30e6:	f6 f7       	brtc	.-4      	; 0x30e4 <__divmodsi4_exit>
    30e8:	90 95       	com	r25
    30ea:	80 95       	com	r24
    30ec:	70 95       	com	r23
    30ee:	61 95       	neg	r22
    30f0:	7f 4f       	sbci	r23, 0xFF	; 255
    30f2:	8f 4f       	sbci	r24, 0xFF	; 255
    30f4:	9f 4f       	sbci	r25, 0xFF	; 255
    30f6:	08 95       	ret

000030f8 <_exit>:
    30f8:	f8 94       	cli

000030fa <__stop_program>:
    30fa:	ff cf       	rjmp	.-2      	; 0x30fa <__stop_program>
