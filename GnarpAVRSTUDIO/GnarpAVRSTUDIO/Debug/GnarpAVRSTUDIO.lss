
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  0000274a  000027de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  00802138  00802138  00002916  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a3b  00000000  00000000  000032a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000052e5  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019d5  00000000  00000000  00008fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033cc  00000000  00000000  0000a99e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  0000dd6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000170b  00000000  00000000  0000e45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002105  00000000  00000000  0000fb67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000acf  00000000  00000000  00011c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f8  00000000  00000000  0001273b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	ea e4       	ldi	r30, 0x4A	; 74
     18c:	f7 e2       	ldi	r31, 0x27	; 39
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 33       	cpi	r26, 0x38	; 56
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a5 34       	cpi	r26, 0x45	; 69
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <main>
     1ae:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 4e 21 	lds	r24, 0x214E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	eb 01       	movw	r28, r22
     1ce:	6a 01       	movw	r12, r20
    //outmin: minimum value to output
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
     1d0:	e8 2f       	mov	r30, r24
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ec 5b       	subi	r30, 0xBC	; 188
     1da:	fe 4d       	sbci	r31, 0xDE	; 222
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 a8 10 	call	0x2150	; 0x2150 <__floatunsisf>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 ef       	ldi	r19, 0xF0	; 240
     1ec:	43 e7       	ldi	r20, 0x73	; 115
     1ee:	55 e4       	ldi	r21, 0x45	; 69
     1f0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__divsf3>
     1f4:	7b 01       	movw	r14, r22
     1f6:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin) + outmin;
     1f8:	cc 1a       	sub	r12, r28
     1fa:	dd 0a       	sbc	r13, r29
     1fc:	b6 01       	movw	r22, r12
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 a8 10 	call	0x2150	; 0x2150 <__floatunsisf>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
     20a:	c8 01       	movw	r24, r16
     20c:	b7 01       	movw	r22, r14
     20e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__mulsf3>
     212:	8b 01       	movw	r16, r22
     214:	c8 2e       	mov	r12, r24
     216:	e9 2e       	mov	r14, r25
     218:	be 01       	movw	r22, r28
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 a8 10 	call	0x2150	; 0x2150 <__floatunsisf>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
     226:	60 2f       	mov	r22, r16
     228:	71 2f       	mov	r23, r17
     22a:	8c 2d       	mov	r24, r12
     22c:	9e 2d       	mov	r25, r14
     22e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__addsf3>
    
    return (uint16_t) temp;
     232:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__fixunssfsi>
}
     236:	cb 01       	movw	r24, r22
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	08 95       	ret

0000024a <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     24a:	80 91 3c 21 	lds	r24, 0x213C
     24e:	08 95       	ret

00000250 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     250:	80 91 3d 21 	lds	r24, 0x213D
     254:	08 95       	ret

00000256 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     256:	80 91 3a 21 	lds	r24, 0x213A
     25a:	08 95       	ret

0000025c <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     25c:	80 91 3b 21 	lds	r24, 0x213B
     260:	08 95       	ret

00000262 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     262:	80 91 38 21 	lds	r24, 0x2138
     266:	08 95       	ret

00000268 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     268:	80 91 39 21 	lds	r24, 0x2139
     26c:	08 95       	ret

0000026e <startup_functions>:

void startup_functions(){
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     276:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     278:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     280:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     282:	a0 e5       	ldi	r26, 0x50	; 80
     284:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     286:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     288:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     28a:	98 ed       	ldi	r25, 0xD8	; 216
     28c:	15 c0       	rjmp	.+42     	; 0x2b8 <startup_functions+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     28e:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     290:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     292:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     294:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     298:	70 91 51 00 	lds	r23, 0x0051
     29c:	73 ff       	sbrs	r23, 3
     29e:	fc cf       	rjmp	.-8      	; 0x298 <startup_functions+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     2a0:	15 96       	adiw	r26, 0x05	; 5
     2a2:	3c 93       	st	X, r19
     2a4:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     2a6:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     2aa:	70 91 51 00 	lds	r23, 0x0051
     2ae:	74 ff       	sbrs	r23, 4
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <startup_functions+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     2b2:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     2b4:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     2b8:	70 91 40 00 	lds	r23, 0x0040
     2bc:	74 30       	cpi	r23, 0x04	; 4
     2be:	39 f7       	brne	.-50     	; 0x28e <startup_functions+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     2c0:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     2c2:	a0 e6       	ldi	r26, 0x60	; 96
     2c4:	b6 e0       	ldi	r27, 0x06	; 6
     2c6:	80 e8       	ldi	r24, 0x80	; 128
     2c8:	15 96       	adiw	r26, 0x05	; 5
     2ca:	8c 93       	st	X, r24
     2cc:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     2ce:	90 e4       	ldi	r25, 0x40	; 64
     2d0:	12 96       	adiw	r26, 0x02	; 2
     2d2:	9c 93       	st	X, r25
     2d4:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     2d6:	11 96       	adiw	r26, 0x01	; 1
     2d8:	8c 93       	st	X, r24
     2da:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     2dc:	e0 eb       	ldi	r30, 0xB0	; 176
     2de:	f9 e0       	ldi	r31, 0x09	; 9
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     2e4:	90 e2       	ldi	r25, 0x20	; 32
     2e6:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2e8:	33 e0       	ldi	r19, 0x03	; 3
     2ea:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     2ec:	8f e2       	ldi	r24, 0x2F	; 47
     2ee:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     2f0:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     2f2:	80 91 a2 00 	lds	r24, 0x00A2
     2f6:	87 68       	ori	r24, 0x87	; 135
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     2fe:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     300:	c0 e0       	ldi	r28, 0x00	; 0
     302:	d6 e0       	ldi	r29, 0x06	; 6
     304:	89 ef       	ldi	r24, 0xF9	; 249
     306:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	f2 e0       	ldi	r31, 0x02	; 2
     30c:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     310:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     312:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     314:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     316:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     318:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     31a:	80 91 00 02 	lds	r24, 0x0200
     31e:	81 60       	ori	r24, 0x01	; 1
     320:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     328:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     32a:	12 a2       	std	Z+34, r1	; 0x22
        PORTC.OUTSET = 0x08;
    
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     32c:	40 e2       	ldi	r20, 0x20	; 32
     32e:	56 e0       	ldi	r21, 0x06	; 6
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	fa 01       	movw	r30, r20
     334:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     336:	28 e0       	ldi	r18, 0x08	; 8
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	96 e0       	ldi	r25, 0x06	; 6
     33c:	fc 01       	movw	r30, r24
     33e:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     340:	fa 01       	movw	r30, r20
     342:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     348:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f6 e0       	ldi	r31, 0x06	; 6
     34e:	88 ef       	ldi	r24, 0xF8	; 248
     350:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	11 96       	adiw	r26, 0x01	; 1
     356:	8c 93       	st	X, r24
     358:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	15 96       	adiw	r26, 0x05	; 5
     35e:	8c 93       	st	X, r24
     360:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     362:	90 ef       	ldi	r25, 0xF0	; 240
     364:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     366:	16 96       	adiw	r26, 0x06	; 6
     368:	8c 93       	st	X, r24
     36a:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	16 96       	adiw	r26, 0x06	; 6
     370:	8c 93       	st	X, r24
     372:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     374:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <preloop_functions>:

void preloop_functions(){
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     38a:	80 91 88 06 	lds	r24, 0x0688
     38e:	86 95       	lsr	r24
     390:	86 95       	lsr	r24
     392:	86 95       	lsr	r24
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <preloop_functions+0x1e>
     398:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     39a:	80 91 28 06 	lds	r24, 0x0628
     39e:	86 95       	lsr	r24
     3a0:	86 95       	lsr	r24
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <preloop_functions+0x2e>
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <preloop_functions+0x30>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	e8 2e       	mov	r14, r24
     3ae:	e9 2a       	or	r14, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     3b0:	80 91 28 06 	lds	r24, 0x0628
     3b4:	86 95       	lsr	r24
     3b6:	86 95       	lsr	r24
     3b8:	86 95       	lsr	r24
     3ba:	80 fd       	sbrc	r24, 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <preloop_functions+0x46>
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <preloop_functions+0x48>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	e8 2a       	or	r14, r24
     3c6:	e0 92 43 21 	sts	0x2143, r14
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3ca:	60 91 42 21 	lds	r22, 0x2142
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	f0 90 41 21 	lds	r15, 0x2141
     3d4:	ee e3       	ldi	r30, 0x3E	; 62
     3d6:	f1 e2       	ldi	r31, 0x21	; 33
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	4e 2d       	mov	r20, r14
     3de:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3e4:	d8 2e       	mov	r13, r24
     3e6:	ea 01       	movw	r28, r20
     3e8:	08 2e       	mov	r0, r24
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <preloop_functions+0x74>
     3ec:	d5 95       	asr	r29
     3ee:	c7 95       	ror	r28
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <preloop_functions+0x70>
     3f4:	db 01       	movw	r26, r22
     3f6:	08 2e       	mov	r0, r24
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <preloop_functions+0x82>
     3fa:	b5 95       	asr	r27
     3fc:	a7 95       	ror	r26
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <preloop_functions+0x7e>
     402:	ca 17       	cp	r28, r26
     404:	db 07       	cpc	r29, r27
     406:	21 f4       	brne	.+8      	; 0x410 <preloop_functions+0x94>
            switch_history_counts[i]++;                            //increment count        
     408:	a0 81       	ld	r26, Z
     40a:	af 5f       	subi	r26, 0xFF	; 255
     40c:	a0 83       	st	Z, r26
     40e:	01 c0       	rjmp	.+2      	; 0x412 <preloop_functions+0x96>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     410:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     412:	a0 81       	ld	r26, Z
     414:	a9 30       	cpi	r26, 0x09	; 9
     416:	60 f0       	brcs	.+24     	; 0x430 <preloop_functions+0xb4>
            final_switch_states &= ~(1 << i);
     418:	d9 01       	movw	r26, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <preloop_functions+0xa4>
     41c:	aa 0f       	add	r26, r26
     41e:	bb 1f       	adc	r27, r27
     420:	da 94       	dec	r13
     422:	e2 f7       	brpl	.-8      	; 0x41c <preloop_functions+0xa0>
     424:	ba 2f       	mov	r27, r26
     426:	b0 95       	com	r27
     428:	fb 22       	and	r15, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     42a:	ae 21       	and	r26, r14
     42c:	fa 2a       	or	r15, r26
            switch_history_counts[i] = 0;                          //and reset count
     42e:	10 82       	st	Z, r1
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	91 05       	cpc	r25, r1
     438:	a9 f6       	brne	.-86     	; 0x3e4 <preloop_functions+0x68>
     43a:	f0 92 41 21 	sts	0x2141, r15
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     43e:	e0 92 42 21 	sts	0x2142, r14
     442:	80 91 38 21 	lds	r24, 0x2138
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     446:	f0 fe       	sbrs	r15, 0
     448:	0c c0       	rjmp	.+24     	; 0x462 <preloop_functions+0xe6>
        if (toggle_switch_state)                //if toggle WAS on
     44a:	88 23       	and	r24, r24
     44c:	19 f0       	breq	.+6      	; 0x454 <preloop_functions+0xd8>
            toggle_switch_edge = EDGE_NONE;     //no edge
     44e:	10 92 39 21 	sts	0x2139, r1
     452:	03 c0       	rjmp	.+6      	; 0x45a <preloop_functions+0xde>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 39 21 	sts	0x2139, r24
        toggle_switch_state = 1;                //set current value
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 38 21 	sts	0x2138, r24
     460:	0a c0       	rjmp	.+20     	; 0x476 <preloop_functions+0xfa>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     462:	88 23       	and	r24, r24
     464:	21 f0       	breq	.+8      	; 0x46e <preloop_functions+0xf2>
            toggle_switch_edge = EDGE_FALL;     //new off
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	80 93 39 21 	sts	0x2139, r24
     46c:	02 c0       	rjmp	.+4      	; 0x472 <preloop_functions+0xf6>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     46e:	10 92 39 21 	sts	0x2139, r1
        toggle_switch_state = 0;                //set current value
     472:	10 92 38 21 	sts	0x2138, r1
     476:	80 91 3a 21 	lds	r24, 0x213A
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     47a:	f1 fe       	sbrs	r15, 1
     47c:	0c c0       	rjmp	.+24     	; 0x496 <preloop_functions+0x11a>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     47e:	88 23       	and	r24, r24
     480:	19 f0       	breq	.+6      	; 0x488 <preloop_functions+0x10c>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     482:	10 92 3b 21 	sts	0x213B, r1
     486:	03 c0       	rjmp	.+6      	; 0x48e <preloop_functions+0x112>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 3b 21 	sts	0x213B, r24
        pushbutton_switch_state = 1;                //set current value
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 3a 21 	sts	0x213A, r24
     494:	0a c0       	rjmp	.+20     	; 0x4aa <preloop_functions+0x12e>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     496:	88 23       	and	r24, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <preloop_functions+0x126>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	80 93 3b 21 	sts	0x213B, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <preloop_functions+0x12a>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     4a2:	10 92 3b 21 	sts	0x213B, r1
        pushbutton_switch_state = 0;                //set current value
     4a6:	10 92 3a 21 	sts	0x213A, r1
     4aa:	80 91 3c 21 	lds	r24, 0x213C
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     4ae:	f2 fe       	sbrs	r15, 2
     4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <preloop_functions+0x15a>
        if (encoder_switch_state)                //if encoder WAS on
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <preloop_functions+0x140>
            encoder_switch_edge = EDGE_NONE;     //no edge
     4b6:	10 92 3d 21 	sts	0x213D, r1
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <preloop_functions+0x146>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 3d 21 	sts	0x213D, r24
        encoder_switch_state = 1;                //set current value
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 3c 21 	sts	0x213C, r24
     4c8:	e4 e4       	ldi	r30, 0x44	; 68
     4ca:	f1 e2       	ldi	r31, 0x21	; 33
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     4cc:	23 e0       	ldi	r18, 0x03	; 3
     4ce:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4d0:	a0 e0       	ldi	r26, 0x00	; 0
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <preloop_functions+0x170>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
        encoder_switch_state = 1;                //set current value
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     4d6:	88 23       	and	r24, r24
     4d8:	21 f0       	breq	.+8      	; 0x4e2 <preloop_functions+0x166>
            encoder_switch_edge = EDGE_FALL;     //new off
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 3d 21 	sts	0x213D, r24
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <preloop_functions+0x16a>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     4e2:	10 92 3d 21 	sts	0x213D, r1
        encoder_switch_state = 0;                //set current value
     4e6:	10 92 3c 21 	sts	0x213C, r1
     4ea:	ee cf       	rjmp	.-36     	; 0x4c8 <preloop_functions+0x14c>
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4ec:	80 91 23 02 	lds	r24, 0x0223
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	93 96       	adiw	r26, 0x23	; 35
     4f4:	8c 93       	st	X, r24
     4f6:	93 97       	sbiw	r26, 0x23	; 35
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     4f8:	80 91 21 02 	lds	r24, 0x0221
     4fc:	87 7c       	andi	r24, 0xC7	; 199
     4fe:	91 96       	adiw	r26, 0x21	; 33
     500:	8c 93       	st	X, r24
     502:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     504:	40 91 21 02 	lds	r20, 0x0221
     508:	c9 01       	movw	r24, r18
     50a:	53 e0       	ldi	r21, 0x03	; 3
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	5a 95       	dec	r21
     512:	e1 f7       	brne	.-8      	; 0x50c <preloop_functions+0x190>
     514:	48 2b       	or	r20, r24
     516:	91 96       	adiw	r26, 0x21	; 33
     518:	4c 93       	st	X, r20
     51a:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     51c:	80 91 20 02 	lds	r24, 0x0220
     520:	80 68       	ori	r24, 0x80	; 128
     522:	90 96       	adiw	r26, 0x20	; 32
     524:	8c 93       	st	X, r24
     526:	90 97       	sbiw	r26, 0x20	; 32
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     528:	80 91 23 02 	lds	r24, 0x0223
     52c:	80 ff       	sbrs	r24, 0
     52e:	fc cf       	rjmp	.-8      	; 0x528 <preloop_functions+0x1ac>
        
        pot_values[i] = ADCA.CH0.RESL;
     530:	80 91 24 02 	lds	r24, 0x0224
        pot_values[i] |= ADCA.CH0.RESH << 8;
     534:	90 91 25 02 	lds	r25, 0x0225
     538:	19 2f       	mov	r17, r25
     53a:	00 e0       	ldi	r16, 0x00	; 0
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     53c:	90 e0       	ldi	r25, 0x00	; 0
        pot_values[i] |= ADCA.CH0.RESH << 8;
     53e:	80 2b       	or	r24, r16
     540:	91 2b       	or	r25, r17
     542:	80 83       	st	Z, r24
     544:	91 83       	std	Z+1, r25	; 0x01
        
        if (pot_values[i] < POTMIN)
     546:	80 3c       	cpi	r24, 0xC0	; 192
     548:	91 05       	cpc	r25, r1
     54a:	18 f4       	brcc	.+6      	; 0x552 <preloop_functions+0x1d6>
            pot_values[i] = 0;
     54c:	10 82       	st	Z, r1
     54e:	11 82       	std	Z+1, r1	; 0x01
     550:	04 c0       	rjmp	.+8      	; 0x55a <preloop_functions+0x1de>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     552:	80 5c       	subi	r24, 0xC0	; 192
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	80 83       	st	Z, r24
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	32 96       	adiw	r30, 0x02	; 2
static void read_pots(){
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     560:	28 30       	cpi	r18, 0x08	; 8
     562:	31 05       	cpc	r19, r1
     564:	19 f6       	brne	.-122    	; 0x4ec <preloop_functions+0x170>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     566:	80 91 28 06 	lds	r24, 0x0628
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	80 fd       	sbrc	r24, 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     570:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     574:	84 2f       	mov	r24, r20
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	20 91 4f 21 	lds	r18, 0x214F
     57c:	51 e0       	ldi	r21, 0x01	; 1
     57e:	25 27       	eor	r18, r21
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	82 23       	and	r24, r18
     584:	93 23       	and	r25, r19
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	59 f0       	breq	.+22     	; 0x5a0 <preloop_functions+0x224>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     58a:	86 2f       	mov	r24, r22
     58c:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     58e:	80 fd       	sbrc	r24, 0
     590:	03 c0       	rjmp	.+6      	; 0x598 <preloop_functions+0x21c>
            encoder_state = TURN_CW;    //CW        
     592:	50 93 4e 21 	sts	0x214E, r21
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <preloop_functions+0x228>
        else
            encoder_state = TURN_CCW;    //CCW
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	80 93 4e 21 	sts	0x214E, r24
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <preloop_functions+0x228>
    }
    else
        encoder_state = TURN_NONE;   
     5a0:	10 92 4e 21 	sts	0x214E, r1
    last_a = current_a;
     5a4:	40 93 4f 21 	sts	0x214F, r20

void preloop_functions(){
    read_switches();
    read_pots();
    read_encoder();
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	08 95       	ret

000005b8 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
     5b8:	2f 92       	push	r2
     5ba:	3f 92       	push	r3
     5bc:	4f 92       	push	r4
     5be:	5f 92       	push	r5
     5c0:	6f 92       	push	r6
     5c2:	7f 92       	push	r7
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <postloop_functions+0x26>
     5de:	0f 92       	push	r0
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	b8 2e       	mov	r11, r24
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

static void set_LEDs(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    //booleans and such convert to LED out
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	4a 83       	std	Y+2, r20	; 0x02
     5ea:	2b 83       	std	Y+3, r18	; 0x03
     5ec:	6e 01       	movw	r12, r28
     5ee:	08 94       	sec
     5f0:	c1 1c       	adc	r12, r1
     5f2:	d1 1c       	adc	r13, r1
     5f4:	22 e0       	ldi	r18, 0x02	; 2
     5f6:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	e4 2e       	mov	r14, r20
     5fc:	f1 2c       	mov	r15, r1
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	49 2e       	mov	r4, r25
     602:	51 2c       	mov	r5, r1
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	28 2e       	mov	r2, r24
     608:	31 2c       	mov	r3, r1
     60a:	e0 e6       	ldi	r30, 0x60	; 96
     60c:	f6 e0       	ldi	r31, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     60e:	b0 e4       	ldi	r27, 0x40	; 64
     610:	8b 2e       	mov	r8, r27
     612:	b6 e0       	ldi	r27, 0x06	; 6
     614:	9b 2e       	mov	r9, r27
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     616:	a1 e0       	ldi	r26, 0x01	; 1
     618:	6a 2e       	mov	r6, r26
     61a:	71 2c       	mov	r7, r1
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
     624:	a8 2e       	mov	r10, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     626:	01 15       	cp	r16, r1
     628:	11 05       	cpc	r17, r1
     62a:	21 f4       	brne	.+8      	; 0x634 <postloop_functions+0x7c>
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	11 f0       	breq	.+4      	; 0x634 <postloop_functions+0x7c>
            digit = 10;
     630:	7a e0       	ldi	r23, 0x0A	; 10
     632:	a7 2e       	mov	r10, r23
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     634:	c9 01       	movw	r24, r18
     636:	b2 01       	movw	r22, r4
     638:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
     63c:	a1 01       	movw	r20, r2
     63e:	08 2e       	mov	r0, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <postloop_functions+0x8e>
     642:	44 0f       	add	r20, r20
     644:	55 1f       	adc	r21, r21
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <postloop_functions+0x8a>
     64a:	46 83       	std	Z+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     64c:	40 ef       	ldi	r20, 0xF0	; 240
     64e:	d4 01       	movw	r26, r8
     650:	16 96       	adiw	r26, 0x06	; 6
     652:	4c 93       	st	X, r20
     654:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     656:	a2 94       	swap	r10
     658:	60 ef       	ldi	r22, 0xF0	; 240
     65a:	a6 22       	and	r10, r22
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	ac 92       	st	X, r10
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     660:	58 e3       	ldi	r21, 0x38	; 56
     662:	55 83       	std	Z+5, r21	; 0x05
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     664:	d6 01       	movw	r26, r12
     666:	9d 91       	ld	r25, X+
     668:	6d 01       	movw	r12, r26
     66a:	99 23       	and	r25, r25
     66c:	41 f0       	breq	.+16     	; 0x67e <postloop_functions+0xc6>
            PORTD.OUTSET = 1 << (i+2)%3;
     66e:	a3 01       	movw	r20, r6
     670:	02 c0       	rjmp	.+4      	; 0x676 <postloop_functions+0xbe>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	8a 95       	dec	r24
     678:	e2 f7       	brpl	.-8      	; 0x672 <postloop_functions+0xba>
     67a:	45 83       	std	Z+5, r20	; 0x05
     67c:	07 c0       	rjmp	.+14     	; 0x68c <postloop_functions+0xd4>
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     67e:	d3 01       	movw	r26, r6
     680:	02 c0       	rjmp	.+4      	; 0x686 <postloop_functions+0xce>
     682:	aa 0f       	add	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	8a 95       	dec	r24
     688:	e2 f7       	brpl	.-8      	; 0x682 <postloop_functions+0xca>
     68a:	a6 83       	std	Z+6, r26	; 0x06
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     690:	25 30       	cpi	r18, 0x05	; 5
     692:	31 05       	cpc	r19, r1
     694:	31 f0       	breq	.+12     	; 0x6a2 <postloop_functions+0xea>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
     696:	c8 01       	movw	r24, r16
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
     69e:	8b 01       	movw	r16, r22
     6a0:	bd cf       	rjmp	.-134    	; 0x61c <postloop_functions+0x64>
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
    }
    
    if (status_LED)                                //light STATLED if necessary
     6a2:	bb 20       	and	r11, r11
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <postloop_functions+0xf8>
        PORTC.OUTCLR = 0x08;
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	e0 e4       	ldi	r30, 0x40	; 64
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <postloop_functions+0x100>
    else
        PORTC.OUTSET = 0x08;
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e0 e4       	ldi	r30, 0x40	; 64
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 83       	std	Z+5, r24	; 0x05
    read_encoder();
}

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     6b8:	23 96       	adiw	r28, 0x03	; 3
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	3f 90       	pop	r3
     6e0:	2f 90       	pop	r2
     6e2:	08 95       	ret

000006e4 <__vector_16>:
uint16_t LED_count = 0;

volatile uint16_t note_out;
volatile uint16_t velocity_out;

ISR(TCC0_CCA_vect){
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	TCC0.CNT = 0x0000;	//reset counter
     706:	e0 e0       	ldi	r30, 0x00	; 0
     708:	f8 e0       	ldi	r31, 0x08	; 8
     70a:	10 a2       	std	Z+32, r1	; 0x20
     70c:	11 a2       	std	Z+33, r1	; 0x21
	tick_count++;
     70e:	80 91 50 21 	lds	r24, 0x2150
     712:	90 91 51 21 	lds	r25, 0x2151
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	80 93 50 21 	sts	0x2150, r24
     71c:	90 93 51 21 	sts	0x2151, r25
	if (note_out)
     720:	80 91 43 22 	lds	r24, 0x2243
     724:	90 91 44 22 	lds	r25, 0x2244
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	69 f0       	breq	.+26     	; 0x746 <__vector_16+0x62>
		midi_send_noteon(serial_midi_device(),MIDI_CHAN,(uint8_t)note_out,(uint8_t)velocity_out);
     72c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     730:	40 91 43 22 	lds	r20, 0x2243
     734:	50 91 44 22 	lds	r21, 0x2244
     738:	20 91 41 22 	lds	r18, 0x2241
     73c:	30 91 42 22 	lds	r19, 0x2242
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	0e 94 63 09 	call	0x12c6	; 0x12c6 <midi_send_noteon>
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_91>:

ISR(USARTD1_RXC_vect){
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     78a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     78e:	40 91 b0 09 	lds	r20, 0x09B0
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	0e 94 ef 0a 	call	0x15de	; 0x15de <midi_device_input>
}
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <test_pots>:

void test_pots(){
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     7c6:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	uint8_t selPOT = 0;
     7ca:	ff 24       	eor	r15, r15
	
	while(1){
		preloop_functions();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7cc:	c4 e6       	ldi	r28, 0x64	; 100
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
	startup_functions();
	
	uint8_t selPOT = 0;
	
	while(1){
		preloop_functions();
     7d0:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7d4:	8f 2d       	mov	r24, r15
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	43 e6       	ldi	r20, 0x63	; 99
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     7e2:	2f 2d       	mov	r18, r15
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	2c 9f       	mul	r18, r28
     7ec:	80 01       	movw	r16, r0
     7ee:	2d 9f       	mul	r18, r29
     7f0:	10 0d       	add	r17, r0
     7f2:	3c 9f       	mul	r19, r28
     7f4:	10 0d       	add	r17, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	08 0f       	add	r16, r24
     7fa:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     7fc:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	29 f4       	brne	.+10     	; 0x80e <test_pots+0x52>
			selPOT++;
     804:	f3 94       	inc	r15
			if (selPOT>4)
     806:	8f 2d       	mov	r24, r15
     808:	85 30       	cpi	r24, 0x05	; 5
     80a:	08 f0       	brcs	.+2      	; 0x80e <test_pots+0x52>
				selPOT = 0;
     80c:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	
	}	
     81a:	da cf       	rjmp	.-76     	; 0x7d0 <test_pots+0x14>

0000081c <test_switches>:
	
	
}
*/

void test_switches(){
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <test_switches+0xa>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     82a:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	while(1){
		preloop_functions();
     82e:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     832:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     836:	8a 83       	std	Y+2, r24	; 0x02
     838:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     842:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	6a 81       	ldd	r22, Y+2	; 0x02
     848:	49 81       	ldd	r20, Y+1	; 0x01
     84a:	00 e0       	ldi	r16, 0x00	; 0
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
     852:	ed cf       	rjmp	.-38     	; 0x82e <test_switches+0x12>

00000854 <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	startup_functions();
     85e:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     862:	c0 e0       	ldi	r28, 0x00	; 0
     864:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	
	while(1){
		preloop_functions();
     866:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     86a:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     86e:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     870:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     874:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     876:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     87a:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     87c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	31 f4       	brne	.+12     	; 0x890 <test_seven_segment+0x3c>
			if (i == 999)
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	c7 3e       	cpi	r28, 0xE7	; 231
     888:	d8 07       	cpc	r29, r24
     88a:	51 f0       	breq	.+20     	; 0x8a0 <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     88c:	21 96       	adiw	r28, 0x01	; 1
     88e:	0d c0       	rjmp	.+26     	; 0x8aa <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     890:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	49 f4       	brne	.+18     	; 0x8aa <test_seven_segment+0x56>
			if (i == 0)
     898:	20 97       	sbiw	r28, 0x00	; 0
     89a:	29 f0       	breq	.+10     	; 0x8a6 <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     89c:	21 97       	sbiw	r28, 0x01	; 1
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     8a0:	c0 e0       	ldi	r28, 0x00	; 0
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     8a6:	c7 ee       	ldi	r28, 0xE7	; 231
     8a8:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	6f 2d       	mov	r22, r15
     8ae:	40 2f       	mov	r20, r16
     8b0:	21 2f       	mov	r18, r17
     8b2:	8e 01       	movw	r16, r28
     8b4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     8b8:	d6 cf       	rjmp	.-84     	; 0x866 <test_seven_segment+0x12>

000008ba <test_ADC>:
}

void test_ADC(){
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	startup_functions();
     8cc:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     8d4:	84 e6       	ldi	r24, 0x64	; 100
     8d6:	a8 2e       	mov	r10, r24
     8d8:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     8da:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     8de:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     8e2:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     8e4:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     8e8:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     8ea:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     8ee:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     8f0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	29 f4       	brne	.+10     	; 0x902 <test_ADC+0x48>
			if (pot_select == 4)
     8f8:	c4 30       	cpi	r28, 0x04	; 4
     8fa:	d1 05       	cpc	r29, r1
     8fc:	51 f0       	breq	.+20     	; 0x912 <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     8fe:	21 96       	adiw	r28, 0x01	; 1
     900:	0d c0       	rjmp	.+26     	; 0x91c <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     902:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	49 f4       	brne	.+18     	; 0x91c <test_ADC+0x62>
			if (pot_select == 0)
     90a:	20 97       	sbiw	r28, 0x00	; 0
     90c:	29 f0       	breq	.+10     	; 0x918 <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     90e:	21 97       	sbiw	r28, 0x01	; 1
     910:	05 c0       	rjmp	.+10     	; 0x91c <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     918:	c4 e0       	ldi	r28, 0x04	; 4
     91a:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     91c:	8c 2f       	mov	r24, r28
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	43 e6       	ldi	r20, 0x63	; 99
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     92a:	ca 9d       	mul	r28, r10
     92c:	80 01       	movw	r16, r0
     92e:	cb 9d       	mul	r28, r11
     930:	10 0d       	add	r17, r0
     932:	da 9d       	mul	r29, r10
     934:	10 0d       	add	r17, r0
     936:	11 24       	eor	r1, r1
     938:	08 0f       	add	r16, r24
     93a:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	6d 2d       	mov	r22, r13
     940:	4e 2d       	mov	r20, r14
     942:	2f 2d       	mov	r18, r15
     944:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     948:	c8 cf       	rjmp	.-112    	; 0x8da <test_ADC+0x20>

0000094a <test_xnor_out>:
}

void test_xnor_out(){
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     952:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     956:	c4 e6       	ldi	r28, 0x64	; 100
     958:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
//	serial_midi_init();
	
	while(1){
		preloop_functions();
     95a:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     95e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	29 f4       	brne	.+10     	; 0x970 <test_xnor_out+0x26>
			if (note <= 64)
     966:	c1 34       	cpi	r28, 0x41	; 65
     968:	d1 05       	cpc	r29, r1
     96a:	58 f0       	brcs	.+22     	; 0x982 <test_xnor_out+0x38>
				note = 152;
			else
				note += -1;
     96c:	21 97       	sbiw	r28, 0x01	; 1
     96e:	0e c0       	rjmp	.+28     	; 0x98c <test_xnor_out+0x42>
		}
		else if (get_encoder() == TURN_CW){
     970:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	51 f4       	brne	.+20     	; 0x98c <test_xnor_out+0x42>
			if (note >= 152)
     978:	c8 39       	cpi	r28, 0x98	; 152
     97a:	d1 05       	cpc	r29, r1
     97c:	28 f4       	brcc	.+10     	; 0x988 <test_xnor_out+0x3e>
				note = 64;
			else
				note++;
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	05 c0       	rjmp	.+10     	; 0x98c <test_xnor_out+0x42>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     982:	c8 e9       	ldi	r28, 0x98	; 152
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	02 c0       	rjmp	.+4      	; 0x98c <test_xnor_out+0x42>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     988:	c0 e4       	ldi	r28, 0x40	; 64
     98a:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note++;
		}				
					
		if (get_encoder_switch_edge() == EDGE_RISE)
     98c:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	41 f4       	brne	.+16     	; 0x9a4 <test_xnor_out+0x5a>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
     994:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	4c 2f       	mov	r20, r28
     99c:	28 e7       	ldi	r18, 0x78	; 120
     99e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <midi_send_noteon>
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <test_xnor_out+0x70>
		else if (get_encoder_switch_edge() == EDGE_FALL)
     9a4:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	39 f4       	brne	.+14     	; 0x9ba <test_xnor_out+0x70>
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
     9ac:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	4c 2f       	mov	r20, r28
     9b4:	28 e7       	ldi	r18, 0x78	; 120
     9b6:	0e 94 75 09 	call	0x12ea	; 0x12ea <midi_send_noteoff>
			
		status_LED = get_encoder_switch_state();
     9ba:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     9be:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     9c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9c4:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     9c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
			
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	01 30       	cpi	r16, 0x01	; 1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <test_xnor_out+0x88>
     9d0:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	09 f0       	breq	.+2      	; 0x9da <test_xnor_out+0x90>
     9d8:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9da:	81 2f       	mov	r24, r17
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	8e 01       	movw	r16, r28
     9e0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     9e4:	ba cf       	rjmp	.-140    	; 0x95a <test_xnor_out+0x10>

000009e6 <test_xnor_in>:
	
}

void test_xnor_in(){
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     9ee:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     9f2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <serial_midi_init>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     9f6:	c4 e6       	ldi	r28, 0x64	; 100
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	serial_midi_init();
	
	while(1){
		preloop_functions();
     9fa:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     9fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	29 f4       	brne	.+10     	; 0xa10 <test_xnor_in+0x2a>
			if (note <= 64)
     a06:	c1 34       	cpi	r28, 0x41	; 65
     a08:	d1 05       	cpc	r29, r1
     a0a:	58 f0       	brcs	.+22     	; 0xa22 <test_xnor_in+0x3c>
				note = 152;
			else
				note += -1;
     a0c:	21 97       	sbiw	r28, 0x01	; 1
     a0e:	0e c0       	rjmp	.+28     	; 0xa2c <test_xnor_in+0x46>
		}
		else if (get_encoder() == TURN_CW){
     a10:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	51 f4       	brne	.+20     	; 0xa2c <test_xnor_in+0x46>
			if (note >= 152)
     a18:	c8 39       	cpi	r28, 0x98	; 152
     a1a:	d1 05       	cpc	r29, r1
     a1c:	28 f4       	brcc	.+10     	; 0xa28 <test_xnor_in+0x42>
				note = 64;
			else
				note++;
     a1e:	21 96       	adiw	r28, 0x01	; 1
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <test_xnor_in+0x46>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     a22:	c8 e9       	ldi	r28, 0x98	; 152
     a24:	d0 e0       	ldi	r29, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <test_xnor_in+0x46>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     a28:	c0 e4       	ldi	r28, 0x40	; 64
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
/*		if (get_encoder_switch_edge() == EDGE_RISE)
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
     a2c:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     a30:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     a32:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a36:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     a38:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	01 30       	cpi	r16, 0x01	; 1
     a40:	09 f0       	breq	.+2      	; 0xa44 <test_xnor_in+0x5e>
     a42:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	09 f0       	breq	.+2      	; 0xa4c <test_xnor_in+0x66>
     a4a:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a4c:	81 2f       	mov	r24, r17
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	8e 01       	movw	r16, r28
     a52:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     a56:	d1 cf       	rjmp	.-94     	; 0x9fa <test_xnor_in+0x14>

00000a58 <test_blank>:
	
}

void test_blank(){
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a5c:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	while(1){
		preloop_functions();
     a60:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
     a74:	f5 cf       	rjmp	.-22     	; 0xa60 <test_blank+0x8>

00000a76 <test_timer>:
	}
	
}

void test_timer(){
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a7e:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	TCC0.CTRLA = 0x00;  //disable timer
     a82:	e0 e0       	ldi	r30, 0x00	; 0
     a84:	f8 e0       	ldi	r31, 0x08	; 8
     a86:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     a8e:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     a90:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     a92:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CCA = 23437;	//compare to 46875 (12MHz / 256)
     a98:	8d e8       	ldi	r24, 0x8D	; 141
     a9a:	9b e5       	ldi	r25, 0x5B	; 91
     a9c:	80 a7       	std	Z+40, r24	; 0x28
     a9e:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CNT = 0x0000;	//reset counter
     aa0:	10 a2       	std	Z+32, r1	; 0x20
     aa2:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	80 93 00 08 	sts	0x0800, r24
			else
				LED_count++;
		}		
		else if (get_encoder() == TURN_CCW){
			if (LED_count == 0)
				LED_count = 999;
     aaa:	c7 ee       	ldi	r28, 0xE7	; 231
     aac:	d3 e0       	ldi	r29, 0x03	; 3
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
	
	
	
	while(1){
		preloop_functions();
     aae:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CW){
     ab2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	79 f4       	brne	.+30     	; 0xad8 <test_timer+0x62>
			if (LED_count == 999)
     aba:	80 91 52 21 	lds	r24, 0x2152
     abe:	90 91 53 21 	lds	r25, 0x2153
     ac2:	23 e0       	ldi	r18, 0x03	; 3
     ac4:	87 3e       	cpi	r24, 0xE7	; 231
     ac6:	92 07       	cpc	r25, r18
     ac8:	29 f4       	brne	.+10     	; 0xad4 <test_timer+0x5e>
				LED_count = 0;
     aca:	10 92 52 21 	sts	0x2152, r1
     ace:	10 92 53 21 	sts	0x2153, r1
     ad2:	16 c0       	rjmp	.+44     	; 0xb00 <test_timer+0x8a>
			else
				LED_count++;
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <test_timer+0x82>
		}		
		else if (get_encoder() == TURN_CCW){
     ad8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	81 f4       	brne	.+32     	; 0xb00 <test_timer+0x8a>
			if (LED_count == 0)
     ae0:	80 91 52 21 	lds	r24, 0x2152
     ae4:	90 91 53 21 	lds	r25, 0x2153
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	29 f4       	brne	.+10     	; 0xaf6 <test_timer+0x80>
				LED_count = 999;
     aec:	c0 93 52 21 	sts	0x2152, r28
     af0:	d0 93 53 21 	sts	0x2153, r29
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <test_timer+0x8a>
			else
				LED_count+= -1;
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	80 93 52 21 	sts	0x2152, r24
     afc:	90 93 53 21 	sts	0x2153, r25
		}				
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     b00:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	41 f4       	brne	.+16     	; 0xb18 <test_timer+0xa2>
			LED_count = 0;
     b08:	10 92 52 21 	sts	0x2152, r1
     b0c:	10 92 53 21 	sts	0x2153, r1
			TCC0_CNT = 0;
     b10:	10 92 20 08 	sts	0x0820, r1
     b14:	10 92 21 08 	sts	0x0821, r1
		}			
			
		seven_segment_value = LED_count;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     b18:	00 91 52 21 	lds	r16, 0x2152
     b1c:	10 91 53 21 	lds	r17, 0x2153
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     b2c:	c0 cf       	rjmp	.-128    	; 0xaae <test_timer+0x38>

00000b2e <BPM_to_TMR>:
	
}

void BPM_to_TMR(uint16_t BPM){
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	ae 97       	sbiw	r28, 0x2e	; 46
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     b40:	de 01       	movw	r26, r28
     b42:	1f 96       	adiw	r26, 0x0f	; 15
     b44:	e0 e0       	ldi	r30, 0x00	; 0
     b46:	f0 e2       	ldi	r31, 0x20	; 32
     b48:	20 e2       	ldi	r18, 0x20	; 32
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	21 50       	subi	r18, 0x01	; 1
     b50:	e1 f7       	brne	.-8      	; 0xb4a <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     b52:	20 91 00 08 	lds	r18, 0x0800
     b56:	2f 70       	andi	r18, 0x0F	; 15
     b58:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     b5e:	1b 82       	std	Y+3, r1	; 0x03
     b60:	1c 82       	std	Y+4, r1	; 0x04
     b62:	1d 82       	std	Y+5, r1	; 0x05
     b64:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     b66:	9c 01       	movw	r18, r24
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	77 e8       	ldi	r23, 0x87	; 135
     b70:	83 e9       	ldi	r24, 0x93	; 147
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     b78:	2f 83       	std	Y+7, r18	; 0x07
     b7a:	38 87       	std	Y+8, r19	; 0x08
     b7c:	49 87       	std	Y+9, r20	; 0x09
     b7e:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     b80:	6f 81       	ldd	r22, Y+7	; 0x07
     b82:	78 85       	ldd	r23, Y+8	; 0x08
     b84:	89 85       	ldd	r24, Y+9	; 0x09
     b86:	9a 85       	ldd	r25, Y+10	; 0x0a
     b88:	ea 81       	ldd	r30, Y+2	; 0x02
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	8e 01       	movw	r16, r28
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	11 c0       	rjmp	.+34     	; 0xbbe <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	88 30       	cpi	r24, 0x08	; 8
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <BPM_to_TMR+0x7c>
     ba8:	93 c0       	rjmp	.+294    	; 0xcd0 <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     baa:	6f 81       	ldd	r22, Y+7	; 0x07
     bac:	78 85       	ldd	r23, Y+8	; 0x08
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	ea 81       	ldd	r30, Y+2	; 0x02
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e0 0f       	add	r30, r16
     bc0:	f1 1f       	adc	r31, r17
     bc2:	26 85       	ldd	r18, Z+14	; 0x0e
     bc4:	37 85       	ldd	r19, Z+15	; 0x0f
     bc6:	40 89       	ldd	r20, Z+16	; 0x10
     bc8:	51 89       	ldd	r21, Z+17	; 0x11
     bca:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     bce:	2b 87       	std	Y+11, r18	; 0x0b
     bd0:	3c 87       	std	Y+12, r19	; 0x0c
     bd2:	4d 87       	std	Y+13, r20	; 0x0d
     bd4:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bda:	ad 85       	ldd	r26, Y+13	; 0x0d
     bdc:	be 85       	ldd	r27, Y+14	; 0x0e
     bde:	80 30       	cpi	r24, 0x00	; 0
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	92 07       	cpc	r25, r18
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	a2 07       	cpc	r26, r18
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	b2 07       	cpc	r27, r18
     bec:	b8 f6       	brcc	.-82     	; 0xb9c <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     bee:	80 91 00 08 	lds	r24, 0x0800
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <BPM_to_TMR+0xca>
     bf6:	61 c0       	rjmp	.+194    	; 0xcba <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     bf8:	99 81       	ldd	r25, Y+1	; 0x01
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	98 17       	cp	r25, r24
     bfe:	09 f4       	brne	.+2      	; 0xc02 <BPM_to_TMR+0xd4>
     c00:	5a c0       	rjmp	.+180    	; 0xcb6 <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
     c02:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     c06:	60 91 20 08 	lds	r22, 0x0820
     c0a:	70 91 21 08 	lds	r23, 0x0821
     c0e:	ea 81       	ldd	r30, Y+2	; 0x02
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	8e 01       	movw	r16, r28
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	e0 0f       	add	r30, r16
     c22:	f1 1f       	adc	r31, r17
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	26 85       	ldd	r18, Z+14	; 0x0e
     c2a:	37 85       	ldd	r19, Z+15	; 0x0f
     c2c:	40 89       	ldd	r20, Z+16	; 0x10
     c2e:	51 89       	ldd	r21, Z+17	; 0x11
     c30:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsi3>
     c34:	6b 83       	std	Y+3, r22	; 0x03
     c36:	7c 83       	std	Y+4, r23	; 0x04
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     c3c:	6b 81       	ldd	r22, Y+3	; 0x03
     c3e:	7c 81       	ldd	r23, Y+4	; 0x04
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	9e 81       	ldd	r25, Y+6	; 0x06
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	e0 0f       	add	r30, r16
     c52:	f1 1f       	adc	r31, r17
     c54:	26 85       	ldd	r18, Z+14	; 0x0e
     c56:	37 85       	ldd	r19, Z+15	; 0x0f
     c58:	40 89       	ldd	r20, Z+16	; 0x10
     c5a:	51 89       	ldd	r21, Z+17	; 0x11
     c5c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     c60:	2b 83       	std	Y+3, r18	; 0x03
     c62:	3c 83       	std	Y+4, r19	; 0x04
     c64:	4d 83       	std	Y+5, r20	; 0x05
     c66:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     c68:	10 c0       	rjmp	.+32     	; 0xc8a <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	ad 81       	ldd	r26, Y+5	; 0x05
     c70:	be 81       	ldd	r27, Y+6	; 0x06
     c72:	2b 85       	ldd	r18, Y+11	; 0x0b
     c74:	3c 85       	ldd	r19, Y+12	; 0x0c
     c76:	4d 85       	ldd	r20, Y+13	; 0x0d
     c78:	5e 85       	ldd	r21, Y+14	; 0x0e
     c7a:	82 1b       	sub	r24, r18
     c7c:	93 0b       	sbc	r25, r19
     c7e:	a4 0b       	sbc	r26, r20
     c80:	b5 0b       	sbc	r27, r21
     c82:	8b 83       	std	Y+3, r24	; 0x03
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	ad 83       	std	Y+5, r26	; 0x05
     c88:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     c8a:	2b 81       	ldd	r18, Y+3	; 0x03
     c8c:	3c 81       	ldd	r19, Y+4	; 0x04
     c8e:	4d 81       	ldd	r20, Y+5	; 0x05
     c90:	5e 81       	ldd	r21, Y+6	; 0x06
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	ad 85       	ldd	r26, Y+13	; 0x0d
     c98:	be 85       	ldd	r27, Y+14	; 0x0e
     c9a:	82 17       	cp	r24, r18
     c9c:	93 07       	cpc	r25, r19
     c9e:	a4 07       	cpc	r26, r20
     ca0:	b5 07       	cpc	r27, r21
     ca2:	18 f3       	brcs	.-58     	; 0xc6a <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	ad 81       	ldd	r26, Y+5	; 0x05
     caa:	be 81       	ldd	r27, Y+6	; 0x06
     cac:	e0 e0       	ldi	r30, 0x00	; 0
     cae:	f8 e0       	ldi	r31, 0x08	; 8
     cb0:	80 a3       	std	Z+32, r24	; 0x20
     cb2:	91 a3       	std	Z+33, r25	; 0x21
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     cb6:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     cba:	8b 85       	ldd	r24, Y+11	; 0x0b
     cbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cbe:	ad 85       	ldd	r26, Y+13	; 0x0d
     cc0:	be 85       	ldd	r27, Y+14	; 0x0e
     cc2:	e0 e0       	ldi	r30, 0x00	; 0
     cc4:	f8 e0       	ldi	r31, 0x08	; 8
     cc6:	80 a7       	std	Z+40, r24	; 0x28
     cc8:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	80 93 00 08 	sts	0x0800, r24

	return;
}
     cd0:	ae 96       	adiw	r28, 0x2e	; 46
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <test_BPM>:

void test_BPM(){
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2b 97       	sbiw	r28, 0x0b	; 11
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
	volatile bool decimal_point0 = 0;
     cf4:	19 82       	std	Y+1, r1	; 0x01
	volatile bool decimal_point1 = 0;
     cf6:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool decimal_point2 = 0;
     cf8:	1b 82       	std	Y+3, r1	; 0x03
	volatile bool status_LED = 0;
     cfa:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint16_t seven_segment_value = 0;
     cfc:	18 86       	std	Y+8, r1	; 0x08
     cfe:	19 86       	std	Y+9, r1	; 0x09
	volatile uint16_t BPM = 120;
     d00:	88 e7       	ldi	r24, 0x78	; 120
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	8a 87       	std	Y+10, r24	; 0x0a
     d06:	9b 87       	std	Y+11, r25	; 0x0b
	volatile uint8_t beat_count = 0;
     d08:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint8_t measure_count = 0;
     d0a:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile bool off_sent = 0;
     d0c:	1f 82       	std	Y+7, r1	; 0x07
	
	
	startup_functions();
     d0e:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     d12:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <serial_midi_init>
	
	TCC0.CTRLA = 0x00;  //disable timer
     d16:	e0 e0       	ldi	r30, 0x00	; 0
     d18:	f8 e0       	ldi	r31, 0x08	; 8
     d1a:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     d1e:	80 e1       	ldi	r24, 0x10	; 16
     d20:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     d22:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     d24:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     d26:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	87 83       	std	Z+7, r24	; 0x07
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
     d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d30:	0e 94 97 05 	call	0xb2e	; 0xb2e <BPM_to_TMR>
					}						
				}
		}
		
		if (tick_count > 2 && !off_sent){
			off_sent = 1;
     d34:	ff 24       	eor	r15, r15
     d36:	f3 94       	inc	r15
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
//	TCC0.CNT = 0x0000;	//reset counter
	//TCC0.CTRLA = 0x01;  //enable timer = clk
	
	while(1){
		preloop_functions();
     d38:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>

		if (get_encoder() == TURN_CW){
     d3c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	51 f4       	brne	.+20     	; 0xd58 <test_BPM+0x78>
			if (BPM < 400)
     d44:	8a 85       	ldd	r24, Y+10	; 0x0a
     d46:	9b 85       	ldd	r25, Y+11	; 0x0b
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	80 39       	cpi	r24, 0x90	; 144
     d4c:	92 07       	cpc	r25, r18
     d4e:	90 f4       	brcc	.+36     	; 0xd74 <test_BPM+0x94>
				BPM++;
     d50:	8a 85       	ldd	r24, Y+10	; 0x0a
     d52:	9b 85       	ldd	r25, Y+11	; 0x0b
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	0c c0       	rjmp	.+24     	; 0xd70 <test_BPM+0x90>
				BPM_to_TMR(BPM);
		}
		else if (get_encoder() == TURN_CCW){
     d58:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	71 f4       	brne	.+28     	; 0xd7c <test_BPM+0x9c>
			if (BPM > 50){
     d60:	8a 85       	ldd	r24, Y+10	; 0x0a
     d62:	9b 85       	ldd	r25, Y+11	; 0x0b
     d64:	83 33       	cpi	r24, 0x33	; 51
     d66:	91 05       	cpc	r25, r1
     d68:	48 f0       	brcs	.+18     	; 0xd7c <test_BPM+0x9c>
				BPM += -1;
     d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	8a 87       	std	Y+10, r24	; 0x0a
     d72:	9b 87       	std	Y+11, r25	; 0x0b
				BPM_to_TMR(BPM);
     d74:	8a 85       	ldd	r24, Y+10	; 0x0a
     d76:	9b 85       	ldd	r25, Y+11	; 0x0b
     d78:	0e 94 97 05 	call	0xb2e	; 0xb2e <BPM_to_TMR>
			}				
		}
		

		if (tick_count >= 24){
     d7c:	80 91 50 21 	lds	r24, 0x2150
     d80:	90 91 51 21 	lds	r25, 0x2151
     d84:	88 31       	cpi	r24, 0x18	; 24
     d86:	91 05       	cpc	r25, r1
     d88:	30 f1       	brcs	.+76     	; 0xdd6 <test_BPM+0xf6>
			midi_send_noteon(serial_midi_device(),MIDI_CHAN,48,100);
     d8a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	40 e3       	ldi	r20, 0x30	; 48
     d92:	24 e6       	ldi	r18, 0x64	; 100
     d94:	0e 94 63 09 	call	0x12c6	; 0x12c6 <midi_send_noteon>
			off_sent = 0;
     d98:	1f 82       	std	Y+7, r1	; 0x07
			tick_count = tick_count - 24;
     d9a:	80 91 50 21 	lds	r24, 0x2150
     d9e:	90 91 51 21 	lds	r25, 0x2151
     da2:	48 97       	sbiw	r24, 0x18	; 24
     da4:	80 93 50 21 	sts	0x2150, r24
     da8:	90 93 51 21 	sts	0x2151, r25
			beat_count++;
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	8d 83       	std	Y+5, r24	; 0x05
				if (beat_count > 3){
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	78 f0       	brcs	.+30     	; 0xdd6 <test_BPM+0xf6>
					midi_send_noteon(serial_midi_device(),MIDI_CHAN,52,100);
     db8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	44 e3       	ldi	r20, 0x34	; 52
     dc0:	24 e6       	ldi	r18, 0x64	; 100
     dc2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <midi_send_noteon>
					beat_count = 0;
     dc6:	1d 82       	std	Y+5, r1	; 0x05
					measure_count++;
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	8e 83       	std	Y+6, r24	; 0x06
					if (measure_count > 99){
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	84 36       	cpi	r24, 0x64	; 100
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <test_BPM+0xf6>
						measure_count = 0;
     dd4:	1e 82       	std	Y+6, r1	; 0x06
					}						
				}
		}
		
		if (tick_count > 2 && !off_sent){
     dd6:	80 91 50 21 	lds	r24, 0x2150
     dda:	90 91 51 21 	lds	r25, 0x2151
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	a8 f0       	brcs	.+42     	; 0xe0e <test_BPM+0x12e>
     de4:	8f 81       	ldd	r24, Y+7	; 0x07
     de6:	88 23       	and	r24, r24
     de8:	91 f4       	brne	.+36     	; 0xe0e <test_BPM+0x12e>
			off_sent = 1;
     dea:	ff 82       	std	Y+7, r15	; 0x07
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,48,100);
     dec:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	40 e3       	ldi	r20, 0x30	; 48
     df4:	24 e6       	ldi	r18, 0x64	; 100
     df6:	0e 94 75 09 	call	0x12ea	; 0x12ea <midi_send_noteoff>
				if (beat_count == 0)
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	88 23       	and	r24, r24
     dfe:	39 f4       	brne	.+14     	; 0xe0e <test_BPM+0x12e>
					midi_send_noteoff(serial_midi_device(),MIDI_CHAN,52,100);
     e00:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	44 e3       	ldi	r20, 0x34	; 52
     e08:	24 e6       	ldi	r18, 0x64	; 100
     e0a:	0e 94 75 09 	call	0x12ea	; 0x12ea <midi_send_noteoff>
		}
		
		decimal_point0 = 0;
     e0e:	19 82       	std	Y+1, r1	; 0x01
		decimal_point1 = 0;
     e10:	1a 82       	std	Y+2, r1	; 0x02
		if (tick_count < 12)
     e12:	80 91 50 21 	lds	r24, 0x2150
     e16:	90 91 51 21 	lds	r25, 0x2151
     e1a:	8c 30       	cpi	r24, 0x0C	; 12
     e1c:	91 05       	cpc	r25, r1
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <test_BPM+0x142>
			decimal_point0 = 1;
     e20:	f9 82       	std	Y+1, r15	; 0x01
		if (beat_count < 2)
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	08 f4       	brcc	.+2      	; 0xe2a <test_BPM+0x14a>
			decimal_point1 = 1;
     e28:	fa 82       	std	Y+2, r15	; 0x02
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     e2a:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	31 f4       	brne	.+12     	; 0xe3e <test_BPM+0x15e>
			beat_count = 0;
     e32:	1d 82       	std	Y+5, r1	; 0x05
			measure_count = 0;
     e34:	1e 82       	std	Y+6, r1	; 0x06
			tick_count = 0;
     e36:	10 92 50 21 	sts	0x2150, r1
     e3a:	10 92 51 21 	sts	0x2151, r1
		}			
		
		if (get_toggle_switch_state())
     e3e:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     e42:	88 23       	and	r24, r24
     e44:	49 f0       	breq	.+18     	; 0xe58 <test_BPM+0x178>
			seven_segment_value = beat_count + 10*measure_count;
     e46:	2d 81       	ldd	r18, Y+5	; 0x05
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	3a e0       	ldi	r19, 0x0A	; 10
     e4c:	83 9f       	mul	r24, r19
     e4e:	c0 01       	movw	r24, r0
     e50:	11 24       	eor	r1, r1
     e52:	82 0f       	add	r24, r18
     e54:	91 1d       	adc	r25, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <test_BPM+0x17c>
		else
			seven_segment_value = BPM;
     e58:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e5c:	88 87       	std	Y+8, r24	; 0x08
     e5e:	99 87       	std	Y+9, r25	; 0x09
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	69 81       	ldd	r22, Y+1	; 0x01
     e64:	4a 81       	ldd	r20, Y+2	; 0x02
     e66:	2b 81       	ldd	r18, Y+3	; 0x03
     e68:	08 85       	ldd	r16, Y+8	; 0x08
     e6a:	19 85       	ldd	r17, Y+9	; 0x09
     e6c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     e70:	63 cf       	rjmp	.-314    	; 0xd38 <test_BPM+0x58>

00000e72 <test_tick_accuracy>:
	
}

void test_tick_accuracy(){
     e72:	2f 92       	push	r2
     e74:	3f 92       	push	r3
     e76:	4f 92       	push	r4
     e78:	5f 92       	push	r5
     e7a:	6f 92       	push	r6
     e7c:	7f 92       	push	r7
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	61 97       	sbiw	r28, 0x11	; 17
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	de bf       	out	0x3e, r29	; 62
	volatile bool decimal_point0 = 0;
     e9e:	19 82       	std	Y+1, r1	; 0x01
	volatile bool decimal_point1 = 0;
     ea0:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool decimal_point2 = 0;
     ea2:	1b 82       	std	Y+3, r1	; 0x03
	volatile bool status_LED = 0;
     ea4:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint16_t seven_segment_value = 0;
     ea6:	1e 82       	std	Y+6, r1	; 0x06
     ea8:	1f 82       	std	Y+7, r1	; 0x07
	
	volatile uint16_t BPM;

	
	volatile uint32_t beat_count = 0;
     eaa:	1a 86       	std	Y+10, r1	; 0x0a
     eac:	1b 86       	std	Y+11, r1	; 0x0b
     eae:	1c 86       	std	Y+12, r1	; 0x0c
     eb0:	1d 86       	std	Y+13, r1	; 0x0d
	volatile uint32_t beat_count_max;
	
	volatile bool finished = 0;
     eb2:	1d 82       	std	Y+5, r1	; 0x05
	
	
	startup_functions();
     eb4:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     eb8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <serial_midi_init>

	
	TCC0.CTRLA = 0x00;  //disable timer
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f8 e0       	ldi	r31, 0x08	; 8
     ec0:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     ec8:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     eca:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     ecc:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	87 83       	std	Z+7, r24	; 0x07

	while(1){
		for(BPM = 30; BPM < 34; BPM++){
     ed2:	be e1       	ldi	r27, 0x1E	; 30
     ed4:	8b 2e       	mov	r8, r27
     ed6:	91 2c       	mov	r9, r1
			
			if (!get_toggle_switch_state())
				break;
		
			seven_segment_value = BPM;
			velocity_out = BPM/127;		//prepare signifying MIDI outputs
     ed8:	af e7       	ldi	r26, 0x7F	; 127
     eda:	6a 2e       	mov	r6, r26
     edc:	71 2c       	mov	r7, r1
		
			beat_count = 0;
			
			//4 beats or 4 seconds, whichever is more samples
			if (BPM/20 > 4)
				beat_count_max = BPM/15;
     ede:	ff e0       	ldi	r31, 0x0F	; 15
     ee0:	4f 2e       	mov	r4, r31
     ee2:	51 2c       	mov	r5, r1
				if (tick_count >= 24){
					tick_count = tick_count - 24;
					beat_count++;
				}
				if (tick_count < 12)
					status_LED = 1;
     ee4:	ff 24       	eor	r15, r15
     ee6:	f3 94       	inc	r15
			
			//4 beats or 4 seconds, whichever is more samples
			if (BPM/20 > 4)
				beat_count_max = BPM/15;
			else
				beat_count_max = 4;
     ee8:	e4 e0       	ldi	r30, 0x04	; 4
     eea:	ae 2e       	mov	r10, r30
     eec:	b1 2c       	mov	r11, r1
     eee:	c1 2c       	mov	r12, r1
     ef0:	d1 2c       	mov	r13, r1
			else{
				decimal_point0 = 0;
				decimal_point1 = 0;
				decimal_point2 = 0;
				status_LED = 0;
				seven_segment_value = 888;			
     ef2:	78 e7       	ldi	r23, 0x78	; 120
     ef4:	27 2e       	mov	r2, r23
     ef6:	73 e0       	ldi	r23, 0x03	; 3
     ef8:	37 2e       	mov	r3, r23
	TCC0.CTRLD = 0x00;
	TCC0.INTCTRLA = 0x00;
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level

	while(1){
		for(BPM = 30; BPM < 34; BPM++){
     efa:	88 86       	std	Y+8, r8	; 0x08
     efc:	99 86       	std	Y+9, r9	; 0x09
     efe:	98 c0       	rjmp	.+304    	; 0x1030 <test_tick_accuracy+0x1be>
			preloop_functions();
     f00:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
			
			if (!get_toggle_switch_state())
     f04:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <test_tick_accuracy+0x9c>
     f0c:	cb c0       	rjmp	.+406    	; 0x10a4 <test_tick_accuracy+0x232>
				break;
		
			seven_segment_value = BPM;
     f0e:	88 85       	ldd	r24, Y+8	; 0x08
     f10:	99 85       	ldd	r25, Y+9	; 0x09
     f12:	8e 83       	std	Y+6, r24	; 0x06
     f14:	9f 83       	std	Y+7, r25	; 0x07
			velocity_out = BPM/127;		//prepare signifying MIDI outputs
     f16:	88 85       	ldd	r24, Y+8	; 0x08
     f18:	99 85       	ldd	r25, Y+9	; 0x09
     f1a:	b3 01       	movw	r22, r6
     f1c:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
     f20:	60 93 41 22 	sts	0x2241, r22
     f24:	70 93 42 22 	sts	0x2242, r23
			note_out = BPM - velocity_out*127;
     f28:	88 85       	ldd	r24, Y+8	; 0x08
     f2a:	99 85       	ldd	r25, Y+9	; 0x09
     f2c:	40 91 41 22 	lds	r20, 0x2241
     f30:	50 91 42 22 	lds	r21, 0x2242
     f34:	9a 01       	movw	r18, r20
     f36:	36 95       	lsr	r19
     f38:	32 2f       	mov	r19, r18
     f3a:	22 27       	eor	r18, r18
     f3c:	37 95       	ror	r19
     f3e:	27 95       	ror	r18
     f40:	24 1b       	sub	r18, r20
     f42:	35 0b       	sbc	r19, r21
     f44:	82 1b       	sub	r24, r18
     f46:	93 0b       	sbc	r25, r19
     f48:	80 93 43 22 	sts	0x2243, r24
     f4c:	90 93 44 22 	sts	0x2244, r25
		
			decimal_point0 = 0;
     f50:	19 82       	std	Y+1, r1	; 0x01
			decimal_point1 = 0;
     f52:	1a 82       	std	Y+2, r1	; 0x02
			decimal_point2 = 0;
     f54:	1b 82       	std	Y+3, r1	; 0x03
			status_LED = 0;
     f56:	1c 82       	std	Y+4, r1	; 0x04
		
			beat_count = 0;
     f58:	1a 86       	std	Y+10, r1	; 0x0a
     f5a:	1b 86       	std	Y+11, r1	; 0x0b
     f5c:	1c 86       	std	Y+12, r1	; 0x0c
     f5e:	1d 86       	std	Y+13, r1	; 0x0d
			
			//4 beats or 4 seconds, whichever is more samples
			if (BPM/20 > 4)
     f60:	88 85       	ldd	r24, Y+8	; 0x08
     f62:	99 85       	ldd	r25, Y+9	; 0x09
     f64:	84 36       	cpi	r24, 0x64	; 100
     f66:	91 05       	cpc	r25, r1
     f68:	60 f0       	brcs	.+24     	; 0xf82 <test_tick_accuracy+0x110>
				beat_count_max = BPM/15;
     f6a:	88 85       	ldd	r24, Y+8	; 0x08
     f6c:	99 85       	ldd	r25, Y+9	; 0x09
     f6e:	b2 01       	movw	r22, r4
     f70:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	6e 87       	std	Y+14, r22	; 0x0e
     f7a:	7f 87       	std	Y+15, r23	; 0x0f
     f7c:	88 8b       	std	Y+16, r24	; 0x10
     f7e:	99 8b       	std	Y+17, r25	; 0x11
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <test_tick_accuracy+0x118>
			else
				beat_count_max = 4;
     f82:	ae 86       	std	Y+14, r10	; 0x0e
     f84:	bf 86       	std	Y+15, r11	; 0x0f
     f86:	c8 8a       	std	Y+16, r12	; 0x10
     f88:	d9 8a       	std	Y+17, r13	; 0x11
		
			midi_send_clock(serial_midi_device());    //clock tick to separate different BPMs
     f8a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     f8e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <midi_send_clock>
			midi_send_clock(serial_midi_device());
     f92:	0e 94 78 08 	call	0x10f0	; 0x10f0 <serial_midi_device>
     f96:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <midi_send_clock>
			
			tick_count = 0;
     f9a:	10 92 50 21 	sts	0x2150, r1
     f9e:	10 92 51 21 	sts	0x2151, r1
		
			BPM_to_TMR(BPM);  //start ticks
     fa2:	88 85       	ldd	r24, Y+8	; 0x08
     fa4:	99 85       	ldd	r25, Y+9	; 0x09
     fa6:	0e 94 97 05 	call	0xb2e	; 0xb2e <BPM_to_TMR>
		
		
	
			while(beat_count < beat_count_max && get_toggle_switch_state()){
     faa:	2b c0       	rjmp	.+86     	; 0x1002 <test_tick_accuracy+0x190>
				preloop_functions();
     fac:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
				if (tick_count >= 24){
     fb0:	80 91 50 21 	lds	r24, 0x2150
     fb4:	90 91 51 21 	lds	r25, 0x2151
     fb8:	88 31       	cpi	r24, 0x18	; 24
     fba:	91 05       	cpc	r25, r1
     fbc:	80 f0       	brcs	.+32     	; 0xfde <test_tick_accuracy+0x16c>
					tick_count = tick_count - 24;
     fbe:	48 97       	sbiw	r24, 0x18	; 24
     fc0:	80 93 50 21 	sts	0x2150, r24
     fc4:	90 93 51 21 	sts	0x2151, r25
					beat_count++;
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	ac 85       	ldd	r26, Y+12	; 0x0c
     fce:	bd 85       	ldd	r27, Y+13	; 0x0d
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	a1 1d       	adc	r26, r1
     fd4:	b1 1d       	adc	r27, r1
     fd6:	8a 87       	std	Y+10, r24	; 0x0a
     fd8:	9b 87       	std	Y+11, r25	; 0x0b
     fda:	ac 87       	std	Y+12, r26	; 0x0c
     fdc:	bd 87       	std	Y+13, r27	; 0x0d
				}
				if (tick_count < 12)
     fde:	80 91 50 21 	lds	r24, 0x2150
     fe2:	90 91 51 21 	lds	r25, 0x2151
     fe6:	8c 30       	cpi	r24, 0x0C	; 12
     fe8:	91 05       	cpc	r25, r1
     fea:	10 f4       	brcc	.+4      	; 0xff0 <test_tick_accuracy+0x17e>
					status_LED = 1;
     fec:	fc 82       	std	Y+4, r15	; 0x04
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <test_tick_accuracy+0x180>
				else
					status_LED = 0;
     ff0:	1c 82       	std	Y+4, r1	; 0x04
				postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	69 81       	ldd	r22, Y+1	; 0x01
     ff6:	4a 81       	ldd	r20, Y+2	; 0x02
     ff8:	2b 81       	ldd	r18, Y+3	; 0x03
     ffa:	0e 81       	ldd	r16, Y+6	; 0x06
     ffc:	1f 81       	ldd	r17, Y+7	; 0x07
     ffe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
		
			BPM_to_TMR(BPM);  //start ticks
		
		
	
			while(beat_count < beat_count_max && get_toggle_switch_state()){
    1002:	2a 85       	ldd	r18, Y+10	; 0x0a
    1004:	3b 85       	ldd	r19, Y+11	; 0x0b
    1006:	4c 85       	ldd	r20, Y+12	; 0x0c
    1008:	5d 85       	ldd	r21, Y+13	; 0x0d
    100a:	8e 85       	ldd	r24, Y+14	; 0x0e
    100c:	9f 85       	ldd	r25, Y+15	; 0x0f
    100e:	a8 89       	ldd	r26, Y+16	; 0x10
    1010:	b9 89       	ldd	r27, Y+17	; 0x11
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	4a 07       	cpc	r20, r26
    1018:	5b 07       	cpc	r21, r27
    101a:	20 f4       	brcc	.+8      	; 0x1024 <test_tick_accuracy+0x1b2>
    101c:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
    1020:	88 23       	and	r24, r24
    1022:	21 f6       	brne	.-120    	; 0xfac <test_tick_accuracy+0x13a>
				else
					status_LED = 0;
				postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
			}
		
			finished = 1;
    1024:	fd 82       	std	Y+5, r15	; 0x05
	TCC0.CTRLD = 0x00;
	TCC0.INTCTRLA = 0x00;
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level

	while(1){
		for(BPM = 30; BPM < 34; BPM++){
    1026:	88 85       	ldd	r24, Y+8	; 0x08
    1028:	99 85       	ldd	r25, Y+9	; 0x09
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	88 87       	std	Y+8, r24	; 0x08
    102e:	99 87       	std	Y+9, r25	; 0x09
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	99 85       	ldd	r25, Y+9	; 0x09
    1034:	82 32       	cpi	r24, 0x22	; 34
    1036:	91 05       	cpc	r25, r1
    1038:	08 f4       	brcc	.+2      	; 0x103c <test_tick_accuracy+0x1ca>
    103a:	62 cf       	rjmp	.-316    	; 0xf00 <test_tick_accuracy+0x8e>
    103c:	33 c0       	rjmp	.+102    	; 0x10a4 <test_tick_accuracy+0x232>
			finished = 1;

		}
	
		while(!get_toggle_switch_state() || finished){
			note_out = 0;
    103e:	10 92 43 22 	sts	0x2243, r1
    1042:	10 92 44 22 	sts	0x2244, r1
		
			preloop_functions();
    1046:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
			BPM_to_TMR(200);
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 97 05 	call	0xb2e	; 0xb2e <BPM_to_TMR>
			if (tick_count >= 24)
    1052:	80 91 50 21 	lds	r24, 0x2150
    1056:	90 91 51 21 	lds	r25, 0x2151
    105a:	88 31       	cpi	r24, 0x18	; 24
    105c:	91 05       	cpc	r25, r1
    105e:	20 f0       	brcs	.+8      	; 0x1068 <test_tick_accuracy+0x1f6>
				tick_count = 0;
    1060:	10 92 50 21 	sts	0x2150, r1
    1064:	10 92 51 21 	sts	0x2151, r1
		
			if (tick_count < 12){
    1068:	80 91 50 21 	lds	r24, 0x2150
    106c:	90 91 51 21 	lds	r25, 0x2151
    1070:	8c 30       	cpi	r24, 0x0C	; 12
    1072:	91 05       	cpc	r25, r1
    1074:	48 f4       	brcc	.+18     	; 0x1088 <test_tick_accuracy+0x216>
				decimal_point0 = 1;
    1076:	f9 82       	std	Y+1, r15	; 0x01
				decimal_point1 = 1;
    1078:	fa 82       	std	Y+2, r15	; 0x02
				decimal_point2 = 1;
    107a:	fb 82       	std	Y+3, r15	; 0x03
				status_LED = 1;
    107c:	fc 82       	std	Y+4, r15	; 0x04
				seven_segment_value = 111;
    107e:	8f e6       	ldi	r24, 0x6F	; 111
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	8e 83       	std	Y+6, r24	; 0x06
    1084:	9f 83       	std	Y+7, r25	; 0x07
    1086:	06 c0       	rjmp	.+12     	; 0x1094 <test_tick_accuracy+0x222>
			}
			else{
				decimal_point0 = 0;
    1088:	19 82       	std	Y+1, r1	; 0x01
				decimal_point1 = 0;
    108a:	1a 82       	std	Y+2, r1	; 0x02
				decimal_point2 = 0;
    108c:	1b 82       	std	Y+3, r1	; 0x03
				status_LED = 0;
    108e:	1c 82       	std	Y+4, r1	; 0x04
				seven_segment_value = 888;			
    1090:	2e 82       	std	Y+6, r2	; 0x06
    1092:	3f 82       	std	Y+7, r3	; 0x07
			}	
			postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	4a 81       	ldd	r20, Y+2	; 0x02
    109a:	2b 81       	ldd	r18, Y+3	; 0x03
    109c:	0e 81       	ldd	r16, Y+6	; 0x06
    109e:	1f 81       	ldd	r17, Y+7	; 0x07
    10a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
		
			finished = 1;

		}
	
		while(!get_toggle_switch_state() || finished){
    10a4:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
    10a8:	88 23       	and	r24, r24
    10aa:	49 f2       	breq	.-110    	; 0x103e <test_tick_accuracy+0x1cc>
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	88 23       	and	r24, r24
    10b0:	31 f6       	brne	.-116    	; 0x103e <test_tick_accuracy+0x1cc>
    10b2:	23 cf       	rjmp	.-442    	; 0xefa <test_tick_accuracy+0x88>

000010b4 <main>:

int main(void) {

//	test_xnor_out();
//    test_BPM();
   test_tick_accuracy();
    10b4:	0e 94 39 07 	call	0xe72	; 0xe72 <test_tick_accuracy>
   
	return 0;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	08 95       	ret

000010be <serial_midi_send>:
#include <avr/interrupt.h>
#include "stdlib.h"

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    10be:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    10c0:	80 91 b1 09 	lds	r24, 0x09B1
    10c4:	85 ff       	sbrs	r24, 5
    10c6:	fc cf       	rjmp	.-8      	; 0x10c0 <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
    10c8:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    10cc:	62 30       	cpi	r22, 0x02	; 2
    10ce:	70 f0       	brcs	.+28     	; 0x10ec <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    10d0:	80 91 b1 09 	lds	r24, 0x09B1
    10d4:	85 ff       	sbrs	r24, 5
    10d6:	fc cf       	rjmp	.-8      	; 0x10d0 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    10d8:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    10dc:	63 30       	cpi	r22, 0x03	; 3
    10de:	31 f4       	brne	.+12     	; 0x10ec <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    10e0:	80 91 b1 09 	lds	r24, 0x09B1
    10e4:	85 ff       	sbrs	r24, 5
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    10e8:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <serial_midi_device>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
    10f0:	84 e5       	ldi	r24, 0x54	; 84
    10f2:	91 e2       	ldi	r25, 0x21	; 33
    10f4:	08 95       	ret

000010f6 <serial_midi_init>:

MidiDevice* serial_midi_init(){
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
    10fa:	c4 e5       	ldi	r28, 0x54	; 84
    10fc:	d1 e2       	ldi	r29, 0x21	; 33
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 be 0a 	call	0x157c	; 0x157c <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
    1104:	ce 01       	movw	r24, r28
    1106:	6f e5       	ldi	r22, 0x5F	; 95
    1108:	78 e0       	ldi	r23, 0x08	; 8
    110a:	0e 94 16 0b 	call	0x162c	; 0x162c <midi_device_set_send_func>

   return serial_midi_device();
}
    110e:	ce 01       	movw	r24, r28
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <bytequeue_init>:
    1116:	fc 01       	movw	r30, r24
    1118:	42 83       	std	Z+2, r20	; 0x02
    111a:	63 83       	std	Z+3, r22	; 0x03
    111c:	74 83       	std	Z+4, r23	; 0x04
    111e:	11 82       	std	Z+1, r1	; 0x01
    1120:	10 82       	st	Z, r1
    1122:	08 95       	ret

00001124 <bytequeue_enqueue>:
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
    112e:	16 2f       	mov	r17, r22
    1130:	0e 94 0c 09 	call	0x1218	; 0x1218 <store_and_clear_interrupt>
    1134:	08 2f       	mov	r16, r24
    1136:	29 81       	ldd	r18, Y+1	; 0x01
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	c9 01       	movw	r24, r18
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	6a 81       	ldd	r22, Y+2	; 0x02
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    1146:	48 81       	ld	r20, Y
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	84 17       	cp	r24, r20
    114c:	95 07       	cpc	r25, r21
    114e:	29 f4       	brne	.+10     	; 0x115a <bytequeue_enqueue+0x36>
    1150:	80 2f       	mov	r24, r16
    1152:	0e 94 0f 09 	call	0x121e	; 0x121e <restore_interrupt_setting>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <bytequeue_enqueue+0x5c>
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	10 83       	st	Z, r17
    1164:	29 81       	ldd	r18, Y+1	; 0x01
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	6a 81       	ldd	r22, Y+2	; 0x02
    116e:	c9 01       	movw	r24, r18
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	80 2f       	mov	r24, r16
    117a:	0e 94 0f 09 	call	0x121e	; 0x121e <restore_interrupt_setting>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <bytequeue_length>:
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	ec 01       	movw	r28, r24
    1192:	0e 94 0c 09 	call	0x1218	; 0x1218 <store_and_clear_interrupt>
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	98 81       	ld	r25, Y
    119a:	29 17       	cp	r18, r25
    119c:	10 f0       	brcs	.+4      	; 0x11a2 <bytequeue_length+0x18>
    119e:	12 2f       	mov	r17, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <bytequeue_length+0x1c>
    11a2:	1a 81       	ldd	r17, Y+2	; 0x02
    11a4:	12 0f       	add	r17, r18
    11a6:	19 1b       	sub	r17, r25
    11a8:	0e 94 0f 09 	call	0x121e	; 0x121e <restore_interrupt_setting>
    11ac:	81 2f       	mov	r24, r17
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	08 95       	ret

000011b6 <bytequeue_get>:
    11b6:	fc 01       	movw	r30, r24
    11b8:	80 81       	ld	r24, Z
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	86 0f       	add	r24, r22
    11be:	91 1d       	adc	r25, r1
    11c0:	62 81       	ldd	r22, Z+2	; 0x02
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    11c8:	03 80       	ldd	r0, Z+3	; 0x03
    11ca:	f4 81       	ldd	r31, Z+4	; 0x04
    11cc:	e0 2d       	mov	r30, r0
    11ce:	e8 0f       	add	r30, r24
    11d0:	f9 1f       	adc	r31, r25
    11d2:	80 81       	ld	r24, Z
    11d4:	08 95       	ret

000011d6 <bytequeue_remove>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	8c 01       	movw	r16, r24
    11e6:	69 83       	std	Y+1, r22	; 0x01
    11e8:	0e 94 0c 09 	call	0x1218	; 0x1218 <store_and_clear_interrupt>
    11ec:	48 2f       	mov	r20, r24
    11ee:	f8 01       	movw	r30, r16
    11f0:	20 81       	ld	r18, Z
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	69 81       	ldd	r22, Y+1	; 0x01
    11f6:	26 0f       	add	r18, r22
    11f8:	31 1d       	adc	r19, r1
    11fa:	62 81       	ldd	r22, Z+2	; 0x02
    11fc:	c9 01       	movw	r24, r18
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    1204:	80 83       	st	Z, r24
    1206:	84 2f       	mov	r24, r20
    1208:	0e 94 0f 09 	call	0x121e	; 0x121e <restore_interrupt_setting>
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <store_and_clear_interrupt>:
    1218:	8f b7       	in	r24, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	08 95       	ret

0000121e <restore_interrupt_setting>:
    121e:	8f bf       	out	0x3f, r24	; 63
    1220:	08 95       	ret

00001222 <midi_is_statusbyte>:
    1222:	88 1f       	adc	r24, r24
    1224:	88 27       	eor	r24, r24
    1226:	88 1f       	adc	r24, r24
    1228:	08 95       	ret

0000122a <midi_is_realtime>:
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	88 3f       	cpi	r24, 0xF8	; 248
    122e:	08 f4       	brcc	.+2      	; 0x1232 <midi_is_realtime+0x8>
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	89 2f       	mov	r24, r25
    1234:	08 95       	ret

00001236 <midi_packet_length>:
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	20 7f       	andi	r18, 0xF0	; 240
    123c:	30 70       	andi	r19, 0x00	; 0
    123e:	20 3b       	cpi	r18, 0xB0	; 176
    1240:	31 05       	cpc	r19, r1
    1242:	f1 f0       	breq	.+60     	; 0x1280 <midi_packet_length+0x4a>
    1244:	21 3b       	cpi	r18, 0xB1	; 177
    1246:	31 05       	cpc	r19, r1
    1248:	54 f4       	brge	.+20     	; 0x125e <midi_packet_length+0x28>
    124a:	20 39       	cpi	r18, 0x90	; 144
    124c:	31 05       	cpc	r19, r1
    124e:	c1 f0       	breq	.+48     	; 0x1280 <midi_packet_length+0x4a>
    1250:	20 3a       	cpi	r18, 0xA0	; 160
    1252:	31 05       	cpc	r19, r1
    1254:	a9 f0       	breq	.+42     	; 0x1280 <midi_packet_length+0x4a>
    1256:	20 38       	cpi	r18, 0x80	; 128
    1258:	31 05       	cpc	r19, r1
    125a:	e9 f4       	brne	.+58     	; 0x1296 <midi_packet_length+0x60>
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <midi_packet_length+0x4a>
    125e:	20 3d       	cpi	r18, 0xD0	; 208
    1260:	31 05       	cpc	r19, r1
    1262:	d9 f0       	breq	.+54     	; 0x129a <midi_packet_length+0x64>
    1264:	21 3d       	cpi	r18, 0xD1	; 209
    1266:	31 05       	cpc	r19, r1
    1268:	24 f4       	brge	.+8      	; 0x1272 <midi_packet_length+0x3c>
    126a:	20 3c       	cpi	r18, 0xC0	; 192
    126c:	31 05       	cpc	r19, r1
    126e:	99 f4       	brne	.+38     	; 0x1296 <midi_packet_length+0x60>
    1270:	14 c0       	rjmp	.+40     	; 0x129a <midi_packet_length+0x64>
    1272:	20 3e       	cpi	r18, 0xE0	; 224
    1274:	31 05       	cpc	r19, r1
    1276:	21 f0       	breq	.+8      	; 0x1280 <midi_packet_length+0x4a>
    1278:	20 3f       	cpi	r18, 0xF0	; 240
    127a:	31 05       	cpc	r19, r1
    127c:	61 f4       	brne	.+24     	; 0x1296 <midi_packet_length+0x60>
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <midi_packet_length+0x4e>
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	08 95       	ret
    1284:	e8 2f       	mov	r30, r24
    1286:	e1 5f       	subi	r30, 0xF1	; 241
    1288:	ef 30       	cpi	r30, 0x0F	; 15
    128a:	48 f4       	brcc	.+18     	; 0x129e <midi_packet_length+0x68>
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	e0 5e       	subi	r30, 0xE0	; 224
    1290:	ff 4d       	sbci	r31, 0xDF	; 223
    1292:	80 81       	ld	r24, Z
    1294:	08 95       	ret
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	08 95       	ret
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret

000012a2 <midi_send_cc>:
    12a2:	0f 93       	push	r16
    12a4:	36 2f       	mov	r19, r22
    12a6:	54 2f       	mov	r21, r20
    12a8:	02 2f       	mov	r16, r18
    12aa:	3f 70       	andi	r19, 0x0F	; 15
    12ac:	30 6b       	ori	r19, 0xB0	; 176
    12ae:	5f 77       	andi	r21, 0x7F	; 127
    12b0:	0f 77       	andi	r16, 0x7F	; 127
    12b2:	dc 01       	movw	r26, r24
    12b4:	ed 91       	ld	r30, X+
    12b6:	fc 91       	ld	r31, X
    12b8:	63 e0       	ldi	r22, 0x03	; 3
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	43 2f       	mov	r20, r19
    12be:	25 2f       	mov	r18, r21
    12c0:	09 95       	icall
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <midi_send_noteon>:
    12c6:	0f 93       	push	r16
    12c8:	36 2f       	mov	r19, r22
    12ca:	54 2f       	mov	r21, r20
    12cc:	02 2f       	mov	r16, r18
    12ce:	3f 70       	andi	r19, 0x0F	; 15
    12d0:	30 69       	ori	r19, 0x90	; 144
    12d2:	5f 77       	andi	r21, 0x7F	; 127
    12d4:	0f 77       	andi	r16, 0x7F	; 127
    12d6:	dc 01       	movw	r26, r24
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	63 e0       	ldi	r22, 0x03	; 3
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	43 2f       	mov	r20, r19
    12e2:	25 2f       	mov	r18, r21
    12e4:	09 95       	icall
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <midi_send_noteoff>:
    12ea:	0f 93       	push	r16
    12ec:	36 2f       	mov	r19, r22
    12ee:	54 2f       	mov	r21, r20
    12f0:	02 2f       	mov	r16, r18
    12f2:	3f 70       	andi	r19, 0x0F	; 15
    12f4:	30 68       	ori	r19, 0x80	; 128
    12f6:	5f 77       	andi	r21, 0x7F	; 127
    12f8:	0f 77       	andi	r16, 0x7F	; 127
    12fa:	dc 01       	movw	r26, r24
    12fc:	ed 91       	ld	r30, X+
    12fe:	fc 91       	ld	r31, X
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	43 2f       	mov	r20, r19
    1306:	25 2f       	mov	r18, r21
    1308:	09 95       	icall
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <midi_send_aftertouch>:
    130e:	0f 93       	push	r16
    1310:	36 2f       	mov	r19, r22
    1312:	54 2f       	mov	r21, r20
    1314:	02 2f       	mov	r16, r18
    1316:	3f 70       	andi	r19, 0x0F	; 15
    1318:	30 6a       	ori	r19, 0xA0	; 160
    131a:	5f 77       	andi	r21, 0x7F	; 127
    131c:	0f 77       	andi	r16, 0x7F	; 127
    131e:	dc 01       	movw	r26, r24
    1320:	ed 91       	ld	r30, X+
    1322:	fc 91       	ld	r31, X
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	43 2f       	mov	r20, r19
    132a:	25 2f       	mov	r18, r21
    132c:	09 95       	icall
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <midi_send_pitchbend>:
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	8a 01       	movw	r16, r20
    1338:	20 e2       	ldi	r18, 0x20	; 32
    133a:	40 30       	cpi	r20, 0x00	; 0
    133c:	52 07       	cpc	r21, r18
    133e:	3c f4       	brge	.+14     	; 0x134e <midi_send_pitchbend+0x1c>
    1340:	a0 ee       	ldi	r26, 0xE0	; 224
    1342:	40 30       	cpi	r20, 0x00	; 0
    1344:	5a 07       	cpc	r21, r26
    1346:	34 f0       	brlt	.+12     	; 0x1354 <midi_send_pitchbend+0x22>
    1348:	00 50       	subi	r16, 0x00	; 0
    134a:	10 4e       	sbci	r17, 0xE0	; 224
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <midi_send_pitchbend+0x26>
    134e:	0f ef       	ldi	r16, 0xFF	; 255
    1350:	1f e3       	ldi	r17, 0x3F	; 63
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <midi_send_pitchbend+0x26>
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	46 2f       	mov	r20, r22
    135a:	4f 70       	andi	r20, 0x0F	; 15
    135c:	40 6e       	ori	r20, 0xE0	; 224
    135e:	20 2f       	mov	r18, r16
    1360:	2f 77       	andi	r18, 0x7F	; 127
    1362:	00 0f       	add	r16, r16
    1364:	01 2f       	mov	r16, r17
    1366:	00 1f       	adc	r16, r16
    1368:	11 0b       	sbc	r17, r17
    136a:	11 95       	neg	r17
    136c:	0f 77       	andi	r16, 0x7F	; 127
    136e:	dc 01       	movw	r26, r24
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	63 e0       	ldi	r22, 0x03	; 3
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	09 95       	icall
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <midi_send_programchange>:
    1380:	0f 93       	push	r16
    1382:	36 2f       	mov	r19, r22
    1384:	24 2f       	mov	r18, r20
    1386:	3f 70       	andi	r19, 0x0F	; 15
    1388:	30 6c       	ori	r19, 0xC0	; 192
    138a:	2f 77       	andi	r18, 0x7F	; 127
    138c:	dc 01       	movw	r26, r24
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	43 2f       	mov	r20, r19
    1398:	00 e0       	ldi	r16, 0x00	; 0
    139a:	09 95       	icall
    139c:	0f 91       	pop	r16
    139e:	08 95       	ret

000013a0 <midi_send_channelpressure>:
    13a0:	0f 93       	push	r16
    13a2:	36 2f       	mov	r19, r22
    13a4:	24 2f       	mov	r18, r20
    13a6:	3f 70       	andi	r19, 0x0F	; 15
    13a8:	30 6d       	ori	r19, 0xD0	; 208
    13aa:	2f 77       	andi	r18, 0x7F	; 127
    13ac:	dc 01       	movw	r26, r24
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	43 2f       	mov	r20, r19
    13b8:	00 e0       	ldi	r16, 0x00	; 0
    13ba:	09 95       	icall
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <midi_send_clock>:
    13c0:	0f 93       	push	r16
    13c2:	dc 01       	movw	r26, r24
    13c4:	ed 91       	ld	r30, X+
    13c6:	fc 91       	ld	r31, X
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	48 ef       	ldi	r20, 0xF8	; 248
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	09 95       	icall
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <midi_send_tick>:
    13d8:	0f 93       	push	r16
    13da:	dc 01       	movw	r26, r24
    13dc:	ed 91       	ld	r30, X+
    13de:	fc 91       	ld	r31, X
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	49 ef       	ldi	r20, 0xF9	; 249
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	09 95       	icall
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <midi_send_start>:
    13f0:	0f 93       	push	r16
    13f2:	dc 01       	movw	r26, r24
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	4a ef       	ldi	r20, 0xFA	; 250
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	09 95       	icall
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <midi_send_continue>:
    1408:	0f 93       	push	r16
    140a:	dc 01       	movw	r26, r24
    140c:	ed 91       	ld	r30, X+
    140e:	fc 91       	ld	r31, X
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	4b ef       	ldi	r20, 0xFB	; 251
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	00 e0       	ldi	r16, 0x00	; 0
    141a:	09 95       	icall
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <midi_send_stop>:
    1420:	0f 93       	push	r16
    1422:	dc 01       	movw	r26, r24
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	4c ef       	ldi	r20, 0xFC	; 252
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	00 e0       	ldi	r16, 0x00	; 0
    1432:	09 95       	icall
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <midi_send_activesense>:
    1438:	0f 93       	push	r16
    143a:	dc 01       	movw	r26, r24
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	4e ef       	ldi	r20, 0xFE	; 254
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	09 95       	icall
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <midi_send_reset>:
    1450:	0f 93       	push	r16
    1452:	dc 01       	movw	r26, r24
    1454:	ed 91       	ld	r30, X+
    1456:	fc 91       	ld	r31, X
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	4f ef       	ldi	r20, 0xFF	; 255
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	00 e0       	ldi	r16, 0x00	; 0
    1462:	09 95       	icall
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <midi_send_tcquarterframe>:
    1468:	0f 93       	push	r16
    146a:	26 2f       	mov	r18, r22
    146c:	2f 77       	andi	r18, 0x7F	; 127
    146e:	dc 01       	movw	r26, r24
    1470:	ed 91       	ld	r30, X+
    1472:	fc 91       	ld	r31, X
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	41 ef       	ldi	r20, 0xF1	; 241
    147a:	00 e0       	ldi	r16, 0x00	; 0
    147c:	09 95       	icall
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <midi_send_songposition>:
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	26 2f       	mov	r18, r22
    1488:	2f 77       	andi	r18, 0x7F	; 127
    148a:	8b 01       	movw	r16, r22
    148c:	00 0f       	add	r16, r16
    148e:	01 2f       	mov	r16, r17
    1490:	00 1f       	adc	r16, r16
    1492:	11 0b       	sbc	r17, r17
    1494:	11 95       	neg	r17
    1496:	0f 77       	andi	r16, 0x7F	; 127
    1498:	dc 01       	movw	r26, r24
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	63 e0       	ldi	r22, 0x03	; 3
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	42 ef       	ldi	r20, 0xF2	; 242
    14a4:	09 95       	icall
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <midi_send_songselect>:
    14ac:	0f 93       	push	r16
    14ae:	26 2f       	mov	r18, r22
    14b0:	2f 77       	andi	r18, 0x7F	; 127
    14b2:	dc 01       	movw	r26, r24
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	43 ef       	ldi	r20, 0xF3	; 243
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	09 95       	icall
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <midi_send_tunerequest>:
    14c6:	0f 93       	push	r16
    14c8:	dc 01       	movw	r26, r24
    14ca:	ed 91       	ld	r30, X+
    14cc:	fc 91       	ld	r31, X
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	46 ef       	ldi	r20, 0xF6	; 246
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	00 e0       	ldi	r16, 0x00	; 0
    14d8:	09 95       	icall
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <midi_send_byte>:
    14de:	0f 93       	push	r16
    14e0:	46 2f       	mov	r20, r22
    14e2:	dc 01       	movw	r26, r24
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	09 95       	icall
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <midi_send_data>:
    14f6:	0f 93       	push	r16
    14f8:	dc 01       	movw	r26, r24
    14fa:	ed 91       	ld	r30, X+
    14fc:	fc 91       	ld	r31, X
    14fe:	09 95       	icall
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <midi_register_cc_callback>:
    1504:	fc 01       	movw	r30, r24
    1506:	62 83       	std	Z+2, r22	; 0x02
    1508:	73 83       	std	Z+3, r23	; 0x03
    150a:	08 95       	ret

0000150c <midi_register_noteon_callback>:
    150c:	fc 01       	movw	r30, r24
    150e:	64 83       	std	Z+4, r22	; 0x04
    1510:	75 83       	std	Z+5, r23	; 0x05
    1512:	08 95       	ret

00001514 <midi_register_noteoff_callback>:
    1514:	fc 01       	movw	r30, r24
    1516:	66 83       	std	Z+6, r22	; 0x06
    1518:	77 83       	std	Z+7, r23	; 0x07
    151a:	08 95       	ret

0000151c <midi_register_aftertouch_callback>:
    151c:	fc 01       	movw	r30, r24
    151e:	60 87       	std	Z+8, r22	; 0x08
    1520:	71 87       	std	Z+9, r23	; 0x09
    1522:	08 95       	ret

00001524 <midi_register_pitchbend_callback>:
    1524:	fc 01       	movw	r30, r24
    1526:	62 87       	std	Z+10, r22	; 0x0a
    1528:	73 87       	std	Z+11, r23	; 0x0b
    152a:	08 95       	ret

0000152c <midi_register_songposition_callback>:
    152c:	fc 01       	movw	r30, r24
    152e:	64 87       	std	Z+12, r22	; 0x0c
    1530:	75 87       	std	Z+13, r23	; 0x0d
    1532:	08 95       	ret

00001534 <midi_register_progchange_callback>:
    1534:	fc 01       	movw	r30, r24
    1536:	66 87       	std	Z+14, r22	; 0x0e
    1538:	77 87       	std	Z+15, r23	; 0x0f
    153a:	08 95       	ret

0000153c <midi_register_chanpressure_callback>:
    153c:	fc 01       	movw	r30, r24
    153e:	60 8b       	std	Z+16, r22	; 0x10
    1540:	71 8b       	std	Z+17, r23	; 0x11
    1542:	08 95       	ret

00001544 <midi_register_songselect_callback>:
    1544:	fc 01       	movw	r30, r24
    1546:	62 8b       	std	Z+18, r22	; 0x12
    1548:	73 8b       	std	Z+19, r23	; 0x13
    154a:	08 95       	ret

0000154c <midi_register_tc_quarterframe_callback>:
    154c:	fc 01       	movw	r30, r24
    154e:	64 8b       	std	Z+20, r22	; 0x14
    1550:	75 8b       	std	Z+21, r23	; 0x15
    1552:	08 95       	ret

00001554 <midi_register_realtime_callback>:
    1554:	fc 01       	movw	r30, r24
    1556:	66 8b       	std	Z+22, r22	; 0x16
    1558:	77 8b       	std	Z+23, r23	; 0x17
    155a:	08 95       	ret

0000155c <midi_register_tunerequest_callback>:
    155c:	fc 01       	movw	r30, r24
    155e:	60 8f       	std	Z+24, r22	; 0x18
    1560:	71 8f       	std	Z+25, r23	; 0x19
    1562:	08 95       	ret

00001564 <midi_register_sysex_callback>:
    1564:	fc 01       	movw	r30, r24
    1566:	62 8f       	std	Z+26, r22	; 0x1a
    1568:	73 8f       	std	Z+27, r23	; 0x1b
    156a:	08 95       	ret

0000156c <midi_register_fallthrough_callback>:
    156c:	fc 01       	movw	r30, r24
    156e:	64 8f       	std	Z+28, r22	; 0x1c
    1570:	75 8f       	std	Z+29, r23	; 0x1d
    1572:	08 95       	ret

00001574 <midi_register_catchall_callback>:
    1574:	fc 01       	movw	r30, r24
    1576:	66 8f       	std	Z+30, r22	; 0x1e
    1578:	77 8f       	std	Z+31, r23	; 0x1f
    157a:	08 95       	ret

0000157c <midi_device_init>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    1582:	1d a2       	std	Y+37, r1	; 0x25
    1584:	1e a2       	std	Y+38, r1	; 0x26
    1586:	1f a2       	std	Y+39, r1	; 0x27
    1588:	bc 01       	movw	r22, r24
    158a:	68 5d       	subi	r22, 0xD8	; 216
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	88 51       	subi	r24, 0x18	; 24
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	40 ec       	ldi	r20, 0xC0	; 192
    1594:	0e 94 8b 08 	call	0x1116	; 0x1116 <bytequeue_init>
    1598:	1a 82       	std	Y+2, r1	; 0x02
    159a:	1b 82       	std	Y+3, r1	; 0x03
    159c:	1c 82       	std	Y+4, r1	; 0x04
    159e:	1d 82       	std	Y+5, r1	; 0x05
    15a0:	1e 82       	std	Y+6, r1	; 0x06
    15a2:	1f 82       	std	Y+7, r1	; 0x07
    15a4:	18 86       	std	Y+8, r1	; 0x08
    15a6:	19 86       	std	Y+9, r1	; 0x09
    15a8:	1a 86       	std	Y+10, r1	; 0x0a
    15aa:	1b 86       	std	Y+11, r1	; 0x0b
    15ac:	1c 86       	std	Y+12, r1	; 0x0c
    15ae:	1d 86       	std	Y+13, r1	; 0x0d
    15b0:	1e 86       	std	Y+14, r1	; 0x0e
    15b2:	1f 86       	std	Y+15, r1	; 0x0f
    15b4:	18 8a       	std	Y+16, r1	; 0x10
    15b6:	19 8a       	std	Y+17, r1	; 0x11
    15b8:	1a 8a       	std	Y+18, r1	; 0x12
    15ba:	1b 8a       	std	Y+19, r1	; 0x13
    15bc:	1c 8a       	std	Y+20, r1	; 0x14
    15be:	1d 8a       	std	Y+21, r1	; 0x15
    15c0:	1e 8a       	std	Y+22, r1	; 0x16
    15c2:	1f 8a       	std	Y+23, r1	; 0x17
    15c4:	18 8e       	std	Y+24, r1	; 0x18
    15c6:	19 8e       	std	Y+25, r1	; 0x19
    15c8:	1a 8e       	std	Y+26, r1	; 0x1a
    15ca:	1b 8e       	std	Y+27, r1	; 0x1b
    15cc:	1c 8e       	std	Y+28, r1	; 0x1c
    15ce:	1d 8e       	std	Y+29, r1	; 0x1d
    15d0:	1e 8e       	std	Y+30, r1	; 0x1e
    15d2:	1f 8e       	std	Y+31, r1	; 0x1f
    15d4:	18 a2       	std	Y+32, r1	; 0x20
    15d6:	19 a2       	std	Y+33, r1	; 0x21
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

000015de <midi_device_input>:
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	f6 2e       	mov	r15, r22
    15f4:	e4 2f       	mov	r30, r20
    15f6:	f5 2f       	mov	r31, r21
    15f8:	6f 01       	movw	r12, r30
    15fa:	8c 01       	movw	r16, r24
    15fc:	08 51       	subi	r16, 0x18	; 24
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <midi_device_input+0x34>
    1602:	f6 01       	movw	r30, r12
    1604:	61 91       	ld	r22, Z+
    1606:	6f 01       	movw	r12, r30
    1608:	c8 01       	movw	r24, r16
    160a:	49 83       	std	Y+1, r20	; 0x01
    160c:	0e 94 92 08 	call	0x1124	; 0x1124 <bytequeue_enqueue>
    1610:	49 81       	ldd	r20, Y+1	; 0x01
    1612:	8c 2d       	mov	r24, r12
    1614:	84 1b       	sub	r24, r20
    1616:	8f 15       	cp	r24, r15
    1618:	a0 f3       	brcs	.-24     	; 0x1602 <midi_device_input+0x24>
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <midi_device_set_send_func>:
    162c:	fc 01       	movw	r30, r24
    162e:	60 83       	st	Z, r22
    1630:	71 83       	std	Z+1, r23	; 0x01
    1632:	08 95       	ret

00001634 <midi_device_set_pre_input_process_func>:
    1634:	fc 01       	movw	r30, r24
    1636:	60 a3       	std	Z+32, r22	; 0x20
    1638:	71 a3       	std	Z+33, r23	; 0x21
    163a:	08 95       	ret

0000163c <midi_input_callbacks>:
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
    164e:	6b 01       	movw	r12, r22
    1650:	14 2f       	mov	r17, r20
    1652:	e2 2e       	mov	r14, r18
    1654:	f0 2e       	mov	r15, r16
    1656:	8d a1       	ldd	r24, Y+37	; 0x25
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	31 f4       	brne	.+12     	; 0x1668 <midi_input_callbacks+0x2c>
    165c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    165e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	09 f0       	breq	.+2      	; 0x1666 <midi_input_callbacks+0x2a>
    1664:	83 c0       	rjmp	.+262    	; 0x176c <midi_input_callbacks+0x130>
    1666:	95 c0       	rjmp	.+298    	; 0x1792 <midi_input_callbacks+0x156>
    1668:	62 30       	cpi	r22, 0x02	; 2
    166a:	71 05       	cpc	r23, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <midi_input_callbacks+0x34>
    166e:	42 c0       	rjmp	.+132    	; 0x16f4 <midi_input_callbacks+0xb8>
    1670:	63 30       	cpi	r22, 0x03	; 3
    1672:	71 05       	cpc	r23, r1
    1674:	29 f0       	breq	.+10     	; 0x1680 <midi_input_callbacks+0x44>
    1676:	61 30       	cpi	r22, 0x01	; 1
    1678:	71 05       	cpc	r23, r1
    167a:	09 f0       	breq	.+2      	; 0x167e <midi_input_callbacks+0x42>
    167c:	73 c0       	rjmp	.+230    	; 0x1764 <midi_input_callbacks+0x128>
    167e:	60 c0       	rjmp	.+192    	; 0x1740 <midi_input_callbacks+0x104>
    1680:	84 2f       	mov	r24, r20
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	80 7f       	andi	r24, 0xF0	; 240
    1686:	90 70       	andi	r25, 0x00	; 0
    1688:	80 3a       	cpi	r24, 0xA0	; 160
    168a:	91 05       	cpc	r25, r1
    168c:	e1 f0       	breq	.+56     	; 0x16c6 <midi_input_callbacks+0x8a>
    168e:	81 3a       	cpi	r24, 0xA1	; 161
    1690:	91 05       	cpc	r25, r1
    1692:	3c f4       	brge	.+14     	; 0x16a2 <midi_input_callbacks+0x66>
    1694:	80 38       	cpi	r24, 0x80	; 128
    1696:	91 05       	cpc	r25, r1
    1698:	99 f0       	breq	.+38     	; 0x16c0 <midi_input_callbacks+0x84>
    169a:	80 39       	cpi	r24, 0x90	; 144
    169c:	91 05       	cpc	r25, r1
    169e:	f9 f4       	brne	.+62     	; 0x16de <midi_input_callbacks+0xa2>
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <midi_input_callbacks+0x7e>
    16a2:	80 3e       	cpi	r24, 0xE0	; 224
    16a4:	91 05       	cpc	r25, r1
    16a6:	91 f0       	breq	.+36     	; 0x16cc <midi_input_callbacks+0x90>
    16a8:	80 3f       	cpi	r24, 0xF0	; 240
    16aa:	91 05       	cpc	r25, r1
    16ac:	91 f0       	breq	.+36     	; 0x16d2 <midi_input_callbacks+0x96>
    16ae:	80 3b       	cpi	r24, 0xB0	; 176
    16b0:	91 05       	cpc	r25, r1
    16b2:	a9 f4       	brne	.+42     	; 0x16de <midi_input_callbacks+0xa2>
    16b4:	ea 81       	ldd	r30, Y+2	; 0x02
    16b6:	fb 81       	ldd	r31, Y+3	; 0x03
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <midi_input_callbacks+0xa6>
    16ba:	ec 81       	ldd	r30, Y+4	; 0x04
    16bc:	fd 81       	ldd	r31, Y+5	; 0x05
    16be:	11 c0       	rjmp	.+34     	; 0x16e2 <midi_input_callbacks+0xa6>
    16c0:	ee 81       	ldd	r30, Y+6	; 0x06
    16c2:	ff 81       	ldd	r31, Y+7	; 0x07
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <midi_input_callbacks+0xa6>
    16c6:	e8 85       	ldd	r30, Y+8	; 0x08
    16c8:	f9 85       	ldd	r31, Y+9	; 0x09
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <midi_input_callbacks+0xa6>
    16cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    16ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <midi_input_callbacks+0xa6>
    16d2:	42 3f       	cpi	r20, 0xF2	; 242
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <midi_input_callbacks+0x9c>
    16d6:	5d c0       	rjmp	.+186    	; 0x1792 <midi_input_callbacks+0x156>
    16d8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16da:	fd 85       	ldd	r31, Y+13	; 0x0d
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <midi_input_callbacks+0xa6>
    16de:	e0 e0       	ldi	r30, 0x00	; 0
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	30 97       	sbiw	r30, 0x00	; 0
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <midi_input_callbacks+0xac>
    16e6:	55 c0       	rjmp	.+170    	; 0x1792 <midi_input_callbacks+0x156>
    16e8:	ce 01       	movw	r24, r28
    16ea:	61 2f       	mov	r22, r17
    16ec:	4e 2d       	mov	r20, r14
    16ee:	2f 2d       	mov	r18, r15
    16f0:	09 95       	icall
    16f2:	42 c0       	rjmp	.+132    	; 0x1778 <midi_input_callbacks+0x13c>
    16f4:	84 2f       	mov	r24, r20
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	80 7f       	andi	r24, 0xF0	; 240
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	80 3d       	cpi	r24, 0xD0	; 208
    16fe:	91 05       	cpc	r25, r1
    1700:	49 f0       	breq	.+18     	; 0x1714 <midi_input_callbacks+0xd8>
    1702:	80 3f       	cpi	r24, 0xF0	; 240
    1704:	91 05       	cpc	r25, r1
    1706:	49 f0       	breq	.+18     	; 0x171a <midi_input_callbacks+0xde>
    1708:	80 3c       	cpi	r24, 0xC0	; 192
    170a:	91 05       	cpc	r25, r1
    170c:	81 f4       	brne	.+32     	; 0x172e <midi_input_callbacks+0xf2>
    170e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1710:	ff 85       	ldd	r31, Y+15	; 0x0f
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <midi_input_callbacks+0xf6>
    1714:	e8 89       	ldd	r30, Y+16	; 0x10
    1716:	f9 89       	ldd	r31, Y+17	; 0x11
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <midi_input_callbacks+0xf6>
    171a:	43 3f       	cpi	r20, 0xF3	; 243
    171c:	19 f4       	brne	.+6      	; 0x1724 <midi_input_callbacks+0xe8>
    171e:	ea 89       	ldd	r30, Y+18	; 0x12
    1720:	fb 89       	ldd	r31, Y+19	; 0x13
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <midi_input_callbacks+0xf6>
    1724:	41 3f       	cpi	r20, 0xF1	; 241
    1726:	a9 f5       	brne	.+106    	; 0x1792 <midi_input_callbacks+0x156>
    1728:	ec 89       	ldd	r30, Y+20	; 0x14
    172a:	fd 89       	ldd	r31, Y+21	; 0x15
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <midi_input_callbacks+0xf6>
    172e:	e0 e0       	ldi	r30, 0x00	; 0
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	71 f1       	breq	.+92     	; 0x1792 <midi_input_callbacks+0x156>
    1736:	ce 01       	movw	r24, r28
    1738:	61 2f       	mov	r22, r17
    173a:	4e 2d       	mov	r20, r14
    173c:	09 95       	icall
    173e:	1c c0       	rjmp	.+56     	; 0x1778 <midi_input_callbacks+0x13c>
    1740:	84 2f       	mov	r24, r20
    1742:	0e 94 15 09 	call	0x122a	; 0x122a <midi_is_realtime>
    1746:	88 23       	and	r24, r24
    1748:	19 f0       	breq	.+6      	; 0x1750 <midi_input_callbacks+0x114>
    174a:	ee 89       	ldd	r30, Y+22	; 0x16
    174c:	ff 89       	ldd	r31, Y+23	; 0x17
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <midi_input_callbacks+0x11c>
    1750:	16 3f       	cpi	r17, 0xF6	; 246
    1752:	f9 f4       	brne	.+62     	; 0x1792 <midi_input_callbacks+0x156>
    1754:	e8 8d       	ldd	r30, Y+24	; 0x18
    1756:	f9 8d       	ldd	r31, Y+25	; 0x19
    1758:	30 97       	sbiw	r30, 0x00	; 0
    175a:	d9 f0       	breq	.+54     	; 0x1792 <midi_input_callbacks+0x156>
    175c:	ce 01       	movw	r24, r28
    175e:	61 2f       	mov	r22, r17
    1760:	09 95       	icall
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <midi_input_callbacks+0x13c>
    1764:	64 30       	cpi	r22, 0x04	; 4
    1766:	71 05       	cpc	r23, r1
    1768:	90 f4       	brcc	.+36     	; 0x178e <midi_input_callbacks+0x152>
    176a:	13 c0       	rjmp	.+38     	; 0x1792 <midi_input_callbacks+0x156>
    176c:	ce 01       	movw	r24, r28
    176e:	b6 01       	movw	r22, r12
    1770:	41 2f       	mov	r20, r17
    1772:	2e 2d       	mov	r18, r14
    1774:	0f 2d       	mov	r16, r15
    1776:	09 95       	icall
    1778:	ee 8d       	ldd	r30, Y+30	; 0x1e
    177a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	71 f0       	breq	.+28     	; 0x179c <midi_input_callbacks+0x160>
    1780:	ce 01       	movw	r24, r28
    1782:	b6 01       	movw	r22, r12
    1784:	41 2f       	mov	r20, r17
    1786:	2e 2d       	mov	r18, r14
    1788:	0f 2d       	mov	r16, r15
    178a:	09 95       	icall
    178c:	07 c0       	rjmp	.+14     	; 0x179c <midi_input_callbacks+0x160>
    178e:	cc 24       	eor	r12, r12
    1790:	dd 24       	eor	r13, r13
    1792:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1794:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	49 f7       	brne	.-46     	; 0x176c <midi_input_callbacks+0x130>
    179a:	ee cf       	rjmp	.-36     	; 0x1778 <midi_input_callbacks+0x13c>
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	08 95       	ret

000017ae <midi_process_byte>:
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	16 2f       	mov	r17, r22
    17be:	86 2f       	mov	r24, r22
    17c0:	0e 94 15 09 	call	0x122a	; 0x122a <midi_is_realtime>
    17c4:	88 23       	and	r24, r24
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <midi_process_byte+0x34>
    17c8:	ed a0       	ldd	r14, Y+37	; 0x25
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	8d a3       	std	Y+37, r24	; 0x25
    17ce:	ce 01       	movw	r24, r28
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	41 2f       	mov	r20, r17
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	0e 94 1e 0b 	call	0x163c	; 0x163c <midi_input_callbacks>
    17de:	ed a2       	std	Y+37, r14	; 0x25
    17e0:	7e c0       	rjmp	.+252    	; 0x18de <midi_process_byte+0x130>
    17e2:	81 2f       	mov	r24, r17
    17e4:	0e 94 11 09 	call	0x1222	; 0x1222 <midi_is_statusbyte>
    17e8:	4d a1       	ldd	r20, Y+37	; 0x25
    17ea:	88 23       	and	r24, r24
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <midi_process_byte+0x42>
    17ee:	42 c0       	rjmp	.+132    	; 0x1874 <midi_process_byte+0xc6>
    17f0:	44 30       	cpi	r20, 0x04	; 4
    17f2:	29 f0       	breq	.+10     	; 0x17fe <midi_process_byte+0x50>
    17f4:	1a a3       	std	Y+34, r17	; 0x22
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	8e a3       	std	Y+38, r24	; 0x26
    17fc:	9f a3       	std	Y+39, r25	; 0x27
    17fe:	81 2f       	mov	r24, r17
    1800:	0e 94 1b 09 	call	0x1236	; 0x1236 <midi_packet_length>
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	39 f0       	breq	.+14     	; 0x1816 <midi_process_byte+0x68>
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	78 f0       	brcs	.+30     	; 0x182a <midi_process_byte+0x7c>
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	59 f0       	breq	.+22     	; 0x1826 <midi_process_byte+0x78>
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	61 f5       	brne	.+88     	; 0x186c <midi_process_byte+0xbe>
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <midi_process_byte+0x78>
    1816:	8d a3       	std	Y+37, r24	; 0x25
    1818:	ce 01       	movw	r24, r28
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	41 2f       	mov	r20, r17
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	00 e0       	ldi	r16, 0x00	; 0
    1824:	1f c0       	rjmp	.+62     	; 0x1864 <midi_process_byte+0xb6>
    1826:	8d a3       	std	Y+37, r24	; 0x25
    1828:	5a c0       	rjmp	.+180    	; 0x18de <midi_process_byte+0x130>
    182a:	10 3f       	cpi	r17, 0xF0	; 240
    182c:	19 f0       	breq	.+6      	; 0x1834 <midi_process_byte+0x86>
    182e:	17 3f       	cpi	r17, 0xF7	; 247
    1830:	e9 f4       	brne	.+58     	; 0x186c <midi_process_byte+0xbe>
    1832:	04 c0       	rjmp	.+8      	; 0x183c <midi_process_byte+0x8e>
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	8d a3       	std	Y+37, r24	; 0x25
    1838:	1a a3       	std	Y+34, r17	; 0x22
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <midi_process_byte+0x10c>
    183c:	2e a1       	ldd	r18, Y+38	; 0x26
    183e:	3f a1       	ldd	r19, Y+39	; 0x27
    1840:	c9 01       	movw	r24, r18
    1842:	63 e0       	ldi	r22, 0x03	; 3
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
    184a:	8c 0f       	add	r24, r28
    184c:	9d 1f       	adc	r25, r29
    184e:	fc 01       	movw	r30, r24
    1850:	12 a3       	std	Z+34, r17	; 0x22
    1852:	b9 01       	movw	r22, r18
    1854:	6f 5f       	subi	r22, 0xFF	; 255
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	6e a3       	std	Y+38, r22	; 0x26
    185a:	7f a3       	std	Y+39, r23	; 0x27
    185c:	ce 01       	movw	r24, r28
    185e:	4a a1       	ldd	r20, Y+34	; 0x22
    1860:	2b a1       	ldd	r18, Y+35	; 0x23
    1862:	0c a1       	ldd	r16, Y+36	; 0x24
    1864:	0e 94 1e 0b 	call	0x163c	; 0x163c <midi_input_callbacks>
    1868:	1d a2       	std	Y+37, r1	; 0x25
    186a:	39 c0       	rjmp	.+114    	; 0x18de <midi_process_byte+0x130>
    186c:	1d a2       	std	Y+37, r1	; 0x25
    186e:	1e a2       	std	Y+38, r1	; 0x26
    1870:	1f a2       	std	Y+39, r1	; 0x27
    1872:	35 c0       	rjmp	.+106    	; 0x18de <midi_process_byte+0x130>
    1874:	44 23       	and	r20, r20
    1876:	99 f1       	breq	.+102    	; 0x18de <midi_process_byte+0x130>
    1878:	2e a1       	ldd	r18, Y+38	; 0x26
    187a:	3f a1       	ldd	r19, Y+39	; 0x27
    187c:	c9 01       	movw	r24, r18
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodhi4>
    1886:	7c 01       	movw	r14, r24
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0f       	add	r30, r24
    188c:	f9 1f       	adc	r31, r25
    188e:	12 a3       	std	Z+34, r17	; 0x22
    1890:	b9 01       	movw	r22, r18
    1892:	6f 5f       	subi	r22, 0xFF	; 255
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	6e a3       	std	Y+38, r22	; 0x26
    1898:	7f a3       	std	Y+39, r23	; 0x27
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	91 f0       	breq	.+36     	; 0x18c4 <midi_process_byte+0x116>
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	e8 16       	cp	r14, r24
    18a4:	f1 04       	cpc	r15, r1
    18a6:	d9 f4       	brne	.+54     	; 0x18de <midi_process_byte+0x130>
    18a8:	ce 01       	movw	r24, r28
    18aa:	4a a1       	ldd	r20, Y+34	; 0x22
    18ac:	2b a1       	ldd	r18, Y+35	; 0x23
    18ae:	0c a1       	ldd	r16, Y+36	; 0x24
    18b0:	0e 94 1e 0b 	call	0x163c	; 0x163c <midi_input_callbacks>
    18b4:	8d a1       	ldd	r24, Y+37	; 0x25
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	91 f0       	breq	.+36     	; 0x18de <midi_process_byte+0x130>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	8e a3       	std	Y+38, r24	; 0x26
    18c0:	9f a3       	std	Y+39, r25	; 0x27
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <midi_process_byte+0x130>
    18c4:	42 30       	cpi	r20, 0x02	; 2
    18c6:	59 f4       	brne	.+22     	; 0x18de <midi_process_byte+0x130>
    18c8:	ce 01       	movw	r24, r28
    18ca:	4a a1       	ldd	r20, Y+34	; 0x22
    18cc:	2b a1       	ldd	r18, Y+35	; 0x23
    18ce:	00 e0       	ldi	r16, 0x00	; 0
    18d0:	0e 94 1e 0b 	call	0x163c	; 0x163c <midi_input_callbacks>
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	11 f0       	breq	.+4      	; 0x18de <midi_process_byte+0x130>
    18da:	ee a2       	std	Y+38, r14	; 0x26
    18dc:	ff a2       	std	Y+39, r15	; 0x27
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	08 95       	ret

000018ec <midi_device_process>:
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	e8 a1       	ldd	r30, Y+32	; 0x20
    1900:	f9 a1       	ldd	r31, Y+33	; 0x21
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	09 f0       	breq	.+2      	; 0x1908 <midi_device_process+0x1c>
    1906:	09 95       	icall
    1908:	8e 01       	movw	r16, r28
    190a:	08 51       	subi	r16, 0x18	; 24
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	c8 01       	movw	r24, r16
    1910:	0e 94 c5 08 	call	0x118a	; 0x118a <bytequeue_length>
    1914:	ee 24       	eor	r14, r14
    1916:	ff 24       	eor	r15, r15
    1918:	c8 2e       	mov	r12, r24
    191a:	dd 24       	eor	r13, r13
    191c:	0f c0       	rjmp	.+30     	; 0x193c <midi_device_process+0x50>
    191e:	c8 01       	movw	r24, r16
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	0e 94 db 08 	call	0x11b6	; 0x11b6 <bytequeue_get>
    1926:	68 2f       	mov	r22, r24
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <midi_process_byte>
    192e:	c8 01       	movw	r24, r16
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <bytequeue_remove>
    1936:	08 94       	sec
    1938:	e1 1c       	adc	r14, r1
    193a:	f1 1c       	adc	r15, r1
    193c:	ec 14       	cp	r14, r12
    193e:	fd 04       	cpc	r15, r13
    1940:	70 f3       	brcs	.-36     	; 0x191e <midi_device_process+0x32>
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	08 95       	ret

00001954 <__fixunssfsi>:
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	7b 01       	movw	r14, r22
    195e:	8c 01       	movw	r16, r24
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	5f e4       	ldi	r21, 0x4F	; 79
    1968:	0e 94 26 10 	call	0x204c	; 0x204c <__gesf2>
    196c:	87 fd       	sbrc	r24, 7
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <__fixunssfsi+0x3e>
    1970:	c8 01       	movw	r24, r16
    1972:	b7 01       	movw	r22, r14
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	5f e4       	ldi	r21, 0x4F	; 79
    197c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__subsf3>
    1980:	0e 94 56 10 	call	0x20ac	; 0x20ac <__fixsfsi>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	20 50       	subi	r18, 0x00	; 0
    198a:	30 40       	sbci	r19, 0x00	; 0
    198c:	40 40       	sbci	r20, 0x00	; 0
    198e:	50 48       	sbci	r21, 0x80	; 128
    1990:	06 c0       	rjmp	.+12     	; 0x199e <__fixunssfsi+0x4a>
    1992:	c8 01       	movw	r24, r16
    1994:	b7 01       	movw	r22, r14
    1996:	0e 94 56 10 	call	0x20ac	; 0x20ac <__fixsfsi>
    199a:	9b 01       	movw	r18, r22
    199c:	ac 01       	movw	r20, r24
    199e:	b9 01       	movw	r22, r18
    19a0:	ca 01       	movw	r24, r20
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	08 95       	ret

000019ac <_fpadd_parts>:
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ec ed       	ldi	r30, 0xDC	; 220
    19b2:	fc e0       	ldi	r31, 0x0C	; 12
    19b4:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__prologue_saves__+0x8>
    19b8:	fc 01       	movw	r30, r24
    19ba:	ea 01       	movw	r28, r20
    19bc:	80 81       	ld	r24, Z
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	08 f4       	brcc	.+2      	; 0x19c4 <_fpadd_parts+0x18>
    19c2:	38 c1       	rjmp	.+624    	; 0x1c34 <_fpadd_parts+0x288>
    19c4:	db 01       	movw	r26, r22
    19c6:	9c 91       	ld	r25, X
    19c8:	92 30       	cpi	r25, 0x02	; 2
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <_fpadd_parts+0x22>
    19cc:	30 c1       	rjmp	.+608    	; 0x1c2e <_fpadd_parts+0x282>
    19ce:	84 30       	cpi	r24, 0x04	; 4
    19d0:	59 f4       	brne	.+22     	; 0x19e8 <_fpadd_parts+0x3c>
    19d2:	94 30       	cpi	r25, 0x04	; 4
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <_fpadd_parts+0x2c>
    19d6:	2e c1       	rjmp	.+604    	; 0x1c34 <_fpadd_parts+0x288>
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	8c 91       	ld	r24, X
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	98 17       	cp	r25, r24
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <_fpadd_parts+0x3a>
    19e4:	21 c1       	rjmp	.+578    	; 0x1c28 <_fpadd_parts+0x27c>
    19e6:	26 c1       	rjmp	.+588    	; 0x1c34 <_fpadd_parts+0x288>
    19e8:	94 30       	cpi	r25, 0x04	; 4
    19ea:	09 f4       	brne	.+2      	; 0x19ee <_fpadd_parts+0x42>
    19ec:	20 c1       	rjmp	.+576    	; 0x1c2e <_fpadd_parts+0x282>
    19ee:	92 30       	cpi	r25, 0x02	; 2
    19f0:	b1 f4       	brne	.+44     	; 0x1a1e <_fpadd_parts+0x72>
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <_fpadd_parts+0x4c>
    19f6:	1e c1       	rjmp	.+572    	; 0x1c34 <_fpadd_parts+0x288>
    19f8:	ca 01       	movw	r24, r20
    19fa:	af 01       	movw	r20, r30
    19fc:	28 e0       	ldi	r18, 0x08	; 8
    19fe:	da 01       	movw	r26, r20
    1a00:	0d 90       	ld	r0, X+
    1a02:	ad 01       	movw	r20, r26
    1a04:	dc 01       	movw	r26, r24
    1a06:	0d 92       	st	X+, r0
    1a08:	cd 01       	movw	r24, r26
    1a0a:	21 50       	subi	r18, 0x01	; 1
    1a0c:	c1 f7       	brne	.-16     	; 0x19fe <_fpadd_parts+0x52>
    1a0e:	db 01       	movw	r26, r22
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	8c 91       	ld	r24, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	89 23       	and	r24, r25
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	0a c1       	rjmp	.+532    	; 0x1c32 <_fpadd_parts+0x286>
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <_fpadd_parts+0x78>
    1a22:	05 c1       	rjmp	.+522    	; 0x1c2e <_fpadd_parts+0x282>
    1a24:	c2 80       	ldd	r12, Z+2	; 0x02
    1a26:	d3 80       	ldd	r13, Z+3	; 0x03
    1a28:	db 01       	movw	r26, r22
    1a2a:	12 96       	adiw	r26, 0x02	; 2
    1a2c:	6d 90       	ld	r6, X+
    1a2e:	7c 90       	ld	r7, X
    1a30:	13 97       	sbiw	r26, 0x03	; 3
    1a32:	24 81       	ldd	r18, Z+4	; 0x04
    1a34:	35 81       	ldd	r19, Z+5	; 0x05
    1a36:	46 81       	ldd	r20, Z+6	; 0x06
    1a38:	57 81       	ldd	r21, Z+7	; 0x07
    1a3a:	14 96       	adiw	r26, 0x04	; 4
    1a3c:	ed 90       	ld	r14, X+
    1a3e:	fd 90       	ld	r15, X+
    1a40:	0d 91       	ld	r16, X+
    1a42:	1c 91       	ld	r17, X
    1a44:	17 97       	sbiw	r26, 0x07	; 7
    1a46:	c6 01       	movw	r24, r12
    1a48:	86 19       	sub	r24, r6
    1a4a:	97 09       	sbc	r25, r7
    1a4c:	5c 01       	movw	r10, r24
    1a4e:	97 ff       	sbrs	r25, 7
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <_fpadd_parts+0xae>
    1a52:	aa 24       	eor	r10, r10
    1a54:	bb 24       	eor	r11, r11
    1a56:	a8 1a       	sub	r10, r24
    1a58:	b9 0a       	sbc	r11, r25
    1a5a:	b0 e2       	ldi	r27, 0x20	; 32
    1a5c:	ab 16       	cp	r10, r27
    1a5e:	b1 04       	cpc	r11, r1
    1a60:	0c f0       	brlt	.+2      	; 0x1a64 <_fpadd_parts+0xb8>
    1a62:	61 c0       	rjmp	.+194    	; 0x1b26 <_fpadd_parts+0x17a>
    1a64:	18 16       	cp	r1, r24
    1a66:	19 06       	cpc	r1, r25
    1a68:	6c f5       	brge	.+90     	; 0x1ac4 <_fpadd_parts+0x118>
    1a6a:	37 01       	movw	r6, r14
    1a6c:	48 01       	movw	r8, r16
    1a6e:	0a 2c       	mov	r0, r10
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <_fpadd_parts+0xce>
    1a72:	96 94       	lsr	r9
    1a74:	87 94       	ror	r8
    1a76:	77 94       	ror	r7
    1a78:	67 94       	ror	r6
    1a7a:	0a 94       	dec	r0
    1a7c:	d2 f7       	brpl	.-12     	; 0x1a72 <_fpadd_parts+0xc6>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	0a 2c       	mov	r0, r10
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <_fpadd_parts+0xe6>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	0a 94       	dec	r0
    1a94:	d2 f7       	brpl	.-12     	; 0x1a8a <_fpadd_parts+0xde>
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	a1 09       	sbc	r26, r1
    1a9a:	b1 09       	sbc	r27, r1
    1a9c:	8e 21       	and	r24, r14
    1a9e:	9f 21       	and	r25, r15
    1aa0:	a0 23       	and	r26, r16
    1aa2:	b1 23       	and	r27, r17
    1aa4:	ee 24       	eor	r14, r14
    1aa6:	ff 24       	eor	r15, r15
    1aa8:	87 01       	movw	r16, r14
    1aaa:	e3 94       	inc	r14
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	a1 05       	cpc	r26, r1
    1ab0:	b1 05       	cpc	r27, r1
    1ab2:	19 f4       	brne	.+6      	; 0x1aba <_fpadd_parts+0x10e>
    1ab4:	ee 24       	eor	r14, r14
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	87 01       	movw	r16, r14
    1aba:	e6 28       	or	r14, r6
    1abc:	f7 28       	or	r15, r7
    1abe:	08 29       	or	r16, r8
    1ac0:	19 29       	or	r17, r9
    1ac2:	3c c0       	rjmp	.+120    	; 0x1b3c <_fpadd_parts+0x190>
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	d1 f1       	breq	.+116    	; 0x1b3c <_fpadd_parts+0x190>
    1ac8:	ca 0c       	add	r12, r10
    1aca:	db 1c       	adc	r13, r11
    1acc:	39 01       	movw	r6, r18
    1ace:	4a 01       	movw	r8, r20
    1ad0:	0a 2c       	mov	r0, r10
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <_fpadd_parts+0x130>
    1ad4:	96 94       	lsr	r9
    1ad6:	87 94       	ror	r8
    1ad8:	77 94       	ror	r7
    1ada:	67 94       	ror	r6
    1adc:	0a 94       	dec	r0
    1ade:	d2 f7       	brpl	.-12     	; 0x1ad4 <_fpadd_parts+0x128>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	0a 2c       	mov	r0, r10
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <_fpadd_parts+0x148>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	aa 1f       	adc	r26, r26
    1af2:	bb 1f       	adc	r27, r27
    1af4:	0a 94       	dec	r0
    1af6:	d2 f7       	brpl	.-12     	; 0x1aec <_fpadd_parts+0x140>
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	a1 09       	sbc	r26, r1
    1afc:	b1 09       	sbc	r27, r1
    1afe:	82 23       	and	r24, r18
    1b00:	93 23       	and	r25, r19
    1b02:	a4 23       	and	r26, r20
    1b04:	b5 23       	and	r27, r21
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	a1 05       	cpc	r26, r1
    1b12:	b1 05       	cpc	r27, r1
    1b14:	19 f4       	brne	.+6      	; 0x1b1c <_fpadd_parts+0x170>
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	26 29       	or	r18, r6
    1b1e:	37 29       	or	r19, r7
    1b20:	48 29       	or	r20, r8
    1b22:	59 29       	or	r21, r9
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <_fpadd_parts+0x190>
    1b26:	6c 14       	cp	r6, r12
    1b28:	7d 04       	cpc	r7, r13
    1b2a:	24 f4       	brge	.+8      	; 0x1b34 <_fpadd_parts+0x188>
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	ff 24       	eor	r15, r15
    1b30:	87 01       	movw	r16, r14
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <_fpadd_parts+0x190>
    1b34:	63 01       	movw	r12, r6
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	a9 01       	movw	r20, r18
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	fb 01       	movw	r30, r22
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	89 17       	cp	r24, r25
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <_fpadd_parts+0x19c>
    1b46:	45 c0       	rjmp	.+138    	; 0x1bd2 <_fpadd_parts+0x226>
    1b48:	88 23       	and	r24, r24
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <_fpadd_parts+0x1b2>
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	c7 01       	movw	r24, r14
    1b50:	82 1b       	sub	r24, r18
    1b52:	93 0b       	sbc	r25, r19
    1b54:	a4 0b       	sbc	r26, r20
    1b56:	b5 0b       	sbc	r27, r21
    1b58:	9c 01       	movw	r18, r24
    1b5a:	ad 01       	movw	r20, r26
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0x1ba>
    1b5e:	2e 19       	sub	r18, r14
    1b60:	3f 09       	sbc	r19, r15
    1b62:	40 0b       	sbc	r20, r16
    1b64:	51 0b       	sbc	r21, r17
    1b66:	57 fd       	sbrc	r21, 7
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <_fpadd_parts+0x1c6>
    1b6a:	19 82       	std	Y+1, r1	; 0x01
    1b6c:	ca 82       	std	Y+2, r12	; 0x02
    1b6e:	db 82       	std	Y+3, r13	; 0x03
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <_fpadd_parts+0x1dc>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	ca 82       	std	Y+2, r12	; 0x02
    1b78:	db 82       	std	Y+3, r13	; 0x03
    1b7a:	50 95       	com	r21
    1b7c:	40 95       	com	r20
    1b7e:	30 95       	com	r19
    1b80:	21 95       	neg	r18
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	4f 4f       	sbci	r20, 0xFF	; 255
    1b86:	5f 4f       	sbci	r21, 0xFF	; 255
    1b88:	2c 83       	std	Y+4, r18	; 0x04
    1b8a:	3d 83       	std	Y+5, r19	; 0x05
    1b8c:	4e 83       	std	Y+6, r20	; 0x06
    1b8e:	5f 83       	std	Y+7, r21	; 0x07
    1b90:	0d c0       	rjmp	.+26     	; 0x1bac <_fpadd_parts+0x200>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	aa 1f       	adc	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	8c 83       	std	Y+4, r24	; 0x04
    1b9c:	9d 83       	std	Y+5, r25	; 0x05
    1b9e:	ae 83       	std	Y+6, r26	; 0x06
    1ba0:	bf 83       	std	Y+7, r27	; 0x07
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	ae 81       	ldd	r26, Y+6	; 0x06
    1bb2:	bf 81       	ldd	r27, Y+7	; 0x07
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	ad 01       	movw	r20, r26
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	30 40       	sbci	r19, 0x00	; 0
    1bbc:	40 40       	sbci	r20, 0x00	; 0
    1bbe:	50 40       	sbci	r21, 0x00	; 0
    1bc0:	2f 3f       	cpi	r18, 0xFF	; 255
    1bc2:	ef ef       	ldi	r30, 0xFF	; 255
    1bc4:	3e 07       	cpc	r19, r30
    1bc6:	ef ef       	ldi	r30, 0xFF	; 255
    1bc8:	4e 07       	cpc	r20, r30
    1bca:	ef e3       	ldi	r30, 0x3F	; 63
    1bcc:	5e 07       	cpc	r21, r30
    1bce:	08 f3       	brcs	.-62     	; 0x1b92 <_fpadd_parts+0x1e6>
    1bd0:	0b c0       	rjmp	.+22     	; 0x1be8 <_fpadd_parts+0x23c>
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	ca 82       	std	Y+2, r12	; 0x02
    1bd6:	db 82       	std	Y+3, r13	; 0x03
    1bd8:	2e 0d       	add	r18, r14
    1bda:	3f 1d       	adc	r19, r15
    1bdc:	40 1f       	adc	r20, r16
    1bde:	51 1f       	adc	r21, r17
    1be0:	2c 83       	std	Y+4, r18	; 0x04
    1be2:	3d 83       	std	Y+5, r19	; 0x05
    1be4:	4e 83       	std	Y+6, r20	; 0x06
    1be6:	5f 83       	std	Y+7, r21	; 0x07
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	88 83       	st	Y, r24
    1bec:	2c 81       	ldd	r18, Y+4	; 0x04
    1bee:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf0:	4e 81       	ldd	r20, Y+6	; 0x06
    1bf2:	5f 81       	ldd	r21, Y+7	; 0x07
    1bf4:	57 ff       	sbrs	r21, 7
    1bf6:	1d c0       	rjmp	.+58     	; 0x1c32 <_fpadd_parts+0x286>
    1bf8:	da 01       	movw	r26, r20
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	a0 70       	andi	r26, 0x00	; 0
    1c02:	b0 70       	andi	r27, 0x00	; 0
    1c04:	56 95       	lsr	r21
    1c06:	47 95       	ror	r20
    1c08:	37 95       	ror	r19
    1c0a:	27 95       	ror	r18
    1c0c:	82 2b       	or	r24, r18
    1c0e:	93 2b       	or	r25, r19
    1c10:	a4 2b       	or	r26, r20
    1c12:	b5 2b       	or	r27, r21
    1c14:	8c 83       	std	Y+4, r24	; 0x04
    1c16:	9d 83       	std	Y+5, r25	; 0x05
    1c18:	ae 83       	std	Y+6, r26	; 0x06
    1c1a:	bf 83       	std	Y+7, r27	; 0x07
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	8a 83       	std	Y+2, r24	; 0x02
    1c24:	9b 83       	std	Y+3, r25	; 0x03
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <_fpadd_parts+0x286>
    1c28:	ef e2       	ldi	r30, 0x2F	; 47
    1c2a:	f0 e2       	ldi	r31, 0x20	; 32
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <_fpadd_parts+0x288>
    1c2e:	fb 01       	movw	r30, r22
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <_fpadd_parts+0x288>
    1c32:	fe 01       	movw	r30, r28
    1c34:	cf 01       	movw	r24, r30
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	ee e0       	ldi	r30, 0x0E	; 14
    1c3c:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__epilogue_restores__+0x8>

00001c40 <__addsf3>:
    1c40:	a0 e2       	ldi	r26, 0x20	; 32
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e6 e2       	ldi	r30, 0x26	; 38
    1c46:	fe e0       	ldi	r31, 0x0E	; 14
    1c48:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__+0x18>
    1c4c:	69 83       	std	Y+1, r22	; 0x01
    1c4e:	7a 83       	std	Y+2, r23	; 0x02
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	2d 83       	std	Y+5, r18	; 0x05
    1c56:	3e 83       	std	Y+6, r19	; 0x06
    1c58:	4f 83       	std	Y+7, r20	; 0x07
    1c5a:	58 87       	std	Y+8, r21	; 0x08
    1c5c:	89 e0       	ldi	r24, 0x09	; 9
    1c5e:	e8 2e       	mov	r14, r24
    1c60:	f1 2c       	mov	r15, r1
    1c62:	ec 0e       	add	r14, r28
    1c64:	fd 1e       	adc	r15, r29
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1c70:	8e 01       	movw	r16, r28
    1c72:	0f 5e       	subi	r16, 0xEF	; 239
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	ce 01       	movw	r24, r28
    1c78:	05 96       	adiw	r24, 0x05	; 5
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1c80:	c7 01       	movw	r24, r14
    1c82:	b8 01       	movw	r22, r16
    1c84:	ae 01       	movw	r20, r28
    1c86:	47 5e       	subi	r20, 0xE7	; 231
    1c88:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_fpadd_parts>
    1c8e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__pack_f>
    1c92:	a0 96       	adiw	r28, 0x20	; 32
    1c94:	e6 e0       	ldi	r30, 0x06	; 6
    1c96:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

00001c9a <__subsf3>:
    1c9a:	a0 e2       	ldi	r26, 0x20	; 32
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	fe e0       	ldi	r31, 0x0E	; 14
    1ca2:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__+0x18>
    1ca6:	69 83       	std	Y+1, r22	; 0x01
    1ca8:	7a 83       	std	Y+2, r23	; 0x02
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	2d 83       	std	Y+5, r18	; 0x05
    1cb0:	3e 83       	std	Y+6, r19	; 0x06
    1cb2:	4f 83       	std	Y+7, r20	; 0x07
    1cb4:	58 87       	std	Y+8, r21	; 0x08
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	07 5f       	subi	r16, 0xF7	; 247
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	b8 01       	movw	r22, r16
    1cc2:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1cc6:	91 e1       	ldi	r25, 0x11	; 17
    1cc8:	e9 2e       	mov	r14, r25
    1cca:	f1 2c       	mov	r15, r1
    1ccc:	ec 0e       	add	r14, r28
    1cce:	fd 1e       	adc	r15, r29
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	05 96       	adiw	r24, 0x05	; 5
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1cda:	8a 89       	ldd	r24, Y+18	; 0x12
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	89 27       	eor	r24, r25
    1ce0:	8a 8b       	std	Y+18, r24	; 0x12
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	ae 01       	movw	r20, r28
    1ce8:	47 5e       	subi	r20, 0xE7	; 231
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_fpadd_parts>
    1cf0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__pack_f>
    1cf4:	a0 96       	adiw	r28, 0x20	; 32
    1cf6:	e6 e0       	ldi	r30, 0x06	; 6
    1cf8:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

00001cfc <__mulsf3>:
    1cfc:	a0 e2       	ldi	r26, 0x20	; 32
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e8       	ldi	r30, 0x84	; 132
    1d02:	fe e0       	ldi	r31, 0x0E	; 14
    1d04:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__>
    1d08:	69 83       	std	Y+1, r22	; 0x01
    1d0a:	7a 83       	std	Y+2, r23	; 0x02
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	2d 83       	std	Y+5, r18	; 0x05
    1d12:	3e 83       	std	Y+6, r19	; 0x06
    1d14:	4f 83       	std	Y+7, r20	; 0x07
    1d16:	58 87       	std	Y+8, r21	; 0x08
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	be 01       	movw	r22, r28
    1d1e:	67 5f       	subi	r22, 0xF7	; 247
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1d26:	ce 01       	movw	r24, r28
    1d28:	05 96       	adiw	r24, 0x05	; 5
    1d2a:	be 01       	movw	r22, r28
    1d2c:	6f 5e       	subi	r22, 0xEF	; 239
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1d34:	99 85       	ldd	r25, Y+9	; 0x09
    1d36:	92 30       	cpi	r25, 0x02	; 2
    1d38:	78 f0       	brcs	.+30     	; 0x1d58 <__mulsf3+0x5c>
    1d3a:	89 89       	ldd	r24, Y+17	; 0x11
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	c0 f0       	brcs	.+48     	; 0x1d70 <__mulsf3+0x74>
    1d40:	94 30       	cpi	r25, 0x04	; 4
    1d42:	19 f4       	brne	.+6      	; 0x1d4a <__mulsf3+0x4e>
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	41 f4       	brne	.+16     	; 0x1d58 <__mulsf3+0x5c>
    1d48:	cb c0       	rjmp	.+406    	; 0x1ee0 <__mulsf3+0x1e4>
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <__mulsf3+0x58>
    1d4e:	92 30       	cpi	r25, 0x02	; 2
    1d50:	79 f4       	brne	.+30     	; 0x1d70 <__mulsf3+0x74>
    1d52:	c6 c0       	rjmp	.+396    	; 0x1ee0 <__mulsf3+0x1e4>
    1d54:	92 30       	cpi	r25, 0x02	; 2
    1d56:	51 f4       	brne	.+20     	; 0x1d6c <__mulsf3+0x70>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5e:	29 17       	cp	r18, r25
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <__mulsf3+0x68>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	8a 87       	std	Y+10, r24	; 0x0a
    1d66:	ce 01       	movw	r24, r28
    1d68:	09 96       	adiw	r24, 0x09	; 9
    1d6a:	bc c0       	rjmp	.+376    	; 0x1ee4 <__mulsf3+0x1e8>
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	51 f4       	brne	.+20     	; 0x1d84 <__mulsf3+0x88>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	29 17       	cp	r18, r25
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <__mulsf3+0x80>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	8a 8b       	std	Y+18, r24	; 0x12
    1d7e:	ce 01       	movw	r24, r28
    1d80:	41 96       	adiw	r24, 0x11	; 17
    1d82:	b0 c0       	rjmp	.+352    	; 0x1ee4 <__mulsf3+0x1e8>
    1d84:	6d 84       	ldd	r6, Y+13	; 0x0d
    1d86:	7e 84       	ldd	r7, Y+14	; 0x0e
    1d88:	8f 84       	ldd	r8, Y+15	; 0x0f
    1d8a:	98 88       	ldd	r9, Y+16	; 0x10
    1d8c:	ed 88       	ldd	r14, Y+21	; 0x15
    1d8e:	fe 88       	ldd	r15, Y+22	; 0x16
    1d90:	0f 89       	ldd	r16, Y+23	; 0x17
    1d92:	18 8d       	ldd	r17, Y+24	; 0x18
    1d94:	e0 e2       	ldi	r30, 0x20	; 32
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	aa 24       	eor	r10, r10
    1da0:	bb 24       	eor	r11, r11
    1da2:	65 01       	movw	r12, r10
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	a9 01       	movw	r20, r18
    1daa:	b3 01       	movw	r22, r6
    1dac:	61 70       	andi	r22, 0x01	; 1
    1dae:	70 70       	andi	r23, 0x00	; 0
    1db0:	61 15       	cp	r22, r1
    1db2:	71 05       	cpc	r23, r1
    1db4:	d1 f0       	breq	.+52     	; 0x1dea <__mulsf3+0xee>
    1db6:	2e 0d       	add	r18, r14
    1db8:	3f 1d       	adc	r19, r15
    1dba:	40 1f       	adc	r20, r16
    1dbc:	51 1f       	adc	r21, r17
    1dbe:	15 01       	movw	r2, r10
    1dc0:	26 01       	movw	r4, r12
    1dc2:	28 0e       	add	r2, r24
    1dc4:	39 1e       	adc	r3, r25
    1dc6:	4a 1e       	adc	r4, r26
    1dc8:	5b 1e       	adc	r5, r27
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	2e 15       	cp	r18, r14
    1dd4:	3f 05       	cpc	r19, r15
    1dd6:	40 07       	cpc	r20, r16
    1dd8:	51 07       	cpc	r21, r17
    1dda:	18 f0       	brcs	.+6      	; 0x1de2 <__mulsf3+0xe6>
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	dc 01       	movw	r26, r24
    1de2:	82 0d       	add	r24, r2
    1de4:	93 1d       	adc	r25, r3
    1de6:	a4 1d       	adc	r26, r4
    1de8:	b5 1d       	adc	r27, r5
    1dea:	aa 0c       	add	r10, r10
    1dec:	bb 1c       	adc	r11, r11
    1dee:	cc 1c       	adc	r12, r12
    1df0:	dd 1c       	adc	r13, r13
    1df2:	17 ff       	sbrs	r17, 7
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <__mulsf3+0x10c>
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	26 2e       	mov	r2, r22
    1dfa:	31 2c       	mov	r3, r1
    1dfc:	41 2c       	mov	r4, r1
    1dfe:	51 2c       	mov	r5, r1
    1e00:	a2 28       	or	r10, r2
    1e02:	b3 28       	or	r11, r3
    1e04:	c4 28       	or	r12, r4
    1e06:	d5 28       	or	r13, r5
    1e08:	31 97       	sbiw	r30, 0x01	; 1
    1e0a:	49 f0       	breq	.+18     	; 0x1e1e <__mulsf3+0x122>
    1e0c:	ee 0c       	add	r14, r14
    1e0e:	ff 1c       	adc	r15, r15
    1e10:	00 1f       	adc	r16, r16
    1e12:	11 1f       	adc	r17, r17
    1e14:	96 94       	lsr	r9
    1e16:	87 94       	ror	r8
    1e18:	77 94       	ror	r7
    1e1a:	67 94       	ror	r6
    1e1c:	c6 cf       	rjmp	.-116    	; 0x1daa <__mulsf3+0xae>
    1e1e:	6b 89       	ldd	r22, Y+19	; 0x13
    1e20:	7c 89       	ldd	r23, Y+20	; 0x14
    1e22:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e24:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e26:	6e 0f       	add	r22, r30
    1e28:	7f 1f       	adc	r23, r31
    1e2a:	6e 5f       	subi	r22, 0xFE	; 254
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	6b 8f       	std	Y+27, r22	; 0x1b
    1e30:	7c 8f       	std	Y+28, r23	; 0x1c
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e36:	7a 89       	ldd	r23, Y+18	; 0x12
    1e38:	e7 17       	cp	r30, r23
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__mulsf3+0x142>
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	6a 8f       	std	Y+26, r22	; 0x1a
    1e40:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e42:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e44:	10 c0       	rjmp	.+32     	; 0x1e66 <__mulsf3+0x16a>
    1e46:	fc 01       	movw	r30, r24
    1e48:	e1 70       	andi	r30, 0x01	; 1
    1e4a:	f0 70       	andi	r31, 0x00	; 0
    1e4c:	30 97       	sbiw	r30, 0x00	; 0
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <__mulsf3+0x15e>
    1e50:	56 95       	lsr	r21
    1e52:	47 95       	ror	r20
    1e54:	37 95       	ror	r19
    1e56:	27 95       	ror	r18
    1e58:	50 68       	ori	r21, 0x80	; 128
    1e5a:	b6 95       	lsr	r27
    1e5c:	a7 95       	ror	r26
    1e5e:	97 95       	ror	r25
    1e60:	87 95       	ror	r24
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	b7 fd       	sbrc	r27, 7
    1e68:	ee cf       	rjmp	.-36     	; 0x1e46 <__mulsf3+0x14a>
    1e6a:	0c c0       	rjmp	.+24     	; 0x1e84 <__mulsf3+0x188>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	aa 1f       	adc	r26, r26
    1e72:	bb 1f       	adc	r27, r27
    1e74:	57 fd       	sbrc	r21, 7
    1e76:	81 60       	ori	r24, 0x01	; 1
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	44 1f       	adc	r20, r20
    1e7e:	55 1f       	adc	r21, r21
    1e80:	61 50       	subi	r22, 0x01	; 1
    1e82:	70 40       	sbci	r23, 0x00	; 0
    1e84:	80 30       	cpi	r24, 0x00	; 0
    1e86:	e0 e0       	ldi	r30, 0x00	; 0
    1e88:	9e 07       	cpc	r25, r30
    1e8a:	e0 e0       	ldi	r30, 0x00	; 0
    1e8c:	ae 07       	cpc	r26, r30
    1e8e:	e0 e4       	ldi	r30, 0x40	; 64
    1e90:	be 07       	cpc	r27, r30
    1e92:	60 f3       	brcs	.-40     	; 0x1e6c <__mulsf3+0x170>
    1e94:	6b 8f       	std	Y+27, r22	; 0x1b
    1e96:	7c 8f       	std	Y+28, r23	; 0x1c
    1e98:	6f e7       	ldi	r22, 0x7F	; 127
    1e9a:	e6 2e       	mov	r14, r22
    1e9c:	f1 2c       	mov	r15, r1
    1e9e:	01 2d       	mov	r16, r1
    1ea0:	11 2d       	mov	r17, r1
    1ea2:	e8 22       	and	r14, r24
    1ea4:	f9 22       	and	r15, r25
    1ea6:	0a 23       	and	r16, r26
    1ea8:	1b 23       	and	r17, r27
    1eaa:	60 e4       	ldi	r22, 0x40	; 64
    1eac:	e6 16       	cp	r14, r22
    1eae:	f1 04       	cpc	r15, r1
    1eb0:	01 05       	cpc	r16, r1
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	61 f4       	brne	.+24     	; 0x1ece <__mulsf3+0x1d2>
    1eb6:	87 fd       	sbrc	r24, 7
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <__mulsf3+0x1d2>
    1eba:	21 15       	cp	r18, r1
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	41 05       	cpc	r20, r1
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <__mulsf3+0x1d2>
    1ec4:	80 5c       	subi	r24, 0xC0	; 192
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	af 4f       	sbci	r26, 0xFF	; 255
    1eca:	bf 4f       	sbci	r27, 0xFF	; 255
    1ecc:	80 78       	andi	r24, 0x80	; 128
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed2:	af 8f       	std	Y+31, r26	; 0x1f
    1ed4:	b8 a3       	std	Y+32, r27	; 0x20
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	89 8f       	std	Y+25, r24	; 0x19
    1eda:	ce 01       	movw	r24, r28
    1edc:	49 96       	adiw	r24, 0x19	; 25
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <__mulsf3+0x1e8>
    1ee0:	8f e2       	ldi	r24, 0x2F	; 47
    1ee2:	90 e2       	ldi	r25, 0x20	; 32
    1ee4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__pack_f>
    1ee8:	a0 96       	adiw	r28, 0x20	; 32
    1eea:	e2 e1       	ldi	r30, 0x12	; 18
    1eec:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__>

00001ef0 <__divsf3>:
    1ef0:	a8 e1       	ldi	r26, 0x18	; 24
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	ee e7       	ldi	r30, 0x7E	; 126
    1ef6:	ff e0       	ldi	r31, 0x0F	; 15
    1ef8:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__prologue_saves__+0x10>
    1efc:	69 83       	std	Y+1, r22	; 0x01
    1efe:	7a 83       	std	Y+2, r23	; 0x02
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	2d 83       	std	Y+5, r18	; 0x05
    1f06:	3e 83       	std	Y+6, r19	; 0x06
    1f08:	4f 83       	std	Y+7, r20	; 0x07
    1f0a:	58 87       	std	Y+8, r21	; 0x08
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	07 5f       	subi	r16, 0xF7	; 247
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	b8 01       	movw	r22, r16
    1f18:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1f1c:	81 e1       	ldi	r24, 0x11	; 17
    1f1e:	e8 2e       	mov	r14, r24
    1f20:	f1 2c       	mov	r15, r1
    1f22:	ec 0e       	add	r14, r28
    1f24:	fd 1e       	adc	r15, r29
    1f26:	ce 01       	movw	r24, r28
    1f28:	05 96       	adiw	r24, 0x05	; 5
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    1f30:	99 85       	ldd	r25, Y+9	; 0x09
    1f32:	92 30       	cpi	r25, 0x02	; 2
    1f34:	08 f4       	brcc	.+2      	; 0x1f38 <__divsf3+0x48>
    1f36:	83 c0       	rjmp	.+262    	; 0x203e <__divsf3+0x14e>
    1f38:	89 89       	ldd	r24, Y+17	; 0x11
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <__divsf3+0x50>
    1f3e:	7b c0       	rjmp	.+246    	; 0x2036 <__divsf3+0x146>
    1f40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f42:	3a 89       	ldd	r19, Y+18	; 0x12
    1f44:	23 27       	eor	r18, r19
    1f46:	2a 87       	std	Y+10, r18	; 0x0a
    1f48:	94 30       	cpi	r25, 0x04	; 4
    1f4a:	11 f0       	breq	.+4      	; 0x1f50 <__divsf3+0x60>
    1f4c:	92 30       	cpi	r25, 0x02	; 2
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <__divsf3+0x68>
    1f50:	98 17       	cp	r25, r24
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <__divsf3+0x66>
    1f54:	6c c0       	rjmp	.+216    	; 0x202e <__divsf3+0x13e>
    1f56:	71 c0       	rjmp	.+226    	; 0x203a <__divsf3+0x14a>
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <__divsf3+0x7a>
    1f5c:	1d 86       	std	Y+13, r1	; 0x0d
    1f5e:	1e 86       	std	Y+14, r1	; 0x0e
    1f60:	1f 86       	std	Y+15, r1	; 0x0f
    1f62:	18 8a       	std	Y+16, r1	; 0x10
    1f64:	1b 86       	std	Y+11, r1	; 0x0b
    1f66:	1c 86       	std	Y+12, r1	; 0x0c
    1f68:	6a c0       	rjmp	.+212    	; 0x203e <__divsf3+0x14e>
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	19 f4       	brne	.+6      	; 0x1f74 <__divsf3+0x84>
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	89 87       	std	Y+9, r24	; 0x09
    1f72:	65 c0       	rjmp	.+202    	; 0x203e <__divsf3+0x14e>
    1f74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f78:	2b 89       	ldd	r18, Y+19	; 0x13
    1f7a:	3c 89       	ldd	r19, Y+20	; 0x14
    1f7c:	82 1b       	sub	r24, r18
    1f7e:	93 0b       	sbc	r25, r19
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f86:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f88:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f8a:	58 89       	ldd	r21, Y+16	; 0x10
    1f8c:	ed 88       	ldd	r14, Y+21	; 0x15
    1f8e:	fe 88       	ldd	r15, Y+22	; 0x16
    1f90:	0f 89       	ldd	r16, Y+23	; 0x17
    1f92:	18 8d       	ldd	r17, Y+24	; 0x18
    1f94:	2e 15       	cp	r18, r14
    1f96:	3f 05       	cpc	r19, r15
    1f98:	40 07       	cpc	r20, r16
    1f9a:	51 07       	cpc	r21, r17
    1f9c:	38 f4       	brcc	.+14     	; 0x1fac <__divsf3+0xbc>
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	44 1f       	adc	r20, r20
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	8b 87       	std	Y+11, r24	; 0x0b
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	6f e1       	ldi	r22, 0x1F	; 31
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	a1 2c       	mov	r10, r1
    1fb2:	b1 2c       	mov	r11, r1
    1fb4:	c1 2c       	mov	r12, r1
    1fb6:	a0 e4       	ldi	r26, 0x40	; 64
    1fb8:	da 2e       	mov	r13, r26
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	2e 15       	cp	r18, r14
    1fc2:	3f 05       	cpc	r19, r15
    1fc4:	40 07       	cpc	r20, r16
    1fc6:	51 07       	cpc	r21, r17
    1fc8:	40 f0       	brcs	.+16     	; 0x1fda <__divsf3+0xea>
    1fca:	8a 29       	or	r24, r10
    1fcc:	9b 29       	or	r25, r11
    1fce:	ac 29       	or	r26, r12
    1fd0:	bd 29       	or	r27, r13
    1fd2:	2e 19       	sub	r18, r14
    1fd4:	3f 09       	sbc	r19, r15
    1fd6:	40 0b       	sbc	r20, r16
    1fd8:	51 0b       	sbc	r21, r17
    1fda:	d6 94       	lsr	r13
    1fdc:	c7 94       	ror	r12
    1fde:	b7 94       	ror	r11
    1fe0:	a7 94       	ror	r10
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	44 1f       	adc	r20, r20
    1fe8:	55 1f       	adc	r21, r21
    1fea:	61 50       	subi	r22, 0x01	; 1
    1fec:	70 40       	sbci	r23, 0x00	; 0
    1fee:	41 f7       	brne	.-48     	; 0x1fc0 <__divsf3+0xd0>
    1ff0:	6f e7       	ldi	r22, 0x7F	; 127
    1ff2:	e6 2e       	mov	r14, r22
    1ff4:	f1 2c       	mov	r15, r1
    1ff6:	01 2d       	mov	r16, r1
    1ff8:	11 2d       	mov	r17, r1
    1ffa:	e8 22       	and	r14, r24
    1ffc:	f9 22       	and	r15, r25
    1ffe:	0a 23       	and	r16, r26
    2000:	1b 23       	and	r17, r27
    2002:	60 e4       	ldi	r22, 0x40	; 64
    2004:	e6 16       	cp	r14, r22
    2006:	f1 04       	cpc	r15, r1
    2008:	01 05       	cpc	r16, r1
    200a:	11 05       	cpc	r17, r1
    200c:	61 f4       	brne	.+24     	; 0x2026 <__divsf3+0x136>
    200e:	87 fd       	sbrc	r24, 7
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <__divsf3+0x136>
    2012:	21 15       	cp	r18, r1
    2014:	31 05       	cpc	r19, r1
    2016:	41 05       	cpc	r20, r1
    2018:	51 05       	cpc	r21, r1
    201a:	29 f0       	breq	.+10     	; 0x2026 <__divsf3+0x136>
    201c:	80 5c       	subi	r24, 0xC0	; 192
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	af 4f       	sbci	r26, 0xFF	; 255
    2022:	bf 4f       	sbci	r27, 0xFF	; 255
    2024:	80 78       	andi	r24, 0x80	; 128
    2026:	8d 87       	std	Y+13, r24	; 0x0d
    2028:	9e 87       	std	Y+14, r25	; 0x0e
    202a:	af 87       	std	Y+15, r26	; 0x0f
    202c:	b8 8b       	std	Y+16, r27	; 0x10
    202e:	8e 01       	movw	r16, r28
    2030:	07 5f       	subi	r16, 0xF7	; 247
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	04 c0       	rjmp	.+8      	; 0x203e <__divsf3+0x14e>
    2036:	87 01       	movw	r16, r14
    2038:	02 c0       	rjmp	.+4      	; 0x203e <__divsf3+0x14e>
    203a:	0f e2       	ldi	r16, 0x2F	; 47
    203c:	10 e2       	ldi	r17, 0x20	; 32
    203e:	c8 01       	movw	r24, r16
    2040:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__pack_f>
    2044:	68 96       	adiw	r28, 0x18	; 24
    2046:	ea e0       	ldi	r30, 0x0A	; 10
    2048:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x10>

0000204c <__gesf2>:
    204c:	a8 e1       	ldi	r26, 0x18	; 24
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ec e2       	ldi	r30, 0x2C	; 44
    2052:	f0 e1       	ldi	r31, 0x10	; 16
    2054:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__+0x18>
    2058:	69 83       	std	Y+1, r22	; 0x01
    205a:	7a 83       	std	Y+2, r23	; 0x02
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	2d 83       	std	Y+5, r18	; 0x05
    2062:	3e 83       	std	Y+6, r19	; 0x06
    2064:	4f 83       	std	Y+7, r20	; 0x07
    2066:	58 87       	std	Y+8, r21	; 0x08
    2068:	8e 01       	movw	r16, r28
    206a:	07 5f       	subi	r16, 0xF7	; 247
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    2078:	81 e1       	ldi	r24, 0x11	; 17
    207a:	e8 2e       	mov	r14, r24
    207c:	f1 2c       	mov	r15, r1
    207e:	ec 0e       	add	r14, r28
    2080:	fd 1e       	adc	r15, r29
    2082:	ce 01       	movw	r24, r28
    2084:	05 96       	adiw	r24, 0x05	; 5
    2086:	b7 01       	movw	r22, r14
    2088:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	40 f0       	brcs	.+16     	; 0x20a2 <__gesf2+0x56>
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	82 30       	cpi	r24, 0x02	; 2
    2096:	28 f0       	brcs	.+10     	; 0x20a2 <__gesf2+0x56>
    2098:	c8 01       	movw	r24, r16
    209a:	b7 01       	movw	r22, r14
    209c:	0e 94 b1 12 	call	0x2562	; 0x2562 <__fpcmp_parts_f>
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <__gesf2+0x58>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	68 96       	adiw	r28, 0x18	; 24
    20a6:	e6 e0       	ldi	r30, 0x06	; 6
    20a8:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

000020ac <__fixsfsi>:
    20ac:	ac e0       	ldi	r26, 0x0C	; 12
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ec e5       	ldi	r30, 0x5C	; 92
    20b2:	f0 e1       	ldi	r31, 0x10	; 16
    20b4:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__prologue_saves__+0x20>
    20b8:	69 83       	std	Y+1, r22	; 0x01
    20ba:	7a 83       	std	Y+2, r23	; 0x02
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	9c 83       	std	Y+4, r25	; 0x04
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	be 01       	movw	r22, r28
    20c6:	6b 5f       	subi	r22, 0xFB	; 251
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	0e 94 48 12 	call	0x2490	; 0x2490 <__unpack_f>
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	81 f1       	breq	.+96     	; 0x2134 <__fixsfsi+0x88>
    20d4:	82 30       	cpi	r24, 0x02	; 2
    20d6:	70 f1       	brcs	.+92     	; 0x2134 <__fixsfsi+0x88>
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	21 f4       	brne	.+8      	; 0x20e4 <__fixsfsi+0x38>
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	88 23       	and	r24, r24
    20e0:	69 f1       	breq	.+90     	; 0x213c <__fixsfsi+0x90>
    20e2:	0a c0       	rjmp	.+20     	; 0x20f8 <__fixsfsi+0x4c>
    20e4:	2f 81       	ldd	r18, Y+7	; 0x07
    20e6:	38 85       	ldd	r19, Y+8	; 0x08
    20e8:	37 fd       	sbrc	r19, 7
    20ea:	24 c0       	rjmp	.+72     	; 0x2134 <__fixsfsi+0x88>
    20ec:	6e 81       	ldd	r22, Y+6	; 0x06
    20ee:	2f 31       	cpi	r18, 0x1F	; 31
    20f0:	31 05       	cpc	r19, r1
    20f2:	3c f0       	brlt	.+14     	; 0x2102 <__fixsfsi+0x56>
    20f4:	66 23       	and	r22, r22
    20f6:	11 f1       	breq	.+68     	; 0x213c <__fixsfsi+0x90>
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	50 e8       	ldi	r21, 0x80	; 128
    2100:	21 c0       	rjmp	.+66     	; 0x2144 <__fixsfsi+0x98>
    2102:	8e e1       	ldi	r24, 0x1E	; 30
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	82 1b       	sub	r24, r18
    2108:	93 0b       	sbc	r25, r19
    210a:	29 85       	ldd	r18, Y+9	; 0x09
    210c:	3a 85       	ldd	r19, Y+10	; 0x0a
    210e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2110:	5c 85       	ldd	r21, Y+12	; 0x0c
    2112:	04 c0       	rjmp	.+8      	; 0x211c <__fixsfsi+0x70>
    2114:	56 95       	lsr	r21
    2116:	47 95       	ror	r20
    2118:	37 95       	ror	r19
    211a:	27 95       	ror	r18
    211c:	8a 95       	dec	r24
    211e:	d2 f7       	brpl	.-12     	; 0x2114 <__fixsfsi+0x68>
    2120:	66 23       	and	r22, r22
    2122:	81 f0       	breq	.+32     	; 0x2144 <__fixsfsi+0x98>
    2124:	50 95       	com	r21
    2126:	40 95       	com	r20
    2128:	30 95       	com	r19
    212a:	21 95       	neg	r18
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	4f 4f       	sbci	r20, 0xFF	; 255
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <__fixsfsi+0x98>
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	a9 01       	movw	r20, r18
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <__fixsfsi+0x98>
    213c:	2f ef       	ldi	r18, 0xFF	; 255
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f ef       	ldi	r20, 0xFF	; 255
    2142:	5f e7       	ldi	r21, 0x7F	; 127
    2144:	b9 01       	movw	r22, r18
    2146:	ca 01       	movw	r24, r20
    2148:	2c 96       	adiw	r28, 0x0c	; 12
    214a:	e2 e0       	ldi	r30, 0x02	; 2
    214c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__+0x20>

00002150 <__floatunsisf>:
    2150:	a8 e0       	ldi	r26, 0x08	; 8
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ee ea       	ldi	r30, 0xAE	; 174
    2156:	f0 e1       	ldi	r31, 0x10	; 16
    2158:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__prologue_saves__+0x14>
    215c:	7b 01       	movw	r14, r22
    215e:	8c 01       	movw	r16, r24
    2160:	1a 82       	std	Y+2, r1	; 0x02
    2162:	61 15       	cp	r22, r1
    2164:	71 05       	cpc	r23, r1
    2166:	81 05       	cpc	r24, r1
    2168:	91 05       	cpc	r25, r1
    216a:	19 f4       	brne	.+6      	; 0x2172 <__floatunsisf+0x22>
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	5f c0       	rjmp	.+190    	; 0x2230 <__floatunsisf+0xe0>
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	8e e1       	ldi	r24, 0x1E	; 30
    2178:	c8 2e       	mov	r12, r24
    217a:	d1 2c       	mov	r13, r1
    217c:	cb 82       	std	Y+3, r12	; 0x03
    217e:	dc 82       	std	Y+4, r13	; 0x04
    2180:	ed 82       	std	Y+5, r14	; 0x05
    2182:	fe 82       	std	Y+6, r15	; 0x06
    2184:	0f 83       	std	Y+7, r16	; 0x07
    2186:	18 87       	std	Y+8, r17	; 0x08
    2188:	c8 01       	movw	r24, r16
    218a:	b7 01       	movw	r22, r14
    218c:	0e 94 20 11 	call	0x2240	; 0x2240 <__clzsi2>
    2190:	fc 01       	movw	r30, r24
    2192:	31 97       	sbiw	r30, 0x01	; 1
    2194:	f7 ff       	sbrs	r31, 7
    2196:	3a c0       	rjmp	.+116    	; 0x220c <__floatunsisf+0xbc>
    2198:	aa 27       	eor	r26, r26
    219a:	bb 27       	eor	r27, r27
    219c:	ae 1b       	sub	r26, r30
    219e:	bf 0b       	sbc	r27, r31
    21a0:	21 e0       	ldi	r18, 0x01	; 1
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	0a 2e       	mov	r0, r26
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <__floatunsisf+0x64>
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	44 1f       	adc	r20, r20
    21b2:	55 1f       	adc	r21, r21
    21b4:	0a 94       	dec	r0
    21b6:	d2 f7       	brpl	.-12     	; 0x21ac <__floatunsisf+0x5c>
    21b8:	21 50       	subi	r18, 0x01	; 1
    21ba:	30 40       	sbci	r19, 0x00	; 0
    21bc:	40 40       	sbci	r20, 0x00	; 0
    21be:	50 40       	sbci	r21, 0x00	; 0
    21c0:	2e 21       	and	r18, r14
    21c2:	3f 21       	and	r19, r15
    21c4:	40 23       	and	r20, r16
    21c6:	51 23       	and	r21, r17
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	41 05       	cpc	r20, r1
    21d6:	51 05       	cpc	r21, r1
    21d8:	19 f4       	brne	.+6      	; 0x21e0 <__floatunsisf+0x90>
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	cb 01       	movw	r24, r22
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <__floatunsisf+0x9a>
    21e2:	16 95       	lsr	r17
    21e4:	07 95       	ror	r16
    21e6:	f7 94       	ror	r15
    21e8:	e7 94       	ror	r14
    21ea:	aa 95       	dec	r26
    21ec:	d2 f7       	brpl	.-12     	; 0x21e2 <__floatunsisf+0x92>
    21ee:	e6 2a       	or	r14, r22
    21f0:	f7 2a       	or	r15, r23
    21f2:	08 2b       	or	r16, r24
    21f4:	19 2b       	or	r17, r25
    21f6:	ed 82       	std	Y+5, r14	; 0x05
    21f8:	fe 82       	std	Y+6, r15	; 0x06
    21fa:	0f 83       	std	Y+7, r16	; 0x07
    21fc:	18 87       	std	Y+8, r17	; 0x08
    21fe:	8e e1       	ldi	r24, 0x1E	; 30
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	8e 1b       	sub	r24, r30
    2204:	9f 0b       	sbc	r25, r31
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	12 c0       	rjmp	.+36     	; 0x2230 <__floatunsisf+0xe0>
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	81 f0       	breq	.+32     	; 0x2230 <__floatunsisf+0xe0>
    2210:	0e 2e       	mov	r0, r30
    2212:	04 c0       	rjmp	.+8      	; 0x221c <__floatunsisf+0xcc>
    2214:	ee 0c       	add	r14, r14
    2216:	ff 1c       	adc	r15, r15
    2218:	00 1f       	adc	r16, r16
    221a:	11 1f       	adc	r17, r17
    221c:	0a 94       	dec	r0
    221e:	d2 f7       	brpl	.-12     	; 0x2214 <__floatunsisf+0xc4>
    2220:	ed 82       	std	Y+5, r14	; 0x05
    2222:	fe 82       	std	Y+6, r15	; 0x06
    2224:	0f 83       	std	Y+7, r16	; 0x07
    2226:	18 87       	std	Y+8, r17	; 0x08
    2228:	ce 1a       	sub	r12, r30
    222a:	df 0a       	sbc	r13, r31
    222c:	cb 82       	std	Y+3, r12	; 0x03
    222e:	dc 82       	std	Y+4, r13	; 0x04
    2230:	ce 01       	movw	r24, r28
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__pack_f>
    2238:	28 96       	adiw	r28, 0x08	; 8
    223a:	e8 e0       	ldi	r30, 0x08	; 8
    223c:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x14>

00002240 <__clzsi2>:
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	7b 01       	movw	r14, r22
    2252:	8c 01       	movw	r16, r24
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	e8 16       	cp	r14, r24
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	f8 06       	cpc	r15, r24
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	08 07       	cpc	r16, r24
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	18 07       	cpc	r17, r24
    2264:	58 f4       	brcc	.+22     	; 0x227c <__clzsi2+0x3c>
    2266:	ef ef       	ldi	r30, 0xFF	; 255
    2268:	ee 16       	cp	r14, r30
    226a:	f1 04       	cpc	r15, r1
    226c:	01 05       	cpc	r16, r1
    226e:	11 05       	cpc	r17, r1
    2270:	09 f0       	breq	.+2      	; 0x2274 <__clzsi2+0x34>
    2272:	90 f4       	brcc	.+36     	; 0x2298 <__clzsi2+0x58>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	dc 01       	movw	r26, r24
    227a:	17 c0       	rjmp	.+46     	; 0x22aa <__clzsi2+0x6a>
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	ef 16       	cp	r14, r31
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	ff 06       	cpc	r15, r31
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	0f 07       	cpc	r16, r31
    2288:	f1 e0       	ldi	r31, 0x01	; 1
    228a:	1f 07       	cpc	r17, r31
    228c:	50 f4       	brcc	.+20     	; 0x22a2 <__clzsi2+0x62>
    228e:	80 e1       	ldi	r24, 0x10	; 16
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e0       	ldi	r26, 0x00	; 0
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	09 c0       	rjmp	.+18     	; 0x22aa <__clzsi2+0x6a>
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e0       	ldi	r26, 0x00	; 0
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <__clzsi2+0x6a>
    22a2:	88 e1       	ldi	r24, 0x18	; 24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	20 e2       	ldi	r18, 0x20	; 32
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	28 1b       	sub	r18, r24
    22b4:	39 0b       	sbc	r19, r25
    22b6:	4a 0b       	sbc	r20, r26
    22b8:	5b 0b       	sbc	r21, r27
    22ba:	57 01       	movw	r10, r14
    22bc:	68 01       	movw	r12, r16
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <__clzsi2+0x88>
    22c0:	d6 94       	lsr	r13
    22c2:	c7 94       	ror	r12
    22c4:	b7 94       	ror	r11
    22c6:	a7 94       	ror	r10
    22c8:	8a 95       	dec	r24
    22ca:	d2 f7       	brpl	.-12     	; 0x22c0 <__clzsi2+0x80>
    22cc:	d6 01       	movw	r26, r12
    22ce:	c5 01       	movw	r24, r10
    22d0:	89 5c       	subi	r24, 0xC9	; 201
    22d2:	9f 4d       	sbci	r25, 0xDF	; 223
    22d4:	fc 01       	movw	r30, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	28 1b       	sub	r18, r24
    22da:	31 09       	sbc	r19, r1
    22dc:	41 09       	sbc	r20, r1
    22de:	51 09       	sbc	r21, r1
    22e0:	c9 01       	movw	r24, r18
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	bf 90       	pop	r11
    22f0:	af 90       	pop	r10
    22f2:	08 95       	ret

000022f4 <__pack_f>:
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	fc 01       	movw	r30, r24
    2302:	24 81       	ldd	r18, Z+4	; 0x04
    2304:	35 81       	ldd	r19, Z+5	; 0x05
    2306:	46 81       	ldd	r20, Z+6	; 0x06
    2308:	57 81       	ldd	r21, Z+7	; 0x07
    230a:	61 81       	ldd	r22, Z+1	; 0x01
    230c:	80 81       	ld	r24, Z
    230e:	82 30       	cpi	r24, 0x02	; 2
    2310:	20 f4       	brcc	.+8      	; 0x231a <__pack_f+0x26>
    2312:	40 61       	ori	r20, 0x10	; 16
    2314:	ef ef       	ldi	r30, 0xFF	; 255
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	a3 c0       	rjmp	.+326    	; 0x2460 <__pack_f+0x16c>
    231a:	84 30       	cpi	r24, 0x04	; 4
    231c:	09 f4       	brne	.+2      	; 0x2320 <__pack_f+0x2c>
    231e:	9b c0       	rjmp	.+310    	; 0x2456 <__pack_f+0x162>
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	09 f4       	brne	.+2      	; 0x2326 <__pack_f+0x32>
    2324:	92 c0       	rjmp	.+292    	; 0x244a <__pack_f+0x156>
    2326:	21 15       	cp	r18, r1
    2328:	31 05       	cpc	r19, r1
    232a:	41 05       	cpc	r20, r1
    232c:	51 05       	cpc	r21, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <__pack_f+0x3e>
    2330:	8f c0       	rjmp	.+286    	; 0x2450 <__pack_f+0x15c>
    2332:	02 80       	ldd	r0, Z+2	; 0x02
    2334:	f3 81       	ldd	r31, Z+3	; 0x03
    2336:	e0 2d       	mov	r30, r0
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	e2 38       	cpi	r30, 0x82	; 130
    233c:	f8 07       	cpc	r31, r24
    233e:	0c f0       	brlt	.+2      	; 0x2342 <__pack_f+0x4e>
    2340:	5a c0       	rjmp	.+180    	; 0x23f6 <__pack_f+0x102>
    2342:	c2 e8       	ldi	r28, 0x82	; 130
    2344:	df ef       	ldi	r29, 0xFF	; 255
    2346:	ce 1b       	sub	r28, r30
    2348:	df 0b       	sbc	r29, r31
    234a:	ca 31       	cpi	r28, 0x1A	; 26
    234c:	d1 05       	cpc	r29, r1
    234e:	6c f5       	brge	.+90     	; 0x23aa <__pack_f+0xb6>
    2350:	79 01       	movw	r14, r18
    2352:	8a 01       	movw	r16, r20
    2354:	0c 2e       	mov	r0, r28
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <__pack_f+0x6c>
    2358:	16 95       	lsr	r17
    235a:	07 95       	ror	r16
    235c:	f7 94       	ror	r15
    235e:	e7 94       	ror	r14
    2360:	0a 94       	dec	r0
    2362:	d2 f7       	brpl	.-12     	; 0x2358 <__pack_f+0x64>
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e0       	ldi	r26, 0x00	; 0
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	0c 2e       	mov	r0, r28
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <__pack_f+0x84>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	aa 1f       	adc	r26, r26
    2376:	bb 1f       	adc	r27, r27
    2378:	0a 94       	dec	r0
    237a:	d2 f7       	brpl	.-12     	; 0x2370 <__pack_f+0x7c>
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	a1 09       	sbc	r26, r1
    2380:	b1 09       	sbc	r27, r1
    2382:	82 23       	and	r24, r18
    2384:	93 23       	and	r25, r19
    2386:	a4 23       	and	r26, r20
    2388:	b5 23       	and	r27, r21
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	a1 05       	cpc	r26, r1
    2396:	b1 05       	cpc	r27, r1
    2398:	19 f4       	brne	.+6      	; 0x23a0 <__pack_f+0xac>
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	2e 29       	or	r18, r14
    23a2:	3f 29       	or	r19, r15
    23a4:	40 2b       	or	r20, r16
    23a6:	51 2b       	or	r21, r17
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <__pack_f+0xbc>
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	a9 01       	movw	r20, r18
    23b0:	da 01       	movw	r26, r20
    23b2:	c9 01       	movw	r24, r18
    23b4:	8f 77       	andi	r24, 0x7F	; 127
    23b6:	90 70       	andi	r25, 0x00	; 0
    23b8:	a0 70       	andi	r26, 0x00	; 0
    23ba:	b0 70       	andi	r27, 0x00	; 0
    23bc:	80 34       	cpi	r24, 0x40	; 64
    23be:	91 05       	cpc	r25, r1
    23c0:	a1 05       	cpc	r26, r1
    23c2:	b1 05       	cpc	r27, r1
    23c4:	39 f4       	brne	.+14     	; 0x23d4 <__pack_f+0xe0>
    23c6:	27 ff       	sbrs	r18, 7
    23c8:	09 c0       	rjmp	.+18     	; 0x23dc <__pack_f+0xe8>
    23ca:	20 5c       	subi	r18, 0xC0	; 192
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	4f 4f       	sbci	r20, 0xFF	; 255
    23d0:	5f 4f       	sbci	r21, 0xFF	; 255
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <__pack_f+0xe8>
    23d4:	21 5c       	subi	r18, 0xC1	; 193
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	4f 4f       	sbci	r20, 0xFF	; 255
    23da:	5f 4f       	sbci	r21, 0xFF	; 255
    23dc:	e1 e0       	ldi	r30, 0x01	; 1
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	20 30       	cpi	r18, 0x00	; 0
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	38 07       	cpc	r19, r24
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	48 07       	cpc	r20, r24
    23ea:	80 e4       	ldi	r24, 0x40	; 64
    23ec:	58 07       	cpc	r21, r24
    23ee:	28 f5       	brcc	.+74     	; 0x243a <__pack_f+0x146>
    23f0:	e0 e0       	ldi	r30, 0x00	; 0
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	22 c0       	rjmp	.+68     	; 0x243a <__pack_f+0x146>
    23f6:	e0 38       	cpi	r30, 0x80	; 128
    23f8:	f1 05       	cpc	r31, r1
    23fa:	6c f5       	brge	.+90     	; 0x2456 <__pack_f+0x162>
    23fc:	e1 58       	subi	r30, 0x81	; 129
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	da 01       	movw	r26, r20
    2402:	c9 01       	movw	r24, r18
    2404:	8f 77       	andi	r24, 0x7F	; 127
    2406:	90 70       	andi	r25, 0x00	; 0
    2408:	a0 70       	andi	r26, 0x00	; 0
    240a:	b0 70       	andi	r27, 0x00	; 0
    240c:	80 34       	cpi	r24, 0x40	; 64
    240e:	91 05       	cpc	r25, r1
    2410:	a1 05       	cpc	r26, r1
    2412:	b1 05       	cpc	r27, r1
    2414:	39 f4       	brne	.+14     	; 0x2424 <__pack_f+0x130>
    2416:	27 ff       	sbrs	r18, 7
    2418:	09 c0       	rjmp	.+18     	; 0x242c <__pack_f+0x138>
    241a:	20 5c       	subi	r18, 0xC0	; 192
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	4f 4f       	sbci	r20, 0xFF	; 255
    2420:	5f 4f       	sbci	r21, 0xFF	; 255
    2422:	04 c0       	rjmp	.+8      	; 0x242c <__pack_f+0x138>
    2424:	21 5c       	subi	r18, 0xC1	; 193
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	4f 4f       	sbci	r20, 0xFF	; 255
    242a:	5f 4f       	sbci	r21, 0xFF	; 255
    242c:	57 ff       	sbrs	r21, 7
    242e:	05 c0       	rjmp	.+10     	; 0x243a <__pack_f+0x146>
    2430:	56 95       	lsr	r21
    2432:	47 95       	ror	r20
    2434:	37 95       	ror	r19
    2436:	27 95       	ror	r18
    2438:	31 96       	adiw	r30, 0x01	; 1
    243a:	87 e0       	ldi	r24, 0x07	; 7
    243c:	56 95       	lsr	r21
    243e:	47 95       	ror	r20
    2440:	37 95       	ror	r19
    2442:	27 95       	ror	r18
    2444:	8a 95       	dec	r24
    2446:	d1 f7       	brne	.-12     	; 0x243c <__pack_f+0x148>
    2448:	0b c0       	rjmp	.+22     	; 0x2460 <__pack_f+0x16c>
    244a:	e0 e0       	ldi	r30, 0x00	; 0
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	05 c0       	rjmp	.+10     	; 0x245a <__pack_f+0x166>
    2450:	e0 e0       	ldi	r30, 0x00	; 0
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	05 c0       	rjmp	.+10     	; 0x2460 <__pack_f+0x16c>
    2456:	ef ef       	ldi	r30, 0xFF	; 255
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	a9 01       	movw	r20, r18
    2460:	8e 2f       	mov	r24, r30
    2462:	87 95       	ror	r24
    2464:	88 27       	eor	r24, r24
    2466:	87 95       	ror	r24
    2468:	94 2f       	mov	r25, r20
    246a:	9f 77       	andi	r25, 0x7F	; 127
    246c:	67 95       	ror	r22
    246e:	66 27       	eor	r22, r22
    2470:	67 95       	ror	r22
    2472:	e6 95       	lsr	r30
    2474:	e2 2e       	mov	r14, r18
    2476:	a9 2f       	mov	r26, r25
    2478:	a8 2b       	or	r26, r24
    247a:	fe 2f       	mov	r31, r30
    247c:	f6 2b       	or	r31, r22
    247e:	62 2f       	mov	r22, r18
    2480:	73 2f       	mov	r23, r19
    2482:	8a 2f       	mov	r24, r26
    2484:	9f 2f       	mov	r25, r31
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	e6 e0       	ldi	r30, 0x06	; 6
    248c:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

00002490 <__unpack_f>:
    2490:	dc 01       	movw	r26, r24
    2492:	fb 01       	movw	r30, r22
    2494:	2c 91       	ld	r18, X
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	3c 91       	ld	r19, X
    249a:	11 97       	sbiw	r26, 0x01	; 1
    249c:	12 96       	adiw	r26, 0x02	; 2
    249e:	8c 91       	ld	r24, X
    24a0:	12 97       	sbiw	r26, 0x02	; 2
    24a2:	48 2f       	mov	r20, r24
    24a4:	4f 77       	andi	r20, 0x7F	; 127
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	98 2f       	mov	r25, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	99 27       	eor	r25, r25
    24ae:	99 1f       	adc	r25, r25
    24b0:	13 96       	adiw	r26, 0x03	; 3
    24b2:	6c 91       	ld	r22, X
    24b4:	13 97       	sbiw	r26, 0x03	; 3
    24b6:	86 2f       	mov	r24, r22
    24b8:	88 0f       	add	r24, r24
    24ba:	89 2b       	or	r24, r25
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	66 1f       	adc	r22, r22
    24c0:	66 27       	eor	r22, r22
    24c2:	66 1f       	adc	r22, r22
    24c4:	61 83       	std	Z+1, r22	; 0x01
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	39 f5       	brne	.+78     	; 0x2518 <__unpack_f+0x88>
    24ca:	21 15       	cp	r18, r1
    24cc:	31 05       	cpc	r19, r1
    24ce:	41 05       	cpc	r20, r1
    24d0:	51 05       	cpc	r21, r1
    24d2:	11 f4       	brne	.+4      	; 0x24d8 <__unpack_f+0x48>
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	29 c0       	rjmp	.+82     	; 0x252a <__unpack_f+0x9a>
    24d8:	82 e8       	ldi	r24, 0x82	; 130
    24da:	9f ef       	ldi	r25, 0xFF	; 255
    24dc:	82 83       	std	Z+2, r24	; 0x02
    24de:	93 83       	std	Z+3, r25	; 0x03
    24e0:	67 e0       	ldi	r22, 0x07	; 7
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	44 1f       	adc	r20, r20
    24e8:	55 1f       	adc	r21, r21
    24ea:	6a 95       	dec	r22
    24ec:	d1 f7       	brne	.-12     	; 0x24e2 <__unpack_f+0x52>
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	80 83       	st	Z, r24
    24f2:	09 c0       	rjmp	.+18     	; 0x2506 <__unpack_f+0x76>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	44 1f       	adc	r20, r20
    24fa:	55 1f       	adc	r21, r21
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	82 83       	std	Z+2, r24	; 0x02
    2504:	93 83       	std	Z+3, r25	; 0x03
    2506:	20 30       	cpi	r18, 0x00	; 0
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	38 07       	cpc	r19, r24
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	48 07       	cpc	r20, r24
    2510:	80 e4       	ldi	r24, 0x40	; 64
    2512:	58 07       	cpc	r21, r24
    2514:	78 f3       	brcs	.-34     	; 0x24f4 <__unpack_f+0x64>
    2516:	20 c0       	rjmp	.+64     	; 0x2558 <__unpack_f+0xc8>
    2518:	8f 3f       	cpi	r24, 0xFF	; 255
    251a:	91 05       	cpc	r25, r1
    251c:	79 f4       	brne	.+30     	; 0x253c <__unpack_f+0xac>
    251e:	21 15       	cp	r18, r1
    2520:	31 05       	cpc	r19, r1
    2522:	41 05       	cpc	r20, r1
    2524:	51 05       	cpc	r21, r1
    2526:	19 f4       	brne	.+6      	; 0x252e <__unpack_f+0x9e>
    2528:	84 e0       	ldi	r24, 0x04	; 4
    252a:	80 83       	st	Z, r24
    252c:	08 95       	ret
    252e:	44 ff       	sbrs	r20, 4
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <__unpack_f+0xa8>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 83       	st	Z, r24
    2536:	10 c0       	rjmp	.+32     	; 0x2558 <__unpack_f+0xc8>
    2538:	10 82       	st	Z, r1
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <__unpack_f+0xc8>
    253c:	8f 57       	subi	r24, 0x7F	; 127
    253e:	90 40       	sbci	r25, 0x00	; 0
    2540:	82 83       	std	Z+2, r24	; 0x02
    2542:	93 83       	std	Z+3, r25	; 0x03
    2544:	83 e0       	ldi	r24, 0x03	; 3
    2546:	80 83       	st	Z, r24
    2548:	87 e0       	ldi	r24, 0x07	; 7
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	44 1f       	adc	r20, r20
    2550:	55 1f       	adc	r21, r21
    2552:	8a 95       	dec	r24
    2554:	d1 f7       	brne	.-12     	; 0x254a <__unpack_f+0xba>
    2556:	50 64       	ori	r21, 0x40	; 64
    2558:	24 83       	std	Z+4, r18	; 0x04
    255a:	35 83       	std	Z+5, r19	; 0x05
    255c:	46 83       	std	Z+6, r20	; 0x06
    255e:	57 83       	std	Z+7, r21	; 0x07
    2560:	08 95       	ret

00002562 <__fpcmp_parts_f>:
    2562:	fc 01       	movw	r30, r24
    2564:	db 01       	movw	r26, r22
    2566:	90 81       	ld	r25, Z
    2568:	92 30       	cpi	r25, 0x02	; 2
    256a:	08 f4       	brcc	.+2      	; 0x256e <__fpcmp_parts_f+0xc>
    256c:	49 c0       	rjmp	.+146    	; 0x2600 <__fpcmp_parts_f+0x9e>
    256e:	8c 91       	ld	r24, X
    2570:	82 30       	cpi	r24, 0x02	; 2
    2572:	08 f4       	brcc	.+2      	; 0x2576 <__fpcmp_parts_f+0x14>
    2574:	45 c0       	rjmp	.+138    	; 0x2600 <__fpcmp_parts_f+0x9e>
    2576:	94 30       	cpi	r25, 0x04	; 4
    2578:	51 f4       	brne	.+20     	; 0x258e <__fpcmp_parts_f+0x2c>
    257a:	61 81       	ldd	r22, Z+1	; 0x01
    257c:	84 30       	cpi	r24, 0x04	; 4
    257e:	b1 f5       	brne	.+108    	; 0x25ec <__fpcmp_parts_f+0x8a>
    2580:	11 96       	adiw	r26, 0x01	; 1
    2582:	2c 91       	ld	r18, X
    2584:	11 97       	sbiw	r26, 0x01	; 1
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	26 1b       	sub	r18, r22
    258a:	31 09       	sbc	r19, r1
    258c:	41 c0       	rjmp	.+130    	; 0x2610 <__fpcmp_parts_f+0xae>
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	21 f0       	breq	.+8      	; 0x259a <__fpcmp_parts_f+0x38>
    2592:	92 30       	cpi	r25, 0x02	; 2
    2594:	41 f4       	brne	.+16     	; 0x25a6 <__fpcmp_parts_f+0x44>
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	b1 f1       	breq	.+108    	; 0x2606 <__fpcmp_parts_f+0xa4>
    259a:	11 96       	adiw	r26, 0x01	; 1
    259c:	8c 91       	ld	r24, X
    259e:	11 97       	sbiw	r26, 0x01	; 1
    25a0:	88 23       	and	r24, r24
    25a2:	a1 f1       	breq	.+104    	; 0x260c <__fpcmp_parts_f+0xaa>
    25a4:	2d c0       	rjmp	.+90     	; 0x2600 <__fpcmp_parts_f+0x9e>
    25a6:	61 81       	ldd	r22, Z+1	; 0x01
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	01 f1       	breq	.+64     	; 0x25ec <__fpcmp_parts_f+0x8a>
    25ac:	11 96       	adiw	r26, 0x01	; 1
    25ae:	8c 91       	ld	r24, X
    25b0:	11 97       	sbiw	r26, 0x01	; 1
    25b2:	68 17       	cp	r22, r24
    25b4:	d9 f4       	brne	.+54     	; 0x25ec <__fpcmp_parts_f+0x8a>
    25b6:	22 81       	ldd	r18, Z+2	; 0x02
    25b8:	33 81       	ldd	r19, Z+3	; 0x03
    25ba:	12 96       	adiw	r26, 0x02	; 2
    25bc:	8d 91       	ld	r24, X+
    25be:	9c 91       	ld	r25, X
    25c0:	13 97       	sbiw	r26, 0x03	; 3
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	94 f0       	brlt	.+36     	; 0x25ec <__fpcmp_parts_f+0x8a>
    25c8:	28 17       	cp	r18, r24
    25ca:	39 07       	cpc	r19, r25
    25cc:	bc f0       	brlt	.+46     	; 0x25fc <__fpcmp_parts_f+0x9a>
    25ce:	24 81       	ldd	r18, Z+4	; 0x04
    25d0:	35 81       	ldd	r19, Z+5	; 0x05
    25d2:	46 81       	ldd	r20, Z+6	; 0x06
    25d4:	57 81       	ldd	r21, Z+7	; 0x07
    25d6:	14 96       	adiw	r26, 0x04	; 4
    25d8:	8d 91       	ld	r24, X+
    25da:	9d 91       	ld	r25, X+
    25dc:	0d 90       	ld	r0, X+
    25de:	bc 91       	ld	r27, X
    25e0:	a0 2d       	mov	r26, r0
    25e2:	82 17       	cp	r24, r18
    25e4:	93 07       	cpc	r25, r19
    25e6:	a4 07       	cpc	r26, r20
    25e8:	b5 07       	cpc	r27, r21
    25ea:	18 f4       	brcc	.+6      	; 0x25f2 <__fpcmp_parts_f+0x90>
    25ec:	66 23       	and	r22, r22
    25ee:	41 f0       	breq	.+16     	; 0x2600 <__fpcmp_parts_f+0x9e>
    25f0:	0d c0       	rjmp	.+26     	; 0x260c <__fpcmp_parts_f+0xaa>
    25f2:	28 17       	cp	r18, r24
    25f4:	39 07       	cpc	r19, r25
    25f6:	4a 07       	cpc	r20, r26
    25f8:	5b 07       	cpc	r21, r27
    25fa:	28 f4       	brcc	.+10     	; 0x2606 <__fpcmp_parts_f+0xa4>
    25fc:	66 23       	and	r22, r22
    25fe:	31 f0       	breq	.+12     	; 0x260c <__fpcmp_parts_f+0xaa>
    2600:	21 e0       	ldi	r18, 0x01	; 1
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	05 c0       	rjmp	.+10     	; 0x2610 <__fpcmp_parts_f+0xae>
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <__fpcmp_parts_f+0xae>
    260c:	2f ef       	ldi	r18, 0xFF	; 255
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	c9 01       	movw	r24, r18
    2612:	08 95       	ret

00002614 <__mulsi3>:
    2614:	62 9f       	mul	r22, r18
    2616:	d0 01       	movw	r26, r0
    2618:	73 9f       	mul	r23, r19
    261a:	f0 01       	movw	r30, r0
    261c:	82 9f       	mul	r24, r18
    261e:	e0 0d       	add	r30, r0
    2620:	f1 1d       	adc	r31, r1
    2622:	64 9f       	mul	r22, r20
    2624:	e0 0d       	add	r30, r0
    2626:	f1 1d       	adc	r31, r1
    2628:	92 9f       	mul	r25, r18
    262a:	f0 0d       	add	r31, r0
    262c:	83 9f       	mul	r24, r19
    262e:	f0 0d       	add	r31, r0
    2630:	74 9f       	mul	r23, r20
    2632:	f0 0d       	add	r31, r0
    2634:	65 9f       	mul	r22, r21
    2636:	f0 0d       	add	r31, r0
    2638:	99 27       	eor	r25, r25
    263a:	72 9f       	mul	r23, r18
    263c:	b0 0d       	add	r27, r0
    263e:	e1 1d       	adc	r30, r1
    2640:	f9 1f       	adc	r31, r25
    2642:	63 9f       	mul	r22, r19
    2644:	b0 0d       	add	r27, r0
    2646:	e1 1d       	adc	r30, r1
    2648:	f9 1f       	adc	r31, r25
    264a:	bd 01       	movw	r22, r26
    264c:	cf 01       	movw	r24, r30
    264e:	11 24       	eor	r1, r1
    2650:	08 95       	ret

00002652 <__udivmodhi4>:
    2652:	aa 1b       	sub	r26, r26
    2654:	bb 1b       	sub	r27, r27
    2656:	51 e1       	ldi	r21, 0x11	; 17
    2658:	07 c0       	rjmp	.+14     	; 0x2668 <__udivmodhi4_ep>

0000265a <__udivmodhi4_loop>:
    265a:	aa 1f       	adc	r26, r26
    265c:	bb 1f       	adc	r27, r27
    265e:	a6 17       	cp	r26, r22
    2660:	b7 07       	cpc	r27, r23
    2662:	10 f0       	brcs	.+4      	; 0x2668 <__udivmodhi4_ep>
    2664:	a6 1b       	sub	r26, r22
    2666:	b7 0b       	sbc	r27, r23

00002668 <__udivmodhi4_ep>:
    2668:	88 1f       	adc	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	5a 95       	dec	r21
    266e:	a9 f7       	brne	.-22     	; 0x265a <__udivmodhi4_loop>
    2670:	80 95       	com	r24
    2672:	90 95       	com	r25
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	08 95       	ret

0000267a <__divmodhi4>:
    267a:	97 fb       	bst	r25, 7
    267c:	09 2e       	mov	r0, r25
    267e:	07 26       	eor	r0, r23
    2680:	0a d0       	rcall	.+20     	; 0x2696 <__divmodhi4_neg1>
    2682:	77 fd       	sbrc	r23, 7
    2684:	04 d0       	rcall	.+8      	; 0x268e <__divmodhi4_neg2>
    2686:	e5 df       	rcall	.-54     	; 0x2652 <__udivmodhi4>
    2688:	06 d0       	rcall	.+12     	; 0x2696 <__divmodhi4_neg1>
    268a:	00 20       	and	r0, r0
    268c:	1a f4       	brpl	.+6      	; 0x2694 <__divmodhi4_exit>

0000268e <__divmodhi4_neg2>:
    268e:	70 95       	com	r23
    2690:	61 95       	neg	r22
    2692:	7f 4f       	sbci	r23, 0xFF	; 255

00002694 <__divmodhi4_exit>:
    2694:	08 95       	ret

00002696 <__divmodhi4_neg1>:
    2696:	f6 f7       	brtc	.-4      	; 0x2694 <__divmodhi4_exit>
    2698:	90 95       	com	r25
    269a:	81 95       	neg	r24
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	08 95       	ret

000026a0 <__udivmodsi4>:
    26a0:	a1 e2       	ldi	r26, 0x21	; 33
    26a2:	1a 2e       	mov	r1, r26
    26a4:	aa 1b       	sub	r26, r26
    26a6:	bb 1b       	sub	r27, r27
    26a8:	fd 01       	movw	r30, r26
    26aa:	0d c0       	rjmp	.+26     	; 0x26c6 <__udivmodsi4_ep>

000026ac <__udivmodsi4_loop>:
    26ac:	aa 1f       	adc	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	ee 1f       	adc	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	a2 17       	cp	r26, r18
    26b6:	b3 07       	cpc	r27, r19
    26b8:	e4 07       	cpc	r30, r20
    26ba:	f5 07       	cpc	r31, r21
    26bc:	20 f0       	brcs	.+8      	; 0x26c6 <__udivmodsi4_ep>
    26be:	a2 1b       	sub	r26, r18
    26c0:	b3 0b       	sbc	r27, r19
    26c2:	e4 0b       	sbc	r30, r20
    26c4:	f5 0b       	sbc	r31, r21

000026c6 <__udivmodsi4_ep>:
    26c6:	66 1f       	adc	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	1a 94       	dec	r1
    26d0:	69 f7       	brne	.-38     	; 0x26ac <__udivmodsi4_loop>
    26d2:	60 95       	com	r22
    26d4:	70 95       	com	r23
    26d6:	80 95       	com	r24
    26d8:	90 95       	com	r25
    26da:	9b 01       	movw	r18, r22
    26dc:	ac 01       	movw	r20, r24
    26de:	bd 01       	movw	r22, r26
    26e0:	cf 01       	movw	r24, r30
    26e2:	08 95       	ret

000026e4 <__prologue_saves__>:
    26e4:	2f 92       	push	r2
    26e6:	3f 92       	push	r3
    26e8:	4f 92       	push	r4
    26ea:	5f 92       	push	r5
    26ec:	6f 92       	push	r6
    26ee:	7f 92       	push	r7
    26f0:	8f 92       	push	r8
    26f2:	9f 92       	push	r9
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	ca 1b       	sub	r28, r26
    270e:	db 0b       	sbc	r29, r27
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	09 94       	ijmp

00002716 <__epilogue_restores__>:
    2716:	2a 88       	ldd	r2, Y+18	; 0x12
    2718:	39 88       	ldd	r3, Y+17	; 0x11
    271a:	48 88       	ldd	r4, Y+16	; 0x10
    271c:	5f 84       	ldd	r5, Y+15	; 0x0f
    271e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2720:	7d 84       	ldd	r7, Y+13	; 0x0d
    2722:	8c 84       	ldd	r8, Y+12	; 0x0c
    2724:	9b 84       	ldd	r9, Y+11	; 0x0b
    2726:	aa 84       	ldd	r10, Y+10	; 0x0a
    2728:	b9 84       	ldd	r11, Y+9	; 0x09
    272a:	c8 84       	ldd	r12, Y+8	; 0x08
    272c:	df 80       	ldd	r13, Y+7	; 0x07
    272e:	ee 80       	ldd	r14, Y+6	; 0x06
    2730:	fd 80       	ldd	r15, Y+5	; 0x05
    2732:	0c 81       	ldd	r16, Y+4	; 0x04
    2734:	1b 81       	ldd	r17, Y+3	; 0x03
    2736:	aa 81       	ldd	r26, Y+2	; 0x02
    2738:	b9 81       	ldd	r27, Y+1	; 0x01
    273a:	ce 0f       	add	r28, r30
    273c:	d1 1d       	adc	r29, r1
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	ed 01       	movw	r28, r26
    2744:	08 95       	ret

00002746 <_exit>:
    2746:	f8 94       	cli

00002748 <__stop_program>:
    2748:	ff cf       	rjmp	.-2      	; 0x2748 <__stop_program>
