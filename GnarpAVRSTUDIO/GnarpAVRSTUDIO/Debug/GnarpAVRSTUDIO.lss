
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00802000  00002d48  00002ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000225  0080215c  0080215c  00002f38  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f8  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b7e  00000000  00000000  00003981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000665f  00000000  00000000  000044ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000205a  00000000  00000000  0000ab5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b7a  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000850  00000000  00000000  00010734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019e7  00000000  00000000  00010f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002667  00000000  00000000  0001296b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000ce4  00000000  00000000  00014fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  00015cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e8 e4       	ldi	r30, 0x48	; 72
     18c:	fd e2       	ldi	r31, 0x2D	; 45
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 35       	cpi	r26, 0x5C	; 92
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e5       	ldi	r26, 0x5C	; 92
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 38       	cpi	r26, 0x81	; 129
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 2d 0a 	call	0x145a	; 0x145a <main>
     1ae:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_play_list>:
*/
PlayList* get_play_list(){
	//return global play list pointer for use with all functions
	
	return &global_play_list;
}
     1b6:	8c e5       	ldi	r24, 0x5C	; 92
     1b8:	91 e2       	ldi	r25, 0x21	; 33
     1ba:	08 95       	ret

000001bc <initialize_play_list>:

void initialize_play_list(PlayList* play_list){
     1bc:	fc 01       	movw	r30, r24
     1be:	dc 01       	movw	r26, r24
     1c0:	13 96       	adiw	r26, 0x03	; 3
     1c2:	80 e3       	ldi	r24, 0x30	; 48
	//reset the play list note pointers, counters, and flags
	
	uint8_t i;
	for (i = 0; i < MAX_PLAY_NOTES; i++)
	    play_list->notes[i] = NULL;
     1c4:	1d 92       	st	X+, r1
     1c6:	1d 92       	st	X+, r1
     1c8:	81 50       	subi	r24, 0x01	; 1

void initialize_play_list(PlayList* play_list){
	//reset the play list note pointers, counters, and flags
	
	uint8_t i;
	for (i = 0; i < MAX_PLAY_NOTES; i++)
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <initialize_play_list+0x8>
	    play_list->notes[i] = NULL;
	play_list->count = 0;
     1cc:	10 82       	st	Z, r1
	play_list->play_index = 0;
     1ce:	11 82       	std	Z+1, r1	; 0x01
	play_list->play_status = 0;
     1d0:	12 82       	std	Z+2, r1	; 0x02
}
     1d2:	08 95       	ret

000001d4 <build_play_list>:
	
    initialize_note_list();
	initialize_play_list(get_play_list());
}

void build_play_list(PlayList* play_list, NoteList* note_list){
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	8c 01       	movw	r16, r24
     1e8:	eb 01       	movw	r28, r22
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
    Note* current_note;
	
	uint8_t note_list_size = note_list->count;
     1ea:	b8 80       	ld	r11, Y
	
    uint8_t i;
    uint8_t mirror = 0;


    switch(get_pot_value(0, 0, 4)){
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	44 e0       	ldi	r20, 0x04	; 4
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	0e 94 c0 01 	call	0x380	; 0x380 <get_pot_value>
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	91 05       	cpc	r25, r1
     1fe:	d9 f1       	breq	.+118    	; 0x276 <build_play_list+0xa2>
     200:	83 30       	cpi	r24, 0x03	; 3
     202:	91 05       	cpc	r25, r1
     204:	38 f4       	brcc	.+14     	; 0x214 <build_play_list+0x40>
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	71 f0       	breq	.+28     	; 0x226 <build_play_list+0x52>
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	91 05       	cpc	r25, r1
     20e:	09 f0       	breq	.+2      	; 0x212 <build_play_list+0x3e>
     210:	7c c0       	rjmp	.+248    	; 0x30a <build_play_list+0x136>
     212:	1d c0       	rjmp	.+58     	; 0x24e <build_play_list+0x7a>
     214:	83 30       	cpi	r24, 0x03	; 3
     216:	91 05       	cpc	r25, r1
     218:	09 f4       	brne	.+2      	; 0x21c <build_play_list+0x48>
     21a:	41 c0       	rjmp	.+130    	; 0x29e <build_play_list+0xca>
     21c:	84 30       	cpi	r24, 0x04	; 4
     21e:	91 05       	cpc	r25, r1
     220:	09 f0       	breq	.+2      	; 0x224 <build_play_list+0x50>
     222:	73 c0       	rjmp	.+230    	; 0x30a <build_play_list+0x136>
     224:	50 c0       	rjmp	.+160    	; 0x2c6 <build_play_list+0xf2>
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     226:	aa 81       	ldd	r26, Y+2	; 0x02
     228:	bb 81       	ldd	r27, Y+3	; 0x03

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     22a:	80 e0       	ldi	r24, 0x00	; 0


    switch(get_pot_value(0, 0, 4)){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     22c:	0d c0       	rjmp	.+26     	; 0x248 <build_play_list+0x74>
				play_list->notes[play_list_index++] = current_note;
     22e:	e8 2f       	mov	r30, r24
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	ee 0f       	add	r30, r30
     234:	ff 1f       	adc	r31, r31
     236:	e0 0f       	add	r30, r16
     238:	f1 1f       	adc	r31, r17
     23a:	a3 83       	std	Z+3, r26	; 0x03
     23c:	b4 83       	std	Z+4, r27	; 0x04
     23e:	8f 5f       	subi	r24, 0xFF	; 255


    switch(get_pot_value(0, 0, 4)){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     240:	13 96       	adiw	r26, 0x03	; 3
     242:	0d 90       	ld	r0, X+
     244:	bc 91       	ld	r27, X
     246:	a0 2d       	mov	r26, r0
     248:	10 97       	sbiw	r26, 0x00	; 0
     24a:	89 f7       	brne	.-30     	; 0x22e <build_play_list+0x5a>
     24c:	5f c0       	rjmp	.+190    	; 0x30c <build_play_list+0x138>
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     24e:	ac 81       	ldd	r26, Y+4	; 0x04
     250:	bd 81       	ldd	r27, Y+5	; 0x05

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     252:	80 e0       	ldi	r24, 0x00	; 0
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     254:	0d c0       	rjmp	.+26     	; 0x270 <build_play_list+0x9c>
                play_list->notes[play_list_index++] = current_note;
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	e0 0f       	add	r30, r16
     260:	f1 1f       	adc	r31, r17
     262:	a3 83       	std	Z+3, r26	; 0x03
     264:	b4 83       	std	Z+4, r27	; 0x04
     266:	8f 5f       	subi	r24, 0xFF	; 255
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     268:	15 96       	adiw	r26, 0x05	; 5
     26a:	0d 90       	ld	r0, X+
     26c:	bc 91       	ld	r27, X
     26e:	a0 2d       	mov	r26, r0
     270:	10 97       	sbiw	r26, 0x00	; 0
     272:	89 f7       	brne	.-30     	; 0x256 <build_play_list+0x82>
     274:	4b c0       	rjmp	.+150    	; 0x30c <build_play_list+0x138>
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     276:	ae 81       	ldd	r26, Y+6	; 0x06
     278:	bf 81       	ldd	r27, Y+7	; 0x07

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     27a:	80 e0       	ldi	r24, 0x00	; 0
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     27c:	0d c0       	rjmp	.+26     	; 0x298 <build_play_list+0xc4>
                play_list->notes[play_list_index++] = current_note;
     27e:	e8 2f       	mov	r30, r24
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e0 0f       	add	r30, r16
     288:	f1 1f       	adc	r31, r17
     28a:	a3 83       	std	Z+3, r26	; 0x03
     28c:	b4 83       	std	Z+4, r27	; 0x04
     28e:	8f 5f       	subi	r24, 0xFF	; 255
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     290:	17 96       	adiw	r26, 0x07	; 7
     292:	0d 90       	ld	r0, X+
     294:	bc 91       	ld	r27, X
     296:	a0 2d       	mov	r26, r0
     298:	10 97       	sbiw	r26, 0x00	; 0
     29a:	89 f7       	brne	.-30     	; 0x27e <build_play_list+0xaa>
     29c:	37 c0       	rjmp	.+110    	; 0x30c <build_play_list+0x138>
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     29e:	a8 85       	ldd	r26, Y+8	; 0x08
     2a0:	b9 85       	ldd	r27, Y+9	; 0x09

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <build_play_list+0xec>
                play_list->notes[play_list_index++] = current_note;
     2a6:	e8 2f       	mov	r30, r24
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	e0 0f       	add	r30, r16
     2b0:	f1 1f       	adc	r31, r17
     2b2:	a3 83       	std	Z+3, r26	; 0x03
     2b4:	b4 83       	std	Z+4, r27	; 0x04
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     2b8:	19 96       	adiw	r26, 0x09	; 9
     2ba:	0d 90       	ld	r0, X+
     2bc:	bc 91       	ld	r27, X
     2be:	a0 2d       	mov	r26, r0
     2c0:	10 97       	sbiw	r26, 0x00	; 0
     2c2:	89 f7       	brne	.-30     	; 0x2a6 <build_play_list+0xd2>
     2c4:	23 c0       	rjmp	.+70     	; 0x30c <build_play_list+0x138>
     2c6:	78 01       	movw	r14, r16
	
    uint8_t i;
    uint8_t mirror = 0;


    switch(get_pot_value(0, 0, 4)){
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	d8 2e       	mov	r13, r24
            break;

        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
                random_list_depth = rand() % note_list_size;
     2cc:	cc 24       	eor	r12, r12
     2ce:	0e 94 77 16 	call	0x2cee	; 0x2cee <rand>
     2d2:	6b 2d       	mov	r22, r11
     2d4:	7c 2d       	mov	r23, r12
     2d6:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
                current_note = note_list->head_pitch;
     2da:	ea 81       	ldd	r30, Y+2	; 0x02
     2dc:	fb 81       	ldd	r31, Y+3	; 0x03
                for(i = 0; i < random_list_depth; i++)
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <build_play_list+0x116>
                    current_note = current_note->next_note_by_pitch;
     2e2:	03 80       	ldd	r0, Z+3	; 0x03
     2e4:	f4 81       	ldd	r31, Z+4	; 0x04
     2e6:	e0 2d       	mov	r30, r0
        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
                random_list_depth = rand() % note_list_size;
                current_note = note_list->head_pitch;
                for(i = 0; i < random_list_depth; i++)
     2e8:	9f 5f       	subi	r25, 0xFF	; 255
     2ea:	98 17       	cp	r25, r24
     2ec:	d0 f3       	brcs	.-12     	; 0x2e2 <build_play_list+0x10e>
                    current_note = current_note->next_note_by_pitch;
                play_list->notes[play_list_index++] = current_note;
     2ee:	d7 01       	movw	r26, r14
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	ed 93       	st	X+, r30
     2f4:	fc 93       	st	X, r31
     2f6:	14 97       	sbiw	r26, 0x04	; 4
     2f8:	da 94       	dec	r13
     2fa:	e4 e0       	ldi	r30, 0x04	; 4
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ee 0e       	add	r14, r30
     300:	ff 1e       	adc	r15, r31
                play_list->notes[play_list_index++] = current_note;
            break;

        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
     302:	dd 20       	and	r13, r13
     304:	21 f7       	brne	.-56     	; 0x2ce <build_play_list+0xfa>
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	01 c0       	rjmp	.+2      	; 0x30c <build_play_list+0x138>

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     30a:	80 e0       	ldi	r24, 0x00	; 0
            }
            play_list_index = mirrored_length;
        }
    }

    play_list->count = play_list_index;
     30c:	d8 01       	movw	r26, r16
     30e:	8c 93       	st	X, r24

    return;
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	bf 90       	pop	r11
     322:	08 95       	ret

00000324 <input_note_on>:


void input_note_on(PlayList* play_list, uint8_t pitch, uint8_t velocity){
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	00 d0       	rcall	.+0      	; 0x32e <input_note_on+0xa>
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
	//adds the new note to the note list (if it's not a duplicate)
	//rebuilds play list and starts playing if it's the first note in the list
	
	bool first_note = 0;
	
	if (get_note_list()->count == 0)        //check for empty note list
     332:	4a 83       	std	Y+2, r20	; 0x02
     334:	69 83       	std	Y+1, r22	; 0x01
     336:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_note_list>
     33a:	fc 01       	movw	r30, r24
     33c:	00 81       	ld	r16, Z
     33e:	11 81       	ldd	r17, Z+1	; 0x01
	    first_note = 1;
	
	add_note_in_full_order(get_note_list(),pitch,velocity);     //add note into note list
     340:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_note_list>
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	4a 81       	ldd	r20, Y+2	; 0x02
     348:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <add_note_in_full_order>
	
	if (first_note){         //if it's the first note in the note list, build the play list and start playing by setting the play interrupt flag
     34c:	01 15       	cp	r16, r1
     34e:	11 05       	cpc	r17, r1
     350:	69 f4       	brne	.+26     	; 0x36c <input_note_on+0x48>
	    build_play_list(get_play_list(),get_note_list());
     352:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_note_list>
     356:	bc 01       	movw	r22, r24
     358:	8c e5       	ldi	r24, 0x5C	; 92
     35a:	91 e2       	ldi	r25, 0x21	; 33
     35c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <build_play_list>
		TCC0.INTFLAGS &= 0x20;
     360:	80 91 0c 08 	lds	r24, 0x080C
     364:	80 72       	andi	r24, 0x20	; 32
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	f8 e0       	ldi	r31, 0x08	; 8
     36a:	84 87       	std	Z+12, r24	; 0x0c
	}		
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	08 95       	ret

0000037a <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     37a:	80 91 d5 21 	lds	r24, 0x21D5
     37e:	08 95       	ret

00000380 <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     380:	2f 92       	push	r2
     382:	3f 92       	push	r3
     384:	4f 92       	push	r4
     386:	5f 92       	push	r5
     388:	6f 92       	push	r6
     38a:	7f 92       	push	r7
     38c:	8f 92       	push	r8
     38e:	9f 92       	push	r9
     390:	af 92       	push	r10
     392:	bf 92       	push	r11
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <get_pot_value+0x26>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	6b 01       	movw	r12, r22
     3ac:	2a 01       	movw	r4, r20
    //outmax: maximum value to output
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
     3ae:	e8 2f       	mov	r30, r24
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e5 53       	subi	r30, 0x35	; 53
     3b8:	fe 4d       	sbci	r31, 0xDE	; 222
     3ba:	60 81       	ld	r22, Z
     3bc:	71 81       	ldd	r23, Z+1	; 0x01
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 38 13 	call	0x2670	; 0x2670 <__floatunsisf>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	42 e7       	ldi	r20, 0x72	; 114
     3cc:	55 e4       	ldi	r21, 0x45	; 69
     3ce:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divsf3>
     3d2:	7b 01       	movw	r14, r22
     3d4:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin + 1) + outmin;
     3d6:	b2 01       	movw	r22, r4
     3d8:	6c 19       	sub	r22, r12
     3da:	7d 09       	sbc	r23, r13
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 38 13 	call	0x2670	; 0x2670 <__floatunsisf>
     3e8:	9b 01       	movw	r18, r22
     3ea:	ac 01       	movw	r20, r24
     3ec:	c8 01       	movw	r24, r16
     3ee:	b7 01       	movw	r22, r14
     3f0:	0e 94 ae 10 	call	0x215c	; 0x215c <__mulsf3>
     3f4:	7b 01       	movw	r14, r22
     3f6:	8c 01       	movw	r16, r24
     3f8:	b6 01       	movw	r22, r12
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 38 13 	call	0x2670	; 0x2670 <__floatunsisf>
     402:	d6 2e       	mov	r13, r22
     404:	c7 2e       	mov	r12, r23
     406:	b8 2e       	mov	r11, r24
     408:	a9 2e       	mov	r10, r25
     40a:	16 01       	movw	r2, r12
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	9a 83       	std	Y+2, r25	; 0x02
     410:	6e 2d       	mov	r22, r14
     412:	7f 2d       	mov	r23, r15
     414:	80 2f       	mov	r24, r16
     416:	91 2f       	mov	r25, r17
     418:	d6 01       	movw	r26, r12
     41a:	f5 01       	movw	r30, r10
     41c:	2b 2f       	mov	r18, r27
     41e:	3a 2f       	mov	r19, r26
     420:	4f 2f       	mov	r20, r31
     422:	5e 2f       	mov	r21, r30
     424:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__addsf3>
     428:	96 2e       	mov	r9, r22
     42a:	87 2e       	mov	r8, r23
     42c:	78 2e       	mov	r7, r24
     42e:	69 2e       	mov	r6, r25
	
	if (temp > outmax)
     430:	b2 01       	movw	r22, r4
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 38 13 	call	0x2670	; 0x2670 <__floatunsisf>
     43a:	f6 2e       	mov	r15, r22
     43c:	07 2f       	mov	r16, r23
     43e:	18 2f       	mov	r17, r24
     440:	e9 2e       	mov	r14, r25
     442:	a4 01       	movw	r20, r8
     444:	93 01       	movw	r18, r6
     446:	65 2f       	mov	r22, r21
     448:	74 2f       	mov	r23, r20
     44a:	83 2f       	mov	r24, r19
     44c:	92 2f       	mov	r25, r18
     44e:	2f 2d       	mov	r18, r15
     450:	30 2f       	mov	r19, r16
     452:	41 2f       	mov	r20, r17
     454:	5e 2d       	mov	r21, r14
     456:	0e 94 56 12 	call	0x24ac	; 0x24ac <__gtsf2>
     45a:	18 16       	cp	r1, r24
     45c:	24 f0       	brlt	.+8      	; 0x466 <get_pot_value+0xe6>
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin + 1) + outmin;
     45e:	f9 2c       	mov	r15, r9
     460:	08 2d       	mov	r16, r8
     462:	17 2d       	mov	r17, r7
     464:	e6 2c       	mov	r14, r6
	
	if (temp > outmax)
		temp = outmax;
		
	if (temp < outmin)
     466:	6f 2d       	mov	r22, r15
     468:	70 2f       	mov	r23, r16
     46a:	81 2f       	mov	r24, r17
     46c:	9e 2d       	mov	r25, r14
     46e:	d6 01       	movw	r26, r12
     470:	f5 01       	movw	r30, r10
     472:	2b 2f       	mov	r18, r27
     474:	3c 2d       	mov	r19, r12
     476:	4f 2f       	mov	r20, r31
     478:	5a 2d       	mov	r21, r10
     47a:	0e 94 b6 12 	call	0x256c	; 0x256c <__ltsf2>
     47e:	87 fd       	sbrc	r24, 7
     480:	04 c0       	rjmp	.+8      	; 0x48a <get_pot_value+0x10a>
     482:	3f 2c       	mov	r3, r15
     484:	20 2e       	mov	r2, r16
     486:	19 83       	std	Y+1, r17	; 0x01
     488:	ea 82       	std	Y+2, r14	; 0x02
		temp = outmin;
    
    return (uint16_t) temp;
     48a:	a1 01       	movw	r20, r2
     48c:	39 81       	ldd	r19, Y+1	; 0x01
     48e:	2a 81       	ldd	r18, Y+2	; 0x02
     490:	65 2f       	mov	r22, r21
     492:	72 2d       	mov	r23, r2
     494:	83 2f       	mov	r24, r19
     496:	92 2f       	mov	r25, r18
     498:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fixunssfsi>
}
     49c:	cb 01       	movw	r24, r22
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	7f 90       	pop	r7
     4bc:	6f 90       	pop	r6
     4be:	5f 90       	pop	r5
     4c0:	4f 90       	pop	r4
     4c2:	3f 90       	pop	r3
     4c4:	2f 90       	pop	r2
     4c6:	08 95       	ret

000004c8 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	fc 01       	movw	r30, r24
     4e2:	22 e0       	ldi	r18, 0x02	; 2
     4e4:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     4e6:	ca e0       	ldi	r28, 0x0A	; 10
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     4ea:	73 e0       	ldi	r23, 0x03	; 3
     4ec:	c7 2e       	mov	r12, r23
     4ee:	d1 2c       	mov	r13, r1
     4f0:	68 e0       	ldi	r22, 0x08	; 8
     4f2:	a6 2e       	mov	r10, r22
     4f4:	b1 2c       	mov	r11, r1
     4f6:	00 e6       	ldi	r16, 0x60	; 96
     4f8:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	e5 2e       	mov	r14, r21
     4fe:	56 e0       	ldi	r21, 0x06	; 6
     500:	f5 2e       	mov	r15, r21
     502:	40 ef       	ldi	r20, 0xF0	; 240
     504:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     506:	98 e3       	ldi	r25, 0x38	; 56
     508:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     50a:	cf 01       	movw	r24, r30
     50c:	be 01       	movw	r22, r28
     50e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__udivmodhi4>
     512:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     514:	30 97       	sbiw	r30, 0x00	; 0
     516:	19 f4       	brne	.+6      	; 0x51e <set_seven_segment_LEDs+0x56>
     518:	22 30       	cpi	r18, 0x02	; 2
     51a:	09 f0       	breq	.+2      	; 0x51e <set_seven_segment_LEDs+0x56>
            digit = 10;
     51c:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     51e:	c9 01       	movw	r24, r18
     520:	b6 01       	movw	r22, r12
     522:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
     526:	b5 01       	movw	r22, r10
     528:	02 c0       	rjmp	.+4      	; 0x52e <set_seven_segment_LEDs+0x66>
     52a:	66 0f       	add	r22, r22
     52c:	77 1f       	adc	r23, r23
     52e:	8a 95       	dec	r24
     530:	e2 f7       	brpl	.-8      	; 0x52a <set_seven_segment_LEDs+0x62>
     532:	d8 01       	movw	r26, r16
     534:	16 96       	adiw	r26, 0x06	; 6
     536:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     538:	d7 01       	movw	r26, r14
     53a:	16 96       	adiw	r26, 0x06	; 6
     53c:	9c 92       	st	X, r9
     53e:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     540:	42 95       	swap	r20
     542:	40 7f       	andi	r20, 0xF0	; 240
     544:	15 96       	adiw	r26, 0x05	; 5
     546:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     548:	d8 01       	movw	r26, r16
     54a:	15 96       	adiw	r26, 0x05	; 5
     54c:	8c 92       	st	X, r8
     54e:	15 97       	sbiw	r26, 0x05	; 5
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     554:	25 30       	cpi	r18, 0x05	; 5
     556:	31 05       	cpc	r19, r1
     558:	31 f0       	breq	.+12     	; 0x566 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     55a:	cf 01       	movw	r24, r30
     55c:	be 01       	movw	r22, r28
     55e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__udivmodhi4>
     562:	fb 01       	movw	r30, r22
     564:	d2 cf       	rjmp	.-92     	; 0x50a <set_seven_segment_LEDs+0x42>
    }
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     580:	88 23       	and	r24, r24
     582:	21 f0       	breq	.+8      	; 0x58c <set_LEDs_on+0xc>
		PORTC.OUTCLR = 0x08;
     584:	88 e0       	ldi	r24, 0x08	; 8
     586:	e0 e4       	ldi	r30, 0x40	; 64
     588:	f6 e0       	ldi	r31, 0x06	; 6
     58a:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_0)
     58c:	66 23       	and	r22, r22
     58e:	21 f0       	breq	.+8      	; 0x598 <set_LEDs_on+0x18>
		PORTD.OUTSET = 0x04;
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	e0 e6       	ldi	r30, 0x60	; 96
     594:	f6 e0       	ldi	r31, 0x06	; 6
     596:	85 83       	std	Z+5, r24	; 0x05
		
	if (decimal_point_1)
     598:	44 23       	and	r20, r20
     59a:	21 f0       	breq	.+8      	; 0x5a4 <set_LEDs_on+0x24>
		PORTD.OUTSET = 0x01;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	e0 e6       	ldi	r30, 0x60	; 96
     5a0:	f6 e0       	ldi	r31, 0x06	; 6
     5a2:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_2)
     5a4:	22 23       	and	r18, r18
     5a6:	21 f0       	breq	.+8      	; 0x5b0 <set_LEDs_on+0x30>
		PORTD.OUTSET = 0x02;
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	e0 e6       	ldi	r30, 0x60	; 96
     5ac:	f6 e0       	ldi	r31, 0x06	; 6
     5ae:	85 83       	std	Z+5, r24	; 0x05
     5b0:	08 95       	ret

000005b2 <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     5b2:	88 23       	and	r24, r24
     5b4:	21 f0       	breq	.+8      	; 0x5be <set_LEDs_off+0xc>
		PORTC.OUTSET = 0x08;
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	e0 e4       	ldi	r30, 0x40	; 64
     5ba:	f6 e0       	ldi	r31, 0x06	; 6
     5bc:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_0)
     5be:	66 23       	and	r22, r22
     5c0:	21 f0       	breq	.+8      	; 0x5ca <set_LEDs_off+0x18>
		PORTD.OUTCLR = 0x04;
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	e0 e6       	ldi	r30, 0x60	; 96
     5c6:	f6 e0       	ldi	r31, 0x06	; 6
     5c8:	86 83       	std	Z+6, r24	; 0x06
		
	if (decimal_point_1)
     5ca:	44 23       	and	r20, r20
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <set_LEDs_off+0x24>
		PORTD.OUTCLR = 0x01;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	e0 e6       	ldi	r30, 0x60	; 96
     5d2:	f6 e0       	ldi	r31, 0x06	; 6
     5d4:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_2)
     5d6:	22 23       	and	r18, r18
     5d8:	21 f0       	breq	.+8      	; 0x5e2 <set_LEDs_off+0x30>
		PORTD.OUTCLR = 0x02;
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	e0 e6       	ldi	r30, 0x60	; 96
     5de:	f6 e0       	ldi	r31, 0x06	; 6
     5e0:	86 83       	std	Z+6, r24	; 0x06
     5e2:	08 95       	ret

000005e4 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     5e4:	80 91 c3 21 	lds	r24, 0x21C3
     5e8:	08 95       	ret

000005ea <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     5ea:	80 91 c4 21 	lds	r24, 0x21C4
     5ee:	08 95       	ret

000005f0 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     5f0:	80 91 c1 21 	lds	r24, 0x21C1
     5f4:	08 95       	ret

000005f6 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     5f6:	80 91 c2 21 	lds	r24, 0x21C2
     5fa:	08 95       	ret

000005fc <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     5fc:	80 91 bf 21 	lds	r24, 0x21BF
     600:	08 95       	ret

00000602 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     602:	80 91 c0 21 	lds	r24, 0x21C0
     606:	08 95       	ret

00000608 <initialize_hardware>:

void initialize_hardware(){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     60c:	e0 e4       	ldi	r30, 0x40	; 64
     60e:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     610:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     612:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     614:	c0 e5       	ldi	r28, 0x50	; 80
     616:	d0 e0       	ldi	r29, 0x00	; 0
     618:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     61a:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     61c:	a0 e5       	ldi	r26, 0x50	; 80
     61e:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     620:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     622:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     624:	98 ed       	ldi	r25, 0xD8	; 216
     626:	15 c0       	rjmp	.+42     	; 0x652 <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     628:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     62a:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     62c:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     62e:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     632:	70 91 51 00 	lds	r23, 0x0051
     636:	73 ff       	sbrs	r23, 3
     638:	fc cf       	rjmp	.-8      	; 0x632 <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     63a:	15 96       	adiw	r26, 0x05	; 5
     63c:	3c 93       	st	X, r19
     63e:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     640:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     644:	70 91 51 00 	lds	r23, 0x0051
     648:	74 ff       	sbrs	r23, 4
     64a:	fc cf       	rjmp	.-8      	; 0x644 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     64c:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     64e:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     652:	70 91 40 00 	lds	r23, 0x0040
     656:	74 30       	cpi	r23, 0x04	; 4
     658:	39 f7       	brne	.-50     	; 0x628 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     65a:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     65c:	a0 e6       	ldi	r26, 0x60	; 96
     65e:	b6 e0       	ldi	r27, 0x06	; 6
     660:	80 e8       	ldi	r24, 0x80	; 128
     662:	15 96       	adiw	r26, 0x05	; 5
     664:	8c 93       	st	X, r24
     666:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     668:	90 e4       	ldi	r25, 0x40	; 64
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	9c 93       	st	X, r25
     66e:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	8c 93       	st	X, r24
     674:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     676:	e0 eb       	ldi	r30, 0xB0	; 176
     678:	f9 e0       	ldi	r31, 0x09	; 9
     67a:	88 e1       	ldi	r24, 0x18	; 24
     67c:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     67e:	90 e2       	ldi	r25, 0x20	; 32
     680:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     682:	33 e0       	ldi	r19, 0x03	; 3
     684:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     686:	8f e2       	ldi	r24, 0x2F	; 47
     688:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     68a:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     68c:	80 91 a2 00 	lds	r24, 0x00A2
     690:	87 68       	ori	r24, 0x87	; 135
     692:	e0 ea       	ldi	r30, 0xA0	; 160
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     698:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d6 e0       	ldi	r29, 0x06	; 6
     69e:	89 ef       	ldi	r24, 0xF9	; 249
     6a0:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f2 e0       	ldi	r31, 0x02	; 2
     6a6:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6aa:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6ac:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6ae:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6b4:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6b6:	80 91 00 02 	lds	r24, 0x0200
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     6c0:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     6c2:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     6c4:	12 a2       	std	Z+34, r1	; 0x22
	if (decimal_point_2)
		PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     6c6:	40 e2       	ldi	r20, 0x20	; 32
     6c8:	56 e0       	ldi	r21, 0x06	; 6
     6ca:	8c e0       	ldi	r24, 0x0C	; 12
     6cc:	fa 01       	movw	r30, r20
     6ce:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     6d0:	28 e0       	ldi	r18, 0x08	; 8
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	96 e0       	ldi	r25, 0x06	; 6
     6d6:	fc 01       	movw	r30, r24
     6d8:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     6da:	fa 01       	movw	r30, r20
     6dc:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     6de:	86 e0       	ldi	r24, 0x06	; 6
     6e0:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     6e2:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     6e4:	e0 e4       	ldi	r30, 0x40	; 64
     6e6:	f6 e0       	ldi	r31, 0x06	; 6
     6e8:	88 ef       	ldi	r24, 0xF8	; 248
     6ea:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     6ec:	8f e3       	ldi	r24, 0x3F	; 63
     6ee:	11 96       	adiw	r26, 0x01	; 1
     6f0:	8c 93       	st	X, r24
     6f2:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     6f4:	88 e3       	ldi	r24, 0x38	; 56
     6f6:	15 96       	adiw	r26, 0x05	; 5
     6f8:	8c 93       	st	X, r24
     6fa:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     6fc:	90 ef       	ldi	r25, 0xF0	; 240
     6fe:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     700:	16 96       	adiw	r26, 0x06	; 6
     702:	8c 93       	st	X, r24
     704:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     706:	87 e0       	ldi	r24, 0x07	; 7
     708:	16 96       	adiw	r26, 0x06	; 6
     70a:	8c 93       	st	X, r24
     70c:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     70e:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <read_hardware>:

void read_hardware(){
     716:	bf 92       	push	r11
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	0f 92       	push	r0
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     72e:	80 91 88 06 	lds	r24, 0x0688
     732:	86 95       	lsr	r24
     734:	86 95       	lsr	r24
     736:	86 95       	lsr	r24
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	09 f0       	breq	.+2      	; 0x73e <read_hardware+0x28>
     73c:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     73e:	80 91 28 06 	lds	r24, 0x0628
     742:	86 95       	lsr	r24
     744:	86 95       	lsr	r24
     746:	80 fd       	sbrc	r24, 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <read_hardware+0x38>
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	01 c0       	rjmp	.+2      	; 0x750 <read_hardware+0x3a>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	c8 2e       	mov	r12, r24
     752:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     754:	80 91 28 06 	lds	r24, 0x0628
     758:	86 95       	lsr	r24
     75a:	86 95       	lsr	r24
     75c:	86 95       	lsr	r24
     75e:	80 fd       	sbrc	r24, 0
     760:	02 c0       	rjmp	.+4      	; 0x766 <read_hardware+0x50>
     762:	84 e0       	ldi	r24, 0x04	; 4
     764:	01 c0       	rjmp	.+2      	; 0x768 <read_hardware+0x52>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	c8 2a       	or	r12, r24
     76a:	c0 92 ca 21 	sts	0x21CA, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     76e:	60 91 c9 21 	lds	r22, 0x21C9
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	d0 90 c8 21 	lds	r13, 0x21C8
     778:	e5 ec       	ldi	r30, 0xC5	; 197
     77a:	f1 e2       	ldi	r31, 0x21	; 33
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	4c 2d       	mov	r20, r12
     782:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     788:	b8 2e       	mov	r11, r24
     78a:	8a 01       	movw	r16, r20
     78c:	08 2e       	mov	r0, r24
     78e:	02 c0       	rjmp	.+4      	; 0x794 <read_hardware+0x7e>
     790:	15 95       	asr	r17
     792:	07 95       	ror	r16
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <read_hardware+0x7a>
     798:	db 01       	movw	r26, r22
     79a:	08 2e       	mov	r0, r24
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <read_hardware+0x8c>
     79e:	b5 95       	asr	r27
     7a0:	a7 95       	ror	r26
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <read_hardware+0x88>
     7a6:	0a 17       	cp	r16, r26
     7a8:	1b 07       	cpc	r17, r27
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     7ac:	a0 81       	ld	r26, Z
     7ae:	af 5f       	subi	r26, 0xFF	; 255
     7b0:	a0 83       	st	Z, r26
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     7b4:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     7b6:	a0 81       	ld	r26, Z
     7b8:	a9 30       	cpi	r26, 0x09	; 9
     7ba:	60 f0       	brcs	.+24     	; 0x7d4 <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     7bc:	d9 01       	movw	r26, r18
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <read_hardware+0xae>
     7c0:	aa 0f       	add	r26, r26
     7c2:	bb 1f       	adc	r27, r27
     7c4:	ba 94       	dec	r11
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <read_hardware+0xaa>
     7c8:	ba 2f       	mov	r27, r26
     7ca:	b0 95       	com	r27
     7cc:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     7ce:	ac 21       	and	r26, r12
     7d0:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     7d2:	10 82       	st	Z, r1
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	91 05       	cpc	r25, r1
     7dc:	a9 f6       	brne	.-86     	; 0x788 <read_hardware+0x72>
     7de:	d0 92 c8 21 	sts	0x21C8, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     7e2:	c0 92 c9 21 	sts	0x21C9, r12
     7e6:	80 91 bf 21 	lds	r24, 0x21BF
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     7ea:	d0 fe       	sbrs	r13, 0
     7ec:	0c c0       	rjmp	.+24     	; 0x806 <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     7ee:	88 23       	and	r24, r24
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     7f2:	10 92 c0 21 	sts	0x21C0, r1
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 c0 21 	sts	0x21C0, r24
        toggle_switch_state = 1;                //set current value
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 bf 21 	sts	0x21BF, r24
     804:	0a c0       	rjmp	.+20     	; 0x81a <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     806:	88 23       	and	r24, r24
     808:	21 f0       	breq	.+8      	; 0x812 <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	80 93 c0 21 	sts	0x21C0, r24
     810:	02 c0       	rjmp	.+4      	; 0x816 <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     812:	10 92 c0 21 	sts	0x21C0, r1
        toggle_switch_state = 0;                //set current value
     816:	10 92 bf 21 	sts	0x21BF, r1
     81a:	80 91 c1 21 	lds	r24, 0x21C1
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     81e:	d1 fe       	sbrs	r13, 1
     820:	0c c0       	rjmp	.+24     	; 0x83a <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     822:	88 23       	and	r24, r24
     824:	19 f0       	breq	.+6      	; 0x82c <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     826:	10 92 c2 21 	sts	0x21C2, r1
     82a:	03 c0       	rjmp	.+6      	; 0x832 <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 c2 21 	sts	0x21C2, r24
        pushbutton_switch_state = 1;                //set current value
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	80 93 c1 21 	sts	0x21C1, r24
     838:	0a c0       	rjmp	.+20     	; 0x84e <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     83a:	88 23       	and	r24, r24
     83c:	21 f0       	breq	.+8      	; 0x846 <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	80 93 c2 21 	sts	0x21C2, r24
     844:	02 c0       	rjmp	.+4      	; 0x84a <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     846:	10 92 c2 21 	sts	0x21C2, r1
        pushbutton_switch_state = 0;                //set current value
     84a:	10 92 c1 21 	sts	0x21C1, r1
     84e:	80 91 c3 21 	lds	r24, 0x21C3
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     852:	d2 fe       	sbrs	r13, 2
     854:	0c c0       	rjmp	.+24     	; 0x86e <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     856:	88 23       	and	r24, r24
     858:	19 f0       	breq	.+6      	; 0x860 <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     85a:	10 92 c4 21 	sts	0x21C4, r1
     85e:	03 c0       	rjmp	.+6      	; 0x866 <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 c4 21 	sts	0x21C4, r24
        encoder_switch_state = 1;                //set current value
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 c3 21 	sts	0x21C3, r24
     86c:	0a c0       	rjmp	.+20     	; 0x882 <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     86e:	88 23       	and	r24, r24
     870:	21 f0       	breq	.+8      	; 0x87a <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	80 93 c4 21 	sts	0x21C4, r24
     878:	02 c0       	rjmp	.+4      	; 0x87e <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     87a:	10 92 c4 21 	sts	0x21C4, r1
        encoder_switch_state = 0;                //set current value
     87e:	10 92 c3 21 	sts	0x21C3, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     882:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	62 c0       	rjmp	.+196    	; 0x94e <read_hardware+0x238>
     88a:	20 91 23 02 	lds	r18, 0x0223
     88e:	21 60       	ori	r18, 0x01	; 1
     890:	fc 01       	movw	r30, r24
     892:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     894:	20 91 21 02 	lds	r18, 0x0221
     898:	27 7c       	andi	r18, 0xC7	; 199
     89a:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     89c:	40 91 21 02 	lds	r20, 0x0221
     8a0:	29 81       	ldd	r18, Y+1	; 0x01
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	2d 5f       	subi	r18, 0xFD	; 253
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	63 e0       	ldi	r22, 0x03	; 3
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	6a 95       	dec	r22
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <read_hardware+0x194>
     8b2:	42 2b       	or	r20, r18
     8b4:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     8b6:	20 91 20 02 	lds	r18, 0x0220
     8ba:	20 68       	ori	r18, 0x80	; 128
     8bc:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     8be:	20 91 23 02 	lds	r18, 0x0223
     8c2:	20 ff       	sbrs	r18, 0
     8c4:	fc cf       	rjmp	.-8      	; 0x8be <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     8c6:	e9 81       	ldd	r30, Y+1	; 0x01
     8c8:	20 91 24 02 	lds	r18, 0x0224
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	e5 53       	subi	r30, 0x35	; 53
     8d4:	fe 4d       	sbci	r31, 0xDE	; 222
     8d6:	20 83       	st	Z, r18
     8d8:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     8da:	e9 81       	ldd	r30, Y+1	; 0x01
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	20 91 25 02 	lds	r18, 0x0225
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	e5 53       	subi	r30, 0x35	; 53
     8e8:	fe 4d       	sbci	r31, 0xDE	; 222
     8ea:	f2 2e       	mov	r15, r18
     8ec:	ee 24       	eor	r14, r14
     8ee:	20 81       	ld	r18, Z
     8f0:	31 81       	ldd	r19, Z+1	; 0x01
     8f2:	2e 29       	or	r18, r14
     8f4:	3f 29       	or	r19, r15
     8f6:	20 83       	st	Z, r18
     8f8:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POTMIN)
     8fa:	e9 81       	ldd	r30, Y+1	; 0x01
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e5 53       	subi	r30, 0x35	; 53
     904:	fe 4d       	sbci	r31, 0xDE	; 222
     906:	20 81       	ld	r18, Z
     908:	31 81       	ldd	r19, Z+1	; 0x01
     90a:	20 3e       	cpi	r18, 0xE0	; 224
     90c:	31 05       	cpc	r19, r1
     90e:	48 f4       	brcc	.+18     	; 0x922 <read_hardware+0x20c>
            pot_values[i] = 0;
     910:	e9 81       	ldd	r30, Y+1	; 0x01
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e5 53       	subi	r30, 0x35	; 53
     91a:	fe 4d       	sbci	r31, 0xDE	; 222
     91c:	10 82       	st	Z, r1
     91e:	11 82       	std	Z+1, r1	; 0x01
     920:	13 c0       	rjmp	.+38     	; 0x948 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     922:	e9 81       	ldd	r30, Y+1	; 0x01
     924:	a9 81       	ldd	r26, Y+1	; 0x01
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	e5 53       	subi	r30, 0x35	; 53
     92e:	fe 4d       	sbci	r31, 0xDE	; 222
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	aa 0f       	add	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	a5 53       	subi	r26, 0x35	; 53
     938:	be 4d       	sbci	r27, 0xDE	; 222
     93a:	2d 91       	ld	r18, X+
     93c:	3c 91       	ld	r19, X
     93e:	11 97       	sbiw	r26, 0x01	; 1
     940:	20 5e       	subi	r18, 0xE0	; 224
     942:	30 40       	sbci	r19, 0x00	; 0
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     948:	29 81       	ldd	r18, Y+1	; 0x01
     94a:	2f 5f       	subi	r18, 0xFF	; 255
     94c:	29 83       	std	Y+1, r18	; 0x01
     94e:	29 81       	ldd	r18, Y+1	; 0x01
     950:	25 30       	cpi	r18, 0x05	; 5
     952:	08 f4       	brcc	.+2      	; 0x956 <read_hardware+0x240>
     954:	9a cf       	rjmp	.-204    	; 0x88a <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     956:	80 91 28 06 	lds	r24, 0x0628
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	80 fd       	sbrc	r24, 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     960:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     964:	84 2f       	mov	r24, r20
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	20 91 d6 21 	lds	r18, 0x21D6
     96c:	51 e0       	ldi	r21, 0x01	; 1
     96e:	25 27       	eor	r18, r21
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	82 23       	and	r24, r18
     974:	93 23       	and	r25, r19
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	59 f0       	breq	.+22     	; 0x990 <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     97a:	86 2f       	mov	r24, r22
     97c:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     97e:	80 fd       	sbrc	r24, 0
     980:	03 c0       	rjmp	.+6      	; 0x988 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     982:	50 93 d5 21 	sts	0x21D5, r21
     986:	06 c0       	rjmp	.+12     	; 0x994 <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 d5 21 	sts	0x21D5, r24
     98e:	02 c0       	rjmp	.+4      	; 0x994 <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     990:	10 92 d5 21 	sts	0x21D5, r1
    last_a = current_a;
     994:	40 93 d6 21 	sts	0x21D6, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     998:	0f 90       	pop	r0
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	bf 90       	pop	r11
     9ac:	08 95       	ret

000009ae <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
	
	//set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     9ae:	08 95       	ret

000009b0 <add_note_at_head_pitch>:
	new_note->previous_note_by_pitch->next_note_by_pitch = new_note;

	return new_note;
}

static Note* add_note_at_head_pitch(NoteList *note_list, uint8_t new_pitch, uint8_t new_velocity){
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	fc 01       	movw	r30, r24
	//Create new note at beginning of pitch order
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
        return NULL;
     9ba:	dc 01       	movw	r26, r24
	new_note->previous_note_by_pitch->next_note_by_pitch = new_note;

	return new_note;
}

static Note* add_note_at_head_pitch(NoteList *note_list, uint8_t new_pitch, uint8_t new_velocity){
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
	//Create new note at beginning of pitch order
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
        return NULL;
     9c0:	28 2f       	mov	r18, r24
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
        if(note_list->note_bank[i].status == 0){
     9c2:	1c 96       	adiw	r26, 0x0c	; 12
     9c4:	3c 91       	ld	r19, X
     9c6:	1c 97       	sbiw	r26, 0x0c	; 12
     9c8:	33 23       	and	r19, r19
     9ca:	01 f5       	brne	.+64     	; 0xa0c <add_note_at_head_pitch+0x5c>
            note_list->note_bank[i].status = 1;
     9cc:	0b e0       	ldi	r16, 0x0B	; 11
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	80 9f       	mul	r24, r16
     9d2:	d0 01       	movw	r26, r0
     9d4:	81 9f       	mul	r24, r17
     9d6:	b0 0d       	add	r27, r0
     9d8:	90 9f       	mul	r25, r16
     9da:	b0 0d       	add	r27, r0
     9dc:	11 24       	eor	r1, r1
     9de:	ae 0f       	add	r26, r30
     9e0:	bf 1f       	adc	r27, r31
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	1c 96       	adiw	r26, 0x0c	; 12
     9e6:	8c 93       	st	X, r24
            return &(note_list->note_bank[i]);
     9e8:	82 2f       	mov	r24, r18
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	80 9f       	mul	r24, r16
     9ee:	d0 01       	movw	r26, r0
     9f0:	81 9f       	mul	r24, r17
     9f2:	b0 0d       	add	r27, r0
     9f4:	90 9f       	mul	r25, r16
     9f6:	b0 0d       	add	r27, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	9d 01       	movw	r18, r26
     9fc:	26 5f       	subi	r18, 0xF6	; 246
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	2e 0f       	add	r18, r30
     a02:	3f 1f       	adc	r19, r31

static Note* add_note_at_head_pitch(NoteList *note_list, uint8_t new_pitch, uint8_t new_velocity){
	//Create new note at beginning of pitch order
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
     a04:	21 15       	cp	r18, r1
     a06:	31 05       	cpc	r19, r1
     a08:	49 f4       	brne	.+18     	; 0xa1c <add_note_at_head_pitch+0x6c>
     a0a:	44 c0       	rjmp	.+136    	; 0xa94 <add_note_at_head_pitch+0xe4>
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	1b 96       	adiw	r26, 0x0b	; 11
    note->previous_note_by_trigger = NULL;
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
     a10:	80 31       	cpi	r24, 0x10	; 16
     a12:	91 05       	cpc	r25, r1
     a14:	a9 f6       	brne	.-86     	; 0x9c0 <add_note_at_head_pitch+0x10>
static Note* add_note_at_head_pitch(NoteList *note_list, uint8_t new_pitch, uint8_t new_velocity){
	//Create new note at beginning of pitch order
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
        return NULL;
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	3c c0       	rjmp	.+120    	; 0xa94 <add_note_at_head_pitch+0xe4>

	new_note->pitch = new_pitch;
     a1c:	ae 0f       	add	r26, r30
     a1e:	bf 1f       	adc	r27, r31
     a20:	1a 96       	adiw	r26, 0x0a	; 10
     a22:	6c 93       	st	X, r22
     a24:	1a 97       	sbiw	r26, 0x0a	; 10
	new_note->velocity = new_velocity;
     a26:	bc 01       	movw	r22, r24
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	60 9f       	mul	r22, r16
     a2e:	e0 01       	movw	r28, r0
     a30:	61 9f       	mul	r22, r17
     a32:	d0 0d       	add	r29, r0
     a34:	70 9f       	mul	r23, r16
     a36:	d0 0d       	add	r29, r0
     a38:	11 24       	eor	r1, r1
     a3a:	ce 0f       	add	r28, r30
     a3c:	df 1f       	adc	r29, r31
     a3e:	48 83       	st	Y, r20
	new_note->next_note_by_trigger = NULL;
     a40:	51 96       	adiw	r26, 0x11	; 17
     a42:	1d 92       	st	X+, r1
     a44:	1c 92       	st	X, r1
     a46:	52 97       	sbiw	r26, 0x12	; 18
	new_note->previous_note_by_trigger = NULL;
     a48:	53 96       	adiw	r26, 0x13	; 19
     a4a:	1d 92       	st	X+, r1
     a4c:	1c 92       	st	X, r1
     a4e:	54 97       	sbiw	r26, 0x14	; 20

	if (note_list->head_pitch){
     a50:	c2 81       	ldd	r28, Z+2	; 0x02
     a52:	d3 81       	ldd	r29, Z+3	; 0x03
     a54:	20 97       	sbiw	r28, 0x00	; 0
     a56:	39 f0       	breq	.+14     	; 0xa66 <add_note_at_head_pitch+0xb6>
		new_note->next_note_by_pitch = note_list->head_pitch;
     a58:	1d 96       	adiw	r26, 0x0d	; 13
     a5a:	cd 93       	st	X+, r28
     a5c:	dc 93       	st	X, r29
     a5e:	1e 97       	sbiw	r26, 0x0e	; 14
		new_note->next_note_by_pitch->previous_note_by_pitch = new_note;
     a60:	2d 83       	std	Y+5, r18	; 0x05
     a62:	3e 83       	std	Y+6, r19	; 0x06
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <add_note_at_head_pitch+0xc2>
	}
	else{
		new_note->next_note_by_pitch = NULL;
     a66:	1d 96       	adiw	r26, 0x0d	; 13
     a68:	1d 92       	st	X+, r1
     a6a:	1c 92       	st	X, r1
     a6c:	1e 97       	sbiw	r26, 0x0e	; 14
		note_list->tail_pitch = new_note;
     a6e:	24 83       	std	Z+4, r18	; 0x04
     a70:	35 83       	std	Z+5, r19	; 0x05
	}

	new_note->previous_note_by_pitch = NULL;
     a72:	4b e0       	ldi	r20, 0x0B	; 11
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	84 9f       	mul	r24, r20
     a78:	d0 01       	movw	r26, r0
     a7a:	85 9f       	mul	r24, r21
     a7c:	b0 0d       	add	r27, r0
     a7e:	94 9f       	mul	r25, r20
     a80:	b0 0d       	add	r27, r0
     a82:	11 24       	eor	r1, r1
     a84:	ae 0f       	add	r26, r30
     a86:	bf 1f       	adc	r27, r31
     a88:	1f 96       	adiw	r26, 0x0f	; 15
     a8a:	1d 92       	st	X+, r1
     a8c:	1c 92       	st	X, r1
     a8e:	50 97       	sbiw	r26, 0x10	; 16
	note_list->head_pitch = new_note;
     a90:	22 83       	std	Z+2, r18	; 0x02
     a92:	33 83       	std	Z+3, r19	; 0x03

	return new_note;
}
     a94:	c9 01       	movw	r24, r18
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <initialize_note_list>:
    //Create new list, reset count and heads/tails, reset all nodes, return pouint8_ter to list
    //Call from main()

//    NoteList *new_note_list = malloc(sizeof(NoteList));
    NoteList* new_note_list = &global_note_list;
    new_note_list->count = 0;
     aa0:	10 92 d7 21 	sts	0x21D7, r1
     aa4:	10 92 d8 21 	sts	0x21D8, r1
    new_note_list->head_pitch = NULL;
     aa8:	10 92 d9 21 	sts	0x21D9, r1
     aac:	10 92 da 21 	sts	0x21DA, r1
    new_note_list->tail_pitch = NULL;
     ab0:	10 92 db 21 	sts	0x21DB, r1
     ab4:	10 92 dc 21 	sts	0x21DC, r1
    new_note_list->head_trigger = NULL;
     ab8:	10 92 dd 21 	sts	0x21DD, r1
     abc:	10 92 de 21 	sts	0x21DE, r1
    new_note_list->tail_trigger = NULL;
     ac0:	10 92 df 21 	sts	0x21DF, r1
     ac4:	10 92 e0 21 	sts	0x21E0, r1
     ac8:	e1 ee       	ldi	r30, 0xE1	; 225
     aca:	f1 e2       	ldi	r31, 0x21	; 33
#include "linkedlist.h"

static NoteList global_note_list;

static void free_note(Note* note){
    note->pitch = 0;
     acc:	10 82       	st	Z, r1
    note->velocity = 0;
     ace:	11 82       	std	Z+1, r1	; 0x01
    note->status = 0;
     ad0:	12 82       	std	Z+2, r1	; 0x02
    note->next_note_by_pitch = NULL;
     ad2:	13 82       	std	Z+3, r1	; 0x03
     ad4:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     ad6:	15 82       	std	Z+5, r1	; 0x05
     ad8:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     ada:	17 82       	std	Z+7, r1	; 0x07
     adc:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     ade:	11 86       	std	Z+9, r1	; 0x09
     ae0:	12 86       	std	Z+10, r1	; 0x0a
     ae2:	3b 96       	adiw	r30, 0x0b	; 11
    new_note_list->tail_pitch = NULL;
    new_note_list->head_trigger = NULL;
    new_note_list->tail_trigger = NULL;

    uint8_t i;
    for(i = 0; i<MAX_NOTES; i++)
     ae4:	82 e2       	ldi	r24, 0x22	; 34
     ae6:	e1 39       	cpi	r30, 0x91	; 145
     ae8:	f8 07       	cpc	r31, r24
     aea:	81 f7       	brne	.-32     	; 0xacc <initialize_note_list+0x2c>
        free_note(&(new_note_list->note_bank[i]));

    return new_note_list;
}
     aec:	87 ed       	ldi	r24, 0xD7	; 215
     aee:	91 e2       	ldi	r25, 0x21	; 33
     af0:	08 95       	ret

00000af2 <get_note_list>:

NoteList* get_note_list(){
	return &global_note_list;
}
     af2:	87 ed       	ldi	r24, 0xD7	; 215
     af4:	91 e2       	ldi	r25, 0x21	; 33
     af6:	08 95       	ret

00000af8 <add_note_in_full_order>:
            note_list->tail_trigger = NULL;
        }
    }    
}

void add_note_in_full_order(NoteList *note_list, uint8_t pitch, uint8_t velocity){
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
	//Find place for new note in pitch order
	//Update velocity if duplicate
	//Create note if new.
	//Return pouint8_ter to new note, for use with insert_at_tail_trigger

	if (note_list->head_pitch == NULL)
     b0a:	ea 81       	ldd	r30, Y+2	; 0x02
     b0c:	fb 81       	ldd	r31, Y+3	; 0x03
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	21 f0       	breq	.+8      	; 0xb1a <add_note_in_full_order+0x22>
		return add_note_at_head_pitch(note_list, new_pitch, new_velocity);

	Note* target_note = note_list->head_pitch;

	if (new_pitch < target_note->pitch)
     b12:	80 81       	ld	r24, Z
     b14:	68 17       	cp	r22, r24
     b16:	08 f0       	brcs	.+2      	; 0xb1a <add_note_in_full_order+0x22>
     b18:	7a c0       	rjmp	.+244    	; 0xc0e <add_note_in_full_order+0x116>
		return add_note_at_head_pitch(note_list, new_pitch, new_velocity);
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <add_note_at_head_pitch>
     b20:	fc 01       	movw	r30, r24
     b22:	e3 c0       	rjmp	.+454    	; 0xcea <add_note_in_full_order+0x1f2>

	while (new_pitch > target_note->pitch){
		if (target_note == note_list->tail_pitch)
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	9d 81       	ldd	r25, Y+5	; 0x05
     b28:	e8 17       	cp	r30, r24
     b2a:	f9 07       	cpc	r31, r25
     b2c:	09 f0       	breq	.+2      	; 0xb30 <add_note_in_full_order+0x38>
     b2e:	6c c0       	rjmp	.+216    	; 0xc08 <add_note_in_full_order+0x110>
     b30:	fe 01       	movw	r30, r28
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	e2 2e       	mov	r14, r18
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
        if(note_list->note_bank[i].status == 0){
     b38:	54 85       	ldd	r21, Z+12	; 0x0c
     b3a:	55 23       	and	r21, r21
     b3c:	e1 f4       	brne	.+56     	; 0xb76 <add_note_in_full_order+0x7e>
            note_list->note_bank[i].status = 1;
     b3e:	0b e0       	ldi	r16, 0x0B	; 11
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	20 9f       	mul	r18, r16
     b44:	f0 01       	movw	r30, r0
     b46:	21 9f       	mul	r18, r17
     b48:	f0 0d       	add	r31, r0
     b4a:	30 9f       	mul	r19, r16
     b4c:	f0 0d       	add	r31, r0
     b4e:	11 24       	eor	r1, r1
     b50:	ec 0f       	add	r30, r28
     b52:	fd 1f       	adc	r31, r29
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	24 87       	std	Z+12, r18	; 0x0c
            return &(note_list->note_bank[i]);
     b58:	ff 24       	eor	r15, r15
     b5a:	e0 9e       	mul	r14, r16
     b5c:	d0 01       	movw	r26, r0
     b5e:	e1 9e       	mul	r14, r17
     b60:	b0 0d       	add	r27, r0
     b62:	f0 9e       	mul	r15, r16
     b64:	b0 0d       	add	r27, r0
     b66:	11 24       	eor	r1, r1
     b68:	fd 01       	movw	r30, r26
     b6a:	3a 96       	adiw	r30, 0x0a	; 10
     b6c:	ec 0f       	add	r30, r28
     b6e:	fd 1f       	adc	r31, r29

static Note* add_note_at_tail_pitch(NoteList* note_list, uint8_t new_pitch, uint8_t new_velocity){
	//Create new note at the end of the pitch order
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	41 f4       	brne	.+16     	; 0xb84 <add_note_in_full_order+0x8c>
     b74:	fa c0       	rjmp	.+500    	; 0xd6a <add_note_in_full_order+0x272>
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	3b 96       	adiw	r30, 0x0b	; 11
    note->previous_note_by_trigger = NULL;
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
     b7c:	20 31       	cpi	r18, 0x10	; 16
     b7e:	31 05       	cpc	r19, r1
     b80:	d1 f6       	brne	.-76     	; 0xb36 <add_note_in_full_order+0x3e>
     b82:	f3 c0       	rjmp	.+486    	; 0xd6a <add_note_in_full_order+0x272>
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
        return NULL;

	new_note->pitch = new_pitch;
     b84:	6d 01       	movw	r12, r26
     b86:	cc 0e       	add	r12, r28
     b88:	dd 1e       	adc	r13, r29
     b8a:	d6 01       	movw	r26, r12
     b8c:	1a 96       	adiw	r26, 0x0a	; 10
     b8e:	6c 93       	st	X, r22
	new_note->velocity = new_velocity;
     b90:	b7 01       	movw	r22, r14
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	60 9f       	mul	r22, r16
     b98:	90 01       	movw	r18, r0
     b9a:	61 9f       	mul	r22, r17
     b9c:	30 0d       	add	r19, r0
     b9e:	70 9f       	mul	r23, r16
     ba0:	30 0d       	add	r19, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	2c 0f       	add	r18, r28
     ba6:	3d 1f       	adc	r19, r29
     ba8:	d9 01       	movw	r26, r18
     baa:	4c 93       	st	X, r20
	new_note->next_note_by_trigger = NULL;
     bac:	d6 01       	movw	r26, r12
     bae:	51 96       	adiw	r26, 0x11	; 17
     bb0:	1d 92       	st	X+, r1
     bb2:	1c 92       	st	X, r1
     bb4:	52 97       	sbiw	r26, 0x12	; 18
	new_note->previous_note_by_trigger = NULL;
     bb6:	53 96       	adiw	r26, 0x13	; 19
     bb8:	1d 92       	st	X+, r1
     bba:	1c 92       	st	X, r1
     bbc:	54 97       	sbiw	r26, 0x14	; 20

	if (note_list->tail_pitch){
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	51 f0       	breq	.+20     	; 0xbd6 <add_note_in_full_order+0xde>
		new_note->previous_note_by_pitch = note_list->tail_pitch;
     bc2:	1f 96       	adiw	r26, 0x0f	; 15
     bc4:	8d 93       	st	X+, r24
     bc6:	9c 93       	st	X, r25
     bc8:	50 97       	sbiw	r26, 0x10	; 16
		new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     bca:	dc 01       	movw	r26, r24
     bcc:	13 96       	adiw	r26, 0x03	; 3
     bce:	ed 93       	st	X+, r30
     bd0:	fc 93       	st	X, r31
     bd2:	14 97       	sbiw	r26, 0x04	; 4
     bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <add_note_in_full_order+0xec>
	}
	else{
		new_note->previous_note_by_pitch = NULL;
     bd6:	d6 01       	movw	r26, r12
     bd8:	1f 96       	adiw	r26, 0x0f	; 15
     bda:	1d 92       	st	X+, r1
     bdc:	1c 92       	st	X, r1
     bde:	50 97       	sbiw	r26, 0x10	; 16
		note_list->head_pitch = new_note;
     be0:	ea 83       	std	Y+2, r30	; 0x02
     be2:	fb 83       	std	Y+3, r31	; 0x03
	}

	new_note->next_note_by_pitch = NULL;
     be4:	8b e0       	ldi	r24, 0x0B	; 11
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	e8 9e       	mul	r14, r24
     bea:	d0 01       	movw	r26, r0
     bec:	e9 9e       	mul	r14, r25
     bee:	b0 0d       	add	r27, r0
     bf0:	f8 9e       	mul	r15, r24
     bf2:	b0 0d       	add	r27, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	ac 0f       	add	r26, r28
     bf8:	bd 1f       	adc	r27, r29
     bfa:	1d 96       	adiw	r26, 0x0d	; 13
     bfc:	1d 92       	st	X+, r1
     bfe:	1c 92       	st	X, r1
     c00:	1e 97       	sbiw	r26, 0x0e	; 14
	note_list->tail_pitch = new_note;
     c02:	ec 83       	std	Y+4, r30	; 0x04
     c04:	fd 83       	std	Y+5, r31	; 0x05
     c06:	73 c0       	rjmp	.+230    	; 0xcee <add_note_in_full_order+0x1f6>

	while (new_pitch > target_note->pitch){
		if (target_note == note_list->tail_pitch)
			return add_note_at_tail_pitch(note_list, new_pitch, new_velocity);

		target_note = target_note->next_note_by_pitch;
     c08:	03 80       	ldd	r0, Z+3	; 0x03
     c0a:	f4 81       	ldd	r31, Z+4	; 0x04
     c0c:	e0 2d       	mov	r30, r0
	Note* target_note = note_list->head_pitch;

	if (new_pitch < target_note->pitch)
		return add_note_at_head_pitch(note_list, new_pitch, new_velocity);

	while (new_pitch > target_note->pitch){
     c0e:	80 81       	ld	r24, Z
     c10:	86 17       	cp	r24, r22
     c12:	08 f4       	brcc	.+2      	; 0xc16 <add_note_in_full_order+0x11e>
     c14:	87 cf       	rjmp	.-242    	; 0xb24 <add_note_in_full_order+0x2c>
     c16:	9f 01       	movw	r18, r30
			return add_note_at_tail_pitch(note_list, new_pitch, new_velocity);

		target_note = target_note->next_note_by_pitch;
	}

	if (new_pitch == target_note->pitch)
     c18:	68 17       	cp	r22, r24
     c1a:	11 f4       	brne	.+4      	; 0xc20 <add_note_in_full_order+0x128>
	return new_note;
}

static Note* repeat_pitch(Note* note, uint8_t new_velocity){
	//Update velocity of an existing note
	note->velocity = new_velocity;
     c1c:	41 83       	std	Z+1, r20	; 0x01
     c1e:	65 c0       	rjmp	.+202    	; 0xcea <add_note_in_full_order+0x1f2>
     c20:	fe 01       	movw	r30, r28
			return add_note_at_tail_pitch(note_list, new_pitch, new_velocity);

		target_note = target_note->next_note_by_pitch;
	}

	if (new_pitch == target_note->pitch)
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
	return new_note;
}

static Note* repeat_pitch(Note* note, uint8_t new_velocity){
	//Update velocity of an existing note
	note->velocity = new_velocity;
     c26:	58 2f       	mov	r21, r24
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
        if(note_list->note_bank[i].status == 0){
     c28:	74 85       	ldd	r23, Z+12	; 0x0c
     c2a:	77 23       	and	r23, r23
     c2c:	e9 f4       	brne	.+58     	; 0xc68 <add_note_in_full_order+0x170>
            note_list->note_bank[i].status = 1;
     c2e:	0b e0       	ldi	r16, 0x0B	; 11
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	80 9f       	mul	r24, r16
     c34:	f0 01       	movw	r30, r0
     c36:	81 9f       	mul	r24, r17
     c38:	f0 0d       	add	r31, r0
     c3a:	90 9f       	mul	r25, r16
     c3c:	f0 0d       	add	r31, r0
     c3e:	11 24       	eor	r1, r1
     c40:	ec 0f       	add	r30, r28
     c42:	fd 1f       	adc	r31, r29
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	84 87       	std	Z+12, r24	; 0x0c
            return &(note_list->note_bank[i]);
     c48:	85 2f       	mov	r24, r21
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	80 9f       	mul	r24, r16
     c4e:	d0 01       	movw	r26, r0
     c50:	81 9f       	mul	r24, r17
     c52:	b0 0d       	add	r27, r0
     c54:	90 9f       	mul	r25, r16
     c56:	b0 0d       	add	r27, r0
     c58:	11 24       	eor	r1, r1
     c5a:	fd 01       	movw	r30, r26
     c5c:	3a 96       	adiw	r30, 0x0a	; 10
     c5e:	ec 0f       	add	r30, r28
     c60:	fd 1f       	adc	r31, r29
static Note* add_note_at_previous_pitch(NoteList *note_list, Note* target_note, uint8_t new_pitch, uint8_t new_velocity){
	//Create new note before specified note

	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
     c62:	30 97       	sbiw	r30, 0x00	; 0
     c64:	39 f4       	brne	.+14     	; 0xc74 <add_note_in_full_order+0x17c>
     c66:	81 c0       	rjmp	.+258    	; 0xd6a <add_note_in_full_order+0x272>
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	3b 96       	adiw	r30, 0x0b	; 11
    note->previous_note_by_trigger = NULL;
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_NOTES; i++)
     c6c:	80 31       	cpi	r24, 0x10	; 16
     c6e:	91 05       	cpc	r25, r1
     c70:	d1 f6       	brne	.-76     	; 0xc26 <add_note_in_full_order+0x12e>
     c72:	7b c0       	rjmp	.+246    	; 0xd6a <add_note_in_full_order+0x272>
	Note* new_note = allocate_note(note_list);

	if (new_note == NULL)
        return NULL;

	new_note->pitch = new_pitch;
     c74:	7d 01       	movw	r14, r26
     c76:	ec 0e       	add	r14, r28
     c78:	fd 1e       	adc	r15, r29
     c7a:	d7 01       	movw	r26, r14
     c7c:	1a 96       	adiw	r26, 0x0a	; 10
     c7e:	6c 93       	st	X, r22
	new_note->velocity = new_velocity;
     c80:	bc 01       	movw	r22, r24
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	60 9f       	mul	r22, r16
     c88:	c0 01       	movw	r24, r0
     c8a:	61 9f       	mul	r22, r17
     c8c:	90 0d       	add	r25, r0
     c8e:	70 9f       	mul	r23, r16
     c90:	90 0d       	add	r25, r0
     c92:	11 24       	eor	r1, r1
     c94:	8c 0f       	add	r24, r28
     c96:	9d 1f       	adc	r25, r29
     c98:	dc 01       	movw	r26, r24
     c9a:	4c 93       	st	X, r20
	new_note->next_note_by_trigger = NULL;
     c9c:	d7 01       	movw	r26, r14
     c9e:	51 96       	adiw	r26, 0x11	; 17
     ca0:	1d 92       	st	X+, r1
     ca2:	1c 92       	st	X, r1
     ca4:	52 97       	sbiw	r26, 0x12	; 18
	new_note->previous_note_by_trigger = NULL;
     ca6:	53 96       	adiw	r26, 0x13	; 19
     ca8:	1d 92       	st	X+, r1
     caa:	1c 92       	st	X, r1
     cac:	54 97       	sbiw	r26, 0x14	; 20

	new_note->next_note_by_pitch = target_note;
     cae:	1d 96       	adiw	r26, 0x0d	; 13
     cb0:	2d 93       	st	X+, r18
     cb2:	3c 93       	st	X, r19
     cb4:	1e 97       	sbiw	r26, 0x0e	; 14
	new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     cb6:	d9 01       	movw	r26, r18
     cb8:	15 96       	adiw	r26, 0x05	; 5
     cba:	8d 91       	ld	r24, X+
     cbc:	9c 91       	ld	r25, X
     cbe:	16 97       	sbiw	r26, 0x06	; 6
     cc0:	d7 01       	movw	r26, r14
     cc2:	1f 96       	adiw	r26, 0x0f	; 15
     cc4:	8d 93       	st	X+, r24
     cc6:	9c 93       	st	X, r25
     cc8:	50 97       	sbiw	r26, 0x10	; 16
	new_note->next_note_by_pitch->previous_note_by_pitch = new_note;
     cca:	d9 01       	movw	r26, r18
     ccc:	15 96       	adiw	r26, 0x05	; 5
     cce:	ed 93       	st	X+, r30
     cd0:	fc 93       	st	X, r31
     cd2:	16 97       	sbiw	r26, 0x06	; 6
	new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     cd4:	d7 01       	movw	r26, r14
     cd6:	1f 96       	adiw	r26, 0x0f	; 15
     cd8:	8d 91       	ld	r24, X+
     cda:	9c 91       	ld	r25, X
     cdc:	50 97       	sbiw	r26, 0x10	; 16
     cde:	dc 01       	movw	r26, r24
     ce0:	13 96       	adiw	r26, 0x03	; 3
     ce2:	ed 93       	st	X+, r30
     ce4:	fc 93       	st	X, r31
     ce6:	14 97       	sbiw	r26, 0x04	; 4
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <add_note_in_full_order+0x1f6>
    //Place in pitch order. And at the tail of Trigger order
    //Update count if necessary
    //Call from main()
	
    Note* temp_note = add_note_in_order_by_pitch(note_list, pitch, velocity);
    if (temp_note)
     cea:	30 97       	sbiw	r30, 0x00	; 0
     cec:	f1 f1       	breq	.+124    	; 0xd6a <add_note_in_full_order+0x272>
        note_list->count += insert_note_at_tail_trigger(note_list, temp_note);
     cee:	48 81       	ld	r20, Y
     cf0:	59 81       	ldd	r21, Y+1	; 0x01
static bool insert_note_at_tail_trigger(NoteList* note_list, Note* note){
	//Place (new) note at the end of the trigger order
	//If necessary, remove note from old trigger position
	//Return 1 if new note. Return 0 if not.

    if (note_list->tail_trigger == note)
     cf2:	08 85       	ldd	r16, Y+8	; 0x08
     cf4:	19 85       	ldd	r17, Y+9	; 0x09
     cf6:	0e 17       	cp	r16, r30
     cf8:	1f 07       	cpc	r17, r31
     cfa:	89 f1       	breq	.+98     	; 0xd5e <add_note_in_full_order+0x266>
        return 0;

	bool note_is_new = 1;

    if (note->previous_note_by_trigger){
     cfc:	21 85       	ldd	r18, Z+9	; 0x09
     cfe:	32 85       	ldd	r19, Z+10	; 0x0a
     d00:	21 15       	cp	r18, r1
     d02:	31 05       	cpc	r19, r1
     d04:	49 f0       	breq	.+18     	; 0xd18 <add_note_in_full_order+0x220>
		note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     d06:	87 81       	ldd	r24, Z+7	; 0x07
     d08:	90 85       	ldd	r25, Z+8	; 0x08
     d0a:	d9 01       	movw	r26, r18
     d0c:	17 96       	adiw	r26, 0x07	; 7
     d0e:	8d 93       	st	X+, r24
     d10:	9c 93       	st	X, r25
     d12:	18 97       	sbiw	r26, 0x08	; 8
		note_is_new = 0;
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <add_note_in_full_order+0x222>
	//Return 1 if new note. Return 0 if not.

    if (note_list->tail_trigger == note)
        return 0;

	bool note_is_new = 1;
     d18:	61 e0       	ldi	r22, 0x01	; 1

    if (note->previous_note_by_trigger){
		note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
		note_is_new = 0;
	}
	if (note->next_note_by_trigger){
     d1a:	87 81       	ldd	r24, Z+7	; 0x07
     d1c:	90 85       	ldd	r25, Z+8	; 0x08
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	51 f0       	breq	.+20     	; 0xd36 <add_note_in_full_order+0x23e>
        if (note_is_new)
     d22:	66 23       	and	r22, r22
     d24:	11 f0       	breq	.+4      	; 0xd2a <add_note_in_full_order+0x232>
            note_list->head_trigger = note->next_note_by_trigger;
     d26:	8e 83       	std	Y+6, r24	; 0x06
     d28:	9f 83       	std	Y+7, r25	; 0x07
		note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     d2a:	dc 01       	movw	r26, r24
     d2c:	19 96       	adiw	r26, 0x09	; 9
     d2e:	2d 93       	st	X+, r18
     d30:	3c 93       	st	X, r19
     d32:	1a 97       	sbiw	r26, 0x0a	; 10
		note_is_new = 0;
     d34:	60 e0       	ldi	r22, 0x00	; 0
	}

	if (note_list->tail_trigger){
     d36:	01 15       	cp	r16, r1
     d38:	11 05       	cpc	r17, r1
     d3a:	41 f0       	breq	.+16     	; 0xd4c <add_note_in_full_order+0x254>
		note->previous_note_by_trigger = note_list->tail_trigger;
     d3c:	01 87       	std	Z+9, r16	; 0x09
     d3e:	12 87       	std	Z+10, r17	; 0x0a
		note->previous_note_by_trigger->next_note_by_trigger = note;
     d40:	d8 01       	movw	r26, r16
     d42:	17 96       	adiw	r26, 0x07	; 7
     d44:	ed 93       	st	X+, r30
     d46:	fc 93       	st	X, r31
     d48:	18 97       	sbiw	r26, 0x08	; 8
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <add_note_in_full_order+0x25c>
	}
	else{
		note->previous_note_by_trigger = NULL;
     d4c:	11 86       	std	Z+9, r1	; 0x09
     d4e:	12 86       	std	Z+10, r1	; 0x0a
		note_list->head_trigger = note;
     d50:	ee 83       	std	Y+6, r30	; 0x06
     d52:	ff 83       	std	Y+7, r31	; 0x07
	}

	note->next_note_by_trigger = NULL;
     d54:	17 82       	std	Z+7, r1	; 0x07
     d56:	10 86       	std	Z+8, r1	; 0x08
	note_list->tail_trigger = note;
     d58:	e8 87       	std	Y+8, r30	; 0x08
     d5a:	f9 87       	std	Y+9, r31	; 0x09
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <add_note_in_full_order+0x268>
	//Place (new) note at the end of the trigger order
	//If necessary, remove note from old trigger position
	//Return 1 if new note. Return 0 if not.

    if (note_list->tail_trigger == note)
        return 0;
     d5e:	60 e0       	ldi	r22, 0x00	; 0
    //Update count if necessary
    //Call from main()
	
    Note* temp_note = add_note_in_order_by_pitch(note_list, pitch, velocity);
    if (temp_note)
        note_list->count += insert_note_at_tail_trigger(note_list, temp_note);
     d60:	ca 01       	movw	r24, r20
     d62:	86 0f       	add	r24, r22
     d64:	91 1d       	adc	r25, r1
     d66:	88 83       	st	Y, r24
     d68:	99 83       	std	Y+1, r25	; 0x01
  //  note_list->count += insert_at_tail_trigger(note_list, add_note_in_order_by_pitch(note_list, p, v));
    return;
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <remove_all_notes>:

void remove_all_notes(NoteList *note_list){
     d7c:	dc 01       	movw	r26, r24
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
     d7e:	12 96       	adiw	r26, 0x02	; 2
     d80:	ed 91       	ld	r30, X+
     d82:	fc 91       	ld	r31, X
     d84:	13 97       	sbiw	r26, 0x03	; 3
	Note* temp_node;
	while (target_note){
     d86:	10 c0       	rjmp	.+32     	; 0xda8 <remove_all_notes+0x2c>
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
     d88:	33 81       	ldd	r19, Z+3	; 0x03
     d8a:	24 81       	ldd	r18, Z+4	; 0x04
#include "linkedlist.h"

static NoteList global_note_list;

static void free_note(Note* note){
    note->pitch = 0;
     d8c:	10 82       	st	Z, r1
    note->velocity = 0;
     d8e:	11 82       	std	Z+1, r1	; 0x01
    note->status = 0;
     d90:	12 82       	std	Z+2, r1	; 0x02
    note->next_note_by_pitch = NULL;
     d92:	13 82       	std	Z+3, r1	; 0x03
     d94:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     d96:	15 82       	std	Z+5, r1	; 0x05
     d98:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     d9a:	17 82       	std	Z+7, r1	; 0x07
     d9c:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     d9e:	11 86       	std	Z+9, r1	; 0x09
     da0:	12 86       	std	Z+10, r1	; 0x0a
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
	Note* temp_node;
	while (target_note){
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
     da2:	c9 01       	movw	r24, r18
     da4:	e9 2f       	mov	r30, r25
     da6:	f8 2f       	mov	r31, r24

void remove_all_notes(NoteList *note_list){
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
	Note* temp_node;
	while (target_note){
     da8:	30 97       	sbiw	r30, 0x00	; 0
     daa:	71 f7       	brne	.-36     	; 0xd88 <remove_all_notes+0xc>
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
		free_note(temp_node);
	}

	note_list->head_pitch = NULL;
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	1d 92       	st	X+, r1
     db0:	1c 92       	st	X, r1
     db2:	13 97       	sbiw	r26, 0x03	; 3
	note_list->tail_pitch = NULL;
     db4:	14 96       	adiw	r26, 0x04	; 4
     db6:	1d 92       	st	X+, r1
     db8:	1c 92       	st	X, r1
     dba:	15 97       	sbiw	r26, 0x05	; 5
	note_list->head_trigger = NULL;
     dbc:	16 96       	adiw	r26, 0x06	; 6
     dbe:	1d 92       	st	X+, r1
     dc0:	1c 92       	st	X, r1
     dc2:	17 97       	sbiw	r26, 0x07	; 7
	note_list->tail_trigger = NULL;
     dc4:	18 96       	adiw	r26, 0x08	; 8
     dc6:	1d 92       	st	X+, r1
     dc8:	1c 92       	st	X, r1
     dca:	19 97       	sbiw	r26, 0x09	; 9
	note_list->count = 0;
     dcc:	1d 92       	st	X+, r1
     dce:	1c 92       	st	X, r1
     dd0:	11 97       	sbiw	r26, 0x01	; 1

	return;
}
     dd2:	08 95       	ret

00000dd4 <__vector_91>:
uint16_t next_duration;
	
const uint8_t pitch_array[7] = {50, 55, 53, 60, 59, 65, 40};
uint8_t pitch_array_select = 0;
*/
ISR(USARTD1_RXC_vect){
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
//	static uint8_t new_byte[1];
//	new_byte[0] = USARTD1.DATA;
	midi_device_input(serial_midi_device(),1,&(USARTD1.DATA));
     df6:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	40 eb       	ldi	r20, 0xB0	; 176
     dfe:	59 e0       	ldi	r21, 0x09	; 9
     e00:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <midi_device_input>
	midi_device_process(serial_midi_device());
     e04:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
     e08:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <midi_device_process>
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <test_pots>:

void test_pots(){
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     e34:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	
	uint8_t selPOT = 0;
     e38:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		read_hardware();
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     e3a:	c4 e6       	ldi	r28, 0x64	; 100
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <test_pots+0x14>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
			selPOT++;
			if (selPOT>4)
				selPOT = 0;
     e40:	10 e0       	ldi	r17, 0x00	; 0
	initialize_hardware();
	
	uint8_t selPOT = 0;
	
	while(1){
		read_hardware();
     e42:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     e46:	81 2f       	mov	r24, r17
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	43 e6       	ldi	r20, 0x63	; 99
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	0e 94 c0 01 	call	0x380	; 0x380 <get_pot_value>
     e54:	21 2f       	mov	r18, r17
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	2c 9f       	mul	r18, r28
     e5e:	a0 01       	movw	r20, r0
     e60:	2d 9f       	mul	r18, r29
     e62:	50 0d       	add	r21, r0
     e64:	3c 9f       	mul	r19, r28
     e66:	50 0d       	add	r21, r0
     e68:	11 24       	eor	r1, r1
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <set_seven_segment_LEDs>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     e72:	0e 94 f5 02 	call	0x5ea	; 0x5ea <get_encoder_switch_edge>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	21 f7       	brne	.-56     	; 0xe42 <test_pots+0x14>
			selPOT++;
     e7a:	1f 5f       	subi	r17, 0xFF	; 255
			if (selPOT>4)
     e7c:	15 30       	cpi	r17, 0x05	; 5
     e7e:	00 f7       	brcc	.-64     	; 0xe40 <test_pots+0x12>
     e80:	e0 cf       	rjmp	.-64     	; 0xe42 <test_pots+0x14>

00000e82 <test_switches>:
	
	
}
*/

void test_switches(){
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <test_switches+0xa>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     e90:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	
	while(1){
		read_hardware();
     e94:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     e98:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_toggle_switch_state>
     ea8:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	6a 81       	ldd	r22, Y+2	; 0x02
     eae:	49 81       	ldd	r20, Y+1	; 0x01
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <postloop_functions>
     eb8:	ed cf       	rjmp	.-38     	; 0xe94 <test_switches+0x12>

00000eba <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	initialize_hardware();
     ec4:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     ecc:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     ed0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_encoder_switch_state>
     ed4:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     ed6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <get_pushbutton_switch_state>
     eda:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     edc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_toggle_switch_state>
     ee0:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     ee2:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	31 f4       	brne	.+12     	; 0xef6 <test_seven_segment+0x3c>
			if (i == 999)
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	c7 3e       	cpi	r28, 0xE7	; 231
     eee:	d8 07       	cpc	r29, r24
     ef0:	51 f0       	breq	.+20     	; 0xf06 <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     ef2:	21 96       	adiw	r28, 0x01	; 1
     ef4:	0d c0       	rjmp	.+26     	; 0xf10 <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     ef6:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	49 f4       	brne	.+18     	; 0xf10 <test_seven_segment+0x56>
			if (i == 0)
     efe:	20 97       	sbiw	r28, 0x00	; 0
     f00:	29 f0       	breq	.+10     	; 0xf0c <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     f02:	21 97       	sbiw	r28, 0x01	; 1
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     f0c:	c7 ee       	ldi	r28, 0xE7	; 231
     f0e:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	6f 2d       	mov	r22, r15
     f14:	40 2f       	mov	r20, r16
     f16:	21 2f       	mov	r18, r17
     f18:	8e 01       	movw	r16, r28
     f1a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <postloop_functions>
	}
     f1e:	d6 cf       	rjmp	.-84     	; 0xecc <test_seven_segment+0x12>

00000f20 <test_ADC>:
}

void test_ADC(){
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	initialize_hardware();
     f32:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     f36:	c0 e0       	ldi	r28, 0x00	; 0
     f38:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     f3a:	84 e6       	ldi	r24, 0x64	; 100
     f3c:	a8 2e       	mov	r10, r24
     f3e:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     f40:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     f44:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_encoder_switch_state>
     f48:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     f4a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <get_pushbutton_switch_state>
     f4e:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     f50:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_toggle_switch_state>
     f54:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     f56:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	29 f4       	brne	.+10     	; 0xf68 <test_ADC+0x48>
			if (pot_select == 4)
     f5e:	c4 30       	cpi	r28, 0x04	; 4
     f60:	d1 05       	cpc	r29, r1
     f62:	51 f0       	breq	.+20     	; 0xf78 <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     f64:	21 96       	adiw	r28, 0x01	; 1
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     f68:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	49 f4       	brne	.+18     	; 0xf82 <test_ADC+0x62>
			if (pot_select == 0)
     f70:	20 97       	sbiw	r28, 0x00	; 0
     f72:	29 f0       	breq	.+10     	; 0xf7e <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     f74:	21 97       	sbiw	r28, 0x01	; 1
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     f78:	c0 e0       	ldi	r28, 0x00	; 0
     f7a:	d0 e0       	ldi	r29, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     f7e:	c4 e0       	ldi	r28, 0x04	; 4
     f80:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     f82:	8c 2f       	mov	r24, r28
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	43 e6       	ldi	r20, 0x63	; 99
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	0e 94 c0 01 	call	0x380	; 0x380 <get_pot_value>
     f90:	ca 9d       	mul	r28, r10
     f92:	80 01       	movw	r16, r0
     f94:	cb 9d       	mul	r28, r11
     f96:	10 0d       	add	r17, r0
     f98:	da 9d       	mul	r29, r10
     f9a:	10 0d       	add	r17, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	08 0f       	add	r16, r24
     fa0:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	6d 2d       	mov	r22, r13
     fa6:	4e 2d       	mov	r20, r14
     fa8:	2f 2d       	mov	r18, r15
     faa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <postloop_functions>
	}
     fae:	c8 cf       	rjmp	.-112    	; 0xf40 <test_ADC+0x20>

00000fb0 <test_xnor_in>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}
*/
void test_xnor_in(){
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
	static uint8_t new_byte;

	initialize_hardware();
     fb6:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	serial_midi_init();
     fba:	0e 94 9a 0a 	call	0x1534	; 0x1534 <serial_midi_init>
	
	while(1){
		read_hardware();
		
		if (get_encoder_switch_edge()){
			new_byte = 0x90;
     fbe:	90 e9       	ldi	r25, 0x90	; 144
     fc0:	f9 2e       	mov	r15, r25
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x3D;
     fc2:	0d e3       	ldi	r16, 0x3D	; 61
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x64;
     fc4:	14 e6       	ldi	r17, 0x64	; 100

	initialize_hardware();
	serial_midi_init();
	
	while(1){
		read_hardware();
     fc6:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
		
		if (get_encoder_switch_edge()){
     fca:	0e 94 f5 02 	call	0x5ea	; 0x5ea <get_encoder_switch_edge>
     fce:	88 23       	and	r24, r24
     fd0:	d1 f3       	breq	.-12     	; 0xfc6 <test_xnor_in+0x16>
			new_byte = 0x90;
     fd2:	f0 92 91 22 	sts	0x2291, r15
			midi_device_input(serial_midi_device(),1,&new_byte);
     fd6:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	41 e9       	ldi	r20, 0x91	; 145
     fde:	52 e2       	ldi	r21, 0x22	; 34
     fe0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <midi_device_input>
			midi_device_process(serial_midi_device());
     fe4:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
     fe8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <midi_device_process>
			
			new_byte = 0x3D;
     fec:	00 93 91 22 	sts	0x2291, r16
			midi_device_input(serial_midi_device(),1,&new_byte);
     ff0:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	41 e9       	ldi	r20, 0x91	; 145
     ff8:	52 e2       	ldi	r21, 0x22	; 34
     ffa:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <midi_device_input>
			midi_device_process(serial_midi_device());
     ffe:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
    1002:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <midi_device_process>
			
			new_byte = 0x64;
    1006:	10 93 91 22 	sts	0x2291, r17
			midi_device_input(serial_midi_device(),1,&new_byte);
    100a:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	41 e9       	ldi	r20, 0x91	; 145
    1012:	52 e2       	ldi	r21, 0x22	; 34
    1014:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <midi_device_input>
			midi_device_process(serial_midi_device());
    1018:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_midi_device>
    101c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <midi_device_process>
    1020:	d2 cf       	rjmp	.-92     	; 0xfc6 <test_xnor_in+0x16>

00001022 <test_blank>:
		
	}
	
}

void test_blank(){
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	initialize_hardware();
    1026:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	
	while(1){
		read_hardware();
    102a:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <postloop_functions>
    103e:	f5 cf       	rjmp	.-22     	; 0x102a <test_blank+0x8>

00001040 <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	ae 97       	sbiw	r28, 0x2e	; 46
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
    1052:	de 01       	movw	r26, r28
    1054:	1f 96       	adiw	r26, 0x0f	; 15
    1056:	e0 e2       	ldi	r30, 0x20	; 32
    1058:	f0 e2       	ldi	r31, 0x20	; 32
    105a:	20 e2       	ldi	r18, 0x20	; 32
    105c:	01 90       	ld	r0, Z+
    105e:	0d 92       	st	X+, r0
    1060:	21 50       	subi	r18, 0x01	; 1
    1062:	e1 f7       	brne	.-8      	; 0x105c <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
    1064:	20 91 00 08 	lds	r18, 0x0800
    1068:	2f 70       	andi	r18, 0x0F	; 15
    106a:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
    1070:	1b 82       	std	Y+3, r1	; 0x03
    1072:	1c 82       	std	Y+4, r1	; 0x04
    1074:	1d 82       	std	Y+5, r1	; 0x05
    1076:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
    1078:	9c 01       	movw	r18, r24
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	77 e8       	ldi	r23, 0x87	; 135
    1082:	83 e9       	ldi	r24, 0x93	; 147
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    108a:	2f 83       	std	Y+7, r18	; 0x07
    108c:	38 87       	std	Y+8, r19	; 0x08
    108e:	49 87       	std	Y+9, r20	; 0x09
    1090:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	ea 81       	ldd	r30, Y+2	; 0x02
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	8e 01       	movw	r16, r28
    10a8:	0f 5f       	subi	r16, 0xFF	; 255
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <BPM_to_TMR+0x7c>
    10ba:	93 c0       	rjmp	.+294    	; 0x11e2 <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	ea 81       	ldd	r30, Y+2	; 0x02
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e0 0f       	add	r30, r16
    10d2:	f1 1f       	adc	r31, r17
    10d4:	26 85       	ldd	r18, Z+14	; 0x0e
    10d6:	37 85       	ldd	r19, Z+15	; 0x0f
    10d8:	40 89       	ldd	r20, Z+16	; 0x10
    10da:	51 89       	ldd	r21, Z+17	; 0x11
    10dc:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    10e0:	2b 87       	std	Y+11, r18	; 0x0b
    10e2:	3c 87       	std	Y+12, r19	; 0x0c
    10e4:	4d 87       	std	Y+13, r20	; 0x0d
    10e6:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    10e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ec:	ad 85       	ldd	r26, Y+13	; 0x0d
    10ee:	be 85       	ldd	r27, Y+14	; 0x0e
    10f0:	80 30       	cpi	r24, 0x00	; 0
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	92 07       	cpc	r25, r18
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	a2 07       	cpc	r26, r18
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	b2 07       	cpc	r27, r18
    10fe:	b8 f6       	brcc	.-82     	; 0x10ae <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
    1100:	80 91 00 08 	lds	r24, 0x0800
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <BPM_to_TMR+0xca>
    1108:	61 c0       	rjmp	.+194    	; 0x11cc <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
    110a:	99 81       	ldd	r25, Y+1	; 0x01
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	98 17       	cp	r25, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <BPM_to_TMR+0xd4>
    1112:	5a c0       	rjmp	.+180    	; 0x11c8 <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
    1114:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
    1118:	60 91 20 08 	lds	r22, 0x0820
    111c:	70 91 21 08 	lds	r23, 0x0821
    1120:	ea 81       	ldd	r30, Y+2	; 0x02
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	8e 01       	movw	r16, r28
    112e:	0f 5f       	subi	r16, 0xFF	; 255
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	e0 0f       	add	r30, r16
    1134:	f1 1f       	adc	r31, r17
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	26 85       	ldd	r18, Z+14	; 0x0e
    113c:	37 85       	ldd	r19, Z+15	; 0x0f
    113e:	40 89       	ldd	r20, Z+16	; 0x10
    1140:	51 89       	ldd	r21, Z+17	; 0x11
    1142:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsi3>
    1146:	6b 83       	std	Y+3, r22	; 0x03
    1148:	7c 83       	std	Y+4, r23	; 0x04
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
    114e:	6b 81       	ldd	r22, Y+3	; 0x03
    1150:	7c 81       	ldd	r23, Y+4	; 0x04
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	e9 81       	ldd	r30, Y+1	; 0x01
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e0 0f       	add	r30, r16
    1164:	f1 1f       	adc	r31, r17
    1166:	26 85       	ldd	r18, Z+14	; 0x0e
    1168:	37 85       	ldd	r19, Z+15	; 0x0f
    116a:	40 89       	ldd	r20, Z+16	; 0x10
    116c:	51 89       	ldd	r21, Z+17	; 0x11
    116e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	3c 83       	std	Y+4, r19	; 0x04
    1176:	4d 83       	std	Y+5, r20	; 0x05
    1178:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
    117a:	10 c0       	rjmp	.+32     	; 0x119c <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	ad 81       	ldd	r26, Y+5	; 0x05
    1182:	be 81       	ldd	r27, Y+6	; 0x06
    1184:	2b 85       	ldd	r18, Y+11	; 0x0b
    1186:	3c 85       	ldd	r19, Y+12	; 0x0c
    1188:	4d 85       	ldd	r20, Y+13	; 0x0d
    118a:	5e 85       	ldd	r21, Y+14	; 0x0e
    118c:	82 1b       	sub	r24, r18
    118e:	93 0b       	sbc	r25, r19
    1190:	a4 0b       	sbc	r26, r20
    1192:	b5 0b       	sbc	r27, r21
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	ad 83       	std	Y+5, r26	; 0x05
    119a:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	4d 81       	ldd	r20, Y+5	; 0x05
    11a2:	5e 81       	ldd	r21, Y+6	; 0x06
    11a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a8:	ad 85       	ldd	r26, Y+13	; 0x0d
    11aa:	be 85       	ldd	r27, Y+14	; 0x0e
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	a4 07       	cpc	r26, r20
    11b2:	b5 07       	cpc	r27, r21
    11b4:	18 f3       	brcs	.-58     	; 0x117c <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	ad 81       	ldd	r26, Y+5	; 0x05
    11bc:	be 81       	ldd	r27, Y+6	; 0x06
    11be:	e0 e0       	ldi	r30, 0x00	; 0
    11c0:	f8 e0       	ldi	r31, 0x08	; 8
    11c2:	80 a3       	std	Z+32, r24	; 0x20
    11c4:	91 a3       	std	Z+33, r25	; 0x21
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
    11c8:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
    11cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d0:	ad 85       	ldd	r26, Y+13	; 0x0d
    11d2:	be 85       	ldd	r27, Y+14	; 0x0e
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	f8 e0       	ldi	r31, 0x08	; 8
    11d8:	80 a7       	std	Z+40, r24	; 0x28
    11da:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 93 00 08 	sts	0x0800, r24

	return;
}
    11e2:	ae 96       	adiw	r28, 0x2e	; 46
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	08 95       	ret

000011f2 <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	ae 97       	sbiw	r28, 0x2e	; 46
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
    1204:	de 01       	movw	r26, r28
    1206:	1f 96       	adiw	r26, 0x0f	; 15
    1208:	e0 e0       	ldi	r30, 0x00	; 0
    120a:	f0 e2       	ldi	r31, 0x20	; 32
    120c:	20 e2       	ldi	r18, 0x20	; 32
    120e:	01 90       	ld	r0, Z+
    1210:	0d 92       	st	X+, r0
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	e1 f7       	brne	.-8      	; 0x120e <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
    1216:	20 91 00 08 	lds	r18, 0x0800
    121a:	2f 70       	andi	r18, 0x0F	; 15
    121c:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
    1222:	1b 82       	std	Y+3, r1	; 0x03
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	1d 82       	std	Y+5, r1	; 0x05
    1228:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
    122a:	9c 01       	movw	r18, r24
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	78 ea       	ldi	r23, 0xA8	; 168
    1234:	84 ed       	ldi	r24, 0xD4	; 212
    1236:	95 e5       	ldi	r25, 0x55	; 85
    1238:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    123c:	2f 83       	std	Y+7, r18	; 0x07
    123e:	38 87       	std	Y+8, r19	; 0x08
    1240:	49 87       	std	Y+9, r20	; 0x09
    1242:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    1244:	6f 81       	ldd	r22, Y+7	; 0x07
    1246:	78 85       	ldd	r23, Y+8	; 0x08
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	9a 85       	ldd	r25, Y+10	; 0x0a
    124c:	ea 81       	ldd	r30, Y+2	; 0x02
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 01       	movw	r16, r28
    125a:	0f 5f       	subi	r16, 0xFF	; 255
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	11 c0       	rjmp	.+34     	; 0x1282 <BPM_to_TMR2+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	88 30       	cpi	r24, 0x08	; 8
    126a:	08 f0       	brcs	.+2      	; 0x126e <BPM_to_TMR2+0x7c>
    126c:	a1 c0       	rjmp	.+322    	; 0x13b0 <BPM_to_TMR2+0x1be>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	ea 81       	ldd	r30, Y+2	; 0x02
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	e0 0f       	add	r30, r16
    1284:	f1 1f       	adc	r31, r17
    1286:	26 85       	ldd	r18, Z+14	; 0x0e
    1288:	37 85       	ldd	r19, Z+15	; 0x0f
    128a:	40 89       	ldd	r20, Z+16	; 0x10
    128c:	51 89       	ldd	r21, Z+17	; 0x11
    128e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    1292:	2b 87       	std	Y+11, r18	; 0x0b
    1294:	3c 87       	std	Y+12, r19	; 0x0c
    1296:	4d 87       	std	Y+13, r20	; 0x0d
    1298:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    129a:	8b 85       	ldd	r24, Y+11	; 0x0b
    129c:	9c 85       	ldd	r25, Y+12	; 0x0c
    129e:	ad 85       	ldd	r26, Y+13	; 0x0d
    12a0:	be 85       	ldd	r27, Y+14	; 0x0e
    12a2:	80 30       	cpi	r24, 0x00	; 0
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	92 07       	cpc	r25, r18
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	a2 07       	cpc	r26, r18
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	b2 07       	cpc	r27, r18
    12b0:	b8 f6       	brcc	.-82     	; 0x1260 <BPM_to_TMR2+0x6e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
    12b2:	80 91 00 08 	lds	r24, 0x0800
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <BPM_to_TMR2+0xca>
    12ba:	61 c0       	rjmp	.+194    	; 0x137e <BPM_to_TMR2+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
    12bc:	99 81       	ldd	r25, Y+1	; 0x01
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	98 17       	cp	r25, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <BPM_to_TMR2+0xd4>
    12c4:	5a c0       	rjmp	.+180    	; 0x137a <BPM_to_TMR2+0x188>
			TCC0.CTRLA = 0x00;
    12c6:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
    12ca:	60 91 20 08 	lds	r22, 0x0820
    12ce:	70 91 21 08 	lds	r23, 0x0821
    12d2:	ea 81       	ldd	r30, Y+2	; 0x02
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	8e 01       	movw	r16, r28
    12e0:	0f 5f       	subi	r16, 0xFF	; 255
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	e0 0f       	add	r30, r16
    12e6:	f1 1f       	adc	r31, r17
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	26 85       	ldd	r18, Z+14	; 0x0e
    12ee:	37 85       	ldd	r19, Z+15	; 0x0f
    12f0:	40 89       	ldd	r20, Z+16	; 0x10
    12f2:	51 89       	ldd	r21, Z+17	; 0x11
    12f4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsi3>
    12f8:	6b 83       	std	Y+3, r22	; 0x03
    12fa:	7c 83       	std	Y+4, r23	; 0x04
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
    1300:	6b 81       	ldd	r22, Y+3	; 0x03
    1302:	7c 81       	ldd	r23, Y+4	; 0x04
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	e9 81       	ldd	r30, Y+1	; 0x01
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	e0 0f       	add	r30, r16
    1316:	f1 1f       	adc	r31, r17
    1318:	26 85       	ldd	r18, Z+14	; 0x0e
    131a:	37 85       	ldd	r19, Z+15	; 0x0f
    131c:	40 89       	ldd	r20, Z+16	; 0x10
    131e:	51 89       	ldd	r21, Z+17	; 0x11
    1320:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	3c 83       	std	Y+4, r19	; 0x04
    1328:	4d 83       	std	Y+5, r20	; 0x05
    132a:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
    132c:	10 c0       	rjmp	.+32     	; 0x134e <BPM_to_TMR2+0x15c>
				adjusted_count = adjusted_count - compare_value;
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	ad 81       	ldd	r26, Y+5	; 0x05
    1334:	be 81       	ldd	r27, Y+6	; 0x06
    1336:	2b 85       	ldd	r18, Y+11	; 0x0b
    1338:	3c 85       	ldd	r19, Y+12	; 0x0c
    133a:	4d 85       	ldd	r20, Y+13	; 0x0d
    133c:	5e 85       	ldd	r21, Y+14	; 0x0e
    133e:	82 1b       	sub	r24, r18
    1340:	93 0b       	sbc	r25, r19
    1342:	a4 0b       	sbc	r26, r20
    1344:	b5 0b       	sbc	r27, r21
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	ad 83       	std	Y+5, r26	; 0x05
    134c:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	4d 81       	ldd	r20, Y+5	; 0x05
    1354:	5e 81       	ldd	r21, Y+6	; 0x06
    1356:	8b 85       	ldd	r24, Y+11	; 0x0b
    1358:	9c 85       	ldd	r25, Y+12	; 0x0c
    135a:	ad 85       	ldd	r26, Y+13	; 0x0d
    135c:	be 85       	ldd	r27, Y+14	; 0x0e
    135e:	82 17       	cp	r24, r18
    1360:	93 07       	cpc	r25, r19
    1362:	a4 07       	cpc	r26, r20
    1364:	b5 07       	cpc	r27, r21
    1366:	18 f3       	brcs	.-58     	; 0x132e <BPM_to_TMR2+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	ad 81       	ldd	r26, Y+5	; 0x05
    136e:	be 81       	ldd	r27, Y+6	; 0x06
    1370:	e0 e0       	ldi	r30, 0x00	; 0
    1372:	f8 e0       	ldi	r31, 0x08	; 8
    1374:	80 a3       	std	Z+32, r24	; 0x20
    1376:	91 a3       	std	Z+33, r25	; 0x21
    1378:	02 c0       	rjmp	.+4      	; 0x137e <BPM_to_TMR2+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
    137a:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
    137e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1380:	9c 85       	ldd	r25, Y+12	; 0x0c
    1382:	ad 85       	ldd	r26, Y+13	; 0x0d
    1384:	be 85       	ldd	r27, Y+14	; 0x0e
    1386:	e0 e0       	ldi	r30, 0x00	; 0
    1388:	f8 e0       	ldi	r31, 0x08	; 8
    138a:	80 a7       	std	Z+40, r24	; 0x28
    138c:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
    138e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1390:	9c 85       	ldd	r25, Y+12	; 0x0c
    1392:	ad 85       	ldd	r26, Y+13	; 0x0d
    1394:	be 85       	ldd	r27, Y+14	; 0x0e
    1396:	68 e1       	ldi	r22, 0x18	; 24
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__udivmodhi4>
    139e:	66 a7       	std	Z+46, r22	; 0x2e
    13a0:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
    13a2:	80 91 01 08 	lds	r24, 0x0801
    13a6:	80 69       	ori	r24, 0x90	; 144
    13a8:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 93 00 08 	sts	0x0800, r24

	return;
}
    13b0:	ae 96       	adiw	r28, 0x2e	; 46
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <test_pot_banks>:
	}
	
}
*/

void test_pot_banks(){
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
	initialize_hardware();
    13cc:	0e 94 04 03 	call	0x608	; 0x608 <initialize_hardware>
	
	uint16_t pot_out_max = 10;
	uint16_t pot_out_min = 0;
    13d0:	c0 e0       	ldi	r28, 0x00	; 0
    13d2:	d0 e0       	ldi	r29, 0x00	; 0
*/

void test_pot_banks(){
	initialize_hardware();
	
	uint16_t pot_out_max = 10;
    13d4:	0a e0       	ldi	r16, 0x0A	; 10
    13d6:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t pot_out_min = 0;
	uint16_t pot_out_value = 0;
	
	while(1){
		read_hardware();
    13d8:	0e 94 8b 03 	call	0x716	; 0x716 <read_hardware>
		
		if (get_encoder() == TURN_CW){
    13dc:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 f4       	brne	.+36     	; 0x1408 <test_pot_banks+0x48>
			if (get_encoder_switch_state()){
    13e4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_encoder_switch_state>
    13e8:	88 23       	and	r24, r24
    13ea:	39 f0       	breq	.+14     	; 0x13fa <test_pot_banks+0x3a>
				if (pot_out_min < (pot_out_max - 1))
    13ec:	c8 01       	movw	r24, r16
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	c8 17       	cp	r28, r24
    13f2:	d9 07       	cpc	r29, r25
    13f4:	e0 f4       	brcc	.+56     	; 0x142e <test_pot_banks+0x6e>
					pot_out_min++;
    13f6:	21 96       	adiw	r28, 0x01	; 1
    13f8:	1a c0       	rjmp	.+52     	; 0x142e <test_pot_banks+0x6e>
			}					
			else if (pot_out_max < 999)
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	07 3e       	cpi	r16, 0xE7	; 231
    13fe:	18 07       	cpc	r17, r24
    1400:	b0 f4       	brcc	.+44     	; 0x142e <test_pot_banks+0x6e>
				pot_out_max++;
    1402:	0f 5f       	subi	r16, 0xFF	; 255
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	13 c0       	rjmp	.+38     	; 0x142e <test_pot_banks+0x6e>
		}
		else if (get_encoder() == TURN_CCW){
    1408:	0e 94 bd 01 	call	0x37a	; 0x37a <get_encoder>
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	79 f4       	brne	.+30     	; 0x142e <test_pot_banks+0x6e>
			if (get_encoder_switch_state()){
    1410:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_encoder_switch_state>
    1414:	88 23       	and	r24, r24
    1416:	21 f0       	breq	.+8      	; 0x1420 <test_pot_banks+0x60>
				if (pot_out_min > 0)
    1418:	20 97       	sbiw	r28, 0x00	; 0
    141a:	49 f0       	breq	.+18     	; 0x142e <test_pot_banks+0x6e>
					pot_out_min += -1;
    141c:	21 97       	sbiw	r28, 0x01	; 1
    141e:	07 c0       	rjmp	.+14     	; 0x142e <test_pot_banks+0x6e>
			}					
			else if (pot_out_max > (pot_out_min + 1))
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	80 17       	cp	r24, r16
    1426:	91 07       	cpc	r25, r17
    1428:	10 f4       	brcc	.+4      	; 0x142e <test_pot_banks+0x6e>
				pot_out_max += -1;
    142a:	01 50       	subi	r16, 0x01	; 1
    142c:	10 40       	sbci	r17, 0x00	; 0
		}
		
		pot_out_value = get_pot_value(2, pot_out_min, pot_out_max);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	be 01       	movw	r22, r28
    1432:	a8 01       	movw	r20, r16
    1434:	0e 94 c0 01 	call	0x380	; 0x380 <get_pot_value>
    1438:	7c 01       	movw	r14, r24
		
		if (get_toggle_switch_state())
    143a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_toggle_switch_state>
    143e:	88 23       	and	r24, r24
    1440:	11 f0       	breq	.+4      	; 0x1446 <test_pot_banks+0x86>
			set_seven_segment_LEDs(pot_out_value);
    1442:	c7 01       	movw	r24, r14
    1444:	07 c0       	rjmp	.+14     	; 0x1454 <test_pot_banks+0x94>
		else if (get_pushbutton_switch_state())
    1446:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <get_pushbutton_switch_state>
    144a:	88 23       	and	r24, r24
    144c:	11 f0       	breq	.+4      	; 0x1452 <test_pot_banks+0x92>
			set_seven_segment_LEDs(pot_out_min);
    144e:	ce 01       	movw	r24, r28
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <test_pot_banks+0x94>
		else
			set_seven_segment_LEDs(pot_out_max);
    1452:	c8 01       	movw	r24, r16
    1454:	0e 94 64 02 	call	0x4c8	; 0x4c8 <set_seven_segment_LEDs>
    1458:	bf cf       	rjmp	.-130    	; 0x13d8 <test_pot_banks+0x18>

0000145a <main>:
	}
}

int main(void) {

	test_xnor_in();
    145a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <test_xnor_in>
   
	return 0;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret

00001464 <generic_noteon_callback>:
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}

void generic_noteon_callback(MidiDevice * device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	26 97       	sbiw	r28, 0x06	; 6
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	6c 83       	std	Y+4, r22	; 0x04
    1474:	4d 83       	std	Y+5, r20	; 0x05
    1476:	2e 83       	std	Y+6, r18	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
    1478:	de 01       	movw	r26, r28
    147a:	11 96       	adiw	r26, 0x01	; 1
    147c:	fe 01       	movw	r30, r28
    147e:	34 96       	adiw	r30, 0x04	; 4
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	e1 f7       	brne	.-8      	; 0x1482 <generic_noteon_callback+0x1e>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
    148a:	80 91 93 22 	lds	r24, 0x2293
    148e:	8f 3f       	cpi	r24, 0xFF	; 255
    1490:	31 f0       	breq	.+12     	; 0x149e <generic_noteon_callback+0x3a>
		j++;
    1492:	80 91 93 22 	lds	r24, 0x2293
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	80 93 93 22 	sts	0x2293, r24
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <generic_noteon_callback+0x3e>
	else
		j = 0;
    149e:	10 92 93 22 	sts	0x2293, r1
	

}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <generic_catchall_callback>:

void generic_catchall_callback(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    14ae:	0f 93       	push	r16
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	26 97       	sbiw	r28, 0x06	; 6
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	4c 83       	std	Y+4, r20	; 0x04
    14c0:	2d 83       	std	Y+5, r18	; 0x05
    14c2:	0e 83       	std	Y+6, r16	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
    14c4:	de 01       	movw	r26, r28
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	fe 01       	movw	r30, r28
    14ca:	34 96       	adiw	r30, 0x04	; 4
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	01 90       	ld	r0, Z+
    14d0:	0d 92       	st	X+, r0
    14d2:	81 50       	subi	r24, 0x01	; 1
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <generic_catchall_callback+0x20>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
    14d6:	80 91 92 22 	lds	r24, 0x2292
    14da:	8f 3f       	cpi	r24, 0xFF	; 255
    14dc:	31 f0       	breq	.+12     	; 0x14ea <generic_catchall_callback+0x3c>
		j++;
    14de:	80 91 92 22 	lds	r24, 0x2292
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	80 93 92 22 	sts	0x2292, r24
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <generic_catchall_callback+0x40>
	else
		j = 0;
    14ea:	10 92 92 22 	sts	0x2292, r1
	

    14ee:	26 96       	adiw	r28, 0x06	; 6
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <serial_midi_send>:

#define MIDI_CHAN 0

static MidiDevice midi_device;

void serial_midi_send(MidiDevice* device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    14fc:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    14fe:	80 91 b1 09 	lds	r24, 0x09B1
    1502:	85 ff       	sbrs	r24, 5
    1504:	fc cf       	rjmp	.-8      	; 0x14fe <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
    1506:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    150a:	62 30       	cpi	r22, 0x02	; 2
    150c:	70 f0       	brcs	.+28     	; 0x152a <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    150e:	80 91 b1 09 	lds	r24, 0x09B1
    1512:	85 ff       	sbrs	r24, 5
    1514:	fc cf       	rjmp	.-8      	; 0x150e <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    1516:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    151a:	63 30       	cpi	r22, 0x03	; 3
    151c:	31 f4       	brne	.+12     	; 0x152a <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    151e:	80 91 b1 09 	lds	r24, 0x09B1
    1522:	85 ff       	sbrs	r24, 5
    1524:	fc cf       	rjmp	.-8      	; 0x151e <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    1526:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <serial_midi_device>:

MidiDevice * serial_midi_device() {
   return &midi_device;
}
    152e:	84 e9       	ldi	r24, 0x94	; 148
    1530:	92 e2       	ldi	r25, 0x22	; 34
    1532:	08 95       	ret

00001534 <serial_midi_init>:

void serial_midi_init(){
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
    1538:	c4 e9       	ldi	r28, 0x94	; 148
    153a:	d2 e2       	ldi	r29, 0x22	; 34
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <midi_device_init>
   midi_register_noteon_callback(&midi_device, generic_noteon_callback);
    1542:	ce 01       	movw	r24, r28
    1544:	62 e3       	ldi	r22, 0x32	; 50
    1546:	7a e0       	ldi	r23, 0x0A	; 10
    1548:	0e 94 a9 0c 	call	0x1952	; 0x1952 <midi_register_noteon_callback>
   midi_register_catchall_callback(&midi_device, generic_catchall_callback);
    154c:	ce 01       	movw	r24, r28
    154e:	67 e5       	ldi	r22, 0x57	; 87
    1550:	7a e0       	ldi	r23, 0x0A	; 10
    1552:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <midi_register_catchall_callback>
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    155c:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    155e:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1560:	63 83       	std	Z+3, r22	; 0x03
    1562:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    1564:	11 82       	std	Z+1, r1	; 0x01
    1566:	10 82       	st	Z, r1
}
    1568:	08 95       	ret

0000156a <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1576:	0e 94 2f 0b 	call	0x165e	; 0x165e <store_and_clear_interrupt>
    157a:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    157c:	29 81       	ldd	r18, Y+1	; 0x01
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	c9 01       	movw	r24, r18
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	6a 81       	ldd	r22, Y+2	; 0x02
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
    158c:	48 81       	ld	r20, Y
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	84 17       	cp	r24, r20
    1592:	95 07       	cpc	r25, r21
    1594:	29 f4       	brne	.+10     	; 0x15a0 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    1596:	80 2f       	mov	r24, r16
    1598:	0e 94 32 0b 	call	0x1664	; 0x1664 <restore_interrupt_setting>
      return false;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	13 c0       	rjmp	.+38     	; 0x15c6 <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    15aa:	29 81       	ldd	r18, Y+1	; 0x01
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	2f 5f       	subi	r18, 0xFF	; 255
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	6a 81       	ldd	r22, Y+2	; 0x02
    15b4:	c9 01       	movw	r24, r18
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
    15bc:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    15be:	80 2f       	mov	r24, r16
    15c0:	0e 94 32 0b 	call	0x1664	; 0x1664 <restore_interrupt_setting>
      return true;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	08 95       	ret

000015d0 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    15d8:	0e 94 2f 0b 	call	0x165e	; 0x165e <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    15dc:	29 81       	ldd	r18, Y+1	; 0x01
    15de:	98 81       	ld	r25, Y
    15e0:	29 17       	cp	r18, r25
    15e2:	10 f0       	brcs	.+4      	; 0x15e8 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    15e4:	12 2f       	mov	r17, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    15e8:	1a 81       	ldd	r17, Y+2	; 0x02
    15ea:	12 0f       	add	r17, r18
    15ec:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    15ee:	0e 94 32 0b 	call	0x1664	; 0x1664 <restore_interrupt_setting>
   return len;
}
    15f2:	81 2f       	mov	r24, r17
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	08 95       	ret

000015fc <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    15fc:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    15fe:	80 81       	ld	r24, Z
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	86 0f       	add	r24, r22
    1604:	91 1d       	adc	r25, r1
    1606:	62 81       	ldd	r22, Z+2	; 0x02
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
    160e:	03 80       	ldd	r0, Z+3	; 0x03
    1610:	f4 81       	ldd	r31, Z+4	; 0x04
    1612:	e0 2d       	mov	r30, r0
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
}
    1618:	80 81       	ld	r24, Z
    161a:	08 95       	ret

0000161c <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    162c:	69 83       	std	Y+1, r22	; 0x01
    162e:	0e 94 2f 0b 	call	0x165e	; 0x165e <store_and_clear_interrupt>
    1632:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1634:	f8 01       	movw	r30, r16
    1636:	20 81       	ld	r18, Z
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	69 81       	ldd	r22, Y+1	; 0x01
    163c:	26 0f       	add	r18, r22
    163e:	31 1d       	adc	r19, r1
    1640:	62 81       	ldd	r22, Z+2	; 0x02
    1642:	c9 01       	movw	r24, r18
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodhi4>
    164a:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    164c:	84 2f       	mov	r24, r20
    164e:	0e 94 32 0b 	call	0x1664	; 0x1664 <restore_interrupt_setting>
}
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    165e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    1660:	f8 94       	cli
    return sreg;
}
    1662:	08 95       	ret

00001664 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    1664:	8f bf       	out	0x3f, r24	; 63
}
    1666:	08 95       	ret

00001668 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1668:	88 1f       	adc	r24, r24
    166a:	88 27       	eor	r24, r24
    166c:	88 1f       	adc	r24, r24
    166e:	08 95       	ret

00001670 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	88 3f       	cpi	r24, 0xF8	; 248
    1674:	08 f4       	brcc	.+2      	; 0x1678 <midi_is_realtime+0x8>
    1676:	90 e0       	ldi	r25, 0x00	; 0
}
    1678:	89 2f       	mov	r24, r25
    167a:	08 95       	ret

0000167c <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	20 7f       	andi	r18, 0xF0	; 240
    1682:	30 70       	andi	r19, 0x00	; 0
    1684:	20 3b       	cpi	r18, 0xB0	; 176
    1686:	31 05       	cpc	r19, r1
    1688:	f1 f0       	breq	.+60     	; 0x16c6 <midi_packet_length+0x4a>
    168a:	21 3b       	cpi	r18, 0xB1	; 177
    168c:	31 05       	cpc	r19, r1
    168e:	54 f4       	brge	.+20     	; 0x16a4 <midi_packet_length+0x28>
    1690:	20 39       	cpi	r18, 0x90	; 144
    1692:	31 05       	cpc	r19, r1
    1694:	c1 f0       	breq	.+48     	; 0x16c6 <midi_packet_length+0x4a>
    1696:	20 3a       	cpi	r18, 0xA0	; 160
    1698:	31 05       	cpc	r19, r1
    169a:	a9 f0       	breq	.+42     	; 0x16c6 <midi_packet_length+0x4a>
    169c:	20 38       	cpi	r18, 0x80	; 128
    169e:	31 05       	cpc	r19, r1
    16a0:	e9 f4       	brne	.+58     	; 0x16dc <midi_packet_length+0x60>
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <midi_packet_length+0x4a>
    16a4:	20 3d       	cpi	r18, 0xD0	; 208
    16a6:	31 05       	cpc	r19, r1
    16a8:	d9 f0       	breq	.+54     	; 0x16e0 <midi_packet_length+0x64>
    16aa:	21 3d       	cpi	r18, 0xD1	; 209
    16ac:	31 05       	cpc	r19, r1
    16ae:	24 f4       	brge	.+8      	; 0x16b8 <midi_packet_length+0x3c>
    16b0:	20 3c       	cpi	r18, 0xC0	; 192
    16b2:	31 05       	cpc	r19, r1
    16b4:	99 f4       	brne	.+38     	; 0x16dc <midi_packet_length+0x60>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <midi_packet_length+0x64>
    16b8:	20 3e       	cpi	r18, 0xE0	; 224
    16ba:	31 05       	cpc	r19, r1
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <midi_packet_length+0x4a>
    16be:	20 3f       	cpi	r18, 0xF0	; 240
    16c0:	31 05       	cpc	r19, r1
    16c2:	61 f4       	brne	.+24     	; 0x16dc <midi_packet_length+0x60>
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    16ca:	e8 2f       	mov	r30, r24
    16cc:	e1 5f       	subi	r30, 0xF1	; 241
    16ce:	ef 30       	cpi	r30, 0x0F	; 15
    16d0:	48 f4       	brcc	.+18     	; 0x16e4 <midi_packet_length+0x68>
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	e0 5c       	subi	r30, 0xC0	; 192
    16d6:	ff 4d       	sbci	r31, 0xDF	; 223
    16d8:	80 81       	ld	r24, Z
    16da:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	08 95       	ret
    16e4:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    16e6:	08 95       	ret

000016e8 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    16e8:	0f 93       	push	r16
    16ea:	36 2f       	mov	r19, r22
    16ec:	54 2f       	mov	r21, r20
    16ee:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    16f0:	3f 70       	andi	r19, 0x0F	; 15
    16f2:	30 6b       	ori	r19, 0xB0	; 176
    16f4:	5f 77       	andi	r21, 0x7F	; 127
    16f6:	0f 77       	andi	r16, 0x7F	; 127
    16f8:	dc 01       	movw	r26, r24
    16fa:	ed 91       	ld	r30, X+
    16fc:	fc 91       	ld	r31, X
    16fe:	63 e0       	ldi	r22, 0x03	; 3
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	43 2f       	mov	r20, r19
    1704:	25 2f       	mov	r18, r21
    1706:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    170c:	0f 93       	push	r16
    170e:	36 2f       	mov	r19, r22
    1710:	54 2f       	mov	r21, r20
    1712:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1714:	3f 70       	andi	r19, 0x0F	; 15
    1716:	30 69       	ori	r19, 0x90	; 144
    1718:	5f 77       	andi	r21, 0x7F	; 127
    171a:	0f 77       	andi	r16, 0x7F	; 127
    171c:	dc 01       	movw	r26, r24
    171e:	ed 91       	ld	r30, X+
    1720:	fc 91       	ld	r31, X
    1722:	63 e0       	ldi	r22, 0x03	; 3
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	43 2f       	mov	r20, r19
    1728:	25 2f       	mov	r18, r21
    172a:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1730:	0f 93       	push	r16
    1732:	36 2f       	mov	r19, r22
    1734:	54 2f       	mov	r21, r20
    1736:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1738:	3f 70       	andi	r19, 0x0F	; 15
    173a:	30 68       	ori	r19, 0x80	; 128
    173c:	5f 77       	andi	r21, 0x7F	; 127
    173e:	0f 77       	andi	r16, 0x7F	; 127
    1740:	dc 01       	movw	r26, r24
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	63 e0       	ldi	r22, 0x03	; 3
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	43 2f       	mov	r20, r19
    174c:	25 2f       	mov	r18, r21
    174e:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1754:	0f 93       	push	r16
    1756:	36 2f       	mov	r19, r22
    1758:	54 2f       	mov	r21, r20
    175a:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    175c:	3f 70       	andi	r19, 0x0F	; 15
    175e:	30 6a       	ori	r19, 0xA0	; 160
    1760:	5f 77       	andi	r21, 0x7F	; 127
    1762:	0f 77       	andi	r16, 0x7F	; 127
    1764:	dc 01       	movw	r26, r24
    1766:	ed 91       	ld	r30, X+
    1768:	fc 91       	ld	r31, X
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	43 2f       	mov	r20, r19
    1770:	25 2f       	mov	r18, r21
    1772:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    177e:	20 e2       	ldi	r18, 0x20	; 32
    1780:	40 30       	cpi	r20, 0x00	; 0
    1782:	52 07       	cpc	r21, r18
    1784:	3c f4       	brge	.+14     	; 0x1794 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1786:	a0 ee       	ldi	r26, 0xE0	; 224
    1788:	40 30       	cpi	r20, 0x00	; 0
    178a:	5a 07       	cpc	r21, r26
    178c:	34 f0       	brlt	.+12     	; 0x179a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    178e:	00 50       	subi	r16, 0x00	; 0
    1790:	10 4e       	sbci	r17, 0xE0	; 224
    1792:	05 c0       	rjmp	.+10     	; 0x179e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1794:	0f ef       	ldi	r16, 0xFF	; 255
    1796:	1f e3       	ldi	r17, 0x3F	; 63
    1798:	02 c0       	rjmp	.+4      	; 0x179e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    179e:	46 2f       	mov	r20, r22
    17a0:	4f 70       	andi	r20, 0x0F	; 15
    17a2:	40 6e       	ori	r20, 0xE0	; 224
    17a4:	20 2f       	mov	r18, r16
    17a6:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    17a8:	00 0f       	add	r16, r16
    17aa:	01 2f       	mov	r16, r17
    17ac:	00 1f       	adc	r16, r16
    17ae:	11 0b       	sbc	r17, r17
    17b0:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    17b2:	0f 77       	andi	r16, 0x7F	; 127
    17b4:	dc 01       	movw	r26, r24
    17b6:	ed 91       	ld	r30, X+
    17b8:	fc 91       	ld	r31, X
    17ba:	63 e0       	ldi	r22, 0x03	; 3
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    17c6:	0f 93       	push	r16
    17c8:	36 2f       	mov	r19, r22
    17ca:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    17cc:	3f 70       	andi	r19, 0x0F	; 15
    17ce:	30 6c       	ori	r19, 0xC0	; 192
    17d0:	2f 77       	andi	r18, 0x7F	; 127
    17d2:	dc 01       	movw	r26, r24
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	43 2f       	mov	r20, r19
    17de:	00 e0       	ldi	r16, 0x00	; 0
    17e0:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    17e6:	0f 93       	push	r16
    17e8:	36 2f       	mov	r19, r22
    17ea:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    17ec:	3f 70       	andi	r19, 0x0F	; 15
    17ee:	30 6d       	ori	r19, 0xD0	; 208
    17f0:	2f 77       	andi	r18, 0x7F	; 127
    17f2:	dc 01       	movw	r26, r24
    17f4:	ed 91       	ld	r30, X+
    17f6:	fc 91       	ld	r31, X
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	43 2f       	mov	r20, r19
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1806:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1808:	dc 01       	movw	r26, r24
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	48 ef       	ldi	r20, 0xF8	; 248
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	00 e0       	ldi	r16, 0x00	; 0
    1818:	09 95       	icall
}
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    181e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1820:	dc 01       	movw	r26, r24
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	49 ef       	ldi	r20, 0xF9	; 249
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	09 95       	icall
}
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1836:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1838:	dc 01       	movw	r26, r24
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	00 e0       	ldi	r16, 0x00	; 0
    1848:	09 95       	icall
}
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    184e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1850:	dc 01       	movw	r26, r24
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	4b ef       	ldi	r20, 0xFB	; 251
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	00 e0       	ldi	r16, 0x00	; 0
    1860:	09 95       	icall
}
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1866:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1868:	dc 01       	movw	r26, r24
    186a:	ed 91       	ld	r30, X+
    186c:	fc 91       	ld	r31, X
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	4c ef       	ldi	r20, 0xFC	; 252
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	09 95       	icall
}
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    187e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1880:	dc 01       	movw	r26, r24
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	4e ef       	ldi	r20, 0xFE	; 254
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	00 e0       	ldi	r16, 0x00	; 0
    1890:	09 95       	icall
}
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1896:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1898:	dc 01       	movw	r26, r24
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	4f ef       	ldi	r20, 0xFF	; 255
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	09 95       	icall
}
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    18ae:	0f 93       	push	r16
    18b0:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    18b2:	2f 77       	andi	r18, 0x7F	; 127
    18b4:	dc 01       	movw	r26, r24
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	41 ef       	ldi	r20, 0xF1	; 241
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
   device->send_func(device, 3,
    18cc:	26 2f       	mov	r18, r22
    18ce:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    18d0:	8b 01       	movw	r16, r22
    18d2:	00 0f       	add	r16, r16
    18d4:	01 2f       	mov	r16, r17
    18d6:	00 1f       	adc	r16, r16
    18d8:	11 0b       	sbc	r17, r17
    18da:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    18dc:	0f 77       	andi	r16, 0x7F	; 127
    18de:	dc 01       	movw	r26, r24
    18e0:	ed 91       	ld	r30, X+
    18e2:	fc 91       	ld	r31, X
    18e4:	63 e0       	ldi	r22, 0x03	; 3
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	42 ef       	ldi	r20, 0xF2	; 242
    18ea:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    18f2:	0f 93       	push	r16
    18f4:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    18f6:	2f 77       	andi	r18, 0x7F	; 127
    18f8:	dc 01       	movw	r26, r24
    18fa:	ed 91       	ld	r30, X+
    18fc:	fc 91       	ld	r31, X
    18fe:	62 e0       	ldi	r22, 0x02	; 2
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	43 ef       	ldi	r20, 0xF3	; 243
    1904:	00 e0       	ldi	r16, 0x00	; 0
    1906:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    190c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    190e:	dc 01       	movw	r26, r24
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	46 ef       	ldi	r20, 0xF6	; 246
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	00 e0       	ldi	r16, 0x00	; 0
    191e:	09 95       	icall
}
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1924:	0f 93       	push	r16
    1926:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1928:	dc 01       	movw	r26, r24
    192a:	ed 91       	ld	r30, X+
    192c:	fc 91       	ld	r31, X
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	00 e0       	ldi	r16, 0x00	; 0
    1936:	09 95       	icall
}
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    193c:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    193e:	dc 01       	movw	r26, r24
    1940:	ed 91       	ld	r30, X+
    1942:	fc 91       	ld	r31, X
    1944:	09 95       	icall
}
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    194a:	fc 01       	movw	r30, r24
    194c:	62 83       	std	Z+2, r22	; 0x02
    194e:	73 83       	std	Z+3, r23	; 0x03
}
    1950:	08 95       	ret

00001952 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1952:	fc 01       	movw	r30, r24
    1954:	64 83       	std	Z+4, r22	; 0x04
    1956:	75 83       	std	Z+5, r23	; 0x05
}
    1958:	08 95       	ret

0000195a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    195a:	fc 01       	movw	r30, r24
    195c:	66 83       	std	Z+6, r22	; 0x06
    195e:	77 83       	std	Z+7, r23	; 0x07
}
    1960:	08 95       	ret

00001962 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1962:	fc 01       	movw	r30, r24
    1964:	60 87       	std	Z+8, r22	; 0x08
    1966:	71 87       	std	Z+9, r23	; 0x09
}
    1968:	08 95       	ret

0000196a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    196a:	fc 01       	movw	r30, r24
    196c:	62 87       	std	Z+10, r22	; 0x0a
    196e:	73 87       	std	Z+11, r23	; 0x0b
}
    1970:	08 95       	ret

00001972 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1972:	fc 01       	movw	r30, r24
    1974:	64 87       	std	Z+12, r22	; 0x0c
    1976:	75 87       	std	Z+13, r23	; 0x0d
}
    1978:	08 95       	ret

0000197a <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    197a:	fc 01       	movw	r30, r24
    197c:	66 87       	std	Z+14, r22	; 0x0e
    197e:	77 87       	std	Z+15, r23	; 0x0f
}
    1980:	08 95       	ret

00001982 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1982:	fc 01       	movw	r30, r24
    1984:	60 8b       	std	Z+16, r22	; 0x10
    1986:	71 8b       	std	Z+17, r23	; 0x11
}
    1988:	08 95       	ret

0000198a <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    198a:	fc 01       	movw	r30, r24
    198c:	62 8b       	std	Z+18, r22	; 0x12
    198e:	73 8b       	std	Z+19, r23	; 0x13
}
    1990:	08 95       	ret

00001992 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1992:	fc 01       	movw	r30, r24
    1994:	64 8b       	std	Z+20, r22	; 0x14
    1996:	75 8b       	std	Z+21, r23	; 0x15
}
    1998:	08 95       	ret

0000199a <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    199a:	fc 01       	movw	r30, r24
    199c:	66 8b       	std	Z+22, r22	; 0x16
    199e:	77 8b       	std	Z+23, r23	; 0x17
}
    19a0:	08 95       	ret

000019a2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    19a2:	fc 01       	movw	r30, r24
    19a4:	60 8f       	std	Z+24, r22	; 0x18
    19a6:	71 8f       	std	Z+25, r23	; 0x19
}
    19a8:	08 95       	ret

000019aa <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    19aa:	fc 01       	movw	r30, r24
    19ac:	62 8f       	std	Z+26, r22	; 0x1a
    19ae:	73 8f       	std	Z+27, r23	; 0x1b
}
    19b0:	08 95       	ret

000019b2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    19b2:	fc 01       	movw	r30, r24
    19b4:	64 8f       	std	Z+28, r22	; 0x1c
    19b6:	75 8f       	std	Z+29, r23	; 0x1d
}
    19b8:	08 95       	ret

000019ba <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    19ba:	fc 01       	movw	r30, r24
    19bc:	66 8f       	std	Z+30, r22	; 0x1e
    19be:	77 8f       	std	Z+31, r23	; 0x1f
}
    19c0:	08 95       	ret

000019c2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    19c8:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    19ca:	1e a2       	std	Y+38, r1	; 0x26
    19cc:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    19ce:	bc 01       	movw	r22, r24
    19d0:	68 5d       	subi	r22, 0xD8	; 216
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	88 51       	subi	r24, 0x18	; 24
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	40 ec       	ldi	r20, 0xC0	; 192
    19da:	0e 94 ae 0a 	call	0x155c	; 0x155c <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    19de:	1a 82       	std	Y+2, r1	; 0x02
    19e0:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    19e2:	1c 82       	std	Y+4, r1	; 0x04
    19e4:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    19e6:	1e 82       	std	Y+6, r1	; 0x06
    19e8:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    19ea:	18 86       	std	Y+8, r1	; 0x08
    19ec:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    19ee:	1a 86       	std	Y+10, r1	; 0x0a
    19f0:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    19f2:	1c 86       	std	Y+12, r1	; 0x0c
    19f4:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    19f6:	1e 86       	std	Y+14, r1	; 0x0e
    19f8:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    19fa:	18 8a       	std	Y+16, r1	; 0x10
    19fc:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    19fe:	1a 8a       	std	Y+18, r1	; 0x12
    1a00:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1a02:	1c 8a       	std	Y+20, r1	; 0x14
    1a04:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1a06:	1e 8a       	std	Y+22, r1	; 0x16
    1a08:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1a0a:	18 8e       	std	Y+24, r1	; 0x18
    1a0c:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1a0e:	1a 8e       	std	Y+26, r1	; 0x1a
    1a10:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1a12:	1c 8e       	std	Y+28, r1	; 0x1c
    1a14:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1a16:	1e 8e       	std	Y+30, r1	; 0x1e
    1a18:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1a1a:	18 a2       	std	Y+32, r1	; 0x20
    1a1c:	19 a2       	std	Y+33, r1	; 0x21
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1a3a:	e4 2f       	mov	r30, r20
    1a3c:	f5 2f       	mov	r31, r21
    1a3e:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1a40:	8c 01       	movw	r16, r24
    1a42:	08 51       	subi	r16, 0x18	; 24
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1a48:	f6 01       	movw	r30, r12
    1a4a:	61 91       	ld	r22, Z+
    1a4c:	6f 01       	movw	r12, r30
    1a4e:	c8 01       	movw	r24, r16
    1a50:	49 83       	std	Y+1, r20	; 0x01
    1a52:	0e 94 b5 0a 	call	0x156a	; 0x156a <bytequeue_enqueue>
    1a56:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1a58:	8c 2d       	mov	r24, r12
    1a5a:	84 1b       	sub	r24, r20
    1a5c:	8f 15       	cp	r24, r15
    1a5e:	a0 f3       	brcs	.-24     	; 0x1a48 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	df 90       	pop	r13
    1a6e:	cf 90       	pop	r12
    1a70:	08 95       	ret

00001a72 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1a72:	fc 01       	movw	r30, r24
    1a74:	60 83       	st	Z, r22
    1a76:	71 83       	std	Z+1, r23	; 0x01
}
    1a78:	08 95       	ret

00001a7a <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	60 a3       	std	Z+32, r22	; 0x20
    1a7e:	71 a3       	std	Z+33, r23	; 0x21
}
    1a80:	08 95       	ret

00001a82 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	ec 01       	movw	r28, r24
    1a94:	6b 01       	movw	r12, r22
    1a96:	14 2f       	mov	r17, r20
    1a98:	e2 2e       	mov	r14, r18
    1a9a:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1aa2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1aa4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1aa6:	30 97       	sbiw	r30, 0x00	; 0
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <midi_input_callbacks+0x2a>
    1aaa:	83 c0       	rjmp	.+262    	; 0x1bb2 <midi_input_callbacks+0x130>
    1aac:	95 c0       	rjmp	.+298    	; 0x1bd8 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1aae:	62 30       	cpi	r22, 0x02	; 2
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <midi_input_callbacks+0x34>
    1ab4:	42 c0       	rjmp	.+132    	; 0x1b3a <midi_input_callbacks+0xb8>
    1ab6:	63 30       	cpi	r22, 0x03	; 3
    1ab8:	71 05       	cpc	r23, r1
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <midi_input_callbacks+0x44>
    1abc:	61 30       	cpi	r22, 0x01	; 1
    1abe:	71 05       	cpc	r23, r1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <midi_input_callbacks+0x42>
    1ac2:	73 c0       	rjmp	.+230    	; 0x1baa <midi_input_callbacks+0x128>
    1ac4:	60 c0       	rjmp	.+192    	; 0x1b86 <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1ac6:	84 2f       	mov	r24, r20
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	80 7f       	andi	r24, 0xF0	; 240
    1acc:	90 70       	andi	r25, 0x00	; 0
    1ace:	80 3a       	cpi	r24, 0xA0	; 160
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <midi_input_callbacks+0x8a>
    1ad4:	81 3a       	cpi	r24, 0xA1	; 161
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	3c f4       	brge	.+14     	; 0x1ae8 <midi_input_callbacks+0x66>
    1ada:	80 38       	cpi	r24, 0x80	; 128
    1adc:	91 05       	cpc	r25, r1
    1ade:	99 f0       	breq	.+38     	; 0x1b06 <midi_input_callbacks+0x84>
    1ae0:	80 39       	cpi	r24, 0x90	; 144
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	f9 f4       	brne	.+62     	; 0x1b24 <midi_input_callbacks+0xa2>
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <midi_input_callbacks+0x7e>
    1ae8:	80 3e       	cpi	r24, 0xE0	; 224
    1aea:	91 05       	cpc	r25, r1
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <midi_input_callbacks+0x90>
    1aee:	80 3f       	cpi	r24, 0xF0	; 240
    1af0:	91 05       	cpc	r25, r1
    1af2:	91 f0       	breq	.+36     	; 0x1b18 <midi_input_callbacks+0x96>
    1af4:	80 3b       	cpi	r24, 0xB0	; 176
    1af6:	91 05       	cpc	r25, r1
    1af8:	a9 f4       	brne	.+42     	; 0x1b24 <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1afa:	ea 81       	ldd	r30, Y+2	; 0x02
    1afc:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1b00:	ec 81       	ldd	r30, Y+4	; 0x04
    1b02:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1b04:	11 c0       	rjmp	.+34     	; 0x1b28 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1b06:	ee 81       	ldd	r30, Y+6	; 0x06
    1b08:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1b0a:	0e c0       	rjmp	.+28     	; 0x1b28 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1b0c:	e8 85       	ldd	r30, Y+8	; 0x08
    1b0e:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1b10:	0b c0       	rjmp	.+22     	; 0x1b28 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1b12:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b14:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1b16:	08 c0       	rjmp	.+16     	; 0x1b28 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1b18:	42 3f       	cpi	r20, 0xF2	; 242
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <midi_input_callbacks+0x9c>
    1b1c:	5d c0       	rjmp	.+186    	; 0x1bd8 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1b1e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b20:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1b24:	e0 e0       	ldi	r30, 0x00	; 0
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <midi_input_callbacks+0xac>
    1b2c:	55 c0       	rjmp	.+170    	; 0x1bd8 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1b2e:	ce 01       	movw	r24, r28
    1b30:	61 2f       	mov	r22, r17
    1b32:	4e 2d       	mov	r20, r14
    1b34:	2f 2d       	mov	r18, r15
    1b36:	09 95       	icall
    1b38:	42 c0       	rjmp	.+132    	; 0x1bbe <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1b3a:	84 2f       	mov	r24, r20
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	80 3d       	cpi	r24, 0xD0	; 208
    1b44:	91 05       	cpc	r25, r1
    1b46:	49 f0       	breq	.+18     	; 0x1b5a <midi_input_callbacks+0xd8>
    1b48:	80 3f       	cpi	r24, 0xF0	; 240
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	49 f0       	breq	.+18     	; 0x1b60 <midi_input_callbacks+0xde>
    1b4e:	80 3c       	cpi	r24, 0xC0	; 192
    1b50:	91 05       	cpc	r25, r1
    1b52:	81 f4       	brne	.+32     	; 0x1b74 <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1b54:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b56:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1b5a:	e8 89       	ldd	r30, Y+16	; 0x10
    1b5c:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1b60:	43 3f       	cpi	r20, 0xF3	; 243
    1b62:	19 f4       	brne	.+6      	; 0x1b6a <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1b64:	ea 89       	ldd	r30, Y+18	; 0x12
    1b66:	fb 89       	ldd	r31, Y+19	; 0x13
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1b6a:	41 3f       	cpi	r20, 0xF1	; 241
    1b6c:	a9 f5       	brne	.+106    	; 0x1bd8 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1b6e:	ec 89       	ldd	r30, Y+20	; 0x14
    1b70:	fd 89       	ldd	r31, Y+21	; 0x15
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1b74:	e0 e0       	ldi	r30, 0x00	; 0
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1b78:	30 97       	sbiw	r30, 0x00	; 0
    1b7a:	71 f1       	breq	.+92     	; 0x1bd8 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	61 2f       	mov	r22, r17
    1b80:	4e 2d       	mov	r20, r14
    1b82:	09 95       	icall
    1b84:	1c c0       	rjmp	.+56     	; 0x1bbe <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1b86:	84 2f       	mov	r24, r20
    1b88:	0e 94 38 0b 	call	0x1670	; 0x1670 <midi_is_realtime>
    1b8c:	88 23       	and	r24, r24
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1b90:	ee 89       	ldd	r30, Y+22	; 0x16
    1b92:	ff 89       	ldd	r31, Y+23	; 0x17
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1b96:	16 3f       	cpi	r17, 0xF6	; 246
    1b98:	f9 f4       	brne	.+62     	; 0x1bd8 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1b9a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b9c:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1b9e:	30 97       	sbiw	r30, 0x00	; 0
    1ba0:	d9 f0       	breq	.+54     	; 0x1bd8 <midi_input_callbacks+0x156>
                  func(device, byte0);
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	61 2f       	mov	r22, r17
    1ba6:	09 95       	icall
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1baa:	64 30       	cpi	r22, 0x04	; 4
    1bac:	71 05       	cpc	r23, r1
    1bae:	90 f4       	brcc	.+36     	; 0x1bd4 <midi_input_callbacks+0x152>
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	41 2f       	mov	r20, r17
    1bb8:	2e 2d       	mov	r18, r14
    1bba:	0f 2d       	mov	r16, r15
    1bbc:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1bbe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1bc0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1bc2:	30 97       	sbiw	r30, 0x00	; 0
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	b6 01       	movw	r22, r12
    1bca:	41 2f       	mov	r20, r17
    1bcc:	2e 2d       	mov	r18, r14
    1bce:	0f 2d       	mov	r16, r15
    1bd0:	09 95       	icall
    1bd2:	07 c0       	rjmp	.+14     	; 0x1be2 <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1bd4:	cc 24       	eor	r12, r12
    1bd6:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1bd8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1bda:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	49 f7       	brne	.-46     	; 0x1bb2 <midi_input_callbacks+0x130>
    1be0:	ee cf       	rjmp	.-36     	; 0x1bbe <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	08 95       	ret

00001bf4 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
    1c02:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1c04:	86 2f       	mov	r24, r22
    1c06:	0e 94 38 0b 	call	0x1670	; 0x1670 <midi_is_realtime>
    1c0a:	88 23       	and	r24, r24
    1c0c:	69 f0       	breq	.+26     	; 0x1c28 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1c0e:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1c14:	ce 01       	movw	r24, r28
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	41 2f       	mov	r20, r17
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <midi_input_callbacks>
      device->input_state = state;
    1c24:	ed a2       	std	Y+37, r14	; 0x25
    1c26:	7e c0       	rjmp	.+252    	; 0x1d24 <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1c28:	81 2f       	mov	r24, r17
    1c2a:	0e 94 34 0b 	call	0x1668	; 0x1668 <midi_is_statusbyte>
    1c2e:	4d a1       	ldd	r20, Y+37	; 0x25
    1c30:	88 23       	and	r24, r24
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <midi_process_byte+0x42>
    1c34:	42 c0       	rjmp	.+132    	; 0x1cba <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1c36:	44 30       	cpi	r20, 0x04	; 4
    1c38:	29 f0       	breq	.+10     	; 0x1c44 <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1c3a:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	8e a3       	std	Y+38, r24	; 0x26
    1c42:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1c44:	81 2f       	mov	r24, r17
    1c46:	0e 94 3e 0b 	call	0x167c	; 0x167c <midi_packet_length>
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	39 f0       	breq	.+14     	; 0x1c5c <midi_process_byte+0x68>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	78 f0       	brcs	.+30     	; 0x1c70 <midi_process_byte+0x7c>
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	59 f0       	breq	.+22     	; 0x1c6c <midi_process_byte+0x78>
    1c56:	83 30       	cpi	r24, 0x03	; 3
    1c58:	61 f5       	brne	.+88     	; 0x1cb2 <midi_process_byte+0xbe>
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1c5c:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1c5e:	ce 01       	movw	r24, r28
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	41 2f       	mov	r20, r17
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	00 e0       	ldi	r16, 0x00	; 0
    1c6a:	1f c0       	rjmp	.+62     	; 0x1caa <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1c6c:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1c6e:	5a c0       	rjmp	.+180    	; 0x1d24 <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1c70:	10 3f       	cpi	r17, 0xF0	; 240
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <midi_process_byte+0x86>
    1c74:	17 3f       	cpi	r17, 0xF7	; 247
    1c76:	e9 f4       	brne	.+58     	; 0x1cb2 <midi_process_byte+0xbe>
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1c7a:	84 e0       	ldi	r24, 0x04	; 4
    1c7c:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1c7e:	1a a3       	std	Y+34, r17	; 0x22
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    1c82:	2e a1       	ldd	r18, Y+38	; 0x26
    1c84:	3f a1       	ldd	r19, Y+39	; 0x27
    1c86:	c9 01       	movw	r24, r18
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__udivmodhi4>
    1c90:	8c 0f       	add	r24, r28
    1c92:	9d 1f       	adc	r25, r29
    1c94:	fc 01       	movw	r30, r24
    1c96:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1c98:	b9 01       	movw	r22, r18
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	6e a3       	std	Y+38, r22	; 0x26
    1ca0:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	4a a1       	ldd	r20, Y+34	; 0x22
    1ca6:	2b a1       	ldd	r18, Y+35	; 0x23
    1ca8:	0c a1       	ldd	r16, Y+36	; 0x24
    1caa:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1cae:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1cb0:	39 c0       	rjmp	.+114    	; 0x1d24 <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    1cb2:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1cb4:	1e a2       	std	Y+38, r1	; 0x26
    1cb6:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1cb8:	35 c0       	rjmp	.+106    	; 0x1d24 <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1cba:	44 23       	and	r20, r20
    1cbc:	99 f1       	breq	.+102    	; 0x1d24 <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1cbe:	2e a1       	ldd	r18, Y+38	; 0x26
    1cc0:	3f a1       	ldd	r19, Y+39	; 0x27
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	63 e0       	ldi	r22, 0x03	; 3
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__udivmodhi4>
    1ccc:	7c 01       	movw	r14, r24
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f9 1f       	adc	r31, r25
    1cd4:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1cd6:	b9 01       	movw	r22, r18
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	6e a3       	std	Y+38, r22	; 0x26
    1cde:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	91 f0       	breq	.+36     	; 0x1d0a <midi_process_byte+0x116>
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	e8 16       	cp	r14, r24
    1cea:	f1 04       	cpc	r15, r1
    1cec:	d9 f4       	brne	.+54     	; 0x1d24 <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1cee:	ce 01       	movw	r24, r28
    1cf0:	4a a1       	ldd	r20, Y+34	; 0x22
    1cf2:	2b a1       	ldd	r18, Y+35	; 0x23
    1cf4:	0c a1       	ldd	r16, Y+36	; 0x24
    1cf6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	84 30       	cpi	r24, 0x04	; 4
    1cfe:	91 f0       	breq	.+36     	; 0x1d24 <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	8e a3       	std	Y+38, r24	; 0x26
    1d06:	9f a3       	std	Y+39, r25	; 0x27
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1d0a:	42 30       	cpi	r20, 0x02	; 2
    1d0c:	59 f4       	brne	.+22     	; 0x1d24 <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1d0e:	ce 01       	movw	r24, r28
    1d10:	4a a1       	ldd	r20, Y+34	; 0x22
    1d12:	2b a1       	ldd	r18, Y+35	; 0x23
    1d14:	00 e0       	ldi	r16, 0x00	; 0
    1d16:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1d20:	ee a2       	std	Y+38, r14	; 0x26
    1d22:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <midi_device_process+0xe>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	8c 01       	movw	r16, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1d48:	dc 01       	movw	r26, r24
    1d4a:	90 96       	adiw	r26, 0x20	; 32
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	91 97       	sbiw	r26, 0x21	; 33
    1d52:	30 97       	sbiw	r30, 0x00	; 0
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <midi_device_process+0x26>
      device->pre_input_process_callback(device);
    1d56:	09 95       	icall

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1d58:	88 ee       	ldi	r24, 0xE8	; 232
    1d5a:	e8 2e       	mov	r14, r24
    1d5c:	f1 2c       	mov	r15, r1
    1d5e:	e0 0e       	add	r14, r16
    1d60:	f1 1e       	adc	r15, r17
    1d62:	c7 01       	movw	r24, r14
    1d64:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <bytequeue_length>
    1d68:	89 83       	std	Y+1, r24	; 0x01
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1d6a:	1a 82       	std	Y+2, r1	; 0x02
    1d6c:	1b 82       	std	Y+3, r1	; 0x03
    1d6e:	11 c0       	rjmp	.+34     	; 0x1d92 <midi_device_process+0x60>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1d70:	c7 01       	movw	r24, r14
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <bytequeue_get>
    1d78:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1d80:	c7 01       	movw	r24, r14
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	0e 94 0e 0b 	call	0x161c	; 0x161c <bytequeue_remove>

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	9b 83       	std	Y+3, r25	; 0x03
    1d92:	2a 81       	ldd	r18, Y+2	; 0x02
    1d94:	3b 81       	ldd	r19, Y+3	; 0x03
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	40 f3       	brcs	.-48     	; 0x1d70 <midi_device_process+0x3e>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1da0:	23 96       	adiw	r28, 0x03	; 3
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	08 95       	ret

00001db4 <__fixunssfsi>:
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	7b 01       	movw	r14, r22
    1dbe:	8c 01       	movw	r16, r24
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	5f e4       	ldi	r21, 0x4F	; 79
    1dc8:	0e 94 86 12 	call	0x250c	; 0x250c <__gesf2>
    1dcc:	87 fd       	sbrc	r24, 7
    1dce:	11 c0       	rjmp	.+34     	; 0x1df2 <__fixunssfsi+0x3e>
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	5f e4       	ldi	r21, 0x4F	; 79
    1ddc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__subsf3>
    1de0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fixsfsi>
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	20 50       	subi	r18, 0x00	; 0
    1dea:	30 40       	sbci	r19, 0x00	; 0
    1dec:	40 40       	sbci	r20, 0x00	; 0
    1dee:	50 48       	sbci	r21, 0x80	; 128
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <__fixunssfsi+0x4a>
    1df2:	c8 01       	movw	r24, r16
    1df4:	b7 01       	movw	r22, r14
    1df6:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fixsfsi>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	b9 01       	movw	r22, r18
    1e00:	ca 01       	movw	r24, r20
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	ff 90       	pop	r15
    1e08:	ef 90       	pop	r14
    1e0a:	08 95       	ret

00001e0c <_fpadd_parts>:
    1e0c:	a0 e0       	ldi	r26, 0x00	; 0
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ec e0       	ldi	r30, 0x0C	; 12
    1e12:	ff e0       	ldi	r31, 0x0F	; 15
    1e14:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x8>
    1e18:	fc 01       	movw	r30, r24
    1e1a:	ea 01       	movw	r28, r20
    1e1c:	80 81       	ld	r24, Z
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <_fpadd_parts+0x18>
    1e22:	38 c1       	rjmp	.+624    	; 0x2094 <_fpadd_parts+0x288>
    1e24:	db 01       	movw	r26, r22
    1e26:	9c 91       	ld	r25, X
    1e28:	92 30       	cpi	r25, 0x02	; 2
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <_fpadd_parts+0x22>
    1e2c:	30 c1       	rjmp	.+608    	; 0x208e <_fpadd_parts+0x282>
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	59 f4       	brne	.+22     	; 0x1e48 <_fpadd_parts+0x3c>
    1e32:	94 30       	cpi	r25, 0x04	; 4
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <_fpadd_parts+0x2c>
    1e36:	2e c1       	rjmp	.+604    	; 0x2094 <_fpadd_parts+0x288>
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	11 96       	adiw	r26, 0x01	; 1
    1e3c:	8c 91       	ld	r24, X
    1e3e:	11 97       	sbiw	r26, 0x01	; 1
    1e40:	98 17       	cp	r25, r24
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <_fpadd_parts+0x3a>
    1e44:	21 c1       	rjmp	.+578    	; 0x2088 <_fpadd_parts+0x27c>
    1e46:	26 c1       	rjmp	.+588    	; 0x2094 <_fpadd_parts+0x288>
    1e48:	94 30       	cpi	r25, 0x04	; 4
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <_fpadd_parts+0x42>
    1e4c:	20 c1       	rjmp	.+576    	; 0x208e <_fpadd_parts+0x282>
    1e4e:	92 30       	cpi	r25, 0x02	; 2
    1e50:	b1 f4       	brne	.+44     	; 0x1e7e <_fpadd_parts+0x72>
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <_fpadd_parts+0x4c>
    1e56:	1e c1       	rjmp	.+572    	; 0x2094 <_fpadd_parts+0x288>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	af 01       	movw	r20, r30
    1e5c:	28 e0       	ldi	r18, 0x08	; 8
    1e5e:	da 01       	movw	r26, r20
    1e60:	0d 90       	ld	r0, X+
    1e62:	ad 01       	movw	r20, r26
    1e64:	dc 01       	movw	r26, r24
    1e66:	0d 92       	st	X+, r0
    1e68:	cd 01       	movw	r24, r26
    1e6a:	21 50       	subi	r18, 0x01	; 1
    1e6c:	c1 f7       	brne	.-16     	; 0x1e5e <_fpadd_parts+0x52>
    1e6e:	db 01       	movw	r26, r22
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	8c 91       	ld	r24, X
    1e74:	11 97       	sbiw	r26, 0x01	; 1
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	89 23       	and	r24, r25
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	0a c1       	rjmp	.+532    	; 0x2092 <_fpadd_parts+0x286>
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <_fpadd_parts+0x78>
    1e82:	05 c1       	rjmp	.+522    	; 0x208e <_fpadd_parts+0x282>
    1e84:	c2 80       	ldd	r12, Z+2	; 0x02
    1e86:	d3 80       	ldd	r13, Z+3	; 0x03
    1e88:	db 01       	movw	r26, r22
    1e8a:	12 96       	adiw	r26, 0x02	; 2
    1e8c:	6d 90       	ld	r6, X+
    1e8e:	7c 90       	ld	r7, X
    1e90:	13 97       	sbiw	r26, 0x03	; 3
    1e92:	24 81       	ldd	r18, Z+4	; 0x04
    1e94:	35 81       	ldd	r19, Z+5	; 0x05
    1e96:	46 81       	ldd	r20, Z+6	; 0x06
    1e98:	57 81       	ldd	r21, Z+7	; 0x07
    1e9a:	14 96       	adiw	r26, 0x04	; 4
    1e9c:	ed 90       	ld	r14, X+
    1e9e:	fd 90       	ld	r15, X+
    1ea0:	0d 91       	ld	r16, X+
    1ea2:	1c 91       	ld	r17, X
    1ea4:	17 97       	sbiw	r26, 0x07	; 7
    1ea6:	c6 01       	movw	r24, r12
    1ea8:	86 19       	sub	r24, r6
    1eaa:	97 09       	sbc	r25, r7
    1eac:	5c 01       	movw	r10, r24
    1eae:	97 ff       	sbrs	r25, 7
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <_fpadd_parts+0xae>
    1eb2:	aa 24       	eor	r10, r10
    1eb4:	bb 24       	eor	r11, r11
    1eb6:	a8 1a       	sub	r10, r24
    1eb8:	b9 0a       	sbc	r11, r25
    1eba:	b0 e2       	ldi	r27, 0x20	; 32
    1ebc:	ab 16       	cp	r10, r27
    1ebe:	b1 04       	cpc	r11, r1
    1ec0:	0c f0       	brlt	.+2      	; 0x1ec4 <_fpadd_parts+0xb8>
    1ec2:	61 c0       	rjmp	.+194    	; 0x1f86 <_fpadd_parts+0x17a>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	19 06       	cpc	r1, r25
    1ec8:	6c f5       	brge	.+90     	; 0x1f24 <_fpadd_parts+0x118>
    1eca:	37 01       	movw	r6, r14
    1ecc:	48 01       	movw	r8, r16
    1ece:	0a 2c       	mov	r0, r10
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <_fpadd_parts+0xce>
    1ed2:	96 94       	lsr	r9
    1ed4:	87 94       	ror	r8
    1ed6:	77 94       	ror	r7
    1ed8:	67 94       	ror	r6
    1eda:	0a 94       	dec	r0
    1edc:	d2 f7       	brpl	.-12     	; 0x1ed2 <_fpadd_parts+0xc6>
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	0a 2c       	mov	r0, r10
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <_fpadd_parts+0xe6>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	0a 94       	dec	r0
    1ef4:	d2 f7       	brpl	.-12     	; 0x1eea <_fpadd_parts+0xde>
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	a1 09       	sbc	r26, r1
    1efa:	b1 09       	sbc	r27, r1
    1efc:	8e 21       	and	r24, r14
    1efe:	9f 21       	and	r25, r15
    1f00:	a0 23       	and	r26, r16
    1f02:	b1 23       	and	r27, r17
    1f04:	ee 24       	eor	r14, r14
    1f06:	ff 24       	eor	r15, r15
    1f08:	87 01       	movw	r16, r14
    1f0a:	e3 94       	inc	r14
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	a1 05       	cpc	r26, r1
    1f10:	b1 05       	cpc	r27, r1
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <_fpadd_parts+0x10e>
    1f14:	ee 24       	eor	r14, r14
    1f16:	ff 24       	eor	r15, r15
    1f18:	87 01       	movw	r16, r14
    1f1a:	e6 28       	or	r14, r6
    1f1c:	f7 28       	or	r15, r7
    1f1e:	08 29       	or	r16, r8
    1f20:	19 29       	or	r17, r9
    1f22:	3c c0       	rjmp	.+120    	; 0x1f9c <_fpadd_parts+0x190>
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d1 f1       	breq	.+116    	; 0x1f9c <_fpadd_parts+0x190>
    1f28:	ca 0c       	add	r12, r10
    1f2a:	db 1c       	adc	r13, r11
    1f2c:	39 01       	movw	r6, r18
    1f2e:	4a 01       	movw	r8, r20
    1f30:	0a 2c       	mov	r0, r10
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <_fpadd_parts+0x130>
    1f34:	96 94       	lsr	r9
    1f36:	87 94       	ror	r8
    1f38:	77 94       	ror	r7
    1f3a:	67 94       	ror	r6
    1f3c:	0a 94       	dec	r0
    1f3e:	d2 f7       	brpl	.-12     	; 0x1f34 <_fpadd_parts+0x128>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	0a 2c       	mov	r0, r10
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <_fpadd_parts+0x148>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	aa 1f       	adc	r26, r26
    1f52:	bb 1f       	adc	r27, r27
    1f54:	0a 94       	dec	r0
    1f56:	d2 f7       	brpl	.-12     	; 0x1f4c <_fpadd_parts+0x140>
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	a1 09       	sbc	r26, r1
    1f5c:	b1 09       	sbc	r27, r1
    1f5e:	82 23       	and	r24, r18
    1f60:	93 23       	and	r25, r19
    1f62:	a4 23       	and	r26, r20
    1f64:	b5 23       	and	r27, r21
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	a1 05       	cpc	r26, r1
    1f72:	b1 05       	cpc	r27, r1
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <_fpadd_parts+0x170>
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	a9 01       	movw	r20, r18
    1f7c:	26 29       	or	r18, r6
    1f7e:	37 29       	or	r19, r7
    1f80:	48 29       	or	r20, r8
    1f82:	59 29       	or	r21, r9
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <_fpadd_parts+0x190>
    1f86:	6c 14       	cp	r6, r12
    1f88:	7d 04       	cpc	r7, r13
    1f8a:	24 f4       	brge	.+8      	; 0x1f94 <_fpadd_parts+0x188>
    1f8c:	ee 24       	eor	r14, r14
    1f8e:	ff 24       	eor	r15, r15
    1f90:	87 01       	movw	r16, r14
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <_fpadd_parts+0x190>
    1f94:	63 01       	movw	r12, r6
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	fb 01       	movw	r30, r22
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	89 17       	cp	r24, r25
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <_fpadd_parts+0x19c>
    1fa6:	45 c0       	rjmp	.+138    	; 0x2032 <_fpadd_parts+0x226>
    1fa8:	88 23       	and	r24, r24
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <_fpadd_parts+0x1b2>
    1fac:	d8 01       	movw	r26, r16
    1fae:	c7 01       	movw	r24, r14
    1fb0:	82 1b       	sub	r24, r18
    1fb2:	93 0b       	sbc	r25, r19
    1fb4:	a4 0b       	sbc	r26, r20
    1fb6:	b5 0b       	sbc	r27, r21
    1fb8:	9c 01       	movw	r18, r24
    1fba:	ad 01       	movw	r20, r26
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <_fpadd_parts+0x1ba>
    1fbe:	2e 19       	sub	r18, r14
    1fc0:	3f 09       	sbc	r19, r15
    1fc2:	40 0b       	sbc	r20, r16
    1fc4:	51 0b       	sbc	r21, r17
    1fc6:	57 fd       	sbrc	r21, 7
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <_fpadd_parts+0x1c6>
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	ca 82       	std	Y+2, r12	; 0x02
    1fce:	db 82       	std	Y+3, r13	; 0x03
    1fd0:	0b c0       	rjmp	.+22     	; 0x1fe8 <_fpadd_parts+0x1dc>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	ca 82       	std	Y+2, r12	; 0x02
    1fd8:	db 82       	std	Y+3, r13	; 0x03
    1fda:	50 95       	com	r21
    1fdc:	40 95       	com	r20
    1fde:	30 95       	com	r19
    1fe0:	21 95       	neg	r18
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	3d 83       	std	Y+5, r19	; 0x05
    1fec:	4e 83       	std	Y+6, r20	; 0x06
    1fee:	5f 83       	std	Y+7, r21	; 0x07
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <_fpadd_parts+0x200>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	8c 83       	std	Y+4, r24	; 0x04
    1ffc:	9d 83       	std	Y+5, r25	; 0x05
    1ffe:	ae 83       	std	Y+6, r26	; 0x06
    2000:	bf 83       	std	Y+7, r27	; 0x07
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	8a 83       	std	Y+2, r24	; 0x02
    200a:	9b 83       	std	Y+3, r25	; 0x03
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	ae 81       	ldd	r26, Y+6	; 0x06
    2012:	bf 81       	ldd	r27, Y+7	; 0x07
    2014:	9c 01       	movw	r18, r24
    2016:	ad 01       	movw	r20, r26
    2018:	21 50       	subi	r18, 0x01	; 1
    201a:	30 40       	sbci	r19, 0x00	; 0
    201c:	40 40       	sbci	r20, 0x00	; 0
    201e:	50 40       	sbci	r21, 0x00	; 0
    2020:	2f 3f       	cpi	r18, 0xFF	; 255
    2022:	ef ef       	ldi	r30, 0xFF	; 255
    2024:	3e 07       	cpc	r19, r30
    2026:	ef ef       	ldi	r30, 0xFF	; 255
    2028:	4e 07       	cpc	r20, r30
    202a:	ef e3       	ldi	r30, 0x3F	; 63
    202c:	5e 07       	cpc	r21, r30
    202e:	08 f3       	brcs	.-62     	; 0x1ff2 <_fpadd_parts+0x1e6>
    2030:	0b c0       	rjmp	.+22     	; 0x2048 <_fpadd_parts+0x23c>
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	ca 82       	std	Y+2, r12	; 0x02
    2036:	db 82       	std	Y+3, r13	; 0x03
    2038:	2e 0d       	add	r18, r14
    203a:	3f 1d       	adc	r19, r15
    203c:	40 1f       	adc	r20, r16
    203e:	51 1f       	adc	r21, r17
    2040:	2c 83       	std	Y+4, r18	; 0x04
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	4e 83       	std	Y+6, r20	; 0x06
    2046:	5f 83       	std	Y+7, r21	; 0x07
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	88 83       	st	Y, r24
    204c:	2c 81       	ldd	r18, Y+4	; 0x04
    204e:	3d 81       	ldd	r19, Y+5	; 0x05
    2050:	4e 81       	ldd	r20, Y+6	; 0x06
    2052:	5f 81       	ldd	r21, Y+7	; 0x07
    2054:	57 ff       	sbrs	r21, 7
    2056:	1d c0       	rjmp	.+58     	; 0x2092 <_fpadd_parts+0x286>
    2058:	da 01       	movw	r26, r20
    205a:	c9 01       	movw	r24, r18
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	a0 70       	andi	r26, 0x00	; 0
    2062:	b0 70       	andi	r27, 0x00	; 0
    2064:	56 95       	lsr	r21
    2066:	47 95       	ror	r20
    2068:	37 95       	ror	r19
    206a:	27 95       	ror	r18
    206c:	82 2b       	or	r24, r18
    206e:	93 2b       	or	r25, r19
    2070:	a4 2b       	or	r26, r20
    2072:	b5 2b       	or	r27, r21
    2074:	8c 83       	std	Y+4, r24	; 0x04
    2076:	9d 83       	std	Y+5, r25	; 0x05
    2078:	ae 83       	std	Y+6, r26	; 0x06
    207a:	bf 83       	std	Y+7, r27	; 0x07
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	8a 83       	std	Y+2, r24	; 0x02
    2084:	9b 83       	std	Y+3, r25	; 0x03
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <_fpadd_parts+0x286>
    2088:	ef e4       	ldi	r30, 0x4F	; 79
    208a:	f0 e2       	ldi	r31, 0x20	; 32
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <_fpadd_parts+0x288>
    208e:	fb 01       	movw	r30, r22
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <_fpadd_parts+0x288>
    2092:	fe 01       	movw	r30, r28
    2094:	cf 01       	movw	r24, r30
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	ee e0       	ldi	r30, 0x0E	; 14
    209c:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__epilogue_restores__+0x8>

000020a0 <__addsf3>:
    20a0:	a0 e2       	ldi	r26, 0x20	; 32
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e1       	ldi	r31, 0x10	; 16
    20a8:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
    20ac:	69 83       	std	Y+1, r22	; 0x01
    20ae:	7a 83       	std	Y+2, r23	; 0x02
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	2d 83       	std	Y+5, r18	; 0x05
    20b6:	3e 83       	std	Y+6, r19	; 0x06
    20b8:	4f 83       	std	Y+7, r20	; 0x07
    20ba:	58 87       	std	Y+8, r21	; 0x08
    20bc:	89 e0       	ldi	r24, 0x09	; 9
    20be:	e8 2e       	mov	r14, r24
    20c0:	f1 2c       	mov	r15, r1
    20c2:	ec 0e       	add	r14, r28
    20c4:	fd 1e       	adc	r15, r29
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	b7 01       	movw	r22, r14
    20cc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    20d0:	8e 01       	movw	r16, r28
    20d2:	0f 5e       	subi	r16, 0xEF	; 239
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	ce 01       	movw	r24, r28
    20d8:	05 96       	adiw	r24, 0x05	; 5
    20da:	b8 01       	movw	r22, r16
    20dc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    20e0:	c7 01       	movw	r24, r14
    20e2:	b8 01       	movw	r22, r16
    20e4:	ae 01       	movw	r20, r28
    20e6:	47 5e       	subi	r20, 0xE7	; 231
    20e8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_fpadd_parts>
    20ee:	0e 94 0a 14 	call	0x2814	; 0x2814 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e6 e0       	ldi	r30, 0x06	; 6
    20f6:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

000020fa <__subsf3>:
    20fa:	a0 e2       	ldi	r26, 0x20	; 32
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	8e 01       	movw	r16, r28
    2118:	07 5f       	subi	r16, 0xF7	; 247
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	ce 01       	movw	r24, r28
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	b8 01       	movw	r22, r16
    2122:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2126:	91 e1       	ldi	r25, 0x11	; 17
    2128:	e9 2e       	mov	r14, r25
    212a:	f1 2c       	mov	r15, r1
    212c:	ec 0e       	add	r14, r28
    212e:	fd 1e       	adc	r15, r29
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b7 01       	movw	r22, r14
    2136:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    213a:	8a 89       	ldd	r24, Y+18	; 0x12
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	89 27       	eor	r24, r25
    2140:	8a 8b       	std	Y+18, r24	; 0x12
    2142:	c8 01       	movw	r24, r16
    2144:	b7 01       	movw	r22, r14
    2146:	ae 01       	movw	r20, r28
    2148:	47 5e       	subi	r20, 0xE7	; 231
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_fpadd_parts>
    2150:	0e 94 0a 14 	call	0x2814	; 0x2814 <__pack_f>
    2154:	a0 96       	adiw	r28, 0x20	; 32
    2156:	e6 e0       	ldi	r30, 0x06	; 6
    2158:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

0000215c <__mulsf3>:
    215c:	a0 e2       	ldi	r26, 0x20	; 32
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e4 eb       	ldi	r30, 0xB4	; 180
    2162:	f0 e1       	ldi	r31, 0x10	; 16
    2164:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__>
    2168:	69 83       	std	Y+1, r22	; 0x01
    216a:	7a 83       	std	Y+2, r23	; 0x02
    216c:	8b 83       	std	Y+3, r24	; 0x03
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	2d 83       	std	Y+5, r18	; 0x05
    2172:	3e 83       	std	Y+6, r19	; 0x06
    2174:	4f 83       	std	Y+7, r20	; 0x07
    2176:	58 87       	std	Y+8, r21	; 0x08
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	be 01       	movw	r22, r28
    217e:	67 5f       	subi	r22, 0xF7	; 247
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2186:	ce 01       	movw	r24, r28
    2188:	05 96       	adiw	r24, 0x05	; 5
    218a:	be 01       	movw	r22, r28
    218c:	6f 5e       	subi	r22, 0xEF	; 239
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2194:	99 85       	ldd	r25, Y+9	; 0x09
    2196:	92 30       	cpi	r25, 0x02	; 2
    2198:	78 f0       	brcs	.+30     	; 0x21b8 <__mulsf3+0x5c>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	c0 f0       	brcs	.+48     	; 0x21d0 <__mulsf3+0x74>
    21a0:	94 30       	cpi	r25, 0x04	; 4
    21a2:	19 f4       	brne	.+6      	; 0x21aa <__mulsf3+0x4e>
    21a4:	82 30       	cpi	r24, 0x02	; 2
    21a6:	41 f4       	brne	.+16     	; 0x21b8 <__mulsf3+0x5c>
    21a8:	cb c0       	rjmp	.+406    	; 0x2340 <__mulsf3+0x1e4>
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <__mulsf3+0x58>
    21ae:	92 30       	cpi	r25, 0x02	; 2
    21b0:	79 f4       	brne	.+30     	; 0x21d0 <__mulsf3+0x74>
    21b2:	c6 c0       	rjmp	.+396    	; 0x2340 <__mulsf3+0x1e4>
    21b4:	92 30       	cpi	r25, 0x02	; 2
    21b6:	51 f4       	brne	.+20     	; 0x21cc <__mulsf3+0x70>
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    21bc:	9a 89       	ldd	r25, Y+18	; 0x12
    21be:	29 17       	cp	r18, r25
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__mulsf3+0x68>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	8a 87       	std	Y+10, r24	; 0x0a
    21c6:	ce 01       	movw	r24, r28
    21c8:	09 96       	adiw	r24, 0x09	; 9
    21ca:	bc c0       	rjmp	.+376    	; 0x2344 <__mulsf3+0x1e8>
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	51 f4       	brne	.+20     	; 0x21e4 <__mulsf3+0x88>
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    21d4:	9a 89       	ldd	r25, Y+18	; 0x12
    21d6:	29 17       	cp	r18, r25
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__mulsf3+0x80>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	8a 8b       	std	Y+18, r24	; 0x12
    21de:	ce 01       	movw	r24, r28
    21e0:	41 96       	adiw	r24, 0x11	; 17
    21e2:	b0 c0       	rjmp	.+352    	; 0x2344 <__mulsf3+0x1e8>
    21e4:	6d 84       	ldd	r6, Y+13	; 0x0d
    21e6:	7e 84       	ldd	r7, Y+14	; 0x0e
    21e8:	8f 84       	ldd	r8, Y+15	; 0x0f
    21ea:	98 88       	ldd	r9, Y+16	; 0x10
    21ec:	ed 88       	ldd	r14, Y+21	; 0x15
    21ee:	fe 88       	ldd	r15, Y+22	; 0x16
    21f0:	0f 89       	ldd	r16, Y+23	; 0x17
    21f2:	18 8d       	ldd	r17, Y+24	; 0x18
    21f4:	e0 e2       	ldi	r30, 0x20	; 32
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	dc 01       	movw	r26, r24
    21fe:	aa 24       	eor	r10, r10
    2200:	bb 24       	eor	r11, r11
    2202:	65 01       	movw	r12, r10
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	a9 01       	movw	r20, r18
    220a:	b3 01       	movw	r22, r6
    220c:	61 70       	andi	r22, 0x01	; 1
    220e:	70 70       	andi	r23, 0x00	; 0
    2210:	61 15       	cp	r22, r1
    2212:	71 05       	cpc	r23, r1
    2214:	d1 f0       	breq	.+52     	; 0x224a <__mulsf3+0xee>
    2216:	2e 0d       	add	r18, r14
    2218:	3f 1d       	adc	r19, r15
    221a:	40 1f       	adc	r20, r16
    221c:	51 1f       	adc	r21, r17
    221e:	15 01       	movw	r2, r10
    2220:	26 01       	movw	r4, r12
    2222:	28 0e       	add	r2, r24
    2224:	39 1e       	adc	r3, r25
    2226:	4a 1e       	adc	r4, r26
    2228:	5b 1e       	adc	r5, r27
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e0       	ldi	r26, 0x00	; 0
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	2e 15       	cp	r18, r14
    2234:	3f 05       	cpc	r19, r15
    2236:	40 07       	cpc	r20, r16
    2238:	51 07       	cpc	r21, r17
    223a:	18 f0       	brcs	.+6      	; 0x2242 <__mulsf3+0xe6>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	dc 01       	movw	r26, r24
    2242:	82 0d       	add	r24, r2
    2244:	93 1d       	adc	r25, r3
    2246:	a4 1d       	adc	r26, r4
    2248:	b5 1d       	adc	r27, r5
    224a:	aa 0c       	add	r10, r10
    224c:	bb 1c       	adc	r11, r11
    224e:	cc 1c       	adc	r12, r12
    2250:	dd 1c       	adc	r13, r13
    2252:	17 ff       	sbrs	r17, 7
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <__mulsf3+0x10c>
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	26 2e       	mov	r2, r22
    225a:	31 2c       	mov	r3, r1
    225c:	41 2c       	mov	r4, r1
    225e:	51 2c       	mov	r5, r1
    2260:	a2 28       	or	r10, r2
    2262:	b3 28       	or	r11, r3
    2264:	c4 28       	or	r12, r4
    2266:	d5 28       	or	r13, r5
    2268:	31 97       	sbiw	r30, 0x01	; 1
    226a:	49 f0       	breq	.+18     	; 0x227e <__mulsf3+0x122>
    226c:	ee 0c       	add	r14, r14
    226e:	ff 1c       	adc	r15, r15
    2270:	00 1f       	adc	r16, r16
    2272:	11 1f       	adc	r17, r17
    2274:	96 94       	lsr	r9
    2276:	87 94       	ror	r8
    2278:	77 94       	ror	r7
    227a:	67 94       	ror	r6
    227c:	c6 cf       	rjmp	.-116    	; 0x220a <__mulsf3+0xae>
    227e:	6b 89       	ldd	r22, Y+19	; 0x13
    2280:	7c 89       	ldd	r23, Y+20	; 0x14
    2282:	eb 85       	ldd	r30, Y+11	; 0x0b
    2284:	fc 85       	ldd	r31, Y+12	; 0x0c
    2286:	6e 0f       	add	r22, r30
    2288:	7f 1f       	adc	r23, r31
    228a:	6e 5f       	subi	r22, 0xFE	; 254
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
    228e:	6b 8f       	std	Y+27, r22	; 0x1b
    2290:	7c 8f       	std	Y+28, r23	; 0x1c
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	ea 85       	ldd	r30, Y+10	; 0x0a
    2296:	7a 89       	ldd	r23, Y+18	; 0x12
    2298:	e7 17       	cp	r30, r23
    229a:	09 f4       	brne	.+2      	; 0x229e <__mulsf3+0x142>
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	6a 8f       	std	Y+26, r22	; 0x1a
    22a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    22a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    22a4:	10 c0       	rjmp	.+32     	; 0x22c6 <__mulsf3+0x16a>
    22a6:	fc 01       	movw	r30, r24
    22a8:	e1 70       	andi	r30, 0x01	; 1
    22aa:	f0 70       	andi	r31, 0x00	; 0
    22ac:	30 97       	sbiw	r30, 0x00	; 0
    22ae:	29 f0       	breq	.+10     	; 0x22ba <__mulsf3+0x15e>
    22b0:	56 95       	lsr	r21
    22b2:	47 95       	ror	r20
    22b4:	37 95       	ror	r19
    22b6:	27 95       	ror	r18
    22b8:	50 68       	ori	r21, 0x80	; 128
    22ba:	b6 95       	lsr	r27
    22bc:	a7 95       	ror	r26
    22be:	97 95       	ror	r25
    22c0:	87 95       	ror	r24
    22c2:	6f 5f       	subi	r22, 0xFF	; 255
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	b7 fd       	sbrc	r27, 7
    22c8:	ee cf       	rjmp	.-36     	; 0x22a6 <__mulsf3+0x14a>
    22ca:	0c c0       	rjmp	.+24     	; 0x22e4 <__mulsf3+0x188>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	aa 1f       	adc	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	57 fd       	sbrc	r21, 7
    22d6:	81 60       	ori	r24, 0x01	; 1
    22d8:	22 0f       	add	r18, r18
    22da:	33 1f       	adc	r19, r19
    22dc:	44 1f       	adc	r20, r20
    22de:	55 1f       	adc	r21, r21
    22e0:	61 50       	subi	r22, 0x01	; 1
    22e2:	70 40       	sbci	r23, 0x00	; 0
    22e4:	80 30       	cpi	r24, 0x00	; 0
    22e6:	e0 e0       	ldi	r30, 0x00	; 0
    22e8:	9e 07       	cpc	r25, r30
    22ea:	e0 e0       	ldi	r30, 0x00	; 0
    22ec:	ae 07       	cpc	r26, r30
    22ee:	e0 e4       	ldi	r30, 0x40	; 64
    22f0:	be 07       	cpc	r27, r30
    22f2:	60 f3       	brcs	.-40     	; 0x22cc <__mulsf3+0x170>
    22f4:	6b 8f       	std	Y+27, r22	; 0x1b
    22f6:	7c 8f       	std	Y+28, r23	; 0x1c
    22f8:	6f e7       	ldi	r22, 0x7F	; 127
    22fa:	e6 2e       	mov	r14, r22
    22fc:	f1 2c       	mov	r15, r1
    22fe:	01 2d       	mov	r16, r1
    2300:	11 2d       	mov	r17, r1
    2302:	e8 22       	and	r14, r24
    2304:	f9 22       	and	r15, r25
    2306:	0a 23       	and	r16, r26
    2308:	1b 23       	and	r17, r27
    230a:	60 e4       	ldi	r22, 0x40	; 64
    230c:	e6 16       	cp	r14, r22
    230e:	f1 04       	cpc	r15, r1
    2310:	01 05       	cpc	r16, r1
    2312:	11 05       	cpc	r17, r1
    2314:	61 f4       	brne	.+24     	; 0x232e <__mulsf3+0x1d2>
    2316:	87 fd       	sbrc	r24, 7
    2318:	0a c0       	rjmp	.+20     	; 0x232e <__mulsf3+0x1d2>
    231a:	21 15       	cp	r18, r1
    231c:	31 05       	cpc	r19, r1
    231e:	41 05       	cpc	r20, r1
    2320:	51 05       	cpc	r21, r1
    2322:	29 f0       	breq	.+10     	; 0x232e <__mulsf3+0x1d2>
    2324:	80 5c       	subi	r24, 0xC0	; 192
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	af 4f       	sbci	r26, 0xFF	; 255
    232a:	bf 4f       	sbci	r27, 0xFF	; 255
    232c:	80 78       	andi	r24, 0x80	; 128
    232e:	8d 8f       	std	Y+29, r24	; 0x1d
    2330:	9e 8f       	std	Y+30, r25	; 0x1e
    2332:	af 8f       	std	Y+31, r26	; 0x1f
    2334:	b8 a3       	std	Y+32, r27	; 0x20
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	89 8f       	std	Y+25, r24	; 0x19
    233a:	ce 01       	movw	r24, r28
    233c:	49 96       	adiw	r24, 0x19	; 25
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <__mulsf3+0x1e8>
    2340:	8f e4       	ldi	r24, 0x4F	; 79
    2342:	90 e2       	ldi	r25, 0x20	; 32
    2344:	0e 94 0a 14 	call	0x2814	; 0x2814 <__pack_f>
    2348:	a0 96       	adiw	r28, 0x20	; 32
    234a:	e2 e1       	ldi	r30, 0x12	; 18
    234c:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__epilogue_restores__>

00002350 <__divsf3>:
    2350:	a8 e1       	ldi	r26, 0x18	; 24
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ee ea       	ldi	r30, 0xAE	; 174
    2356:	f1 e1       	ldi	r31, 0x11	; 17
    2358:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x10>
    235c:	69 83       	std	Y+1, r22	; 0x01
    235e:	7a 83       	std	Y+2, r23	; 0x02
    2360:	8b 83       	std	Y+3, r24	; 0x03
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	2d 83       	std	Y+5, r18	; 0x05
    2366:	3e 83       	std	Y+6, r19	; 0x06
    2368:	4f 83       	std	Y+7, r20	; 0x07
    236a:	58 87       	std	Y+8, r21	; 0x08
    236c:	8e 01       	movw	r16, r28
    236e:	07 5f       	subi	r16, 0xF7	; 247
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	b8 01       	movw	r22, r16
    2378:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    237c:	81 e1       	ldi	r24, 0x11	; 17
    237e:	e8 2e       	mov	r14, r24
    2380:	f1 2c       	mov	r15, r1
    2382:	ec 0e       	add	r14, r28
    2384:	fd 1e       	adc	r15, r29
    2386:	ce 01       	movw	r24, r28
    2388:	05 96       	adiw	r24, 0x05	; 5
    238a:	b7 01       	movw	r22, r14
    238c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2390:	99 85       	ldd	r25, Y+9	; 0x09
    2392:	92 30       	cpi	r25, 0x02	; 2
    2394:	08 f4       	brcc	.+2      	; 0x2398 <__divsf3+0x48>
    2396:	83 c0       	rjmp	.+262    	; 0x249e <__divsf3+0x14e>
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <__divsf3+0x50>
    239e:	7b c0       	rjmp	.+246    	; 0x2496 <__divsf3+0x146>
    23a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    23a2:	3a 89       	ldd	r19, Y+18	; 0x12
    23a4:	23 27       	eor	r18, r19
    23a6:	2a 87       	std	Y+10, r18	; 0x0a
    23a8:	94 30       	cpi	r25, 0x04	; 4
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <__divsf3+0x60>
    23ac:	92 30       	cpi	r25, 0x02	; 2
    23ae:	21 f4       	brne	.+8      	; 0x23b8 <__divsf3+0x68>
    23b0:	98 17       	cp	r25, r24
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <__divsf3+0x66>
    23b4:	6c c0       	rjmp	.+216    	; 0x248e <__divsf3+0x13e>
    23b6:	71 c0       	rjmp	.+226    	; 0x249a <__divsf3+0x14a>
    23b8:	84 30       	cpi	r24, 0x04	; 4
    23ba:	39 f4       	brne	.+14     	; 0x23ca <__divsf3+0x7a>
    23bc:	1d 86       	std	Y+13, r1	; 0x0d
    23be:	1e 86       	std	Y+14, r1	; 0x0e
    23c0:	1f 86       	std	Y+15, r1	; 0x0f
    23c2:	18 8a       	std	Y+16, r1	; 0x10
    23c4:	1b 86       	std	Y+11, r1	; 0x0b
    23c6:	1c 86       	std	Y+12, r1	; 0x0c
    23c8:	6a c0       	rjmp	.+212    	; 0x249e <__divsf3+0x14e>
    23ca:	82 30       	cpi	r24, 0x02	; 2
    23cc:	19 f4       	brne	.+6      	; 0x23d4 <__divsf3+0x84>
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	89 87       	std	Y+9, r24	; 0x09
    23d2:	65 c0       	rjmp	.+202    	; 0x249e <__divsf3+0x14e>
    23d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d8:	2b 89       	ldd	r18, Y+19	; 0x13
    23da:	3c 89       	ldd	r19, Y+20	; 0x14
    23dc:	82 1b       	sub	r24, r18
    23de:	93 0b       	sbc	r25, r19
    23e0:	8b 87       	std	Y+11, r24	; 0x0b
    23e2:	9c 87       	std	Y+12, r25	; 0x0c
    23e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    23e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    23e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    23ea:	58 89       	ldd	r21, Y+16	; 0x10
    23ec:	ed 88       	ldd	r14, Y+21	; 0x15
    23ee:	fe 88       	ldd	r15, Y+22	; 0x16
    23f0:	0f 89       	ldd	r16, Y+23	; 0x17
    23f2:	18 8d       	ldd	r17, Y+24	; 0x18
    23f4:	2e 15       	cp	r18, r14
    23f6:	3f 05       	cpc	r19, r15
    23f8:	40 07       	cpc	r20, r16
    23fa:	51 07       	cpc	r21, r17
    23fc:	38 f4       	brcc	.+14     	; 0x240c <__divsf3+0xbc>
    23fe:	22 0f       	add	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	44 1f       	adc	r20, r20
    2404:	55 1f       	adc	r21, r21
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	6f e1       	ldi	r22, 0x1F	; 31
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	a1 2c       	mov	r10, r1
    2412:	b1 2c       	mov	r11, r1
    2414:	c1 2c       	mov	r12, r1
    2416:	a0 e4       	ldi	r26, 0x40	; 64
    2418:	da 2e       	mov	r13, r26
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	dc 01       	movw	r26, r24
    2420:	2e 15       	cp	r18, r14
    2422:	3f 05       	cpc	r19, r15
    2424:	40 07       	cpc	r20, r16
    2426:	51 07       	cpc	r21, r17
    2428:	40 f0       	brcs	.+16     	; 0x243a <__divsf3+0xea>
    242a:	8a 29       	or	r24, r10
    242c:	9b 29       	or	r25, r11
    242e:	ac 29       	or	r26, r12
    2430:	bd 29       	or	r27, r13
    2432:	2e 19       	sub	r18, r14
    2434:	3f 09       	sbc	r19, r15
    2436:	40 0b       	sbc	r20, r16
    2438:	51 0b       	sbc	r21, r17
    243a:	d6 94       	lsr	r13
    243c:	c7 94       	ror	r12
    243e:	b7 94       	ror	r11
    2440:	a7 94       	ror	r10
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	44 1f       	adc	r20, r20
    2448:	55 1f       	adc	r21, r21
    244a:	61 50       	subi	r22, 0x01	; 1
    244c:	70 40       	sbci	r23, 0x00	; 0
    244e:	41 f7       	brne	.-48     	; 0x2420 <__divsf3+0xd0>
    2450:	6f e7       	ldi	r22, 0x7F	; 127
    2452:	e6 2e       	mov	r14, r22
    2454:	f1 2c       	mov	r15, r1
    2456:	01 2d       	mov	r16, r1
    2458:	11 2d       	mov	r17, r1
    245a:	e8 22       	and	r14, r24
    245c:	f9 22       	and	r15, r25
    245e:	0a 23       	and	r16, r26
    2460:	1b 23       	and	r17, r27
    2462:	60 e4       	ldi	r22, 0x40	; 64
    2464:	e6 16       	cp	r14, r22
    2466:	f1 04       	cpc	r15, r1
    2468:	01 05       	cpc	r16, r1
    246a:	11 05       	cpc	r17, r1
    246c:	61 f4       	brne	.+24     	; 0x2486 <__divsf3+0x136>
    246e:	87 fd       	sbrc	r24, 7
    2470:	0a c0       	rjmp	.+20     	; 0x2486 <__divsf3+0x136>
    2472:	21 15       	cp	r18, r1
    2474:	31 05       	cpc	r19, r1
    2476:	41 05       	cpc	r20, r1
    2478:	51 05       	cpc	r21, r1
    247a:	29 f0       	breq	.+10     	; 0x2486 <__divsf3+0x136>
    247c:	80 5c       	subi	r24, 0xC0	; 192
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	af 4f       	sbci	r26, 0xFF	; 255
    2482:	bf 4f       	sbci	r27, 0xFF	; 255
    2484:	80 78       	andi	r24, 0x80	; 128
    2486:	8d 87       	std	Y+13, r24	; 0x0d
    2488:	9e 87       	std	Y+14, r25	; 0x0e
    248a:	af 87       	std	Y+15, r26	; 0x0f
    248c:	b8 8b       	std	Y+16, r27	; 0x10
    248e:	8e 01       	movw	r16, r28
    2490:	07 5f       	subi	r16, 0xF7	; 247
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	04 c0       	rjmp	.+8      	; 0x249e <__divsf3+0x14e>
    2496:	87 01       	movw	r16, r14
    2498:	02 c0       	rjmp	.+4      	; 0x249e <__divsf3+0x14e>
    249a:	0f e4       	ldi	r16, 0x4F	; 79
    249c:	10 e2       	ldi	r17, 0x20	; 32
    249e:	c8 01       	movw	r24, r16
    24a0:	0e 94 0a 14 	call	0x2814	; 0x2814 <__pack_f>
    24a4:	68 96       	adiw	r28, 0x18	; 24
    24a6:	ea e0       	ldi	r30, 0x0A	; 10
    24a8:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__epilogue_restores__+0x10>

000024ac <__gtsf2>:
    24ac:	a8 e1       	ldi	r26, 0x18	; 24
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	ec e5       	ldi	r30, 0x5C	; 92
    24b2:	f2 e1       	ldi	r31, 0x12	; 18
    24b4:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
    24b8:	69 83       	std	Y+1, r22	; 0x01
    24ba:	7a 83       	std	Y+2, r23	; 0x02
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	2d 83       	std	Y+5, r18	; 0x05
    24c2:	3e 83       	std	Y+6, r19	; 0x06
    24c4:	4f 83       	std	Y+7, r20	; 0x07
    24c6:	58 87       	std	Y+8, r21	; 0x08
    24c8:	8e 01       	movw	r16, r28
    24ca:	07 5f       	subi	r16, 0xF7	; 247
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	ce 01       	movw	r24, r28
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	b8 01       	movw	r22, r16
    24d4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    24d8:	81 e1       	ldi	r24, 0x11	; 17
    24da:	e8 2e       	mov	r14, r24
    24dc:	f1 2c       	mov	r15, r1
    24de:	ec 0e       	add	r14, r28
    24e0:	fd 1e       	adc	r15, r29
    24e2:	ce 01       	movw	r24, r28
    24e4:	05 96       	adiw	r24, 0x05	; 5
    24e6:	b7 01       	movw	r22, r14
    24e8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	40 f0       	brcs	.+16     	; 0x2502 <__gtsf2+0x56>
    24f2:	89 89       	ldd	r24, Y+17	; 0x11
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	28 f0       	brcs	.+10     	; 0x2502 <__gtsf2+0x56>
    24f8:	c8 01       	movw	r24, r16
    24fa:	b7 01       	movw	r22, r14
    24fc:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__fpcmp_parts_f>
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <__gtsf2+0x58>
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	68 96       	adiw	r28, 0x18	; 24
    2506:	e6 e0       	ldi	r30, 0x06	; 6
    2508:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

0000250c <__gesf2>:
    250c:	a8 e1       	ldi	r26, 0x18	; 24
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ec e8       	ldi	r30, 0x8C	; 140
    2512:	f2 e1       	ldi	r31, 0x12	; 18
    2514:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
    2518:	69 83       	std	Y+1, r22	; 0x01
    251a:	7a 83       	std	Y+2, r23	; 0x02
    251c:	8b 83       	std	Y+3, r24	; 0x03
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	2d 83       	std	Y+5, r18	; 0x05
    2522:	3e 83       	std	Y+6, r19	; 0x06
    2524:	4f 83       	std	Y+7, r20	; 0x07
    2526:	58 87       	std	Y+8, r21	; 0x08
    2528:	8e 01       	movw	r16, r28
    252a:	07 5f       	subi	r16, 0xF7	; 247
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	ce 01       	movw	r24, r28
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	b8 01       	movw	r22, r16
    2534:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2538:	81 e1       	ldi	r24, 0x11	; 17
    253a:	e8 2e       	mov	r14, r24
    253c:	f1 2c       	mov	r15, r1
    253e:	ec 0e       	add	r14, r28
    2540:	fd 1e       	adc	r15, r29
    2542:	ce 01       	movw	r24, r28
    2544:	05 96       	adiw	r24, 0x05	; 5
    2546:	b7 01       	movw	r22, r14
    2548:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	40 f0       	brcs	.+16     	; 0x2562 <__gesf2+0x56>
    2552:	89 89       	ldd	r24, Y+17	; 0x11
    2554:	82 30       	cpi	r24, 0x02	; 2
    2556:	28 f0       	brcs	.+10     	; 0x2562 <__gesf2+0x56>
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__fpcmp_parts_f>
    2560:	01 c0       	rjmp	.+2      	; 0x2564 <__gesf2+0x58>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	68 96       	adiw	r28, 0x18	; 24
    2566:	e6 e0       	ldi	r30, 0x06	; 6
    2568:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

0000256c <__ltsf2>:
    256c:	a8 e1       	ldi	r26, 0x18	; 24
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ec eb       	ldi	r30, 0xBC	; 188
    2572:	f2 e1       	ldi	r31, 0x12	; 18
    2574:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
    2578:	69 83       	std	Y+1, r22	; 0x01
    257a:	7a 83       	std	Y+2, r23	; 0x02
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	2d 83       	std	Y+5, r18	; 0x05
    2582:	3e 83       	std	Y+6, r19	; 0x06
    2584:	4f 83       	std	Y+7, r20	; 0x07
    2586:	58 87       	std	Y+8, r21	; 0x08
    2588:	8e 01       	movw	r16, r28
    258a:	07 5f       	subi	r16, 0xF7	; 247
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	ce 01       	movw	r24, r28
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	b8 01       	movw	r22, r16
    2594:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    2598:	81 e1       	ldi	r24, 0x11	; 17
    259a:	e8 2e       	mov	r14, r24
    259c:	f1 2c       	mov	r15, r1
    259e:	ec 0e       	add	r14, r28
    25a0:	fd 1e       	adc	r15, r29
    25a2:	ce 01       	movw	r24, r28
    25a4:	05 96       	adiw	r24, 0x05	; 5
    25a6:	b7 01       	movw	r22, r14
    25a8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	40 f0       	brcs	.+16     	; 0x25c2 <__ltsf2+0x56>
    25b2:	89 89       	ldd	r24, Y+17	; 0x11
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	28 f0       	brcs	.+10     	; 0x25c2 <__ltsf2+0x56>
    25b8:	c8 01       	movw	r24, r16
    25ba:	b7 01       	movw	r22, r14
    25bc:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__fpcmp_parts_f>
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <__ltsf2+0x58>
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	68 96       	adiw	r28, 0x18	; 24
    25c6:	e6 e0       	ldi	r30, 0x06	; 6
    25c8:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

000025cc <__fixsfsi>:
    25cc:	ac e0       	ldi	r26, 0x0C	; 12
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ec ee       	ldi	r30, 0xEC	; 236
    25d2:	f2 e1       	ldi	r31, 0x12	; 18
    25d4:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x20>
    25d8:	69 83       	std	Y+1, r22	; 0x01
    25da:	7a 83       	std	Y+2, r23	; 0x02
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	be 01       	movw	r22, r28
    25e6:	6b 5f       	subi	r22, 0xFB	; 251
    25e8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ea:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__unpack_f>
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	82 30       	cpi	r24, 0x02	; 2
    25f2:	81 f1       	breq	.+96     	; 0x2654 <__fixsfsi+0x88>
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	70 f1       	brcs	.+92     	; 0x2654 <__fixsfsi+0x88>
    25f8:	84 30       	cpi	r24, 0x04	; 4
    25fa:	21 f4       	brne	.+8      	; 0x2604 <__fixsfsi+0x38>
    25fc:	8e 81       	ldd	r24, Y+6	; 0x06
    25fe:	88 23       	and	r24, r24
    2600:	69 f1       	breq	.+90     	; 0x265c <__fixsfsi+0x90>
    2602:	0a c0       	rjmp	.+20     	; 0x2618 <__fixsfsi+0x4c>
    2604:	2f 81       	ldd	r18, Y+7	; 0x07
    2606:	38 85       	ldd	r19, Y+8	; 0x08
    2608:	37 fd       	sbrc	r19, 7
    260a:	24 c0       	rjmp	.+72     	; 0x2654 <__fixsfsi+0x88>
    260c:	6e 81       	ldd	r22, Y+6	; 0x06
    260e:	2f 31       	cpi	r18, 0x1F	; 31
    2610:	31 05       	cpc	r19, r1
    2612:	3c f0       	brlt	.+14     	; 0x2622 <__fixsfsi+0x56>
    2614:	66 23       	and	r22, r22
    2616:	11 f1       	breq	.+68     	; 0x265c <__fixsfsi+0x90>
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e8       	ldi	r21, 0x80	; 128
    2620:	21 c0       	rjmp	.+66     	; 0x2664 <__fixsfsi+0x98>
    2622:	8e e1       	ldi	r24, 0x1E	; 30
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	82 1b       	sub	r24, r18
    2628:	93 0b       	sbc	r25, r19
    262a:	29 85       	ldd	r18, Y+9	; 0x09
    262c:	3a 85       	ldd	r19, Y+10	; 0x0a
    262e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2630:	5c 85       	ldd	r21, Y+12	; 0x0c
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__fixsfsi+0x70>
    2634:	56 95       	lsr	r21
    2636:	47 95       	ror	r20
    2638:	37 95       	ror	r19
    263a:	27 95       	ror	r18
    263c:	8a 95       	dec	r24
    263e:	d2 f7       	brpl	.-12     	; 0x2634 <__fixsfsi+0x68>
    2640:	66 23       	and	r22, r22
    2642:	81 f0       	breq	.+32     	; 0x2664 <__fixsfsi+0x98>
    2644:	50 95       	com	r21
    2646:	40 95       	com	r20
    2648:	30 95       	com	r19
    264a:	21 95       	neg	r18
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	4f 4f       	sbci	r20, 0xFF	; 255
    2650:	5f 4f       	sbci	r21, 0xFF	; 255
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fixsfsi+0x98>
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	a9 01       	movw	r20, r18
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <__fixsfsi+0x98>
    265c:	2f ef       	ldi	r18, 0xFF	; 255
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f ef       	ldi	r20, 0xFF	; 255
    2662:	5f e7       	ldi	r21, 0x7F	; 127
    2664:	b9 01       	movw	r22, r18
    2666:	ca 01       	movw	r24, r20
    2668:	2c 96       	adiw	r28, 0x0c	; 12
    266a:	e2 e0       	ldi	r30, 0x02	; 2
    266c:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__epilogue_restores__+0x20>

00002670 <__floatunsisf>:
    2670:	a8 e0       	ldi	r26, 0x08	; 8
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e3       	ldi	r30, 0x3E	; 62
    2676:	f3 e1       	ldi	r31, 0x13	; 19
    2678:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x14>
    267c:	7b 01       	movw	r14, r22
    267e:	8c 01       	movw	r16, r24
    2680:	1a 82       	std	Y+2, r1	; 0x02
    2682:	61 15       	cp	r22, r1
    2684:	71 05       	cpc	r23, r1
    2686:	81 05       	cpc	r24, r1
    2688:	91 05       	cpc	r25, r1
    268a:	19 f4       	brne	.+6      	; 0x2692 <__floatunsisf+0x22>
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	5f c0       	rjmp	.+190    	; 0x2750 <__floatunsisf+0xe0>
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	8e e1       	ldi	r24, 0x1E	; 30
    2698:	c8 2e       	mov	r12, r24
    269a:	d1 2c       	mov	r13, r1
    269c:	cb 82       	std	Y+3, r12	; 0x03
    269e:	dc 82       	std	Y+4, r13	; 0x04
    26a0:	ed 82       	std	Y+5, r14	; 0x05
    26a2:	fe 82       	std	Y+6, r15	; 0x06
    26a4:	0f 83       	std	Y+7, r16	; 0x07
    26a6:	18 87       	std	Y+8, r17	; 0x08
    26a8:	c8 01       	movw	r24, r16
    26aa:	b7 01       	movw	r22, r14
    26ac:	0e 94 b0 13 	call	0x2760	; 0x2760 <__clzsi2>
    26b0:	fc 01       	movw	r30, r24
    26b2:	31 97       	sbiw	r30, 0x01	; 1
    26b4:	f7 ff       	sbrs	r31, 7
    26b6:	3a c0       	rjmp	.+116    	; 0x272c <__floatunsisf+0xbc>
    26b8:	aa 27       	eor	r26, r26
    26ba:	bb 27       	eor	r27, r27
    26bc:	ae 1b       	sub	r26, r30
    26be:	bf 0b       	sbc	r27, r31
    26c0:	21 e0       	ldi	r18, 0x01	; 1
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0a 2e       	mov	r0, r26
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <__floatunsisf+0x64>
    26cc:	22 0f       	add	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	44 1f       	adc	r20, r20
    26d2:	55 1f       	adc	r21, r21
    26d4:	0a 94       	dec	r0
    26d6:	d2 f7       	brpl	.-12     	; 0x26cc <__floatunsisf+0x5c>
    26d8:	21 50       	subi	r18, 0x01	; 1
    26da:	30 40       	sbci	r19, 0x00	; 0
    26dc:	40 40       	sbci	r20, 0x00	; 0
    26de:	50 40       	sbci	r21, 0x00	; 0
    26e0:	2e 21       	and	r18, r14
    26e2:	3f 21       	and	r19, r15
    26e4:	40 23       	and	r20, r16
    26e6:	51 23       	and	r21, r17
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	21 15       	cp	r18, r1
    26f2:	31 05       	cpc	r19, r1
    26f4:	41 05       	cpc	r20, r1
    26f6:	51 05       	cpc	r21, r1
    26f8:	19 f4       	brne	.+6      	; 0x2700 <__floatunsisf+0x90>
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	cb 01       	movw	r24, r22
    2700:	04 c0       	rjmp	.+8      	; 0x270a <__floatunsisf+0x9a>
    2702:	16 95       	lsr	r17
    2704:	07 95       	ror	r16
    2706:	f7 94       	ror	r15
    2708:	e7 94       	ror	r14
    270a:	aa 95       	dec	r26
    270c:	d2 f7       	brpl	.-12     	; 0x2702 <__floatunsisf+0x92>
    270e:	e6 2a       	or	r14, r22
    2710:	f7 2a       	or	r15, r23
    2712:	08 2b       	or	r16, r24
    2714:	19 2b       	or	r17, r25
    2716:	ed 82       	std	Y+5, r14	; 0x05
    2718:	fe 82       	std	Y+6, r15	; 0x06
    271a:	0f 83       	std	Y+7, r16	; 0x07
    271c:	18 87       	std	Y+8, r17	; 0x08
    271e:	8e e1       	ldi	r24, 0x1E	; 30
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	8e 1b       	sub	r24, r30
    2724:	9f 0b       	sbc	r25, r31
    2726:	8b 83       	std	Y+3, r24	; 0x03
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	12 c0       	rjmp	.+36     	; 0x2750 <__floatunsisf+0xe0>
    272c:	30 97       	sbiw	r30, 0x00	; 0
    272e:	81 f0       	breq	.+32     	; 0x2750 <__floatunsisf+0xe0>
    2730:	0e 2e       	mov	r0, r30
    2732:	04 c0       	rjmp	.+8      	; 0x273c <__floatunsisf+0xcc>
    2734:	ee 0c       	add	r14, r14
    2736:	ff 1c       	adc	r15, r15
    2738:	00 1f       	adc	r16, r16
    273a:	11 1f       	adc	r17, r17
    273c:	0a 94       	dec	r0
    273e:	d2 f7       	brpl	.-12     	; 0x2734 <__floatunsisf+0xc4>
    2740:	ed 82       	std	Y+5, r14	; 0x05
    2742:	fe 82       	std	Y+6, r15	; 0x06
    2744:	0f 83       	std	Y+7, r16	; 0x07
    2746:	18 87       	std	Y+8, r17	; 0x08
    2748:	ce 1a       	sub	r12, r30
    274a:	df 0a       	sbc	r13, r31
    274c:	cb 82       	std	Y+3, r12	; 0x03
    274e:	dc 82       	std	Y+4, r13	; 0x04
    2750:	ce 01       	movw	r24, r28
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	0e 94 0a 14 	call	0x2814	; 0x2814 <__pack_f>
    2758:	28 96       	adiw	r28, 0x08	; 8
    275a:	e8 e0       	ldi	r30, 0x08	; 8
    275c:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__epilogue_restores__+0x14>

00002760 <__clzsi2>:
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	7b 01       	movw	r14, r22
    2772:	8c 01       	movw	r16, r24
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	e8 16       	cp	r14, r24
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	f8 06       	cpc	r15, r24
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	08 07       	cpc	r16, r24
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	18 07       	cpc	r17, r24
    2784:	58 f4       	brcc	.+22     	; 0x279c <__clzsi2+0x3c>
    2786:	ef ef       	ldi	r30, 0xFF	; 255
    2788:	ee 16       	cp	r14, r30
    278a:	f1 04       	cpc	r15, r1
    278c:	01 05       	cpc	r16, r1
    278e:	11 05       	cpc	r17, r1
    2790:	09 f0       	breq	.+2      	; 0x2794 <__clzsi2+0x34>
    2792:	90 f4       	brcc	.+36     	; 0x27b8 <__clzsi2+0x58>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	dc 01       	movw	r26, r24
    279a:	17 c0       	rjmp	.+46     	; 0x27ca <__clzsi2+0x6a>
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	ef 16       	cp	r14, r31
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	ff 06       	cpc	r15, r31
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	0f 07       	cpc	r16, r31
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	1f 07       	cpc	r17, r31
    27ac:	50 f4       	brcc	.+20     	; 0x27c2 <__clzsi2+0x62>
    27ae:	80 e1       	ldi	r24, 0x10	; 16
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	09 c0       	rjmp	.+18     	; 0x27ca <__clzsi2+0x6a>
    27b8:	88 e0       	ldi	r24, 0x08	; 8
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a0 e0       	ldi	r26, 0x00	; 0
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <__clzsi2+0x6a>
    27c2:	88 e1       	ldi	r24, 0x18	; 24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e0       	ldi	r26, 0x00	; 0
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	20 e2       	ldi	r18, 0x20	; 32
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	28 1b       	sub	r18, r24
    27d4:	39 0b       	sbc	r19, r25
    27d6:	4a 0b       	sbc	r20, r26
    27d8:	5b 0b       	sbc	r21, r27
    27da:	57 01       	movw	r10, r14
    27dc:	68 01       	movw	r12, r16
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <__clzsi2+0x88>
    27e0:	d6 94       	lsr	r13
    27e2:	c7 94       	ror	r12
    27e4:	b7 94       	ror	r11
    27e6:	a7 94       	ror	r10
    27e8:	8a 95       	dec	r24
    27ea:	d2 f7       	brpl	.-12     	; 0x27e0 <__clzsi2+0x80>
    27ec:	d6 01       	movw	r26, r12
    27ee:	c5 01       	movw	r24, r10
    27f0:	89 5a       	subi	r24, 0xA9	; 169
    27f2:	9f 4d       	sbci	r25, 0xDF	; 223
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	28 1b       	sub	r18, r24
    27fa:	31 09       	sbc	r19, r1
    27fc:	41 09       	sbc	r20, r1
    27fe:	51 09       	sbc	r21, r1
    2800:	c9 01       	movw	r24, r18
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	bf 90       	pop	r11
    2810:	af 90       	pop	r10
    2812:	08 95       	ret

00002814 <__pack_f>:
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	fc 01       	movw	r30, r24
    2822:	24 81       	ldd	r18, Z+4	; 0x04
    2824:	35 81       	ldd	r19, Z+5	; 0x05
    2826:	46 81       	ldd	r20, Z+6	; 0x06
    2828:	57 81       	ldd	r21, Z+7	; 0x07
    282a:	61 81       	ldd	r22, Z+1	; 0x01
    282c:	80 81       	ld	r24, Z
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	20 f4       	brcc	.+8      	; 0x283a <__pack_f+0x26>
    2832:	40 61       	ori	r20, 0x10	; 16
    2834:	ef ef       	ldi	r30, 0xFF	; 255
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	a3 c0       	rjmp	.+326    	; 0x2980 <__pack_f+0x16c>
    283a:	84 30       	cpi	r24, 0x04	; 4
    283c:	09 f4       	brne	.+2      	; 0x2840 <__pack_f+0x2c>
    283e:	9b c0       	rjmp	.+310    	; 0x2976 <__pack_f+0x162>
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	09 f4       	brne	.+2      	; 0x2846 <__pack_f+0x32>
    2844:	92 c0       	rjmp	.+292    	; 0x296a <__pack_f+0x156>
    2846:	21 15       	cp	r18, r1
    2848:	31 05       	cpc	r19, r1
    284a:	41 05       	cpc	r20, r1
    284c:	51 05       	cpc	r21, r1
    284e:	09 f4       	brne	.+2      	; 0x2852 <__pack_f+0x3e>
    2850:	8f c0       	rjmp	.+286    	; 0x2970 <__pack_f+0x15c>
    2852:	02 80       	ldd	r0, Z+2	; 0x02
    2854:	f3 81       	ldd	r31, Z+3	; 0x03
    2856:	e0 2d       	mov	r30, r0
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	e2 38       	cpi	r30, 0x82	; 130
    285c:	f8 07       	cpc	r31, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <__pack_f+0x4e>
    2860:	5a c0       	rjmp	.+180    	; 0x2916 <__pack_f+0x102>
    2862:	c2 e8       	ldi	r28, 0x82	; 130
    2864:	df ef       	ldi	r29, 0xFF	; 255
    2866:	ce 1b       	sub	r28, r30
    2868:	df 0b       	sbc	r29, r31
    286a:	ca 31       	cpi	r28, 0x1A	; 26
    286c:	d1 05       	cpc	r29, r1
    286e:	6c f5       	brge	.+90     	; 0x28ca <__pack_f+0xb6>
    2870:	79 01       	movw	r14, r18
    2872:	8a 01       	movw	r16, r20
    2874:	0c 2e       	mov	r0, r28
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <__pack_f+0x6c>
    2878:	16 95       	lsr	r17
    287a:	07 95       	ror	r16
    287c:	f7 94       	ror	r15
    287e:	e7 94       	ror	r14
    2880:	0a 94       	dec	r0
    2882:	d2 f7       	brpl	.-12     	; 0x2878 <__pack_f+0x64>
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	0c 2e       	mov	r0, r28
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <__pack_f+0x84>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	0a 94       	dec	r0
    289a:	d2 f7       	brpl	.-12     	; 0x2890 <__pack_f+0x7c>
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	a1 09       	sbc	r26, r1
    28a0:	b1 09       	sbc	r27, r1
    28a2:	82 23       	and	r24, r18
    28a4:	93 23       	and	r25, r19
    28a6:	a4 23       	and	r26, r20
    28a8:	b5 23       	and	r27, r21
    28aa:	21 e0       	ldi	r18, 0x01	; 1
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	a1 05       	cpc	r26, r1
    28b6:	b1 05       	cpc	r27, r1
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <__pack_f+0xac>
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	a9 01       	movw	r20, r18
    28c0:	2e 29       	or	r18, r14
    28c2:	3f 29       	or	r19, r15
    28c4:	40 2b       	or	r20, r16
    28c6:	51 2b       	or	r21, r17
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <__pack_f+0xbc>
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	a9 01       	movw	r20, r18
    28d0:	da 01       	movw	r26, r20
    28d2:	c9 01       	movw	r24, r18
    28d4:	8f 77       	andi	r24, 0x7F	; 127
    28d6:	90 70       	andi	r25, 0x00	; 0
    28d8:	a0 70       	andi	r26, 0x00	; 0
    28da:	b0 70       	andi	r27, 0x00	; 0
    28dc:	80 34       	cpi	r24, 0x40	; 64
    28de:	91 05       	cpc	r25, r1
    28e0:	a1 05       	cpc	r26, r1
    28e2:	b1 05       	cpc	r27, r1
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <__pack_f+0xe0>
    28e6:	27 ff       	sbrs	r18, 7
    28e8:	09 c0       	rjmp	.+18     	; 0x28fc <__pack_f+0xe8>
    28ea:	20 5c       	subi	r18, 0xC0	; 192
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	4f 4f       	sbci	r20, 0xFF	; 255
    28f0:	5f 4f       	sbci	r21, 0xFF	; 255
    28f2:	04 c0       	rjmp	.+8      	; 0x28fc <__pack_f+0xe8>
    28f4:	21 5c       	subi	r18, 0xC1	; 193
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	4f 4f       	sbci	r20, 0xFF	; 255
    28fa:	5f 4f       	sbci	r21, 0xFF	; 255
    28fc:	e1 e0       	ldi	r30, 0x01	; 1
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	20 30       	cpi	r18, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	38 07       	cpc	r19, r24
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	48 07       	cpc	r20, r24
    290a:	80 e4       	ldi	r24, 0x40	; 64
    290c:	58 07       	cpc	r21, r24
    290e:	28 f5       	brcc	.+74     	; 0x295a <__pack_f+0x146>
    2910:	e0 e0       	ldi	r30, 0x00	; 0
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	22 c0       	rjmp	.+68     	; 0x295a <__pack_f+0x146>
    2916:	e0 38       	cpi	r30, 0x80	; 128
    2918:	f1 05       	cpc	r31, r1
    291a:	6c f5       	brge	.+90     	; 0x2976 <__pack_f+0x162>
    291c:	e1 58       	subi	r30, 0x81	; 129
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	da 01       	movw	r26, r20
    2922:	c9 01       	movw	r24, r18
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	90 70       	andi	r25, 0x00	; 0
    2928:	a0 70       	andi	r26, 0x00	; 0
    292a:	b0 70       	andi	r27, 0x00	; 0
    292c:	80 34       	cpi	r24, 0x40	; 64
    292e:	91 05       	cpc	r25, r1
    2930:	a1 05       	cpc	r26, r1
    2932:	b1 05       	cpc	r27, r1
    2934:	39 f4       	brne	.+14     	; 0x2944 <__pack_f+0x130>
    2936:	27 ff       	sbrs	r18, 7
    2938:	09 c0       	rjmp	.+18     	; 0x294c <__pack_f+0x138>
    293a:	20 5c       	subi	r18, 0xC0	; 192
    293c:	3f 4f       	sbci	r19, 0xFF	; 255
    293e:	4f 4f       	sbci	r20, 0xFF	; 255
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	04 c0       	rjmp	.+8      	; 0x294c <__pack_f+0x138>
    2944:	21 5c       	subi	r18, 0xC1	; 193
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	4f 4f       	sbci	r20, 0xFF	; 255
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	57 ff       	sbrs	r21, 7
    294e:	05 c0       	rjmp	.+10     	; 0x295a <__pack_f+0x146>
    2950:	56 95       	lsr	r21
    2952:	47 95       	ror	r20
    2954:	37 95       	ror	r19
    2956:	27 95       	ror	r18
    2958:	31 96       	adiw	r30, 0x01	; 1
    295a:	87 e0       	ldi	r24, 0x07	; 7
    295c:	56 95       	lsr	r21
    295e:	47 95       	ror	r20
    2960:	37 95       	ror	r19
    2962:	27 95       	ror	r18
    2964:	8a 95       	dec	r24
    2966:	d1 f7       	brne	.-12     	; 0x295c <__pack_f+0x148>
    2968:	0b c0       	rjmp	.+22     	; 0x2980 <__pack_f+0x16c>
    296a:	e0 e0       	ldi	r30, 0x00	; 0
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	05 c0       	rjmp	.+10     	; 0x297a <__pack_f+0x166>
    2970:	e0 e0       	ldi	r30, 0x00	; 0
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <__pack_f+0x16c>
    2976:	ef ef       	ldi	r30, 0xFF	; 255
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	a9 01       	movw	r20, r18
    2980:	8e 2f       	mov	r24, r30
    2982:	87 95       	ror	r24
    2984:	88 27       	eor	r24, r24
    2986:	87 95       	ror	r24
    2988:	94 2f       	mov	r25, r20
    298a:	9f 77       	andi	r25, 0x7F	; 127
    298c:	67 95       	ror	r22
    298e:	66 27       	eor	r22, r22
    2990:	67 95       	ror	r22
    2992:	e6 95       	lsr	r30
    2994:	e2 2e       	mov	r14, r18
    2996:	a9 2f       	mov	r26, r25
    2998:	a8 2b       	or	r26, r24
    299a:	fe 2f       	mov	r31, r30
    299c:	f6 2b       	or	r31, r22
    299e:	62 2f       	mov	r22, r18
    29a0:	73 2f       	mov	r23, r19
    29a2:	8a 2f       	mov	r24, r26
    29a4:	9f 2f       	mov	r25, r31
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	e6 e0       	ldi	r30, 0x06	; 6
    29ac:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x18>

000029b0 <__unpack_f>:
    29b0:	dc 01       	movw	r26, r24
    29b2:	fb 01       	movw	r30, r22
    29b4:	2c 91       	ld	r18, X
    29b6:	11 96       	adiw	r26, 0x01	; 1
    29b8:	3c 91       	ld	r19, X
    29ba:	11 97       	sbiw	r26, 0x01	; 1
    29bc:	12 96       	adiw	r26, 0x02	; 2
    29be:	8c 91       	ld	r24, X
    29c0:	12 97       	sbiw	r26, 0x02	; 2
    29c2:	48 2f       	mov	r20, r24
    29c4:	4f 77       	andi	r20, 0x7F	; 127
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	98 2f       	mov	r25, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	99 27       	eor	r25, r25
    29ce:	99 1f       	adc	r25, r25
    29d0:	13 96       	adiw	r26, 0x03	; 3
    29d2:	6c 91       	ld	r22, X
    29d4:	13 97       	sbiw	r26, 0x03	; 3
    29d6:	86 2f       	mov	r24, r22
    29d8:	88 0f       	add	r24, r24
    29da:	89 2b       	or	r24, r25
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	66 1f       	adc	r22, r22
    29e0:	66 27       	eor	r22, r22
    29e2:	66 1f       	adc	r22, r22
    29e4:	61 83       	std	Z+1, r22	; 0x01
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	39 f5       	brne	.+78     	; 0x2a38 <__unpack_f+0x88>
    29ea:	21 15       	cp	r18, r1
    29ec:	31 05       	cpc	r19, r1
    29ee:	41 05       	cpc	r20, r1
    29f0:	51 05       	cpc	r21, r1
    29f2:	11 f4       	brne	.+4      	; 0x29f8 <__unpack_f+0x48>
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	29 c0       	rjmp	.+82     	; 0x2a4a <__unpack_f+0x9a>
    29f8:	82 e8       	ldi	r24, 0x82	; 130
    29fa:	9f ef       	ldi	r25, 0xFF	; 255
    29fc:	82 83       	std	Z+2, r24	; 0x02
    29fe:	93 83       	std	Z+3, r25	; 0x03
    2a00:	67 e0       	ldi	r22, 0x07	; 7
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	44 1f       	adc	r20, r20
    2a08:	55 1f       	adc	r21, r21
    2a0a:	6a 95       	dec	r22
    2a0c:	d1 f7       	brne	.-12     	; 0x2a02 <__unpack_f+0x52>
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	80 83       	st	Z, r24
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <__unpack_f+0x76>
    2a14:	22 0f       	add	r18, r18
    2a16:	33 1f       	adc	r19, r19
    2a18:	44 1f       	adc	r20, r20
    2a1a:	55 1f       	adc	r21, r21
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	82 83       	std	Z+2, r24	; 0x02
    2a24:	93 83       	std	Z+3, r25	; 0x03
    2a26:	20 30       	cpi	r18, 0x00	; 0
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	38 07       	cpc	r19, r24
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	48 07       	cpc	r20, r24
    2a30:	80 e4       	ldi	r24, 0x40	; 64
    2a32:	58 07       	cpc	r21, r24
    2a34:	78 f3       	brcs	.-34     	; 0x2a14 <__unpack_f+0x64>
    2a36:	20 c0       	rjmp	.+64     	; 0x2a78 <__unpack_f+0xc8>
    2a38:	8f 3f       	cpi	r24, 0xFF	; 255
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	79 f4       	brne	.+30     	; 0x2a5c <__unpack_f+0xac>
    2a3e:	21 15       	cp	r18, r1
    2a40:	31 05       	cpc	r19, r1
    2a42:	41 05       	cpc	r20, r1
    2a44:	51 05       	cpc	r21, r1
    2a46:	19 f4       	brne	.+6      	; 0x2a4e <__unpack_f+0x9e>
    2a48:	84 e0       	ldi	r24, 0x04	; 4
    2a4a:	80 83       	st	Z, r24
    2a4c:	08 95       	ret
    2a4e:	44 ff       	sbrs	r20, 4
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <__unpack_f+0xa8>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	80 83       	st	Z, r24
    2a56:	10 c0       	rjmp	.+32     	; 0x2a78 <__unpack_f+0xc8>
    2a58:	10 82       	st	Z, r1
    2a5a:	0e c0       	rjmp	.+28     	; 0x2a78 <__unpack_f+0xc8>
    2a5c:	8f 57       	subi	r24, 0x7F	; 127
    2a5e:	90 40       	sbci	r25, 0x00	; 0
    2a60:	82 83       	std	Z+2, r24	; 0x02
    2a62:	93 83       	std	Z+3, r25	; 0x03
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	80 83       	st	Z, r24
    2a68:	87 e0       	ldi	r24, 0x07	; 7
    2a6a:	22 0f       	add	r18, r18
    2a6c:	33 1f       	adc	r19, r19
    2a6e:	44 1f       	adc	r20, r20
    2a70:	55 1f       	adc	r21, r21
    2a72:	8a 95       	dec	r24
    2a74:	d1 f7       	brne	.-12     	; 0x2a6a <__unpack_f+0xba>
    2a76:	50 64       	ori	r21, 0x40	; 64
    2a78:	24 83       	std	Z+4, r18	; 0x04
    2a7a:	35 83       	std	Z+5, r19	; 0x05
    2a7c:	46 83       	std	Z+6, r20	; 0x06
    2a7e:	57 83       	std	Z+7, r21	; 0x07
    2a80:	08 95       	ret

00002a82 <__fpcmp_parts_f>:
    2a82:	fc 01       	movw	r30, r24
    2a84:	db 01       	movw	r26, r22
    2a86:	90 81       	ld	r25, Z
    2a88:	92 30       	cpi	r25, 0x02	; 2
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <__fpcmp_parts_f+0xc>
    2a8c:	49 c0       	rjmp	.+146    	; 0x2b20 <__fpcmp_parts_f+0x9e>
    2a8e:	8c 91       	ld	r24, X
    2a90:	82 30       	cpi	r24, 0x02	; 2
    2a92:	08 f4       	brcc	.+2      	; 0x2a96 <__fpcmp_parts_f+0x14>
    2a94:	45 c0       	rjmp	.+138    	; 0x2b20 <__fpcmp_parts_f+0x9e>
    2a96:	94 30       	cpi	r25, 0x04	; 4
    2a98:	51 f4       	brne	.+20     	; 0x2aae <__fpcmp_parts_f+0x2c>
    2a9a:	61 81       	ldd	r22, Z+1	; 0x01
    2a9c:	84 30       	cpi	r24, 0x04	; 4
    2a9e:	b1 f5       	brne	.+108    	; 0x2b0c <__fpcmp_parts_f+0x8a>
    2aa0:	11 96       	adiw	r26, 0x01	; 1
    2aa2:	2c 91       	ld	r18, X
    2aa4:	11 97       	sbiw	r26, 0x01	; 1
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	26 1b       	sub	r18, r22
    2aaa:	31 09       	sbc	r19, r1
    2aac:	41 c0       	rjmp	.+130    	; 0x2b30 <__fpcmp_parts_f+0xae>
    2aae:	84 30       	cpi	r24, 0x04	; 4
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <__fpcmp_parts_f+0x38>
    2ab2:	92 30       	cpi	r25, 0x02	; 2
    2ab4:	41 f4       	brne	.+16     	; 0x2ac6 <__fpcmp_parts_f+0x44>
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	b1 f1       	breq	.+108    	; 0x2b26 <__fpcmp_parts_f+0xa4>
    2aba:	11 96       	adiw	r26, 0x01	; 1
    2abc:	8c 91       	ld	r24, X
    2abe:	11 97       	sbiw	r26, 0x01	; 1
    2ac0:	88 23       	and	r24, r24
    2ac2:	a1 f1       	breq	.+104    	; 0x2b2c <__fpcmp_parts_f+0xaa>
    2ac4:	2d c0       	rjmp	.+90     	; 0x2b20 <__fpcmp_parts_f+0x9e>
    2ac6:	61 81       	ldd	r22, Z+1	; 0x01
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	01 f1       	breq	.+64     	; 0x2b0c <__fpcmp_parts_f+0x8a>
    2acc:	11 96       	adiw	r26, 0x01	; 1
    2ace:	8c 91       	ld	r24, X
    2ad0:	11 97       	sbiw	r26, 0x01	; 1
    2ad2:	68 17       	cp	r22, r24
    2ad4:	d9 f4       	brne	.+54     	; 0x2b0c <__fpcmp_parts_f+0x8a>
    2ad6:	22 81       	ldd	r18, Z+2	; 0x02
    2ad8:	33 81       	ldd	r19, Z+3	; 0x03
    2ada:	12 96       	adiw	r26, 0x02	; 2
    2adc:	8d 91       	ld	r24, X+
    2ade:	9c 91       	ld	r25, X
    2ae0:	13 97       	sbiw	r26, 0x03	; 3
    2ae2:	82 17       	cp	r24, r18
    2ae4:	93 07       	cpc	r25, r19
    2ae6:	94 f0       	brlt	.+36     	; 0x2b0c <__fpcmp_parts_f+0x8a>
    2ae8:	28 17       	cp	r18, r24
    2aea:	39 07       	cpc	r19, r25
    2aec:	bc f0       	brlt	.+46     	; 0x2b1c <__fpcmp_parts_f+0x9a>
    2aee:	24 81       	ldd	r18, Z+4	; 0x04
    2af0:	35 81       	ldd	r19, Z+5	; 0x05
    2af2:	46 81       	ldd	r20, Z+6	; 0x06
    2af4:	57 81       	ldd	r21, Z+7	; 0x07
    2af6:	14 96       	adiw	r26, 0x04	; 4
    2af8:	8d 91       	ld	r24, X+
    2afa:	9d 91       	ld	r25, X+
    2afc:	0d 90       	ld	r0, X+
    2afe:	bc 91       	ld	r27, X
    2b00:	a0 2d       	mov	r26, r0
    2b02:	82 17       	cp	r24, r18
    2b04:	93 07       	cpc	r25, r19
    2b06:	a4 07       	cpc	r26, r20
    2b08:	b5 07       	cpc	r27, r21
    2b0a:	18 f4       	brcc	.+6      	; 0x2b12 <__fpcmp_parts_f+0x90>
    2b0c:	66 23       	and	r22, r22
    2b0e:	41 f0       	breq	.+16     	; 0x2b20 <__fpcmp_parts_f+0x9e>
    2b10:	0d c0       	rjmp	.+26     	; 0x2b2c <__fpcmp_parts_f+0xaa>
    2b12:	28 17       	cp	r18, r24
    2b14:	39 07       	cpc	r19, r25
    2b16:	4a 07       	cpc	r20, r26
    2b18:	5b 07       	cpc	r21, r27
    2b1a:	28 f4       	brcc	.+10     	; 0x2b26 <__fpcmp_parts_f+0xa4>
    2b1c:	66 23       	and	r22, r22
    2b1e:	31 f0       	breq	.+12     	; 0x2b2c <__fpcmp_parts_f+0xaa>
    2b20:	21 e0       	ldi	r18, 0x01	; 1
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <__fpcmp_parts_f+0xae>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <__fpcmp_parts_f+0xae>
    2b2c:	2f ef       	ldi	r18, 0xFF	; 255
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	c9 01       	movw	r24, r18
    2b32:	08 95       	ret

00002b34 <__mulsi3>:
    2b34:	62 9f       	mul	r22, r18
    2b36:	d0 01       	movw	r26, r0
    2b38:	73 9f       	mul	r23, r19
    2b3a:	f0 01       	movw	r30, r0
    2b3c:	82 9f       	mul	r24, r18
    2b3e:	e0 0d       	add	r30, r0
    2b40:	f1 1d       	adc	r31, r1
    2b42:	64 9f       	mul	r22, r20
    2b44:	e0 0d       	add	r30, r0
    2b46:	f1 1d       	adc	r31, r1
    2b48:	92 9f       	mul	r25, r18
    2b4a:	f0 0d       	add	r31, r0
    2b4c:	83 9f       	mul	r24, r19
    2b4e:	f0 0d       	add	r31, r0
    2b50:	74 9f       	mul	r23, r20
    2b52:	f0 0d       	add	r31, r0
    2b54:	65 9f       	mul	r22, r21
    2b56:	f0 0d       	add	r31, r0
    2b58:	99 27       	eor	r25, r25
    2b5a:	72 9f       	mul	r23, r18
    2b5c:	b0 0d       	add	r27, r0
    2b5e:	e1 1d       	adc	r30, r1
    2b60:	f9 1f       	adc	r31, r25
    2b62:	63 9f       	mul	r22, r19
    2b64:	b0 0d       	add	r27, r0
    2b66:	e1 1d       	adc	r30, r1
    2b68:	f9 1f       	adc	r31, r25
    2b6a:	bd 01       	movw	r22, r26
    2b6c:	cf 01       	movw	r24, r30
    2b6e:	11 24       	eor	r1, r1
    2b70:	08 95       	ret

00002b72 <__udivmodhi4>:
    2b72:	aa 1b       	sub	r26, r26
    2b74:	bb 1b       	sub	r27, r27
    2b76:	51 e1       	ldi	r21, 0x11	; 17
    2b78:	07 c0       	rjmp	.+14     	; 0x2b88 <__udivmodhi4_ep>

00002b7a <__udivmodhi4_loop>:
    2b7a:	aa 1f       	adc	r26, r26
    2b7c:	bb 1f       	adc	r27, r27
    2b7e:	a6 17       	cp	r26, r22
    2b80:	b7 07       	cpc	r27, r23
    2b82:	10 f0       	brcs	.+4      	; 0x2b88 <__udivmodhi4_ep>
    2b84:	a6 1b       	sub	r26, r22
    2b86:	b7 0b       	sbc	r27, r23

00002b88 <__udivmodhi4_ep>:
    2b88:	88 1f       	adc	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	5a 95       	dec	r21
    2b8e:	a9 f7       	brne	.-22     	; 0x2b7a <__udivmodhi4_loop>
    2b90:	80 95       	com	r24
    2b92:	90 95       	com	r25
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	08 95       	ret

00002b9a <__divmodhi4>:
    2b9a:	97 fb       	bst	r25, 7
    2b9c:	09 2e       	mov	r0, r25
    2b9e:	07 26       	eor	r0, r23
    2ba0:	0a d0       	rcall	.+20     	; 0x2bb6 <__divmodhi4_neg1>
    2ba2:	77 fd       	sbrc	r23, 7
    2ba4:	04 d0       	rcall	.+8      	; 0x2bae <__divmodhi4_neg2>
    2ba6:	e5 df       	rcall	.-54     	; 0x2b72 <__udivmodhi4>
    2ba8:	06 d0       	rcall	.+12     	; 0x2bb6 <__divmodhi4_neg1>
    2baa:	00 20       	and	r0, r0
    2bac:	1a f4       	brpl	.+6      	; 0x2bb4 <__divmodhi4_exit>

00002bae <__divmodhi4_neg2>:
    2bae:	70 95       	com	r23
    2bb0:	61 95       	neg	r22
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255

00002bb4 <__divmodhi4_exit>:
    2bb4:	08 95       	ret

00002bb6 <__divmodhi4_neg1>:
    2bb6:	f6 f7       	brtc	.-4      	; 0x2bb4 <__divmodhi4_exit>
    2bb8:	90 95       	com	r25
    2bba:	81 95       	neg	r24
    2bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbe:	08 95       	ret

00002bc0 <__udivmodsi4>:
    2bc0:	a1 e2       	ldi	r26, 0x21	; 33
    2bc2:	1a 2e       	mov	r1, r26
    2bc4:	aa 1b       	sub	r26, r26
    2bc6:	bb 1b       	sub	r27, r27
    2bc8:	fd 01       	movw	r30, r26
    2bca:	0d c0       	rjmp	.+26     	; 0x2be6 <__udivmodsi4_ep>

00002bcc <__udivmodsi4_loop>:
    2bcc:	aa 1f       	adc	r26, r26
    2bce:	bb 1f       	adc	r27, r27
    2bd0:	ee 1f       	adc	r30, r30
    2bd2:	ff 1f       	adc	r31, r31
    2bd4:	a2 17       	cp	r26, r18
    2bd6:	b3 07       	cpc	r27, r19
    2bd8:	e4 07       	cpc	r30, r20
    2bda:	f5 07       	cpc	r31, r21
    2bdc:	20 f0       	brcs	.+8      	; 0x2be6 <__udivmodsi4_ep>
    2bde:	a2 1b       	sub	r26, r18
    2be0:	b3 0b       	sbc	r27, r19
    2be2:	e4 0b       	sbc	r30, r20
    2be4:	f5 0b       	sbc	r31, r21

00002be6 <__udivmodsi4_ep>:
    2be6:	66 1f       	adc	r22, r22
    2be8:	77 1f       	adc	r23, r23
    2bea:	88 1f       	adc	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	1a 94       	dec	r1
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <__udivmodsi4_loop>
    2bf2:	60 95       	com	r22
    2bf4:	70 95       	com	r23
    2bf6:	80 95       	com	r24
    2bf8:	90 95       	com	r25
    2bfa:	9b 01       	movw	r18, r22
    2bfc:	ac 01       	movw	r20, r24
    2bfe:	bd 01       	movw	r22, r26
    2c00:	cf 01       	movw	r24, r30
    2c02:	08 95       	ret

00002c04 <__prologue_saves__>:
    2c04:	2f 92       	push	r2
    2c06:	3f 92       	push	r3
    2c08:	4f 92       	push	r4
    2c0a:	5f 92       	push	r5
    2c0c:	6f 92       	push	r6
    2c0e:	7f 92       	push	r7
    2c10:	8f 92       	push	r8
    2c12:	9f 92       	push	r9
    2c14:	af 92       	push	r10
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	ca 1b       	sub	r28, r26
    2c2e:	db 0b       	sbc	r29, r27
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	09 94       	ijmp

00002c36 <__epilogue_restores__>:
    2c36:	2a 88       	ldd	r2, Y+18	; 0x12
    2c38:	39 88       	ldd	r3, Y+17	; 0x11
    2c3a:	48 88       	ldd	r4, Y+16	; 0x10
    2c3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c48:	b9 84       	ldd	r11, Y+9	; 0x09
    2c4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c4c:	df 80       	ldd	r13, Y+7	; 0x07
    2c4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c50:	fd 80       	ldd	r15, Y+5	; 0x05
    2c52:	0c 81       	ldd	r16, Y+4	; 0x04
    2c54:	1b 81       	ldd	r17, Y+3	; 0x03
    2c56:	aa 81       	ldd	r26, Y+2	; 0x02
    2c58:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5a:	ce 0f       	add	r28, r30
    2c5c:	d1 1d       	adc	r29, r1
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	ed 01       	movw	r28, r26
    2c64:	08 95       	ret

00002c66 <do_rand>:
    2c66:	a0 e0       	ldi	r26, 0x00	; 0
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e9 e3       	ldi	r30, 0x39	; 57
    2c6c:	f6 e1       	ldi	r31, 0x16	; 22
    2c6e:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x10>
    2c72:	ec 01       	movw	r28, r24
    2c74:	68 81       	ld	r22, Y
    2c76:	79 81       	ldd	r23, Y+1	; 0x01
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	61 15       	cp	r22, r1
    2c7e:	71 05       	cpc	r23, r1
    2c80:	81 05       	cpc	r24, r1
    2c82:	91 05       	cpc	r25, r1
    2c84:	21 f4       	brne	.+8      	; 0x2c8e <do_rand+0x28>
    2c86:	64 e2       	ldi	r22, 0x24	; 36
    2c88:	79 ed       	ldi	r23, 0xD9	; 217
    2c8a:	8b e5       	ldi	r24, 0x5B	; 91
    2c8c:	97 e0       	ldi	r25, 0x07	; 7
    2c8e:	2d e1       	ldi	r18, 0x1D	; 29
    2c90:	33 ef       	ldi	r19, 0xF3	; 243
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
    2c9a:	79 01       	movw	r14, r18
    2c9c:	8a 01       	movw	r16, r20
    2c9e:	27 ea       	ldi	r18, 0xA7	; 167
    2ca0:	31 e4       	ldi	r19, 0x41	; 65
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsi3>
    2caa:	5b 01       	movw	r10, r22
    2cac:	6c 01       	movw	r12, r24
    2cae:	c8 01       	movw	r24, r16
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	2c ee       	ldi	r18, 0xEC	; 236
    2cb4:	34 ef       	ldi	r19, 0xF4	; 244
    2cb6:	4f ef       	ldi	r20, 0xFF	; 255
    2cb8:	5f ef       	ldi	r21, 0xFF	; 255
    2cba:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsi3>
    2cbe:	6a 0d       	add	r22, r10
    2cc0:	7b 1d       	adc	r23, r11
    2cc2:	8c 1d       	adc	r24, r12
    2cc4:	9d 1d       	adc	r25, r13
    2cc6:	97 ff       	sbrs	r25, 7
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <do_rand+0x6c>
    2cca:	61 50       	subi	r22, 0x01	; 1
    2ccc:	70 40       	sbci	r23, 0x00	; 0
    2cce:	80 40       	sbci	r24, 0x00	; 0
    2cd0:	90 48       	sbci	r25, 0x80	; 128
    2cd2:	68 83       	st	Y, r22
    2cd4:	79 83       	std	Y+1, r23	; 0x01
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
    2cd8:	9b 83       	std	Y+3, r25	; 0x03
    2cda:	7f 77       	andi	r23, 0x7F	; 127
    2cdc:	cb 01       	movw	r24, r22
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	ea e0       	ldi	r30, 0x0A	; 10
    2ce4:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__epilogue_restores__+0x10>

00002ce8 <rand_r>:
    2ce8:	0e 94 33 16 	call	0x2c66	; 0x2c66 <do_rand>
    2cec:	08 95       	ret

00002cee <rand>:
    2cee:	87 e5       	ldi	r24, 0x57	; 87
    2cf0:	91 e2       	ldi	r25, 0x21	; 33
    2cf2:	0e 94 33 16 	call	0x2c66	; 0x2c66 <do_rand>
    2cf6:	08 95       	ret

00002cf8 <srand>:
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	80 93 57 21 	sts	0x2157, r24
    2d00:	90 93 58 21 	sts	0x2158, r25
    2d04:	a0 93 59 21 	sts	0x2159, r26
    2d08:	b0 93 5a 21 	sts	0x215A, r27
    2d0c:	08 95       	ret

00002d0e <__divmodsi4>:
    2d0e:	97 fb       	bst	r25, 7
    2d10:	09 2e       	mov	r0, r25
    2d12:	05 26       	eor	r0, r21
    2d14:	0e d0       	rcall	.+28     	; 0x2d32 <__divmodsi4_neg1>
    2d16:	57 fd       	sbrc	r21, 7
    2d18:	04 d0       	rcall	.+8      	; 0x2d22 <__divmodsi4_neg2>
    2d1a:	52 df       	rcall	.-348    	; 0x2bc0 <__udivmodsi4>
    2d1c:	0a d0       	rcall	.+20     	; 0x2d32 <__divmodsi4_neg1>
    2d1e:	00 1c       	adc	r0, r0
    2d20:	38 f4       	brcc	.+14     	; 0x2d30 <__divmodsi4_exit>

00002d22 <__divmodsi4_neg2>:
    2d22:	50 95       	com	r21
    2d24:	40 95       	com	r20
    2d26:	30 95       	com	r19
    2d28:	21 95       	neg	r18
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d30 <__divmodsi4_exit>:
    2d30:	08 95       	ret

00002d32 <__divmodsi4_neg1>:
    2d32:	f6 f7       	brtc	.-4      	; 0x2d30 <__divmodsi4_exit>
    2d34:	90 95       	com	r25
    2d36:	80 95       	com	r24
    2d38:	70 95       	com	r23
    2d3a:	61 95       	neg	r22
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	08 95       	ret

00002d44 <_exit>:
    2d44:	f8 94       	cli

00002d46 <__stop_program>:
    2d46:	ff cf       	rjmp	.-2      	; 0x2d46 <__stop_program>
