
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00802000  00001a0a  00001a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00802108  00802108  00001ba6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003e3  00000000  00000000  00002479  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b3a  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001190  00000000  00000000  00005396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bde  00000000  00000000  00006526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00008104  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008a1  00000000  00000000  000083a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cdd  00000000  00000000  00008c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000066f  00000000  00000000  00009922  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  00009f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a8 e0       	ldi	r26, 0x08	; 8
     188:	b1 e2       	ldi	r27, 0x21	; 33
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ab 32       	cpi	r26, 0x2B	; 43
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_copy_data>:
     194:	11 e2       	ldi	r17, 0x21	; 33
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e2       	ldi	r27, 0x20	; 32
     19a:	ea e0       	ldi	r30, 0x0A	; 10
     19c:	fa e1       	ldi	r31, 0x1A	; 26
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a8 30       	cpi	r26, 0x08	; 8
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>
     1aa:	0e 94 40 06 	call	0xc80	; 0xc80 <main>
     1ae:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_91>:
bool i_ENCccw		= 0;

bool i_MIDIRX		= 0;

ISR(USARTD1_RXC_vect)
{
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	i_MIDIRX = 1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 2a 21 	sts	0x212A, r24
}
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	8f 91       	pop	r24
     1d6:	0f 90       	pop	r0
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	0f 90       	pop	r0
     1dc:	1f 90       	pop	r1
     1de:	18 95       	reti

000001e0 <initCLOCK>:


void initCLOCK(){
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <initCLOCK+0x6>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
    //CLOCK AND PLL SETUP
	unsigned char XOSCTEST = 0;
     1ea:	19 82       	std	Y+1, r1	; 0x01
	unsigned char PLLMULTFACTOR;
	PLLMULTFACTOR = 0x02;		//Set the PLL Multiplication Factor to 2x.
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
     1f0:	80 e4       	ldi	r24, 0x40	; 64
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	fc 01       	movw	r30, r24
     1f8:	21 83       	std	Z+1, r18	; 0x01
	CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
     1fa:	80 e4       	ldi	r24, 0x40	; 64
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	fc 01       	movw	r30, r24
     202:	23 83       	std	Z+3, r18	; 0x03
	OSC.XOSCCTRL = 0x8B;
     204:	80 e5       	ldi	r24, 0x50	; 80
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2b e8       	ldi	r18, 0x8B	; 139
     20a:	fc 01       	movw	r30, r24
     20c:	22 83       	std	Z+2, r18	; 0x02
	OSC.CTRL = 0x08;			//Once XOOSCTEST equals 1, it will exit the do loop and enable the external oscillator.
     20e:	80 e5       	ldi	r24, 0x50	; 80
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
	for (XOSCTEST = 0; XOSCTEST < 1; )
     218:	19 82       	std	Y+1, r1	; 0x01
     21a:	09 c0       	rjmp	.+18     	; 0x22e <initCLOCK+0x4e>
		XOSCTEST = OSC.STATUS >> 3 &1;
     21c:	80 e5       	ldi	r24, 0x50	; 80
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	fc 01       	movw	r30, r24
     222:	81 81       	ldd	r24, Z+1	; 0x01
     224:	86 95       	lsr	r24
     226:	86 95       	lsr	r24
     228:	86 95       	lsr	r24
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	89 83       	std	Y+1, r24	; 0x01
	PLLMULTFACTOR = 0x02;		//Set the PLL Multiplication Factor to 2x.
	CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
	CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
	OSC.XOSCCTRL = 0x8B;
	OSC.CTRL = 0x08;			//Once XOOSCTEST equals 1, it will exit the do loop and enable the external oscillator.
	for (XOSCTEST = 0; XOSCTEST < 1; )
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	88 23       	and	r24, r24
     232:	a1 f3       	breq	.-24     	; 0x21c <initCLOCK+0x3c>
		XOSCTEST = OSC.STATUS >> 3 &1;
	OSC.PLLCTRL = 0xC0 + PLLMULTFACTOR;	//Set the PLL to use the external crystal and set multiplication factor.
     234:	80 e5       	ldi	r24, 0x50	; 80
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	2a 81       	ldd	r18, Y+2	; 0x02
     23a:	20 54       	subi	r18, 0x40	; 64
     23c:	fc 01       	movw	r30, r24
     23e:	25 83       	std	Z+5, r18	; 0x05
	OSC.CTRL = 0x18;			//Enable the PLL, disable the External Clock.
     240:	80 e5       	ldi	r24, 0x50	; 80
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	28 e1       	ldi	r18, 0x18	; 24
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	XOSCTEST = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
	for (XOSCTEST = 0; XOSCTEST < 1; )
     24c:	19 82       	std	Y+1, r1	; 0x01
     24e:	08 c0       	rjmp	.+16     	; 0x260 <initCLOCK+0x80>
		XOSCTEST = OSC.STATUS >> 4 &1;
     250:	80 e5       	ldi	r24, 0x50	; 80
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	82 95       	swap	r24
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	81 70       	andi	r24, 0x01	; 1
     25e:	89 83       	std	Y+1, r24	; 0x01
	for (XOSCTEST = 0; XOSCTEST < 1; )
		XOSCTEST = OSC.STATUS >> 3 &1;
	OSC.PLLCTRL = 0xC0 + PLLMULTFACTOR;	//Set the PLL to use the external crystal and set multiplication factor.
	OSC.CTRL = 0x18;			//Enable the PLL, disable the External Clock.
	XOSCTEST = 0;
	for (XOSCTEST = 0; XOSCTEST < 1; )
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	88 23       	and	r24, r24
     264:	a9 f3       	breq	.-22     	; 0x250 <initCLOCK+0x70>
		XOSCTEST = OSC.STATUS >> 4 &1;
	CCP = 0xD8;					//Configuration Change Protection, write signature to change Clock to PLL.
     266:	84 e3       	ldi	r24, 0x34	; 52
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	28 ed       	ldi	r18, 0xD8	; 216
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
	CLK.CTRL = 0x04;			//Set the Clock to PLL
     270:	80 e4       	ldi	r24, 0x40	; 64
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	24 e0       	ldi	r18, 0x04	; 4
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
}
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret

00000284 <initMIDI>:

void initMIDI(){
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62

	cli();						//disable global interrupts
     28c:	f8 94       	cli
	USARTD1.CTRLA = 0x27;		//enable RX interrupt as Medium Level, TX interrupt as Low Level, DRE as Hi Level
     28e:	80 eb       	ldi	r24, 0xB0	; 176
     290:	99 e0       	ldi	r25, 0x09	; 9
     292:	27 e2       	ldi	r18, 0x27	; 39
     294:	fc 01       	movw	r30, r24
     296:	23 83       	std	Z+3, r18	; 0x03
	USARTD1.CTRLB = 0x18;		//set RXEN and TXEN in CTRLB Register to enable USART reciever and transmitter
     298:	80 eb       	ldi	r24, 0xB0	; 176
     29a:	99 e0       	ldi	r25, 0x09	; 9
     29c:	28 e1       	ldi	r18, 0x18	; 24
     29e:	fc 01       	movw	r30, r24
     2a0:	24 83       	std	Z+4, r18	; 0x04
	USARTD1.CTRLC = 0x03;		//Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2a2:	80 eb       	ldi	r24, 0xB0	; 176
     2a4:	99 e0       	ldi	r25, 0x09	; 9
     2a6:	23 e0       	ldi	r18, 0x03	; 3
     2a8:	fc 01       	movw	r30, r24
     2aa:	25 83       	std	Z+5, r18	; 0x05
	USARTD1.BAUDCTRLA = 0x2F;	//BSEL = 47
     2ac:	80 eb       	ldi	r24, 0xB0	; 176
     2ae:	99 e0       	ldi	r25, 0x09	; 9
     2b0:	2f e2       	ldi	r18, 0x2F	; 47
     2b2:	fc 01       	movw	r30, r24
     2b4:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x00;	//BSCALE = 0
     2b6:	80 eb       	ldi	r24, 0xB0	; 176
     2b8:	99 e0       	ldi	r25, 0x09	; 9
     2ba:	fc 01       	movw	r30, r24
     2bc:	17 82       	std	Z+7, r1	; 0x07
	PMIC.CTRL |= 0x07;			//enable all levels on interrupts
     2be:	80 ea       	ldi	r24, 0xA0	; 160
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	20 ea       	ldi	r18, 0xA0	; 160
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	22 81       	ldd	r18, Z+2	; 0x02
     2ca:	27 60       	ori	r18, 0x07	; 7
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 83       	std	Z+2, r18	; 0x02
	sei();						//enable global interrupts
     2d0:	78 94       	sei

}
     2d2:	cf 91       	pop	r28
     2d4:	df 91       	pop	r29
     2d6:	08 95       	ret

000002d8 <initENC>:



void initENC(){
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     2e0:	80 e2       	ldi	r24, 0x20	; 32
     2e2:	96 e0       	ldi	r25, 0x06	; 6
     2e4:	23 e0       	ldi	r18, 0x03	; 3
     2e6:	fc 01       	movw	r30, r24
     2e8:	22 83       	std	Z+2, r18	; 0x02
}
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	08 95       	ret

000002f0 <runENC>:

void runENC(){
     2f0:	df 93       	push	r29
     2f2:	cf 93       	push	r28
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <runENC+0x6>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
	bool A1;	//current A
	bool B1;	//current B
	
	A1 = !(PORTB.IN & 0x01);
     2fa:	80 e2       	ldi	r24, 0x20	; 32
     2fc:	96 e0       	ldi	r25, 0x06	; 6
     2fe:	fc 01       	movw	r30, r24
     300:	80 85       	ldd	r24, Z+8	; 0x08
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	81 70       	andi	r24, 0x01	; 1
     308:	90 70       	andi	r25, 0x00	; 0
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	09 f0       	breq	.+2      	; 0x312 <runENC+0x22>
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	29 83       	std	Y+1, r18	; 0x01
	B1 = !((PORTB.IN >> 1) & 0x01);
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	96 e0       	ldi	r25, 0x06	; 6
     318:	fc 01       	movw	r30, r24
     31a:	80 85       	ldd	r24, Z+8	; 0x08
     31c:	86 95       	lsr	r24
     31e:	88 2f       	mov	r24, r24
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	81 70       	andi	r24, 0x01	; 1
     324:	90 70       	andi	r25, 0x00	; 0
     326:	21 e0       	ldi	r18, 0x01	; 1
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	09 f0       	breq	.+2      	; 0x32e <runENC+0x3e>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	2a 83       	std	Y+2, r18	; 0x02
	
	if (!_i_ENCA0 & A1)		//movement
     330:	90 91 27 21 	lds	r25, 0x2127
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	89 27       	eor	r24, r25
     338:	28 2f       	mov	r18, r24
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	88 2f       	mov	r24, r24
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	82 23       	and	r24, r18
     344:	93 23       	and	r25, r19
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	91 f0       	breq	.+36     	; 0x36e <runENC+0x7e>
	{
		if (B1)
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	88 23       	and	r24, r24
     34e:	21 f0       	breq	.+8      	; 0x358 <runENC+0x68>
			i_ENCcw = 1;	//CW		
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 28 21 	sts	0x2128, r24
     356:	02 c0       	rjmp	.+4      	; 0x35c <runENC+0x6c>
		else
			i_ENCcw = 0;	//CCW
     358:	10 92 28 21 	sts	0x2128, r1
			
		i_ENCccw = !i_ENCccw;
     35c:	90 91 29 21 	lds	r25, 0x2129
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	89 27       	eor	r24, r25
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	80 93 29 21 	sts	0x2129, r24
     36c:	04 c0       	rjmp	.+8      	; 0x376 <runENC+0x86>
	}
	else{
		i_ENCcw = 0;
     36e:	10 92 28 21 	sts	0x2128, r1
		i_ENCccw = 0;
     372:	10 92 29 21 	sts	0x2129, r1
	}		
	_i_ENCA0 = A1;
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	80 93 27 21 	sts	0x2127, r24
}
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	cf 91       	pop	r28
     382:	df 91       	pop	r29
     384:	08 95       	ret

00000386 <initPOT>:

void initPOT(){
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR	= 0xF9;		//ADC3:7 and VREF input
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	96 e0       	ldi	r25, 0x06	; 6
     392:	29 ef       	ldi	r18, 0xF9	; 249
     394:	fc 01       	movw	r30, r24
     396:	22 83       	std	Z+2, r18	; 0x02

	ADCA.CTRLA 		= 0x00;		//disable ADC
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	fc 01       	movw	r30, r24
     39e:	10 82       	st	Z, r1
	ADCA.CTRLB 		= 0x00;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	fc 01       	movw	r30, r24
     3a6:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL	= 0x20;		//set PORTA reference voltage
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
	ADCA.EVCTRL		= 0x00;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	fc 01       	movw	r30, r24
     3b8:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER	= 0x00;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	fc 01       	movw	r30, r24
     3c0:	14 82       	std	Z+4, r1	; 0x04
	ADCA.INTFLAGS	= 0x00;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	fc 01       	movw	r30, r24
     3c8:	16 82       	std	Z+6, r1	; 0x06
	ADCA.CTRLA		|= 0x01;	//enable ADC
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	32 e0       	ldi	r19, 0x02	; 2
     3d2:	f9 01       	movw	r30, r18
     3d4:	20 81       	ld	r18, Z
     3d6:	21 60       	ori	r18, 0x01	; 1
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18

	ADCA.CH0.CTRL	= 0x01;		//select external single-ended input
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH0.MUXCTRL= 0x00;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	fc 01       	movw	r30, r24
     3ec:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CH0.INTCTRL= 0x00;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	fc 01       	movw	r30, r24
     3f4:	12 a2       	std	Z+34, r1	; 0x22
}
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <runPOT>:

void runPOT(){
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	0f 92       	push	r0
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	for(i = 0; i < 5; i++){
     406:	19 82       	std	Y+1, r1	; 0x01
     408:	9a c0       	rjmp	.+308    	; 0x53e <runPOT+0x142>
		ADCA.CH0.INTFLAGS	|= 0x01;			//clear interrupt flag
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	32 e0       	ldi	r19, 0x02	; 2
     412:	f9 01       	movw	r30, r18
     414:	23 a1       	ldd	r18, Z+35	; 0x23
     416:	21 60       	ori	r18, 0x01	; 1
     418:	fc 01       	movw	r30, r24
     41a:	23 a3       	std	Z+35, r18	; 0x23
		ADCA.CH0.MUXCTRL	&= ~(0x07 << 3);	//clear pin select
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	32 e0       	ldi	r19, 0x02	; 2
     424:	f9 01       	movw	r30, r18
     426:	21 a1       	ldd	r18, Z+33	; 0x21
     428:	27 7c       	andi	r18, 0xC7	; 199
     42a:	fc 01       	movw	r30, r24
     42c:	21 a3       	std	Z+33, r18	; 0x21
		ADCA.CH0.MUXCTRL	|= ((i+3) << 3);	//set pin select to current input
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	32 e0       	ldi	r19, 0x02	; 2
     436:	f9 01       	movw	r30, r18
     438:	21 a1       	ldd	r18, Z+33	; 0x21
     43a:	42 2f       	mov	r20, r18
     43c:	29 81       	ldd	r18, Y+1	; 0x01
     43e:	22 2f       	mov	r18, r18
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	2d 5f       	subi	r18, 0xFD	; 253
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	24 2b       	or	r18, r20
     454:	fc 01       	movw	r30, r24
     456:	21 a3       	std	Z+33, r18	; 0x21
		ADCA.CH0.CTRL		|=	0x80;			//start conversion
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	32 e0       	ldi	r19, 0x02	; 2
     460:	f9 01       	movw	r30, r18
     462:	20 a1       	ldd	r18, Z+32	; 0x20
     464:	20 68       	ori	r18, 0x80	; 128
     466:	fc 01       	movw	r30, r24
     468:	20 a3       	std	Z+32, r18	; 0x20
		
		while(!(ADCA.CH0.INTFLAGS & 0x01)){}
     46a:	00 00       	nop
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	fc 01       	movw	r30, r24
     472:	83 a1       	ldd	r24, Z+35	; 0x23
     474:	88 2f       	mov	r24, r24
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	81 70       	andi	r24, 0x01	; 1
     47a:	90 70       	andi	r25, 0x00	; 0
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	b1 f3       	breq	.-20     	; 0x46c <runPOT+0x70>
		
		i_POT[i] = ADCA.CH0.RESL;
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	32 e0       	ldi	r19, 0x02	; 2
     48a:	f9 01       	movw	r30, r18
     48c:	24 a1       	ldd	r18, Z+36	; 0x24
     48e:	22 2f       	mov	r18, r18
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	83 5e       	subi	r24, 0xE3	; 227
     498:	9e 4d       	sbci	r25, 0xDE	; 222
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	31 83       	std	Z+1, r19	; 0x01
		i_POT[i] |= ADCA.CH0.RESH << 8;
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	29 81       	ldd	r18, Y+1	; 0x01
     4a8:	22 2f       	mov	r18, r18
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	23 5e       	subi	r18, 0xE3	; 227
     4b2:	3e 4d       	sbci	r19, 0xDE	; 222
     4b4:	f9 01       	movw	r30, r18
     4b6:	40 81       	ld	r20, Z
     4b8:	51 81       	ldd	r21, Z+1	; 0x01
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	32 e0       	ldi	r19, 0x02	; 2
     4be:	f9 01       	movw	r30, r18
     4c0:	25 a1       	ldd	r18, Z+37	; 0x25
     4c2:	22 2f       	mov	r18, r18
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	32 2f       	mov	r19, r18
     4c8:	22 27       	eor	r18, r18
     4ca:	24 2b       	or	r18, r20
     4cc:	35 2b       	or	r19, r21
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	83 5e       	subi	r24, 0xE3	; 227
     4d4:	9e 4d       	sbci	r25, 0xDE	; 222
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
     4da:	31 83       	std	Z+1, r19	; 0x01
		
		if (i_POT[i] < POTMIN)
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	83 5e       	subi	r24, 0xE3	; 227
     4e8:	9e 4d       	sbci	r25, 0xDE	; 222
     4ea:	fc 01       	movw	r30, r24
     4ec:	80 81       	ld	r24, Z
     4ee:	91 81       	ldd	r25, Z+1	; 0x01
     4f0:	80 3c       	cpi	r24, 0xC0	; 192
     4f2:	91 05       	cpc	r25, r1
     4f4:	58 f4       	brcc	.+22     	; 0x50c <runPOT+0x110>
			i_POT[i] = 0;
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	83 5e       	subi	r24, 0xE3	; 227
     502:	9e 4d       	sbci	r25, 0xDE	; 222
     504:	fc 01       	movw	r30, r24
     506:	10 82       	st	Z, r1
     508:	11 82       	std	Z+1, r1	; 0x01
     50a:	16 c0       	rjmp	.+44     	; 0x538 <runPOT+0x13c>
		else
			i_POT[i] = i_POT[i] - POTMIN;
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	29 81       	ldd	r18, Y+1	; 0x01
     514:	22 2f       	mov	r18, r18
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	23 5e       	subi	r18, 0xE3	; 227
     51e:	3e 4d       	sbci	r19, 0xDE	; 222
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	20 5c       	subi	r18, 0xC0	; 192
     528:	30 40       	sbci	r19, 0x00	; 0
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	83 5e       	subi	r24, 0xE3	; 227
     530:	9e 4d       	sbci	r25, 0xDE	; 222
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
     536:	31 83       	std	Z+1, r19	; 0x01
}

void runPOT(){
	uint8_t i;
	
	for(i = 0; i < 5; i++){
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	89 83       	std	Y+1, r24	; 0x01
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	85 30       	cpi	r24, 0x05	; 5
     542:	08 f4       	brcc	.+2      	; 0x546 <runPOT+0x14a>
     544:	62 cf       	rjmp	.-316    	; 0x40a <runPOT+0xe>
			i_POT[i] = 0;
		else
			i_POT[i] = i_POT[i] - POTMIN;
	}
	
}
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <scalePOT>:

uint16_t scalePOT(uint8_t pot, uint16_t outmin, uint16_t outmax){
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	29 97       	sbiw	r28, 0x09	; 9
     560:	cd bf       	out	0x3d, r28	; 61
     562:	de bf       	out	0x3e, r29	; 62
     564:	8d 83       	std	Y+5, r24	; 0x05
     566:	6e 83       	std	Y+6, r22	; 0x06
     568:	7f 83       	std	Y+7, r23	; 0x07
     56a:	48 87       	std	Y+8, r20	; 0x08
     56c:	59 87       	std	Y+9, r21	; 0x09
	//outmin: minimum value to output
	//outmax: maximum value to output
	
	double temp;
	
	temp = 1.0*i_POT[pot]/POTRANGE;
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	88 2f       	mov	r24, r24
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	83 5e       	subi	r24, 0xE3	; 227
     57a:	9e 4d       	sbci	r25, 0xDE	; 222
     57c:	fc 01       	movw	r30, r24
     57e:	80 81       	ld	r24, Z
     580:	91 81       	ldd	r25, Z+1	; 0x01
     582:	cc 01       	movw	r24, r24
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 49 0a 	call	0x1492	; 0x1492 <__floatunsisf>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 ef       	ldi	r19, 0xF0	; 240
     59c:	43 e7       	ldi	r20, 0x73	; 115
     59e:	55 e4       	ldi	r21, 0x45	; 69
     5a0:	0e 94 19 09 	call	0x1232	; 0x1232 <__divsf3>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	ab 83       	std	Y+3, r26	; 0x03
     5ae:	bc 83       	std	Y+4, r27	; 0x04
	temp = temp*(outmax - outmin) + outmin;
     5b0:	28 85       	ldd	r18, Y+8	; 0x08
     5b2:	39 85       	ldd	r19, Y+9	; 0x09
     5b4:	8e 81       	ldd	r24, Y+6	; 0x06
     5b6:	9f 81       	ldd	r25, Y+7	; 0x07
     5b8:	a9 01       	movw	r20, r18
     5ba:	48 1b       	sub	r20, r24
     5bc:	59 0b       	sbc	r21, r25
     5be:	ca 01       	movw	r24, r20
     5c0:	cc 01       	movw	r24, r24
     5c2:	a0 e0       	ldi	r26, 0x00	; 0
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	0e 94 49 0a 	call	0x1492	; 0x1492 <__floatunsisf>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	bc 01       	movw	r22, r24
     5d4:	cd 01       	movw	r24, r26
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	3a 81       	ldd	r19, Y+2	; 0x02
     5da:	4b 81       	ldd	r20, Y+3	; 0x03
     5dc:	5c 81       	ldd	r21, Y+4	; 0x04
     5de:	0e 94 1f 08 	call	0x103e	; 0x103e <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	7c 01       	movw	r14, r24
     5e8:	8d 01       	movw	r16, r26
     5ea:	8e 81       	ldd	r24, Y+6	; 0x06
     5ec:	9f 81       	ldd	r25, Y+7	; 0x07
     5ee:	cc 01       	movw	r24, r24
     5f0:	a0 e0       	ldi	r26, 0x00	; 0
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	bc 01       	movw	r22, r24
     5f6:	cd 01       	movw	r24, r26
     5f8:	0e 94 49 0a 	call	0x1492	; 0x1492 <__floatunsisf>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
     600:	c8 01       	movw	r24, r16
     602:	b7 01       	movw	r22, r14
     604:	0e 94 c1 07 	call	0xf82	; 0xf82 <__addsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	ab 83       	std	Y+3, r26	; 0x03
     612:	bc 83       	std	Y+4, r27	; 0x04
	
	return (uint16_t) temp;
     614:	69 81       	ldd	r22, Y+1	; 0x01
     616:	7a 81       	ldd	r23, Y+2	; 0x02
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
}
     624:	29 96       	adiw	r28, 0x09	; 9
     626:	cd bf       	out	0x3d, r28	; 61
     628:	de bf       	out	0x3e, r29	; 62
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	08 95       	ret

00000638 <initLED>:

void initLED(){
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
	//initialize all LED outputs, set all as blank
	
	PORTA.DIRSET = 0x06;	//~LT and ~BL output
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	96 e0       	ldi	r25, 0x06	; 6
     644:	26 e0       	ldi	r18, 0x06	; 6
     646:	fc 01       	movw	r30, r24
     648:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTSET = 0x06;	//~LT and ~BL high
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	96 e0       	ldi	r25, 0x06	; 6
     64e:	26 e0       	ldi	r18, 0x06	; 6
     650:	fc 01       	movw	r30, r24
     652:	25 83       	std	Z+5, r18	; 0x05
	
	PORTC.DIRSET = 0xF8;	//STATLED and LED0:3 output
     654:	80 e4       	ldi	r24, 0x40	; 64
     656:	96 e0       	ldi	r25, 0x06	; 6
     658:	28 ef       	ldi	r18, 0xF8	; 248
     65a:	fc 01       	movw	r30, r24
     65c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = 0x3F;	//DSEL0:2 and DP0:2 output
     65e:	80 e6       	ldi	r24, 0x60	; 96
     660:	96 e0       	ldi	r25, 0x06	; 6
     662:	2f e3       	ldi	r18, 0x3F	; 63
     664:	fc 01       	movw	r30, r24
     666:	21 83       	std	Z+1, r18	; 0x01
	
	
	//All LEDs off
	PORTD.OUTSET = 0x38;	//DSEL0:2 high (arm all 7 segments)
     668:	80 e6       	ldi	r24, 0x60	; 96
     66a:	96 e0       	ldi	r25, 0x06	; 6
     66c:	28 e3       	ldi	r18, 0x38	; 56
     66e:	fc 01       	movw	r30, r24
     670:	25 83       	std	Z+5, r18	; 0x05
	PORTC.OUTSET = 0xF0;	//LED0:3 high (blank all 7 segments)
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	96 e0       	ldi	r25, 0x06	; 6
     676:	20 ef       	ldi	r18, 0xF0	; 240
     678:	fc 01       	movw	r30, r24
     67a:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTCLR = 0x38;	//DSEL0: low (disarm all 7 segments)
     67c:	80 e6       	ldi	r24, 0x60	; 96
     67e:	96 e0       	ldi	r25, 0x06	; 6
     680:	28 e3       	ldi	r18, 0x38	; 56
     682:	fc 01       	movw	r30, r24
     684:	26 83       	std	Z+6, r18	; 0x06
	
	PORTD.OUTCLR = 0x07;	//DP0:2 low (blank all dps)
     686:	80 e6       	ldi	r24, 0x60	; 96
     688:	96 e0       	ldi	r25, 0x06	; 6
     68a:	27 e0       	ldi	r18, 0x07	; 7
     68c:	fc 01       	movw	r30, r24
     68e:	26 83       	std	Z+6, r18	; 0x06
	PORTC.OUTSET = 0x08;	//STATLED high (blank statled)
     690:	80 e4       	ldi	r24, 0x40	; 64
     692:	96 e0       	ldi	r25, 0x06	; 6
     694:	28 e0       	ldi	r18, 0x08	; 8
     696:	fc 01       	movw	r30, r24
     698:	25 83       	std	Z+5, r18	; 0x05
}
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	08 95       	ret

000006a0 <runLED>:

void runLED(){
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	27 97       	sbiw	r28, 0x07	; 7
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	de bf       	out	0x3e, r29	; 62
	//booleans and such convert to LED out
	bool DP[3] = {o_LEDDP0, o_LEDDP1, o_LEDDP2};
     6ae:	20 91 11 21 	lds	r18, 0x2111
     6b2:	90 91 12 21 	lds	r25, 0x2112
     6b6:	80 91 13 21 	lds	r24, 0x2113
     6ba:	2d 83       	std	Y+5, r18	; 0x05
     6bc:	9e 83       	std	Y+6, r25	; 0x06
     6be:	8f 83       	std	Y+7, r24	; 0x07
	
	uint8_t i;
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
     6c0:	80 91 1b 21 	lds	r24, 0x211B
     6c4:	90 91 1c 21 	lds	r25, 0x211C
     6c8:	8b 83       	std	Y+3, r24	; 0x03
     6ca:	9c 83       	std	Y+4, r25	; 0x04
	
	for (i=0 ; i<3 ; i++){
     6cc:	19 82       	std	Y+1, r1	; 0x01
     6ce:	7e c0       	rjmp	.+252    	; 0x7cc <runLED+0x12c>
		digit = threeDigits%10;					//extract lowest current digit of 7seg
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	2a e0       	ldi	r18, 0x0A	; 10
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	b9 01       	movw	r22, r18
     6da:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodhi4>
     6de:	8a 83       	std	Y+2, r24	; 0x02
		if (threeDigits==0 && (i>0))			//if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	00 97       	sbiw	r24, 0x00	; 0
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <runLED+0x52>
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	88 23       	and	r24, r24
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <runLED+0x52>
			digit = 10;
     6ee:	8a e0       	ldi	r24, 0x0A	; 10
     6f0:	8a 83       	std	Y+2, r24	; 0x02
			
		PORTD.OUTCLR = 0x08 << (i+2)%3;			//arm appropriate 7 segment		(CHANGE INDEX SCALING FOR NEXT REVISION)
     6f2:	20 e6       	ldi	r18, 0x60	; 96
     6f4:	36 e0       	ldi	r19, 0x06	; 6
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 96       	adiw	r24, 0x02	; 2
     6fe:	43 e0       	ldi	r20, 0x03	; 3
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	ba 01       	movw	r22, r20
     704:	0e 94 bf 0c 	call	0x197e	; 0x197e <__divmodhi4>
     708:	ac 01       	movw	r20, r24
     70a:	88 e0       	ldi	r24, 0x08	; 8
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	04 2e       	mov	r0, r20
     710:	02 c0       	rjmp	.+4      	; 0x716 <runLED+0x76>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	0a 94       	dec	r0
     718:	e2 f7       	brpl	.-8      	; 0x712 <runLED+0x72>
     71a:	f9 01       	movw	r30, r18
     71c:	86 83       	std	Z+6, r24	; 0x06
		PORTC.OUTCLR = 0xF0;					//clear digit select
     71e:	80 e4       	ldi	r24, 0x40	; 64
     720:	96 e0       	ldi	r25, 0x06	; 6
     722:	20 ef       	ldi	r18, 0xF0	; 240
     724:	fc 01       	movw	r30, r24
     726:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = digit << 4;				//set digit select #
     728:	80 e4       	ldi	r24, 0x40	; 64
     72a:	96 e0       	ldi	r25, 0x06	; 6
     72c:	2a 81       	ldd	r18, Y+2	; 0x02
     72e:	22 95       	swap	r18
     730:	20 7f       	andi	r18, 0xF0	; 240
     732:	fc 01       	movw	r30, r24
     734:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0x38;					//disarm all 7 segments
     736:	80 e6       	ldi	r24, 0x60	; 96
     738:	96 e0       	ldi	r25, 0x06	; 6
     73a:	28 e3       	ldi	r18, 0x38	; 56
     73c:	fc 01       	movw	r30, r24
     73e:	25 83       	std	Z+5, r18	; 0x05
		
		threeDigits = threeDigits/10;			//shift 7seg number down to next digit
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	2a e0       	ldi	r18, 0x0A	; 10
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	b9 01       	movw	r22, r18
     74a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodhi4>
     74e:	9b 01       	movw	r18, r22
     750:	2b 83       	std	Y+3, r18	; 0x03
     752:	3c 83       	std	Y+4, r19	; 0x04
		
		if (DP[i])							//light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	88 2f       	mov	r24, r24
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9e 01       	movw	r18, r28
     75c:	2b 5f       	subi	r18, 0xFB	; 251
     75e:	3f 4f       	sbci	r19, 0xFF	; 255
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	88 23       	and	r24, r24
     76a:	b9 f0       	breq	.+46     	; 0x79a <runLED+0xfa>
			PORTD.OUTSET = 1 << (i+2)%3;
     76c:	20 e6       	ldi	r18, 0x60	; 96
     76e:	36 e0       	ldi	r19, 0x06	; 6
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	02 96       	adiw	r24, 0x02	; 2
     778:	43 e0       	ldi	r20, 0x03	; 3
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	ba 01       	movw	r22, r20
     77e:	0e 94 bf 0c 	call	0x197e	; 0x197e <__divmodhi4>
     782:	ac 01       	movw	r20, r24
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	04 2e       	mov	r0, r20
     78a:	02 c0       	rjmp	.+4      	; 0x790 <runLED+0xf0>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <runLED+0xec>
     794:	f9 01       	movw	r30, r18
     796:	85 83       	std	Z+5, r24	; 0x05
     798:	16 c0       	rjmp	.+44     	; 0x7c6 <runLED+0x126>
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
     79a:	20 e6       	ldi	r18, 0x60	; 96
     79c:	36 e0       	ldi	r19, 0x06	; 6
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 96       	adiw	r24, 0x02	; 2
     7a6:	43 e0       	ldi	r20, 0x03	; 3
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	ba 01       	movw	r22, r20
     7ac:	0e 94 bf 0c 	call	0x197e	; 0x197e <__divmodhi4>
     7b0:	ac 01       	movw	r20, r24
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	04 2e       	mov	r0, r20
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <runLED+0x11e>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <runLED+0x11a>
     7c2:	f9 01       	movw	r30, r18
     7c4:	86 83       	std	Z+6, r24	; 0x06
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
	
	for (i=0 ; i<3 ; i++){
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	8f 5f       	subi	r24, 0xFF	; 255
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	08 f4       	brcc	.+2      	; 0x7d4 <runLED+0x134>
     7d2:	7e cf       	rjmp	.-260    	; 0x6d0 <runLED+0x30>
			PORTD.OUTSET = 1 << (i+2)%3;
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
	}
	
	if (o_LEDSTAT)								//light STATLED if necessary
     7d4:	80 91 14 21 	lds	r24, 0x2114
     7d8:	88 23       	and	r24, r24
     7da:	31 f0       	breq	.+12     	; 0x7e8 <runLED+0x148>
		PORTC.OUTCLR = 0x08;
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	96 e0       	ldi	r25, 0x06	; 6
     7e0:	28 e0       	ldi	r18, 0x08	; 8
     7e2:	fc 01       	movw	r30, r24
     7e4:	26 83       	std	Z+6, r18	; 0x06
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <runLED+0x152>
	else
		PORTC.OUTSET = 0x08;
     7e8:	80 e4       	ldi	r24, 0x40	; 64
     7ea:	96 e0       	ldi	r25, 0x06	; 6
     7ec:	28 e0       	ldi	r18, 0x08	; 8
     7ee:	fc 01       	movw	r30, r24
     7f0:	25 83       	std	Z+5, r18	; 0x05
	
}
     7f2:	27 96       	adiw	r28, 0x07	; 7
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <initSW>:

void initSW(){
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	PORTB.DIRCLR = 0x0C;				//SW8(push) and Encoder pushbutton input
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	96 e0       	ldi	r25, 0x06	; 6
     80a:	2c e0       	ldi	r18, 0x0C	; 12
     80c:	fc 01       	movw	r30, r24
     80e:	22 83       	std	Z+2, r18	; 0x02
	PORTE.DIRCLR = 0x08;				//SW7(toggle) input
     810:	80 e8       	ldi	r24, 0x80	; 128
     812:	96 e0       	ldi	r25, 0x06	; 6
     814:	28 e0       	ldi	r18, 0x08	; 8
     816:	fc 01       	movw	r30, r24
     818:	22 83       	std	Z+2, r18	; 0x02
}
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <runSW>:

void runSW(){
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	0f 92       	push	r0
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	//_i_SW	 = final ["]
	//_i_SWc[] = count for ["]
	
	uint8_t i;
	
	_i_SW1 = 0x00;									//capture current physical switch positions
     82a:	10 92 16 21 	sts	0x2116, r1
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	96 e0       	ldi	r25, 0x06	; 6
     832:	fc 01       	movw	r30, r24
     834:	80 85       	ldd	r24, Z+8	; 0x08
     836:	98 2f       	mov	r25, r24
     838:	96 95       	lsr	r25
     83a:	96 95       	lsr	r25
     83c:	96 95       	lsr	r25
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	99 23       	and	r25, r25
     842:	09 f0       	breq	.+2      	; 0x846 <runSW+0x26>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 91 16 21 	lds	r25, 0x2116
     84a:	89 2b       	or	r24, r25
     84c:	80 93 16 21 	sts	0x2116, r24
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
     850:	80 e2       	ldi	r24, 0x20	; 32
     852:	96 e0       	ldi	r25, 0x06	; 6
     854:	fc 01       	movw	r30, r24
     856:	80 85       	ldd	r24, Z+8	; 0x08
     858:	86 95       	lsr	r24
     85a:	86 95       	lsr	r24
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	81 70       	andi	r24, 0x01	; 1
     862:	90 70       	andi	r25, 0x00	; 0
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	11 f4       	brne	.+4      	; 0x86c <runSW+0x4c>
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	01 c0       	rjmp	.+2      	; 0x86e <runSW+0x4e>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 91 16 21 	lds	r25, 0x2116
     872:	89 2b       	or	r24, r25
     874:	80 93 16 21 	sts	0x2116, r24
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
     878:	80 e2       	ldi	r24, 0x20	; 32
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	fc 01       	movw	r30, r24
     87e:	80 85       	ldd	r24, Z+8	; 0x08
     880:	86 95       	lsr	r24
     882:	86 95       	lsr	r24
     884:	86 95       	lsr	r24
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	81 70       	andi	r24, 0x01	; 1
     88c:	90 70       	andi	r25, 0x00	; 0
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	11 f4       	brne	.+4      	; 0x896 <runSW+0x76>
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	01 c0       	rjmp	.+2      	; 0x898 <runSW+0x78>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 91 16 21 	lds	r25, 0x2116
     89c:	89 2b       	or	r24, r25
     89e:	80 93 16 21 	sts	0x2116, r24
	
	for (i = 0; i < 3; i++){
     8a2:	19 82       	std	Y+1, r1	; 0x01
     8a4:	6b c0       	rjmp	.+214    	; 0x97c <runSW+0x15c>
		if (_i_SW1 >> i == _i_SW0 >> i)			//if switch didn't change
     8a6:	80 91 16 21 	lds	r24, 0x2116
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	29 81       	ldd	r18, Y+1	; 0x01
     8b0:	22 2f       	mov	r18, r18
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	ac 01       	movw	r20, r24
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <runSW+0x9c>
     8b8:	55 95       	asr	r21
     8ba:	47 95       	ror	r20
     8bc:	2a 95       	dec	r18
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <runSW+0x98>
     8c0:	9a 01       	movw	r18, r20
     8c2:	80 91 15 21 	lds	r24, 0x2115
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	49 81       	ldd	r20, Y+1	; 0x01
     8cc:	44 2f       	mov	r20, r20
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	04 2e       	mov	r0, r20
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <runSW+0xb8>
     8d4:	95 95       	asr	r25
     8d6:	87 95       	ror	r24
     8d8:	0a 94       	dec	r0
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <runSW+0xb4>
     8dc:	28 17       	cp	r18, r24
     8de:	39 07       	cpc	r19, r25
     8e0:	71 f4       	brne	.+28     	; 0x8fe <runSW+0xde>
			_i_SWc[i]++;							//increment count		
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9c 01       	movw	r18, r24
     8ea:	28 5e       	subi	r18, 0xE8	; 232
     8ec:	3e 4d       	sbci	r19, 0xDE	; 222
     8ee:	f9 01       	movw	r30, r18
     8f0:	20 81       	ld	r18, Z
     8f2:	2f 5f       	subi	r18, 0xFF	; 255
     8f4:	88 5e       	subi	r24, 0xE8	; 232
     8f6:	9e 4d       	sbci	r25, 0xDE	; 222
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <runSW+0xec>
		else
			_i_SWc[i] = 0;							//else reset count			
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	88 5e       	subi	r24, 0xE8	; 232
     906:	9e 4d       	sbci	r25, 0xDE	; 222
     908:	fc 01       	movw	r30, r24
     90a:	10 82       	st	Z, r1
		if (_i_SWc[i] > DEBOUNCE){					//if count is over debounce value
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	88 5e       	subi	r24, 0xE8	; 232
     914:	9e 4d       	sbci	r25, 0xDE	; 222
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	89 30       	cpi	r24, 0x09	; 9
     91c:	60 f1       	brcs	.+88     	; 0x976 <runSW+0x156>
			_i_SW &= ~(1 << i);
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	28 2f       	mov	r18, r24
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <runSW+0x10e>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	2a 95       	dec	r18
     930:	e2 f7       	brpl	.-8      	; 0x92a <runSW+0x10a>
     932:	98 2f       	mov	r25, r24
     934:	90 95       	com	r25
     936:	80 91 17 21 	lds	r24, 0x2117
     93a:	89 23       	and	r24, r25
     93c:	80 93 17 21 	sts	0x2117, r24
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	02 2e       	mov	r0, r18
     94c:	02 c0       	rjmp	.+4      	; 0x952 <runSW+0x132>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <runSW+0x12e>
     956:	98 2f       	mov	r25, r24
     958:	80 91 16 21 	lds	r24, 0x2116
     95c:	98 23       	and	r25, r24
     95e:	80 91 17 21 	lds	r24, 0x2117
     962:	89 2b       	or	r24, r25
     964:	80 93 17 21 	sts	0x2117, r24
			_i_SWc[i] = 0;							//and reset count
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	88 5e       	subi	r24, 0xE8	; 232
     970:	9e 4d       	sbci	r25, 0xDE	; 222
     972:	fc 01       	movw	r30, r24
     974:	10 82       	st	Z, r1
	_i_SW1 = 0x00;									//capture current physical switch positions
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
	
	for (i = 0; i < 3; i++){
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	08 f4       	brcc	.+2      	; 0x984 <runSW+0x164>
     982:	91 cf       	rjmp	.-222    	; 0x8a6 <runSW+0x86>
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
			_i_SWc[i] = 0;							//and reset count
		}
	}	
	
	_i_SW0 = _i_SW1;								//set last switch position to current switch position
     984:	80 91 16 21 	lds	r24, 0x2116
     988:	80 93 15 21 	sts	0x2115, r24
	
	//set booleans
	
	if (_i_SW & 0x01){			//if toggle IS on
     98c:	80 91 17 21 	lds	r24, 0x2117
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	81 70       	andi	r24, 0x01	; 1
     996:	90 70       	andi	r25, 0x00	; 0
     998:	88 23       	and	r24, r24
     99a:	81 f0       	breq	.+32     	; 0x9bc <runSW+0x19c>
		i_SWTOGoff = 0;				//not a new off
     99c:	10 92 10 21 	sts	0x2110, r1
		if (i_SWTOGstate)			//if toggle WAS on
     9a0:	80 91 0e 21 	lds	r24, 0x210E
     9a4:	88 23       	and	r24, r24
     9a6:	19 f0       	breq	.+6      	; 0x9ae <runSW+0x18e>
			i_SWTOGon = 0;				//not a new on
     9a8:	10 92 0f 21 	sts	0x210F, r1
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <runSW+0x194>
		else							//else (toggle WAS off)
			i_SWTOGon = 1;				//new on
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 0f 21 	sts	0x210F, r24
		i_SWTOGstate = 1;		//set current value
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 0e 21 	sts	0x210E, r24
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <runSW+0x1b8>
	}		
	else{						//if toggle IS off
		i_SWTOGon = 0;				//not a new on
     9bc:	10 92 0f 21 	sts	0x210F, r1
		if (i_SWTOGstate)			//if toggle WAS on
     9c0:	80 91 0e 21 	lds	r24, 0x210E
     9c4:	88 23       	and	r24, r24
     9c6:	21 f0       	breq	.+8      	; 0x9d0 <runSW+0x1b0>
			i_SWTOGoff = 1;				//new off
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 10 21 	sts	0x2110, r24
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <runSW+0x1b4>
		else
			i_SWTOGoff = 0;
     9d0:	10 92 10 21 	sts	0x2110, r1
		i_SWTOGstate = 0;
     9d4:	10 92 0e 21 	sts	0x210E, r1
	}		
	
	if (_i_SW & 0x02){		
     9d8:	80 91 17 21 	lds	r24, 0x2117
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	82 70       	andi	r24, 0x02	; 2
     9e2:	90 70       	andi	r25, 0x00	; 0
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	81 f0       	breq	.+32     	; 0xa08 <runSW+0x1e8>
		i_SWPUSHoff = 0;		
     9e8:	10 92 0a 21 	sts	0x210A, r1
		if (i_SWPUSHstate)		
     9ec:	80 91 08 21 	lds	r24, 0x2108
     9f0:	88 23       	and	r24, r24
     9f2:	19 f0       	breq	.+6      	; 0x9fa <runSW+0x1da>
			i_SWPUSHon = 0;		
     9f4:	10 92 09 21 	sts	0x2109, r1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <runSW+0x1e0>
		else						
			i_SWPUSHon = 1;				
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 09 21 	sts	0x2109, r24
		i_SWPUSHstate = 1;		
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 08 21 	sts	0x2108, r24
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <runSW+0x204>
	}		
	else{						
		i_SWPUSHon = 0;				
     a08:	10 92 09 21 	sts	0x2109, r1
		if (i_SWPUSHstate)			
     a0c:	80 91 08 21 	lds	r24, 0x2108
     a10:	88 23       	and	r24, r24
     a12:	21 f0       	breq	.+8      	; 0xa1c <runSW+0x1fc>
			i_SWPUSHoff = 1;		
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 0a 21 	sts	0x210A, r24
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <runSW+0x200>
		else
			i_SWPUSHoff = 0;
     a1c:	10 92 0a 21 	sts	0x210A, r1
		i_SWPUSHstate = 0;
     a20:	10 92 08 21 	sts	0x2108, r1
	}
	
	if (_i_SW & 0x04){		
     a24:	80 91 17 21 	lds	r24, 0x2117
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	84 70       	andi	r24, 0x04	; 4
     a2e:	90 70       	andi	r25, 0x00	; 0
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	81 f0       	breq	.+32     	; 0xa54 <runSW+0x234>
		i_SWENCoff = 0;		
     a34:	10 92 0d 21 	sts	0x210D, r1
		if (i_SWENCstate)		
     a38:	80 91 0b 21 	lds	r24, 0x210B
     a3c:	88 23       	and	r24, r24
     a3e:	19 f0       	breq	.+6      	; 0xa46 <runSW+0x226>
			i_SWENCon = 0;		
     a40:	10 92 0c 21 	sts	0x210C, r1
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <runSW+0x22c>
		else						
			i_SWENCon = 1;				
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 0c 21 	sts	0x210C, r24
		i_SWENCstate = 1;		
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 0b 21 	sts	0x210B, r24
     a52:	0e c0       	rjmp	.+28     	; 0xa70 <runSW+0x250>
	}		
	else{						
		i_SWENCon = 0;				
     a54:	10 92 0c 21 	sts	0x210C, r1
		if (i_SWENCstate)			
     a58:	80 91 0b 21 	lds	r24, 0x210B
     a5c:	88 23       	and	r24, r24
     a5e:	21 f0       	breq	.+8      	; 0xa68 <runSW+0x248>
			i_SWENCoff = 1;		
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 0d 21 	sts	0x210D, r24
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <runSW+0x24c>
		else
			i_SWENCoff = 0;
     a68:	10 92 0d 21 	sts	0x210D, r1
		i_SWENCstate = 0;
     a6c:	10 92 0b 21 	sts	0x210B, r1
	}		
	
	
}
     a70:	0f 90       	pop	r0
     a72:	cf 91       	pop	r28
     a74:	df 91       	pop	r29
     a76:	08 95       	ret

00000a78 <test_switches_and_LEDs>:

void test_switches_and_LEDs(){
     a78:	df 93       	push	r29
     a7a:	cf 93       	push	r28
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
	initLED();
     a80:	0e 94 1c 03 	call	0x638	; 0x638 <initLED>
	initSW();
     a84:	0e 94 ff 03 	call	0x7fe	; 0x7fe <initSW>
	
	o_LED7SEG = 500;
     a88:	84 ef       	ldi	r24, 0xF4	; 244
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	80 93 1b 21 	sts	0x211B, r24
     a90:	90 93 1c 21 	sts	0x211C, r25
	
	while(1){
		runSW();
     a94:	0e 94 10 04 	call	0x820	; 0x820 <runSW>
		
		o_LEDDP0 = i_SWENCstate;
     a98:	80 91 0b 21 	lds	r24, 0x210B
     a9c:	80 93 11 21 	sts	0x2111, r24
		o_LEDDP1 = i_SWPUSHstate;
     aa0:	80 91 08 21 	lds	r24, 0x2108
     aa4:	80 93 12 21 	sts	0x2112, r24
		o_LEDDP2 = i_SWTOGstate;
     aa8:	80 91 0e 21 	lds	r24, 0x210E
     aac:	80 93 13 21 	sts	0x2113, r24
		
		if (i_SWTOGstate){
     ab0:	80 91 0e 21 	lds	r24, 0x210E
     ab4:	88 23       	and	r24, r24
     ab6:	d9 f0       	breq	.+54     	; 0xaee <test_switches_and_LEDs+0x76>
			if (i_SWPUSHon)
     ab8:	80 91 09 21 	lds	r24, 0x2109
     abc:	88 23       	and	r24, r24
     abe:	49 f0       	breq	.+18     	; 0xad2 <test_switches_and_LEDs+0x5a>
				o_LED7SEG += 10;
     ac0:	80 91 1b 21 	lds	r24, 0x211B
     ac4:	90 91 1c 21 	lds	r25, 0x211C
     ac8:	0a 96       	adiw	r24, 0x0a	; 10
     aca:	80 93 1b 21 	sts	0x211B, r24
     ace:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCon)
     ad2:	80 91 0c 21 	lds	r24, 0x210C
     ad6:	88 23       	and	r24, r24
     ad8:	21 f1       	breq	.+72     	; 0xb22 <test_switches_and_LEDs+0xaa>
				o_LED7SEG += 1;
     ada:	80 91 1b 21 	lds	r24, 0x211B
     ade:	90 91 1c 21 	lds	r25, 0x211C
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	80 93 1b 21 	sts	0x211B, r24
     ae8:	90 93 1c 21 	sts	0x211C, r25
     aec:	1a c0       	rjmp	.+52     	; 0xb22 <test_switches_and_LEDs+0xaa>
		}
		else{
			if (i_SWPUSHoff)
     aee:	80 91 0a 21 	lds	r24, 0x210A
     af2:	88 23       	and	r24, r24
     af4:	49 f0       	breq	.+18     	; 0xb08 <test_switches_and_LEDs+0x90>
				o_LED7SEG += -10;
     af6:	80 91 1b 21 	lds	r24, 0x211B
     afa:	90 91 1c 21 	lds	r25, 0x211C
     afe:	0a 97       	sbiw	r24, 0x0a	; 10
     b00:	80 93 1b 21 	sts	0x211B, r24
     b04:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCoff)
     b08:	80 91 0d 21 	lds	r24, 0x210D
     b0c:	88 23       	and	r24, r24
     b0e:	49 f0       	breq	.+18     	; 0xb22 <test_switches_and_LEDs+0xaa>
				o_LED7SEG += -1;
     b10:	80 91 1b 21 	lds	r24, 0x211B
     b14:	90 91 1c 21 	lds	r25, 0x211C
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	80 93 1b 21 	sts	0x211B, r24
     b1e:	90 93 1c 21 	sts	0x211C, r25
		}
		
		if (o_LED7SEG > 999)
     b22:	80 91 1b 21 	lds	r24, 0x211B
     b26:	90 91 1c 21 	lds	r25, 0x211C
     b2a:	23 e0       	ldi	r18, 0x03	; 3
     b2c:	88 3e       	cpi	r24, 0xE8	; 232
     b2e:	92 07       	cpc	r25, r18
     b30:	20 f0       	brcs	.+8      	; 0xb3a <test_switches_and_LEDs+0xc2>
			o_LED7SEG = 0;
     b32:	10 92 1b 21 	sts	0x211B, r1
     b36:	10 92 1c 21 	sts	0x211C, r1
		
		if (o_LED7SEG < 1)
     b3a:	80 91 1b 21 	lds	r24, 0x211B
     b3e:	90 91 1c 21 	lds	r25, 0x211C
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	31 f4       	brne	.+12     	; 0xb52 <test_switches_and_LEDs+0xda>
			o_LED7SEG = 999; 
     b46:	87 ee       	ldi	r24, 0xE7	; 231
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	80 93 1b 21 	sts	0x211B, r24
     b4e:	90 93 1c 21 	sts	0x211C, r25
		
		runLED();
     b52:	0e 94 50 03 	call	0x6a0	; 0x6a0 <runLED>
	}
     b56:	9e cf       	rjmp	.-196    	; 0xa94 <test_switches_and_LEDs+0x1c>

00000b58 <test_pots>:
}

void test_pots(){
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	initLED();
     b66:	0e 94 1c 03 	call	0x638	; 0x638 <initLED>
	initSW();
     b6a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <initSW>
	initPOT();
     b6e:	0e 94 c3 01 	call	0x386	; 0x386 <initPOT>
	
	uint8_t selPOT = 0;
     b72:	19 82       	std	Y+1, r1	; 0x01
	
	while(1){
		runSW();
     b74:	0e 94 10 04 	call	0x820	; 0x820 <runSW>
		runPOT();
     b78:	0e 94 fe 01 	call	0x3fc	; 0x3fc <runPOT>
	
	
		o_LED7SEG = 100*(selPOT+1) + scalePOT(selPOT, 0, 7);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	ac 01       	movw	r20, r24
     b84:	4f 5f       	subi	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	24 e6       	ldi	r18, 0x64	; 100
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	42 9f       	mul	r20, r18
     b8e:	c0 01       	movw	r24, r0
     b90:	43 9f       	mul	r20, r19
     b92:	90 0d       	add	r25, r0
     b94:	52 9f       	mul	r21, r18
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	8c 01       	movw	r16, r24
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	47 e0       	ldi	r20, 0x07	; 7
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 a7 02 	call	0x54e	; 0x54e <scalePOT>
     baa:	80 0f       	add	r24, r16
     bac:	91 1f       	adc	r25, r17
     bae:	80 93 1b 21 	sts	0x211B, r24
     bb2:	90 93 1c 21 	sts	0x211C, r25
			
		if(i_SWENCon){
     bb6:	80 91 0c 21 	lds	r24, 0x210C
     bba:	88 23       	and	r24, r24
     bbc:	39 f0       	breq	.+14     	; 0xbcc <test_pots+0x74>
			selPOT++;
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	89 83       	std	Y+1, r24	; 0x01
			if (selPOT>4)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <test_pots+0x74>
				selPOT = 0;
     bca:	19 82       	std	Y+1, r1	; 0x01
		}
	
		runLED();
     bcc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <runLED>
	
	}	
     bd0:	d1 cf       	rjmp	.-94     	; 0xb74 <test_pots+0x1c>

00000bd2 <test_encoder>:
}

void test_encoder(){
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	initLED();
     bda:	0e 94 1c 03 	call	0x638	; 0x638 <initLED>
	initSW();
     bde:	0e 94 ff 03 	call	0x7fe	; 0x7fe <initSW>
	initPOT();
     be2:	0e 94 c3 01 	call	0x386	; 0x386 <initPOT>
	initENC();
     be6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <initENC>
	
	o_LED7SEG = 100;
     bea:	84 e6       	ldi	r24, 0x64	; 100
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	80 93 1b 21 	sts	0x211B, r24
     bf2:	90 93 1c 21 	sts	0x211C, r25
	
	while(1){
		runSW();
     bf6:	0e 94 10 04 	call	0x820	; 0x820 <runSW>
		runPOT();
     bfa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <runPOT>
		runENC();
     bfe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <runENC>
		
		if (i_ENCcw)
     c02:	80 91 28 21 	lds	r24, 0x2128
     c06:	88 23       	and	r24, r24
     c08:	51 f0       	breq	.+20     	; 0xc1e <test_encoder+0x4c>
			o_LED7SEG++;
     c0a:	80 91 1b 21 	lds	r24, 0x211B
     c0e:	90 91 1c 21 	lds	r25, 0x211C
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	80 93 1b 21 	sts	0x211B, r24
     c18:	90 93 1c 21 	sts	0x211C, r25
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <test_encoder+0x66>
		else if (i_ENCccw)
     c1e:	80 91 29 21 	lds	r24, 0x2129
     c22:	88 23       	and	r24, r24
     c24:	49 f0       	breq	.+18     	; 0xc38 <test_encoder+0x66>
			o_LED7SEG += -1;
     c26:	80 91 1b 21 	lds	r24, 0x211B
     c2a:	90 91 1c 21 	lds	r25, 0x211C
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	80 93 1b 21 	sts	0x211B, r24
     c34:	90 93 1c 21 	sts	0x211C, r25
			
		o_LEDSTAT = i_SWENCstate;
     c38:	80 91 0b 21 	lds	r24, 0x210B
     c3c:	80 93 14 21 	sts	0x2114, r24

		
		runLED();
     c40:	0e 94 50 03 	call	0x6a0	; 0x6a0 <runLED>
	}
     c44:	d8 cf       	rjmp	.-80     	; 0xbf6 <test_encoder+0x24>

00000c46 <test_midi>:
}

void test_midi(){
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	initCLOCK();
     c4e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <initCLOCK>
	initLED();
     c52:	0e 94 1c 03 	call	0x638	; 0x638 <initLED>
	initMIDI();
     c56:	0e 94 42 01 	call	0x284	; 0x284 <initMIDI>
	
	i_MIDIRX = 0;
     c5a:	10 92 2a 21 	sts	0x212A, r1
	
	while(1){

		if (i_MIDIRX){
     c5e:	80 91 2a 21 	lds	r24, 0x212A
     c62:	88 23       	and	r24, r24
     c64:	21 f0       	breq	.+8      	; 0xc6e <test_midi+0x28>
		//	i_MIDIRX = 0;
			o_LEDSTAT = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 14 21 	sts	0x2114, r24
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <test_midi+0x2c>
		}
		else
			o_LEDSTAT = 0;
     c6e:	10 92 14 21 	sts	0x2114, r1
			
		o_LEDDP0 = i_SWTOGstate;
     c72:	80 91 0e 21 	lds	r24, 0x210E
     c76:	80 93 11 21 	sts	0x2111, r24
			
		runLED();
     c7a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <runLED>
	}
     c7e:	ef cf       	rjmp	.-34     	; 0xc5e <test_midi+0x18>

00000c80 <main>:
}	

int main(void) {
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62

	test_midi();
     c88:	0e 94 23 06 	call	0xc46	; 0xc46 <test_midi>

	return 0;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <__fixunssfsi>:
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	7b 01       	movw	r14, r22
     ca0:	8c 01       	movw	r16, r24
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	5f e4       	ldi	r21, 0x4F	; 79
     caa:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     cae:	87 fd       	sbrc	r24, 7
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__fixunssfsi+0x3e>
     cb2:	c8 01       	movw	r24, r16
     cb4:	b7 01       	movw	r22, r14
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	5f e4       	ldi	r21, 0x4F	; 79
     cbe:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__subsf3>
     cc2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixsfsi>
     cc6:	9b 01       	movw	r18, r22
     cc8:	ac 01       	movw	r20, r24
     cca:	20 50       	subi	r18, 0x00	; 0
     ccc:	30 40       	sbci	r19, 0x00	; 0
     cce:	40 40       	sbci	r20, 0x00	; 0
     cd0:	50 48       	sbci	r21, 0x80	; 128
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <__fixunssfsi+0x4a>
     cd4:	c8 01       	movw	r24, r16
     cd6:	b7 01       	movw	r22, r14
     cd8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixsfsi>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	b9 01       	movw	r22, r18
     ce2:	ca 01       	movw	r24, r20
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	08 95       	ret

00000cee <_fpadd_parts>:
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ed e7       	ldi	r30, 0x7D	; 125
     cf4:	f6 e0       	ldi	r31, 0x06	; 6
     cf6:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__prologue_saves__+0x8>
     cfa:	fc 01       	movw	r30, r24
     cfc:	ea 01       	movw	r28, r20
     cfe:	80 81       	ld	r24, Z
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	08 f4       	brcc	.+2      	; 0xd06 <_fpadd_parts+0x18>
     d04:	38 c1       	rjmp	.+624    	; 0xf76 <_fpadd_parts+0x288>
     d06:	db 01       	movw	r26, r22
     d08:	9c 91       	ld	r25, X
     d0a:	92 30       	cpi	r25, 0x02	; 2
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <_fpadd_parts+0x22>
     d0e:	30 c1       	rjmp	.+608    	; 0xf70 <_fpadd_parts+0x282>
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	59 f4       	brne	.+22     	; 0xd2a <_fpadd_parts+0x3c>
     d14:	94 30       	cpi	r25, 0x04	; 4
     d16:	09 f0       	breq	.+2      	; 0xd1a <_fpadd_parts+0x2c>
     d18:	2e c1       	rjmp	.+604    	; 0xf76 <_fpadd_parts+0x288>
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	8c 91       	ld	r24, X
     d20:	11 97       	sbiw	r26, 0x01	; 1
     d22:	98 17       	cp	r25, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <_fpadd_parts+0x3a>
     d26:	21 c1       	rjmp	.+578    	; 0xf6a <_fpadd_parts+0x27c>
     d28:	26 c1       	rjmp	.+588    	; 0xf76 <_fpadd_parts+0x288>
     d2a:	94 30       	cpi	r25, 0x04	; 4
     d2c:	09 f4       	brne	.+2      	; 0xd30 <_fpadd_parts+0x42>
     d2e:	20 c1       	rjmp	.+576    	; 0xf70 <_fpadd_parts+0x282>
     d30:	92 30       	cpi	r25, 0x02	; 2
     d32:	b1 f4       	brne	.+44     	; 0xd60 <_fpadd_parts+0x72>
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	09 f0       	breq	.+2      	; 0xd3a <_fpadd_parts+0x4c>
     d38:	1e c1       	rjmp	.+572    	; 0xf76 <_fpadd_parts+0x288>
     d3a:	ca 01       	movw	r24, r20
     d3c:	af 01       	movw	r20, r30
     d3e:	28 e0       	ldi	r18, 0x08	; 8
     d40:	da 01       	movw	r26, r20
     d42:	0d 90       	ld	r0, X+
     d44:	ad 01       	movw	r20, r26
     d46:	dc 01       	movw	r26, r24
     d48:	0d 92       	st	X+, r0
     d4a:	cd 01       	movw	r24, r26
     d4c:	21 50       	subi	r18, 0x01	; 1
     d4e:	c1 f7       	brne	.-16     	; 0xd40 <_fpadd_parts+0x52>
     d50:	db 01       	movw	r26, r22
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	8c 91       	ld	r24, X
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	89 23       	and	r24, r25
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	0a c1       	rjmp	.+532    	; 0xf74 <_fpadd_parts+0x286>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	09 f4       	brne	.+2      	; 0xd66 <_fpadd_parts+0x78>
     d64:	05 c1       	rjmp	.+522    	; 0xf70 <_fpadd_parts+0x282>
     d66:	c2 80       	ldd	r12, Z+2	; 0x02
     d68:	d3 80       	ldd	r13, Z+3	; 0x03
     d6a:	db 01       	movw	r26, r22
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	6d 90       	ld	r6, X+
     d70:	7c 90       	ld	r7, X
     d72:	13 97       	sbiw	r26, 0x03	; 3
     d74:	24 81       	ldd	r18, Z+4	; 0x04
     d76:	35 81       	ldd	r19, Z+5	; 0x05
     d78:	46 81       	ldd	r20, Z+6	; 0x06
     d7a:	57 81       	ldd	r21, Z+7	; 0x07
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	ed 90       	ld	r14, X+
     d80:	fd 90       	ld	r15, X+
     d82:	0d 91       	ld	r16, X+
     d84:	1c 91       	ld	r17, X
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	c6 01       	movw	r24, r12
     d8a:	86 19       	sub	r24, r6
     d8c:	97 09       	sbc	r25, r7
     d8e:	5c 01       	movw	r10, r24
     d90:	97 ff       	sbrs	r25, 7
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <_fpadd_parts+0xae>
     d94:	aa 24       	eor	r10, r10
     d96:	bb 24       	eor	r11, r11
     d98:	a8 1a       	sub	r10, r24
     d9a:	b9 0a       	sbc	r11, r25
     d9c:	b0 e2       	ldi	r27, 0x20	; 32
     d9e:	ab 16       	cp	r10, r27
     da0:	b1 04       	cpc	r11, r1
     da2:	0c f0       	brlt	.+2      	; 0xda6 <_fpadd_parts+0xb8>
     da4:	61 c0       	rjmp	.+194    	; 0xe68 <_fpadd_parts+0x17a>
     da6:	18 16       	cp	r1, r24
     da8:	19 06       	cpc	r1, r25
     daa:	6c f5       	brge	.+90     	; 0xe06 <_fpadd_parts+0x118>
     dac:	37 01       	movw	r6, r14
     dae:	48 01       	movw	r8, r16
     db0:	0a 2c       	mov	r0, r10
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <_fpadd_parts+0xce>
     db4:	96 94       	lsr	r9
     db6:	87 94       	ror	r8
     db8:	77 94       	ror	r7
     dba:	67 94       	ror	r6
     dbc:	0a 94       	dec	r0
     dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <_fpadd_parts+0xc6>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e0       	ldi	r26, 0x00	; 0
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	0a 2c       	mov	r0, r10
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <_fpadd_parts+0xe6>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	aa 1f       	adc	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	0a 94       	dec	r0
     dd6:	d2 f7       	brpl	.-12     	; 0xdcc <_fpadd_parts+0xde>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	a1 09       	sbc	r26, r1
     ddc:	b1 09       	sbc	r27, r1
     dde:	8e 21       	and	r24, r14
     de0:	9f 21       	and	r25, r15
     de2:	a0 23       	and	r26, r16
     de4:	b1 23       	and	r27, r17
     de6:	ee 24       	eor	r14, r14
     de8:	ff 24       	eor	r15, r15
     dea:	87 01       	movw	r16, r14
     dec:	e3 94       	inc	r14
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	a1 05       	cpc	r26, r1
     df2:	b1 05       	cpc	r27, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <_fpadd_parts+0x10e>
     df6:	ee 24       	eor	r14, r14
     df8:	ff 24       	eor	r15, r15
     dfa:	87 01       	movw	r16, r14
     dfc:	e6 28       	or	r14, r6
     dfe:	f7 28       	or	r15, r7
     e00:	08 29       	or	r16, r8
     e02:	19 29       	or	r17, r9
     e04:	3c c0       	rjmp	.+120    	; 0xe7e <_fpadd_parts+0x190>
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	d1 f1       	breq	.+116    	; 0xe7e <_fpadd_parts+0x190>
     e0a:	ca 0c       	add	r12, r10
     e0c:	db 1c       	adc	r13, r11
     e0e:	39 01       	movw	r6, r18
     e10:	4a 01       	movw	r8, r20
     e12:	0a 2c       	mov	r0, r10
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <_fpadd_parts+0x130>
     e16:	96 94       	lsr	r9
     e18:	87 94       	ror	r8
     e1a:	77 94       	ror	r7
     e1c:	67 94       	ror	r6
     e1e:	0a 94       	dec	r0
     e20:	d2 f7       	brpl	.-12     	; 0xe16 <_fpadd_parts+0x128>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	0a 2c       	mov	r0, r10
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <_fpadd_parts+0x148>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	0a 94       	dec	r0
     e38:	d2 f7       	brpl	.-12     	; 0xe2e <_fpadd_parts+0x140>
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	a1 09       	sbc	r26, r1
     e3e:	b1 09       	sbc	r27, r1
     e40:	82 23       	and	r24, r18
     e42:	93 23       	and	r25, r19
     e44:	a4 23       	and	r26, r20
     e46:	b5 23       	and	r27, r21
     e48:	21 e0       	ldi	r18, 0x01	; 1
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	a1 05       	cpc	r26, r1
     e54:	b1 05       	cpc	r27, r1
     e56:	19 f4       	brne	.+6      	; 0xe5e <_fpadd_parts+0x170>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	26 29       	or	r18, r6
     e60:	37 29       	or	r19, r7
     e62:	48 29       	or	r20, r8
     e64:	59 29       	or	r21, r9
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <_fpadd_parts+0x190>
     e68:	6c 14       	cp	r6, r12
     e6a:	7d 04       	cpc	r7, r13
     e6c:	24 f4       	brge	.+8      	; 0xe76 <_fpadd_parts+0x188>
     e6e:	ee 24       	eor	r14, r14
     e70:	ff 24       	eor	r15, r15
     e72:	87 01       	movw	r16, r14
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <_fpadd_parts+0x190>
     e76:	63 01       	movw	r12, r6
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	fb 01       	movw	r30, r22
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	89 17       	cp	r24, r25
     e86:	09 f4       	brne	.+2      	; 0xe8a <_fpadd_parts+0x19c>
     e88:	45 c0       	rjmp	.+138    	; 0xf14 <_fpadd_parts+0x226>
     e8a:	88 23       	and	r24, r24
     e8c:	49 f0       	breq	.+18     	; 0xea0 <_fpadd_parts+0x1b2>
     e8e:	d8 01       	movw	r26, r16
     e90:	c7 01       	movw	r24, r14
     e92:	82 1b       	sub	r24, r18
     e94:	93 0b       	sbc	r25, r19
     e96:	a4 0b       	sbc	r26, r20
     e98:	b5 0b       	sbc	r27, r21
     e9a:	9c 01       	movw	r18, r24
     e9c:	ad 01       	movw	r20, r26
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <_fpadd_parts+0x1ba>
     ea0:	2e 19       	sub	r18, r14
     ea2:	3f 09       	sbc	r19, r15
     ea4:	40 0b       	sbc	r20, r16
     ea6:	51 0b       	sbc	r21, r17
     ea8:	57 fd       	sbrc	r21, 7
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <_fpadd_parts+0x1c6>
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	ca 82       	std	Y+2, r12	; 0x02
     eb0:	db 82       	std	Y+3, r13	; 0x03
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <_fpadd_parts+0x1dc>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	ca 82       	std	Y+2, r12	; 0x02
     eba:	db 82       	std	Y+3, r13	; 0x03
     ebc:	50 95       	com	r21
     ebe:	40 95       	com	r20
     ec0:	30 95       	com	r19
     ec2:	21 95       	neg	r18
     ec4:	3f 4f       	sbci	r19, 0xFF	; 255
     ec6:	4f 4f       	sbci	r20, 0xFF	; 255
     ec8:	5f 4f       	sbci	r21, 0xFF	; 255
     eca:	2c 83       	std	Y+4, r18	; 0x04
     ecc:	3d 83       	std	Y+5, r19	; 0x05
     ece:	4e 83       	std	Y+6, r20	; 0x06
     ed0:	5f 83       	std	Y+7, r21	; 0x07
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <_fpadd_parts+0x200>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	aa 1f       	adc	r26, r26
     eda:	bb 1f       	adc	r27, r27
     edc:	8c 83       	std	Y+4, r24	; 0x04
     ede:	9d 83       	std	Y+5, r25	; 0x05
     ee0:	ae 83       	std	Y+6, r26	; 0x06
     ee2:	bf 83       	std	Y+7, r27	; 0x07
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	8a 83       	std	Y+2, r24	; 0x02
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	ae 81       	ldd	r26, Y+6	; 0x06
     ef4:	bf 81       	ldd	r27, Y+7	; 0x07
     ef6:	9c 01       	movw	r18, r24
     ef8:	ad 01       	movw	r20, r26
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	30 40       	sbci	r19, 0x00	; 0
     efe:	40 40       	sbci	r20, 0x00	; 0
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	2f 3f       	cpi	r18, 0xFF	; 255
     f04:	ef ef       	ldi	r30, 0xFF	; 255
     f06:	3e 07       	cpc	r19, r30
     f08:	ef ef       	ldi	r30, 0xFF	; 255
     f0a:	4e 07       	cpc	r20, r30
     f0c:	ef e3       	ldi	r30, 0x3F	; 63
     f0e:	5e 07       	cpc	r21, r30
     f10:	08 f3       	brcs	.-62     	; 0xed4 <_fpadd_parts+0x1e6>
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <_fpadd_parts+0x23c>
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	ca 82       	std	Y+2, r12	; 0x02
     f18:	db 82       	std	Y+3, r13	; 0x03
     f1a:	2e 0d       	add	r18, r14
     f1c:	3f 1d       	adc	r19, r15
     f1e:	40 1f       	adc	r20, r16
     f20:	51 1f       	adc	r21, r17
     f22:	2c 83       	std	Y+4, r18	; 0x04
     f24:	3d 83       	std	Y+5, r19	; 0x05
     f26:	4e 83       	std	Y+6, r20	; 0x06
     f28:	5f 83       	std	Y+7, r21	; 0x07
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	88 83       	st	Y, r24
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	3d 81       	ldd	r19, Y+5	; 0x05
     f32:	4e 81       	ldd	r20, Y+6	; 0x06
     f34:	5f 81       	ldd	r21, Y+7	; 0x07
     f36:	57 ff       	sbrs	r21, 7
     f38:	1d c0       	rjmp	.+58     	; 0xf74 <_fpadd_parts+0x286>
     f3a:	da 01       	movw	r26, r20
     f3c:	c9 01       	movw	r24, r18
     f3e:	81 70       	andi	r24, 0x01	; 1
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	a0 70       	andi	r26, 0x00	; 0
     f44:	b0 70       	andi	r27, 0x00	; 0
     f46:	56 95       	lsr	r21
     f48:	47 95       	ror	r20
     f4a:	37 95       	ror	r19
     f4c:	27 95       	ror	r18
     f4e:	82 2b       	or	r24, r18
     f50:	93 2b       	or	r25, r19
     f52:	a4 2b       	or	r26, r20
     f54:	b5 2b       	or	r27, r21
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	9d 83       	std	Y+5, r25	; 0x05
     f5a:	ae 83       	std	Y+6, r26	; 0x06
     f5c:	bf 83       	std	Y+7, r27	; 0x07
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	9b 83       	std	Y+3, r25	; 0x03
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <_fpadd_parts+0x286>
     f6a:	e0 e0       	ldi	r30, 0x00	; 0
     f6c:	f0 e2       	ldi	r31, 0x20	; 32
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <_fpadd_parts+0x288>
     f70:	fb 01       	movw	r30, r22
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <_fpadd_parts+0x288>
     f74:	fe 01       	movw	r30, r28
     f76:	cf 01       	movw	r24, r30
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	ee e0       	ldi	r30, 0x0E	; 14
     f7e:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__epilogue_restores__+0x8>

00000f82 <__addsf3>:
     f82:	a0 e2       	ldi	r26, 0x20	; 32
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 ec       	ldi	r30, 0xC7	; 199
     f88:	f7 e0       	ldi	r31, 0x07	; 7
     f8a:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__prologue_saves__+0x18>
     f8e:	69 83       	std	Y+1, r22	; 0x01
     f90:	7a 83       	std	Y+2, r23	; 0x02
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	2d 83       	std	Y+5, r18	; 0x05
     f98:	3e 83       	std	Y+6, r19	; 0x06
     f9a:	4f 83       	std	Y+7, r20	; 0x07
     f9c:	58 87       	std	Y+8, r21	; 0x08
     f9e:	89 e0       	ldi	r24, 0x09	; 9
     fa0:	e8 2e       	mov	r14, r24
     fa2:	f1 2c       	mov	r15, r1
     fa4:	ec 0e       	add	r14, r28
     fa6:	fd 1e       	adc	r15, r29
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	b7 01       	movw	r22, r14
     fae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
     fb2:	8e 01       	movw	r16, r28
     fb4:	0f 5e       	subi	r16, 0xEF	; 239
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	ce 01       	movw	r24, r28
     fba:	05 96       	adiw	r24, 0x05	; 5
     fbc:	b8 01       	movw	r22, r16
     fbe:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
     fc2:	c7 01       	movw	r24, r14
     fc4:	b8 01       	movw	r22, r16
     fc6:	ae 01       	movw	r20, r28
     fc8:	47 5e       	subi	r20, 0xE7	; 231
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	0e 94 77 06 	call	0xcee	; 0xcee <_fpadd_parts>
     fd0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
     fd4:	a0 96       	adiw	r28, 0x20	; 32
     fd6:	e6 e0       	ldi	r30, 0x06	; 6
     fd8:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

00000fdc <__subsf3>:
     fdc:	a0 e2       	ldi	r26, 0x20	; 32
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 ef       	ldi	r30, 0xF4	; 244
     fe2:	f7 e0       	ldi	r31, 0x07	; 7
     fe4:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__prologue_saves__+0x18>
     fe8:	69 83       	std	Y+1, r22	; 0x01
     fea:	7a 83       	std	Y+2, r23	; 0x02
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	2d 83       	std	Y+5, r18	; 0x05
     ff2:	3e 83       	std	Y+6, r19	; 0x06
     ff4:	4f 83       	std	Y+7, r20	; 0x07
     ff6:	58 87       	std	Y+8, r21	; 0x08
     ff8:	8e 01       	movw	r16, r28
     ffa:	07 5f       	subi	r16, 0xF7	; 247
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	b8 01       	movw	r22, r16
    1004:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    1008:	91 e1       	ldi	r25, 0x11	; 17
    100a:	e9 2e       	mov	r14, r25
    100c:	f1 2c       	mov	r15, r1
    100e:	ec 0e       	add	r14, r28
    1010:	fd 1e       	adc	r15, r29
    1012:	ce 01       	movw	r24, r28
    1014:	05 96       	adiw	r24, 0x05	; 5
    1016:	b7 01       	movw	r22, r14
    1018:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    101c:	8a 89       	ldd	r24, Y+18	; 0x12
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	89 27       	eor	r24, r25
    1022:	8a 8b       	std	Y+18, r24	; 0x12
    1024:	c8 01       	movw	r24, r16
    1026:	b7 01       	movw	r22, r14
    1028:	ae 01       	movw	r20, r28
    102a:	47 5e       	subi	r20, 0xE7	; 231
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	0e 94 77 06 	call	0xcee	; 0xcee <_fpadd_parts>
    1032:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    1036:	a0 96       	adiw	r28, 0x20	; 32
    1038:	e6 e0       	ldi	r30, 0x06	; 6
    103a:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

0000103e <__mulsf3>:
    103e:	a0 e2       	ldi	r26, 0x20	; 32
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e2       	ldi	r30, 0x25	; 37
    1044:	f8 e0       	ldi	r31, 0x08	; 8
    1046:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__>
    104a:	69 83       	std	Y+1, r22	; 0x01
    104c:	7a 83       	std	Y+2, r23	; 0x02
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	2d 83       	std	Y+5, r18	; 0x05
    1054:	3e 83       	std	Y+6, r19	; 0x06
    1056:	4f 83       	std	Y+7, r20	; 0x07
    1058:	58 87       	std	Y+8, r21	; 0x08
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	be 01       	movw	r22, r28
    1060:	67 5f       	subi	r22, 0xF7	; 247
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    1068:	ce 01       	movw	r24, r28
    106a:	05 96       	adiw	r24, 0x05	; 5
    106c:	be 01       	movw	r22, r28
    106e:	6f 5e       	subi	r22, 0xEF	; 239
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    1076:	99 85       	ldd	r25, Y+9	; 0x09
    1078:	92 30       	cpi	r25, 0x02	; 2
    107a:	78 f0       	brcs	.+30     	; 0x109a <__mulsf3+0x5c>
    107c:	89 89       	ldd	r24, Y+17	; 0x11
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	c0 f0       	brcs	.+48     	; 0x10b2 <__mulsf3+0x74>
    1082:	94 30       	cpi	r25, 0x04	; 4
    1084:	19 f4       	brne	.+6      	; 0x108c <__mulsf3+0x4e>
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	41 f4       	brne	.+16     	; 0x109a <__mulsf3+0x5c>
    108a:	cb c0       	rjmp	.+406    	; 0x1222 <__mulsf3+0x1e4>
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	19 f4       	brne	.+6      	; 0x1096 <__mulsf3+0x58>
    1090:	92 30       	cpi	r25, 0x02	; 2
    1092:	79 f4       	brne	.+30     	; 0x10b2 <__mulsf3+0x74>
    1094:	c6 c0       	rjmp	.+396    	; 0x1222 <__mulsf3+0x1e4>
    1096:	92 30       	cpi	r25, 0x02	; 2
    1098:	51 f4       	brne	.+20     	; 0x10ae <__mulsf3+0x70>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	2a 85       	ldd	r18, Y+10	; 0x0a
    109e:	9a 89       	ldd	r25, Y+18	; 0x12
    10a0:	29 17       	cp	r18, r25
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__mulsf3+0x68>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	8a 87       	std	Y+10, r24	; 0x0a
    10a8:	ce 01       	movw	r24, r28
    10aa:	09 96       	adiw	r24, 0x09	; 9
    10ac:	bc c0       	rjmp	.+376    	; 0x1226 <__mulsf3+0x1e8>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	51 f4       	brne	.+20     	; 0x10c6 <__mulsf3+0x88>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    10b6:	9a 89       	ldd	r25, Y+18	; 0x12
    10b8:	29 17       	cp	r18, r25
    10ba:	09 f4       	brne	.+2      	; 0x10be <__mulsf3+0x80>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	8a 8b       	std	Y+18, r24	; 0x12
    10c0:	ce 01       	movw	r24, r28
    10c2:	41 96       	adiw	r24, 0x11	; 17
    10c4:	b0 c0       	rjmp	.+352    	; 0x1226 <__mulsf3+0x1e8>
    10c6:	6d 84       	ldd	r6, Y+13	; 0x0d
    10c8:	7e 84       	ldd	r7, Y+14	; 0x0e
    10ca:	8f 84       	ldd	r8, Y+15	; 0x0f
    10cc:	98 88       	ldd	r9, Y+16	; 0x10
    10ce:	ed 88       	ldd	r14, Y+21	; 0x15
    10d0:	fe 88       	ldd	r15, Y+22	; 0x16
    10d2:	0f 89       	ldd	r16, Y+23	; 0x17
    10d4:	18 8d       	ldd	r17, Y+24	; 0x18
    10d6:	e0 e2       	ldi	r30, 0x20	; 32
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	dc 01       	movw	r26, r24
    10e0:	aa 24       	eor	r10, r10
    10e2:	bb 24       	eor	r11, r11
    10e4:	65 01       	movw	r12, r10
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	b3 01       	movw	r22, r6
    10ee:	61 70       	andi	r22, 0x01	; 1
    10f0:	70 70       	andi	r23, 0x00	; 0
    10f2:	61 15       	cp	r22, r1
    10f4:	71 05       	cpc	r23, r1
    10f6:	d1 f0       	breq	.+52     	; 0x112c <__mulsf3+0xee>
    10f8:	2e 0d       	add	r18, r14
    10fa:	3f 1d       	adc	r19, r15
    10fc:	40 1f       	adc	r20, r16
    10fe:	51 1f       	adc	r21, r17
    1100:	15 01       	movw	r2, r10
    1102:	26 01       	movw	r4, r12
    1104:	28 0e       	add	r2, r24
    1106:	39 1e       	adc	r3, r25
    1108:	4a 1e       	adc	r4, r26
    110a:	5b 1e       	adc	r5, r27
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	2e 15       	cp	r18, r14
    1116:	3f 05       	cpc	r19, r15
    1118:	40 07       	cpc	r20, r16
    111a:	51 07       	cpc	r21, r17
    111c:	18 f0       	brcs	.+6      	; 0x1124 <__mulsf3+0xe6>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	dc 01       	movw	r26, r24
    1124:	82 0d       	add	r24, r2
    1126:	93 1d       	adc	r25, r3
    1128:	a4 1d       	adc	r26, r4
    112a:	b5 1d       	adc	r27, r5
    112c:	aa 0c       	add	r10, r10
    112e:	bb 1c       	adc	r11, r11
    1130:	cc 1c       	adc	r12, r12
    1132:	dd 1c       	adc	r13, r13
    1134:	17 ff       	sbrs	r17, 7
    1136:	09 c0       	rjmp	.+18     	; 0x114a <__mulsf3+0x10c>
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	26 2e       	mov	r2, r22
    113c:	31 2c       	mov	r3, r1
    113e:	41 2c       	mov	r4, r1
    1140:	51 2c       	mov	r5, r1
    1142:	a2 28       	or	r10, r2
    1144:	b3 28       	or	r11, r3
    1146:	c4 28       	or	r12, r4
    1148:	d5 28       	or	r13, r5
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	49 f0       	breq	.+18     	; 0x1160 <__mulsf3+0x122>
    114e:	ee 0c       	add	r14, r14
    1150:	ff 1c       	adc	r15, r15
    1152:	00 1f       	adc	r16, r16
    1154:	11 1f       	adc	r17, r17
    1156:	96 94       	lsr	r9
    1158:	87 94       	ror	r8
    115a:	77 94       	ror	r7
    115c:	67 94       	ror	r6
    115e:	c6 cf       	rjmp	.-116    	; 0x10ec <__mulsf3+0xae>
    1160:	6b 89       	ldd	r22, Y+19	; 0x13
    1162:	7c 89       	ldd	r23, Y+20	; 0x14
    1164:	eb 85       	ldd	r30, Y+11	; 0x0b
    1166:	fc 85       	ldd	r31, Y+12	; 0x0c
    1168:	6e 0f       	add	r22, r30
    116a:	7f 1f       	adc	r23, r31
    116c:	6e 5f       	subi	r22, 0xFE	; 254
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	6b 8f       	std	Y+27, r22	; 0x1b
    1172:	7c 8f       	std	Y+28, r23	; 0x1c
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	ea 85       	ldd	r30, Y+10	; 0x0a
    1178:	7a 89       	ldd	r23, Y+18	; 0x12
    117a:	e7 17       	cp	r30, r23
    117c:	09 f4       	brne	.+2      	; 0x1180 <__mulsf3+0x142>
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	6a 8f       	std	Y+26, r22	; 0x1a
    1182:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1184:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1186:	10 c0       	rjmp	.+32     	; 0x11a8 <__mulsf3+0x16a>
    1188:	fc 01       	movw	r30, r24
    118a:	e1 70       	andi	r30, 0x01	; 1
    118c:	f0 70       	andi	r31, 0x00	; 0
    118e:	30 97       	sbiw	r30, 0x00	; 0
    1190:	29 f0       	breq	.+10     	; 0x119c <__mulsf3+0x15e>
    1192:	56 95       	lsr	r21
    1194:	47 95       	ror	r20
    1196:	37 95       	ror	r19
    1198:	27 95       	ror	r18
    119a:	50 68       	ori	r21, 0x80	; 128
    119c:	b6 95       	lsr	r27
    119e:	a7 95       	ror	r26
    11a0:	97 95       	ror	r25
    11a2:	87 95       	ror	r24
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	b7 fd       	sbrc	r27, 7
    11aa:	ee cf       	rjmp	.-36     	; 0x1188 <__mulsf3+0x14a>
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <__mulsf3+0x188>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	aa 1f       	adc	r26, r26
    11b4:	bb 1f       	adc	r27, r27
    11b6:	57 fd       	sbrc	r21, 7
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	44 1f       	adc	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
    11c6:	80 30       	cpi	r24, 0x00	; 0
    11c8:	e0 e0       	ldi	r30, 0x00	; 0
    11ca:	9e 07       	cpc	r25, r30
    11cc:	e0 e0       	ldi	r30, 0x00	; 0
    11ce:	ae 07       	cpc	r26, r30
    11d0:	e0 e4       	ldi	r30, 0x40	; 64
    11d2:	be 07       	cpc	r27, r30
    11d4:	60 f3       	brcs	.-40     	; 0x11ae <__mulsf3+0x170>
    11d6:	6b 8f       	std	Y+27, r22	; 0x1b
    11d8:	7c 8f       	std	Y+28, r23	; 0x1c
    11da:	6f e7       	ldi	r22, 0x7F	; 127
    11dc:	e6 2e       	mov	r14, r22
    11de:	f1 2c       	mov	r15, r1
    11e0:	01 2d       	mov	r16, r1
    11e2:	11 2d       	mov	r17, r1
    11e4:	e8 22       	and	r14, r24
    11e6:	f9 22       	and	r15, r25
    11e8:	0a 23       	and	r16, r26
    11ea:	1b 23       	and	r17, r27
    11ec:	60 e4       	ldi	r22, 0x40	; 64
    11ee:	e6 16       	cp	r14, r22
    11f0:	f1 04       	cpc	r15, r1
    11f2:	01 05       	cpc	r16, r1
    11f4:	11 05       	cpc	r17, r1
    11f6:	61 f4       	brne	.+24     	; 0x1210 <__mulsf3+0x1d2>
    11f8:	87 fd       	sbrc	r24, 7
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__mulsf3+0x1d2>
    11fc:	21 15       	cp	r18, r1
    11fe:	31 05       	cpc	r19, r1
    1200:	41 05       	cpc	r20, r1
    1202:	51 05       	cpc	r21, r1
    1204:	29 f0       	breq	.+10     	; 0x1210 <__mulsf3+0x1d2>
    1206:	80 5c       	subi	r24, 0xC0	; 192
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	af 4f       	sbci	r26, 0xFF	; 255
    120c:	bf 4f       	sbci	r27, 0xFF	; 255
    120e:	80 78       	andi	r24, 0x80	; 128
    1210:	8d 8f       	std	Y+29, r24	; 0x1d
    1212:	9e 8f       	std	Y+30, r25	; 0x1e
    1214:	af 8f       	std	Y+31, r26	; 0x1f
    1216:	b8 a3       	std	Y+32, r27	; 0x20
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	89 8f       	std	Y+25, r24	; 0x19
    121c:	ce 01       	movw	r24, r28
    121e:	49 96       	adiw	r24, 0x19	; 25
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <__mulsf3+0x1e8>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e2       	ldi	r25, 0x20	; 32
    1226:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    122a:	a0 96       	adiw	r28, 0x20	; 32
    122c:	e2 e1       	ldi	r30, 0x12	; 18
    122e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__epilogue_restores__>

00001232 <__divsf3>:
    1232:	a8 e1       	ldi	r26, 0x18	; 24
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__prologue_saves__+0x10>
    123e:	69 83       	std	Y+1, r22	; 0x01
    1240:	7a 83       	std	Y+2, r23	; 0x02
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	2d 83       	std	Y+5, r18	; 0x05
    1248:	3e 83       	std	Y+6, r19	; 0x06
    124a:	4f 83       	std	Y+7, r20	; 0x07
    124c:	58 87       	std	Y+8, r21	; 0x08
    124e:	8e 01       	movw	r16, r28
    1250:	07 5f       	subi	r16, 0xF7	; 247
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	b8 01       	movw	r22, r16
    125a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    125e:	81 e1       	ldi	r24, 0x11	; 17
    1260:	e8 2e       	mov	r14, r24
    1262:	f1 2c       	mov	r15, r1
    1264:	ec 0e       	add	r14, r28
    1266:	fd 1e       	adc	r15, r29
    1268:	ce 01       	movw	r24, r28
    126a:	05 96       	adiw	r24, 0x05	; 5
    126c:	b7 01       	movw	r22, r14
    126e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    1272:	99 85       	ldd	r25, Y+9	; 0x09
    1274:	92 30       	cpi	r25, 0x02	; 2
    1276:	08 f4       	brcc	.+2      	; 0x127a <__divsf3+0x48>
    1278:	83 c0       	rjmp	.+262    	; 0x1380 <__divsf3+0x14e>
    127a:	89 89       	ldd	r24, Y+17	; 0x11
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	08 f4       	brcc	.+2      	; 0x1282 <__divsf3+0x50>
    1280:	7b c0       	rjmp	.+246    	; 0x1378 <__divsf3+0x146>
    1282:	2a 85       	ldd	r18, Y+10	; 0x0a
    1284:	3a 89       	ldd	r19, Y+18	; 0x12
    1286:	23 27       	eor	r18, r19
    1288:	2a 87       	std	Y+10, r18	; 0x0a
    128a:	94 30       	cpi	r25, 0x04	; 4
    128c:	11 f0       	breq	.+4      	; 0x1292 <__divsf3+0x60>
    128e:	92 30       	cpi	r25, 0x02	; 2
    1290:	21 f4       	brne	.+8      	; 0x129a <__divsf3+0x68>
    1292:	98 17       	cp	r25, r24
    1294:	09 f0       	breq	.+2      	; 0x1298 <__divsf3+0x66>
    1296:	6c c0       	rjmp	.+216    	; 0x1370 <__divsf3+0x13e>
    1298:	71 c0       	rjmp	.+226    	; 0x137c <__divsf3+0x14a>
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	39 f4       	brne	.+14     	; 0x12ac <__divsf3+0x7a>
    129e:	1d 86       	std	Y+13, r1	; 0x0d
    12a0:	1e 86       	std	Y+14, r1	; 0x0e
    12a2:	1f 86       	std	Y+15, r1	; 0x0f
    12a4:	18 8a       	std	Y+16, r1	; 0x10
    12a6:	1b 86       	std	Y+11, r1	; 0x0b
    12a8:	1c 86       	std	Y+12, r1	; 0x0c
    12aa:	6a c0       	rjmp	.+212    	; 0x1380 <__divsf3+0x14e>
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <__divsf3+0x84>
    12b0:	84 e0       	ldi	r24, 0x04	; 4
    12b2:	89 87       	std	Y+9, r24	; 0x09
    12b4:	65 c0       	rjmp	.+202    	; 0x1380 <__divsf3+0x14e>
    12b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ba:	2b 89       	ldd	r18, Y+19	; 0x13
    12bc:	3c 89       	ldd	r19, Y+20	; 0x14
    12be:	82 1b       	sub	r24, r18
    12c0:	93 0b       	sbc	r25, r19
    12c2:	8b 87       	std	Y+11, r24	; 0x0b
    12c4:	9c 87       	std	Y+12, r25	; 0x0c
    12c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    12c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    12ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    12cc:	58 89       	ldd	r21, Y+16	; 0x10
    12ce:	ed 88       	ldd	r14, Y+21	; 0x15
    12d0:	fe 88       	ldd	r15, Y+22	; 0x16
    12d2:	0f 89       	ldd	r16, Y+23	; 0x17
    12d4:	18 8d       	ldd	r17, Y+24	; 0x18
    12d6:	2e 15       	cp	r18, r14
    12d8:	3f 05       	cpc	r19, r15
    12da:	40 07       	cpc	r20, r16
    12dc:	51 07       	cpc	r21, r17
    12de:	38 f4       	brcc	.+14     	; 0x12ee <__divsf3+0xbc>
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	44 1f       	adc	r20, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	8b 87       	std	Y+11, r24	; 0x0b
    12ec:	9c 87       	std	Y+12, r25	; 0x0c
    12ee:	6f e1       	ldi	r22, 0x1F	; 31
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	a1 2c       	mov	r10, r1
    12f4:	b1 2c       	mov	r11, r1
    12f6:	c1 2c       	mov	r12, r1
    12f8:	a0 e4       	ldi	r26, 0x40	; 64
    12fa:	da 2e       	mov	r13, r26
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	dc 01       	movw	r26, r24
    1302:	2e 15       	cp	r18, r14
    1304:	3f 05       	cpc	r19, r15
    1306:	40 07       	cpc	r20, r16
    1308:	51 07       	cpc	r21, r17
    130a:	40 f0       	brcs	.+16     	; 0x131c <__divsf3+0xea>
    130c:	8a 29       	or	r24, r10
    130e:	9b 29       	or	r25, r11
    1310:	ac 29       	or	r26, r12
    1312:	bd 29       	or	r27, r13
    1314:	2e 19       	sub	r18, r14
    1316:	3f 09       	sbc	r19, r15
    1318:	40 0b       	sbc	r20, r16
    131a:	51 0b       	sbc	r21, r17
    131c:	d6 94       	lsr	r13
    131e:	c7 94       	ror	r12
    1320:	b7 94       	ror	r11
    1322:	a7 94       	ror	r10
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	44 1f       	adc	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	61 50       	subi	r22, 0x01	; 1
    132e:	70 40       	sbci	r23, 0x00	; 0
    1330:	41 f7       	brne	.-48     	; 0x1302 <__divsf3+0xd0>
    1332:	6f e7       	ldi	r22, 0x7F	; 127
    1334:	e6 2e       	mov	r14, r22
    1336:	f1 2c       	mov	r15, r1
    1338:	01 2d       	mov	r16, r1
    133a:	11 2d       	mov	r17, r1
    133c:	e8 22       	and	r14, r24
    133e:	f9 22       	and	r15, r25
    1340:	0a 23       	and	r16, r26
    1342:	1b 23       	and	r17, r27
    1344:	60 e4       	ldi	r22, 0x40	; 64
    1346:	e6 16       	cp	r14, r22
    1348:	f1 04       	cpc	r15, r1
    134a:	01 05       	cpc	r16, r1
    134c:	11 05       	cpc	r17, r1
    134e:	61 f4       	brne	.+24     	; 0x1368 <__divsf3+0x136>
    1350:	87 fd       	sbrc	r24, 7
    1352:	0a c0       	rjmp	.+20     	; 0x1368 <__divsf3+0x136>
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	41 05       	cpc	r20, r1
    135a:	51 05       	cpc	r21, r1
    135c:	29 f0       	breq	.+10     	; 0x1368 <__divsf3+0x136>
    135e:	80 5c       	subi	r24, 0xC0	; 192
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	af 4f       	sbci	r26, 0xFF	; 255
    1364:	bf 4f       	sbci	r27, 0xFF	; 255
    1366:	80 78       	andi	r24, 0x80	; 128
    1368:	8d 87       	std	Y+13, r24	; 0x0d
    136a:	9e 87       	std	Y+14, r25	; 0x0e
    136c:	af 87       	std	Y+15, r26	; 0x0f
    136e:	b8 8b       	std	Y+16, r27	; 0x10
    1370:	8e 01       	movw	r16, r28
    1372:	07 5f       	subi	r16, 0xF7	; 247
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <__divsf3+0x14e>
    1378:	87 01       	movw	r16, r14
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <__divsf3+0x14e>
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e2       	ldi	r17, 0x20	; 32
    1380:	c8 01       	movw	r24, r16
    1382:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    1386:	68 96       	adiw	r28, 0x18	; 24
    1388:	ea e0       	ldi	r30, 0x0A	; 10
    138a:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__+0x10>

0000138e <__gesf2>:
    138e:	a8 e1       	ldi	r26, 0x18	; 24
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ed ec       	ldi	r30, 0xCD	; 205
    1394:	f9 e0       	ldi	r31, 0x09	; 9
    1396:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__prologue_saves__+0x18>
    139a:	69 83       	std	Y+1, r22	; 0x01
    139c:	7a 83       	std	Y+2, r23	; 0x02
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	9c 83       	std	Y+4, r25	; 0x04
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	3e 83       	std	Y+6, r19	; 0x06
    13a6:	4f 83       	std	Y+7, r20	; 0x07
    13a8:	58 87       	std	Y+8, r21	; 0x08
    13aa:	8e 01       	movw	r16, r28
    13ac:	07 5f       	subi	r16, 0xF7	; 247
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	b8 01       	movw	r22, r16
    13b6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    13ba:	81 e1       	ldi	r24, 0x11	; 17
    13bc:	e8 2e       	mov	r14, r24
    13be:	f1 2c       	mov	r15, r1
    13c0:	ec 0e       	add	r14, r28
    13c2:	fd 1e       	adc	r15, r29
    13c4:	ce 01       	movw	r24, r28
    13c6:	05 96       	adiw	r24, 0x05	; 5
    13c8:	b7 01       	movw	r22, r14
    13ca:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	40 f0       	brcs	.+16     	; 0x13e4 <__gesf2+0x56>
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	28 f0       	brcs	.+10     	; 0x13e4 <__gesf2+0x56>
    13da:	c8 01       	movw	r24, r16
    13dc:	b7 01       	movw	r22, r14
    13de:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fpcmp_parts_f>
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <__gesf2+0x58>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	68 96       	adiw	r28, 0x18	; 24
    13e8:	e6 e0       	ldi	r30, 0x06	; 6
    13ea:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

000013ee <__fixsfsi>:
    13ee:	ac e0       	ldi	r26, 0x0C	; 12
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ed ef       	ldi	r30, 0xFD	; 253
    13f4:	f9 e0       	ldi	r31, 0x09	; 9
    13f6:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__prologue_saves__+0x20>
    13fa:	69 83       	std	Y+1, r22	; 0x01
    13fc:	7a 83       	std	Y+2, r23	; 0x02
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	be 01       	movw	r22, r28
    1408:	6b 5f       	subi	r22, 0xFB	; 251
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__unpack_f>
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	81 f1       	breq	.+96     	; 0x1476 <__fixsfsi+0x88>
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	70 f1       	brcs	.+92     	; 0x1476 <__fixsfsi+0x88>
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	21 f4       	brne	.+8      	; 0x1426 <__fixsfsi+0x38>
    141e:	8e 81       	ldd	r24, Y+6	; 0x06
    1420:	88 23       	and	r24, r24
    1422:	69 f1       	breq	.+90     	; 0x147e <__fixsfsi+0x90>
    1424:	0a c0       	rjmp	.+20     	; 0x143a <__fixsfsi+0x4c>
    1426:	2f 81       	ldd	r18, Y+7	; 0x07
    1428:	38 85       	ldd	r19, Y+8	; 0x08
    142a:	37 fd       	sbrc	r19, 7
    142c:	24 c0       	rjmp	.+72     	; 0x1476 <__fixsfsi+0x88>
    142e:	6e 81       	ldd	r22, Y+6	; 0x06
    1430:	2f 31       	cpi	r18, 0x1F	; 31
    1432:	31 05       	cpc	r19, r1
    1434:	3c f0       	brlt	.+14     	; 0x1444 <__fixsfsi+0x56>
    1436:	66 23       	and	r22, r22
    1438:	11 f1       	breq	.+68     	; 0x147e <__fixsfsi+0x90>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e8       	ldi	r21, 0x80	; 128
    1442:	21 c0       	rjmp	.+66     	; 0x1486 <__fixsfsi+0x98>
    1444:	8e e1       	ldi	r24, 0x1E	; 30
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	82 1b       	sub	r24, r18
    144a:	93 0b       	sbc	r25, r19
    144c:	29 85       	ldd	r18, Y+9	; 0x09
    144e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1450:	4b 85       	ldd	r20, Y+11	; 0x0b
    1452:	5c 85       	ldd	r21, Y+12	; 0x0c
    1454:	04 c0       	rjmp	.+8      	; 0x145e <__fixsfsi+0x70>
    1456:	56 95       	lsr	r21
    1458:	47 95       	ror	r20
    145a:	37 95       	ror	r19
    145c:	27 95       	ror	r18
    145e:	8a 95       	dec	r24
    1460:	d2 f7       	brpl	.-12     	; 0x1456 <__fixsfsi+0x68>
    1462:	66 23       	and	r22, r22
    1464:	81 f0       	breq	.+32     	; 0x1486 <__fixsfsi+0x98>
    1466:	50 95       	com	r21
    1468:	40 95       	com	r20
    146a:	30 95       	com	r19
    146c:	21 95       	neg	r18
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	4f 4f       	sbci	r20, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <__fixsfsi+0x98>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__fixsfsi+0x98>
    147e:	2f ef       	ldi	r18, 0xFF	; 255
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f ef       	ldi	r20, 0xFF	; 255
    1484:	5f e7       	ldi	r21, 0x7F	; 127
    1486:	b9 01       	movw	r22, r18
    1488:	ca 01       	movw	r24, r20
    148a:	2c 96       	adiw	r28, 0x0c	; 12
    148c:	e2 e0       	ldi	r30, 0x02	; 2
    148e:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__epilogue_restores__+0x20>

00001492 <__floatunsisf>:
    1492:	a8 e0       	ldi	r26, 0x08	; 8
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e4       	ldi	r30, 0x4F	; 79
    1498:	fa e0       	ldi	r31, 0x0A	; 10
    149a:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__prologue_saves__+0x14>
    149e:	7b 01       	movw	r14, r22
    14a0:	8c 01       	movw	r16, r24
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	61 15       	cp	r22, r1
    14a6:	71 05       	cpc	r23, r1
    14a8:	81 05       	cpc	r24, r1
    14aa:	91 05       	cpc	r25, r1
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <__floatunsisf+0x22>
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	5f c0       	rjmp	.+190    	; 0x1572 <__floatunsisf+0xe0>
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	8e e1       	ldi	r24, 0x1E	; 30
    14ba:	c8 2e       	mov	r12, r24
    14bc:	d1 2c       	mov	r13, r1
    14be:	cb 82       	std	Y+3, r12	; 0x03
    14c0:	dc 82       	std	Y+4, r13	; 0x04
    14c2:	ed 82       	std	Y+5, r14	; 0x05
    14c4:	fe 82       	std	Y+6, r15	; 0x06
    14c6:	0f 83       	std	Y+7, r16	; 0x07
    14c8:	18 87       	std	Y+8, r17	; 0x08
    14ca:	c8 01       	movw	r24, r16
    14cc:	b7 01       	movw	r22, r14
    14ce:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__clzsi2>
    14d2:	fc 01       	movw	r30, r24
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	f7 ff       	sbrs	r31, 7
    14d8:	3a c0       	rjmp	.+116    	; 0x154e <__floatunsisf+0xbc>
    14da:	aa 27       	eor	r26, r26
    14dc:	bb 27       	eor	r27, r27
    14de:	ae 1b       	sub	r26, r30
    14e0:	bf 0b       	sbc	r27, r31
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	0a 2e       	mov	r0, r26
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <__floatunsisf+0x64>
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	44 1f       	adc	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	0a 94       	dec	r0
    14f8:	d2 f7       	brpl	.-12     	; 0x14ee <__floatunsisf+0x5c>
    14fa:	21 50       	subi	r18, 0x01	; 1
    14fc:	30 40       	sbci	r19, 0x00	; 0
    14fe:	40 40       	sbci	r20, 0x00	; 0
    1500:	50 40       	sbci	r21, 0x00	; 0
    1502:	2e 21       	and	r18, r14
    1504:	3f 21       	and	r19, r15
    1506:	40 23       	and	r20, r16
    1508:	51 23       	and	r21, r17
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	41 05       	cpc	r20, r1
    1518:	51 05       	cpc	r21, r1
    151a:	19 f4       	brne	.+6      	; 0x1522 <__floatunsisf+0x90>
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	cb 01       	movw	r24, r22
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__floatunsisf+0x9a>
    1524:	16 95       	lsr	r17
    1526:	07 95       	ror	r16
    1528:	f7 94       	ror	r15
    152a:	e7 94       	ror	r14
    152c:	aa 95       	dec	r26
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__floatunsisf+0x92>
    1530:	e6 2a       	or	r14, r22
    1532:	f7 2a       	or	r15, r23
    1534:	08 2b       	or	r16, r24
    1536:	19 2b       	or	r17, r25
    1538:	ed 82       	std	Y+5, r14	; 0x05
    153a:	fe 82       	std	Y+6, r15	; 0x06
    153c:	0f 83       	std	Y+7, r16	; 0x07
    153e:	18 87       	std	Y+8, r17	; 0x08
    1540:	8e e1       	ldi	r24, 0x1E	; 30
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	8e 1b       	sub	r24, r30
    1546:	9f 0b       	sbc	r25, r31
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	12 c0       	rjmp	.+36     	; 0x1572 <__floatunsisf+0xe0>
    154e:	30 97       	sbiw	r30, 0x00	; 0
    1550:	81 f0       	breq	.+32     	; 0x1572 <__floatunsisf+0xe0>
    1552:	0e 2e       	mov	r0, r30
    1554:	04 c0       	rjmp	.+8      	; 0x155e <__floatunsisf+0xcc>
    1556:	ee 0c       	add	r14, r14
    1558:	ff 1c       	adc	r15, r15
    155a:	00 1f       	adc	r16, r16
    155c:	11 1f       	adc	r17, r17
    155e:	0a 94       	dec	r0
    1560:	d2 f7       	brpl	.-12     	; 0x1556 <__floatunsisf+0xc4>
    1562:	ed 82       	std	Y+5, r14	; 0x05
    1564:	fe 82       	std	Y+6, r15	; 0x06
    1566:	0f 83       	std	Y+7, r16	; 0x07
    1568:	18 87       	std	Y+8, r17	; 0x08
    156a:	ce 1a       	sub	r12, r30
    156c:	df 0a       	sbc	r13, r31
    156e:	cb 82       	std	Y+3, r12	; 0x03
    1570:	dc 82       	std	Y+4, r13	; 0x04
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    157a:	28 96       	adiw	r28, 0x08	; 8
    157c:	e8 e0       	ldi	r30, 0x08	; 8
    157e:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__epilogue_restores__+0x14>

00001582 <__clzsi2>:
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	7b 01       	movw	r14, r22
    1594:	8c 01       	movw	r16, r24
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	e8 16       	cp	r14, r24
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	f8 06       	cpc	r15, r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	08 07       	cpc	r16, r24
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	18 07       	cpc	r17, r24
    15a6:	58 f4       	brcc	.+22     	; 0x15be <__clzsi2+0x3c>
    15a8:	ef ef       	ldi	r30, 0xFF	; 255
    15aa:	ee 16       	cp	r14, r30
    15ac:	f1 04       	cpc	r15, r1
    15ae:	01 05       	cpc	r16, r1
    15b0:	11 05       	cpc	r17, r1
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <__clzsi2+0x34>
    15b4:	90 f4       	brcc	.+36     	; 0x15da <__clzsi2+0x58>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	dc 01       	movw	r26, r24
    15bc:	17 c0       	rjmp	.+46     	; 0x15ec <__clzsi2+0x6a>
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ef 16       	cp	r14, r31
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ff 06       	cpc	r15, r31
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	0f 07       	cpc	r16, r31
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	1f 07       	cpc	r17, r31
    15ce:	50 f4       	brcc	.+20     	; 0x15e4 <__clzsi2+0x62>
    15d0:	80 e1       	ldi	r24, 0x10	; 16
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <__clzsi2+0x6a>
    15da:	88 e0       	ldi	r24, 0x08	; 8
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <__clzsi2+0x6a>
    15e4:	88 e1       	ldi	r24, 0x18	; 24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	20 e2       	ldi	r18, 0x20	; 32
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	28 1b       	sub	r18, r24
    15f6:	39 0b       	sbc	r19, r25
    15f8:	4a 0b       	sbc	r20, r26
    15fa:	5b 0b       	sbc	r21, r27
    15fc:	57 01       	movw	r10, r14
    15fe:	68 01       	movw	r12, r16
    1600:	04 c0       	rjmp	.+8      	; 0x160a <__clzsi2+0x88>
    1602:	d6 94       	lsr	r13
    1604:	c7 94       	ror	r12
    1606:	b7 94       	ror	r11
    1608:	a7 94       	ror	r10
    160a:	8a 95       	dec	r24
    160c:	d2 f7       	brpl	.-12     	; 0x1602 <__clzsi2+0x80>
    160e:	d6 01       	movw	r26, r12
    1610:	c5 01       	movw	r24, r10
    1612:	88 5f       	subi	r24, 0xF8	; 248
    1614:	9f 4d       	sbci	r25, 0xDF	; 223
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	28 1b       	sub	r18, r24
    161c:	31 09       	sbc	r19, r1
    161e:	41 09       	sbc	r20, r1
    1620:	51 09       	sbc	r21, r1
    1622:	c9 01       	movw	r24, r18
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	08 95       	ret

00001636 <__pack_f>:
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	fc 01       	movw	r30, r24
    1644:	24 81       	ldd	r18, Z+4	; 0x04
    1646:	35 81       	ldd	r19, Z+5	; 0x05
    1648:	46 81       	ldd	r20, Z+6	; 0x06
    164a:	57 81       	ldd	r21, Z+7	; 0x07
    164c:	61 81       	ldd	r22, Z+1	; 0x01
    164e:	80 81       	ld	r24, Z
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	20 f4       	brcc	.+8      	; 0x165c <__pack_f+0x26>
    1654:	40 61       	ori	r20, 0x10	; 16
    1656:	ef ef       	ldi	r30, 0xFF	; 255
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	a3 c0       	rjmp	.+326    	; 0x17a2 <__pack_f+0x16c>
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	09 f4       	brne	.+2      	; 0x1662 <__pack_f+0x2c>
    1660:	9b c0       	rjmp	.+310    	; 0x1798 <__pack_f+0x162>
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	09 f4       	brne	.+2      	; 0x1668 <__pack_f+0x32>
    1666:	92 c0       	rjmp	.+292    	; 0x178c <__pack_f+0x156>
    1668:	21 15       	cp	r18, r1
    166a:	31 05       	cpc	r19, r1
    166c:	41 05       	cpc	r20, r1
    166e:	51 05       	cpc	r21, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <__pack_f+0x3e>
    1672:	8f c0       	rjmp	.+286    	; 0x1792 <__pack_f+0x15c>
    1674:	02 80       	ldd	r0, Z+2	; 0x02
    1676:	f3 81       	ldd	r31, Z+3	; 0x03
    1678:	e0 2d       	mov	r30, r0
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	e2 38       	cpi	r30, 0x82	; 130
    167e:	f8 07       	cpc	r31, r24
    1680:	0c f0       	brlt	.+2      	; 0x1684 <__pack_f+0x4e>
    1682:	5a c0       	rjmp	.+180    	; 0x1738 <__pack_f+0x102>
    1684:	c2 e8       	ldi	r28, 0x82	; 130
    1686:	df ef       	ldi	r29, 0xFF	; 255
    1688:	ce 1b       	sub	r28, r30
    168a:	df 0b       	sbc	r29, r31
    168c:	ca 31       	cpi	r28, 0x1A	; 26
    168e:	d1 05       	cpc	r29, r1
    1690:	6c f5       	brge	.+90     	; 0x16ec <__pack_f+0xb6>
    1692:	79 01       	movw	r14, r18
    1694:	8a 01       	movw	r16, r20
    1696:	0c 2e       	mov	r0, r28
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <__pack_f+0x6c>
    169a:	16 95       	lsr	r17
    169c:	07 95       	ror	r16
    169e:	f7 94       	ror	r15
    16a0:	e7 94       	ror	r14
    16a2:	0a 94       	dec	r0
    16a4:	d2 f7       	brpl	.-12     	; 0x169a <__pack_f+0x64>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	0c 2e       	mov	r0, r28
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <__pack_f+0x84>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	aa 1f       	adc	r26, r26
    16b8:	bb 1f       	adc	r27, r27
    16ba:	0a 94       	dec	r0
    16bc:	d2 f7       	brpl	.-12     	; 0x16b2 <__pack_f+0x7c>
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	a1 09       	sbc	r26, r1
    16c2:	b1 09       	sbc	r27, r1
    16c4:	82 23       	and	r24, r18
    16c6:	93 23       	and	r25, r19
    16c8:	a4 23       	and	r26, r20
    16ca:	b5 23       	and	r27, r21
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	a1 05       	cpc	r26, r1
    16d8:	b1 05       	cpc	r27, r1
    16da:	19 f4       	brne	.+6      	; 0x16e2 <__pack_f+0xac>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	2e 29       	or	r18, r14
    16e4:	3f 29       	or	r19, r15
    16e6:	40 2b       	or	r20, r16
    16e8:	51 2b       	or	r21, r17
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <__pack_f+0xbc>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	da 01       	movw	r26, r20
    16f4:	c9 01       	movw	r24, r18
    16f6:	8f 77       	andi	r24, 0x7F	; 127
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	a0 70       	andi	r26, 0x00	; 0
    16fc:	b0 70       	andi	r27, 0x00	; 0
    16fe:	80 34       	cpi	r24, 0x40	; 64
    1700:	91 05       	cpc	r25, r1
    1702:	a1 05       	cpc	r26, r1
    1704:	b1 05       	cpc	r27, r1
    1706:	39 f4       	brne	.+14     	; 0x1716 <__pack_f+0xe0>
    1708:	27 ff       	sbrs	r18, 7
    170a:	09 c0       	rjmp	.+18     	; 0x171e <__pack_f+0xe8>
    170c:	20 5c       	subi	r18, 0xC0	; 192
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	4f 4f       	sbci	r20, 0xFF	; 255
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__pack_f+0xe8>
    1716:	21 5c       	subi	r18, 0xC1	; 193
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	4f 4f       	sbci	r20, 0xFF	; 255
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	e1 e0       	ldi	r30, 0x01	; 1
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	20 30       	cpi	r18, 0x00	; 0
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	38 07       	cpc	r19, r24
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	48 07       	cpc	r20, r24
    172c:	80 e4       	ldi	r24, 0x40	; 64
    172e:	58 07       	cpc	r21, r24
    1730:	28 f5       	brcc	.+74     	; 0x177c <__pack_f+0x146>
    1732:	e0 e0       	ldi	r30, 0x00	; 0
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	22 c0       	rjmp	.+68     	; 0x177c <__pack_f+0x146>
    1738:	e0 38       	cpi	r30, 0x80	; 128
    173a:	f1 05       	cpc	r31, r1
    173c:	6c f5       	brge	.+90     	; 0x1798 <__pack_f+0x162>
    173e:	e1 58       	subi	r30, 0x81	; 129
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	da 01       	movw	r26, r20
    1744:	c9 01       	movw	r24, r18
    1746:	8f 77       	andi	r24, 0x7F	; 127
    1748:	90 70       	andi	r25, 0x00	; 0
    174a:	a0 70       	andi	r26, 0x00	; 0
    174c:	b0 70       	andi	r27, 0x00	; 0
    174e:	80 34       	cpi	r24, 0x40	; 64
    1750:	91 05       	cpc	r25, r1
    1752:	a1 05       	cpc	r26, r1
    1754:	b1 05       	cpc	r27, r1
    1756:	39 f4       	brne	.+14     	; 0x1766 <__pack_f+0x130>
    1758:	27 ff       	sbrs	r18, 7
    175a:	09 c0       	rjmp	.+18     	; 0x176e <__pack_f+0x138>
    175c:	20 5c       	subi	r18, 0xC0	; 192
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	4f 4f       	sbci	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	04 c0       	rjmp	.+8      	; 0x176e <__pack_f+0x138>
    1766:	21 5c       	subi	r18, 0xC1	; 193
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	4f 4f       	sbci	r20, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	57 ff       	sbrs	r21, 7
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__pack_f+0x146>
    1772:	56 95       	lsr	r21
    1774:	47 95       	ror	r20
    1776:	37 95       	ror	r19
    1778:	27 95       	ror	r18
    177a:	31 96       	adiw	r30, 0x01	; 1
    177c:	87 e0       	ldi	r24, 0x07	; 7
    177e:	56 95       	lsr	r21
    1780:	47 95       	ror	r20
    1782:	37 95       	ror	r19
    1784:	27 95       	ror	r18
    1786:	8a 95       	dec	r24
    1788:	d1 f7       	brne	.-12     	; 0x177e <__pack_f+0x148>
    178a:	0b c0       	rjmp	.+22     	; 0x17a2 <__pack_f+0x16c>
    178c:	e0 e0       	ldi	r30, 0x00	; 0
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	05 c0       	rjmp	.+10     	; 0x179c <__pack_f+0x166>
    1792:	e0 e0       	ldi	r30, 0x00	; 0
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__pack_f+0x16c>
    1798:	ef ef       	ldi	r30, 0xFF	; 255
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	8e 2f       	mov	r24, r30
    17a4:	87 95       	ror	r24
    17a6:	88 27       	eor	r24, r24
    17a8:	87 95       	ror	r24
    17aa:	94 2f       	mov	r25, r20
    17ac:	9f 77       	andi	r25, 0x7F	; 127
    17ae:	67 95       	ror	r22
    17b0:	66 27       	eor	r22, r22
    17b2:	67 95       	ror	r22
    17b4:	e6 95       	lsr	r30
    17b6:	e2 2e       	mov	r14, r18
    17b8:	a9 2f       	mov	r26, r25
    17ba:	a8 2b       	or	r26, r24
    17bc:	fe 2f       	mov	r31, r30
    17be:	f6 2b       	or	r31, r22
    17c0:	62 2f       	mov	r22, r18
    17c2:	73 2f       	mov	r23, r19
    17c4:	8a 2f       	mov	r24, r26
    17c6:	9f 2f       	mov	r25, r31
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	e6 e0       	ldi	r30, 0x06	; 6
    17ce:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

000017d2 <__unpack_f>:
    17d2:	dc 01       	movw	r26, r24
    17d4:	fb 01       	movw	r30, r22
    17d6:	2c 91       	ld	r18, X
    17d8:	11 96       	adiw	r26, 0x01	; 1
    17da:	3c 91       	ld	r19, X
    17dc:	11 97       	sbiw	r26, 0x01	; 1
    17de:	12 96       	adiw	r26, 0x02	; 2
    17e0:	8c 91       	ld	r24, X
    17e2:	12 97       	sbiw	r26, 0x02	; 2
    17e4:	48 2f       	mov	r20, r24
    17e6:	4f 77       	andi	r20, 0x7F	; 127
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	98 2f       	mov	r25, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	99 27       	eor	r25, r25
    17f0:	99 1f       	adc	r25, r25
    17f2:	13 96       	adiw	r26, 0x03	; 3
    17f4:	6c 91       	ld	r22, X
    17f6:	13 97       	sbiw	r26, 0x03	; 3
    17f8:	86 2f       	mov	r24, r22
    17fa:	88 0f       	add	r24, r24
    17fc:	89 2b       	or	r24, r25
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	66 1f       	adc	r22, r22
    1802:	66 27       	eor	r22, r22
    1804:	66 1f       	adc	r22, r22
    1806:	61 83       	std	Z+1, r22	; 0x01
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	39 f5       	brne	.+78     	; 0x185a <__unpack_f+0x88>
    180c:	21 15       	cp	r18, r1
    180e:	31 05       	cpc	r19, r1
    1810:	41 05       	cpc	r20, r1
    1812:	51 05       	cpc	r21, r1
    1814:	11 f4       	brne	.+4      	; 0x181a <__unpack_f+0x48>
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	29 c0       	rjmp	.+82     	; 0x186c <__unpack_f+0x9a>
    181a:	82 e8       	ldi	r24, 0x82	; 130
    181c:	9f ef       	ldi	r25, 0xFF	; 255
    181e:	82 83       	std	Z+2, r24	; 0x02
    1820:	93 83       	std	Z+3, r25	; 0x03
    1822:	67 e0       	ldi	r22, 0x07	; 7
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	44 1f       	adc	r20, r20
    182a:	55 1f       	adc	r21, r21
    182c:	6a 95       	dec	r22
    182e:	d1 f7       	brne	.-12     	; 0x1824 <__unpack_f+0x52>
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	80 83       	st	Z, r24
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <__unpack_f+0x76>
    1836:	22 0f       	add	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	44 1f       	adc	r20, r20
    183c:	55 1f       	adc	r21, r21
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	82 83       	std	Z+2, r24	; 0x02
    1846:	93 83       	std	Z+3, r25	; 0x03
    1848:	20 30       	cpi	r18, 0x00	; 0
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	38 07       	cpc	r19, r24
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	48 07       	cpc	r20, r24
    1852:	80 e4       	ldi	r24, 0x40	; 64
    1854:	58 07       	cpc	r21, r24
    1856:	78 f3       	brcs	.-34     	; 0x1836 <__unpack_f+0x64>
    1858:	20 c0       	rjmp	.+64     	; 0x189a <__unpack_f+0xc8>
    185a:	8f 3f       	cpi	r24, 0xFF	; 255
    185c:	91 05       	cpc	r25, r1
    185e:	79 f4       	brne	.+30     	; 0x187e <__unpack_f+0xac>
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	41 05       	cpc	r20, r1
    1866:	51 05       	cpc	r21, r1
    1868:	19 f4       	brne	.+6      	; 0x1870 <__unpack_f+0x9e>
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	80 83       	st	Z, r24
    186e:	08 95       	ret
    1870:	44 ff       	sbrs	r20, 4
    1872:	03 c0       	rjmp	.+6      	; 0x187a <__unpack_f+0xa8>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 83       	st	Z, r24
    1878:	10 c0       	rjmp	.+32     	; 0x189a <__unpack_f+0xc8>
    187a:	10 82       	st	Z, r1
    187c:	0e c0       	rjmp	.+28     	; 0x189a <__unpack_f+0xc8>
    187e:	8f 57       	subi	r24, 0x7F	; 127
    1880:	90 40       	sbci	r25, 0x00	; 0
    1882:	82 83       	std	Z+2, r24	; 0x02
    1884:	93 83       	std	Z+3, r25	; 0x03
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	80 83       	st	Z, r24
    188a:	87 e0       	ldi	r24, 0x07	; 7
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	44 1f       	adc	r20, r20
    1892:	55 1f       	adc	r21, r21
    1894:	8a 95       	dec	r24
    1896:	d1 f7       	brne	.-12     	; 0x188c <__unpack_f+0xba>
    1898:	50 64       	ori	r21, 0x40	; 64
    189a:	24 83       	std	Z+4, r18	; 0x04
    189c:	35 83       	std	Z+5, r19	; 0x05
    189e:	46 83       	std	Z+6, r20	; 0x06
    18a0:	57 83       	std	Z+7, r21	; 0x07
    18a2:	08 95       	ret

000018a4 <__fpcmp_parts_f>:
    18a4:	fc 01       	movw	r30, r24
    18a6:	db 01       	movw	r26, r22
    18a8:	90 81       	ld	r25, Z
    18aa:	92 30       	cpi	r25, 0x02	; 2
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <__fpcmp_parts_f+0xc>
    18ae:	49 c0       	rjmp	.+146    	; 0x1942 <__fpcmp_parts_f+0x9e>
    18b0:	8c 91       	ld	r24, X
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <__fpcmp_parts_f+0x14>
    18b6:	45 c0       	rjmp	.+138    	; 0x1942 <__fpcmp_parts_f+0x9e>
    18b8:	94 30       	cpi	r25, 0x04	; 4
    18ba:	51 f4       	brne	.+20     	; 0x18d0 <__fpcmp_parts_f+0x2c>
    18bc:	61 81       	ldd	r22, Z+1	; 0x01
    18be:	84 30       	cpi	r24, 0x04	; 4
    18c0:	b1 f5       	brne	.+108    	; 0x192e <__fpcmp_parts_f+0x8a>
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	2c 91       	ld	r18, X
    18c6:	11 97       	sbiw	r26, 0x01	; 1
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	26 1b       	sub	r18, r22
    18cc:	31 09       	sbc	r19, r1
    18ce:	41 c0       	rjmp	.+130    	; 0x1952 <__fpcmp_parts_f+0xae>
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	21 f0       	breq	.+8      	; 0x18dc <__fpcmp_parts_f+0x38>
    18d4:	92 30       	cpi	r25, 0x02	; 2
    18d6:	41 f4       	brne	.+16     	; 0x18e8 <__fpcmp_parts_f+0x44>
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	b1 f1       	breq	.+108    	; 0x1948 <__fpcmp_parts_f+0xa4>
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	8c 91       	ld	r24, X
    18e0:	11 97       	sbiw	r26, 0x01	; 1
    18e2:	88 23       	and	r24, r24
    18e4:	a1 f1       	breq	.+104    	; 0x194e <__fpcmp_parts_f+0xaa>
    18e6:	2d c0       	rjmp	.+90     	; 0x1942 <__fpcmp_parts_f+0x9e>
    18e8:	61 81       	ldd	r22, Z+1	; 0x01
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	01 f1       	breq	.+64     	; 0x192e <__fpcmp_parts_f+0x8a>
    18ee:	11 96       	adiw	r26, 0x01	; 1
    18f0:	8c 91       	ld	r24, X
    18f2:	11 97       	sbiw	r26, 0x01	; 1
    18f4:	68 17       	cp	r22, r24
    18f6:	d9 f4       	brne	.+54     	; 0x192e <__fpcmp_parts_f+0x8a>
    18f8:	22 81       	ldd	r18, Z+2	; 0x02
    18fa:	33 81       	ldd	r19, Z+3	; 0x03
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	13 97       	sbiw	r26, 0x03	; 3
    1904:	82 17       	cp	r24, r18
    1906:	93 07       	cpc	r25, r19
    1908:	94 f0       	brlt	.+36     	; 0x192e <__fpcmp_parts_f+0x8a>
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	bc f0       	brlt	.+46     	; 0x193e <__fpcmp_parts_f+0x9a>
    1910:	24 81       	ldd	r18, Z+4	; 0x04
    1912:	35 81       	ldd	r19, Z+5	; 0x05
    1914:	46 81       	ldd	r20, Z+6	; 0x06
    1916:	57 81       	ldd	r21, Z+7	; 0x07
    1918:	14 96       	adiw	r26, 0x04	; 4
    191a:	8d 91       	ld	r24, X+
    191c:	9d 91       	ld	r25, X+
    191e:	0d 90       	ld	r0, X+
    1920:	bc 91       	ld	r27, X
    1922:	a0 2d       	mov	r26, r0
    1924:	82 17       	cp	r24, r18
    1926:	93 07       	cpc	r25, r19
    1928:	a4 07       	cpc	r26, r20
    192a:	b5 07       	cpc	r27, r21
    192c:	18 f4       	brcc	.+6      	; 0x1934 <__fpcmp_parts_f+0x90>
    192e:	66 23       	and	r22, r22
    1930:	41 f0       	breq	.+16     	; 0x1942 <__fpcmp_parts_f+0x9e>
    1932:	0d c0       	rjmp	.+26     	; 0x194e <__fpcmp_parts_f+0xaa>
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	4a 07       	cpc	r20, r26
    193a:	5b 07       	cpc	r21, r27
    193c:	28 f4       	brcc	.+10     	; 0x1948 <__fpcmp_parts_f+0xa4>
    193e:	66 23       	and	r22, r22
    1940:	31 f0       	breq	.+12     	; 0x194e <__fpcmp_parts_f+0xaa>
    1942:	21 e0       	ldi	r18, 0x01	; 1
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <__fpcmp_parts_f+0xae>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <__fpcmp_parts_f+0xae>
    194e:	2f ef       	ldi	r18, 0xFF	; 255
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	c9 01       	movw	r24, r18
    1954:	08 95       	ret

00001956 <__udivmodhi4>:
    1956:	aa 1b       	sub	r26, r26
    1958:	bb 1b       	sub	r27, r27
    195a:	51 e1       	ldi	r21, 0x11	; 17
    195c:	07 c0       	rjmp	.+14     	; 0x196c <__udivmodhi4_ep>

0000195e <__udivmodhi4_loop>:
    195e:	aa 1f       	adc	r26, r26
    1960:	bb 1f       	adc	r27, r27
    1962:	a6 17       	cp	r26, r22
    1964:	b7 07       	cpc	r27, r23
    1966:	10 f0       	brcs	.+4      	; 0x196c <__udivmodhi4_ep>
    1968:	a6 1b       	sub	r26, r22
    196a:	b7 0b       	sbc	r27, r23

0000196c <__udivmodhi4_ep>:
    196c:	88 1f       	adc	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	5a 95       	dec	r21
    1972:	a9 f7       	brne	.-22     	; 0x195e <__udivmodhi4_loop>
    1974:	80 95       	com	r24
    1976:	90 95       	com	r25
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	08 95       	ret

0000197e <__divmodhi4>:
    197e:	97 fb       	bst	r25, 7
    1980:	09 2e       	mov	r0, r25
    1982:	07 26       	eor	r0, r23
    1984:	0a d0       	rcall	.+20     	; 0x199a <__divmodhi4_neg1>
    1986:	77 fd       	sbrc	r23, 7
    1988:	04 d0       	rcall	.+8      	; 0x1992 <__divmodhi4_neg2>
    198a:	e5 df       	rcall	.-54     	; 0x1956 <__udivmodhi4>
    198c:	06 d0       	rcall	.+12     	; 0x199a <__divmodhi4_neg1>
    198e:	00 20       	and	r0, r0
    1990:	1a f4       	brpl	.+6      	; 0x1998 <__divmodhi4_exit>

00001992 <__divmodhi4_neg2>:
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255

00001998 <__divmodhi4_exit>:
    1998:	08 95       	ret

0000199a <__divmodhi4_neg1>:
    199a:	f6 f7       	brtc	.-4      	; 0x1998 <__divmodhi4_exit>
    199c:	90 95       	com	r25
    199e:	81 95       	neg	r24
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__prologue_saves__>:
    19a4:	2f 92       	push	r2
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	ca 1b       	sub	r28, r26
    19ce:	db 0b       	sbc	r29, r27
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	09 94       	ijmp

000019d6 <__epilogue_restores__>:
    19d6:	2a 88       	ldd	r2, Y+18	; 0x12
    19d8:	39 88       	ldd	r3, Y+17	; 0x11
    19da:	48 88       	ldd	r4, Y+16	; 0x10
    19dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    19de:	6e 84       	ldd	r6, Y+14	; 0x0e
    19e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19e8:	b9 84       	ldd	r11, Y+9	; 0x09
    19ea:	c8 84       	ldd	r12, Y+8	; 0x08
    19ec:	df 80       	ldd	r13, Y+7	; 0x07
    19ee:	ee 80       	ldd	r14, Y+6	; 0x06
    19f0:	fd 80       	ldd	r15, Y+5	; 0x05
    19f2:	0c 81       	ldd	r16, Y+4	; 0x04
    19f4:	1b 81       	ldd	r17, Y+3	; 0x03
    19f6:	aa 81       	ldd	r26, Y+2	; 0x02
    19f8:	b9 81       	ldd	r27, Y+1	; 0x01
    19fa:	ce 0f       	add	r28, r30
    19fc:	d1 1d       	adc	r29, r1
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	ed 01       	movw	r28, r26
    1a04:	08 95       	ret

00001a06 <_exit>:
    1a06:	f8 94       	cli

00001a08 <__stop_program>:
    1a08:	ff cf       	rjmp	.-2      	; 0x1a08 <__stop_program>
