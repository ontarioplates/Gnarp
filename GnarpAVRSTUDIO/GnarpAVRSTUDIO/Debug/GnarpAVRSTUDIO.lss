
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00802000  000017f2  00001886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00802108  00802108  0000198e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000426  00000000  00000000  00002261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c8f  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000120c  00000000  00000000  00005316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001eb2  00000000  00000000  00006522  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002e0  00000000  00000000  000083d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000090a  00000000  00000000  000086b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000eca  00000000  00000000  00008fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000690  00000000  00000000  00009e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a8 e0       	ldi	r26, 0x08	; 8
     188:	b1 e2       	ldi	r27, 0x21	; 33
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ab 32       	cpi	r26, 0x2B	; 43
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_copy_data>:
     194:	11 e2       	ldi	r17, 0x21	; 33
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e2       	ldi	r27, 0x20	; 32
     19a:	e2 ef       	ldi	r30, 0xF2	; 242
     19c:	f7 e1       	ldi	r31, 0x17	; 23
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a8 30       	cpi	r26, 0x08	; 8
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>
     1aa:	0e 94 3a 05 	call	0xa74	; 0xa74 <main>
     1ae:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_91>:
bool i_ENCcw		= 0;
bool i_ENCccw		= 0;

uint8_t i_MIDIRX	= 0x00;

ISR(USARTD1_RXC_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
	i_MIDIRX = USARTD1.DATA & 0xFF;
     1c2:	80 91 b0 09 	lds	r24, 0x09B0
     1c6:	80 93 2a 21 	sts	0x212A, r24
//	USARTD1.STATUS &= ~0x80;
}
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <initCLOCK>:


void initCLOCK(){
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
    //CLOCK AND PLL SETUP
	while (CLK.CTRL != 0x04){
     1da:	e0 e4       	ldi	r30, 0x40	; 64
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
		CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
     1de:	61 e0       	ldi	r22, 0x01	; 1
		CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
     1e0:	84 e0       	ldi	r24, 0x04	; 4
		
		OSC.XOSCCTRL = 0x8B;		//prepare for external clock (8-12 MHz)
     1e2:	c0 e5       	ldi	r28, 0x50	; 80
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	5b e8       	ldi	r21, 0x8B	; 139
		OSC.CTRL = 0x08;			//enable external clock 
     1e8:	48 e0       	ldi	r20, 0x08	; 8
		while (!(OSC.STATUS & 0x08)){}	//wait for External Oscillator to become stable and ready
     1ea:	a0 e5       	ldi	r26, 0x50	; 80
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
		
		OSC.PLLCTRL = 0xC2;	//Set the PLL to use the external crystal and set multiplication factor to 2.
     1ee:	32 ec       	ldi	r19, 0xC2	; 194
		OSC.CTRL = 0x18;				//Enable the PLL, disable the External Clock.
     1f0:	28 e1       	ldi	r18, 0x18	; 24
	
		while (!(OSC.STATUS & 0x10)){}	//wait for PLL to become stable and ready

		CCP = 0xD8;					//Configuration Change Protection, write signature to change Clock to PLL.
     1f2:	98 ed       	ldi	r25, 0xD8	; 216
}


void initCLOCK(){
    //CLOCK AND PLL SETUP
	while (CLK.CTRL != 0x04){
     1f4:	15 c0       	rjmp	.+42     	; 0x220 <initCLOCK+0x4a>
		CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
     1f6:	61 83       	std	Z+1, r22	; 0x01
		CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
     1f8:	83 83       	std	Z+3, r24	; 0x03
		
		OSC.XOSCCTRL = 0x8B;		//prepare for external clock (8-12 MHz)
     1fa:	5a 83       	std	Y+2, r21	; 0x02
		OSC.CTRL = 0x08;			//enable external clock 
     1fc:	40 93 50 00 	sts	0x0050, r20
		while (!(OSC.STATUS & 0x08)){}	//wait for External Oscillator to become stable and ready
     200:	70 91 51 00 	lds	r23, 0x0051
     204:	73 ff       	sbrs	r23, 3
     206:	fc cf       	rjmp	.-8      	; 0x200 <initCLOCK+0x2a>
		
		OSC.PLLCTRL = 0xC2;	//Set the PLL to use the external crystal and set multiplication factor to 2.
     208:	15 96       	adiw	r26, 0x05	; 5
     20a:	3c 93       	st	X, r19
     20c:	15 97       	sbiw	r26, 0x05	; 5
		OSC.CTRL = 0x18;				//Enable the PLL, disable the External Clock.
     20e:	20 93 50 00 	sts	0x0050, r18
	
		while (!(OSC.STATUS & 0x10)){}	//wait for PLL to become stable and ready
     212:	70 91 51 00 	lds	r23, 0x0051
     216:	74 ff       	sbrs	r23, 4
     218:	fc cf       	rjmp	.-8      	; 0x212 <initCLOCK+0x3c>

		CCP = 0xD8;					//Configuration Change Protection, write signature to change Clock to PLL.
     21a:	94 bf       	out	0x34, r25	; 52
		CLK.CTRL = 0x04;			//Set the Clock to PLL
     21c:	80 93 40 00 	sts	0x0040, r24
}


void initCLOCK(){
    //CLOCK AND PLL SETUP
	while (CLK.CTRL != 0x04){
     220:	70 91 40 00 	lds	r23, 0x0040
     224:	74 30       	cpi	r23, 0x04	; 4
     226:	39 f7       	brne	.-50     	; 0x1f6 <initCLOCK+0x20>
		while (!(OSC.STATUS & 0x10)){}	//wait for PLL to become stable and ready

		CCP = 0xD8;					//Configuration Change Protection, write signature to change Clock to PLL.
		CLK.CTRL = 0x04;			//Set the Clock to PLL
	}		
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <initMIDI>:

void initMIDI(){

	cli();							//disable global interrupts
     22e:	f8 94       	cli
	PORTD.DIRCLR		= 0x40;		//USARTRX as input
     230:	e0 e6       	ldi	r30, 0x60	; 96
     232:	f6 e0       	ldi	r31, 0x06	; 6
     234:	80 e4       	ldi	r24, 0x40	; 64
     236:	82 83       	std	Z+2, r24	; 0x02
	PORTD.DIRSET		= 0x80;		//USARTTX as output
     238:	80 e8       	ldi	r24, 0x80	; 128
     23a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET		= 0x80;		//set TxD high for initialization
     23c:	85 83       	std	Z+5, r24	; 0x05
	USARTD1.CTRLA		= 0x20;		//enable RX interrupt as Medium Level, TX interrupt as Low Level, DRE as Hi Level
     23e:	e0 eb       	ldi	r30, 0xB0	; 176
     240:	f9 e0       	ldi	r31, 0x09	; 9
     242:	80 e2       	ldi	r24, 0x20	; 32
     244:	83 83       	std	Z+3, r24	; 0x03
	USARTD1.CTRLC		= 0x03;		//Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	85 83       	std	Z+5, r24	; 0x05
	USARTD1.BAUDCTRLA	= 0x2F;		//BSEL = 47
     24a:	8f e2       	ldi	r24, 0x2F	; 47
     24c:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB	= 0x00;		//BSCALE = 0
     24e:	17 82       	std	Z+7, r1	; 0x07
	USARTD1.CTRLB		= 0x18;		//set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     250:	88 e1       	ldi	r24, 0x18	; 24
     252:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL			|= 0x02;	//enable all levels on interrupts
     254:	e0 ea       	ldi	r30, 0xA0	; 160
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	82 81       	ldd	r24, Z+2	; 0x02
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	82 83       	std	Z+2, r24	; 0x02
	sei();							//enable global interrupts
     25e:	78 94       	sei

}
     260:	08 95       	ret

00000262 <initMIDIvar>:

void initMIDIvar(uint8_t bcA){
	cli();							//disable global interrupts
     262:	f8 94       	cli
	PORTD.DIRCLR		= 0x40;		//USARTRX as input
     264:	e0 e6       	ldi	r30, 0x60	; 96
     266:	f6 e0       	ldi	r31, 0x06	; 6
     268:	90 e4       	ldi	r25, 0x40	; 64
     26a:	92 83       	std	Z+2, r25	; 0x02
	PORTD.DIRSET		= 0x80;		//USARTTX as output
     26c:	90 e8       	ldi	r25, 0x80	; 128
     26e:	91 83       	std	Z+1, r25	; 0x01
	PORTD.OUTSET		= 0x80;		//set TxD high for initialization
     270:	95 83       	std	Z+5, r25	; 0x05
	USARTD1.CTRLA		= 0x20;		//enable RX interrupt as Medium Level, TX interrupt as Low Level, DRE as Hi Level
     272:	e0 eb       	ldi	r30, 0xB0	; 176
     274:	f9 e0       	ldi	r31, 0x09	; 9
     276:	90 e2       	ldi	r25, 0x20	; 32
     278:	93 83       	std	Z+3, r25	; 0x03
	USARTD1.CTRLC		= 0x03;		//Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     27a:	93 e0       	ldi	r25, 0x03	; 3
     27c:	95 83       	std	Z+5, r25	; 0x05
	USARTD1.BAUDCTRLA	= bcA;		//BSEL = 47
     27e:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB	= 0x00;		//BSCALE = 0
     280:	17 82       	std	Z+7, r1	; 0x07
	USARTD1.CTRLB		= 0x18;		//set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL			|= 0x02;	//enable all levels on interrupts
     286:	e0 ea       	ldi	r30, 0xA0	; 160
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	82 81       	ldd	r24, Z+2	; 0x02
     28c:	82 60       	ori	r24, 0x02	; 2
     28e:	82 83       	std	Z+2, r24	; 0x02
	sei();							//enable global interrupts
     290:	78 94       	sei
	
	
	//WORKS at bcA = 3

}
     292:	08 95       	ret

00000294 <initENC>:



void initENC(){
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	e0 e2       	ldi	r30, 0x20	; 32
     298:	f6 e0       	ldi	r31, 0x06	; 6
     29a:	82 83       	std	Z+2, r24	; 0x02
}
     29c:	08 95       	ret

0000029e <runENC>:

void runENC(){
	bool A1;	//current A
	bool B1;	//current B
	
	A1 = !(PORTB.IN & 0x01);
     29e:	80 91 28 06 	lds	r24, 0x0628
     2a2:	41 e0       	ldi	r20, 0x01	; 1
     2a4:	80 fd       	sbrc	r24, 0
     2a6:	40 e0       	ldi	r20, 0x00	; 0
	B1 = !((PORTB.IN >> 1) & 0x01);
     2a8:	60 91 28 06 	lds	r22, 0x0628
	
	if (!_i_ENCA0 & A1)		//movement
     2ac:	84 2f       	mov	r24, r20
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	20 91 27 21 	lds	r18, 0x2127
     2b4:	51 e0       	ldi	r21, 0x01	; 1
     2b6:	25 27       	eor	r18, r21
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	82 23       	and	r24, r18
     2bc:	93 23       	and	r25, r19
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	81 f0       	breq	.+32     	; 0x2e2 <runENC+0x44>
void runENC(){
	bool A1;	//current A
	bool B1;	//current B
	
	A1 = !(PORTB.IN & 0x01);
	B1 = !((PORTB.IN >> 1) & 0x01);
     2c2:	86 2f       	mov	r24, r22
     2c4:	86 95       	lsr	r24
	
	if (!_i_ENCA0 & A1)		//movement
	{
		if (B1)
     2c6:	80 fd       	sbrc	r24, 0
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <runENC+0x32>
			i_ENCcw = 1;	//CW		
     2ca:	50 93 28 21 	sts	0x2128, r21
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <runENC+0x36>
		else
			i_ENCcw = 0;	//CCW
     2d0:	10 92 28 21 	sts	0x2128, r1
			
		i_ENCccw = !i_ENCcw;
     2d4:	80 91 28 21 	lds	r24, 0x2128
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	89 27       	eor	r24, r25
     2dc:	80 93 29 21 	sts	0x2129, r24
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <runENC+0x4c>
	}
	else{
		i_ENCcw = 0;
     2e2:	10 92 28 21 	sts	0x2128, r1
		i_ENCccw = 0;
     2e6:	10 92 29 21 	sts	0x2129, r1
	}		
	_i_ENCA0 = A1;
     2ea:	40 93 27 21 	sts	0x2127, r20
}
     2ee:	08 95       	ret

000002f0 <initPOT>:

void initPOT(){
	PORTA.DIRCLR	= 0xF9;		//ADC3:7 and VREF input
     2f0:	89 ef       	ldi	r24, 0xF9	; 249
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	f6 e0       	ldi	r31, 0x06	; 6
     2f6:	82 83       	std	Z+2, r24	; 0x02

	ADCA.CTRLA 		= 0x00;		//disable ADC
     2f8:	e0 e0       	ldi	r30, 0x00	; 0
     2fa:	f2 e0       	ldi	r31, 0x02	; 2
     2fc:	10 82       	st	Z, r1
	ADCA.CTRLB 		= 0x00;
     2fe:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL	= 0x20;		//set PORTA reference voltage
     300:	80 e2       	ldi	r24, 0x20	; 32
     302:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL		= 0x00;
     304:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER	= 0x00;
     306:	14 82       	std	Z+4, r1	; 0x04
	ADCA.INTFLAGS	= 0x00;
     308:	16 82       	std	Z+6, r1	; 0x06
	ADCA.CTRLA		|= 0x01;	//enable ADC
     30a:	80 81       	ld	r24, Z
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	80 83       	st	Z, r24

	ADCA.CH0.CTRL	= 0x01;		//select external single-ended input
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL= 0x00;
     314:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CH0.INTCTRL= 0x00;
     316:	12 a2       	std	Z+34, r1	; 0x22
}
     318:	08 95       	ret

0000031a <runPOT>:

void runPOT(){
     31a:	ed e1       	ldi	r30, 0x1D	; 29
     31c:	f1 e2       	ldi	r31, 0x21	; 33
     31e:	23 e0       	ldi	r18, 0x03	; 3
     320:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	for(i = 0; i < 5; i++){
		ADCA.CH0.INTFLAGS	|= 0x01;			//clear interrupt flag
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b2 e0       	ldi	r27, 0x02	; 2
     326:	80 91 23 02 	lds	r24, 0x0223
     32a:	81 60       	ori	r24, 0x01	; 1
     32c:	93 96       	adiw	r26, 0x23	; 35
     32e:	8c 93       	st	X, r24
     330:	93 97       	sbiw	r26, 0x23	; 35
		ADCA.CH0.MUXCTRL	&= ~(0x07 << 3);	//clear pin select
     332:	80 91 21 02 	lds	r24, 0x0221
     336:	87 7c       	andi	r24, 0xC7	; 199
     338:	91 96       	adiw	r26, 0x21	; 33
     33a:	8c 93       	st	X, r24
     33c:	91 97       	sbiw	r26, 0x21	; 33
		ADCA.CH0.MUXCTRL	|= ((i+3) << 3);	//set pin select to current input
     33e:	60 91 21 02 	lds	r22, 0x0221
     342:	c9 01       	movw	r24, r18
     344:	43 e0       	ldi	r20, 0x03	; 3
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	4a 95       	dec	r20
     34c:	e1 f7       	brne	.-8      	; 0x346 <runPOT+0x2c>
     34e:	68 2b       	or	r22, r24
     350:	91 96       	adiw	r26, 0x21	; 33
     352:	6c 93       	st	X, r22
     354:	91 97       	sbiw	r26, 0x21	; 33
		ADCA.CH0.CTRL		|=	0x80;			//start conversion
     356:	80 91 20 02 	lds	r24, 0x0220
     35a:	80 68       	ori	r24, 0x80	; 128
     35c:	90 96       	adiw	r26, 0x20	; 32
     35e:	8c 93       	st	X, r24
     360:	90 97       	sbiw	r26, 0x20	; 32
		
		while(!(ADCA.CH0.INTFLAGS & 0x01)){}
     362:	80 91 23 02 	lds	r24, 0x0223
     366:	80 ff       	sbrs	r24, 0
     368:	fc cf       	rjmp	.-8      	; 0x362 <runPOT+0x48>
		
		i_POT[i] = ADCA.CH0.RESL;
     36a:	80 91 24 02 	lds	r24, 0x0224
		i_POT[i] |= ADCA.CH0.RESH << 8;
     36e:	90 91 25 02 	lds	r25, 0x0225
     372:	59 2f       	mov	r21, r25
     374:	40 e0       	ldi	r20, 0x00	; 0
		ADCA.CH0.MUXCTRL	|= ((i+3) << 3);	//set pin select to current input
		ADCA.CH0.CTRL		|=	0x80;			//start conversion
		
		while(!(ADCA.CH0.INTFLAGS & 0x01)){}
		
		i_POT[i] = ADCA.CH0.RESL;
     376:	90 e0       	ldi	r25, 0x00	; 0
		i_POT[i] |= ADCA.CH0.RESH << 8;
     378:	84 2b       	or	r24, r20
     37a:	95 2b       	or	r25, r21
     37c:	80 83       	st	Z, r24
     37e:	91 83       	std	Z+1, r25	; 0x01
		
		if (i_POT[i] < POTMIN)
     380:	80 3c       	cpi	r24, 0xC0	; 192
     382:	91 05       	cpc	r25, r1
     384:	18 f4       	brcc	.+6      	; 0x38c <runPOT+0x72>
			i_POT[i] = 0;
     386:	10 82       	st	Z, r1
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	04 c0       	rjmp	.+8      	; 0x394 <runPOT+0x7a>
		else
			i_POT[i] = i_POT[i] - POTMIN;
     38c:	80 5c       	subi	r24, 0xC0	; 192
     38e:	90 40       	sbci	r25, 0x00	; 0
     390:	80 83       	st	Z, r24
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	2f 5f       	subi	r18, 0xFF	; 255
     396:	3f 4f       	sbci	r19, 0xFF	; 255
     398:	32 96       	adiw	r30, 0x02	; 2
}

void runPOT(){
	uint8_t i;
	
	for(i = 0; i < 5; i++){
     39a:	28 30       	cpi	r18, 0x08	; 8
     39c:	31 05       	cpc	r19, r1
     39e:	19 f6       	brne	.-122    	; 0x326 <runPOT+0xc>
			i_POT[i] = 0;
		else
			i_POT[i] = i_POT[i] - POTMIN;
	}
	
}
     3a0:	08 95       	ret

000003a2 <scalePOT>:

uint16_t scalePOT(uint8_t pot, uint16_t outmin, uint16_t outmax){
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	eb 01       	movw	r28, r22
     3b4:	6a 01       	movw	r12, r20
	//outmin: minimum value to output
	//outmax: maximum value to output
	
	double temp;
	
	temp = 1.0*i_POT[pot]/POTRANGE;
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e3 5e       	subi	r30, 0xE3	; 227
     3c0:	fe 4d       	sbci	r31, 0xDE	; 222
     3c2:	60 81       	ld	r22, Z
     3c4:	71 81       	ldd	r23, Z+1	; 0x01
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 ef       	ldi	r19, 0xF0	; 240
     3d2:	43 e7       	ldi	r20, 0x73	; 115
     3d4:	55 e4       	ldi	r21, 0x45	; 69
     3d6:	0e 94 0d 08 	call	0x101a	; 0x101a <__divsf3>
     3da:	7b 01       	movw	r14, r22
     3dc:	8c 01       	movw	r16, r24
	temp = temp*(outmax - outmin) + outmin;
     3de:	cc 1a       	sub	r12, r28
     3e0:	dd 0a       	sbc	r13, r29
     3e2:	b6 01       	movw	r22, r12
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c8 01       	movw	r24, r16
     3f2:	b7 01       	movw	r22, r14
     3f4:	0e 94 13 07 	call	0xe26	; 0xe26 <__mulsf3>
     3f8:	8b 01       	movw	r16, r22
     3fa:	c8 2e       	mov	r12, r24
     3fc:	e9 2e       	mov	r14, r25
     3fe:	be 01       	movw	r22, r28
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
     408:	9b 01       	movw	r18, r22
     40a:	ac 01       	movw	r20, r24
     40c:	60 2f       	mov	r22, r16
     40e:	71 2f       	mov	r23, r17
     410:	8c 2d       	mov	r24, r12
     412:	9e 2d       	mov	r25, r14
     414:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__addsf3>
	
	return (uint16_t) temp;
     418:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fixunssfsi>
}
     41c:	cb 01       	movw	r24, r22
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <initLED>:

void initLED(){
	//initialize all LED outputs, set all as blank
	
	PORTA.DIRSET = 0x06;	//~LT and ~BL output
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f6 e0       	ldi	r31, 0x06	; 6
     434:	86 e0       	ldi	r24, 0x06	; 6
     436:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0x06;	//~LT and ~BL high
     438:	85 83       	std	Z+5, r24	; 0x05
	
	PORTC.DIRSET = 0xF8;	//STATLED and LED0:3 output
     43a:	a0 e4       	ldi	r26, 0x40	; 64
     43c:	b6 e0       	ldi	r27, 0x06	; 6
     43e:	88 ef       	ldi	r24, 0xF8	; 248
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	8c 93       	st	X, r24
     444:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = 0x3F;	//DSEL0:2 and DP0:2 output
     446:	e0 e6       	ldi	r30, 0x60	; 96
     448:	f6 e0       	ldi	r31, 0x06	; 6
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	81 83       	std	Z+1, r24	; 0x01
	
	
	//All LEDs off
	PORTD.OUTSET = 0x38;	//DSEL0:2 high (arm all 7 segments)
     44e:	88 e3       	ldi	r24, 0x38	; 56
     450:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = 0xF0;	//LED0:3 high (blank all 7 segments)
     452:	90 ef       	ldi	r25, 0xF0	; 240
     454:	15 96       	adiw	r26, 0x05	; 5
     456:	9c 93       	st	X, r25
     458:	15 97       	sbiw	r26, 0x05	; 5
	PORTD.OUTCLR = 0x38;	//DSEL0: low (disarm all 7 segments)
     45a:	86 83       	std	Z+6, r24	; 0x06
	
	PORTD.OUTCLR = 0x07;	//DP0:2 low (blank all dps)
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	86 83       	std	Z+6, r24	; 0x06
	PORTC.OUTSET = 0x08;	//STATLED high (blank statled)
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	15 96       	adiw	r26, 0x05	; 5
     464:	8c 93       	st	X, r24
     466:	15 97       	sbiw	r26, 0x05	; 5
}
     468:	08 95       	ret

0000046a <runLED>:

void runLED(){
     46a:	2f 92       	push	r2
     46c:	3f 92       	push	r3
     46e:	4f 92       	push	r4
     470:	5f 92       	push	r5
     472:	6f 92       	push	r6
     474:	7f 92       	push	r7
     476:	8f 92       	push	r8
     478:	9f 92       	push	r9
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	00 d0       	rcall	.+0      	; 0x490 <runLED+0x26>
     490:	0f 92       	push	r0
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	//booleans and such convert to LED out
	bool DP[3] = {o_LEDDP0, o_LEDDP1, o_LEDDP2};
     496:	90 91 12 21 	lds	r25, 0x2112
     49a:	80 91 13 21 	lds	r24, 0x2113
     49e:	20 91 11 21 	lds	r18, 0x2111
     4a2:	29 83       	std	Y+1, r18	; 0x01
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t i;
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
     4a8:	e0 91 1b 21 	lds	r30, 0x211B
     4ac:	f0 91 1c 21 	lds	r31, 0x211C
     4b0:	6e 01       	movw	r12, r28
     4b2:	08 94       	sec
     4b4:	c1 1c       	adc	r12, r1
     4b6:	d1 1c       	adc	r13, r1
     4b8:	22 e0       	ldi	r18, 0x02	; 2
     4ba:	30 e0       	ldi	r19, 0x00	; 0
	
	for (i=0 ; i<3 ; i++){
		digit = threeDigits%10;					//extract lowest current digit of 7seg
     4bc:	5a e0       	ldi	r21, 0x0A	; 10
     4be:	e5 2e       	mov	r14, r21
     4c0:	f1 2c       	mov	r15, r1
		if (threeDigits==0 && (i>0))			//if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
			digit = 10;
			
		PORTD.OUTCLR = 0x08 << (i+2)%3;			//arm appropriate 7 segment		(CHANGE INDEX SCALING FOR NEXT REVISION)
     4c2:	43 e0       	ldi	r20, 0x03	; 3
     4c4:	44 2e       	mov	r4, r20
     4c6:	51 2c       	mov	r5, r1
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	29 2e       	mov	r2, r25
     4cc:	31 2c       	mov	r3, r1
     4ce:	00 e6       	ldi	r16, 0x60	; 96
     4d0:	16 e0       	ldi	r17, 0x06	; 6
		PORTC.OUTCLR = 0xF0;					//clear digit select
     4d2:	80 e4       	ldi	r24, 0x40	; 64
     4d4:	a8 2e       	mov	r10, r24
     4d6:	86 e0       	ldi	r24, 0x06	; 6
     4d8:	b8 2e       	mov	r11, r24
     4da:	b0 ef       	ldi	r27, 0xF0	; 240
     4dc:	8b 2e       	mov	r8, r27
		threeDigits = threeDigits/10;			//shift 7seg number down to next digit
		
		if (DP[i])							//light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
			PORTD.OUTSET = 1 << (i+2)%3;
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
     4de:	a1 e0       	ldi	r26, 0x01	; 1
     4e0:	6a 2e       	mov	r6, r26
     4e2:	71 2c       	mov	r7, r1
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
	
	for (i=0 ; i<3 ; i++){
		digit = threeDigits%10;					//extract lowest current digit of 7seg
     4e4:	cf 01       	movw	r24, r30
     4e6:	b7 01       	movw	r22, r14
     4e8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__udivmodhi4>
     4ec:	98 2e       	mov	r9, r24
		if (threeDigits==0 && (i>0))			//if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     4ee:	30 97       	sbiw	r30, 0x00	; 0
     4f0:	21 f4       	brne	.+8      	; 0x4fa <runLED+0x90>
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	11 f0       	breq	.+4      	; 0x4fa <runLED+0x90>
			digit = 10;
     4f6:	7a e0       	ldi	r23, 0x0A	; 10
     4f8:	97 2e       	mov	r9, r23
			
		PORTD.OUTCLR = 0x08 << (i+2)%3;			//arm appropriate 7 segment		(CHANGE INDEX SCALING FOR NEXT REVISION)
     4fa:	c9 01       	movw	r24, r18
     4fc:	b2 01       	movw	r22, r4
     4fe:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__divmodhi4>
     502:	a1 01       	movw	r20, r2
     504:	08 2e       	mov	r0, r24
     506:	02 c0       	rjmp	.+4      	; 0x50c <runLED+0xa2>
     508:	44 0f       	add	r20, r20
     50a:	55 1f       	adc	r21, r21
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <runLED+0x9e>
     510:	d8 01       	movw	r26, r16
     512:	16 96       	adiw	r26, 0x06	; 6
     514:	4c 93       	st	X, r20
		PORTC.OUTCLR = 0xF0;					//clear digit select
     516:	d5 01       	movw	r26, r10
     518:	16 96       	adiw	r26, 0x06	; 6
     51a:	8c 92       	st	X, r8
     51c:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTSET = digit << 4;				//set digit select #
     51e:	92 94       	swap	r9
     520:	60 ef       	ldi	r22, 0xF0	; 240
     522:	96 22       	and	r9, r22
     524:	15 96       	adiw	r26, 0x05	; 5
     526:	9c 92       	st	X, r9
		PORTD.OUTSET = 0x38;					//disarm all 7 segments
     528:	48 e3       	ldi	r20, 0x38	; 56
     52a:	d8 01       	movw	r26, r16
     52c:	15 96       	adiw	r26, 0x05	; 5
     52e:	4c 93       	st	X, r20
		
		threeDigits = threeDigits/10;			//shift 7seg number down to next digit
		
		if (DP[i])							//light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     530:	d6 01       	movw	r26, r12
     532:	9d 91       	ld	r25, X+
     534:	6d 01       	movw	r12, r26
     536:	99 23       	and	r25, r25
     538:	59 f0       	breq	.+22     	; 0x550 <runLED+0xe6>
			PORTD.OUTSET = 1 << (i+2)%3;
     53a:	a3 01       	movw	r20, r6
     53c:	02 c0       	rjmp	.+4      	; 0x542 <runLED+0xd8>
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	8a 95       	dec	r24
     544:	e2 f7       	brpl	.-8      	; 0x53e <runLED+0xd4>
     546:	d8 01       	movw	r26, r16
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	4c 93       	st	X, r20
     54c:	15 97       	sbiw	r26, 0x05	; 5
     54e:	0a c0       	rjmp	.+20     	; 0x564 <runLED+0xfa>
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
     550:	a3 01       	movw	r20, r6
     552:	02 c0       	rjmp	.+4      	; 0x558 <runLED+0xee>
     554:	44 0f       	add	r20, r20
     556:	55 1f       	adc	r21, r21
     558:	8a 95       	dec	r24
     55a:	e2 f7       	brpl	.-8      	; 0x554 <runLED+0xea>
     55c:	d8 01       	movw	r26, r16
     55e:	16 96       	adiw	r26, 0x06	; 6
     560:	4c 93       	st	X, r20
     562:	16 97       	sbiw	r26, 0x06	; 6
     564:	2f 5f       	subi	r18, 0xFF	; 255
     566:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
	
	for (i=0 ; i<3 ; i++){
     568:	25 30       	cpi	r18, 0x05	; 5
     56a:	31 05       	cpc	r19, r1
     56c:	31 f0       	breq	.+12     	; 0x57a <runLED+0x110>
		PORTD.OUTCLR = 0x08 << (i+2)%3;			//arm appropriate 7 segment		(CHANGE INDEX SCALING FOR NEXT REVISION)
		PORTC.OUTCLR = 0xF0;					//clear digit select
		PORTC.OUTSET = digit << 4;				//set digit select #
		PORTD.OUTSET = 0x38;					//disarm all 7 segments
		
		threeDigits = threeDigits/10;			//shift 7seg number down to next digit
     56e:	cf 01       	movw	r24, r30
     570:	b7 01       	movw	r22, r14
     572:	0e 94 9f 0b 	call	0x173e	; 0x173e <__udivmodhi4>
     576:	fb 01       	movw	r30, r22
     578:	b5 cf       	rjmp	.-150    	; 0x4e4 <runLED+0x7a>
			PORTD.OUTSET = 1 << (i+2)%3;
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
	}
	
	if (o_LEDSTAT)								//light STATLED if necessary
     57a:	80 91 14 21 	lds	r24, 0x2114
     57e:	88 23       	and	r24, r24
     580:	29 f0       	breq	.+10     	; 0x58c <runLED+0x122>
		PORTC.OUTCLR = 0x08;
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	e0 e4       	ldi	r30, 0x40	; 64
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	86 83       	std	Z+6, r24	; 0x06
     58a:	04 c0       	rjmp	.+8      	; 0x594 <runLED+0x12a>
	else
		PORTC.OUTSET = 0x08;
     58c:	88 e0       	ldi	r24, 0x08	; 8
     58e:	e0 e4       	ldi	r30, 0x40	; 64
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	85 83       	std	Z+5, r24	; 0x05
	
}
     594:	23 96       	adiw	r28, 0x03	; 3
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	9f 90       	pop	r9
     5b0:	8f 90       	pop	r8
     5b2:	7f 90       	pop	r7
     5b4:	6f 90       	pop	r6
     5b6:	5f 90       	pop	r5
     5b8:	4f 90       	pop	r4
     5ba:	3f 90       	pop	r3
     5bc:	2f 90       	pop	r2
     5be:	08 95       	ret

000005c0 <initSW>:

void initSW(){
	PORTB.DIRCLR = 0x0C;				//SW8(push) and Encoder pushbutton input
     5c0:	8c e0       	ldi	r24, 0x0C	; 12
     5c2:	e0 e2       	ldi	r30, 0x20	; 32
     5c4:	f6 e0       	ldi	r31, 0x06	; 6
     5c6:	82 83       	std	Z+2, r24	; 0x02
	PORTE.DIRCLR = 0x08;				//SW7(toggle) input
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	e0 e8       	ldi	r30, 0x80	; 128
     5cc:	f6 e0       	ldi	r31, 0x06	; 6
     5ce:	82 83       	std	Z+2, r24	; 0x02
}
     5d0:	08 95       	ret

000005d2 <runSW>:

void runSW(){
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
	//_i_SWc[] = count for ["]
	
	uint8_t i;
	
	_i_SW1 = 0x00;									//capture current physical switch positions
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
     5de:	80 91 88 06 	lds	r24, 0x0688
     5e2:	86 95       	lsr	r24
     5e4:	86 95       	lsr	r24
     5e6:	86 95       	lsr	r24
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	09 f0       	breq	.+2      	; 0x5ee <runSW+0x1c>
     5ec:	90 e0       	ldi	r25, 0x00	; 0
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
     5ee:	80 91 28 06 	lds	r24, 0x0628
     5f2:	86 95       	lsr	r24
     5f4:	86 95       	lsr	r24
     5f6:	80 fd       	sbrc	r24, 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <runSW+0x2c>
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <runSW+0x2e>
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	e8 2e       	mov	r14, r24
     602:	e9 2a       	or	r14, r25
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
     604:	80 91 28 06 	lds	r24, 0x0628
     608:	86 95       	lsr	r24
     60a:	86 95       	lsr	r24
     60c:	86 95       	lsr	r24
     60e:	80 fd       	sbrc	r24, 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <runSW+0x44>
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	01 c0       	rjmp	.+2      	; 0x618 <runSW+0x46>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	e8 2a       	or	r14, r24
     61a:	e0 92 16 21 	sts	0x2116, r14
	
	for (i = 0; i < 3; i++){
		if (_i_SW1 >> i == _i_SW0 >> i)			//if switch didn't change
     61e:	60 91 15 21 	lds	r22, 0x2115
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	f0 90 17 21 	lds	r15, 0x2117
     628:	e8 e1       	ldi	r30, 0x18	; 24
     62a:	f1 e2       	ldi	r31, 0x21	; 33
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	4e 2d       	mov	r20, r14
     632:	50 e0       	ldi	r21, 0x00	; 0
			_i_SWc[i]++;							//increment count		
		else
			_i_SWc[i] = 0;							//else reset count			
		if (_i_SWc[i] > DEBOUNCE){					//if count is over debounce value
			_i_SW &= ~(1 << i);
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
	
	for (i = 0; i < 3; i++){
		if (_i_SW1 >> i == _i_SW0 >> i)			//if switch didn't change
     638:	a8 2f       	mov	r26, r24
     63a:	8a 01       	movw	r16, r20
     63c:	08 2e       	mov	r0, r24
     63e:	02 c0       	rjmp	.+4      	; 0x644 <runSW+0x72>
     640:	15 95       	asr	r17
     642:	07 95       	ror	r16
     644:	0a 94       	dec	r0
     646:	e2 f7       	brpl	.-8      	; 0x640 <runSW+0x6e>
     648:	eb 01       	movw	r28, r22
     64a:	08 2e       	mov	r0, r24
     64c:	02 c0       	rjmp	.+4      	; 0x652 <runSW+0x80>
     64e:	d5 95       	asr	r29
     650:	c7 95       	ror	r28
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <runSW+0x7c>
     656:	0c 17       	cp	r16, r28
     658:	1d 07       	cpc	r17, r29
     65a:	21 f4       	brne	.+8      	; 0x664 <runSW+0x92>
			_i_SWc[i]++;							//increment count		
     65c:	b0 81       	ld	r27, Z
     65e:	bf 5f       	subi	r27, 0xFF	; 255
     660:	b0 83       	st	Z, r27
     662:	01 c0       	rjmp	.+2      	; 0x666 <runSW+0x94>
		else
			_i_SWc[i] = 0;							//else reset count			
     664:	10 82       	st	Z, r1
		if (_i_SWc[i] > DEBOUNCE){					//if count is over debounce value
     666:	b0 81       	ld	r27, Z
     668:	b9 30       	cpi	r27, 0x09	; 9
     66a:	68 f0       	brcs	.+26     	; 0x686 <runSW+0xb4>
			_i_SW &= ~(1 << i);
     66c:	e9 01       	movw	r28, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <runSW+0xa2>
     670:	cc 0f       	add	r28, r28
     672:	dd 1f       	adc	r29, r29
     674:	aa 95       	dec	r26
     676:	e2 f7       	brpl	.-8      	; 0x670 <runSW+0x9e>
     678:	de 01       	movw	r26, r28
     67a:	bc 2f       	mov	r27, r28
     67c:	b0 95       	com	r27
     67e:	fb 22       	and	r15, r27
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
     680:	ae 21       	and	r26, r14
     682:	fa 2a       	or	r15, r26
			_i_SWc[i] = 0;							//and reset count
     684:	10 82       	st	Z, r1
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	31 96       	adiw	r30, 0x01	; 1
	_i_SW1 = 0x00;									//capture current physical switch positions
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
	
	for (i = 0; i < 3; i++){
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	91 05       	cpc	r25, r1
     68e:	a1 f6       	brne	.-88     	; 0x638 <runSW+0x66>
     690:	f0 92 17 21 	sts	0x2117, r15
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
			_i_SWc[i] = 0;							//and reset count
		}
	}	
	
	_i_SW0 = _i_SW1;								//set last switch position to current switch position
     694:	e0 92 15 21 	sts	0x2115, r14
     698:	80 91 0e 21 	lds	r24, 0x210E
	
	//set booleans
	
	if (_i_SW & 0x01){			//if toggle IS on
     69c:	f0 fe       	sbrs	r15, 0
     69e:	0e c0       	rjmp	.+28     	; 0x6bc <runSW+0xea>
		i_SWTOGoff = 0;				//not a new off
     6a0:	10 92 10 21 	sts	0x2110, r1
		if (i_SWTOGstate)			//if toggle WAS on
     6a4:	88 23       	and	r24, r24
     6a6:	19 f0       	breq	.+6      	; 0x6ae <runSW+0xdc>
			i_SWTOGon = 0;				//not a new on
     6a8:	10 92 0f 21 	sts	0x210F, r1
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <runSW+0xe2>
		else							//else (toggle WAS off)
			i_SWTOGon = 1;				//new on
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 0f 21 	sts	0x210F, r24
		i_SWTOGstate = 1;		//set current value
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 0e 21 	sts	0x210E, r24
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <runSW+0x102>
	}		
	else{						//if toggle IS off
		i_SWTOGon = 0;				//not a new on
     6bc:	10 92 0f 21 	sts	0x210F, r1
		if (i_SWTOGstate)			//if toggle WAS on
     6c0:	88 23       	and	r24, r24
     6c2:	21 f0       	breq	.+8      	; 0x6cc <runSW+0xfa>
			i_SWTOGoff = 1;				//new off
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 10 21 	sts	0x2110, r24
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <runSW+0xfe>
		else
			i_SWTOGoff = 0;
     6cc:	10 92 10 21 	sts	0x2110, r1
		i_SWTOGstate = 0;
     6d0:	10 92 0e 21 	sts	0x210E, r1
     6d4:	80 91 08 21 	lds	r24, 0x2108
	}		
	
	if (_i_SW & 0x02){		
     6d8:	f1 fe       	sbrs	r15, 1
     6da:	0e c0       	rjmp	.+28     	; 0x6f8 <runSW+0x126>
		i_SWPUSHoff = 0;		
     6dc:	10 92 0a 21 	sts	0x210A, r1
		if (i_SWPUSHstate)		
     6e0:	88 23       	and	r24, r24
     6e2:	19 f0       	breq	.+6      	; 0x6ea <runSW+0x118>
			i_SWPUSHon = 0;		
     6e4:	10 92 09 21 	sts	0x2109, r1
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <runSW+0x11e>
		else						
			i_SWPUSHon = 1;				
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 09 21 	sts	0x2109, r24
		i_SWPUSHstate = 1;		
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 08 21 	sts	0x2108, r24
     6f6:	0c c0       	rjmp	.+24     	; 0x710 <runSW+0x13e>
	}		
	else{						
		i_SWPUSHon = 0;				
     6f8:	10 92 09 21 	sts	0x2109, r1
		if (i_SWPUSHstate)			
     6fc:	88 23       	and	r24, r24
     6fe:	21 f0       	breq	.+8      	; 0x708 <runSW+0x136>
			i_SWPUSHoff = 1;		
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 0a 21 	sts	0x210A, r24
     706:	02 c0       	rjmp	.+4      	; 0x70c <runSW+0x13a>
		else
			i_SWPUSHoff = 0;
     708:	10 92 0a 21 	sts	0x210A, r1
		i_SWPUSHstate = 0;
     70c:	10 92 08 21 	sts	0x2108, r1
     710:	80 91 0b 21 	lds	r24, 0x210B
	}
	
	if (_i_SW & 0x04){		
     714:	f2 fe       	sbrs	r15, 2
     716:	0e c0       	rjmp	.+28     	; 0x734 <runSW+0x162>
		i_SWENCoff = 0;		
     718:	10 92 0d 21 	sts	0x210D, r1
		if (i_SWENCstate)		
     71c:	88 23       	and	r24, r24
     71e:	19 f0       	breq	.+6      	; 0x726 <runSW+0x154>
			i_SWENCon = 0;		
     720:	10 92 0c 21 	sts	0x210C, r1
     724:	03 c0       	rjmp	.+6      	; 0x72c <runSW+0x15a>
		else						
			i_SWENCon = 1;				
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 0c 21 	sts	0x210C, r24
		i_SWENCstate = 1;		
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 0b 21 	sts	0x210B, r24
     732:	0c c0       	rjmp	.+24     	; 0x74c <runSW+0x17a>
	}		
	else{						
		i_SWENCon = 0;				
     734:	10 92 0c 21 	sts	0x210C, r1
		if (i_SWENCstate)			
     738:	88 23       	and	r24, r24
     73a:	21 f0       	breq	.+8      	; 0x744 <runSW+0x172>
			i_SWENCoff = 1;		
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 0d 21 	sts	0x210D, r24
     742:	02 c0       	rjmp	.+4      	; 0x748 <runSW+0x176>
		else
			i_SWENCoff = 0;
     744:	10 92 0d 21 	sts	0x210D, r1
		i_SWENCstate = 0;
     748:	10 92 0b 21 	sts	0x210B, r1
	}		
	
	
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	08 95       	ret

0000075a <test_switches_and_LEDs>:

void test_switches_and_LEDs(){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	initLED();
     75e:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initSW();
     762:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
	
	o_LED7SEG = 500;
     766:	84 ef       	ldi	r24, 0xF4	; 244
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	80 93 1b 21 	sts	0x211B, r24
     76e:	90 93 1c 21 	sts	0x211C, r25
		
		if (o_LED7SEG > 999)
			o_LED7SEG = 0;
		
		if (o_LED7SEG < 1)
			o_LED7SEG = 999; 
     772:	c7 ee       	ldi	r28, 0xE7	; 231
     774:	d3 e0       	ldi	r29, 0x03	; 3
	initSW();
	
	o_LED7SEG = 500;
	
	while(1){
		runSW();
     776:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		
		o_LEDDP0 = i_SWENCstate;
     77a:	80 91 0b 21 	lds	r24, 0x210B
     77e:	80 93 11 21 	sts	0x2111, r24
		o_LEDDP1 = i_SWPUSHstate;
     782:	80 91 08 21 	lds	r24, 0x2108
     786:	80 93 12 21 	sts	0x2112, r24
		o_LEDDP2 = i_SWTOGstate;
     78a:	80 91 0e 21 	lds	r24, 0x210E
     78e:	80 93 13 21 	sts	0x2113, r24
		
		if (i_SWTOGstate){
     792:	88 23       	and	r24, r24
     794:	b9 f0       	breq	.+46     	; 0x7c4 <test_switches_and_LEDs+0x6a>
			if (i_SWPUSHon)
     796:	80 91 09 21 	lds	r24, 0x2109
     79a:	88 23       	and	r24, r24
     79c:	49 f0       	breq	.+18     	; 0x7b0 <test_switches_and_LEDs+0x56>
				o_LED7SEG += 10;
     79e:	80 91 1b 21 	lds	r24, 0x211B
     7a2:	90 91 1c 21 	lds	r25, 0x211C
     7a6:	0a 96       	adiw	r24, 0x0a	; 10
     7a8:	80 93 1b 21 	sts	0x211B, r24
     7ac:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCon)
     7b0:	80 91 0c 21 	lds	r24, 0x210C
     7b4:	88 23       	and	r24, r24
     7b6:	01 f1       	breq	.+64     	; 0x7f8 <test_switches_and_LEDs+0x9e>
				o_LED7SEG += 1;
     7b8:	80 91 1b 21 	lds	r24, 0x211B
     7bc:	90 91 1c 21 	lds	r25, 0x211C
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <test_switches_and_LEDs+0x96>
		}
		else{
			if (i_SWPUSHoff)
     7c4:	80 91 0a 21 	lds	r24, 0x210A
     7c8:	88 23       	and	r24, r24
     7ca:	49 f0       	breq	.+18     	; 0x7de <test_switches_and_LEDs+0x84>
				o_LED7SEG += -10;
     7cc:	80 91 1b 21 	lds	r24, 0x211B
     7d0:	90 91 1c 21 	lds	r25, 0x211C
     7d4:	0a 97       	sbiw	r24, 0x0a	; 10
     7d6:	80 93 1b 21 	sts	0x211B, r24
     7da:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCoff)
     7de:	80 91 0d 21 	lds	r24, 0x210D
     7e2:	88 23       	and	r24, r24
     7e4:	49 f0       	breq	.+18     	; 0x7f8 <test_switches_and_LEDs+0x9e>
				o_LED7SEG += -1;
     7e6:	80 91 1b 21 	lds	r24, 0x211B
     7ea:	90 91 1c 21 	lds	r25, 0x211C
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	80 93 1b 21 	sts	0x211B, r24
     7f4:	90 93 1c 21 	sts	0x211C, r25
		}
		
		if (o_LED7SEG > 999)
     7f8:	80 91 1b 21 	lds	r24, 0x211B
     7fc:	90 91 1c 21 	lds	r25, 0x211C
     800:	23 e0       	ldi	r18, 0x03	; 3
     802:	88 3e       	cpi	r24, 0xE8	; 232
     804:	92 07       	cpc	r25, r18
     806:	20 f0       	brcs	.+8      	; 0x810 <test_switches_and_LEDs+0xb6>
			o_LED7SEG = 0;
     808:	10 92 1b 21 	sts	0x211B, r1
     80c:	10 92 1c 21 	sts	0x211C, r1
		
		if (o_LED7SEG < 1)
     810:	80 91 1b 21 	lds	r24, 0x211B
     814:	90 91 1c 21 	lds	r25, 0x211C
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	21 f4       	brne	.+8      	; 0x824 <test_switches_and_LEDs+0xca>
			o_LED7SEG = 999; 
     81c:	c0 93 1b 21 	sts	0x211B, r28
     820:	d0 93 1c 21 	sts	0x211C, r29
		
		runLED();
     824:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
	}
     828:	a6 cf       	rjmp	.-180    	; 0x776 <test_switches_and_LEDs+0x1c>

0000082a <test_pots>:
}

void test_pots(){
     82a:	1f 93       	push	r17
	initLED();
     82c:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initSW();
     830:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
	initPOT();
     834:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initPOT>
	
	uint8_t selPOT = 0;
     838:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		runSW();
     83a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		runPOT();
     83e:	0e 94 8d 01 	call	0x31a	; 0x31a <runPOT>
	
	
		o_LED7SEG = 0*(selPOT+1) + scalePOT(selPOT, 1, 990);
     842:	81 2f       	mov	r24, r17
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	4e ed       	ldi	r20, 0xDE	; 222
     84a:	53 e0       	ldi	r21, 0x03	; 3
     84c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <scalePOT>
     850:	80 93 1b 21 	sts	0x211B, r24
     854:	90 93 1c 21 	sts	0x211C, r25
			
		if(i_SWENCon){
     858:	80 91 0c 21 	lds	r24, 0x210C
     85c:	88 23       	and	r24, r24
     85e:	21 f0       	breq	.+8      	; 0x868 <test_pots+0x3e>
			selPOT++;
     860:	1f 5f       	subi	r17, 0xFF	; 255
			if (selPOT>4)
     862:	15 30       	cpi	r17, 0x05	; 5
     864:	08 f0       	brcs	.+2      	; 0x868 <test_pots+0x3e>
				selPOT = 0;
     866:	10 e0       	ldi	r17, 0x00	; 0
		}
	
		runLED();
     868:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
	
	}	
     86c:	e6 cf       	rjmp	.-52     	; 0x83a <test_pots+0x10>

0000086e <test_encoder>:
}

void test_encoder(){
	initLED();
     86e:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initSW();
     872:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
	initPOT();
     876:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initPOT>
}



void initENC(){
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	e0 e2       	ldi	r30, 0x20	; 32
     87e:	f6 e0       	ldi	r31, 0x06	; 6
     880:	82 83       	std	Z+2, r24	; 0x02
	initLED();
	initSW();
	initPOT();
	initENC();
	
	o_LED7SEG = 100;
     882:	84 e6       	ldi	r24, 0x64	; 100
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	80 93 1b 21 	sts	0x211B, r24
     88a:	90 93 1c 21 	sts	0x211C, r25
	
	while(1){
		runSW();
     88e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		runPOT();
     892:	0e 94 8d 01 	call	0x31a	; 0x31a <runPOT>
		runENC();
     896:	0e 94 4f 01 	call	0x29e	; 0x29e <runENC>
		
		if (i_ENCcw)
     89a:	80 91 28 21 	lds	r24, 0x2128
     89e:	88 23       	and	r24, r24
     8a0:	31 f0       	breq	.+12     	; 0x8ae <test_encoder+0x40>
			o_LED7SEG++;
     8a2:	80 91 1b 21 	lds	r24, 0x211B
     8a6:	90 91 1c 21 	lds	r25, 0x211C
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <test_encoder+0x52>
		else if (i_ENCccw)
     8ae:	80 91 29 21 	lds	r24, 0x2129
     8b2:	88 23       	and	r24, r24
     8b4:	49 f0       	breq	.+18     	; 0x8c8 <test_encoder+0x5a>
			o_LED7SEG += -1;
     8b6:	80 91 1b 21 	lds	r24, 0x211B
     8ba:	90 91 1c 21 	lds	r25, 0x211C
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	80 93 1b 21 	sts	0x211B, r24
     8c4:	90 93 1c 21 	sts	0x211C, r25
			
		o_LEDSTAT = i_SWENCstate;
     8c8:	80 91 0b 21 	lds	r24, 0x210B
     8cc:	80 93 14 21 	sts	0x2114, r24

		
		runLED();
     8d0:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
	}
     8d4:	dc cf       	rjmp	.-72     	; 0x88e <test_encoder+0x20>

000008d6 <test_midiTX>:
}

void test_midiTX(){
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
	initCLOCK();
     8e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initCLOCK>
	initLED();
     8e6:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initMIDI();
     8ea:	0e 94 17 01 	call	0x22e	; 0x22e <initMIDI>
	initPOT();
     8ee:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initPOT>
	initSW();
     8f2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
}



void initENC(){
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	e0 e2       	ldi	r30, 0x20	; 32
     8fa:	f6 e0       	ldi	r31, 0x06	; 6
     8fc:	82 83       	std	Z+2, r24	; 0x02
	initMIDI();
	initPOT();
	initSW();
	initENC();
	
	uint8_t val = 0;
     8fe:	ee 24       	eor	r14, r14
		
		send = 0;
		
		if (i_ENCccw){
			send = 1;
			val = (val - 1) % 256;
     900:	c0 e0       	ldi	r28, 0x00	; 0
     902:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send == 2){
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
			
			o_LEDDP1 = 1;
			USARTD1.DATA = 0xB0;		//control change
     904:	60 eb       	ldi	r22, 0xB0	; 176
     906:	f6 2e       	mov	r15, r22
			USARTD1.DATA = 0x01;		//mod wheel
			
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
			
			o_LEDSTAT = 1;
			USARTD1.DATA = 0x37;		//value = 55
     908:	07 e3       	ldi	r16, 0x37	; 55
			
		if (send==1){
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
			
			o_LEDDP1 = 1;
			USARTD1.DATA = 0xF8;		//sync
     90a:	18 ef       	ldi	r17, 0xF8	; 248
	
	uint8_t val = 0;
	uint8_t send = 0;
	
	while(1){
		runSW();
     90c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		runPOT();
     910:	0e 94 8d 01 	call	0x31a	; 0x31a <runPOT>
		runENC();
     914:	0e 94 4f 01 	call	0x29e	; 0x29e <runENC>
		
		o_LEDDP2 = i_SWENCstate;
     918:	80 91 0b 21 	lds	r24, 0x210B
     91c:	80 93 13 21 	sts	0x2113, r24
		o_LEDDP1 = 0;
     920:	10 92 12 21 	sts	0x2112, r1
		o_LEDDP0 = 0;
     924:	10 92 11 21 	sts	0x2111, r1
		o_LEDSTAT = 0;
     928:	10 92 14 21 	sts	0x2114, r1
		
		send = 0;
		
		if (i_ENCccw){
     92c:	80 91 29 21 	lds	r24, 0x2129
     930:	88 23       	and	r24, r24
     932:	49 f0       	breq	.+18     	; 0x946 <test_midiTX+0x70>
			send = 1;
			val = (val - 1) % 256;
     934:	8e 2d       	mov	r24, r14
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	be 01       	movw	r22, r28
     93c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__divmodhi4>
     940:	e8 2e       	mov	r14, r24
		o_LEDSTAT = 0;
		
		send = 0;
		
		if (i_ENCccw){
			send = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	01 c0       	rjmp	.+2      	; 0x948 <test_midiTX+0x72>
		o_LEDDP2 = i_SWENCstate;
		o_LEDDP1 = 0;
		o_LEDDP0 = 0;
		o_LEDSTAT = 0;
		
		send = 0;
     946:	80 e0       	ldi	r24, 0x00	; 0
		if (i_ENCccw){
			send = 1;
			val = (val - 1) % 256;
		}
		
		if (i_ENCcw){
     948:	90 91 28 21 	lds	r25, 0x2128
     94c:	99 23       	and	r25, r25
     94e:	11 f0       	breq	.+4      	; 0x954 <test_midiTX+0x7e>
			send = 1;
			val = (val + 1) % 256;
     950:	e3 94       	inc	r14
     952:	02 c0       	rjmp	.+4      	; 0x958 <test_midiTX+0x82>
		}
		
		if (send)
     954:	88 23       	and	r24, r24
     956:	21 f0       	breq	.+8      	; 0x960 <test_midiTX+0x8a>
			initMIDIvar(val);
     958:	8e 2d       	mov	r24, r14
     95a:	0e 94 31 01 	call	0x262	; 0x262 <initMIDIvar>
     95e:	81 e0       	ldi	r24, 0x01	; 1
		
		if (i_SWENCon){
     960:	90 91 0c 21 	lds	r25, 0x210C
     964:	99 23       	and	r25, r25
     966:	61 f4       	brne	.+24     	; 0x980 <test_midiTX+0xaa>
			send = 2;
		}
			
		if (send==1){
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	29 f5       	brne	.+74     	; 0x9b6 <test_midiTX+0xe0>
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
     96c:	80 91 b1 09 	lds	r24, 0x09B1
     970:	85 ff       	sbrs	r24, 5
     972:	fc cf       	rjmp	.-8      	; 0x96c <test_midiTX+0x96>
			
			o_LEDDP1 = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 12 21 	sts	0x2112, r24
			USARTD1.DATA = 0xF8;		//sync
     97a:	10 93 b0 09 	sts	0x09B0, r17
     97e:	1b c0       	rjmp	.+54     	; 0x9b6 <test_midiTX+0xe0>
		}
		
		if (send == 2){
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
     980:	80 91 b1 09 	lds	r24, 0x09B1
     984:	85 ff       	sbrs	r24, 5
     986:	fc cf       	rjmp	.-8      	; 0x980 <test_midiTX+0xaa>
			
			o_LEDDP1 = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 12 21 	sts	0x2112, r24
			USARTD1.DATA = 0xB0;		//control change
     98e:	f0 92 b0 09 	sts	0x09B0, r15
			
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
     992:	80 91 b1 09 	lds	r24, 0x09B1
     996:	85 ff       	sbrs	r24, 5
     998:	fc cf       	rjmp	.-8      	; 0x992 <test_midiTX+0xbc>
			
			o_LEDDP0 = 1;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 11 21 	sts	0x2111, r24
			USARTD1.DATA = 0x01;		//mod wheel
     9a0:	80 93 b0 09 	sts	0x09B0, r24
			
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
     9a4:	80 91 b1 09 	lds	r24, 0x09B1
     9a8:	85 ff       	sbrs	r24, 5
     9aa:	fc cf       	rjmp	.-8      	; 0x9a4 <test_midiTX+0xce>
			
			o_LEDSTAT = 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 14 21 	sts	0x2114, r24
			USARTD1.DATA = 0x37;		//value = 55
     9b2:	00 93 b0 09 	sts	0x09B0, r16
		}
		
		o_LED7SEG = val;
     9b6:	e0 92 1b 21 	sts	0x211B, r14
     9ba:	10 92 1c 21 	sts	0x211C, r1
		runLED();	
     9be:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
//		if (USARTD1.STATUS & 0x80)
//			i_MIDIRX = USARTD1.DATA;
		
		
//		runLED();
	}
     9c2:	a4 cf       	rjmp	.-184    	; 0x90c <test_midiTX+0x36>

000009c4 <test_midiTX2>:
}

void test_midiTX2(){
	initCLOCK();
     9c4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initCLOCK>
}



void initENC(){
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	e0 e2       	ldi	r30, 0x20	; 32
     9cc:	f6 e0       	ldi	r31, 0x06	; 6
     9ce:	82 83       	std	Z+2, r24	; 0x02
}

void test_midiTX2(){
	initCLOCK();
	initENC();
	initLED();
     9d0:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initSW();
     9d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
	initPOT();
     9d8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initPOT>
	initMIDI();
     9dc:	0e 94 17 01 	call	0x22e	; 0x22e <initMIDI>
	
	uint8_t val = 0;
	
	while(1){
		runPOT();
     9e0:	0e 94 8d 01 	call	0x31a	; 0x31a <runPOT>
		runENC();
     9e4:	0e 94 4f 01 	call	0x29e	; 0x29e <runENC>
		runSW();
     9e8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		
		val = scalePOT(0,248,253);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	68 ef       	ldi	r22, 0xF8	; 248
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	4d ef       	ldi	r20, 0xFD	; 253
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <scalePOT>
		
		if (i_SWPUSHon){
     9fa:	90 91 09 21 	lds	r25, 0x2109
     9fe:	99 23       	and	r25, r25
     a00:	31 f0       	breq	.+12     	; 0xa0e <test_midiTX2+0x4a>
			while (!(USARTD1.STATUS & 0x20)){}//Data Register Empty Flag
     a02:	90 91 b1 09 	lds	r25, 0x09B1
     a06:	95 ff       	sbrs	r25, 5
     a08:	fc cf       	rjmp	.-8      	; 0xa02 <test_midiTX2+0x3e>
			USARTD1.DATA = val;		//sync
     a0a:	80 93 b0 09 	sts	0x09B0, r24
		}
		
		o_LEDSTAT =	i_SWPUSHstate;
     a0e:	90 91 08 21 	lds	r25, 0x2108
     a12:	90 93 14 21 	sts	0x2114, r25
		
		o_LED7SEG = val;
     a16:	80 93 1b 21 	sts	0x211B, r24
     a1a:	10 92 1c 21 	sts	0x211C, r1
		
		runLED();
     a1e:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
	}
     a22:	de cf       	rjmp	.-68     	; 0x9e0 <test_midiTX2+0x1c>

00000a24 <test_midiRX>:
	
}

void test_midiRX(){
	initCLOCK();
     a24:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initCLOCK>
}



void initENC(){
	PORTB.DIRCLR = 0x03;		//Encoder A and B input
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	e0 e2       	ldi	r30, 0x20	; 32
     a2c:	f6 e0       	ldi	r31, 0x06	; 6
     a2e:	82 83       	std	Z+2, r24	; 0x02
}

void test_midiRX(){
	initCLOCK();
	initENC();
	initLED();
     a30:	0e 94 18 02 	call	0x430	; 0x430 <initLED>
	initSW();
     a34:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initSW>
	initPOT();
     a38:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initPOT>
	initMIDI();
     a3c:	0e 94 17 01 	call	0x22e	; 0x22e <initMIDI>
	
	uint8_t val = 0;
	
	while(1){
		runPOT();
     a40:	0e 94 8d 01 	call	0x31a	; 0x31a <runPOT>
		runENC();
     a44:	0e 94 4f 01 	call	0x29e	; 0x29e <runENC>
		runSW();
     a48:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <runSW>
		
		o_LED7SEG = i_MIDIRX;
     a4c:	80 91 2a 21 	lds	r24, 0x212A
     a50:	80 93 1b 21 	sts	0x211B, r24
     a54:	10 92 1c 21 	sts	0x211C, r1
		
		runLED();
     a58:	0e 94 35 02 	call	0x46a	; 0x46a <runLED>
     a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <test_midiRX+0x1c>

00000a5e <test_OSCOUT>:
	}		
}

void test_OSCOUT(){
	initCLOCK();
     a5e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initCLOCK>
	
	PORTC.DIRSET = 0xF8;
     a62:	88 ef       	ldi	r24, 0xF8	; 248
     a64:	e0 e4       	ldi	r30, 0x40	; 64
     a66:	f6 e0       	ldi	r31, 0x06	; 6
     a68:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.CLKEVOUT = 0x01;  //Peripheral Clock output to port C pin7
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	e0 eb       	ldi	r30, 0xB0	; 176
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	84 83       	std	Z+4, r24	; 0x04
     a72:	ff cf       	rjmp	.-2      	; 0xa72 <test_OSCOUT+0x14>

00000a74 <main>:
}

int main(void) {

//	test_midiTX();
	test_midiTX2();
     a74:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <test_midiTX2>
//	test_midiRX();

	return 0;
}
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	08 95       	ret

00000a7e <__fixunssfsi>:
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	7b 01       	movw	r14, r22
     a88:	8c 01       	movw	r16, r24
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e4       	ldi	r21, 0x4F	; 79
     a92:	0e 94 bb 08 	call	0x1176	; 0x1176 <__gesf2>
     a96:	87 fd       	sbrc	r24, 7
     a98:	11 c0       	rjmp	.+34     	; 0xabc <__fixunssfsi+0x3e>
     a9a:	c8 01       	movw	r24, r16
     a9c:	b7 01       	movw	r22, r14
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	5f e4       	ldi	r21, 0x4F	; 79
     aa6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     aaa:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__fixsfsi>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	20 50       	subi	r18, 0x00	; 0
     ab4:	30 40       	sbci	r19, 0x00	; 0
     ab6:	40 40       	sbci	r20, 0x00	; 0
     ab8:	50 48       	sbci	r21, 0x80	; 128
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <__fixunssfsi+0x4a>
     abc:	c8 01       	movw	r24, r16
     abe:	b7 01       	movw	r22, r14
     ac0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__fixsfsi>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	b9 01       	movw	r22, r18
     aca:	ca 01       	movw	r24, r20
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <_fpadd_parts>:
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e1 e7       	ldi	r30, 0x71	; 113
     adc:	f5 e0       	ldi	r31, 0x05	; 5
     ade:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__prologue_saves__+0x8>
     ae2:	fc 01       	movw	r30, r24
     ae4:	ea 01       	movw	r28, r20
     ae6:	80 81       	ld	r24, Z
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	08 f4       	brcc	.+2      	; 0xaee <_fpadd_parts+0x18>
     aec:	38 c1       	rjmp	.+624    	; 0xd5e <_fpadd_parts+0x288>
     aee:	db 01       	movw	r26, r22
     af0:	9c 91       	ld	r25, X
     af2:	92 30       	cpi	r25, 0x02	; 2
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <_fpadd_parts+0x22>
     af6:	30 c1       	rjmp	.+608    	; 0xd58 <_fpadd_parts+0x282>
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	59 f4       	brne	.+22     	; 0xb12 <_fpadd_parts+0x3c>
     afc:	94 30       	cpi	r25, 0x04	; 4
     afe:	09 f0       	breq	.+2      	; 0xb02 <_fpadd_parts+0x2c>
     b00:	2e c1       	rjmp	.+604    	; 0xd5e <_fpadd_parts+0x288>
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	8c 91       	ld	r24, X
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	98 17       	cp	r25, r24
     b0c:	09 f0       	breq	.+2      	; 0xb10 <_fpadd_parts+0x3a>
     b0e:	21 c1       	rjmp	.+578    	; 0xd52 <_fpadd_parts+0x27c>
     b10:	26 c1       	rjmp	.+588    	; 0xd5e <_fpadd_parts+0x288>
     b12:	94 30       	cpi	r25, 0x04	; 4
     b14:	09 f4       	brne	.+2      	; 0xb18 <_fpadd_parts+0x42>
     b16:	20 c1       	rjmp	.+576    	; 0xd58 <_fpadd_parts+0x282>
     b18:	92 30       	cpi	r25, 0x02	; 2
     b1a:	b1 f4       	brne	.+44     	; 0xb48 <_fpadd_parts+0x72>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	09 f0       	breq	.+2      	; 0xb22 <_fpadd_parts+0x4c>
     b20:	1e c1       	rjmp	.+572    	; 0xd5e <_fpadd_parts+0x288>
     b22:	ca 01       	movw	r24, r20
     b24:	af 01       	movw	r20, r30
     b26:	28 e0       	ldi	r18, 0x08	; 8
     b28:	da 01       	movw	r26, r20
     b2a:	0d 90       	ld	r0, X+
     b2c:	ad 01       	movw	r20, r26
     b2e:	dc 01       	movw	r26, r24
     b30:	0d 92       	st	X+, r0
     b32:	cd 01       	movw	r24, r26
     b34:	21 50       	subi	r18, 0x01	; 1
     b36:	c1 f7       	brne	.-16     	; 0xb28 <_fpadd_parts+0x52>
     b38:	db 01       	movw	r26, r22
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	8c 91       	ld	r24, X
     b3e:	11 97       	sbiw	r26, 0x01	; 1
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	89 23       	and	r24, r25
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	0a c1       	rjmp	.+532    	; 0xd5c <_fpadd_parts+0x286>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	09 f4       	brne	.+2      	; 0xb4e <_fpadd_parts+0x78>
     b4c:	05 c1       	rjmp	.+522    	; 0xd58 <_fpadd_parts+0x282>
     b4e:	c2 80       	ldd	r12, Z+2	; 0x02
     b50:	d3 80       	ldd	r13, Z+3	; 0x03
     b52:	db 01       	movw	r26, r22
     b54:	12 96       	adiw	r26, 0x02	; 2
     b56:	6d 90       	ld	r6, X+
     b58:	7c 90       	ld	r7, X
     b5a:	13 97       	sbiw	r26, 0x03	; 3
     b5c:	24 81       	ldd	r18, Z+4	; 0x04
     b5e:	35 81       	ldd	r19, Z+5	; 0x05
     b60:	46 81       	ldd	r20, Z+6	; 0x06
     b62:	57 81       	ldd	r21, Z+7	; 0x07
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	ed 90       	ld	r14, X+
     b68:	fd 90       	ld	r15, X+
     b6a:	0d 91       	ld	r16, X+
     b6c:	1c 91       	ld	r17, X
     b6e:	17 97       	sbiw	r26, 0x07	; 7
     b70:	c6 01       	movw	r24, r12
     b72:	86 19       	sub	r24, r6
     b74:	97 09       	sbc	r25, r7
     b76:	5c 01       	movw	r10, r24
     b78:	97 ff       	sbrs	r25, 7
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <_fpadd_parts+0xae>
     b7c:	aa 24       	eor	r10, r10
     b7e:	bb 24       	eor	r11, r11
     b80:	a8 1a       	sub	r10, r24
     b82:	b9 0a       	sbc	r11, r25
     b84:	b0 e2       	ldi	r27, 0x20	; 32
     b86:	ab 16       	cp	r10, r27
     b88:	b1 04       	cpc	r11, r1
     b8a:	0c f0       	brlt	.+2      	; 0xb8e <_fpadd_parts+0xb8>
     b8c:	61 c0       	rjmp	.+194    	; 0xc50 <_fpadd_parts+0x17a>
     b8e:	18 16       	cp	r1, r24
     b90:	19 06       	cpc	r1, r25
     b92:	6c f5       	brge	.+90     	; 0xbee <_fpadd_parts+0x118>
     b94:	37 01       	movw	r6, r14
     b96:	48 01       	movw	r8, r16
     b98:	0a 2c       	mov	r0, r10
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <_fpadd_parts+0xce>
     b9c:	96 94       	lsr	r9
     b9e:	87 94       	ror	r8
     ba0:	77 94       	ror	r7
     ba2:	67 94       	ror	r6
     ba4:	0a 94       	dec	r0
     ba6:	d2 f7       	brpl	.-12     	; 0xb9c <_fpadd_parts+0xc6>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	0a 2c       	mov	r0, r10
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <_fpadd_parts+0xe6>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	aa 1f       	adc	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <_fpadd_parts+0xde>
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	a1 09       	sbc	r26, r1
     bc4:	b1 09       	sbc	r27, r1
     bc6:	8e 21       	and	r24, r14
     bc8:	9f 21       	and	r25, r15
     bca:	a0 23       	and	r26, r16
     bcc:	b1 23       	and	r27, r17
     bce:	ee 24       	eor	r14, r14
     bd0:	ff 24       	eor	r15, r15
     bd2:	87 01       	movw	r16, r14
     bd4:	e3 94       	inc	r14
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	a1 05       	cpc	r26, r1
     bda:	b1 05       	cpc	r27, r1
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <_fpadd_parts+0x10e>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	e6 28       	or	r14, r6
     be6:	f7 28       	or	r15, r7
     be8:	08 29       	or	r16, r8
     bea:	19 29       	or	r17, r9
     bec:	3c c0       	rjmp	.+120    	; 0xc66 <_fpadd_parts+0x190>
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	d1 f1       	breq	.+116    	; 0xc66 <_fpadd_parts+0x190>
     bf2:	ca 0c       	add	r12, r10
     bf4:	db 1c       	adc	r13, r11
     bf6:	39 01       	movw	r6, r18
     bf8:	4a 01       	movw	r8, r20
     bfa:	0a 2c       	mov	r0, r10
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <_fpadd_parts+0x130>
     bfe:	96 94       	lsr	r9
     c00:	87 94       	ror	r8
     c02:	77 94       	ror	r7
     c04:	67 94       	ror	r6
     c06:	0a 94       	dec	r0
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <_fpadd_parts+0x128>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	0a 2c       	mov	r0, r10
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <_fpadd_parts+0x148>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	0a 94       	dec	r0
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <_fpadd_parts+0x140>
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	a1 09       	sbc	r26, r1
     c26:	b1 09       	sbc	r27, r1
     c28:	82 23       	and	r24, r18
     c2a:	93 23       	and	r25, r19
     c2c:	a4 23       	and	r26, r20
     c2e:	b5 23       	and	r27, r21
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	a1 05       	cpc	r26, r1
     c3c:	b1 05       	cpc	r27, r1
     c3e:	19 f4       	brne	.+6      	; 0xc46 <_fpadd_parts+0x170>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	26 29       	or	r18, r6
     c48:	37 29       	or	r19, r7
     c4a:	48 29       	or	r20, r8
     c4c:	59 29       	or	r21, r9
     c4e:	0b c0       	rjmp	.+22     	; 0xc66 <_fpadd_parts+0x190>
     c50:	6c 14       	cp	r6, r12
     c52:	7d 04       	cpc	r7, r13
     c54:	24 f4       	brge	.+8      	; 0xc5e <_fpadd_parts+0x188>
     c56:	ee 24       	eor	r14, r14
     c58:	ff 24       	eor	r15, r15
     c5a:	87 01       	movw	r16, r14
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <_fpadd_parts+0x190>
     c5e:	63 01       	movw	r12, r6
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a9 01       	movw	r20, r18
     c66:	81 81       	ldd	r24, Z+1	; 0x01
     c68:	fb 01       	movw	r30, r22
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	89 17       	cp	r24, r25
     c6e:	09 f4       	brne	.+2      	; 0xc72 <_fpadd_parts+0x19c>
     c70:	45 c0       	rjmp	.+138    	; 0xcfc <_fpadd_parts+0x226>
     c72:	88 23       	and	r24, r24
     c74:	49 f0       	breq	.+18     	; 0xc88 <_fpadd_parts+0x1b2>
     c76:	d8 01       	movw	r26, r16
     c78:	c7 01       	movw	r24, r14
     c7a:	82 1b       	sub	r24, r18
     c7c:	93 0b       	sbc	r25, r19
     c7e:	a4 0b       	sbc	r26, r20
     c80:	b5 0b       	sbc	r27, r21
     c82:	9c 01       	movw	r18, r24
     c84:	ad 01       	movw	r20, r26
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <_fpadd_parts+0x1ba>
     c88:	2e 19       	sub	r18, r14
     c8a:	3f 09       	sbc	r19, r15
     c8c:	40 0b       	sbc	r20, r16
     c8e:	51 0b       	sbc	r21, r17
     c90:	57 fd       	sbrc	r21, 7
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <_fpadd_parts+0x1c6>
     c94:	19 82       	std	Y+1, r1	; 0x01
     c96:	ca 82       	std	Y+2, r12	; 0x02
     c98:	db 82       	std	Y+3, r13	; 0x03
     c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <_fpadd_parts+0x1dc>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	ca 82       	std	Y+2, r12	; 0x02
     ca2:	db 82       	std	Y+3, r13	; 0x03
     ca4:	50 95       	com	r21
     ca6:	40 95       	com	r20
     ca8:	30 95       	com	r19
     caa:	21 95       	neg	r18
     cac:	3f 4f       	sbci	r19, 0xFF	; 255
     cae:	4f 4f       	sbci	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	2c 83       	std	Y+4, r18	; 0x04
     cb4:	3d 83       	std	Y+5, r19	; 0x05
     cb6:	4e 83       	std	Y+6, r20	; 0x06
     cb8:	5f 83       	std	Y+7, r21	; 0x07
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <_fpadd_parts+0x200>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	8c 83       	std	Y+4, r24	; 0x04
     cc6:	9d 83       	std	Y+5, r25	; 0x05
     cc8:	ae 83       	std	Y+6, r26	; 0x06
     cca:	bf 83       	std	Y+7, r27	; 0x07
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	9b 81       	ldd	r25, Y+3	; 0x03
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	9b 83       	std	Y+3, r25	; 0x03
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	ae 81       	ldd	r26, Y+6	; 0x06
     cdc:	bf 81       	ldd	r27, Y+7	; 0x07
     cde:	9c 01       	movw	r18, r24
     ce0:	ad 01       	movw	r20, r26
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	30 40       	sbci	r19, 0x00	; 0
     ce6:	40 40       	sbci	r20, 0x00	; 0
     ce8:	50 40       	sbci	r21, 0x00	; 0
     cea:	2f 3f       	cpi	r18, 0xFF	; 255
     cec:	ef ef       	ldi	r30, 0xFF	; 255
     cee:	3e 07       	cpc	r19, r30
     cf0:	ef ef       	ldi	r30, 0xFF	; 255
     cf2:	4e 07       	cpc	r20, r30
     cf4:	ef e3       	ldi	r30, 0x3F	; 63
     cf6:	5e 07       	cpc	r21, r30
     cf8:	08 f3       	brcs	.-62     	; 0xcbc <_fpadd_parts+0x1e6>
     cfa:	0b c0       	rjmp	.+22     	; 0xd12 <_fpadd_parts+0x23c>
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	ca 82       	std	Y+2, r12	; 0x02
     d00:	db 82       	std	Y+3, r13	; 0x03
     d02:	2e 0d       	add	r18, r14
     d04:	3f 1d       	adc	r19, r15
     d06:	40 1f       	adc	r20, r16
     d08:	51 1f       	adc	r21, r17
     d0a:	2c 83       	std	Y+4, r18	; 0x04
     d0c:	3d 83       	std	Y+5, r19	; 0x05
     d0e:	4e 83       	std	Y+6, r20	; 0x06
     d10:	5f 83       	std	Y+7, r21	; 0x07
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	88 83       	st	Y, r24
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	4e 81       	ldd	r20, Y+6	; 0x06
     d1c:	5f 81       	ldd	r21, Y+7	; 0x07
     d1e:	57 ff       	sbrs	r21, 7
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <_fpadd_parts+0x286>
     d22:	da 01       	movw	r26, r20
     d24:	c9 01       	movw	r24, r18
     d26:	81 70       	andi	r24, 0x01	; 1
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	a0 70       	andi	r26, 0x00	; 0
     d2c:	b0 70       	andi	r27, 0x00	; 0
     d2e:	56 95       	lsr	r21
     d30:	47 95       	ror	r20
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	82 2b       	or	r24, r18
     d38:	93 2b       	or	r25, r19
     d3a:	a4 2b       	or	r26, r20
     d3c:	b5 2b       	or	r27, r21
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	9d 83       	std	Y+5, r25	; 0x05
     d42:	ae 83       	std	Y+6, r26	; 0x06
     d44:	bf 83       	std	Y+7, r27	; 0x07
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	8a 83       	std	Y+2, r24	; 0x02
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <_fpadd_parts+0x286>
     d52:	e0 e0       	ldi	r30, 0x00	; 0
     d54:	f0 e2       	ldi	r31, 0x20	; 32
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <_fpadd_parts+0x288>
     d58:	fb 01       	movw	r30, r22
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <_fpadd_parts+0x288>
     d5c:	fe 01       	movw	r30, r28
     d5e:	cf 01       	movw	r24, r30
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	ee e0       	ldi	r30, 0x0E	; 14
     d66:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__epilogue_restores__+0x8>

00000d6a <__addsf3>:
     d6a:	a0 e2       	ldi	r26, 0x20	; 32
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb eb       	ldi	r30, 0xBB	; 187
     d70:	f6 e0       	ldi	r31, 0x06	; 6
     d72:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     d76:	69 83       	std	Y+1, r22	; 0x01
     d78:	7a 83       	std	Y+2, r23	; 0x02
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	2d 83       	std	Y+5, r18	; 0x05
     d80:	3e 83       	std	Y+6, r19	; 0x06
     d82:	4f 83       	std	Y+7, r20	; 0x07
     d84:	58 87       	std	Y+8, r21	; 0x08
     d86:	89 e0       	ldi	r24, 0x09	; 9
     d88:	e8 2e       	mov	r14, r24
     d8a:	f1 2c       	mov	r15, r1
     d8c:	ec 0e       	add	r14, r28
     d8e:	fd 1e       	adc	r15, r29
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	b7 01       	movw	r22, r14
     d96:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     d9a:	8e 01       	movw	r16, r28
     d9c:	0f 5e       	subi	r16, 0xEF	; 239
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	ce 01       	movw	r24, r28
     da2:	05 96       	adiw	r24, 0x05	; 5
     da4:	b8 01       	movw	r22, r16
     da6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     daa:	c7 01       	movw	r24, r14
     dac:	b8 01       	movw	r22, r16
     dae:	ae 01       	movw	r20, r28
     db0:	47 5e       	subi	r20, 0xE7	; 231
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	0e 94 6b 05 	call	0xad6	; 0xad6 <_fpadd_parts>
     db8:	0e 94 0f 0a 	call	0x141e	; 0x141e <__pack_f>
     dbc:	a0 96       	adiw	r28, 0x20	; 32
     dbe:	e6 e0       	ldi	r30, 0x06	; 6
     dc0:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__+0x18>

00000dc4 <__subsf3>:
     dc4:	a0 e2       	ldi	r26, 0x20	; 32
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e8 ee       	ldi	r30, 0xE8	; 232
     dca:	f6 e0       	ldi	r31, 0x06	; 6
     dcc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	2d 83       	std	Y+5, r18	; 0x05
     dda:	3e 83       	std	Y+6, r19	; 0x06
     ddc:	4f 83       	std	Y+7, r20	; 0x07
     dde:	58 87       	std	Y+8, r21	; 0x08
     de0:	8e 01       	movw	r16, r28
     de2:	07 5f       	subi	r16, 0xF7	; 247
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	b8 01       	movw	r22, r16
     dec:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     df0:	91 e1       	ldi	r25, 0x11	; 17
     df2:	e9 2e       	mov	r14, r25
     df4:	f1 2c       	mov	r15, r1
     df6:	ec 0e       	add	r14, r28
     df8:	fd 1e       	adc	r15, r29
     dfa:	ce 01       	movw	r24, r28
     dfc:	05 96       	adiw	r24, 0x05	; 5
     dfe:	b7 01       	movw	r22, r14
     e00:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     e04:	8a 89       	ldd	r24, Y+18	; 0x12
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	89 27       	eor	r24, r25
     e0a:	8a 8b       	std	Y+18, r24	; 0x12
     e0c:	c8 01       	movw	r24, r16
     e0e:	b7 01       	movw	r22, r14
     e10:	ae 01       	movw	r20, r28
     e12:	47 5e       	subi	r20, 0xE7	; 231
     e14:	5f 4f       	sbci	r21, 0xFF	; 255
     e16:	0e 94 6b 05 	call	0xad6	; 0xad6 <_fpadd_parts>
     e1a:	0e 94 0f 0a 	call	0x141e	; 0x141e <__pack_f>
     e1e:	a0 96       	adiw	r28, 0x20	; 32
     e20:	e6 e0       	ldi	r30, 0x06	; 6
     e22:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__+0x18>

00000e26 <__mulsf3>:
     e26:	a0 e2       	ldi	r26, 0x20	; 32
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 e1       	ldi	r30, 0x19	; 25
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
     e32:	69 83       	std	Y+1, r22	; 0x01
     e34:	7a 83       	std	Y+2, r23	; 0x02
     e36:	8b 83       	std	Y+3, r24	; 0x03
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	2d 83       	std	Y+5, r18	; 0x05
     e3c:	3e 83       	std	Y+6, r19	; 0x06
     e3e:	4f 83       	std	Y+7, r20	; 0x07
     e40:	58 87       	std	Y+8, r21	; 0x08
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	be 01       	movw	r22, r28
     e48:	67 5f       	subi	r22, 0xF7	; 247
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     e50:	ce 01       	movw	r24, r28
     e52:	05 96       	adiw	r24, 0x05	; 5
     e54:	be 01       	movw	r22, r28
     e56:	6f 5e       	subi	r22, 0xEF	; 239
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
     e5e:	99 85       	ldd	r25, Y+9	; 0x09
     e60:	92 30       	cpi	r25, 0x02	; 2
     e62:	78 f0       	brcs	.+30     	; 0xe82 <__mulsf3+0x5c>
     e64:	89 89       	ldd	r24, Y+17	; 0x11
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	c0 f0       	brcs	.+48     	; 0xe9a <__mulsf3+0x74>
     e6a:	94 30       	cpi	r25, 0x04	; 4
     e6c:	19 f4       	brne	.+6      	; 0xe74 <__mulsf3+0x4e>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	41 f4       	brne	.+16     	; 0xe82 <__mulsf3+0x5c>
     e72:	cb c0       	rjmp	.+406    	; 0x100a <__mulsf3+0x1e4>
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	19 f4       	brne	.+6      	; 0xe7e <__mulsf3+0x58>
     e78:	92 30       	cpi	r25, 0x02	; 2
     e7a:	79 f4       	brne	.+30     	; 0xe9a <__mulsf3+0x74>
     e7c:	c6 c0       	rjmp	.+396    	; 0x100a <__mulsf3+0x1e4>
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	51 f4       	brne	.+20     	; 0xe96 <__mulsf3+0x70>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	2a 85       	ldd	r18, Y+10	; 0x0a
     e86:	9a 89       	ldd	r25, Y+18	; 0x12
     e88:	29 17       	cp	r18, r25
     e8a:	09 f4       	brne	.+2      	; 0xe8e <__mulsf3+0x68>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	8a 87       	std	Y+10, r24	; 0x0a
     e90:	ce 01       	movw	r24, r28
     e92:	09 96       	adiw	r24, 0x09	; 9
     e94:	bc c0       	rjmp	.+376    	; 0x100e <__mulsf3+0x1e8>
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	51 f4       	brne	.+20     	; 0xeae <__mulsf3+0x88>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	2a 85       	ldd	r18, Y+10	; 0x0a
     e9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ea0:	29 17       	cp	r18, r25
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__mulsf3+0x80>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	8a 8b       	std	Y+18, r24	; 0x12
     ea8:	ce 01       	movw	r24, r28
     eaa:	41 96       	adiw	r24, 0x11	; 17
     eac:	b0 c0       	rjmp	.+352    	; 0x100e <__mulsf3+0x1e8>
     eae:	6d 84       	ldd	r6, Y+13	; 0x0d
     eb0:	7e 84       	ldd	r7, Y+14	; 0x0e
     eb2:	8f 84       	ldd	r8, Y+15	; 0x0f
     eb4:	98 88       	ldd	r9, Y+16	; 0x10
     eb6:	ed 88       	ldd	r14, Y+21	; 0x15
     eb8:	fe 88       	ldd	r15, Y+22	; 0x16
     eba:	0f 89       	ldd	r16, Y+23	; 0x17
     ebc:	18 8d       	ldd	r17, Y+24	; 0x18
     ebe:	e0 e2       	ldi	r30, 0x20	; 32
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	dc 01       	movw	r26, r24
     ec8:	aa 24       	eor	r10, r10
     eca:	bb 24       	eor	r11, r11
     ecc:	65 01       	movw	r12, r10
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	b3 01       	movw	r22, r6
     ed6:	61 70       	andi	r22, 0x01	; 1
     ed8:	70 70       	andi	r23, 0x00	; 0
     eda:	61 15       	cp	r22, r1
     edc:	71 05       	cpc	r23, r1
     ede:	d1 f0       	breq	.+52     	; 0xf14 <__mulsf3+0xee>
     ee0:	2e 0d       	add	r18, r14
     ee2:	3f 1d       	adc	r19, r15
     ee4:	40 1f       	adc	r20, r16
     ee6:	51 1f       	adc	r21, r17
     ee8:	15 01       	movw	r2, r10
     eea:	26 01       	movw	r4, r12
     eec:	28 0e       	add	r2, r24
     eee:	39 1e       	adc	r3, r25
     ef0:	4a 1e       	adc	r4, r26
     ef2:	5b 1e       	adc	r5, r27
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	2e 15       	cp	r18, r14
     efe:	3f 05       	cpc	r19, r15
     f00:	40 07       	cpc	r20, r16
     f02:	51 07       	cpc	r21, r17
     f04:	18 f0       	brcs	.+6      	; 0xf0c <__mulsf3+0xe6>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	dc 01       	movw	r26, r24
     f0c:	82 0d       	add	r24, r2
     f0e:	93 1d       	adc	r25, r3
     f10:	a4 1d       	adc	r26, r4
     f12:	b5 1d       	adc	r27, r5
     f14:	aa 0c       	add	r10, r10
     f16:	bb 1c       	adc	r11, r11
     f18:	cc 1c       	adc	r12, r12
     f1a:	dd 1c       	adc	r13, r13
     f1c:	17 ff       	sbrs	r17, 7
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <__mulsf3+0x10c>
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	26 2e       	mov	r2, r22
     f24:	31 2c       	mov	r3, r1
     f26:	41 2c       	mov	r4, r1
     f28:	51 2c       	mov	r5, r1
     f2a:	a2 28       	or	r10, r2
     f2c:	b3 28       	or	r11, r3
     f2e:	c4 28       	or	r12, r4
     f30:	d5 28       	or	r13, r5
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	49 f0       	breq	.+18     	; 0xf48 <__mulsf3+0x122>
     f36:	ee 0c       	add	r14, r14
     f38:	ff 1c       	adc	r15, r15
     f3a:	00 1f       	adc	r16, r16
     f3c:	11 1f       	adc	r17, r17
     f3e:	96 94       	lsr	r9
     f40:	87 94       	ror	r8
     f42:	77 94       	ror	r7
     f44:	67 94       	ror	r6
     f46:	c6 cf       	rjmp	.-116    	; 0xed4 <__mulsf3+0xae>
     f48:	6b 89       	ldd	r22, Y+19	; 0x13
     f4a:	7c 89       	ldd	r23, Y+20	; 0x14
     f4c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f4e:	fc 85       	ldd	r31, Y+12	; 0x0c
     f50:	6e 0f       	add	r22, r30
     f52:	7f 1f       	adc	r23, r31
     f54:	6e 5f       	subi	r22, 0xFE	; 254
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	6b 8f       	std	Y+27, r22	; 0x1b
     f5a:	7c 8f       	std	Y+28, r23	; 0x1c
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	ea 85       	ldd	r30, Y+10	; 0x0a
     f60:	7a 89       	ldd	r23, Y+18	; 0x12
     f62:	e7 17       	cp	r30, r23
     f64:	09 f4       	brne	.+2      	; 0xf68 <__mulsf3+0x142>
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	6a 8f       	std	Y+26, r22	; 0x1a
     f6a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f6c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <__mulsf3+0x16a>
     f70:	fc 01       	movw	r30, r24
     f72:	e1 70       	andi	r30, 0x01	; 1
     f74:	f0 70       	andi	r31, 0x00	; 0
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	29 f0       	breq	.+10     	; 0xf84 <__mulsf3+0x15e>
     f7a:	56 95       	lsr	r21
     f7c:	47 95       	ror	r20
     f7e:	37 95       	ror	r19
     f80:	27 95       	ror	r18
     f82:	50 68       	ori	r21, 0x80	; 128
     f84:	b6 95       	lsr	r27
     f86:	a7 95       	ror	r26
     f88:	97 95       	ror	r25
     f8a:	87 95       	ror	r24
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	b7 fd       	sbrc	r27, 7
     f92:	ee cf       	rjmp	.-36     	; 0xf70 <__mulsf3+0x14a>
     f94:	0c c0       	rjmp	.+24     	; 0xfae <__mulsf3+0x188>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	aa 1f       	adc	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	57 fd       	sbrc	r21, 7
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	22 0f       	add	r18, r18
     fa4:	33 1f       	adc	r19, r19
     fa6:	44 1f       	adc	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	61 50       	subi	r22, 0x01	; 1
     fac:	70 40       	sbci	r23, 0x00	; 0
     fae:	80 30       	cpi	r24, 0x00	; 0
     fb0:	e0 e0       	ldi	r30, 0x00	; 0
     fb2:	9e 07       	cpc	r25, r30
     fb4:	e0 e0       	ldi	r30, 0x00	; 0
     fb6:	ae 07       	cpc	r26, r30
     fb8:	e0 e4       	ldi	r30, 0x40	; 64
     fba:	be 07       	cpc	r27, r30
     fbc:	60 f3       	brcs	.-40     	; 0xf96 <__mulsf3+0x170>
     fbe:	6b 8f       	std	Y+27, r22	; 0x1b
     fc0:	7c 8f       	std	Y+28, r23	; 0x1c
     fc2:	6f e7       	ldi	r22, 0x7F	; 127
     fc4:	e6 2e       	mov	r14, r22
     fc6:	f1 2c       	mov	r15, r1
     fc8:	01 2d       	mov	r16, r1
     fca:	11 2d       	mov	r17, r1
     fcc:	e8 22       	and	r14, r24
     fce:	f9 22       	and	r15, r25
     fd0:	0a 23       	and	r16, r26
     fd2:	1b 23       	and	r17, r27
     fd4:	60 e4       	ldi	r22, 0x40	; 64
     fd6:	e6 16       	cp	r14, r22
     fd8:	f1 04       	cpc	r15, r1
     fda:	01 05       	cpc	r16, r1
     fdc:	11 05       	cpc	r17, r1
     fde:	61 f4       	brne	.+24     	; 0xff8 <__mulsf3+0x1d2>
     fe0:	87 fd       	sbrc	r24, 7
     fe2:	0a c0       	rjmp	.+20     	; 0xff8 <__mulsf3+0x1d2>
     fe4:	21 15       	cp	r18, r1
     fe6:	31 05       	cpc	r19, r1
     fe8:	41 05       	cpc	r20, r1
     fea:	51 05       	cpc	r21, r1
     fec:	29 f0       	breq	.+10     	; 0xff8 <__mulsf3+0x1d2>
     fee:	80 5c       	subi	r24, 0xC0	; 192
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	af 4f       	sbci	r26, 0xFF	; 255
     ff4:	bf 4f       	sbci	r27, 0xFF	; 255
     ff6:	80 78       	andi	r24, 0x80	; 128
     ff8:	8d 8f       	std	Y+29, r24	; 0x1d
     ffa:	9e 8f       	std	Y+30, r25	; 0x1e
     ffc:	af 8f       	std	Y+31, r26	; 0x1f
     ffe:	b8 a3       	std	Y+32, r27	; 0x20
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	89 8f       	std	Y+25, r24	; 0x19
    1004:	ce 01       	movw	r24, r28
    1006:	49 96       	adiw	r24, 0x19	; 25
    1008:	02 c0       	rjmp	.+4      	; 0x100e <__mulsf3+0x1e8>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e2       	ldi	r25, 0x20	; 32
    100e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__pack_f>
    1012:	a0 96       	adiw	r28, 0x20	; 32
    1014:	e2 e1       	ldi	r30, 0x12	; 18
    1016:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__epilogue_restores__>

0000101a <__divsf3>:
    101a:	a8 e1       	ldi	r26, 0x18	; 24
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e1       	ldi	r30, 0x13	; 19
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__prologue_saves__+0x10>
    1026:	69 83       	std	Y+1, r22	; 0x01
    1028:	7a 83       	std	Y+2, r23	; 0x02
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	2d 83       	std	Y+5, r18	; 0x05
    1030:	3e 83       	std	Y+6, r19	; 0x06
    1032:	4f 83       	std	Y+7, r20	; 0x07
    1034:	58 87       	std	Y+8, r21	; 0x08
    1036:	8e 01       	movw	r16, r28
    1038:	07 5f       	subi	r16, 0xF7	; 247
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	b8 01       	movw	r22, r16
    1042:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
    1046:	81 e1       	ldi	r24, 0x11	; 17
    1048:	e8 2e       	mov	r14, r24
    104a:	f1 2c       	mov	r15, r1
    104c:	ec 0e       	add	r14, r28
    104e:	fd 1e       	adc	r15, r29
    1050:	ce 01       	movw	r24, r28
    1052:	05 96       	adiw	r24, 0x05	; 5
    1054:	b7 01       	movw	r22, r14
    1056:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
    105a:	99 85       	ldd	r25, Y+9	; 0x09
    105c:	92 30       	cpi	r25, 0x02	; 2
    105e:	08 f4       	brcc	.+2      	; 0x1062 <__divsf3+0x48>
    1060:	83 c0       	rjmp	.+262    	; 0x1168 <__divsf3+0x14e>
    1062:	89 89       	ldd	r24, Y+17	; 0x11
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	08 f4       	brcc	.+2      	; 0x106a <__divsf3+0x50>
    1068:	7b c0       	rjmp	.+246    	; 0x1160 <__divsf3+0x146>
    106a:	2a 85       	ldd	r18, Y+10	; 0x0a
    106c:	3a 89       	ldd	r19, Y+18	; 0x12
    106e:	23 27       	eor	r18, r19
    1070:	2a 87       	std	Y+10, r18	; 0x0a
    1072:	94 30       	cpi	r25, 0x04	; 4
    1074:	11 f0       	breq	.+4      	; 0x107a <__divsf3+0x60>
    1076:	92 30       	cpi	r25, 0x02	; 2
    1078:	21 f4       	brne	.+8      	; 0x1082 <__divsf3+0x68>
    107a:	98 17       	cp	r25, r24
    107c:	09 f0       	breq	.+2      	; 0x1080 <__divsf3+0x66>
    107e:	6c c0       	rjmp	.+216    	; 0x1158 <__divsf3+0x13e>
    1080:	71 c0       	rjmp	.+226    	; 0x1164 <__divsf3+0x14a>
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	39 f4       	brne	.+14     	; 0x1094 <__divsf3+0x7a>
    1086:	1d 86       	std	Y+13, r1	; 0x0d
    1088:	1e 86       	std	Y+14, r1	; 0x0e
    108a:	1f 86       	std	Y+15, r1	; 0x0f
    108c:	18 8a       	std	Y+16, r1	; 0x10
    108e:	1b 86       	std	Y+11, r1	; 0x0b
    1090:	1c 86       	std	Y+12, r1	; 0x0c
    1092:	6a c0       	rjmp	.+212    	; 0x1168 <__divsf3+0x14e>
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	19 f4       	brne	.+6      	; 0x109e <__divsf3+0x84>
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	89 87       	std	Y+9, r24	; 0x09
    109c:	65 c0       	rjmp	.+202    	; 0x1168 <__divsf3+0x14e>
    109e:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a2:	2b 89       	ldd	r18, Y+19	; 0x13
    10a4:	3c 89       	ldd	r19, Y+20	; 0x14
    10a6:	82 1b       	sub	r24, r18
    10a8:	93 0b       	sbc	r25, r19
    10aa:	8b 87       	std	Y+11, r24	; 0x0b
    10ac:	9c 87       	std	Y+12, r25	; 0x0c
    10ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    10b0:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b2:	4f 85       	ldd	r20, Y+15	; 0x0f
    10b4:	58 89       	ldd	r21, Y+16	; 0x10
    10b6:	ed 88       	ldd	r14, Y+21	; 0x15
    10b8:	fe 88       	ldd	r15, Y+22	; 0x16
    10ba:	0f 89       	ldd	r16, Y+23	; 0x17
    10bc:	18 8d       	ldd	r17, Y+24	; 0x18
    10be:	2e 15       	cp	r18, r14
    10c0:	3f 05       	cpc	r19, r15
    10c2:	40 07       	cpc	r20, r16
    10c4:	51 07       	cpc	r21, r17
    10c6:	38 f4       	brcc	.+14     	; 0x10d6 <__divsf3+0xbc>
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	44 1f       	adc	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	8b 87       	std	Y+11, r24	; 0x0b
    10d4:	9c 87       	std	Y+12, r25	; 0x0c
    10d6:	6f e1       	ldi	r22, 0x1F	; 31
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	a1 2c       	mov	r10, r1
    10dc:	b1 2c       	mov	r11, r1
    10de:	c1 2c       	mov	r12, r1
    10e0:	a0 e4       	ldi	r26, 0x40	; 64
    10e2:	da 2e       	mov	r13, r26
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	dc 01       	movw	r26, r24
    10ea:	2e 15       	cp	r18, r14
    10ec:	3f 05       	cpc	r19, r15
    10ee:	40 07       	cpc	r20, r16
    10f0:	51 07       	cpc	r21, r17
    10f2:	40 f0       	brcs	.+16     	; 0x1104 <__divsf3+0xea>
    10f4:	8a 29       	or	r24, r10
    10f6:	9b 29       	or	r25, r11
    10f8:	ac 29       	or	r26, r12
    10fa:	bd 29       	or	r27, r13
    10fc:	2e 19       	sub	r18, r14
    10fe:	3f 09       	sbc	r19, r15
    1100:	40 0b       	sbc	r20, r16
    1102:	51 0b       	sbc	r21, r17
    1104:	d6 94       	lsr	r13
    1106:	c7 94       	ror	r12
    1108:	b7 94       	ror	r11
    110a:	a7 94       	ror	r10
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	44 1f       	adc	r20, r20
    1112:	55 1f       	adc	r21, r21
    1114:	61 50       	subi	r22, 0x01	; 1
    1116:	70 40       	sbci	r23, 0x00	; 0
    1118:	41 f7       	brne	.-48     	; 0x10ea <__divsf3+0xd0>
    111a:	6f e7       	ldi	r22, 0x7F	; 127
    111c:	e6 2e       	mov	r14, r22
    111e:	f1 2c       	mov	r15, r1
    1120:	01 2d       	mov	r16, r1
    1122:	11 2d       	mov	r17, r1
    1124:	e8 22       	and	r14, r24
    1126:	f9 22       	and	r15, r25
    1128:	0a 23       	and	r16, r26
    112a:	1b 23       	and	r17, r27
    112c:	60 e4       	ldi	r22, 0x40	; 64
    112e:	e6 16       	cp	r14, r22
    1130:	f1 04       	cpc	r15, r1
    1132:	01 05       	cpc	r16, r1
    1134:	11 05       	cpc	r17, r1
    1136:	61 f4       	brne	.+24     	; 0x1150 <__divsf3+0x136>
    1138:	87 fd       	sbrc	r24, 7
    113a:	0a c0       	rjmp	.+20     	; 0x1150 <__divsf3+0x136>
    113c:	21 15       	cp	r18, r1
    113e:	31 05       	cpc	r19, r1
    1140:	41 05       	cpc	r20, r1
    1142:	51 05       	cpc	r21, r1
    1144:	29 f0       	breq	.+10     	; 0x1150 <__divsf3+0x136>
    1146:	80 5c       	subi	r24, 0xC0	; 192
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	af 4f       	sbci	r26, 0xFF	; 255
    114c:	bf 4f       	sbci	r27, 0xFF	; 255
    114e:	80 78       	andi	r24, 0x80	; 128
    1150:	8d 87       	std	Y+13, r24	; 0x0d
    1152:	9e 87       	std	Y+14, r25	; 0x0e
    1154:	af 87       	std	Y+15, r26	; 0x0f
    1156:	b8 8b       	std	Y+16, r27	; 0x10
    1158:	8e 01       	movw	r16, r28
    115a:	07 5f       	subi	r16, 0xF7	; 247
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <__divsf3+0x14e>
    1160:	87 01       	movw	r16, r14
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <__divsf3+0x14e>
    1164:	00 e0       	ldi	r16, 0x00	; 0
    1166:	10 e2       	ldi	r17, 0x20	; 32
    1168:	c8 01       	movw	r24, r16
    116a:	0e 94 0f 0a 	call	0x141e	; 0x141e <__pack_f>
    116e:	68 96       	adiw	r28, 0x18	; 24
    1170:	ea e0       	ldi	r30, 0x0A	; 10
    1172:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x10>

00001176 <__gesf2>:
    1176:	a8 e1       	ldi	r26, 0x18	; 24
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 ec       	ldi	r30, 0xC1	; 193
    117c:	f8 e0       	ldi	r31, 0x08	; 8
    117e:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
    1182:	69 83       	std	Y+1, r22	; 0x01
    1184:	7a 83       	std	Y+2, r23	; 0x02
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	2d 83       	std	Y+5, r18	; 0x05
    118c:	3e 83       	std	Y+6, r19	; 0x06
    118e:	4f 83       	std	Y+7, r20	; 0x07
    1190:	58 87       	std	Y+8, r21	; 0x08
    1192:	8e 01       	movw	r16, r28
    1194:	07 5f       	subi	r16, 0xF7	; 247
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	b8 01       	movw	r22, r16
    119e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
    11a2:	81 e1       	ldi	r24, 0x11	; 17
    11a4:	e8 2e       	mov	r14, r24
    11a6:	f1 2c       	mov	r15, r1
    11a8:	ec 0e       	add	r14, r28
    11aa:	fd 1e       	adc	r15, r29
    11ac:	ce 01       	movw	r24, r28
    11ae:	05 96       	adiw	r24, 0x05	; 5
    11b0:	b7 01       	movw	r22, r14
    11b2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	40 f0       	brcs	.+16     	; 0x11cc <__gesf2+0x56>
    11bc:	89 89       	ldd	r24, Y+17	; 0x11
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	28 f0       	brcs	.+10     	; 0x11cc <__gesf2+0x56>
    11c2:	c8 01       	movw	r24, r16
    11c4:	b7 01       	movw	r22, r14
    11c6:	0e 94 46 0b 	call	0x168c	; 0x168c <__fpcmp_parts_f>
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <__gesf2+0x58>
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	68 96       	adiw	r28, 0x18	; 24
    11d0:	e6 e0       	ldi	r30, 0x06	; 6
    11d2:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__+0x18>

000011d6 <__fixsfsi>:
    11d6:	ac e0       	ldi	r26, 0x0C	; 12
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 ef       	ldi	r30, 0xF1	; 241
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__prologue_saves__+0x20>
    11e2:	69 83       	std	Y+1, r22	; 0x01
    11e4:	7a 83       	std	Y+2, r23	; 0x02
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	be 01       	movw	r22, r28
    11f0:	6b 5f       	subi	r22, 0xFB	; 251
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__unpack_f>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	81 f1       	breq	.+96     	; 0x125e <__fixsfsi+0x88>
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	70 f1       	brcs	.+92     	; 0x125e <__fixsfsi+0x88>
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	21 f4       	brne	.+8      	; 0x120e <__fixsfsi+0x38>
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	88 23       	and	r24, r24
    120a:	69 f1       	breq	.+90     	; 0x1266 <__fixsfsi+0x90>
    120c:	0a c0       	rjmp	.+20     	; 0x1222 <__fixsfsi+0x4c>
    120e:	2f 81       	ldd	r18, Y+7	; 0x07
    1210:	38 85       	ldd	r19, Y+8	; 0x08
    1212:	37 fd       	sbrc	r19, 7
    1214:	24 c0       	rjmp	.+72     	; 0x125e <__fixsfsi+0x88>
    1216:	6e 81       	ldd	r22, Y+6	; 0x06
    1218:	2f 31       	cpi	r18, 0x1F	; 31
    121a:	31 05       	cpc	r19, r1
    121c:	3c f0       	brlt	.+14     	; 0x122c <__fixsfsi+0x56>
    121e:	66 23       	and	r22, r22
    1220:	11 f1       	breq	.+68     	; 0x1266 <__fixsfsi+0x90>
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e8       	ldi	r21, 0x80	; 128
    122a:	21 c0       	rjmp	.+66     	; 0x126e <__fixsfsi+0x98>
    122c:	8e e1       	ldi	r24, 0x1E	; 30
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	82 1b       	sub	r24, r18
    1232:	93 0b       	sbc	r25, r19
    1234:	29 85       	ldd	r18, Y+9	; 0x09
    1236:	3a 85       	ldd	r19, Y+10	; 0x0a
    1238:	4b 85       	ldd	r20, Y+11	; 0x0b
    123a:	5c 85       	ldd	r21, Y+12	; 0x0c
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <__fixsfsi+0x70>
    123e:	56 95       	lsr	r21
    1240:	47 95       	ror	r20
    1242:	37 95       	ror	r19
    1244:	27 95       	ror	r18
    1246:	8a 95       	dec	r24
    1248:	d2 f7       	brpl	.-12     	; 0x123e <__fixsfsi+0x68>
    124a:	66 23       	and	r22, r22
    124c:	81 f0       	breq	.+32     	; 0x126e <__fixsfsi+0x98>
    124e:	50 95       	com	r21
    1250:	40 95       	com	r20
    1252:	30 95       	com	r19
    1254:	21 95       	neg	r18
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	4f 4f       	sbci	r20, 0xFF	; 255
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	08 c0       	rjmp	.+16     	; 0x126e <__fixsfsi+0x98>
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	a9 01       	movw	r20, r18
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__fixsfsi+0x98>
    1266:	2f ef       	ldi	r18, 0xFF	; 255
    1268:	3f ef       	ldi	r19, 0xFF	; 255
    126a:	4f ef       	ldi	r20, 0xFF	; 255
    126c:	5f e7       	ldi	r21, 0x7F	; 127
    126e:	b9 01       	movw	r22, r18
    1270:	ca 01       	movw	r24, r20
    1272:	2c 96       	adiw	r28, 0x0c	; 12
    1274:	e2 e0       	ldi	r30, 0x02	; 2
    1276:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__epilogue_restores__+0x20>

0000127a <__floatunsisf>:
    127a:	a8 e0       	ldi	r26, 0x08	; 8
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e3 e4       	ldi	r30, 0x43	; 67
    1280:	f9 e0       	ldi	r31, 0x09	; 9
    1282:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__prologue_saves__+0x14>
    1286:	7b 01       	movw	r14, r22
    1288:	8c 01       	movw	r16, r24
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	61 15       	cp	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	81 05       	cpc	r24, r1
    1292:	91 05       	cpc	r25, r1
    1294:	19 f4       	brne	.+6      	; 0x129c <__floatunsisf+0x22>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	5f c0       	rjmp	.+190    	; 0x135a <__floatunsisf+0xe0>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	8e e1       	ldi	r24, 0x1E	; 30
    12a2:	c8 2e       	mov	r12, r24
    12a4:	d1 2c       	mov	r13, r1
    12a6:	cb 82       	std	Y+3, r12	; 0x03
    12a8:	dc 82       	std	Y+4, r13	; 0x04
    12aa:	ed 82       	std	Y+5, r14	; 0x05
    12ac:	fe 82       	std	Y+6, r15	; 0x06
    12ae:	0f 83       	std	Y+7, r16	; 0x07
    12b0:	18 87       	std	Y+8, r17	; 0x08
    12b2:	c8 01       	movw	r24, r16
    12b4:	b7 01       	movw	r22, r14
    12b6:	0e 94 b5 09 	call	0x136a	; 0x136a <__clzsi2>
    12ba:	fc 01       	movw	r30, r24
    12bc:	31 97       	sbiw	r30, 0x01	; 1
    12be:	f7 ff       	sbrs	r31, 7
    12c0:	3a c0       	rjmp	.+116    	; 0x1336 <__floatunsisf+0xbc>
    12c2:	aa 27       	eor	r26, r26
    12c4:	bb 27       	eor	r27, r27
    12c6:	ae 1b       	sub	r26, r30
    12c8:	bf 0b       	sbc	r27, r31
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0a 2e       	mov	r0, r26
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <__floatunsisf+0x64>
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	44 1f       	adc	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	0a 94       	dec	r0
    12e0:	d2 f7       	brpl	.-12     	; 0x12d6 <__floatunsisf+0x5c>
    12e2:	21 50       	subi	r18, 0x01	; 1
    12e4:	30 40       	sbci	r19, 0x00	; 0
    12e6:	40 40       	sbci	r20, 0x00	; 0
    12e8:	50 40       	sbci	r21, 0x00	; 0
    12ea:	2e 21       	and	r18, r14
    12ec:	3f 21       	and	r19, r15
    12ee:	40 23       	and	r20, r16
    12f0:	51 23       	and	r21, r17
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	21 15       	cp	r18, r1
    12fc:	31 05       	cpc	r19, r1
    12fe:	41 05       	cpc	r20, r1
    1300:	51 05       	cpc	r21, r1
    1302:	19 f4       	brne	.+6      	; 0x130a <__floatunsisf+0x90>
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	cb 01       	movw	r24, r22
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <__floatunsisf+0x9a>
    130c:	16 95       	lsr	r17
    130e:	07 95       	ror	r16
    1310:	f7 94       	ror	r15
    1312:	e7 94       	ror	r14
    1314:	aa 95       	dec	r26
    1316:	d2 f7       	brpl	.-12     	; 0x130c <__floatunsisf+0x92>
    1318:	e6 2a       	or	r14, r22
    131a:	f7 2a       	or	r15, r23
    131c:	08 2b       	or	r16, r24
    131e:	19 2b       	or	r17, r25
    1320:	ed 82       	std	Y+5, r14	; 0x05
    1322:	fe 82       	std	Y+6, r15	; 0x06
    1324:	0f 83       	std	Y+7, r16	; 0x07
    1326:	18 87       	std	Y+8, r17	; 0x08
    1328:	8e e1       	ldi	r24, 0x1E	; 30
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	8e 1b       	sub	r24, r30
    132e:	9f 0b       	sbc	r25, r31
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	12 c0       	rjmp	.+36     	; 0x135a <__floatunsisf+0xe0>
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	81 f0       	breq	.+32     	; 0x135a <__floatunsisf+0xe0>
    133a:	0e 2e       	mov	r0, r30
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <__floatunsisf+0xcc>
    133e:	ee 0c       	add	r14, r14
    1340:	ff 1c       	adc	r15, r15
    1342:	00 1f       	adc	r16, r16
    1344:	11 1f       	adc	r17, r17
    1346:	0a 94       	dec	r0
    1348:	d2 f7       	brpl	.-12     	; 0x133e <__floatunsisf+0xc4>
    134a:	ed 82       	std	Y+5, r14	; 0x05
    134c:	fe 82       	std	Y+6, r15	; 0x06
    134e:	0f 83       	std	Y+7, r16	; 0x07
    1350:	18 87       	std	Y+8, r17	; 0x08
    1352:	ce 1a       	sub	r12, r30
    1354:	df 0a       	sbc	r13, r31
    1356:	cb 82       	std	Y+3, r12	; 0x03
    1358:	dc 82       	std	Y+4, r13	; 0x04
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__pack_f>
    1362:	28 96       	adiw	r28, 0x08	; 8
    1364:	e8 e0       	ldi	r30, 0x08	; 8
    1366:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x14>

0000136a <__clzsi2>:
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	7b 01       	movw	r14, r22
    137c:	8c 01       	movw	r16, r24
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	e8 16       	cp	r14, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	f8 06       	cpc	r15, r24
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	08 07       	cpc	r16, r24
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	18 07       	cpc	r17, r24
    138e:	58 f4       	brcc	.+22     	; 0x13a6 <__clzsi2+0x3c>
    1390:	ef ef       	ldi	r30, 0xFF	; 255
    1392:	ee 16       	cp	r14, r30
    1394:	f1 04       	cpc	r15, r1
    1396:	01 05       	cpc	r16, r1
    1398:	11 05       	cpc	r17, r1
    139a:	09 f0       	breq	.+2      	; 0x139e <__clzsi2+0x34>
    139c:	90 f4       	brcc	.+36     	; 0x13c2 <__clzsi2+0x58>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	dc 01       	movw	r26, r24
    13a4:	17 c0       	rjmp	.+46     	; 0x13d4 <__clzsi2+0x6a>
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	ef 16       	cp	r14, r31
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	ff 06       	cpc	r15, r31
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	0f 07       	cpc	r16, r31
    13b2:	f1 e0       	ldi	r31, 0x01	; 1
    13b4:	1f 07       	cpc	r17, r31
    13b6:	50 f4       	brcc	.+20     	; 0x13cc <__clzsi2+0x62>
    13b8:	80 e1       	ldi	r24, 0x10	; 16
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <__clzsi2+0x6a>
    13c2:	88 e0       	ldi	r24, 0x08	; 8
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <__clzsi2+0x6a>
    13cc:	88 e1       	ldi	r24, 0x18	; 24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	20 e2       	ldi	r18, 0x20	; 32
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	28 1b       	sub	r18, r24
    13de:	39 0b       	sbc	r19, r25
    13e0:	4a 0b       	sbc	r20, r26
    13e2:	5b 0b       	sbc	r21, r27
    13e4:	57 01       	movw	r10, r14
    13e6:	68 01       	movw	r12, r16
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__clzsi2+0x88>
    13ea:	d6 94       	lsr	r13
    13ec:	c7 94       	ror	r12
    13ee:	b7 94       	ror	r11
    13f0:	a7 94       	ror	r10
    13f2:	8a 95       	dec	r24
    13f4:	d2 f7       	brpl	.-12     	; 0x13ea <__clzsi2+0x80>
    13f6:	d6 01       	movw	r26, r12
    13f8:	c5 01       	movw	r24, r10
    13fa:	88 5f       	subi	r24, 0xF8	; 248
    13fc:	9f 4d       	sbci	r25, 0xDF	; 223
    13fe:	fc 01       	movw	r30, r24
    1400:	80 81       	ld	r24, Z
    1402:	28 1b       	sub	r18, r24
    1404:	31 09       	sbc	r19, r1
    1406:	41 09       	sbc	r20, r1
    1408:	51 09       	sbc	r21, r1
    140a:	c9 01       	movw	r24, r18
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	08 95       	ret

0000141e <__pack_f>:
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	fc 01       	movw	r30, r24
    142c:	24 81       	ldd	r18, Z+4	; 0x04
    142e:	35 81       	ldd	r19, Z+5	; 0x05
    1430:	46 81       	ldd	r20, Z+6	; 0x06
    1432:	57 81       	ldd	r21, Z+7	; 0x07
    1434:	61 81       	ldd	r22, Z+1	; 0x01
    1436:	80 81       	ld	r24, Z
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	20 f4       	brcc	.+8      	; 0x1444 <__pack_f+0x26>
    143c:	40 61       	ori	r20, 0x10	; 16
    143e:	ef ef       	ldi	r30, 0xFF	; 255
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	a3 c0       	rjmp	.+326    	; 0x158a <__pack_f+0x16c>
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	09 f4       	brne	.+2      	; 0x144a <__pack_f+0x2c>
    1448:	9b c0       	rjmp	.+310    	; 0x1580 <__pack_f+0x162>
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	09 f4       	brne	.+2      	; 0x1450 <__pack_f+0x32>
    144e:	92 c0       	rjmp	.+292    	; 0x1574 <__pack_f+0x156>
    1450:	21 15       	cp	r18, r1
    1452:	31 05       	cpc	r19, r1
    1454:	41 05       	cpc	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <__pack_f+0x3e>
    145a:	8f c0       	rjmp	.+286    	; 0x157a <__pack_f+0x15c>
    145c:	02 80       	ldd	r0, Z+2	; 0x02
    145e:	f3 81       	ldd	r31, Z+3	; 0x03
    1460:	e0 2d       	mov	r30, r0
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	e2 38       	cpi	r30, 0x82	; 130
    1466:	f8 07       	cpc	r31, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <__pack_f+0x4e>
    146a:	5a c0       	rjmp	.+180    	; 0x1520 <__pack_f+0x102>
    146c:	c2 e8       	ldi	r28, 0x82	; 130
    146e:	df ef       	ldi	r29, 0xFF	; 255
    1470:	ce 1b       	sub	r28, r30
    1472:	df 0b       	sbc	r29, r31
    1474:	ca 31       	cpi	r28, 0x1A	; 26
    1476:	d1 05       	cpc	r29, r1
    1478:	6c f5       	brge	.+90     	; 0x14d4 <__pack_f+0xb6>
    147a:	79 01       	movw	r14, r18
    147c:	8a 01       	movw	r16, r20
    147e:	0c 2e       	mov	r0, r28
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__pack_f+0x6c>
    1482:	16 95       	lsr	r17
    1484:	07 95       	ror	r16
    1486:	f7 94       	ror	r15
    1488:	e7 94       	ror	r14
    148a:	0a 94       	dec	r0
    148c:	d2 f7       	brpl	.-12     	; 0x1482 <__pack_f+0x64>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	0c 2e       	mov	r0, r28
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <__pack_f+0x84>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	aa 1f       	adc	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	0a 94       	dec	r0
    14a4:	d2 f7       	brpl	.-12     	; 0x149a <__pack_f+0x7c>
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	a1 09       	sbc	r26, r1
    14aa:	b1 09       	sbc	r27, r1
    14ac:	82 23       	and	r24, r18
    14ae:	93 23       	and	r25, r19
    14b0:	a4 23       	and	r26, r20
    14b2:	b5 23       	and	r27, r21
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	a1 05       	cpc	r26, r1
    14c0:	b1 05       	cpc	r27, r1
    14c2:	19 f4       	brne	.+6      	; 0x14ca <__pack_f+0xac>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	2e 29       	or	r18, r14
    14cc:	3f 29       	or	r19, r15
    14ce:	40 2b       	or	r20, r16
    14d0:	51 2b       	or	r21, r17
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <__pack_f+0xbc>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	da 01       	movw	r26, r20
    14dc:	c9 01       	movw	r24, r18
    14de:	8f 77       	andi	r24, 0x7F	; 127
    14e0:	90 70       	andi	r25, 0x00	; 0
    14e2:	a0 70       	andi	r26, 0x00	; 0
    14e4:	b0 70       	andi	r27, 0x00	; 0
    14e6:	80 34       	cpi	r24, 0x40	; 64
    14e8:	91 05       	cpc	r25, r1
    14ea:	a1 05       	cpc	r26, r1
    14ec:	b1 05       	cpc	r27, r1
    14ee:	39 f4       	brne	.+14     	; 0x14fe <__pack_f+0xe0>
    14f0:	27 ff       	sbrs	r18, 7
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <__pack_f+0xe8>
    14f4:	20 5c       	subi	r18, 0xC0	; 192
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	4f 4f       	sbci	r20, 0xFF	; 255
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__pack_f+0xe8>
    14fe:	21 5c       	subi	r18, 0xC1	; 193
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	4f 4f       	sbci	r20, 0xFF	; 255
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	e1 e0       	ldi	r30, 0x01	; 1
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	20 30       	cpi	r18, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	38 07       	cpc	r19, r24
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	48 07       	cpc	r20, r24
    1514:	80 e4       	ldi	r24, 0x40	; 64
    1516:	58 07       	cpc	r21, r24
    1518:	28 f5       	brcc	.+74     	; 0x1564 <__pack_f+0x146>
    151a:	e0 e0       	ldi	r30, 0x00	; 0
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	22 c0       	rjmp	.+68     	; 0x1564 <__pack_f+0x146>
    1520:	e0 38       	cpi	r30, 0x80	; 128
    1522:	f1 05       	cpc	r31, r1
    1524:	6c f5       	brge	.+90     	; 0x1580 <__pack_f+0x162>
    1526:	e1 58       	subi	r30, 0x81	; 129
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	da 01       	movw	r26, r20
    152c:	c9 01       	movw	r24, r18
    152e:	8f 77       	andi	r24, 0x7F	; 127
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	a0 70       	andi	r26, 0x00	; 0
    1534:	b0 70       	andi	r27, 0x00	; 0
    1536:	80 34       	cpi	r24, 0x40	; 64
    1538:	91 05       	cpc	r25, r1
    153a:	a1 05       	cpc	r26, r1
    153c:	b1 05       	cpc	r27, r1
    153e:	39 f4       	brne	.+14     	; 0x154e <__pack_f+0x130>
    1540:	27 ff       	sbrs	r18, 7
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <__pack_f+0x138>
    1544:	20 5c       	subi	r18, 0xC0	; 192
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	4f 4f       	sbci	r20, 0xFF	; 255
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <__pack_f+0x138>
    154e:	21 5c       	subi	r18, 0xC1	; 193
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	4f 4f       	sbci	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	57 ff       	sbrs	r21, 7
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <__pack_f+0x146>
    155a:	56 95       	lsr	r21
    155c:	47 95       	ror	r20
    155e:	37 95       	ror	r19
    1560:	27 95       	ror	r18
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	87 e0       	ldi	r24, 0x07	; 7
    1566:	56 95       	lsr	r21
    1568:	47 95       	ror	r20
    156a:	37 95       	ror	r19
    156c:	27 95       	ror	r18
    156e:	8a 95       	dec	r24
    1570:	d1 f7       	brne	.-12     	; 0x1566 <__pack_f+0x148>
    1572:	0b c0       	rjmp	.+22     	; 0x158a <__pack_f+0x16c>
    1574:	e0 e0       	ldi	r30, 0x00	; 0
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <__pack_f+0x166>
    157a:	e0 e0       	ldi	r30, 0x00	; 0
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	05 c0       	rjmp	.+10     	; 0x158a <__pack_f+0x16c>
    1580:	ef ef       	ldi	r30, 0xFF	; 255
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	8e 2f       	mov	r24, r30
    158c:	87 95       	ror	r24
    158e:	88 27       	eor	r24, r24
    1590:	87 95       	ror	r24
    1592:	94 2f       	mov	r25, r20
    1594:	9f 77       	andi	r25, 0x7F	; 127
    1596:	67 95       	ror	r22
    1598:	66 27       	eor	r22, r22
    159a:	67 95       	ror	r22
    159c:	e6 95       	lsr	r30
    159e:	e2 2e       	mov	r14, r18
    15a0:	a9 2f       	mov	r26, r25
    15a2:	a8 2b       	or	r26, r24
    15a4:	fe 2f       	mov	r31, r30
    15a6:	f6 2b       	or	r31, r22
    15a8:	62 2f       	mov	r22, r18
    15aa:	73 2f       	mov	r23, r19
    15ac:	8a 2f       	mov	r24, r26
    15ae:	9f 2f       	mov	r25, r31
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	e6 e0       	ldi	r30, 0x06	; 6
    15b6:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__+0x18>

000015ba <__unpack_f>:
    15ba:	dc 01       	movw	r26, r24
    15bc:	fb 01       	movw	r30, r22
    15be:	2c 91       	ld	r18, X
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	3c 91       	ld	r19, X
    15c4:	11 97       	sbiw	r26, 0x01	; 1
    15c6:	12 96       	adiw	r26, 0x02	; 2
    15c8:	8c 91       	ld	r24, X
    15ca:	12 97       	sbiw	r26, 0x02	; 2
    15cc:	48 2f       	mov	r20, r24
    15ce:	4f 77       	andi	r20, 0x7F	; 127
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	98 2f       	mov	r25, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	99 27       	eor	r25, r25
    15d8:	99 1f       	adc	r25, r25
    15da:	13 96       	adiw	r26, 0x03	; 3
    15dc:	6c 91       	ld	r22, X
    15de:	13 97       	sbiw	r26, 0x03	; 3
    15e0:	86 2f       	mov	r24, r22
    15e2:	88 0f       	add	r24, r24
    15e4:	89 2b       	or	r24, r25
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	66 1f       	adc	r22, r22
    15ea:	66 27       	eor	r22, r22
    15ec:	66 1f       	adc	r22, r22
    15ee:	61 83       	std	Z+1, r22	; 0x01
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	39 f5       	brne	.+78     	; 0x1642 <__unpack_f+0x88>
    15f4:	21 15       	cp	r18, r1
    15f6:	31 05       	cpc	r19, r1
    15f8:	41 05       	cpc	r20, r1
    15fa:	51 05       	cpc	r21, r1
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__unpack_f+0x48>
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	29 c0       	rjmp	.+82     	; 0x1654 <__unpack_f+0x9a>
    1602:	82 e8       	ldi	r24, 0x82	; 130
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	82 83       	std	Z+2, r24	; 0x02
    1608:	93 83       	std	Z+3, r25	; 0x03
    160a:	67 e0       	ldi	r22, 0x07	; 7
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	44 1f       	adc	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	6a 95       	dec	r22
    1616:	d1 f7       	brne	.-12     	; 0x160c <__unpack_f+0x52>
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	80 83       	st	Z, r24
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <__unpack_f+0x76>
    161e:	22 0f       	add	r18, r18
    1620:	33 1f       	adc	r19, r19
    1622:	44 1f       	adc	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	82 83       	std	Z+2, r24	; 0x02
    162e:	93 83       	std	Z+3, r25	; 0x03
    1630:	20 30       	cpi	r18, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	38 07       	cpc	r19, r24
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	48 07       	cpc	r20, r24
    163a:	80 e4       	ldi	r24, 0x40	; 64
    163c:	58 07       	cpc	r21, r24
    163e:	78 f3       	brcs	.-34     	; 0x161e <__unpack_f+0x64>
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <__unpack_f+0xc8>
    1642:	8f 3f       	cpi	r24, 0xFF	; 255
    1644:	91 05       	cpc	r25, r1
    1646:	79 f4       	brne	.+30     	; 0x1666 <__unpack_f+0xac>
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	41 05       	cpc	r20, r1
    164e:	51 05       	cpc	r21, r1
    1650:	19 f4       	brne	.+6      	; 0x1658 <__unpack_f+0x9e>
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	80 83       	st	Z, r24
    1656:	08 95       	ret
    1658:	44 ff       	sbrs	r20, 4
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <__unpack_f+0xa8>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	80 83       	st	Z, r24
    1660:	10 c0       	rjmp	.+32     	; 0x1682 <__unpack_f+0xc8>
    1662:	10 82       	st	Z, r1
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <__unpack_f+0xc8>
    1666:	8f 57       	subi	r24, 0x7F	; 127
    1668:	90 40       	sbci	r25, 0x00	; 0
    166a:	82 83       	std	Z+2, r24	; 0x02
    166c:	93 83       	std	Z+3, r25	; 0x03
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	80 83       	st	Z, r24
    1672:	87 e0       	ldi	r24, 0x07	; 7
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	44 1f       	adc	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	8a 95       	dec	r24
    167e:	d1 f7       	brne	.-12     	; 0x1674 <__unpack_f+0xba>
    1680:	50 64       	ori	r21, 0x40	; 64
    1682:	24 83       	std	Z+4, r18	; 0x04
    1684:	35 83       	std	Z+5, r19	; 0x05
    1686:	46 83       	std	Z+6, r20	; 0x06
    1688:	57 83       	std	Z+7, r21	; 0x07
    168a:	08 95       	ret

0000168c <__fpcmp_parts_f>:
    168c:	fc 01       	movw	r30, r24
    168e:	db 01       	movw	r26, r22
    1690:	90 81       	ld	r25, Z
    1692:	92 30       	cpi	r25, 0x02	; 2
    1694:	08 f4       	brcc	.+2      	; 0x1698 <__fpcmp_parts_f+0xc>
    1696:	49 c0       	rjmp	.+146    	; 0x172a <__fpcmp_parts_f+0x9e>
    1698:	8c 91       	ld	r24, X
    169a:	82 30       	cpi	r24, 0x02	; 2
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <__fpcmp_parts_f+0x14>
    169e:	45 c0       	rjmp	.+138    	; 0x172a <__fpcmp_parts_f+0x9e>
    16a0:	94 30       	cpi	r25, 0x04	; 4
    16a2:	51 f4       	brne	.+20     	; 0x16b8 <__fpcmp_parts_f+0x2c>
    16a4:	61 81       	ldd	r22, Z+1	; 0x01
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	b1 f5       	brne	.+108    	; 0x1716 <__fpcmp_parts_f+0x8a>
    16aa:	11 96       	adiw	r26, 0x01	; 1
    16ac:	2c 91       	ld	r18, X
    16ae:	11 97       	sbiw	r26, 0x01	; 1
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	26 1b       	sub	r18, r22
    16b4:	31 09       	sbc	r19, r1
    16b6:	41 c0       	rjmp	.+130    	; 0x173a <__fpcmp_parts_f+0xae>
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <__fpcmp_parts_f+0x38>
    16bc:	92 30       	cpi	r25, 0x02	; 2
    16be:	41 f4       	brne	.+16     	; 0x16d0 <__fpcmp_parts_f+0x44>
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	b1 f1       	breq	.+108    	; 0x1730 <__fpcmp_parts_f+0xa4>
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	8c 91       	ld	r24, X
    16c8:	11 97       	sbiw	r26, 0x01	; 1
    16ca:	88 23       	and	r24, r24
    16cc:	a1 f1       	breq	.+104    	; 0x1736 <__fpcmp_parts_f+0xaa>
    16ce:	2d c0       	rjmp	.+90     	; 0x172a <__fpcmp_parts_f+0x9e>
    16d0:	61 81       	ldd	r22, Z+1	; 0x01
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	01 f1       	breq	.+64     	; 0x1716 <__fpcmp_parts_f+0x8a>
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	8c 91       	ld	r24, X
    16da:	11 97       	sbiw	r26, 0x01	; 1
    16dc:	68 17       	cp	r22, r24
    16de:	d9 f4       	brne	.+54     	; 0x1716 <__fpcmp_parts_f+0x8a>
    16e0:	22 81       	ldd	r18, Z+2	; 0x02
    16e2:	33 81       	ldd	r19, Z+3	; 0x03
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	8d 91       	ld	r24, X+
    16e8:	9c 91       	ld	r25, X
    16ea:	13 97       	sbiw	r26, 0x03	; 3
    16ec:	82 17       	cp	r24, r18
    16ee:	93 07       	cpc	r25, r19
    16f0:	94 f0       	brlt	.+36     	; 0x1716 <__fpcmp_parts_f+0x8a>
    16f2:	28 17       	cp	r18, r24
    16f4:	39 07       	cpc	r19, r25
    16f6:	bc f0       	brlt	.+46     	; 0x1726 <__fpcmp_parts_f+0x9a>
    16f8:	24 81       	ldd	r18, Z+4	; 0x04
    16fa:	35 81       	ldd	r19, Z+5	; 0x05
    16fc:	46 81       	ldd	r20, Z+6	; 0x06
    16fe:	57 81       	ldd	r21, Z+7	; 0x07
    1700:	14 96       	adiw	r26, 0x04	; 4
    1702:	8d 91       	ld	r24, X+
    1704:	9d 91       	ld	r25, X+
    1706:	0d 90       	ld	r0, X+
    1708:	bc 91       	ld	r27, X
    170a:	a0 2d       	mov	r26, r0
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	a4 07       	cpc	r26, r20
    1712:	b5 07       	cpc	r27, r21
    1714:	18 f4       	brcc	.+6      	; 0x171c <__fpcmp_parts_f+0x90>
    1716:	66 23       	and	r22, r22
    1718:	41 f0       	breq	.+16     	; 0x172a <__fpcmp_parts_f+0x9e>
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__fpcmp_parts_f+0xaa>
    171c:	28 17       	cp	r18, r24
    171e:	39 07       	cpc	r19, r25
    1720:	4a 07       	cpc	r20, r26
    1722:	5b 07       	cpc	r21, r27
    1724:	28 f4       	brcc	.+10     	; 0x1730 <__fpcmp_parts_f+0xa4>
    1726:	66 23       	and	r22, r22
    1728:	31 f0       	breq	.+12     	; 0x1736 <__fpcmp_parts_f+0xaa>
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	05 c0       	rjmp	.+10     	; 0x173a <__fpcmp_parts_f+0xae>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <__fpcmp_parts_f+0xae>
    1736:	2f ef       	ldi	r18, 0xFF	; 255
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	c9 01       	movw	r24, r18
    173c:	08 95       	ret

0000173e <__udivmodhi4>:
    173e:	aa 1b       	sub	r26, r26
    1740:	bb 1b       	sub	r27, r27
    1742:	51 e1       	ldi	r21, 0x11	; 17
    1744:	07 c0       	rjmp	.+14     	; 0x1754 <__udivmodhi4_ep>

00001746 <__udivmodhi4_loop>:
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	a6 17       	cp	r26, r22
    174c:	b7 07       	cpc	r27, r23
    174e:	10 f0       	brcs	.+4      	; 0x1754 <__udivmodhi4_ep>
    1750:	a6 1b       	sub	r26, r22
    1752:	b7 0b       	sbc	r27, r23

00001754 <__udivmodhi4_ep>:
    1754:	88 1f       	adc	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	5a 95       	dec	r21
    175a:	a9 f7       	brne	.-22     	; 0x1746 <__udivmodhi4_loop>
    175c:	80 95       	com	r24
    175e:	90 95       	com	r25
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	08 95       	ret

00001766 <__divmodhi4>:
    1766:	97 fb       	bst	r25, 7
    1768:	09 2e       	mov	r0, r25
    176a:	07 26       	eor	r0, r23
    176c:	0a d0       	rcall	.+20     	; 0x1782 <__divmodhi4_neg1>
    176e:	77 fd       	sbrc	r23, 7
    1770:	04 d0       	rcall	.+8      	; 0x177a <__divmodhi4_neg2>
    1772:	e5 df       	rcall	.-54     	; 0x173e <__udivmodhi4>
    1774:	06 d0       	rcall	.+12     	; 0x1782 <__divmodhi4_neg1>
    1776:	00 20       	and	r0, r0
    1778:	1a f4       	brpl	.+6      	; 0x1780 <__divmodhi4_exit>

0000177a <__divmodhi4_neg2>:
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255

00001780 <__divmodhi4_exit>:
    1780:	08 95       	ret

00001782 <__divmodhi4_neg1>:
    1782:	f6 f7       	brtc	.-4      	; 0x1780 <__divmodhi4_exit>
    1784:	90 95       	com	r25
    1786:	81 95       	neg	r24
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	08 95       	ret

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	09 94       	ijmp

000017be <__epilogue_restores__>:
    17be:	2a 88       	ldd	r2, Y+18	; 0x12
    17c0:	39 88       	ldd	r3, Y+17	; 0x11
    17c2:	48 88       	ldd	r4, Y+16	; 0x10
    17c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    17c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    17cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d0:	b9 84       	ldd	r11, Y+9	; 0x09
    17d2:	c8 84       	ldd	r12, Y+8	; 0x08
    17d4:	df 80       	ldd	r13, Y+7	; 0x07
    17d6:	ee 80       	ldd	r14, Y+6	; 0x06
    17d8:	fd 80       	ldd	r15, Y+5	; 0x05
    17da:	0c 81       	ldd	r16, Y+4	; 0x04
    17dc:	1b 81       	ldd	r17, Y+3	; 0x03
    17de:	aa 81       	ldd	r26, Y+2	; 0x02
    17e0:	b9 81       	ldd	r27, Y+1	; 0x01
    17e2:	ce 0f       	add	r28, r30
    17e4:	d1 1d       	adc	r29, r1
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	ed 01       	movw	r28, r26
    17ec:	08 95       	ret

000017ee <_exit>:
    17ee:	f8 94       	cli

000017f0 <__stop_program>:
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <__stop_program>
