
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00802000  00002b60  00002bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  00802188  00802188  00002d7c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000034cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ab3  00000000  00000000  0000370d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000538b  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019b6  00000000  00000000  0000954b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033b7  00000000  00000000  0000af01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000730  00000000  00000000  0000e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017b4  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000236d  00000000  00000000  0001019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000ae1  00000000  00000000  00012509  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  00012fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_16>
      44:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_17>
      48:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_18>
      4c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e0 e6       	ldi	r30, 0x60	; 96
     18c:	fb e2       	ldi	r31, 0x2B	; 43
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 38       	cpi	r26, 0x88	; 136
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e8       	ldi	r26, 0x88	; 136
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a5 39       	cpi	r26, 0x95	; 149
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 48 0a 	call	0x1490	; 0x1490 <main>
     1ae:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 9e 21 	lds	r24, 0x219E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	18 2f       	mov	r17, r24
     1ce:	eb 01       	movw	r28, r22
     1d0:	ba 01       	movw	r22, r20
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
    temp = temp*(outmax - outmin) + outmin;
     1d2:	6c 1b       	sub	r22, r28
     1d4:	7d 0b       	sbc	r23, r29
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 b3 12 	call	0x2566	; 0x2566 <__floatunsisf>
     1de:	6b 01       	movw	r12, r22
     1e0:	7c 01       	movw	r14, r24
    //outmin: minimum value to output
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
     1e2:	e1 2f       	mov	r30, r17
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	ee 0f       	add	r30, r30
     1e8:	ff 1f       	adc	r31, r31
     1ea:	ec 56       	subi	r30, 0x6C	; 108
     1ec:	fe 4d       	sbci	r31, 0xDE	; 222
     1ee:	60 81       	ld	r22, Z
     1f0:	71 81       	ldd	r23, Z+1	; 0x01
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 b3 12 	call	0x2566	; 0x2566 <__floatunsisf>
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 ef       	ldi	r19, 0xF0	; 240
     1fe:	43 e7       	ldi	r20, 0x73	; 115
     200:	55 e4       	ldi	r21, 0x45	; 69
     202:	0e 94 83 11 	call	0x2306	; 0x2306 <__divsf3>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
    temp = temp*(outmax - outmin) + outmin;
     20a:	c7 01       	movw	r24, r14
     20c:	b6 01       	movw	r22, r12
     20e:	0e 94 89 10 	call	0x2112	; 0x2112 <__mulsf3>
     212:	06 2f       	mov	r16, r22
     214:	17 2f       	mov	r17, r23
     216:	f8 2e       	mov	r15, r24
     218:	c9 2e       	mov	r12, r25
     21a:	be 01       	movw	r22, r28
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 b3 12 	call	0x2566	; 0x2566 <__floatunsisf>
     224:	9b 01       	movw	r18, r22
     226:	ac 01       	movw	r20, r24
     228:	60 2f       	mov	r22, r16
     22a:	71 2f       	mov	r23, r17
     22c:	8f 2d       	mov	r24, r15
     22e:	9c 2d       	mov	r25, r12
     230:	0e 94 2b 10 	call	0x2056	; 0x2056 <__addsf3>
    
    return (uint16_t) temp;
     234:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fixunssfsi>
}
     238:	86 2f       	mov	r24, r22
     23a:	97 2f       	mov	r25, r23
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	08 95       	ret

0000024e <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     24e:	80 91 8c 21 	lds	r24, 0x218C
     252:	08 95       	ret

00000254 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     254:	80 91 8d 21 	lds	r24, 0x218D
     258:	08 95       	ret

0000025a <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     25a:	80 91 8a 21 	lds	r24, 0x218A
     25e:	08 95       	ret

00000260 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     260:	80 91 8b 21 	lds	r24, 0x218B
     264:	08 95       	ret

00000266 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     266:	80 91 88 21 	lds	r24, 0x2188
     26a:	08 95       	ret

0000026c <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     26c:	80 91 89 21 	lds	r24, 0x2189
     270:	08 95       	ret

00000272 <startup_functions>:

void startup_functions(){
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     276:	80 91 40 00 	lds	r24, 0x0040
     27a:	84 30       	cpi	r24, 0x04	; 4
     27c:	01 f1       	breq	.+64     	; 0x2be <startup_functions+0x4c>
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     27e:	a0 e4       	ldi	r26, 0x40	; 64
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	71 e0       	ldi	r23, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     284:	94 e0       	ldi	r25, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     286:	e0 e5       	ldi	r30, 0x50	; 80
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	6b e8       	ldi	r22, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     28c:	58 e0       	ldi	r21, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     28e:	42 ec       	ldi	r20, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     290:	38 e1       	ldi	r19, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     292:	28 ed       	ldi	r18, 0xD8	; 216
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     294:	11 96       	adiw	r26, 0x01	; 1
     296:	7c 93       	st	X, r23
     298:	11 97       	sbiw	r26, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	9c 93       	st	X, r25
     29e:	13 97       	sbiw	r26, 0x03	; 3
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     2a0:	62 83       	std	Z+2, r22	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     2a2:	50 83       	st	Z, r21
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     2a4:	81 81       	ldd	r24, Z+1	; 0x01
     2a6:	83 ff       	sbrs	r24, 3
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <startup_functions+0x32>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     2aa:	45 83       	std	Z+5, r20	; 0x05
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     2ac:	30 83       	st	Z, r19
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	84 ff       	sbrs	r24, 4
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <startup_functions+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     2b4:	24 bf       	out	0x34, r18	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     2b6:	9c 93       	st	X, r25
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     2b8:	8c 91       	ld	r24, X
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	59 f7       	brne	.-42     	; 0x294 <startup_functions+0x22>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     2be:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     2c0:	a0 e6       	ldi	r26, 0x60	; 96
     2c2:	b6 e0       	ldi	r27, 0x06	; 6
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	15 96       	adiw	r26, 0x05	; 5
     2c8:	8c 93       	st	X, r24
     2ca:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     2cc:	90 e4       	ldi	r25, 0x40	; 64
     2ce:	12 96       	adiw	r26, 0x02	; 2
     2d0:	9c 93       	st	X, r25
     2d2:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	8c 93       	st	X, r24
     2d8:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     2da:	e0 eb       	ldi	r30, 0xB0	; 176
     2dc:	f9 e0       	ldi	r31, 0x09	; 9
     2de:	88 e1       	ldi	r24, 0x18	; 24
     2e0:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	83 83       	std	Z+3, r24	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2e6:	33 e0       	ldi	r19, 0x03	; 3
     2e8:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     2ea:	9f e2       	ldi	r25, 0x2F	; 47
     2ec:	96 83       	std	Z+6, r25	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     2ee:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     2f0:	e0 ea       	ldi	r30, 0xA0	; 160
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	92 81       	ldd	r25, Z+2	; 0x02
     2f6:	97 68       	ori	r25, 0x87	; 135
     2f8:	92 83       	std	Z+2, r25	; 0x02
    sei();                     //enable global interrupts
     2fa:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d6 e0       	ldi	r29, 0x06	; 6
     300:	99 ef       	ldi	r25, 0xF9	; 249
     302:	9a 83       	std	Y+2, r25	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     304:	e0 e0       	ldi	r30, 0x00	; 0
     306:	f2 e0       	ldi	r31, 0x02	; 2
     308:	10 82       	st	Z, r1
    ADCA.CTRLB = 0x00;
     30a:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     30c:	82 83       	std	Z+2, r24	; 0x02
    ADCA.EVCTRL = 0x00;
     30e:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     310:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     312:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     314:	80 81       	ld	r24, Z
     316:	81 60       	ori	r24, 0x01	; 1
     318:	80 83       	st	Z, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     31e:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     320:	12 a2       	std	Z+34, r1	; 0x22
        PORTC.OUTSET = 0x08;
    
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     322:	40 e2       	ldi	r20, 0x20	; 32
     324:	56 e0       	ldi	r21, 0x06	; 6
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	fa 01       	movw	r30, r20
     32a:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     32c:	28 e0       	ldi	r18, 0x08	; 8
     32e:	80 e8       	ldi	r24, 0x80	; 128
     330:	96 e0       	ldi	r25, 0x06	; 6
     332:	fc 01       	movw	r30, r24
     334:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     336:	fa 01       	movw	r30, r20
     338:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     33e:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     340:	e0 e4       	ldi	r30, 0x40	; 64
     342:	f6 e0       	ldi	r31, 0x06	; 6
     344:	88 ef       	ldi	r24, 0xF8	; 248
     346:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     348:	8f e3       	ldi	r24, 0x3F	; 63
     34a:	11 96       	adiw	r26, 0x01	; 1
     34c:	8c 93       	st	X, r24
     34e:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     350:	88 e3       	ldi	r24, 0x38	; 56
     352:	15 96       	adiw	r26, 0x05	; 5
     354:	8c 93       	st	X, r24
     356:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     358:	90 ef       	ldi	r25, 0xF0	; 240
     35a:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     35c:	16 96       	adiw	r26, 0x06	; 6
     35e:	8c 93       	st	X, r24
     360:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     362:	87 e0       	ldi	r24, 0x07	; 7
     364:	16 96       	adiw	r26, 0x06	; 6
     366:	8c 93       	st	X, r24
     368:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     36a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <preloop_functions>:

void preloop_functions(){
     372:	df 92       	push	r13
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     380:	e0 e8       	ldi	r30, 0x80	; 128
     382:	f6 e0       	ldi	r31, 0x06	; 6
     384:	30 85       	ldd	r19, Z+8	; 0x08
     386:	36 95       	lsr	r19
     388:	36 95       	lsr	r19
     38a:	36 95       	lsr	r19
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	09 f0       	breq	.+2      	; 0x392 <preloop_functions+0x20>
     390:	20 e0       	ldi	r18, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     392:	e0 e2       	ldi	r30, 0x20	; 32
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	30 85       	ldd	r19, Z+8	; 0x08
     398:	36 95       	lsr	r19
     39a:	36 95       	lsr	r19
     39c:	30 fd       	sbrc	r19, 0
     39e:	04 c0       	rjmp	.+8      	; 0x3a8 <preloop_functions+0x36>
     3a0:	dd 24       	eor	r13, r13
     3a2:	68 94       	set
     3a4:	d1 f8       	bld	r13, 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <preloop_functions+0x38>
     3a8:	dd 24       	eor	r13, r13
     3aa:	d2 2a       	or	r13, r18
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     3ac:	e0 e2       	ldi	r30, 0x20	; 32
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	20 85       	ldd	r18, Z+8	; 0x08
     3b2:	26 95       	lsr	r18
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	20 fd       	sbrc	r18, 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <preloop_functions+0x4e>
     3bc:	34 e0       	ldi	r19, 0x04	; 4
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <preloop_functions+0x50>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	d3 2a       	or	r13, r19
     3c4:	d0 92 93 21 	sts	0x2193, r13
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3c8:	20 91 92 21 	lds	r18, 0x2192
     3cc:	c2 2f       	mov	r28, r18
     3ce:	d0 e0       	ldi	r29, 0x00	; 0
     3d0:	e0 90 91 21 	lds	r14, 0x2191
     3d4:	ee e8       	ldi	r30, 0x8E	; 142
     3d6:	f1 e2       	ldi	r31, 0x21	; 33
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	ad 2d       	mov	r26, r13
     3de:	b0 e0       	ldi	r27, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     3e0:	01 e0       	ldi	r16, 0x01	; 1
     3e2:	10 e0       	ldi	r17, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3e4:	bd 01       	movw	r22, r26
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <preloop_functions+0x7c>
     3ea:	75 95       	asr	r23
     3ec:	67 95       	ror	r22
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <preloop_functions+0x78>
     3f2:	ae 01       	movw	r20, r28
     3f4:	02 2e       	mov	r0, r18
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <preloop_functions+0x8a>
     3f8:	55 95       	asr	r21
     3fa:	47 95       	ror	r20
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <preloop_functions+0x86>
     400:	64 17       	cp	r22, r20
     402:	75 07       	cpc	r23, r21
     404:	31 f4       	brne	.+12     	; 0x412 <preloop_functions+0xa0>
            switch_history_counts[i]++;                            //increment count        
     406:	40 81       	ld	r20, Z
     408:	4f 5f       	subi	r20, 0xFF	; 255
     40a:	40 83       	st	Z, r20
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     40c:	49 30       	cpi	r20, 0x09	; 9
     40e:	18 f4       	brcc	.+6      	; 0x416 <preloop_functions+0xa4>
     410:	0f c0       	rjmp	.+30     	; 0x430 <preloop_functions+0xbe>
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
     412:	10 82       	st	Z, r1
     414:	0d c0       	rjmp	.+26     	; 0x430 <preloop_functions+0xbe>
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     416:	a8 01       	movw	r20, r16
     418:	02 2e       	mov	r0, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <preloop_functions+0xae>
     41c:	44 0f       	add	r20, r20
     41e:	55 1f       	adc	r21, r21
     420:	0a 94       	dec	r0
     422:	e2 f7       	brpl	.-8      	; 0x41c <preloop_functions+0xaa>
     424:	54 2f       	mov	r21, r20
     426:	50 95       	com	r21
     428:	e5 22       	and	r14, r21
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     42a:	4d 21       	and	r20, r13
     42c:	e4 2a       	or	r14, r20
            switch_history_counts[i] = 0;                          //and reset count
     42e:	10 82       	st	Z, r1
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     436:	23 30       	cpi	r18, 0x03	; 3
     438:	31 05       	cpc	r19, r1
     43a:	a1 f6       	brne	.-88     	; 0x3e4 <preloop_functions+0x72>
     43c:	e0 92 91 21 	sts	0x2191, r14
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     440:	d0 92 92 21 	sts	0x2192, r13
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     444:	e0 fe       	sbrs	r14, 0
     446:	0e c0       	rjmp	.+28     	; 0x464 <preloop_functions+0xf2>
        if (toggle_switch_state)                //if toggle WAS on
     448:	20 91 88 21 	lds	r18, 0x2188
     44c:	22 23       	and	r18, r18
     44e:	19 f0       	breq	.+6      	; 0x456 <preloop_functions+0xe4>
            toggle_switch_edge = EDGE_NONE;     //no edge
     450:	10 92 89 21 	sts	0x2189, r1
     454:	03 c0       	rjmp	.+6      	; 0x45c <preloop_functions+0xea>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	20 93 89 21 	sts	0x2189, r18
        toggle_switch_state = 1;                //set current value
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	20 93 88 21 	sts	0x2188, r18
     462:	0c c0       	rjmp	.+24     	; 0x47c <preloop_functions+0x10a>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     464:	20 91 88 21 	lds	r18, 0x2188
     468:	22 23       	and	r18, r18
     46a:	21 f0       	breq	.+8      	; 0x474 <preloop_functions+0x102>
            toggle_switch_edge = EDGE_FALL;     //new off
     46c:	22 e0       	ldi	r18, 0x02	; 2
     46e:	20 93 89 21 	sts	0x2189, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <preloop_functions+0x106>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     474:	10 92 89 21 	sts	0x2189, r1
        toggle_switch_state = 0;                //set current value
     478:	10 92 88 21 	sts	0x2188, r1
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     47c:	20 91 91 21 	lds	r18, 0x2191
     480:	21 ff       	sbrs	r18, 1
     482:	0e c0       	rjmp	.+28     	; 0x4a0 <preloop_functions+0x12e>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     484:	20 91 8a 21 	lds	r18, 0x218A
     488:	22 23       	and	r18, r18
     48a:	19 f0       	breq	.+6      	; 0x492 <preloop_functions+0x120>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     48c:	10 92 8b 21 	sts	0x218B, r1
     490:	03 c0       	rjmp	.+6      	; 0x498 <preloop_functions+0x126>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	20 93 8b 21 	sts	0x218B, r18
        pushbutton_switch_state = 1;                //set current value
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	20 93 8a 21 	sts	0x218A, r18
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <preloop_functions+0x146>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     4a0:	20 91 8a 21 	lds	r18, 0x218A
     4a4:	22 23       	and	r18, r18
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <preloop_functions+0x13e>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     4a8:	22 e0       	ldi	r18, 0x02	; 2
     4aa:	20 93 8b 21 	sts	0x218B, r18
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <preloop_functions+0x142>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     4b0:	10 92 8b 21 	sts	0x218B, r1
        pushbutton_switch_state = 0;                //set current value
     4b4:	10 92 8a 21 	sts	0x218A, r1
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     4b8:	20 91 91 21 	lds	r18, 0x2191
     4bc:	22 ff       	sbrs	r18, 2
     4be:	14 c0       	rjmp	.+40     	; 0x4e8 <preloop_functions+0x176>
        if (encoder_switch_state)                //if encoder WAS on
     4c0:	20 91 8c 21 	lds	r18, 0x218C
     4c4:	22 23       	and	r18, r18
     4c6:	19 f0       	breq	.+6      	; 0x4ce <preloop_functions+0x15c>
            encoder_switch_edge = EDGE_NONE;     //no edge
     4c8:	10 92 8d 21 	sts	0x218D, r1
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <preloop_functions+0x162>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	20 93 8d 21 	sts	0x218D, r18
        encoder_switch_state = 1;                //set current value
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	20 93 8c 21 	sts	0x218C, r18
     4da:	a4 e9       	ldi	r26, 0x94	; 148
     4dc:	b1 e2       	ldi	r27, 0x21	; 33
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     4de:	23 e0       	ldi	r18, 0x03	; 3
     4e0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0d c0       	rjmp	.+26     	; 0x502 <preloop_functions+0x190>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
        encoder_switch_state = 1;                //set current value
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     4e8:	20 91 8c 21 	lds	r18, 0x218C
     4ec:	22 23       	and	r18, r18
     4ee:	21 f0       	breq	.+8      	; 0x4f8 <preloop_functions+0x186>
            encoder_switch_edge = EDGE_FALL;     //new off
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	20 93 8d 21 	sts	0x218D, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <preloop_functions+0x18a>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     4f8:	10 92 8d 21 	sts	0x218D, r1
        encoder_switch_state = 0;                //set current value
     4fc:	10 92 8c 21 	sts	0x218C, r1
     500:	ec cf       	rjmp	.-40     	; 0x4da <preloop_functions+0x168>
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     502:	43 a1       	ldd	r20, Z+35	; 0x23
     504:	41 60       	ori	r20, 0x01	; 1
     506:	43 a3       	std	Z+35, r20	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     508:	41 a1       	ldd	r20, Z+33	; 0x21
     50a:	47 7c       	andi	r20, 0xC7	; 199
     50c:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     50e:	61 a1       	ldd	r22, Z+33	; 0x21
     510:	a9 01       	movw	r20, r18
     512:	44 0f       	add	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	44 0f       	add	r20, r20
     518:	55 1f       	adc	r21, r21
     51a:	44 0f       	add	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	46 2b       	or	r20, r22
     520:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     522:	40 a1       	ldd	r20, Z+32	; 0x20
     524:	40 68       	ori	r20, 0x80	; 128
     526:	40 a3       	std	Z+32, r20	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     528:	43 a1       	ldd	r20, Z+35	; 0x23
     52a:	40 ff       	sbrs	r20, 0
     52c:	fd cf       	rjmp	.-6      	; 0x528 <preloop_functions+0x1b6>
        
        pot_values[i] = ADCA.CH0.RESL;
     52e:	44 a1       	ldd	r20, Z+36	; 0x24
        pot_values[i] |= ADCA.CH0.RESH << 8;
     530:	55 a1       	ldd	r21, Z+37	; 0x25
     532:	95 2f       	mov	r25, r21
     534:	80 e0       	ldi	r24, 0x00	; 0
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     536:	50 e0       	ldi	r21, 0x00	; 0
        pot_values[i] |= ADCA.CH0.RESH << 8;
     538:	48 2b       	or	r20, r24
     53a:	59 2b       	or	r21, r25
     53c:	4d 93       	st	X+, r20
     53e:	5c 93       	st	X, r21
     540:	11 97       	sbiw	r26, 0x01	; 1
        
        if (pot_values[i] < POTMIN)
     542:	40 3c       	cpi	r20, 0xC0	; 192
     544:	51 05       	cpc	r21, r1
     546:	20 f4       	brcc	.+8      	; 0x550 <preloop_functions+0x1de>
            pot_values[i] = 0;
     548:	1d 92       	st	X+, r1
     54a:	1c 92       	st	X, r1
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <preloop_functions+0x1e8>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     550:	40 5c       	subi	r20, 0xC0	; 192
     552:	50 40       	sbci	r21, 0x00	; 0
     554:	4d 93       	st	X+, r20
     556:	5c 93       	st	X, r21
     558:	11 97       	sbiw	r26, 0x01	; 1
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	12 96       	adiw	r26, 0x02	; 2
static void read_pots(){
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     560:	28 30       	cpi	r18, 0x08	; 8
     562:	31 05       	cpc	r19, r1
     564:	71 f6       	brne	.-100    	; 0x502 <preloop_functions+0x190>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     566:	e0 e2       	ldi	r30, 0x20	; 32
     568:	f6 e0       	ldi	r31, 0x06	; 6
     56a:	80 85       	ldd	r24, Z+8	; 0x08
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	80 fd       	sbrc	r24, 0
     570:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     572:	e0 e2       	ldi	r30, 0x20	; 32
     574:	f6 e0       	ldi	r31, 0x06	; 6
     576:	50 85       	ldd	r21, Z+8	; 0x08
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     578:	24 2f       	mov	r18, r20
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	90 91 9f 21 	lds	r25, 0x219F
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	89 27       	eor	r24, r25
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 23       	and	r24, r18
     588:	93 23       	and	r25, r19
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	59 f0       	breq	.+22     	; 0x5a4 <preloop_functions+0x232>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     58e:	56 95       	lsr	r21
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     590:	50 fd       	sbrc	r21, 0
     592:	04 c0       	rjmp	.+8      	; 0x59c <preloop_functions+0x22a>
            encoder_state = TURN_CW;    //CW        
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 9e 21 	sts	0x219E, r24
     59a:	06 c0       	rjmp	.+12     	; 0x5a8 <preloop_functions+0x236>
        else
            encoder_state = TURN_CCW;    //CCW
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 9e 21 	sts	0x219E, r24
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <preloop_functions+0x236>
    }
    else
        encoder_state = TURN_NONE;   
     5a4:	10 92 9e 21 	sts	0x219E, r1
    last_a = current_a;
     5a8:	40 93 9f 21 	sts	0x219F, r20

void preloop_functions(){
    read_switches();
    read_pots();
    read_encoder();
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	08 95       	ret

000005bc <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <postloop_functions+0x26>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <postloop_functions+0x28>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	8c 83       	std	Y+4, r24	; 0x04
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

static void set_LEDs(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    //booleans and such convert to LED out
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
     5ea:	69 83       	std	Y+1, r22	; 0x01
     5ec:	4a 83       	std	Y+2, r20	; 0x02
     5ee:	2b 83       	std	Y+3, r18	; 0x03
     5f0:	6e 01       	movw	r12, r28
     5f2:	08 94       	sec
     5f4:	c1 1c       	adc	r12, r1
     5f6:	d1 1c       	adc	r13, r1
     5f8:	22 e0       	ldi	r18, 0x02	; 2
     5fa:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     5fc:	0f 2e       	mov	r0, r31
     5fe:	fa e0       	ldi	r31, 0x0A	; 10
     600:	ef 2e       	mov	r14, r31
     602:	ff 24       	eor	r15, r15
     604:	f0 2d       	mov	r31, r0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     606:	0f 2e       	mov	r0, r31
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	6f 2e       	mov	r6, r31
     60c:	77 24       	eor	r7, r7
     60e:	f0 2d       	mov	r31, r0
     610:	44 24       	eor	r4, r4
     612:	55 24       	eor	r5, r5
     614:	68 94       	set
     616:	43 f8       	bld	r4, 3
     618:	e0 e6       	ldi	r30, 0x60	; 96
     61a:	f6 e0       	ldi	r31, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     61c:	0f 2e       	mov	r0, r31
     61e:	f0 e4       	ldi	r31, 0x40	; 64
     620:	af 2e       	mov	r10, r31
     622:	f6 e0       	ldi	r31, 0x06	; 6
     624:	bf 2e       	mov	r11, r31
     626:	f0 2d       	mov	r31, r0
     628:	0f 2e       	mov	r0, r31
     62a:	f0 ef       	ldi	r31, 0xF0	; 240
     62c:	8f 2e       	mov	r8, r31
     62e:	f0 2d       	mov	r31, r0
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     630:	22 24       	eor	r2, r2
     632:	33 24       	eor	r3, r3
     634:	23 94       	inc	r2
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     636:	c8 01       	movw	r24, r16
     638:	b7 01       	movw	r22, r14
     63a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__udivmodhi4>
     63e:	98 2e       	mov	r9, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     640:	01 15       	cp	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	31 f4       	brne	.+12     	; 0x652 <postloop_functions+0x96>
     646:	22 30       	cpi	r18, 0x02	; 2
     648:	21 f0       	breq	.+8      	; 0x652 <postloop_functions+0x96>
            digit = 10;
     64a:	0f 2e       	mov	r0, r31
     64c:	fa e0       	ldi	r31, 0x0A	; 10
     64e:	9f 2e       	mov	r9, r31
     650:	f0 2d       	mov	r31, r0
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     652:	c9 01       	movw	r24, r18
     654:	b3 01       	movw	r22, r6
     656:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divmodhi4>
     65a:	a2 01       	movw	r20, r4
     65c:	08 2e       	mov	r0, r24
     65e:	02 c0       	rjmp	.+4      	; 0x664 <postloop_functions+0xa8>
     660:	44 0f       	add	r20, r20
     662:	55 1f       	adc	r21, r21
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <postloop_functions+0xa4>
     668:	46 83       	std	Z+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     66a:	d5 01       	movw	r26, r10
     66c:	16 96       	adiw	r26, 0x06	; 6
     66e:	8c 92       	st	X, r8
     670:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     672:	99 0c       	add	r9, r9
     674:	99 0c       	add	r9, r9
     676:	99 0c       	add	r9, r9
     678:	99 0c       	add	r9, r9
     67a:	15 96       	adiw	r26, 0x05	; 5
     67c:	9c 92       	st	X, r9
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     67e:	b8 e3       	ldi	r27, 0x38	; 56
     680:	b5 83       	std	Z+5, r27	; 0x05
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     682:	d6 01       	movw	r26, r12
     684:	9d 91       	ld	r25, X+
     686:	6d 01       	movw	r12, r26
     688:	99 23       	and	r25, r25
     68a:	41 f0       	breq	.+16     	; 0x69c <postloop_functions+0xe0>
            PORTD.OUTSET = 1 << (i+2)%3;
     68c:	a1 01       	movw	r20, r2
     68e:	02 c0       	rjmp	.+4      	; 0x694 <postloop_functions+0xd8>
     690:	44 0f       	add	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	8a 95       	dec	r24
     696:	e2 f7       	brpl	.-8      	; 0x690 <postloop_functions+0xd4>
     698:	45 83       	std	Z+5, r20	; 0x05
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <postloop_functions+0xee>
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     69c:	d1 01       	movw	r26, r2
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <postloop_functions+0xe8>
     6a0:	aa 0f       	add	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	8a 95       	dec	r24
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <postloop_functions+0xe4>
     6a8:	a6 83       	std	Z+6, r26	; 0x06
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     6ae:	25 30       	cpi	r18, 0x05	; 5
     6b0:	31 05       	cpc	r19, r1
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <postloop_functions+0x104>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
     6b4:	c8 01       	movw	r24, r16
     6b6:	b7 01       	movw	r22, r14
     6b8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__udivmodhi4>
     6bc:	8b 01       	movw	r16, r22
     6be:	bb cf       	rjmp	.-138    	; 0x636 <postloop_functions+0x7a>
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
    }
    
    if (status_LED)                                //light STATLED if necessary
     6c0:	bc 81       	ldd	r27, Y+4	; 0x04
     6c2:	bb 23       	and	r27, r27
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <postloop_functions+0x114>
        PORTC.OUTCLR = 0x08;
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	e0 e4       	ldi	r30, 0x40	; 64
     6ca:	f6 e0       	ldi	r31, 0x06	; 6
     6cc:	86 83       	std	Z+6, r24	; 0x06
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <postloop_functions+0x11c>
    else
        PORTC.OUTSET = 0x08;
     6d0:	88 e0       	ldi	r24, 0x08	; 8
     6d2:	e0 e4       	ldi	r30, 0x40	; 64
     6d4:	f6 e0       	ldi	r31, 0x06	; 6
     6d6:	85 83       	std	Z+5, r24	; 0x05
    read_encoder();
}

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     6d8:	24 96       	adiw	r28, 0x04	; 4
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	3f 90       	pop	r3
     700:	2f 90       	pop	r2
     702:	08 95       	ret

00000704 <note_off>:
uint8_t next_pitch;
uint8_t next_velocity;
note_division next_division;
uint16_t next_duration;

void note_off(uint8_t pitch, uint8_t velocity){
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	08 2f       	mov	r16, r24
     70a:	16 2f       	mov	r17, r22
	if (get_toggle_switch_state())
     70c:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     710:	88 23       	and	r24, r24
     712:	39 f0       	breq	.+14     	; 0x722 <note_off+0x1e>
		midi_send_noteoff(serial_midi_device(),MIDI_CHAN,pitch,velocity);
     714:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	40 2f       	mov	r20, r16
     71c:	21 2f       	mov	r18, r17
     71e:	0e 94 6d 0b 	call	0x16da	; 0x16da <midi_send_noteoff>
}
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <note_on>:

void note_on(uint8_t pitch, uint8_t velocity, note_division division, uint16_t duration){
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	ca 54       	subi	r28, 0x4A	; 74
     746:	d0 40       	sbci	r29, 0x00	; 0
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	c8 2e       	mov	r12, r24
     74e:	06 2f       	mov	r16, r22
     750:	e4 2e       	mov	r14, r20
     752:	49 01       	movw	r8, r18
	const uint32_t division_numerator[8]   = {1, 2, 3, 1, 1, 3, 1, 1};
     754:	de 01       	movw	r26, r28
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	e0 e6       	ldi	r30, 0x60	; 96
     75a:	f0 e2       	ldi	r31, 0x20	; 32
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	01 90       	ld	r0, Z+
     760:	0d 92       	st	X+, r0
     762:	81 50       	subi	r24, 0x01	; 1
     764:	e1 f7       	brne	.-8      	; 0x75e <note_on+0x36>
	const uint32_t division_denominator[8] = {1, 3, 4, 2, 3, 8, 4, 6};
     766:	de 01       	movw	r26, r28
     768:	91 96       	adiw	r26, 0x21	; 33
     76a:	e0 e4       	ldi	r30, 0x40	; 64
     76c:	f0 e2       	ldi	r31, 0x20	; 32
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	81 50       	subi	r24, 0x01	; 1
     776:	e1 f7       	brne	.-8      	; 0x770 <note_on+0x48>
//	S: 1/4 1/6 3/8
//  a= q (1) /e (1/2) /s (1/4)
//  b= d (3/2) / x (1) / t (2/3)
//  note length = a^-2 * 2/3^(b-1)   ... too complicated, just make a lookup table/array
	
	if (get_toggle_switch_state())	
     778:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     77c:	88 23       	and	r24, r24
     77e:	39 f0       	breq	.+14     	; 0x78e <note_on+0x66>
		midi_send_noteon(serial_midi_device(), MIDI_CHAN, pitch, velocity);
     780:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	4c 2d       	mov	r20, r12
     788:	20 2f       	mov	r18, r16
     78a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <midi_send_noteon>
	
	current_time = TCC0.CNT;
     78e:	cc 24       	eor	r12, r12
     790:	dd 24       	eor	r13, r13
     792:	68 94       	set
     794:	d3 f8       	bld	r13, 3
     796:	f6 01       	movw	r30, r12
     798:	80 a1       	ldd	r24, Z+32	; 0x20
     79a:	91 a1       	ldd	r25, Z+33	; 0x21
     79c:	0f 2e       	mov	r0, r31
     79e:	f1 e4       	ldi	r31, 0x41	; 65
     7a0:	af 2e       	mov	r10, r31
     7a2:	bb 24       	eor	r11, r11
     7a4:	f0 2d       	mov	r31, r0
     7a6:	ac 0e       	add	r10, r28
     7a8:	bd 1e       	adc	r11, r29
     7aa:	f5 01       	movw	r30, r10
     7ac:	80 83       	st	Z, r24
     7ae:	91 83       	std	Z+1, r25	; 0x01

	next_note_on_time = TCC0.CCA * division_numerator[division];  //calculate the new value for Compare B (interrupt for new note)
     7b0:	f6 01       	movw	r30, r12
     7b2:	60 a5       	ldd	r22, Z+40	; 0x28
     7b4:	71 a5       	ldd	r23, Z+41	; 0x29
     7b6:	ff 24       	eor	r15, r15
     7b8:	ee 0c       	add	r14, r14
     7ba:	ff 1c       	adc	r15, r15
     7bc:	ee 0c       	add	r14, r14
     7be:	ff 1c       	adc	r15, r15
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	e8 0e       	add	r14, r24
     7c6:	f9 1e       	adc	r15, r25
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	f7 01       	movw	r30, r14
     7ce:	20 81       	ld	r18, Z
     7d0:	31 81       	ldd	r19, Z+1	; 0x01
     7d2:	42 81       	ldd	r20, Z+2	; 0x02
     7d4:	53 81       	ldd	r21, Z+3	; 0x03
     7d6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
     7da:	8e 01       	movw	r16, r28
     7dc:	0d 5b       	subi	r16, 0xBD	; 189
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	f8 01       	movw	r30, r16
     7e2:	60 83       	st	Z, r22
     7e4:	71 83       	std	Z+1, r23	; 0x01
     7e6:	82 83       	std	Z+2, r24	; 0x02
     7e8:	93 83       	std	Z+3, r25	; 0x03
	next_note_on_time = next_note_on_time / division_denominator[division];
     7ea:	60 81       	ld	r22, Z
     7ec:	71 81       	ldd	r23, Z+1	; 0x01
     7ee:	82 81       	ldd	r24, Z+2	; 0x02
     7f0:	93 81       	ldd	r25, Z+3	; 0x03
     7f2:	f7 01       	movw	r30, r14
     7f4:	20 a1       	ldd	r18, Z+32	; 0x20
     7f6:	31 a1       	ldd	r19, Z+33	; 0x21
     7f8:	42 a1       	ldd	r20, Z+34	; 0x22
     7fa:	53 a1       	ldd	r21, Z+35	; 0x23
     7fc:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     800:	f8 01       	movw	r30, r16
     802:	20 83       	st	Z, r18
     804:	31 83       	std	Z+1, r19	; 0x01
     806:	42 83       	std	Z+2, r20	; 0x02
     808:	53 83       	std	Z+3, r21	; 0x03
	
	next_cutoff_time = next_note_on_time * duration;
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	42 81       	ldd	r20, Z+2	; 0x02
     810:	53 81       	ldd	r21, Z+3	; 0x03
     812:	b4 01       	movw	r22, r8
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
     81c:	8e 01       	movw	r16, r28
     81e:	09 5b       	subi	r16, 0xB9	; 185
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	f8 01       	movw	r30, r16
     824:	60 83       	st	Z, r22
     826:	71 83       	std	Z+1, r23	; 0x01
     828:	82 83       	std	Z+2, r24	; 0x02
     82a:	93 83       	std	Z+3, r25	; 0x03
	next_cutoff_time = next_cutoff_time / 0xFFFF;
     82c:	60 81       	ld	r22, Z
     82e:	71 81       	ldd	r23, Z+1	; 0x01
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	93 81       	ldd	r25, Z+3	; 0x03
     834:	2f ef       	ldi	r18, 0xFF	; 255
     836:	3f ef       	ldi	r19, 0xFF	; 255
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     840:	f8 01       	movw	r30, r16
     842:	20 83       	st	Z, r18
     844:	31 83       	std	Z+1, r19	; 0x01
     846:	42 83       	std	Z+2, r20	; 0x02
     848:	53 83       	std	Z+3, r21	; 0x03
	
	next_cutoff_time += current_time;
     84a:	f5 01       	movw	r30, r10
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	f8 01       	movw	r30, r16
     852:	20 81       	ld	r18, Z
     854:	31 81       	ldd	r19, Z+1	; 0x01
     856:	42 81       	ldd	r20, Z+2	; 0x02
     858:	53 81       	ldd	r21, Z+3	; 0x03
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	a4 1f       	adc	r26, r20
     864:	b5 1f       	adc	r27, r21
     866:	80 83       	st	Z, r24
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	a2 83       	std	Z+2, r26	; 0x02
     86c:	b3 83       	std	Z+3, r27	; 0x03
	if (next_cutoff_time > TCC0.CCA)
     86e:	f6 01       	movw	r30, r12
     870:	20 a5       	ldd	r18, Z+40	; 0x28
     872:	31 a5       	ldd	r19, Z+41	; 0x29
     874:	f8 01       	movw	r30, r16
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	a2 81       	ldd	r26, Z+2	; 0x02
     87c:	b3 81       	ldd	r27, Z+3	; 0x03
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	28 17       	cp	r18, r24
     884:	39 07       	cpc	r19, r25
     886:	4a 07       	cpc	r20, r26
     888:	5b 07       	cpc	r21, r27
     88a:	a0 f4       	brcc	.+40     	; 0x8b4 <note_on+0x18c>
		next_cutoff_time = next_cutoff_time - TCC0.CCA;
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	a2 81       	ldd	r26, Z+2	; 0x02
     892:	b3 81       	ldd	r27, Z+3	; 0x03
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	38 e0       	ldi	r19, 0x08	; 8
     898:	f9 01       	movw	r30, r18
     89a:	20 a5       	ldd	r18, Z+40	; 0x28
     89c:	31 a5       	ldd	r19, Z+41	; 0x29
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	82 1b       	sub	r24, r18
     8a4:	93 0b       	sbc	r25, r19
     8a6:	a4 0b       	sbc	r26, r20
     8a8:	b5 0b       	sbc	r27, r21
     8aa:	f8 01       	movw	r30, r16
     8ac:	80 83       	st	Z, r24
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	a2 83       	std	Z+2, r26	; 0x02
     8b2:	b3 83       	std	Z+3, r27	; 0x03
	
	next_note_on_time += current_time;
     8b4:	fe 01       	movw	r30, r28
     8b6:	ef 5b       	subi	r30, 0xBF	; 191
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	fe 01       	movw	r30, r28
     8c0:	ed 5b       	subi	r30, 0xBD	; 189
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	20 81       	ld	r18, Z
     8c6:	31 81       	ldd	r19, Z+1	; 0x01
     8c8:	42 81       	ldd	r20, Z+2	; 0x02
     8ca:	53 81       	ldd	r21, Z+3	; 0x03
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	a4 1f       	adc	r26, r20
     8d6:	b5 1f       	adc	r27, r21
     8d8:	80 83       	st	Z, r24
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	a2 83       	std	Z+2, r26	; 0x02
     8de:	b3 83       	std	Z+3, r27	; 0x03
	if (next_note_on_time > TCC0.CCA)    //the counter will reset at CCA, so check for overflow
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b8 e0       	ldi	r27, 0x08	; 8
     8e4:	98 96       	adiw	r26, 0x28	; 40
     8e6:	2d 91       	ld	r18, X+
     8e8:	3c 91       	ld	r19, X
     8ea:	99 97       	sbiw	r26, 0x29	; 41
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	a2 81       	ldd	r26, Z+2	; 0x02
     8f2:	b3 81       	ldd	r27, Z+3	; 0x03
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	28 17       	cp	r18, r24
     8fa:	39 07       	cpc	r19, r25
     8fc:	4a 07       	cpc	r20, r26
     8fe:	5b 07       	cpc	r21, r27
     900:	a8 f4       	brcc	.+42     	; 0x92c <note_on+0x204>
		next_note_on_time = next_note_on_time - TCC0.CCA;
     902:	bf 01       	movw	r22, r30
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	a2 81       	ldd	r26, Z+2	; 0x02
     90a:	b3 81       	ldd	r27, Z+3	; 0x03
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	38 e0       	ldi	r19, 0x08	; 8
     910:	f9 01       	movw	r30, r18
     912:	20 a5       	ldd	r18, Z+40	; 0x28
     914:	31 a5       	ldd	r19, Z+41	; 0x29
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	82 1b       	sub	r24, r18
     91c:	93 0b       	sbc	r25, r19
     91e:	a4 0b       	sbc	r26, r20
     920:	b5 0b       	sbc	r27, r21
     922:	fb 01       	movw	r30, r22
     924:	80 83       	st	Z, r24
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	a2 83       	std	Z+2, r26	; 0x02
     92a:	b3 83       	std	Z+3, r27	; 0x03
		
	TCC0.CCB = (uint16_t) next_note_on_time;    //set compare B to new value
     92c:	fe 01       	movw	r30, r28
     92e:	ed 5b       	subi	r30, 0xBD	; 189
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	a2 81       	ldd	r26, Z+2	; 0x02
     938:	b3 81       	ldd	r27, Z+3	; 0x03
     93a:	e0 e0       	ldi	r30, 0x00	; 0
     93c:	f8 e0       	ldi	r31, 0x08	; 8
     93e:	82 a7       	std	Z+42, r24	; 0x2a
     940:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCC = (uint16_t) next_cutoff_time;     //set compare C to new value
     942:	de 01       	movw	r26, r28
     944:	a9 5b       	subi	r26, 0xB9	; 185
     946:	bf 4f       	sbci	r27, 0xFF	; 255
     948:	8d 91       	ld	r24, X+
     94a:	9d 91       	ld	r25, X+
     94c:	0d 90       	ld	r0, X+
     94e:	bc 91       	ld	r27, X
     950:	a0 2d       	mov	r26, r0
     952:	84 a7       	std	Z+44, r24	; 0x2c
     954:	95 a7       	std	Z+45, r25	; 0x2d
	TCC0.CTRLB |= 0x20;   //enable CCB (note on)
     956:	81 81       	ldd	r24, Z+1	; 0x01
     958:	80 62       	ori	r24, 0x20	; 32
     95a:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLB |= 0x40;   //enable CCC (note off) 
     95c:	81 81       	ldd	r24, Z+1	; 0x01
     95e:	80 64       	ori	r24, 0x40	; 64
     960:	81 83       	std	Z+1, r24	; 0x01
}
     962:	c6 5b       	subi	r28, 0xB6	; 182
     964:	df 4f       	sbci	r29, 0xFF	; 255
     966:	cd bf       	out	0x3d, r28	; 61
     968:	de bf       	out	0x3e, r29	; 62
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	08 95       	ret

00000984 <__vector_16>:



ISR(TCC0_CCA_vect){
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	8f 93       	push	r24
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
	TCC0.CNT = 0;      //reset beat clock
     994:	e0 e0       	ldi	r30, 0x00	; 0
     996:	f8 e0       	ldi	r31, 0x08	; 8
     998:	10 a2       	std	Z+32, r1	; 0x20
     99a:	11 a2       	std	Z+33, r1	; 0x21
	beat_overflow = 1; //signal new beat flag
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 a0 21 	sts	0x21A0, r24
	
/*	if (get_toggle_switch_state()){
		midi_send_noteoff(serial_midi_device(),MIDI_CHAN,100,100);
		midi_send_noteon(serial_midi_device(),MIDI_CHAN,100,100);
	}*/	
}
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	8f 91       	pop	r24
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_17>:

ISR(TCC0_CCB_vect){
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	2f 93       	push	r18
     9be:	3f 93       	push	r19
     9c0:	4f 93       	push	r20
     9c2:	5f 93       	push	r21
     9c4:	6f 93       	push	r22
     9c6:	7f 93       	push	r23
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
	note_on(next_pitch,next_velocity,next_division,next_duration);
     9d4:	20 91 92 22 	lds	r18, 0x2292
     9d8:	30 91 93 22 	lds	r19, 0x2293
     9dc:	80 91 90 22 	lds	r24, 0x2290
     9e0:	60 91 94 22 	lds	r22, 0x2294
     9e4:	40 91 91 22 	lds	r20, 0x2291
     9e8:	0e 94 94 03 	call	0x728	; 0x728 <note_on>
	current_pitch = next_pitch;
     9ec:	80 91 90 22 	lds	r24, 0x2290
     9f0:	80 93 8e 22 	sts	0x228E, r24
	current_velocity = next_velocity;
     9f4:	80 91 94 22 	lds	r24, 0x2294
     9f8:	80 93 8f 22 	sts	0x228F, r24
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_18>:

ISR(TCC0_CCC_vect){
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	note_off(current_pitch, current_velocity);
     a40:	80 91 8e 22 	lds	r24, 0x228E
     a44:	60 91 8f 22 	lds	r22, 0x228F
     a48:	0e 94 82 03 	call	0x704	; 0x704 <note_off>
	TCC0.CTRLB &= ~0x40;  //disable CCC (note off)
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f8 e0       	ldi	r31, 0x08	; 8
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	8f 7b       	andi	r24, 0xBF	; 191
     a54:	81 83       	std	Z+1, r24	; 0x01
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_19>:

ISR(TCC0_CCD_vect){
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
	//midi_send_clock(serial_midi_device());  //send clock tick
	//calculate time for next clock tick
}
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_91>:


ISR(USARTD1_RXC_vect){
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     aae:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
     ab2:	40 91 b0 09 	lds	r20, 0x09B0
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <midi_device_input>
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <test_pots>:

void test_pots(){
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     aea:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	uint8_t selPOT = 0;
     aee:	ff 24       	eor	r15, r15
	
	while(1){
		preloop_functions();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     af0:	c4 e6       	ldi	r28, 0x64	; 100
     af2:	d0 e0       	ldi	r29, 0x00	; 0
	startup_functions();
	
	uint8_t selPOT = 0;
	
	while(1){
		preloop_functions();
     af4:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     af8:	8f 2d       	mov	r24, r15
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	43 e6       	ldi	r20, 0x63	; 99
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     b06:	2f 2d       	mov	r18, r15
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	2c 9f       	mul	r18, r28
     b10:	80 01       	movw	r16, r0
     b12:	2d 9f       	mul	r18, r29
     b14:	10 0d       	add	r17, r0
     b16:	3c 9f       	mul	r19, r28
     b18:	10 0d       	add	r17, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	08 0f       	add	r16, r24
     b1e:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     b20:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	29 f4       	brne	.+10     	; 0xb32 <test_pots+0x52>
			selPOT++;
     b28:	f3 94       	inc	r15
			if (selPOT>4)
     b2a:	8f 2d       	mov	r24, r15
     b2c:	85 30       	cpi	r24, 0x05	; 5
     b2e:	08 f0       	brcs	.+2      	; 0xb32 <test_pots+0x52>
				selPOT = 0;
     b30:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	
	}	
     b3e:	da cf       	rjmp	.-76     	; 0xaf4 <test_pots+0x14>

00000b40 <test_switches>:
	
	
}
*/

void test_switches(){
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     b44:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	while(1){
		preloop_functions();
     b48:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     b4c:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     b50:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     b52:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     b56:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     b58:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     b5c:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	60 2f       	mov	r22, r16
     b62:	41 2f       	mov	r20, r17
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
     b6c:	ed cf       	rjmp	.-38     	; 0xb48 <test_switches+0x8>

00000b6e <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	startup_functions();
     b7c:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     b80:	c0 e0       	ldi	r28, 0x00	; 0
     b82:	d0 e0       	ldi	r29, 0x00	; 0
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     b84:	0f 2e       	mov	r0, r31
     b86:	f7 ee       	ldi	r31, 0xE7	; 231
     b88:	cf 2e       	mov	r12, r31
     b8a:	f3 e0       	ldi	r31, 0x03	; 3
     b8c:	df 2e       	mov	r13, r31
     b8e:	f0 2d       	mov	r31, r0
	uint16_t i = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     b90:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     b94:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     b98:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     b9a:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     b9e:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     ba0:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     ba4:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     ba6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	31 f4       	brne	.+12     	; 0xbba <test_seven_segment+0x4c>
			if (i == 999)
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	c7 3e       	cpi	r28, 0xE7	; 231
     bb2:	d8 07       	cpc	r29, r24
     bb4:	51 f0       	breq	.+20     	; 0xbca <test_seven_segment+0x5c>
				i = 0;
			else
				i++;
     bb6:	21 96       	adiw	r28, 0x01	; 1
     bb8:	0c c0       	rjmp	.+24     	; 0xbd2 <test_seven_segment+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     bba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	41 f4       	brne	.+16     	; 0xbd2 <test_seven_segment+0x64>
			if (i == 0)
     bc2:	20 97       	sbiw	r28, 0x00	; 0
     bc4:	29 f0       	breq	.+10     	; 0xbd0 <test_seven_segment+0x62>
				i = 999;
			else
				i += -1;
     bc6:	21 97       	sbiw	r28, 0x01	; 1
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <test_seven_segment+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     bca:	c0 e0       	ldi	r28, 0x00	; 0
     bcc:	d0 e0       	ldi	r29, 0x00	; 0
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <test_seven_segment+0x64>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     bd0:	e6 01       	movw	r28, r12
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	60 2f       	mov	r22, r16
     bd6:	41 2f       	mov	r20, r17
     bd8:	2f 2d       	mov	r18, r15
     bda:	8e 01       	movw	r16, r28
     bdc:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     be0:	d7 cf       	rjmp	.-82     	; 0xb90 <test_seven_segment+0x22>

00000be2 <test_ADC>:
}

void test_ADC(){
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	startup_functions();
     bf2:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     bfa:	0f 2e       	mov	r0, r31
     bfc:	f4 e6       	ldi	r31, 0x64	; 100
     bfe:	cf 2e       	mov	r12, r31
     c00:	dd 24       	eor	r13, r13
     c02:	f0 2d       	mov	r31, r0
	uint16_t pot_select = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     c04:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     c08:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     c0c:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     c0e:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     c12:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     c14:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     c18:	e8 2e       	mov	r14, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     c1a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	29 f4       	brne	.+10     	; 0xc2c <test_ADC+0x4a>
			if (pot_select == 4)
     c22:	c4 30       	cpi	r28, 0x04	; 4
     c24:	d1 05       	cpc	r29, r1
     c26:	51 f0       	breq	.+20     	; 0xc3c <test_ADC+0x5a>
				pot_select = 0;
			else
				pot_select++;
     c28:	21 96       	adiw	r28, 0x01	; 1
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <test_ADC+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     c2c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	49 f4       	brne	.+18     	; 0xc46 <test_ADC+0x64>
			if (pot_select == 0)
     c34:	20 97       	sbiw	r28, 0x00	; 0
     c36:	29 f0       	breq	.+10     	; 0xc42 <test_ADC+0x60>
				pot_select = 4;
			else
				pot_select += -1;
     c38:	21 97       	sbiw	r28, 0x01	; 1
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <test_ADC+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     c3c:	c0 e0       	ldi	r28, 0x00	; 0
     c3e:	d0 e0       	ldi	r29, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <test_ADC+0x64>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     c42:	c4 e0       	ldi	r28, 0x04	; 4
     c44:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     c46:	8c 2f       	mov	r24, r28
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	43 e6       	ldi	r20, 0x63	; 99
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     c54:	cc 9d       	mul	r28, r12
     c56:	f0 01       	movw	r30, r0
     c58:	cd 9d       	mul	r28, r13
     c5a:	f0 0d       	add	r31, r0
     c5c:	dc 9d       	mul	r29, r12
     c5e:	f0 0d       	add	r31, r0
     c60:	11 24       	eor	r1, r1
     c62:	e8 0f       	add	r30, r24
     c64:	f9 1f       	adc	r31, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	6f 2d       	mov	r22, r15
     c6a:	41 2f       	mov	r20, r17
     c6c:	2e 2d       	mov	r18, r14
     c6e:	8f 01       	movw	r16, r30
     c70:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     c74:	c7 cf       	rjmp	.-114    	; 0xc04 <test_ADC+0x22>

00000c76 <test_xnor_out>:
}

void test_xnor_out(){
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     c86:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     c8a:	c4 e6       	ldi	r28, 0x64	; 100
     c8c:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     c8e:	cc 24       	eor	r12, r12
     c90:	dd 24       	eor	r13, r13
     c92:	68 94       	set
     c94:	c6 f8       	bld	r12, 6
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     c96:	0f 2e       	mov	r0, r31
     c98:	f8 e9       	ldi	r31, 0x98	; 152
     c9a:	ef 2e       	mov	r14, r31
     c9c:	ff 24       	eor	r15, r15
     c9e:	f0 2d       	mov	r31, r0
	
	startup_functions();
//	serial_midi_init();
	
	while(1){
		preloop_functions();
     ca0:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     ca4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	29 f4       	brne	.+10     	; 0xcb6 <test_xnor_out+0x40>
			if (note <= 64)
     cac:	c1 34       	cpi	r28, 0x41	; 65
     cae:	d1 05       	cpc	r29, r1
     cb0:	58 f0       	brcs	.+22     	; 0xcc8 <test_xnor_out+0x52>
				note = 152;
			else
				note += -1;
     cb2:	21 97       	sbiw	r28, 0x01	; 1
     cb4:	0c c0       	rjmp	.+24     	; 0xcce <test_xnor_out+0x58>
		}
		else if (get_encoder() == TURN_CW){
     cb6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	41 f4       	brne	.+16     	; 0xcce <test_xnor_out+0x58>
			if (note >= 152)
     cbe:	c8 39       	cpi	r28, 0x98	; 152
     cc0:	d1 05       	cpc	r29, r1
     cc2:	20 f4       	brcc	.+8      	; 0xccc <test_xnor_out+0x56>
				note = 64;
			else
				note++;
     cc4:	21 96       	adiw	r28, 0x01	; 1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <test_xnor_out+0x58>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     cc8:	e7 01       	movw	r28, r14
     cca:	01 c0       	rjmp	.+2      	; 0xcce <test_xnor_out+0x58>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     ccc:	e6 01       	movw	r28, r12
			else
				note++;
		}				
					
		if (get_encoder_switch_edge() == EDGE_RISE)
     cce:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	41 f4       	brne	.+16     	; 0xce6 <test_xnor_out+0x70>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
     cd6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	4c 2f       	mov	r20, r28
     cde:	28 e7       	ldi	r18, 0x78	; 120
     ce0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <midi_send_noteon>
     ce4:	0b c0       	rjmp	.+22     	; 0xcfc <test_xnor_out+0x86>
		else if (get_encoder_switch_edge() == EDGE_FALL)
     ce6:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	39 f4       	brne	.+14     	; 0xcfc <test_xnor_out+0x86>
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
     cee:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	4c 2f       	mov	r20, r28
     cf6:	28 e7       	ldi	r18, 0x78	; 120
     cf8:	0e 94 6d 0b 	call	0x16da	; 0x16da <midi_send_noteoff>
			
		status_LED = get_encoder_switch_state();
     cfc:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     d00:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     d02:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d06:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     d08:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
			
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	01 30       	cpi	r16, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <test_xnor_out+0x9e>
     d12:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	09 f0       	breq	.+2      	; 0xd1c <test_xnor_out+0xa6>
     d1a:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     d1c:	81 2f       	mov	r24, r17
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	8e 01       	movw	r16, r28
     d22:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     d26:	bc cf       	rjmp	.-136    	; 0xca0 <test_xnor_out+0x2a>

00000d28 <test_xnor_in>:
	
}

void test_xnor_in(){
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     d38:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	serial_midi_init();
     d3c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <serial_midi_init>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     d40:	c4 e6       	ldi	r28, 0x64	; 100
     d42:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     d44:	cc 24       	eor	r12, r12
     d46:	dd 24       	eor	r13, r13
     d48:	68 94       	set
     d4a:	c6 f8       	bld	r12, 6
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     d4c:	0f 2e       	mov	r0, r31
     d4e:	f8 e9       	ldi	r31, 0x98	; 152
     d50:	ef 2e       	mov	r14, r31
     d52:	ff 24       	eor	r15, r15
     d54:	f0 2d       	mov	r31, r0
	
	startup_functions();
	serial_midi_init();
	
	while(1){
		preloop_functions();
     d56:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     d5a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	29 f4       	brne	.+10     	; 0xd6c <test_xnor_in+0x44>
			if (note <= 64)
     d62:	c1 34       	cpi	r28, 0x41	; 65
     d64:	d1 05       	cpc	r29, r1
     d66:	58 f0       	brcs	.+22     	; 0xd7e <test_xnor_in+0x56>
				note = 152;
			else
				note += -1;
     d68:	21 97       	sbiw	r28, 0x01	; 1
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <test_xnor_in+0x5c>
		}
		else if (get_encoder() == TURN_CW){
     d6c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	41 f4       	brne	.+16     	; 0xd84 <test_xnor_in+0x5c>
			if (note >= 152)
     d74:	c8 39       	cpi	r28, 0x98	; 152
     d76:	d1 05       	cpc	r29, r1
     d78:	20 f4       	brcc	.+8      	; 0xd82 <test_xnor_in+0x5a>
				note = 64;
			else
				note++;
     d7a:	21 96       	adiw	r28, 0x01	; 1
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <test_xnor_in+0x5c>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     d7e:	e7 01       	movw	r28, r14
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <test_xnor_in+0x5c>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     d82:	e6 01       	movw	r28, r12
/*		if (get_encoder_switch_edge() == EDGE_RISE)
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
     d84:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     d88:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     d8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d8e:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     d90:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	01 30       	cpi	r16, 0x01	; 1
     d98:	09 f0       	breq	.+2      	; 0xd9c <test_xnor_in+0x74>
     d9a:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	09 f0       	breq	.+2      	; 0xda4 <test_xnor_in+0x7c>
     da2:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     da4:	81 2f       	mov	r24, r17
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	8e 01       	movw	r16, r28
     daa:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     dae:	d3 cf       	rjmp	.-90     	; 0xd56 <test_xnor_in+0x2e>

00000db0 <test_blank>:
	
}

void test_blank(){
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     db4:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	while(1){
		preloop_functions();
     db8:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
     dcc:	f5 cf       	rjmp	.-22     	; 0xdb8 <test_blank+0x8>

00000dce <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	ae 97       	sbiw	r28, 0x2e	; 46
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     de0:	de 01       	movw	r26, r28
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	e0 e2       	ldi	r30, 0x20	; 32
     de6:	f0 e2       	ldi	r31, 0x20	; 32
     de8:	20 e2       	ldi	r18, 0x20	; 32
     dea:	01 90       	ld	r0, Z+
     dec:	0d 92       	st	X+, r0
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	e1 f7       	brne	.-8      	; 0xdea <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     df2:	20 91 00 08 	lds	r18, 0x0800
     df6:	2f 70       	andi	r18, 0x0F	; 15
     df8:	29 a3       	std	Y+33, r18	; 0x21
	volatile uint8_t new_clock_divide_select = 1;
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	2a a3       	std	Y+34, r18	; 0x22
	volatile uint32_t adjusted_count = 0;
     dfe:	1b a2       	std	Y+35, r1	; 0x23
     e00:	1c a2       	std	Y+36, r1	; 0x24
     e02:	1d a2       	std	Y+37, r1	; 0x25
     e04:	1e a2       	std	Y+38, r1	; 0x26
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     e06:	9c 01       	movw	r18, r24
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	77 e8       	ldi	r23, 0x87	; 135
     e10:	83 e9       	ldi	r24, 0x93	; 147
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     e18:	2f a3       	std	Y+39, r18	; 0x27
     e1a:	38 a7       	std	Y+40, r19	; 0x28
     e1c:	49 a7       	std	Y+41, r20	; 0x29
     e1e:	5a a7       	std	Y+42, r21	; 0x2a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     e20:	6f a1       	ldd	r22, Y+39	; 0x27
     e22:	78 a5       	ldd	r23, Y+40	; 0x28
     e24:	89 a5       	ldd	r24, Y+41	; 0x29
     e26:	9a a5       	ldd	r25, Y+42	; 0x2a
     e28:	ea a1       	ldd	r30, Y+34	; 0x22
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	ec 0f       	add	r30, r28
     e36:	fd 1f       	adc	r31, r29
     e38:	21 81       	ldd	r18, Z+1	; 0x01
     e3a:	32 81       	ldd	r19, Z+2	; 0x02
     e3c:	43 81       	ldd	r20, Z+3	; 0x03
     e3e:	54 81       	ldd	r21, Z+4	; 0x04
     e40:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     e44:	2b a7       	std	Y+43, r18	; 0x2b
     e46:	3c a7       	std	Y+44, r19	; 0x2c
     e48:	4d a7       	std	Y+45, r20	; 0x2d
     e4a:	5e a7       	std	Y+46, r21	; 0x2e
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     e4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e50:	ad a5       	ldd	r26, Y+45	; 0x2d
     e52:	be a5       	ldd	r27, Y+46	; 0x2e
     e54:	80 30       	cpi	r24, 0x00	; 0
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	92 07       	cpc	r25, r18
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	a2 07       	cpc	r26, r18
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	b2 07       	cpc	r27, r18
     e62:	98 f1       	brcs	.+102    	; 0xeca <BPM_to_TMR+0xfc>
		new_clock_divide_select++;             //try the next highest divider
     e64:	8a a1       	ldd	r24, Y+34	; 0x22
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     e6a:	8a a1       	ldd	r24, Y+34	; 0x22
     e6c:	88 30       	cpi	r24, 0x08	; 8
     e6e:	40 f0       	brcs	.+16     	; 0xe80 <BPM_to_TMR+0xb2>
     e70:	a8 c0       	rjmp	.+336    	; 0xfc2 <BPM_to_TMR+0x1f4>
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     e72:	8a a1       	ldd	r24, Y+34	; 0x22
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     e78:	8a a1       	ldd	r24, Y+34	; 0x22
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	20 f0       	brcs	.+8      	; 0xe86 <BPM_to_TMR+0xb8>
     e7e:	a1 c0       	rjmp	.+322    	; 0xfc2 <BPM_to_TMR+0x1f4>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     e80:	8e 01       	movw	r16, r28
     e82:	0f 5f       	subi	r16, 0xFF	; 255
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	6f a1       	ldd	r22, Y+39	; 0x27
     e88:	78 a5       	ldd	r23, Y+40	; 0x28
     e8a:	89 a5       	ldd	r24, Y+41	; 0x29
     e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e8e:	ea a1       	ldd	r30, Y+34	; 0x22
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	e0 0f       	add	r30, r16
     e9c:	f1 1f       	adc	r31, r17
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	42 81       	ldd	r20, Z+2	; 0x02
     ea4:	53 81       	ldd	r21, Z+3	; 0x03
     ea6:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     eaa:	2b a7       	std	Y+43, r18	; 0x2b
     eac:	3c a7       	std	Y+44, r19	; 0x2c
     eae:	4d a7       	std	Y+45, r20	; 0x2d
     eb0:	5e a7       	std	Y+46, r21	; 0x2e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     eb2:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb4:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb6:	ad a5       	ldd	r26, Y+45	; 0x2d
     eb8:	be a5       	ldd	r27, Y+46	; 0x2e
     eba:	80 30       	cpi	r24, 0x00	; 0
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	9e 07       	cpc	r25, r30
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	ae 07       	cpc	r26, r30
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	be 07       	cpc	r27, r30
     ec8:	a0 f6       	brcc	.-88     	; 0xe72 <BPM_to_TMR+0xa4>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     eca:	80 91 00 08 	lds	r24, 0x0800
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <BPM_to_TMR+0x106>
     ed2:	6d c0       	rjmp	.+218    	; 0xfae <BPM_to_TMR+0x1e0>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     ed4:	99 a1       	ldd	r25, Y+33	; 0x21
     ed6:	8a a1       	ldd	r24, Y+34	; 0x22
     ed8:	98 17       	cp	r25, r24
     eda:	09 f4       	brne	.+2      	; 0xede <BPM_to_TMR+0x110>
     edc:	66 c0       	rjmp	.+204    	; 0xfaa <BPM_to_TMR+0x1dc>
			TCC0.CTRLA = 0x00;
     ede:	e0 e0       	ldi	r30, 0x00	; 0
     ee0:	f8 e0       	ldi	r31, 0x08	; 8
     ee2:	10 82       	st	Z, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     ee4:	60 a1       	ldd	r22, Z+32	; 0x20
     ee6:	71 a1       	ldd	r23, Z+33	; 0x21
     ee8:	ea a1       	ldd	r30, Y+34	; 0x22
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	8e 01       	movw	r16, r28
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	e0 0f       	add	r30, r16
     efc:	f1 1f       	adc	r31, r17
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	42 81       	ldd	r20, Z+2	; 0x02
     f08:	53 81       	ldd	r21, Z+3	; 0x03
     f0a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
     f0e:	6b a3       	std	Y+35, r22	; 0x23
     f10:	7c a3       	std	Y+36, r23	; 0x24
     f12:	8d a3       	std	Y+37, r24	; 0x25
     f14:	9e a3       	std	Y+38, r25	; 0x26
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     f16:	6b a1       	ldd	r22, Y+35	; 0x23
     f18:	7c a1       	ldd	r23, Y+36	; 0x24
     f1a:	8d a1       	ldd	r24, Y+37	; 0x25
     f1c:	9e a1       	ldd	r25, Y+38	; 0x26
     f1e:	29 a1       	ldd	r18, Y+33	; 0x21
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	02 0f       	add	r16, r18
     f2c:	13 1f       	adc	r17, r19
     f2e:	f8 01       	movw	r30, r16
     f30:	20 81       	ld	r18, Z
     f32:	31 81       	ldd	r19, Z+1	; 0x01
     f34:	42 81       	ldd	r20, Z+2	; 0x02
     f36:	53 81       	ldd	r21, Z+3	; 0x03
     f38:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
     f3c:	2b a3       	std	Y+35, r18	; 0x23
     f3e:	3c a3       	std	Y+36, r19	; 0x24
     f40:	4d a3       	std	Y+37, r20	; 0x25
     f42:	5e a3       	std	Y+38, r21	; 0x26
			while (adjusted_count > compare_value)
     f44:	2b a1       	ldd	r18, Y+35	; 0x23
     f46:	3c a1       	ldd	r19, Y+36	; 0x24
     f48:	4d a1       	ldd	r20, Y+37	; 0x25
     f4a:	5e a1       	ldd	r21, Y+38	; 0x26
     f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f50:	ad a5       	ldd	r26, Y+45	; 0x2d
     f52:	be a5       	ldd	r27, Y+46	; 0x2e
     f54:	82 17       	cp	r24, r18
     f56:	93 07       	cpc	r25, r19
     f58:	a4 07       	cpc	r26, r20
     f5a:	b5 07       	cpc	r27, r21
     f5c:	e8 f4       	brcc	.+58     	; 0xf98 <BPM_to_TMR+0x1ca>
				adjusted_count = adjusted_count - compare_value;
     f5e:	8b a1       	ldd	r24, Y+35	; 0x23
     f60:	9c a1       	ldd	r25, Y+36	; 0x24
     f62:	ad a1       	ldd	r26, Y+37	; 0x25
     f64:	be a1       	ldd	r27, Y+38	; 0x26
     f66:	2b a5       	ldd	r18, Y+43	; 0x2b
     f68:	3c a5       	ldd	r19, Y+44	; 0x2c
     f6a:	4d a5       	ldd	r20, Y+45	; 0x2d
     f6c:	5e a5       	ldd	r21, Y+46	; 0x2e
     f6e:	82 1b       	sub	r24, r18
     f70:	93 0b       	sbc	r25, r19
     f72:	a4 0b       	sbc	r26, r20
     f74:	b5 0b       	sbc	r27, r21
     f76:	8b a3       	std	Y+35, r24	; 0x23
     f78:	9c a3       	std	Y+36, r25	; 0x24
     f7a:	ad a3       	std	Y+37, r26	; 0x25
     f7c:	be a3       	std	Y+38, r27	; 0x26
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     f7e:	2b a1       	ldd	r18, Y+35	; 0x23
     f80:	3c a1       	ldd	r19, Y+36	; 0x24
     f82:	4d a1       	ldd	r20, Y+37	; 0x25
     f84:	5e a1       	ldd	r21, Y+38	; 0x26
     f86:	8b a5       	ldd	r24, Y+43	; 0x2b
     f88:	9c a5       	ldd	r25, Y+44	; 0x2c
     f8a:	ad a5       	ldd	r26, Y+45	; 0x2d
     f8c:	be a5       	ldd	r27, Y+46	; 0x2e
     f8e:	82 17       	cp	r24, r18
     f90:	93 07       	cpc	r25, r19
     f92:	a4 07       	cpc	r26, r20
     f94:	b5 07       	cpc	r27, r21
     f96:	18 f3       	brcs	.-58     	; 0xf5e <BPM_to_TMR+0x190>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     f98:	8b a1       	ldd	r24, Y+35	; 0x23
     f9a:	9c a1       	ldd	r25, Y+36	; 0x24
     f9c:	ad a1       	ldd	r26, Y+37	; 0x25
     f9e:	be a1       	ldd	r27, Y+38	; 0x26
     fa0:	e0 e0       	ldi	r30, 0x00	; 0
     fa2:	f8 e0       	ldi	r31, 0x08	; 8
     fa4:	80 a3       	std	Z+32, r24	; 0x20
     fa6:	91 a3       	std	Z+33, r25	; 0x21
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <BPM_to_TMR+0x1e0>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     faa:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     fae:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fb2:	ad a5       	ldd	r26, Y+45	; 0x2d
     fb4:	be a5       	ldd	r27, Y+46	; 0x2e
     fb6:	e0 e0       	ldi	r30, 0x00	; 0
     fb8:	f8 e0       	ldi	r31, 0x08	; 8
     fba:	80 a7       	std	Z+40, r24	; 0x28
     fbc:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     fbe:	8a a1       	ldd	r24, Y+34	; 0x22
     fc0:	80 83       	st	Z, r24

	return;
}
     fc2:	ae 96       	adiw	r28, 0x2e	; 46
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	ae 97       	sbiw	r28, 0x2e	; 46
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
     fe4:	de 01       	movw	r26, r28
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	e0 e0       	ldi	r30, 0x00	; 0
     fea:	f0 e2       	ldi	r31, 0x20	; 32
     fec:	20 e2       	ldi	r18, 0x20	; 32
     fee:	01 90       	ld	r0, Z+
     ff0:	0d 92       	st	X+, r0
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	e1 f7       	brne	.-8      	; 0xfee <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     ff6:	20 91 00 08 	lds	r18, 0x0800
     ffa:	2f 70       	andi	r18, 0x0F	; 15
     ffc:	29 a3       	std	Y+33, r18	; 0x21
	volatile uint8_t new_clock_divide_select = 1;
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	2a a3       	std	Y+34, r18	; 0x22
	volatile uint32_t adjusted_count = 0;
    1002:	1b a2       	std	Y+35, r1	; 0x23
    1004:	1c a2       	std	Y+36, r1	; 0x24
    1006:	1d a2       	std	Y+37, r1	; 0x25
    1008:	1e a2       	std	Y+38, r1	; 0x26
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
    100a:	9c 01       	movw	r18, r24
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	78 ea       	ldi	r23, 0xA8	; 168
    1014:	84 ed       	ldi	r24, 0xD4	; 212
    1016:	95 e5       	ldi	r25, 0x55	; 85
    1018:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    101c:	2f a3       	std	Y+39, r18	; 0x27
    101e:	38 a7       	std	Y+40, r19	; 0x28
    1020:	49 a7       	std	Y+41, r20	; 0x29
    1022:	5a a7       	std	Y+42, r21	; 0x2a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    1024:	6f a1       	ldd	r22, Y+39	; 0x27
    1026:	78 a5       	ldd	r23, Y+40	; 0x28
    1028:	89 a5       	ldd	r24, Y+41	; 0x29
    102a:	9a a5       	ldd	r25, Y+42	; 0x2a
    102c:	ea a1       	ldd	r30, Y+34	; 0x22
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ec 0f       	add	r30, r28
    103a:	fd 1f       	adc	r31, r29
    103c:	21 81       	ldd	r18, Z+1	; 0x01
    103e:	32 81       	ldd	r19, Z+2	; 0x02
    1040:	43 81       	ldd	r20, Z+3	; 0x03
    1042:	54 81       	ldd	r21, Z+4	; 0x04
    1044:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    1048:	2b a7       	std	Y+43, r18	; 0x2b
    104a:	3c a7       	std	Y+44, r19	; 0x2c
    104c:	4d a7       	std	Y+45, r20	; 0x2d
    104e:	5e a7       	std	Y+46, r21	; 0x2e
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    1050:	8b a5       	ldd	r24, Y+43	; 0x2b
    1052:	9c a5       	ldd	r25, Y+44	; 0x2c
    1054:	ad a5       	ldd	r26, Y+45	; 0x2d
    1056:	be a5       	ldd	r27, Y+46	; 0x2e
    1058:	80 30       	cpi	r24, 0x00	; 0
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	92 07       	cpc	r25, r18
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	a2 07       	cpc	r26, r18
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	b2 07       	cpc	r27, r18
    1066:	98 f1       	brcs	.+102    	; 0x10ce <BPM_to_TMR2+0xfc>
		new_clock_divide_select++;             //try the next highest divider
    1068:	8a a1       	ldd	r24, Y+34	; 0x22
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
    106e:	8a a1       	ldd	r24, Y+34	; 0x22
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	40 f0       	brcs	.+16     	; 0x1084 <BPM_to_TMR2+0xb2>
    1074:	b5 c0       	rjmp	.+362    	; 0x11e0 <BPM_to_TMR2+0x20e>
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
    1076:	8a a1       	ldd	r24, Y+34	; 0x22
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
    107c:	8a a1       	ldd	r24, Y+34	; 0x22
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	20 f0       	brcs	.+8      	; 0x108a <BPM_to_TMR2+0xb8>
    1082:	ae c0       	rjmp	.+348    	; 0x11e0 <BPM_to_TMR2+0x20e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    1084:	8e 01       	movw	r16, r28
    1086:	0f 5f       	subi	r16, 0xFF	; 255
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	6f a1       	ldd	r22, Y+39	; 0x27
    108c:	78 a5       	ldd	r23, Y+40	; 0x28
    108e:	89 a5       	ldd	r24, Y+41	; 0x29
    1090:	9a a5       	ldd	r25, Y+42	; 0x2a
    1092:	ea a1       	ldd	r30, Y+34	; 0x22
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e0 0f       	add	r30, r16
    10a0:	f1 1f       	adc	r31, r17
    10a2:	20 81       	ld	r18, Z
    10a4:	31 81       	ldd	r19, Z+1	; 0x01
    10a6:	42 81       	ldd	r20, Z+2	; 0x02
    10a8:	53 81       	ldd	r21, Z+3	; 0x03
    10aa:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    10ae:	2b a7       	std	Y+43, r18	; 0x2b
    10b0:	3c a7       	std	Y+44, r19	; 0x2c
    10b2:	4d a7       	std	Y+45, r20	; 0x2d
    10b4:	5e a7       	std	Y+46, r21	; 0x2e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    10b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ba:	ad a5       	ldd	r26, Y+45	; 0x2d
    10bc:	be a5       	ldd	r27, Y+46	; 0x2e
    10be:	80 30       	cpi	r24, 0x00	; 0
    10c0:	e0 e0       	ldi	r30, 0x00	; 0
    10c2:	9e 07       	cpc	r25, r30
    10c4:	e1 e0       	ldi	r30, 0x01	; 1
    10c6:	ae 07       	cpc	r26, r30
    10c8:	e0 e0       	ldi	r30, 0x00	; 0
    10ca:	be 07       	cpc	r27, r30
    10cc:	a0 f6       	brcc	.-88     	; 0x1076 <BPM_to_TMR2+0xa4>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
    10ce:	80 91 00 08 	lds	r24, 0x0800
    10d2:	88 23       	and	r24, r24
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <BPM_to_TMR2+0x106>
    10d6:	6d c0       	rjmp	.+218    	; 0x11b2 <BPM_to_TMR2+0x1e0>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
    10d8:	99 a1       	ldd	r25, Y+33	; 0x21
    10da:	8a a1       	ldd	r24, Y+34	; 0x22
    10dc:	98 17       	cp	r25, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <BPM_to_TMR2+0x110>
    10e0:	66 c0       	rjmp	.+204    	; 0x11ae <BPM_to_TMR2+0x1dc>
			TCC0.CTRLA = 0x00;
    10e2:	e0 e0       	ldi	r30, 0x00	; 0
    10e4:	f8 e0       	ldi	r31, 0x08	; 8
    10e6:	10 82       	st	Z, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
    10e8:	60 a1       	ldd	r22, Z+32	; 0x20
    10ea:	71 a1       	ldd	r23, Z+33	; 0x21
    10ec:	ea a1       	ldd	r30, Y+34	; 0x22
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	8e 01       	movw	r16, r28
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	e0 0f       	add	r30, r16
    1100:	f1 1f       	adc	r31, r17
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 81       	ld	r18, Z
    1108:	31 81       	ldd	r19, Z+1	; 0x01
    110a:	42 81       	ldd	r20, Z+2	; 0x02
    110c:	53 81       	ldd	r21, Z+3	; 0x03
    110e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
    1112:	6b a3       	std	Y+35, r22	; 0x23
    1114:	7c a3       	std	Y+36, r23	; 0x24
    1116:	8d a3       	std	Y+37, r24	; 0x25
    1118:	9e a3       	std	Y+38, r25	; 0x26
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
    111a:	6b a1       	ldd	r22, Y+35	; 0x23
    111c:	7c a1       	ldd	r23, Y+36	; 0x24
    111e:	8d a1       	ldd	r24, Y+37	; 0x25
    1120:	9e a1       	ldd	r25, Y+38	; 0x26
    1122:	29 a1       	ldd	r18, Y+33	; 0x21
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	02 0f       	add	r16, r18
    1130:	13 1f       	adc	r17, r19
    1132:	f8 01       	movw	r30, r16
    1134:	20 81       	ld	r18, Z
    1136:	31 81       	ldd	r19, Z+1	; 0x01
    1138:	42 81       	ldd	r20, Z+2	; 0x02
    113a:	53 81       	ldd	r21, Z+3	; 0x03
    113c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    1140:	2b a3       	std	Y+35, r18	; 0x23
    1142:	3c a3       	std	Y+36, r19	; 0x24
    1144:	4d a3       	std	Y+37, r20	; 0x25
    1146:	5e a3       	std	Y+38, r21	; 0x26
			while (adjusted_count > compare_value)
    1148:	2b a1       	ldd	r18, Y+35	; 0x23
    114a:	3c a1       	ldd	r19, Y+36	; 0x24
    114c:	4d a1       	ldd	r20, Y+37	; 0x25
    114e:	5e a1       	ldd	r21, Y+38	; 0x26
    1150:	8b a5       	ldd	r24, Y+43	; 0x2b
    1152:	9c a5       	ldd	r25, Y+44	; 0x2c
    1154:	ad a5       	ldd	r26, Y+45	; 0x2d
    1156:	be a5       	ldd	r27, Y+46	; 0x2e
    1158:	82 17       	cp	r24, r18
    115a:	93 07       	cpc	r25, r19
    115c:	a4 07       	cpc	r26, r20
    115e:	b5 07       	cpc	r27, r21
    1160:	e8 f4       	brcc	.+58     	; 0x119c <BPM_to_TMR2+0x1ca>
				adjusted_count = adjusted_count - compare_value;
    1162:	8b a1       	ldd	r24, Y+35	; 0x23
    1164:	9c a1       	ldd	r25, Y+36	; 0x24
    1166:	ad a1       	ldd	r26, Y+37	; 0x25
    1168:	be a1       	ldd	r27, Y+38	; 0x26
    116a:	2b a5       	ldd	r18, Y+43	; 0x2b
    116c:	3c a5       	ldd	r19, Y+44	; 0x2c
    116e:	4d a5       	ldd	r20, Y+45	; 0x2d
    1170:	5e a5       	ldd	r21, Y+46	; 0x2e
    1172:	82 1b       	sub	r24, r18
    1174:	93 0b       	sbc	r25, r19
    1176:	a4 0b       	sbc	r26, r20
    1178:	b5 0b       	sbc	r27, r21
    117a:	8b a3       	std	Y+35, r24	; 0x23
    117c:	9c a3       	std	Y+36, r25	; 0x24
    117e:	ad a3       	std	Y+37, r26	; 0x25
    1180:	be a3       	std	Y+38, r27	; 0x26
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
    1182:	2b a1       	ldd	r18, Y+35	; 0x23
    1184:	3c a1       	ldd	r19, Y+36	; 0x24
    1186:	4d a1       	ldd	r20, Y+37	; 0x25
    1188:	5e a1       	ldd	r21, Y+38	; 0x26
    118a:	8b a5       	ldd	r24, Y+43	; 0x2b
    118c:	9c a5       	ldd	r25, Y+44	; 0x2c
    118e:	ad a5       	ldd	r26, Y+45	; 0x2d
    1190:	be a5       	ldd	r27, Y+46	; 0x2e
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	a4 07       	cpc	r26, r20
    1198:	b5 07       	cpc	r27, r21
    119a:	18 f3       	brcs	.-58     	; 0x1162 <BPM_to_TMR2+0x190>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
    119c:	8b a1       	ldd	r24, Y+35	; 0x23
    119e:	9c a1       	ldd	r25, Y+36	; 0x24
    11a0:	ad a1       	ldd	r26, Y+37	; 0x25
    11a2:	be a1       	ldd	r27, Y+38	; 0x26
    11a4:	e0 e0       	ldi	r30, 0x00	; 0
    11a6:	f8 e0       	ldi	r31, 0x08	; 8
    11a8:	80 a3       	std	Z+32, r24	; 0x20
    11aa:	91 a3       	std	Z+33, r25	; 0x21
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <BPM_to_TMR2+0x1e0>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
    11ae:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
    11b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b6:	ad a5       	ldd	r26, Y+45	; 0x2d
    11b8:	be a5       	ldd	r27, Y+46	; 0x2e
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	f8 e0       	ldi	r31, 0x08	; 8
    11be:	80 a7       	std	Z+40, r24	; 0x28
    11c0:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
    11c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c6:	ad a5       	ldd	r26, Y+45	; 0x2d
    11c8:	be a5       	ldd	r27, Y+46	; 0x2e
    11ca:	68 e1       	ldi	r22, 0x18	; 24
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__udivmodhi4>
    11d2:	66 a7       	std	Z+46, r22	; 0x2e
    11d4:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
    11d6:	81 81       	ldd	r24, Z+1	; 0x01
    11d8:	80 69       	ori	r24, 0x90	; 144
    11da:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
    11dc:	8a a1       	ldd	r24, Y+34	; 0x22
    11de:	80 83       	st	Z, r24

	return;
}
    11e0:	ae 96       	adiw	r28, 0x2e	; 46
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <test_notes>:




void test_notes(){
    11f0:	2f 92       	push	r2
    11f2:	3f 92       	push	r3
    11f4:	4f 92       	push	r4
    11f6:	5f 92       	push	r5
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2e 97       	sbiw	r28, 0x0e	; 14
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	de bf       	out	0x3e, r29	; 62
	volatile bool decimal_point0 = 0;
    121c:	19 82       	std	Y+1, r1	; 0x01
	volatile bool decimal_point1 = 0;
    121e:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool decimal_point2 = 0;
    1220:	1b 82       	std	Y+3, r1	; 0x03
	volatile bool status_LED = 0;
    1222:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint16_t seven_segment_value = 0;
    1224:	1d 82       	std	Y+5, r1	; 0x05
    1226:	1e 82       	std	Y+6, r1	; 0x06
	volatile uint16_t BPM = 60;
    1228:	8c e3       	ldi	r24, 0x3C	; 60
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	98 87       	std	Y+8, r25	; 0x08
	volatile uint8_t beat_count = 0;
    1230:	19 86       	std	Y+9, r1	; 0x09
	volatile bool play_notes = 0;
    1232:	1a 86       	std	Y+10, r1	; 0x0a
	volatile uint32_t temp_duration;
		
	startup_functions();
    1234:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	serial_midi_init();
    1238:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <serial_midi_init>
	
	TCC0.CTRLA = 0x00;  //disable timer
    123c:	e0 e0       	ldi	r30, 0x00	; 0
    123e:	f8 e0       	ldi	r31, 0x08	; 8
    1240:	10 82       	st	Z, r1
	TCC0.CTRLB = 0x00;  //disable all compares
    1242:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLC = 0x00;
    1244:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
    1246:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTFLAGS = 0x00;  //clear interrupt flags
    1248:	14 86       	std	Z+12, r1	; 0x0c
	TCC0.INTCTRLA = 0x00;
    124a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x6B;  //enable CCA interrupt Hi-Level, CCB mid, CCC mid, CCD low
    124c:	8b e6       	ldi	r24, 0x6B	; 107
    124e:	87 83       	std	Z+7, r24	; 0x07
    TCC0.CNT = 0;     //reset counter
    1250:	10 a2       	std	Z+32, r1	; 0x20
    1252:	11 a2       	std	Z+33, r1	; 0x21
	BPM_to_TMR2(BPM);
    1254:	8f 81       	ldd	r24, Y+7	; 0x07
    1256:	98 85       	ldd	r25, Y+8	; 0x08
    1258:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <BPM_to_TMR2>
	
	next_pitch = 50;
    125c:	82 e3       	ldi	r24, 0x32	; 50
    125e:	80 93 90 22 	sts	0x2290, r24
	next_velocity = 100;
    1262:	84 e6       	ldi	r24, 0x64	; 100
    1264:	80 93 94 22 	sts	0x2294, r24
	next_division = QUARTER;
    1268:	10 92 91 22 	sts	0x2291, r1
	next_duration = 0xEFFF;
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ee       	ldi	r25, 0xEF	; 239
    1270:	80 93 92 22 	sts	0x2292, r24
    1274:	90 93 93 22 	sts	0x2293, r25
	
	note_on(next_pitch,next_velocity,next_division,next_duration);
    1278:	82 e3       	ldi	r24, 0x32	; 50
    127a:	64 e6       	ldi	r22, 0x64	; 100
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	3f ee       	ldi	r19, 0xEF	; 239
    1282:	0e 94 94 03 	call	0x728	; 0x728 <note_on>
			beat_count++;
			if (beat_count > 3)
				beat_count = 0;
		}
		
		if (TCC0.CNT < TCC0.CCA/4)
    1286:	ee 24       	eor	r14, r14
    1288:	ff 24       	eor	r15, r15
    128a:	68 94       	set
    128c:	f3 f8       	bld	r15, 3
			decimal_point0 = 1;
    128e:	dd 24       	eor	r13, r13
    1290:	d3 94       	inc	r13
			
			seven_segment_value = next_division;
			}			
		}
		else if (get_encoder_switch_state()){
			temp_duration = 100;
    1292:	0f 2e       	mov	r0, r31
    1294:	f4 e6       	ldi	r31, 0x64	; 100
    1296:	8f 2e       	mov	r8, r31
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	9f 2e       	mov	r9, r31
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	af 2e       	mov	r10, r31
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	bf 2e       	mov	r11, r31
    12a4:	f0 2d       	mov	r31, r0
			temp_duration = temp_duration * next_duration;
			temp_duration = temp_duration / 0xFFFF;
    12a6:	0f 2e       	mov	r0, r31
    12a8:	ff ef       	ldi	r31, 0xFF	; 255
    12aa:	4f 2e       	mov	r4, r31
    12ac:	ff ef       	ldi	r31, 0xFF	; 255
    12ae:	5f 2e       	mov	r5, r31
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	6f 2e       	mov	r6, r31
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	7f 2e       	mov	r7, r31
    12b8:	f0 2d       	mov	r31, r0
			if (get_encoder_switch_state())
			{
				if (get_encoder_switch_edge() == EDGE_RISE || get_pushbutton_switch_edge() == EDGE_RISE){
					BPM += 20;
					if (BPM>400)
						BPM = 4;
    12ba:	22 24       	eor	r2, r2
    12bc:	33 24       	eor	r3, r3
    12be:	68 94       	set
    12c0:	22 f8       	bld	r2, 2
	next_duration = 0xEFFF;
	
	note_on(next_pitch,next_velocity,next_division,next_duration);
	
	while(1){
		preloop_functions();
    12c2:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>

		if (beat_overflow){
    12c6:	80 91 a0 21 	lds	r24, 0x21A0
    12ca:	88 23       	and	r24, r24
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <test_notes+0xf0>
			beat_overflow = 0;
    12ce:	10 92 a0 21 	sts	0x21A0, r1
			beat_count++;
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	89 87       	std	Y+9, r24	; 0x09
			if (beat_count > 3)
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <test_notes+0xf0>
				beat_count = 0;
    12de:	19 86       	std	Y+9, r1	; 0x09
		}
		
		if (TCC0.CNT < TCC0.CCA/4)
    12e0:	f7 01       	movw	r30, r14
    12e2:	20 a1       	ldd	r18, Z+32	; 0x20
    12e4:	31 a1       	ldd	r19, Z+33	; 0x21
    12e6:	80 a5       	ldd	r24, Z+40	; 0x28
    12e8:	91 a5       	ldd	r25, Z+41	; 0x29
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <test_notes+0x10c>
			decimal_point0 = 1;
    12f8:	d9 82       	std	Y+1, r13	; 0x01
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <test_notes+0x10e>
		else
			decimal_point0 = 0;
    12fc:	19 82       	std	Y+1, r1	; 0x01

		if (get_pushbutton_switch_state()){
    12fe:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
    1302:	88 23       	and	r24, r24
    1304:	f1 f1       	breq	.+124    	; 0x1382 <test_notes+0x192>
			if (get_encoder_switch_state())
    1306:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
    130a:	88 23       	and	r24, r24
    130c:	f1 f0       	breq	.+60     	; 0x134a <test_notes+0x15a>
			{
				if (get_encoder_switch_edge() == EDGE_RISE || get_pushbutton_switch_edge() == EDGE_RISE){
    130e:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	21 f0       	breq	.+8      	; 0x131e <test_notes+0x12e>
    1316:	0e 94 30 01 	call	0x260	; 0x260 <get_pushbutton_switch_edge>
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	89 f4       	brne	.+34     	; 0x1340 <test_notes+0x150>
					BPM += 20;
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	44 96       	adiw	r24, 0x14	; 20
    1324:	8f 83       	std	Y+7, r24	; 0x07
    1326:	98 87       	std	Y+8, r25	; 0x08
					if (BPM>400)
    1328:	8f 81       	ldd	r24, Y+7	; 0x07
    132a:	98 85       	ldd	r25, Y+8	; 0x08
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	81 39       	cpi	r24, 0x91	; 145
    1330:	9f 07       	cpc	r25, r31
    1332:	10 f0       	brcs	.+4      	; 0x1338 <test_notes+0x148>
						BPM = 4;
    1334:	2f 82       	std	Y+7, r2	; 0x07
    1336:	38 86       	std	Y+8, r3	; 0x08
					BPM_to_TMR2(BPM);
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <BPM_to_TMR2>
				}					
				seven_segment_value = BPM;
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	98 85       	ldd	r25, Y+8	; 0x08
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	80 c0       	rjmp	.+256    	; 0x144a <test_notes+0x25a>
			}
			else{
				if (get_encoder() == TURN_CW && next_division < SIXTEENTH_TRIPLET)
    134a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	39 f4       	brne	.+14     	; 0x1360 <test_notes+0x170>
    1352:	80 91 91 22 	lds	r24, 0x2291
    1356:	87 30       	cpi	r24, 0x07	; 7
    1358:	18 f4       	brcc	.+6      	; 0x1360 <test_notes+0x170>
					next_division++;
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	80 93 91 22 	sts	0x2291, r24
				if (get_encoder() == TURN_CCW && next_division > QUARTER)
    1360:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	39 f4       	brne	.+14     	; 0x1376 <test_notes+0x186>
    1368:	80 91 91 22 	lds	r24, 0x2291
    136c:	88 23       	and	r24, r24
    136e:	19 f0       	breq	.+6      	; 0x1376 <test_notes+0x186>
					next_division += -1;
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	80 93 91 22 	sts	0x2291, r24
			
			seven_segment_value = next_division;
    1376:	80 91 91 22 	lds	r24, 0x2291
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	64 c0       	rjmp	.+200    	; 0x144a <test_notes+0x25a>
			}			
		}
		else if (get_encoder_switch_state()){
    1382:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
    1386:	88 23       	and	r24, r24
    1388:	09 f4       	brne	.+2      	; 0x138c <test_notes+0x19c>
    138a:	5b c0       	rjmp	.+182    	; 0x1442 <test_notes+0x252>
			temp_duration = 100;
    138c:	8b 86       	std	Y+11, r8	; 0x0b
    138e:	9c 86       	std	Y+12, r9	; 0x0c
    1390:	ad 86       	std	Y+13, r10	; 0x0d
    1392:	be 86       	std	Y+14, r11	; 0x0e
			temp_duration = temp_duration * next_duration;
    1394:	2b 85       	ldd	r18, Y+11	; 0x0b
    1396:	3c 85       	ldd	r19, Y+12	; 0x0c
    1398:	4d 85       	ldd	r20, Y+13	; 0x0d
    139a:	5e 85       	ldd	r21, Y+14	; 0x0e
    139c:	60 91 92 22 	lds	r22, 0x2292
    13a0:	70 91 93 22 	lds	r23, 0x2293
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
    13ac:	6b 87       	std	Y+11, r22	; 0x0b
    13ae:	7c 87       	std	Y+12, r23	; 0x0c
    13b0:	8d 87       	std	Y+13, r24	; 0x0d
    13b2:	9e 87       	std	Y+14, r25	; 0x0e
			temp_duration = temp_duration / 0xFFFF;
    13b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	a3 01       	movw	r20, r6
    13be:	92 01       	movw	r18, r4
    13c0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    13c4:	2b 87       	std	Y+11, r18	; 0x0b
    13c6:	3c 87       	std	Y+12, r19	; 0x0c
    13c8:	4d 87       	std	Y+13, r20	; 0x0d
    13ca:	5e 87       	std	Y+14, r21	; 0x0e
			
			if (get_encoder_switch_edge() == EDGE_RISE){
    13cc:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	81 f5       	brne	.+96     	; 0x1434 <test_notes+0x244>
				temp_duration+=5;
    13d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    13da:	be 85       	ldd	r27, Y+14	; 0x0e
    13dc:	05 96       	adiw	r24, 0x05	; 5
    13de:	a1 1d       	adc	r26, r1
    13e0:	b1 1d       	adc	r27, r1
    13e2:	8b 87       	std	Y+11, r24	; 0x0b
    13e4:	9c 87       	std	Y+12, r25	; 0x0c
    13e6:	ad 87       	std	Y+13, r26	; 0x0d
    13e8:	be 87       	std	Y+14, r27	; 0x0e
				if (temp_duration > 100)
    13ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    13f0:	be 85       	ldd	r27, Y+14	; 0x0e
    13f2:	85 36       	cpi	r24, 0x65	; 101
    13f4:	91 05       	cpc	r25, r1
    13f6:	a1 05       	cpc	r26, r1
    13f8:	b1 05       	cpc	r27, r1
    13fa:	60 f0       	brcs	.+24     	; 0x1414 <test_notes+0x224>
					temp_duration = temp_duration-100;
    13fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1400:	ad 85       	ldd	r26, Y+13	; 0x0d
    1402:	be 85       	ldd	r27, Y+14	; 0x0e
    1404:	84 56       	subi	r24, 0x64	; 100
    1406:	90 40       	sbci	r25, 0x00	; 0
    1408:	a0 40       	sbci	r26, 0x00	; 0
    140a:	b0 40       	sbci	r27, 0x00	; 0
    140c:	8b 87       	std	Y+11, r24	; 0x0b
    140e:	9c 87       	std	Y+12, r25	; 0x0c
    1410:	ad 87       	std	Y+13, r26	; 0x0d
    1412:	be 87       	std	Y+14, r27	; 0x0e
				
				next_duration = (temp_duration * 0xFFFF) / 100;
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	a3 01       	movw	r20, r6
    141e:	92 01       	movw	r18, r4
    1420:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__mulsi3>
    1424:	a5 01       	movw	r20, r10
    1426:	94 01       	movw	r18, r8
    1428:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodsi4>
    142c:	20 93 92 22 	sts	0x2292, r18
    1430:	30 93 93 22 	sts	0x2293, r19
			}			
			
			seven_segment_value = (uint16_t)temp_duration;
    1434:	8b 85       	ldd	r24, Y+11	; 0x0b
    1436:	9c 85       	ldd	r25, Y+12	; 0x0c
    1438:	ad 85       	ldd	r26, Y+13	; 0x0d
    143a:	be 85       	ldd	r27, Y+14	; 0x0e
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	04 c0       	rjmp	.+8      	; 0x144a <test_notes+0x25a>
		}
		else
			seven_segment_value = beat_count;
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	9e 83       	std	Y+6, r25	; 0x06
			
		if (get_toggle_switch_edge() == EDGE_RISE){
    144a:	0e 94 36 01 	call	0x26c	; 0x26c <get_toggle_switch_edge>
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	b1 f4       	brne	.+44     	; 0x147e <test_notes+0x28e>
			note_off(current_pitch,current_velocity);
    1452:	80 91 8e 22 	lds	r24, 0x228E
    1456:	60 91 8f 22 	lds	r22, 0x228F
    145a:	0e 94 82 03 	call	0x704	; 0x704 <note_off>
			beat_count = 0;
    145e:	19 86       	std	Y+9, r1	; 0x09
			TCC0.CNT = 0;
    1460:	f7 01       	movw	r30, r14
    1462:	10 a2       	std	Z+32, r1	; 0x20
    1464:	11 a2       	std	Z+33, r1	; 0x21
			note_on(next_pitch,next_velocity,next_division,next_duration);
    1466:	20 91 92 22 	lds	r18, 0x2292
    146a:	30 91 93 22 	lds	r19, 0x2293
    146e:	80 91 90 22 	lds	r24, 0x2290
    1472:	60 91 94 22 	lds	r22, 0x2294
    1476:	40 91 91 22 	lds	r20, 0x2291
    147a:	0e 94 94 03 	call	0x728	; 0x728 <note_on>
		}			
					
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	69 81       	ldd	r22, Y+1	; 0x01
    1482:	4a 81       	ldd	r20, Y+2	; 0x02
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	0d 81       	ldd	r16, Y+5	; 0x05
    1488:	1e 81       	ldd	r17, Y+6	; 0x06
    148a:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
    148e:	19 cf       	rjmp	.-462    	; 0x12c2 <test_notes+0xd2>

00001490 <main>:
	}	
}
*/
int main(void) {

	test_notes();
    1490:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <test_notes>
   
	return 0;
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	08 95       	ret

0000149a <serial_midi_send>:
#include <avr/interrupt.h>
#include "stdlib.h"

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    149a:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    149c:	e0 eb       	ldi	r30, 0xB0	; 176
    149e:	f9 e0       	ldi	r31, 0x09	; 9
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
    14a2:	85 ff       	sbrs	r24, 5
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <serial_midi_send+0x6>
	USARTD1.DATA = inByte0;
    14a6:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    14aa:	62 30       	cpi	r22, 0x02	; 2
    14ac:	38 f0       	brcs	.+14     	; 0x14bc <serial_midi_send+0x22>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    14ae:	e0 eb       	ldi	r30, 0xB0	; 176
    14b0:	f9 e0       	ldi	r31, 0x09	; 9
    14b2:	81 81       	ldd	r24, Z+1	; 0x01
    14b4:	85 ff       	sbrs	r24, 5
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <serial_midi_send+0x18>
      USARTD1.DATA = inByte1;
    14b8:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    14bc:	63 30       	cpi	r22, 0x03	; 3
    14be:	39 f4       	brne	.+14     	; 0x14ce <serial_midi_send+0x34>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    14c0:	e0 eb       	ldi	r30, 0xB0	; 176
    14c2:	f9 e0       	ldi	r31, 0x09	; 9
    14c4:	81 81       	ldd	r24, Z+1	; 0x01
    14c6:	85 ff       	sbrs	r24, 5
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <serial_midi_send+0x2a>
      USARTD1.DATA = inByte2;
    14ca:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <serial_midi_device>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
    14d2:	81 ea       	ldi	r24, 0xA1	; 161
    14d4:	91 e2       	ldi	r25, 0x21	; 33
    14d6:	08 95       	ret

000014d8 <serial_midi_init>:

MidiDevice* serial_midi_init(){
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
    14dc:	c1 ea       	ldi	r28, 0xA1	; 161
    14de:	d1 e2       	ldi	r29, 0x21	; 33
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
    14e6:	ce 01       	movw	r24, r28
    14e8:	6d e4       	ldi	r22, 0x4D	; 77
    14ea:	7a e0       	ldi	r23, 0x0A	; 10
    14ec:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <midi_device_set_send_func>

   return serial_midi_device();
    14f0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <serial_midi_device>
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    14fa:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    14fc:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    14fe:	63 83       	std	Z+3, r22	; 0x03
    1500:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    1502:	11 82       	std	Z+1, r1	; 0x01
    1504:	10 82       	st	Z, r1
}
    1506:	08 95       	ret

00001508 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
    1510:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1512:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <store_and_clear_interrupt>
    1516:	e8 2f       	mov	r30, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1518:	f9 81       	ldd	r31, Y+1	; 0x01
    151a:	2f 2f       	mov	r18, r31
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	2f 5f       	subi	r18, 0xFF	; 255
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	6a 81       	ldd	r22, Y+2	; 0x02
    1524:	c9 01       	movw	r24, r18
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divmodhi4>
    152c:	28 81       	ld	r18, Y
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	82 17       	cp	r24, r18
    1532:	93 07       	cpc	r25, r19
    1534:	29 f4       	brne	.+10     	; 0x1540 <bytequeue_enqueue+0x38>
      restore_interrupt_setting(setting);
    1536:	8e 2f       	mov	r24, r30
    1538:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <restore_interrupt_setting>
      return false;
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	11 c0       	rjmp	.+34     	; 0x1562 <bytequeue_enqueue+0x5a>
   } else {
      queue->data[queue->end] = item;
    1540:	ab 81       	ldd	r26, Y+3	; 0x03
    1542:	bc 81       	ldd	r27, Y+4	; 0x04
    1544:	af 0f       	add	r26, r31
    1546:	b1 1d       	adc	r27, r1
    1548:	1c 93       	st	X, r17
      queue->end = (queue->end + 1) % queue->length;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	6a 81       	ldd	r22, Y+2	; 0x02
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divmodhi4>
    1558:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    155a:	8e 2f       	mov	r24, r30
    155c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <restore_interrupt_setting>
      return true;
    1560:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	08 95       	ret

0000156a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1572:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1576:	19 81       	ldd	r17, Y+1	; 0x01
    1578:	98 81       	ld	r25, Y
    157a:	19 17       	cp	r17, r25
    157c:	10 f0       	brcs	.+4      	; 0x1582 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    157e:	19 1b       	sub	r17, r25
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1582:	2a 81       	ldd	r18, Y+2	; 0x02
    1584:	12 0f       	add	r17, r18
    1586:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1588:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <restore_interrupt_setting>
   return len;
}
    158c:	81 2f       	mov	r24, r17
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1596:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1598:	80 81       	ld	r24, Z
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	86 0f       	add	r24, r22
    159e:	91 1d       	adc	r25, r1
    15a0:	62 81       	ldd	r22, Z+2	; 0x02
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divmodhi4>
    15a8:	03 80       	ldd	r0, Z+3	; 0x03
    15aa:	f4 81       	ldd	r31, Z+4	; 0x04
    15ac:	e0 2d       	mov	r30, r0
    15ae:	e8 0f       	add	r30, r24
    15b0:	f9 1f       	adc	r31, r25
}
    15b2:	80 81       	ld	r24, Z
    15b4:	08 95       	ret

000015b6 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    15c0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <store_and_clear_interrupt>
    15c4:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    15c6:	28 81       	ld	r18, Y
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	21 0f       	add	r18, r17
    15cc:	31 1d       	adc	r19, r1
    15ce:	6a 81       	ldd	r22, Y+2	; 0x02
    15d0:	c9 01       	movw	r24, r18
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divmodhi4>
    15d8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    15da:	84 2f       	mov	r24, r20
    15dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <restore_interrupt_setting>
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	08 95       	ret

000015e8 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    15e8:	8f b7       	in	r24, 0x3f	; 63
    cli();
    15ea:	f8 94       	cli
    return sreg;
}
    15ec:	08 95       	ret

000015ee <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    15ee:	8f bf       	out	0x3f, r24	; 63
}
    15f0:	08 95       	ret

000015f2 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    15f2:	88 1f       	adc	r24, r24
    15f4:	88 27       	eor	r24, r24
    15f6:	88 1f       	adc	r24, r24
    15f8:	08 95       	ret

000015fa <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	88 3f       	cpi	r24, 0xF8	; 248
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <midi_is_realtime+0x8>
    1600:	90 e0       	ldi	r25, 0x00	; 0
}
    1602:	89 2f       	mov	r24, r25
    1604:	08 95       	ret

00001606 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	20 7f       	andi	r18, 0xF0	; 240
    160c:	30 70       	andi	r19, 0x00	; 0
    160e:	20 3c       	cpi	r18, 0xC0	; 192
    1610:	31 05       	cpc	r19, r1
    1612:	e9 f1       	breq	.+122    	; 0x168e <midi_packet_length+0x88>
    1614:	21 3c       	cpi	r18, 0xC1	; 193
    1616:	31 05       	cpc	r19, r1
    1618:	8c f4       	brge	.+34     	; 0x163c <midi_packet_length+0x36>
    161a:	20 39       	cpi	r18, 0x90	; 144
    161c:	31 05       	cpc	r19, r1
    161e:	e1 f0       	breq	.+56     	; 0x1658 <midi_packet_length+0x52>
    1620:	21 39       	cpi	r18, 0x91	; 145
    1622:	31 05       	cpc	r19, r1
    1624:	24 f4       	brge	.+8      	; 0x162e <midi_packet_length+0x28>
    1626:	20 38       	cpi	r18, 0x80	; 128
    1628:	31 05       	cpc	r19, r1
    162a:	79 f5       	brne	.+94     	; 0x168a <midi_packet_length+0x84>
    162c:	15 c0       	rjmp	.+42     	; 0x1658 <midi_packet_length+0x52>
    162e:	20 3a       	cpi	r18, 0xA0	; 160
    1630:	31 05       	cpc	r19, r1
    1632:	91 f0       	breq	.+36     	; 0x1658 <midi_packet_length+0x52>
    1634:	20 3b       	cpi	r18, 0xB0	; 176
    1636:	31 05       	cpc	r19, r1
    1638:	41 f5       	brne	.+80     	; 0x168a <midi_packet_length+0x84>
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <midi_packet_length+0x52>
    163c:	20 3e       	cpi	r18, 0xE0	; 224
    163e:	31 05       	cpc	r19, r1
    1640:	59 f0       	breq	.+22     	; 0x1658 <midi_packet_length+0x52>
    1642:	21 3e       	cpi	r18, 0xE1	; 225
    1644:	31 05       	cpc	r19, r1
    1646:	24 f4       	brge	.+8      	; 0x1650 <midi_packet_length+0x4a>
    1648:	20 3d       	cpi	r18, 0xD0	; 208
    164a:	31 05       	cpc	r19, r1
    164c:	f1 f4       	brne	.+60     	; 0x168a <midi_packet_length+0x84>
    164e:	1f c0       	rjmp	.+62     	; 0x168e <midi_packet_length+0x88>
    1650:	20 3f       	cpi	r18, 0xF0	; 240
    1652:	31 05       	cpc	r19, r1
    1654:	d1 f4       	brne	.+52     	; 0x168a <midi_packet_length+0x84>
    1656:	02 c0       	rjmp	.+4      	; 0x165c <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
      case 0xF0:
         switch(status) {
    165c:	86 3f       	cpi	r24, 0xF6	; 246
    165e:	79 f0       	breq	.+30     	; 0x167e <midi_packet_length+0x78>
    1660:	87 3f       	cpi	r24, 0xF7	; 247
    1662:	38 f4       	brcc	.+14     	; 0x1672 <midi_packet_length+0x6c>
    1664:	82 3f       	cpi	r24, 0xF2	; 242
    1666:	a9 f0       	breq	.+42     	; 0x1692 <midi_packet_length+0x8c>
    1668:	83 3f       	cpi	r24, 0xF3	; 243
    166a:	59 f0       	breq	.+22     	; 0x1682 <midi_packet_length+0x7c>
    166c:	81 3f       	cpi	r24, 0xF1	; 241
    166e:	59 f4       	brne	.+22     	; 0x1686 <midi_packet_length+0x80>
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <midi_packet_length+0x7c>
    1672:	88 3f       	cpi	r24, 0xF8	; 248
    1674:	40 f0       	brcs	.+16     	; 0x1686 <midi_packet_length+0x80>
    1676:	8d 3f       	cpi	r24, 0xFD	; 253
    1678:	10 f0       	brcs	.+4      	; 0x167e <midi_packet_length+0x78>
    167a:	8e 3f       	cpi	r24, 0xFE	; 254
    167c:	20 f0       	brcs	.+8      	; 0x1686 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO;
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	08 95       	ret
         }
      default:
         return UNDEFINED;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
            case MIDI_SONGPOSITION:
               return THREE;
    1692:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1694:	08 95       	ret

00001696 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1696:	0f 93       	push	r16
    1698:	34 2f       	mov	r19, r20
    169a:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    169c:	46 2f       	mov	r20, r22
    169e:	4f 70       	andi	r20, 0x0F	; 15
    16a0:	40 6b       	ori	r20, 0xB0	; 176
    16a2:	23 2f       	mov	r18, r19
    16a4:	2f 77       	andi	r18, 0x7F	; 127
    16a6:	0f 77       	andi	r16, 0x7F	; 127
    16a8:	dc 01       	movw	r26, r24
    16aa:	ed 91       	ld	r30, X+
    16ac:	fc 91       	ld	r31, X
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    16b8:	0f 93       	push	r16
    16ba:	34 2f       	mov	r19, r20
    16bc:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    16be:	46 2f       	mov	r20, r22
    16c0:	4f 70       	andi	r20, 0x0F	; 15
    16c2:	40 69       	ori	r20, 0x90	; 144
    16c4:	23 2f       	mov	r18, r19
    16c6:	2f 77       	andi	r18, 0x7F	; 127
    16c8:	0f 77       	andi	r16, 0x7F	; 127
    16ca:	dc 01       	movw	r26, r24
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    16da:	0f 93       	push	r16
    16dc:	34 2f       	mov	r19, r20
    16de:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    16e0:	46 2f       	mov	r20, r22
    16e2:	4f 70       	andi	r20, 0x0F	; 15
    16e4:	40 68       	ori	r20, 0x80	; 128
    16e6:	23 2f       	mov	r18, r19
    16e8:	2f 77       	andi	r18, 0x7F	; 127
    16ea:	0f 77       	andi	r16, 0x7F	; 127
    16ec:	dc 01       	movw	r26, r24
    16ee:	ed 91       	ld	r30, X+
    16f0:	fc 91       	ld	r31, X
    16f2:	63 e0       	ldi	r22, 0x03	; 3
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    16fc:	0f 93       	push	r16
    16fe:	34 2f       	mov	r19, r20
    1700:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1702:	46 2f       	mov	r20, r22
    1704:	4f 70       	andi	r20, 0x0F	; 15
    1706:	40 6a       	ori	r20, 0xA0	; 160
    1708:	23 2f       	mov	r18, r19
    170a:	2f 77       	andi	r18, 0x7F	; 127
    170c:	0f 77       	andi	r16, 0x7F	; 127
    170e:	dc 01       	movw	r26, r24
    1710:	ed 91       	ld	r30, X+
    1712:	fc 91       	ld	r31, X
    1714:	63 e0       	ldi	r22, 0x03	; 3
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1722:	20 e2       	ldi	r18, 0x20	; 32
    1724:	40 30       	cpi	r20, 0x00	; 0
    1726:	52 07       	cpc	r21, r18
    1728:	44 f4       	brge	.+16     	; 0x173a <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    172a:	a0 ee       	ldi	r26, 0xE0	; 224
    172c:	40 30       	cpi	r20, 0x00	; 0
    172e:	5a 07       	cpc	r21, r26
    1730:	3c f0       	brlt	.+14     	; 0x1740 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1732:	8a 01       	movw	r16, r20
    1734:	00 50       	subi	r16, 0x00	; 0
    1736:	10 4e       	sbci	r17, 0xE0	; 224
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    173a:	0f ef       	ldi	r16, 0xFF	; 255
    173c:	1f e3       	ldi	r17, 0x3F	; 63
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1740:	00 e0       	ldi	r16, 0x00	; 0
    1742:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1744:	46 2f       	mov	r20, r22
    1746:	4f 70       	andi	r20, 0x0F	; 15
    1748:	40 6e       	ori	r20, 0xE0	; 224
    174a:	20 2f       	mov	r18, r16
    174c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    174e:	00 0f       	add	r16, r16
    1750:	01 2f       	mov	r16, r17
    1752:	00 1f       	adc	r16, r16
    1754:	11 0b       	sbc	r17, r17
    1756:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1758:	0f 77       	andi	r16, 0x7F	; 127
    175a:	dc 01       	movw	r26, r24
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	63 e0       	ldi	r22, 0x03	; 3
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    176c:	0f 93       	push	r16
    176e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1770:	46 2f       	mov	r20, r22
    1772:	4f 70       	andi	r20, 0x0F	; 15
    1774:	40 6c       	ori	r20, 0xC0	; 192
    1776:	2f 77       	andi	r18, 0x7F	; 127
    1778:	dc 01       	movw	r26, r24
    177a:	ed 91       	ld	r30, X+
    177c:	fc 91       	ld	r31, X
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	00 e0       	ldi	r16, 0x00	; 0
    1784:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    178a:	0f 93       	push	r16
    178c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    178e:	46 2f       	mov	r20, r22
    1790:	4f 70       	andi	r20, 0x0F	; 15
    1792:	40 6d       	ori	r20, 0xD0	; 208
    1794:	2f 77       	andi	r18, 0x7F	; 127
    1796:	dc 01       	movw	r26, r24
    1798:	ed 91       	ld	r30, X+
    179a:	fc 91       	ld	r31, X
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	00 e0       	ldi	r16, 0x00	; 0
    17a2:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    17a8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    17aa:	dc 01       	movw	r26, r24
    17ac:	ed 91       	ld	r30, X+
    17ae:	fc 91       	ld	r31, X
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	48 ef       	ldi	r20, 0xF8	; 248
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	00 e0       	ldi	r16, 0x00	; 0
    17ba:	09 95       	icall
}
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    17c0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    17c2:	dc 01       	movw	r26, r24
    17c4:	ed 91       	ld	r30, X+
    17c6:	fc 91       	ld	r31, X
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	49 ef       	ldi	r20, 0xF9	; 249
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	09 95       	icall
}
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    17d8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    17da:	dc 01       	movw	r26, r24
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	4a ef       	ldi	r20, 0xFA	; 250
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	09 95       	icall
}
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    17f0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    17f2:	dc 01       	movw	r26, r24
    17f4:	ed 91       	ld	r30, X+
    17f6:	fc 91       	ld	r31, X
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	4b ef       	ldi	r20, 0xFB	; 251
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	00 e0       	ldi	r16, 0x00	; 0
    1802:	09 95       	icall
}
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1808:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    180a:	dc 01       	movw	r26, r24
    180c:	ed 91       	ld	r30, X+
    180e:	fc 91       	ld	r31, X
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	4c ef       	ldi	r20, 0xFC	; 252
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	00 e0       	ldi	r16, 0x00	; 0
    181a:	09 95       	icall
}
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1820:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1822:	dc 01       	movw	r26, r24
    1824:	ed 91       	ld	r30, X+
    1826:	fc 91       	ld	r31, X
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	4e ef       	ldi	r20, 0xFE	; 254
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	00 e0       	ldi	r16, 0x00	; 0
    1832:	09 95       	icall
}
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1838:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    183a:	dc 01       	movw	r26, r24
    183c:	ed 91       	ld	r30, X+
    183e:	fc 91       	ld	r31, X
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	4f ef       	ldi	r20, 0xFF	; 255
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	09 95       	icall
}
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1850:	0f 93       	push	r16
   device->send_func(device, 2,
    1852:	26 2f       	mov	r18, r22
    1854:	2f 77       	andi	r18, 0x7F	; 127
    1856:	dc 01       	movw	r26, r24
    1858:	ed 91       	ld	r30, X+
    185a:	fc 91       	ld	r31, X
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	41 ef       	ldi	r20, 0xF1	; 241
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
   device->send_func(device, 3,
    186e:	26 2f       	mov	r18, r22
    1870:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1872:	8b 01       	movw	r16, r22
    1874:	00 0f       	add	r16, r16
    1876:	01 2f       	mov	r16, r17
    1878:	00 1f       	adc	r16, r16
    187a:	11 0b       	sbc	r17, r17
    187c:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    187e:	0f 77       	andi	r16, 0x7F	; 127
    1880:	dc 01       	movw	r26, r24
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	42 ef       	ldi	r20, 0xF2	; 242
    188c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1894:	0f 93       	push	r16
   device->send_func(device, 2,
    1896:	26 2f       	mov	r18, r22
    1898:	2f 77       	andi	r18, 0x7F	; 127
    189a:	dc 01       	movw	r26, r24
    189c:	ed 91       	ld	r30, X+
    189e:	fc 91       	ld	r31, X
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	43 ef       	ldi	r20, 0xF3	; 243
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    18ae:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    18b0:	dc 01       	movw	r26, r24
    18b2:	ed 91       	ld	r30, X+
    18b4:	fc 91       	ld	r31, X
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	46 ef       	ldi	r20, 0xF6	; 246
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	09 95       	icall
}
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    18c6:	0f 93       	push	r16
    18c8:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    18ca:	dc 01       	movw	r26, r24
    18cc:	ed 91       	ld	r30, X+
    18ce:	fc 91       	ld	r31, X
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	00 e0       	ldi	r16, 0x00	; 0
    18d8:	09 95       	icall
}
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    18de:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    18e0:	dc 01       	movw	r26, r24
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	09 95       	icall
}
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    18ec:	fc 01       	movw	r30, r24
    18ee:	62 83       	std	Z+2, r22	; 0x02
    18f0:	73 83       	std	Z+3, r23	; 0x03
}
    18f2:	08 95       	ret

000018f4 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    18f4:	fc 01       	movw	r30, r24
    18f6:	64 83       	std	Z+4, r22	; 0x04
    18f8:	75 83       	std	Z+5, r23	; 0x05
}
    18fa:	08 95       	ret

000018fc <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    18fc:	fc 01       	movw	r30, r24
    18fe:	66 83       	std	Z+6, r22	; 0x06
    1900:	77 83       	std	Z+7, r23	; 0x07
}
    1902:	08 95       	ret

00001904 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1904:	fc 01       	movw	r30, r24
    1906:	60 87       	std	Z+8, r22	; 0x08
    1908:	71 87       	std	Z+9, r23	; 0x09
}
    190a:	08 95       	ret

0000190c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    190c:	fc 01       	movw	r30, r24
    190e:	62 87       	std	Z+10, r22	; 0x0a
    1910:	73 87       	std	Z+11, r23	; 0x0b
}
    1912:	08 95       	ret

00001914 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1914:	fc 01       	movw	r30, r24
    1916:	64 87       	std	Z+12, r22	; 0x0c
    1918:	75 87       	std	Z+13, r23	; 0x0d
}
    191a:	08 95       	ret

0000191c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    191c:	fc 01       	movw	r30, r24
    191e:	66 87       	std	Z+14, r22	; 0x0e
    1920:	77 87       	std	Z+15, r23	; 0x0f
}
    1922:	08 95       	ret

00001924 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1924:	fc 01       	movw	r30, r24
    1926:	60 8b       	std	Z+16, r22	; 0x10
    1928:	71 8b       	std	Z+17, r23	; 0x11
}
    192a:	08 95       	ret

0000192c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    192c:	fc 01       	movw	r30, r24
    192e:	62 8b       	std	Z+18, r22	; 0x12
    1930:	73 8b       	std	Z+19, r23	; 0x13
}
    1932:	08 95       	ret

00001934 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1934:	fc 01       	movw	r30, r24
    1936:	64 8b       	std	Z+20, r22	; 0x14
    1938:	75 8b       	std	Z+21, r23	; 0x15
}
    193a:	08 95       	ret

0000193c <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    193c:	fc 01       	movw	r30, r24
    193e:	66 8b       	std	Z+22, r22	; 0x16
    1940:	77 8b       	std	Z+23, r23	; 0x17
}
    1942:	08 95       	ret

00001944 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1944:	fc 01       	movw	r30, r24
    1946:	60 8f       	std	Z+24, r22	; 0x18
    1948:	71 8f       	std	Z+25, r23	; 0x19
}
    194a:	08 95       	ret

0000194c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    194c:	fc 01       	movw	r30, r24
    194e:	62 8f       	std	Z+26, r22	; 0x1a
    1950:	73 8f       	std	Z+27, r23	; 0x1b
}
    1952:	08 95       	ret

00001954 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1954:	fc 01       	movw	r30, r24
    1956:	64 8f       	std	Z+28, r22	; 0x1c
    1958:	75 8f       	std	Z+29, r23	; 0x1d
}
    195a:	08 95       	ret

0000195c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    195c:	fc 01       	movw	r30, r24
    195e:	66 8f       	std	Z+30, r22	; 0x1e
    1960:	77 8f       	std	Z+31, r23	; 0x1f
}
    1962:	08 95       	ret

00001964 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    196a:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    196c:	1e a2       	std	Y+38, r1	; 0x26
    196e:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1970:	bc 01       	movw	r22, r24
    1972:	68 5d       	subi	r22, 0xD8	; 216
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	88 51       	subi	r24, 0x18	; 24
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	40 ec       	ldi	r20, 0xC0	; 192
    197c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1980:	1a 82       	std	Y+2, r1	; 0x02
    1982:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1984:	1c 82       	std	Y+4, r1	; 0x04
    1986:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1988:	1e 82       	std	Y+6, r1	; 0x06
    198a:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    198c:	18 86       	std	Y+8, r1	; 0x08
    198e:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1990:	1a 86       	std	Y+10, r1	; 0x0a
    1992:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1994:	1c 86       	std	Y+12, r1	; 0x0c
    1996:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1998:	1e 86       	std	Y+14, r1	; 0x0e
    199a:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    199c:	18 8a       	std	Y+16, r1	; 0x10
    199e:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    19a0:	1a 8a       	std	Y+18, r1	; 0x12
    19a2:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    19a4:	1c 8a       	std	Y+20, r1	; 0x14
    19a6:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    19a8:	1e 8a       	std	Y+22, r1	; 0x16
    19aa:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    19ac:	18 8e       	std	Y+24, r1	; 0x18
    19ae:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    19b0:	1a 8e       	std	Y+26, r1	; 0x1a
    19b2:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    19b4:	1c 8e       	std	Y+28, r1	; 0x1c
    19b6:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    19b8:	1e 8e       	std	Y+30, r1	; 0x1e
    19ba:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    19bc:	18 a2       	std	Y+32, r1	; 0x20
    19be:	19 a2       	std	Y+33, r1	; 0x21
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	16 2f       	mov	r17, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    19d4:	66 23       	and	r22, r22
    19d6:	a9 f0       	breq	.+42     	; 0x1a02 <midi_device_input+0x3c>
    19d8:	04 2f       	mov	r16, r20
    19da:	e4 2e       	mov	r14, r20
    19dc:	e7 01       	movw	r28, r14
    19de:	7e 01       	movw	r14, r28
    19e0:	f5 2e       	mov	r15, r21
    19e2:	e7 01       	movw	r28, r14
      bytequeue_enqueue(&device->input_queue, input[i]);
    19e4:	0f 2e       	mov	r0, r31
    19e6:	f8 ee       	ldi	r31, 0xE8	; 232
    19e8:	ef 2e       	mov	r14, r31
    19ea:	ff 24       	eor	r15, r15
    19ec:	f0 2d       	mov	r31, r0
    19ee:	e8 0e       	add	r14, r24
    19f0:	f9 1e       	adc	r15, r25
    19f2:	69 91       	ld	r22, Y+
    19f4:	c7 01       	movw	r24, r14
    19f6:	0e 94 84 0a 	call	0x1508	; 0x1508 <bytequeue_enqueue>
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    19fa:	ae 01       	movw	r20, r28
    19fc:	40 1b       	sub	r20, r16
    19fe:	41 17       	cp	r20, r17
    1a00:	c0 f3       	brcs	.-16     	; 0x19f2 <midi_device_input+0x2c>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	08 95       	ret

00001a10 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1a10:	fc 01       	movw	r30, r24
    1a12:	60 83       	st	Z, r22
    1a14:	71 83       	std	Z+1, r23	; 0x01
}
    1a16:	08 95       	ret

00001a18 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1a18:	fc 01       	movw	r30, r24
    1a1a:	60 a3       	std	Z+32, r22	; 0x20
    1a1c:	71 a3       	std	Z+33, r23	; 0x21
}
    1a1e:	08 95       	ret

00001a20 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
    1a32:	6b 01       	movw	r12, r22
    1a34:	f4 2e       	mov	r15, r20
    1a36:	e2 2e       	mov	r14, r18
    1a38:	10 2f       	mov	r17, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	41 f4       	brne	.+16     	; 0x1a50 <midi_input_callbacks+0x30>
      if (device->input_sysex_callback) {
    1a40:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a42:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <midi_input_callbacks+0x2a>
    1a48:	99 c0       	rjmp	.+306    	; 0x1b7c <midi_input_callbacks+0x15c>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	09 95       	icall
    1a4e:	89 c0       	rjmp	.+274    	; 0x1b62 <midi_input_callbacks+0x142>
         called = true;
      }
   } else {
      switch (cnt) {
    1a50:	62 30       	cpi	r22, 0x02	; 2
    1a52:	71 05       	cpc	r23, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <midi_input_callbacks+0x38>
    1a56:	42 c0       	rjmp	.+132    	; 0x1adc <midi_input_callbacks+0xbc>
    1a58:	63 30       	cpi	r22, 0x03	; 3
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <midi_input_callbacks+0x48>
    1a5e:	61 30       	cpi	r22, 0x01	; 1
    1a60:	71 05       	cpc	r23, r1
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <midi_input_callbacks+0x46>
    1a64:	74 c0       	rjmp	.+232    	; 0x1b4e <midi_input_callbacks+0x12e>
    1a66:	60 c0       	rjmp	.+192    	; 0x1b28 <midi_input_callbacks+0x108>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1a68:	84 2f       	mov	r24, r20
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	80 7f       	andi	r24, 0xF0	; 240
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	80 3a       	cpi	r24, 0xA0	; 160
    1a72:	91 05       	cpc	r25, r1
    1a74:	e1 f0       	breq	.+56     	; 0x1aae <midi_input_callbacks+0x8e>
    1a76:	81 3a       	cpi	r24, 0xA1	; 161
    1a78:	91 05       	cpc	r25, r1
    1a7a:	3c f4       	brge	.+14     	; 0x1a8a <midi_input_callbacks+0x6a>
    1a7c:	80 38       	cpi	r24, 0x80	; 128
    1a7e:	91 05       	cpc	r25, r1
    1a80:	99 f0       	breq	.+38     	; 0x1aa8 <midi_input_callbacks+0x88>
    1a82:	80 39       	cpi	r24, 0x90	; 144
    1a84:	91 05       	cpc	r25, r1
    1a86:	f9 f4       	brne	.+62     	; 0x1ac6 <midi_input_callbacks+0xa6>
    1a88:	0c c0       	rjmp	.+24     	; 0x1aa2 <midi_input_callbacks+0x82>
    1a8a:	80 3e       	cpi	r24, 0xE0	; 224
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	91 f0       	breq	.+36     	; 0x1ab4 <midi_input_callbacks+0x94>
    1a90:	80 3f       	cpi	r24, 0xF0	; 240
    1a92:	91 05       	cpc	r25, r1
    1a94:	91 f0       	breq	.+36     	; 0x1aba <midi_input_callbacks+0x9a>
    1a96:	80 3b       	cpi	r24, 0xB0	; 176
    1a98:	91 05       	cpc	r25, r1
    1a9a:	a9 f4       	brne	.+42     	; 0x1ac6 <midi_input_callbacks+0xa6>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9e:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <midi_input_callbacks+0xaa>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1aa2:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa4:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1aa6:	11 c0       	rjmp	.+34     	; 0x1aca <midi_input_callbacks+0xaa>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1aa8:	ee 81       	ldd	r30, Y+6	; 0x06
    1aaa:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1aac:	0e c0       	rjmp	.+28     	; 0x1aca <midi_input_callbacks+0xaa>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1aae:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab0:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1ab2:	0b c0       	rjmp	.+22     	; 0x1aca <midi_input_callbacks+0xaa>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1ab4:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ab6:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <midi_input_callbacks+0xaa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1aba:	42 3f       	cpi	r20, 0xF2	; 242
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <midi_input_callbacks+0xa0>
    1abe:	5e c0       	rjmp	.+188    	; 0x1b7c <midi_input_callbacks+0x15c>
                        func = device->input_songposition_callback;
    1ac0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ac2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <midi_input_callbacks+0xaa>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1ac6:	e0 e0       	ldi	r30, 0x00	; 0
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <midi_input_callbacks+0xb0>
    1ace:	56 c0       	rjmp	.+172    	; 0x1b7c <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1, byte2);
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	6f 2d       	mov	r22, r15
    1ad4:	4e 2d       	mov	r20, r14
    1ad6:	21 2f       	mov	r18, r17
    1ad8:	09 95       	icall
    1ada:	43 c0       	rjmp	.+134    	; 0x1b62 <midi_input_callbacks+0x142>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1adc:	84 2f       	mov	r24, r20
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	80 7f       	andi	r24, 0xF0	; 240
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	80 3d       	cpi	r24, 0xD0	; 208
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	49 f0       	breq	.+18     	; 0x1afc <midi_input_callbacks+0xdc>
    1aea:	80 3f       	cpi	r24, 0xF0	; 240
    1aec:	91 05       	cpc	r25, r1
    1aee:	49 f0       	breq	.+18     	; 0x1b02 <midi_input_callbacks+0xe2>
    1af0:	80 3c       	cpi	r24, 0xC0	; 192
    1af2:	91 05       	cpc	r25, r1
    1af4:	81 f4       	brne	.+32     	; 0x1b16 <midi_input_callbacks+0xf6>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1af6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1af8:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <midi_input_callbacks+0xfa>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1afc:	e8 89       	ldd	r30, Y+16	; 0x10
    1afe:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1b00:	0c c0       	rjmp	.+24     	; 0x1b1a <midi_input_callbacks+0xfa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1b02:	43 3f       	cpi	r20, 0xF3	; 243
    1b04:	19 f4       	brne	.+6      	; 0x1b0c <midi_input_callbacks+0xec>
                        func = device->input_songselect_callback;
    1b06:	ea 89       	ldd	r30, Y+18	; 0x12
    1b08:	fb 89       	ldd	r31, Y+19	; 0x13
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <midi_input_callbacks+0xfa>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1b0c:	41 3f       	cpi	r20, 0xF1	; 241
    1b0e:	b1 f5       	brne	.+108    	; 0x1b7c <midi_input_callbacks+0x15c>
                        func = device->input_tc_quarterframe_callback;
    1b10:	ec 89       	ldd	r30, Y+20	; 0x14
    1b12:	fd 89       	ldd	r31, Y+21	; 0x15
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <midi_input_callbacks+0xfa>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1b16:	e0 e0       	ldi	r30, 0x00	; 0
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	79 f1       	breq	.+94     	; 0x1b7c <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	6f 2d       	mov	r22, r15
    1b22:	4e 2d       	mov	r20, r14
    1b24:	09 95       	icall
    1b26:	1d c0       	rjmp	.+58     	; 0x1b62 <midi_input_callbacks+0x142>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1b28:	84 2f       	mov	r24, r20
    1b2a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <midi_is_realtime>
    1b2e:	88 23       	and	r24, r24
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <midi_input_callbacks+0x118>
                  func = device->input_realtime_callback;
    1b32:	ee 89       	ldd	r30, Y+22	; 0x16
    1b34:	ff 89       	ldd	r31, Y+23	; 0x17
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <midi_input_callbacks+0x122>
               else if (byte0 == MIDI_TUNEREQUEST)
    1b38:	8f 2d       	mov	r24, r15
    1b3a:	86 3f       	cpi	r24, 0xF6	; 246
    1b3c:	f9 f4       	brne	.+62     	; 0x1b7c <midi_input_callbacks+0x15c>
                  func = device->input_tunerequest_callback;
    1b3e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b40:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1b42:	30 97       	sbiw	r30, 0x00	; 0
    1b44:	d9 f0       	breq	.+54     	; 0x1b7c <midi_input_callbacks+0x15c>
                  func(device, byte0);
    1b46:	ce 01       	movw	r24, r28
    1b48:	6f 2d       	mov	r22, r15
    1b4a:	09 95       	icall
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <midi_input_callbacks+0x142>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1b4e:	64 30       	cpi	r22, 0x04	; 4
    1b50:	71 05       	cpc	r23, r1
    1b52:	90 f4       	brcc	.+36     	; 0x1b78 <midi_input_callbacks+0x158>
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <midi_input_callbacks+0x15c>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1b56:	ce 01       	movw	r24, r28
    1b58:	b6 01       	movw	r22, r12
    1b5a:	4f 2d       	mov	r20, r15
    1b5c:	2e 2d       	mov	r18, r14
    1b5e:	01 2f       	mov	r16, r17
    1b60:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1b62:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b64:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b66:	30 97       	sbiw	r30, 0x00	; 0
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <midi_input_callbacks+0x166>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	b6 01       	movw	r22, r12
    1b6e:	4f 2d       	mov	r20, r15
    1b70:	2e 2d       	mov	r18, r14
    1b72:	01 2f       	mov	r16, r17
    1b74:	09 95       	icall
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <midi_input_callbacks+0x166>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1b78:	cc 24       	eor	r12, r12
    1b7a:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1b7c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1b7e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	49 f7       	brne	.-46     	; 0x1b56 <midi_input_callbacks+0x136>
    1b84:	ee cf       	rjmp	.-36     	; 0x1b62 <midi_input_callbacks+0x142>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
    1ba2:	06 2f       	mov	r16, r22
   if (midi_is_realtime(input)) {
    1ba4:	86 2f       	mov	r24, r22
    1ba6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <midi_is_realtime>
    1baa:	88 23       	and	r24, r24
    1bac:	69 f0       	breq	.+26     	; 0x1bc8 <midi_process_byte+0x30>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1bae:	1d a1       	ldd	r17, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	40 2f       	mov	r20, r16
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	00 e0       	ldi	r16, 0x00	; 0
    1bc0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <midi_input_callbacks>
      device->input_state = state;
    1bc4:	1d a3       	std	Y+37, r17	; 0x25
    1bc6:	95 c0       	rjmp	.+298    	; 0x1cf2 <midi_process_byte+0x15a>
   } else if (midi_is_statusbyte(input)) {
    1bc8:	80 2f       	mov	r24, r16
    1bca:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <midi_is_statusbyte>
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <midi_process_byte+0x3c>
    1bd2:	55 c0       	rjmp	.+170    	; 0x1c7e <midi_process_byte+0xe6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <midi_process_byte+0x4c>
         device->input_buffer[0] = input;
    1bda:	0a a3       	std	Y+34, r16	; 0x22
         device->input_count = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	8e a3       	std	Y+38, r24	; 0x26
    1be2:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1be4:	80 2f       	mov	r24, r16
    1be6:	0e 94 03 0b 	call	0x1606	; 0x1606 <midi_packet_length>
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	39 f0       	breq	.+14     	; 0x1bfc <midi_process_byte+0x64>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	b8 f0       	brcs	.+46     	; 0x1c20 <midi_process_byte+0x88>
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	79 f0       	breq	.+30     	; 0x1c14 <midi_process_byte+0x7c>
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	f1 f5       	brne	.+124    	; 0x1c76 <midi_process_byte+0xde>
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <midi_process_byte+0x82>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1c00:	ce 01       	movw	r24, r28
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	40 2f       	mov	r20, r16
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <midi_input_callbacks>
            device->input_state = IDLE;
    1c10:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1c12:	6f c0       	rjmp	.+222    	; 0x1cf2 <midi_process_byte+0x15a>
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1c18:	6c c0       	rjmp	.+216    	; 0x1cf2 <midi_process_byte+0x15a>
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1c1e:	69 c0       	rjmp	.+210    	; 0x1cf2 <midi_process_byte+0x15a>
         case UNDEFINED:
            switch(input) {
    1c20:	00 3f       	cpi	r16, 0xF0	; 240
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <midi_process_byte+0x92>
    1c24:	07 3f       	cpi	r16, 0xF7	; 247
    1c26:	19 f5       	brne	.+70     	; 0x1c6e <midi_process_byte+0xd6>
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <midi_process_byte+0xa4>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1c2e:	80 ef       	ldi	r24, 0xF0	; 240
    1c30:	8a a3       	std	Y+34, r24	; 0x22
                  device->input_count = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	8e a3       	std	Y+38, r24	; 0x26
    1c38:	9f a3       	std	Y+39, r25	; 0x27
                  break;
    1c3a:	5b c0       	rjmp	.+182    	; 0x1cf2 <midi_process_byte+0x15a>
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    1c3c:	2e a1       	ldd	r18, Y+38	; 0x26
    1c3e:	3f a1       	ldd	r19, Y+39	; 0x27
    1c40:	c9 01       	movw	r24, r18
    1c42:	63 e0       	ldi	r22, 0x03	; 3
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__udivmodhi4>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e8 0f       	add	r30, r24
    1c4e:	f9 1f       	adc	r31, r25
    1c50:	87 ef       	ldi	r24, 0xF7	; 247
    1c52:	82 a3       	std	Z+34, r24	; 0x22
                  device->input_count += 1;
    1c54:	b9 01       	movw	r22, r18
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	6e a3       	std	Y+38, r22	; 0x26
    1c5c:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    1c5e:	ce 01       	movw	r24, r28
    1c60:	4a a1       	ldd	r20, Y+34	; 0x22
    1c62:	2b a1       	ldd	r18, Y+35	; 0x23
    1c64:	0c a1       	ldd	r16, Y+36	; 0x24
    1c66:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1c6a:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1c6c:	42 c0       	rjmp	.+132    	; 0x1cf2 <midi_process_byte+0x15a>
               default:
                  device->input_state = IDLE;
    1c6e:	1d a2       	std	Y+37, r1	; 0x25
                  device->input_count = 0;
    1c70:	1e a2       	std	Y+38, r1	; 0x26
    1c72:	1f a2       	std	Y+39, r1	; 0x27
    1c74:	3e c0       	rjmp	.+124    	; 0x1cf2 <midi_process_byte+0x15a>
            }

            break;
         default:
            device->input_state = IDLE;
    1c76:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1c78:	1e a2       	std	Y+38, r1	; 0x26
    1c7a:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1c7c:	3a c0       	rjmp	.+116    	; 0x1cf2 <midi_process_byte+0x15a>
      }
   } else {
      if (device->input_state != IDLE) {
    1c7e:	ed a1       	ldd	r30, Y+37	; 0x25
    1c80:	ee 23       	and	r30, r30
    1c82:	b9 f1       	breq	.+110    	; 0x1cf2 <midi_process_byte+0x15a>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1c84:	2e a1       	ldd	r18, Y+38	; 0x26
    1c86:	3f a1       	ldd	r19, Y+39	; 0x27
    1c88:	c9 01       	movw	r24, r18
    1c8a:	63 e0       	ldi	r22, 0x03	; 3
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__udivmodhi4>
    1c92:	ac 01       	movw	r20, r24
    1c94:	8c 0f       	add	r24, r28
    1c96:	9d 1f       	adc	r25, r29
    1c98:	dc 01       	movw	r26, r24
    1c9a:	92 96       	adiw	r26, 0x22	; 34
    1c9c:	0c 93       	st	X, r16
    1c9e:	92 97       	sbiw	r26, 0x22	; 34
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	2e a3       	std	Y+38, r18	; 0x26
    1ca6:	3f a3       	std	Y+39, r19	; 0x27

         switch(prev % 3) {
    1ca8:	41 30       	cpi	r20, 0x01	; 1
    1caa:	51 05       	cpc	r21, r1
    1cac:	91 f0       	breq	.+36     	; 0x1cd2 <midi_process_byte+0x13a>
    1cae:	42 30       	cpi	r20, 0x02	; 2
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	f9 f4       	brne	.+62     	; 0x1cf2 <midi_process_byte+0x15a>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	4a a1       	ldd	r20, Y+34	; 0x22
    1cba:	2b a1       	ldd	r18, Y+35	; 0x23
    1cbc:	0c a1       	ldd	r16, Y+36	; 0x24
    1cbe:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	84 30       	cpi	r24, 0x04	; 4
    1cc6:	a9 f0       	breq	.+42     	; 0x1cf2 <midi_process_byte+0x15a>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	8e a3       	std	Y+38, r24	; 0x26
    1cce:	9f a3       	std	Y+39, r25	; 0x27
    1cd0:	10 c0       	rjmp	.+32     	; 0x1cf2 <midi_process_byte+0x15a>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1cd2:	e2 30       	cpi	r30, 0x02	; 2
    1cd4:	71 f4       	brne	.+28     	; 0x1cf2 <midi_process_byte+0x15a>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	b9 01       	movw	r22, r18
    1cda:	4a a1       	ldd	r20, Y+34	; 0x22
    1cdc:	2b a1       	ldd	r18, Y+35	; 0x23
    1cde:	00 e0       	ldi	r16, 0x00	; 0
    1ce0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce6:	84 30       	cpi	r24, 0x04	; 4
    1ce8:	21 f0       	breq	.+8      	; 0x1cf2 <midi_process_byte+0x15a>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	8e a3       	std	Y+38, r24	; 0x26
    1cf0:	9f a3       	std	Y+39, r25	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	7c 01       	movw	r14, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1d0e:	dc 01       	movw	r26, r24
    1d10:	90 96       	adiw	r26, 0x20	; 32
    1d12:	ed 91       	ld	r30, X+
    1d14:	fc 91       	ld	r31, X
    1d16:	91 97       	sbiw	r26, 0x21	; 33
    1d18:	30 97       	sbiw	r30, 0x00	; 0
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <midi_device_process+0x22>
      device->pre_input_process_callback(device);
    1d1c:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1d1e:	87 01       	movw	r16, r14
    1d20:	08 51       	subi	r16, 0x18	; 24
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	c8 01       	movw	r24, r16
    1d26:	0e 94 b5 0a 	call	0x156a	; 0x156a <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1d2a:	c8 2e       	mov	r12, r24
    1d2c:	dd 24       	eor	r13, r13
    1d2e:	c1 14       	cp	r12, r1
    1d30:	d1 04       	cpc	r13, r1
    1d32:	91 f0       	breq	.+36     	; 0x1d58 <midi_device_process+0x5c>
    1d34:	c0 e0       	ldi	r28, 0x00	; 0
    1d36:	d0 e0       	ldi	r29, 0x00	; 0
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1d38:	c8 01       	movw	r24, r16
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <bytequeue_get>
    1d40:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1d42:	c7 01       	movw	r24, r14
    1d44:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1d48:	c8 01       	movw	r24, r16
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1d50:	21 96       	adiw	r28, 0x01	; 1
    1d52:	cc 15       	cp	r28, r12
    1d54:	dd 05       	cpc	r29, r13
    1d56:	80 f3       	brcs	.-32     	; 0x1d38 <midi_device_process+0x3c>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	08 95       	ret

00001d6a <__fixunssfsi>:
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	7b 01       	movw	r14, r22
    1d74:	8c 01       	movw	r16, r24
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	5f e4       	ldi	r21, 0x4F	; 79
    1d7e:	0e 94 31 12 	call	0x2462	; 0x2462 <__gesf2>
    1d82:	87 fd       	sbrc	r24, 7
    1d84:	11 c0       	rjmp	.+34     	; 0x1da8 <__fixunssfsi+0x3e>
    1d86:	c8 01       	movw	r24, r16
    1d88:	b7 01       	movw	r22, r14
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	5f e4       	ldi	r21, 0x4F	; 79
    1d92:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1d96:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1d9a:	9b 01       	movw	r18, r22
    1d9c:	ac 01       	movw	r20, r24
    1d9e:	20 50       	subi	r18, 0x00	; 0
    1da0:	30 40       	sbci	r19, 0x00	; 0
    1da2:	40 40       	sbci	r20, 0x00	; 0
    1da4:	50 48       	sbci	r21, 0x80	; 128
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <__fixunssfsi+0x4a>
    1da8:	c8 01       	movw	r24, r16
    1daa:	b7 01       	movw	r22, r14
    1dac:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	b9 01       	movw	r22, r18
    1db6:	ca 01       	movw	r24, r20
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	08 95       	ret

00001dc2 <_fpadd_parts>:
    1dc2:	a0 e0       	ldi	r26, 0x00	; 0
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e7 ee       	ldi	r30, 0xE7	; 231
    1dc8:	fe e0       	ldi	r31, 0x0E	; 14
    1dca:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__prologue_saves__+0x8>
    1dce:	fc 01       	movw	r30, r24
    1dd0:	ea 01       	movw	r28, r20
    1dd2:	80 81       	ld	r24, Z
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	08 f4       	brcc	.+2      	; 0x1dda <_fpadd_parts+0x18>
    1dd8:	38 c1       	rjmp	.+624    	; 0x204a <_fpadd_parts+0x288>
    1dda:	db 01       	movw	r26, r22
    1ddc:	9c 91       	ld	r25, X
    1dde:	92 30       	cpi	r25, 0x02	; 2
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <_fpadd_parts+0x22>
    1de2:	30 c1       	rjmp	.+608    	; 0x2044 <_fpadd_parts+0x282>
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	59 f4       	brne	.+22     	; 0x1dfe <_fpadd_parts+0x3c>
    1de8:	94 30       	cpi	r25, 0x04	; 4
    1dea:	09 f0       	breq	.+2      	; 0x1dee <_fpadd_parts+0x2c>
    1dec:	2e c1       	rjmp	.+604    	; 0x204a <_fpadd_parts+0x288>
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	11 96       	adiw	r26, 0x01	; 1
    1df2:	8c 91       	ld	r24, X
    1df4:	11 97       	sbiw	r26, 0x01	; 1
    1df6:	98 17       	cp	r25, r24
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <_fpadd_parts+0x3a>
    1dfa:	21 c1       	rjmp	.+578    	; 0x203e <_fpadd_parts+0x27c>
    1dfc:	26 c1       	rjmp	.+588    	; 0x204a <_fpadd_parts+0x288>
    1dfe:	94 30       	cpi	r25, 0x04	; 4
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <_fpadd_parts+0x42>
    1e02:	20 c1       	rjmp	.+576    	; 0x2044 <_fpadd_parts+0x282>
    1e04:	92 30       	cpi	r25, 0x02	; 2
    1e06:	b1 f4       	brne	.+44     	; 0x1e34 <_fpadd_parts+0x72>
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <_fpadd_parts+0x4c>
    1e0c:	1e c1       	rjmp	.+572    	; 0x204a <_fpadd_parts+0x288>
    1e0e:	ca 01       	movw	r24, r20
    1e10:	af 01       	movw	r20, r30
    1e12:	28 e0       	ldi	r18, 0x08	; 8
    1e14:	da 01       	movw	r26, r20
    1e16:	0d 90       	ld	r0, X+
    1e18:	ad 01       	movw	r20, r26
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	0d 92       	st	X+, r0
    1e1e:	cd 01       	movw	r24, r26
    1e20:	21 50       	subi	r18, 0x01	; 1
    1e22:	c1 f7       	brne	.-16     	; 0x1e14 <_fpadd_parts+0x52>
    1e24:	db 01       	movw	r26, r22
    1e26:	11 96       	adiw	r26, 0x01	; 1
    1e28:	8c 91       	ld	r24, X
    1e2a:	11 97       	sbiw	r26, 0x01	; 1
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	89 23       	and	r24, r25
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	0a c1       	rjmp	.+532    	; 0x2048 <_fpadd_parts+0x286>
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <_fpadd_parts+0x78>
    1e38:	05 c1       	rjmp	.+522    	; 0x2044 <_fpadd_parts+0x282>
    1e3a:	c2 80       	ldd	r12, Z+2	; 0x02
    1e3c:	d3 80       	ldd	r13, Z+3	; 0x03
    1e3e:	db 01       	movw	r26, r22
    1e40:	12 96       	adiw	r26, 0x02	; 2
    1e42:	6d 90       	ld	r6, X+
    1e44:	7c 90       	ld	r7, X
    1e46:	13 97       	sbiw	r26, 0x03	; 3
    1e48:	24 81       	ldd	r18, Z+4	; 0x04
    1e4a:	35 81       	ldd	r19, Z+5	; 0x05
    1e4c:	46 81       	ldd	r20, Z+6	; 0x06
    1e4e:	57 81       	ldd	r21, Z+7	; 0x07
    1e50:	14 96       	adiw	r26, 0x04	; 4
    1e52:	ed 90       	ld	r14, X+
    1e54:	fd 90       	ld	r15, X+
    1e56:	0d 91       	ld	r16, X+
    1e58:	1c 91       	ld	r17, X
    1e5a:	17 97       	sbiw	r26, 0x07	; 7
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	86 19       	sub	r24, r6
    1e60:	97 09       	sbc	r25, r7
    1e62:	5c 01       	movw	r10, r24
    1e64:	97 ff       	sbrs	r25, 7
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <_fpadd_parts+0xae>
    1e68:	aa 24       	eor	r10, r10
    1e6a:	bb 24       	eor	r11, r11
    1e6c:	a8 1a       	sub	r10, r24
    1e6e:	b9 0a       	sbc	r11, r25
    1e70:	b0 e2       	ldi	r27, 0x20	; 32
    1e72:	ab 16       	cp	r10, r27
    1e74:	b1 04       	cpc	r11, r1
    1e76:	0c f0       	brlt	.+2      	; 0x1e7a <_fpadd_parts+0xb8>
    1e78:	61 c0       	rjmp	.+194    	; 0x1f3c <_fpadd_parts+0x17a>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	19 06       	cpc	r1, r25
    1e7e:	6c f5       	brge	.+90     	; 0x1eda <_fpadd_parts+0x118>
    1e80:	37 01       	movw	r6, r14
    1e82:	48 01       	movw	r8, r16
    1e84:	0a 2c       	mov	r0, r10
    1e86:	04 c0       	rjmp	.+8      	; 0x1e90 <_fpadd_parts+0xce>
    1e88:	96 94       	lsr	r9
    1e8a:	87 94       	ror	r8
    1e8c:	77 94       	ror	r7
    1e8e:	67 94       	ror	r6
    1e90:	0a 94       	dec	r0
    1e92:	d2 f7       	brpl	.-12     	; 0x1e88 <_fpadd_parts+0xc6>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	0a 2c       	mov	r0, r10
    1e9e:	04 c0       	rjmp	.+8      	; 0x1ea8 <_fpadd_parts+0xe6>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	0a 94       	dec	r0
    1eaa:	d2 f7       	brpl	.-12     	; 0x1ea0 <_fpadd_parts+0xde>
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	a1 09       	sbc	r26, r1
    1eb0:	b1 09       	sbc	r27, r1
    1eb2:	8e 21       	and	r24, r14
    1eb4:	9f 21       	and	r25, r15
    1eb6:	a0 23       	and	r26, r16
    1eb8:	b1 23       	and	r27, r17
    1eba:	ee 24       	eor	r14, r14
    1ebc:	ff 24       	eor	r15, r15
    1ebe:	87 01       	movw	r16, r14
    1ec0:	e3 94       	inc	r14
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	a1 05       	cpc	r26, r1
    1ec6:	b1 05       	cpc	r27, r1
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <_fpadd_parts+0x10e>
    1eca:	ee 24       	eor	r14, r14
    1ecc:	ff 24       	eor	r15, r15
    1ece:	87 01       	movw	r16, r14
    1ed0:	e6 28       	or	r14, r6
    1ed2:	f7 28       	or	r15, r7
    1ed4:	08 29       	or	r16, r8
    1ed6:	19 29       	or	r17, r9
    1ed8:	3c c0       	rjmp	.+120    	; 0x1f52 <_fpadd_parts+0x190>
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	d1 f1       	breq	.+116    	; 0x1f52 <_fpadd_parts+0x190>
    1ede:	ca 0c       	add	r12, r10
    1ee0:	db 1c       	adc	r13, r11
    1ee2:	39 01       	movw	r6, r18
    1ee4:	4a 01       	movw	r8, r20
    1ee6:	0a 2c       	mov	r0, r10
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <_fpadd_parts+0x130>
    1eea:	96 94       	lsr	r9
    1eec:	87 94       	ror	r8
    1eee:	77 94       	ror	r7
    1ef0:	67 94       	ror	r6
    1ef2:	0a 94       	dec	r0
    1ef4:	d2 f7       	brpl	.-12     	; 0x1eea <_fpadd_parts+0x128>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e0       	ldi	r26, 0x00	; 0
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	0a 2c       	mov	r0, r10
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <_fpadd_parts+0x148>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	aa 1f       	adc	r26, r26
    1f08:	bb 1f       	adc	r27, r27
    1f0a:	0a 94       	dec	r0
    1f0c:	d2 f7       	brpl	.-12     	; 0x1f02 <_fpadd_parts+0x140>
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	a1 09       	sbc	r26, r1
    1f12:	b1 09       	sbc	r27, r1
    1f14:	82 23       	and	r24, r18
    1f16:	93 23       	and	r25, r19
    1f18:	a4 23       	and	r26, r20
    1f1a:	b5 23       	and	r27, r21
    1f1c:	21 e0       	ldi	r18, 0x01	; 1
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	a1 05       	cpc	r26, r1
    1f28:	b1 05       	cpc	r27, r1
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <_fpadd_parts+0x170>
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	a9 01       	movw	r20, r18
    1f32:	26 29       	or	r18, r6
    1f34:	37 29       	or	r19, r7
    1f36:	48 29       	or	r20, r8
    1f38:	59 29       	or	r21, r9
    1f3a:	0b c0       	rjmp	.+22     	; 0x1f52 <_fpadd_parts+0x190>
    1f3c:	6c 14       	cp	r6, r12
    1f3e:	7d 04       	cpc	r7, r13
    1f40:	24 f4       	brge	.+8      	; 0x1f4a <_fpadd_parts+0x188>
    1f42:	ee 24       	eor	r14, r14
    1f44:	ff 24       	eor	r15, r15
    1f46:	87 01       	movw	r16, r14
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <_fpadd_parts+0x190>
    1f4a:	63 01       	movw	r12, r6
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	a9 01       	movw	r20, r18
    1f52:	81 81       	ldd	r24, Z+1	; 0x01
    1f54:	fb 01       	movw	r30, r22
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	89 17       	cp	r24, r25
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <_fpadd_parts+0x19c>
    1f5c:	45 c0       	rjmp	.+138    	; 0x1fe8 <_fpadd_parts+0x226>
    1f5e:	88 23       	and	r24, r24
    1f60:	49 f0       	breq	.+18     	; 0x1f74 <_fpadd_parts+0x1b2>
    1f62:	d8 01       	movw	r26, r16
    1f64:	c7 01       	movw	r24, r14
    1f66:	82 1b       	sub	r24, r18
    1f68:	93 0b       	sbc	r25, r19
    1f6a:	a4 0b       	sbc	r26, r20
    1f6c:	b5 0b       	sbc	r27, r21
    1f6e:	9c 01       	movw	r18, r24
    1f70:	ad 01       	movw	r20, r26
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <_fpadd_parts+0x1ba>
    1f74:	2e 19       	sub	r18, r14
    1f76:	3f 09       	sbc	r19, r15
    1f78:	40 0b       	sbc	r20, r16
    1f7a:	51 0b       	sbc	r21, r17
    1f7c:	57 fd       	sbrc	r21, 7
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <_fpadd_parts+0x1c6>
    1f80:	19 82       	std	Y+1, r1	; 0x01
    1f82:	ca 82       	std	Y+2, r12	; 0x02
    1f84:	db 82       	std	Y+3, r13	; 0x03
    1f86:	0b c0       	rjmp	.+22     	; 0x1f9e <_fpadd_parts+0x1dc>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	ca 82       	std	Y+2, r12	; 0x02
    1f8e:	db 82       	std	Y+3, r13	; 0x03
    1f90:	50 95       	com	r21
    1f92:	40 95       	com	r20
    1f94:	30 95       	com	r19
    1f96:	21 95       	neg	r18
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9e:	2c 83       	std	Y+4, r18	; 0x04
    1fa0:	3d 83       	std	Y+5, r19	; 0x05
    1fa2:	4e 83       	std	Y+6, r20	; 0x06
    1fa4:	5f 83       	std	Y+7, r21	; 0x07
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <_fpadd_parts+0x200>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	8c 83       	std	Y+4, r24	; 0x04
    1fb2:	9d 83       	std	Y+5, r25	; 0x05
    1fb4:	ae 83       	std	Y+6, r26	; 0x06
    1fb6:	bf 83       	std	Y+7, r27	; 0x07
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc6:	ae 81       	ldd	r26, Y+6	; 0x06
    1fc8:	bf 81       	ldd	r27, Y+7	; 0x07
    1fca:	9c 01       	movw	r18, r24
    1fcc:	ad 01       	movw	r20, r26
    1fce:	21 50       	subi	r18, 0x01	; 1
    1fd0:	30 40       	sbci	r19, 0x00	; 0
    1fd2:	40 40       	sbci	r20, 0x00	; 0
    1fd4:	50 40       	sbci	r21, 0x00	; 0
    1fd6:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd8:	ef ef       	ldi	r30, 0xFF	; 255
    1fda:	3e 07       	cpc	r19, r30
    1fdc:	ef ef       	ldi	r30, 0xFF	; 255
    1fde:	4e 07       	cpc	r20, r30
    1fe0:	ef e3       	ldi	r30, 0x3F	; 63
    1fe2:	5e 07       	cpc	r21, r30
    1fe4:	08 f3       	brcs	.-62     	; 0x1fa8 <_fpadd_parts+0x1e6>
    1fe6:	0b c0       	rjmp	.+22     	; 0x1ffe <_fpadd_parts+0x23c>
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	ca 82       	std	Y+2, r12	; 0x02
    1fec:	db 82       	std	Y+3, r13	; 0x03
    1fee:	2e 0d       	add	r18, r14
    1ff0:	3f 1d       	adc	r19, r15
    1ff2:	40 1f       	adc	r20, r16
    1ff4:	51 1f       	adc	r21, r17
    1ff6:	2c 83       	std	Y+4, r18	; 0x04
    1ff8:	3d 83       	std	Y+5, r19	; 0x05
    1ffa:	4e 83       	std	Y+6, r20	; 0x06
    1ffc:	5f 83       	std	Y+7, r21	; 0x07
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	88 83       	st	Y, r24
    2002:	2c 81       	ldd	r18, Y+4	; 0x04
    2004:	3d 81       	ldd	r19, Y+5	; 0x05
    2006:	4e 81       	ldd	r20, Y+6	; 0x06
    2008:	5f 81       	ldd	r21, Y+7	; 0x07
    200a:	57 ff       	sbrs	r21, 7
    200c:	1d c0       	rjmp	.+58     	; 0x2048 <_fpadd_parts+0x286>
    200e:	da 01       	movw	r26, r20
    2010:	c9 01       	movw	r24, r18
    2012:	81 70       	andi	r24, 0x01	; 1
    2014:	90 70       	andi	r25, 0x00	; 0
    2016:	a0 70       	andi	r26, 0x00	; 0
    2018:	b0 70       	andi	r27, 0x00	; 0
    201a:	56 95       	lsr	r21
    201c:	47 95       	ror	r20
    201e:	37 95       	ror	r19
    2020:	27 95       	ror	r18
    2022:	82 2b       	or	r24, r18
    2024:	93 2b       	or	r25, r19
    2026:	a4 2b       	or	r26, r20
    2028:	b5 2b       	or	r27, r21
    202a:	8c 83       	std	Y+4, r24	; 0x04
    202c:	9d 83       	std	Y+5, r25	; 0x05
    202e:	ae 83       	std	Y+6, r26	; 0x06
    2030:	bf 83       	std	Y+7, r27	; 0x07
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	9b 83       	std	Y+3, r25	; 0x03
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <_fpadd_parts+0x286>
    203e:	e0 e8       	ldi	r30, 0x80	; 128
    2040:	f0 e2       	ldi	r31, 0x20	; 32
    2042:	03 c0       	rjmp	.+6      	; 0x204a <_fpadd_parts+0x288>
    2044:	fb 01       	movw	r30, r22
    2046:	01 c0       	rjmp	.+2      	; 0x204a <_fpadd_parts+0x288>
    2048:	fe 01       	movw	r30, r28
    204a:	cf 01       	movw	r24, r30
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	ee e0       	ldi	r30, 0x0E	; 14
    2052:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__epilogue_restores__+0x8>

00002056 <__addsf3>:
    2056:	a0 e2       	ldi	r26, 0x20	; 32
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__prologue_saves__+0x18>
    2062:	69 83       	std	Y+1, r22	; 0x01
    2064:	7a 83       	std	Y+2, r23	; 0x02
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	2d 83       	std	Y+5, r18	; 0x05
    206c:	3e 83       	std	Y+6, r19	; 0x06
    206e:	4f 83       	std	Y+7, r20	; 0x07
    2070:	58 87       	std	Y+8, r21	; 0x08
    2072:	89 e0       	ldi	r24, 0x09	; 9
    2074:	e8 2e       	mov	r14, r24
    2076:	f1 2c       	mov	r15, r1
    2078:	ec 0e       	add	r14, r28
    207a:	fd 1e       	adc	r15, r29
    207c:	ce 01       	movw	r24, r28
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	b7 01       	movw	r22, r14
    2082:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2086:	8e 01       	movw	r16, r28
    2088:	0f 5e       	subi	r16, 0xEF	; 239
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	ce 01       	movw	r24, r28
    208e:	05 96       	adiw	r24, 0x05	; 5
    2090:	b8 01       	movw	r22, r16
    2092:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2096:	c7 01       	movw	r24, r14
    2098:	b8 01       	movw	r22, r16
    209a:	ae 01       	movw	r20, r28
    209c:	47 5e       	subi	r20, 0xE7	; 231
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_fpadd_parts>
    20a4:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    20a8:	a0 96       	adiw	r28, 0x20	; 32
    20aa:	e6 e0       	ldi	r30, 0x06	; 6
    20ac:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__+0x18>

000020b0 <__subsf3>:
    20b0:	a0 e2       	ldi	r26, 0x20	; 32
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e5       	ldi	r30, 0x5E	; 94
    20b6:	f0 e1       	ldi	r31, 0x10	; 16
    20b8:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__prologue_saves__+0x18>
    20bc:	69 83       	std	Y+1, r22	; 0x01
    20be:	7a 83       	std	Y+2, r23	; 0x02
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	2d 83       	std	Y+5, r18	; 0x05
    20c6:	3e 83       	std	Y+6, r19	; 0x06
    20c8:	4f 83       	std	Y+7, r20	; 0x07
    20ca:	58 87       	std	Y+8, r21	; 0x08
    20cc:	8e 01       	movw	r16, r28
    20ce:	07 5f       	subi	r16, 0xF7	; 247
    20d0:	1f 4f       	sbci	r17, 0xFF	; 255
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	b8 01       	movw	r22, r16
    20d8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    20dc:	91 e1       	ldi	r25, 0x11	; 17
    20de:	e9 2e       	mov	r14, r25
    20e0:	f1 2c       	mov	r15, r1
    20e2:	ec 0e       	add	r14, r28
    20e4:	fd 1e       	adc	r15, r29
    20e6:	ce 01       	movw	r24, r28
    20e8:	05 96       	adiw	r24, 0x05	; 5
    20ea:	b7 01       	movw	r22, r14
    20ec:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    20f0:	8a 89       	ldd	r24, Y+18	; 0x12
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	89 27       	eor	r24, r25
    20f6:	8a 8b       	std	Y+18, r24	; 0x12
    20f8:	c8 01       	movw	r24, r16
    20fa:	b7 01       	movw	r22, r14
    20fc:	ae 01       	movw	r20, r28
    20fe:	47 5e       	subi	r20, 0xE7	; 231
    2100:	5f 4f       	sbci	r21, 0xFF	; 255
    2102:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_fpadd_parts>
    2106:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    210a:	a0 96       	adiw	r28, 0x20	; 32
    210c:	e6 e0       	ldi	r30, 0x06	; 6
    210e:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__+0x18>

00002112 <__mulsf3>:
    2112:	a0 e2       	ldi	r26, 0x20	; 32
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__>
    211e:	69 83       	std	Y+1, r22	; 0x01
    2120:	7a 83       	std	Y+2, r23	; 0x02
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	2d 83       	std	Y+5, r18	; 0x05
    2128:	3e 83       	std	Y+6, r19	; 0x06
    212a:	4f 83       	std	Y+7, r20	; 0x07
    212c:	58 87       	std	Y+8, r21	; 0x08
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	be 01       	movw	r22, r28
    2134:	67 5f       	subi	r22, 0xF7	; 247
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    213c:	ce 01       	movw	r24, r28
    213e:	05 96       	adiw	r24, 0x05	; 5
    2140:	be 01       	movw	r22, r28
    2142:	6f 5e       	subi	r22, 0xEF	; 239
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    214a:	99 85       	ldd	r25, Y+9	; 0x09
    214c:	92 30       	cpi	r25, 0x02	; 2
    214e:	78 f0       	brcs	.+30     	; 0x216e <__mulsf3+0x5c>
    2150:	89 89       	ldd	r24, Y+17	; 0x11
    2152:	82 30       	cpi	r24, 0x02	; 2
    2154:	c0 f0       	brcs	.+48     	; 0x2186 <__mulsf3+0x74>
    2156:	94 30       	cpi	r25, 0x04	; 4
    2158:	19 f4       	brne	.+6      	; 0x2160 <__mulsf3+0x4e>
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	41 f4       	brne	.+16     	; 0x216e <__mulsf3+0x5c>
    215e:	cb c0       	rjmp	.+406    	; 0x22f6 <__mulsf3+0x1e4>
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	19 f4       	brne	.+6      	; 0x216a <__mulsf3+0x58>
    2164:	92 30       	cpi	r25, 0x02	; 2
    2166:	79 f4       	brne	.+30     	; 0x2186 <__mulsf3+0x74>
    2168:	c6 c0       	rjmp	.+396    	; 0x22f6 <__mulsf3+0x1e4>
    216a:	92 30       	cpi	r25, 0x02	; 2
    216c:	51 f4       	brne	.+20     	; 0x2182 <__mulsf3+0x70>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	2a 85       	ldd	r18, Y+10	; 0x0a
    2172:	9a 89       	ldd	r25, Y+18	; 0x12
    2174:	29 17       	cp	r18, r25
    2176:	09 f4       	brne	.+2      	; 0x217a <__mulsf3+0x68>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	8a 87       	std	Y+10, r24	; 0x0a
    217c:	ce 01       	movw	r24, r28
    217e:	09 96       	adiw	r24, 0x09	; 9
    2180:	bc c0       	rjmp	.+376    	; 0x22fa <__mulsf3+0x1e8>
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	51 f4       	brne	.+20     	; 0x219a <__mulsf3+0x88>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	2a 85       	ldd	r18, Y+10	; 0x0a
    218a:	9a 89       	ldd	r25, Y+18	; 0x12
    218c:	29 17       	cp	r18, r25
    218e:	09 f4       	brne	.+2      	; 0x2192 <__mulsf3+0x80>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	8a 8b       	std	Y+18, r24	; 0x12
    2194:	ce 01       	movw	r24, r28
    2196:	41 96       	adiw	r24, 0x11	; 17
    2198:	b0 c0       	rjmp	.+352    	; 0x22fa <__mulsf3+0x1e8>
    219a:	6d 84       	ldd	r6, Y+13	; 0x0d
    219c:	7e 84       	ldd	r7, Y+14	; 0x0e
    219e:	8f 84       	ldd	r8, Y+15	; 0x0f
    21a0:	98 88       	ldd	r9, Y+16	; 0x10
    21a2:	ed 88       	ldd	r14, Y+21	; 0x15
    21a4:	fe 88       	ldd	r15, Y+22	; 0x16
    21a6:	0f 89       	ldd	r16, Y+23	; 0x17
    21a8:	18 8d       	ldd	r17, Y+24	; 0x18
    21aa:	e0 e2       	ldi	r30, 0x20	; 32
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	dc 01       	movw	r26, r24
    21b4:	aa 24       	eor	r10, r10
    21b6:	bb 24       	eor	r11, r11
    21b8:	65 01       	movw	r12, r10
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	b3 01       	movw	r22, r6
    21c2:	61 70       	andi	r22, 0x01	; 1
    21c4:	70 70       	andi	r23, 0x00	; 0
    21c6:	61 15       	cp	r22, r1
    21c8:	71 05       	cpc	r23, r1
    21ca:	d1 f0       	breq	.+52     	; 0x2200 <__mulsf3+0xee>
    21cc:	2e 0d       	add	r18, r14
    21ce:	3f 1d       	adc	r19, r15
    21d0:	40 1f       	adc	r20, r16
    21d2:	51 1f       	adc	r21, r17
    21d4:	15 01       	movw	r2, r10
    21d6:	26 01       	movw	r4, r12
    21d8:	28 0e       	add	r2, r24
    21da:	39 1e       	adc	r3, r25
    21dc:	4a 1e       	adc	r4, r26
    21de:	5b 1e       	adc	r5, r27
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e0       	ldi	r26, 0x00	; 0
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	2e 15       	cp	r18, r14
    21ea:	3f 05       	cpc	r19, r15
    21ec:	40 07       	cpc	r20, r16
    21ee:	51 07       	cpc	r21, r17
    21f0:	18 f0       	brcs	.+6      	; 0x21f8 <__mulsf3+0xe6>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	dc 01       	movw	r26, r24
    21f8:	82 0d       	add	r24, r2
    21fa:	93 1d       	adc	r25, r3
    21fc:	a4 1d       	adc	r26, r4
    21fe:	b5 1d       	adc	r27, r5
    2200:	aa 0c       	add	r10, r10
    2202:	bb 1c       	adc	r11, r11
    2204:	cc 1c       	adc	r12, r12
    2206:	dd 1c       	adc	r13, r13
    2208:	17 ff       	sbrs	r17, 7
    220a:	09 c0       	rjmp	.+18     	; 0x221e <__mulsf3+0x10c>
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	26 2e       	mov	r2, r22
    2210:	31 2c       	mov	r3, r1
    2212:	41 2c       	mov	r4, r1
    2214:	51 2c       	mov	r5, r1
    2216:	a2 28       	or	r10, r2
    2218:	b3 28       	or	r11, r3
    221a:	c4 28       	or	r12, r4
    221c:	d5 28       	or	r13, r5
    221e:	31 97       	sbiw	r30, 0x01	; 1
    2220:	49 f0       	breq	.+18     	; 0x2234 <__mulsf3+0x122>
    2222:	ee 0c       	add	r14, r14
    2224:	ff 1c       	adc	r15, r15
    2226:	00 1f       	adc	r16, r16
    2228:	11 1f       	adc	r17, r17
    222a:	96 94       	lsr	r9
    222c:	87 94       	ror	r8
    222e:	77 94       	ror	r7
    2230:	67 94       	ror	r6
    2232:	c6 cf       	rjmp	.-116    	; 0x21c0 <__mulsf3+0xae>
    2234:	6b 89       	ldd	r22, Y+19	; 0x13
    2236:	7c 89       	ldd	r23, Y+20	; 0x14
    2238:	eb 85       	ldd	r30, Y+11	; 0x0b
    223a:	fc 85       	ldd	r31, Y+12	; 0x0c
    223c:	6e 0f       	add	r22, r30
    223e:	7f 1f       	adc	r23, r31
    2240:	6e 5f       	subi	r22, 0xFE	; 254
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	6b 8f       	std	Y+27, r22	; 0x1b
    2246:	7c 8f       	std	Y+28, r23	; 0x1c
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	ea 85       	ldd	r30, Y+10	; 0x0a
    224c:	7a 89       	ldd	r23, Y+18	; 0x12
    224e:	e7 17       	cp	r30, r23
    2250:	09 f4       	brne	.+2      	; 0x2254 <__mulsf3+0x142>
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	6a 8f       	std	Y+26, r22	; 0x1a
    2256:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2258:	7c 8d       	ldd	r23, Y+28	; 0x1c
    225a:	10 c0       	rjmp	.+32     	; 0x227c <__mulsf3+0x16a>
    225c:	fc 01       	movw	r30, r24
    225e:	e1 70       	andi	r30, 0x01	; 1
    2260:	f0 70       	andi	r31, 0x00	; 0
    2262:	30 97       	sbiw	r30, 0x00	; 0
    2264:	29 f0       	breq	.+10     	; 0x2270 <__mulsf3+0x15e>
    2266:	56 95       	lsr	r21
    2268:	47 95       	ror	r20
    226a:	37 95       	ror	r19
    226c:	27 95       	ror	r18
    226e:	50 68       	ori	r21, 0x80	; 128
    2270:	b6 95       	lsr	r27
    2272:	a7 95       	ror	r26
    2274:	97 95       	ror	r25
    2276:	87 95       	ror	r24
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	b7 fd       	sbrc	r27, 7
    227e:	ee cf       	rjmp	.-36     	; 0x225c <__mulsf3+0x14a>
    2280:	0c c0       	rjmp	.+24     	; 0x229a <__mulsf3+0x188>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	aa 1f       	adc	r26, r26
    2288:	bb 1f       	adc	r27, r27
    228a:	57 fd       	sbrc	r21, 7
    228c:	81 60       	ori	r24, 0x01	; 1
    228e:	22 0f       	add	r18, r18
    2290:	33 1f       	adc	r19, r19
    2292:	44 1f       	adc	r20, r20
    2294:	55 1f       	adc	r21, r21
    2296:	61 50       	subi	r22, 0x01	; 1
    2298:	70 40       	sbci	r23, 0x00	; 0
    229a:	80 30       	cpi	r24, 0x00	; 0
    229c:	e0 e0       	ldi	r30, 0x00	; 0
    229e:	9e 07       	cpc	r25, r30
    22a0:	e0 e0       	ldi	r30, 0x00	; 0
    22a2:	ae 07       	cpc	r26, r30
    22a4:	e0 e4       	ldi	r30, 0x40	; 64
    22a6:	be 07       	cpc	r27, r30
    22a8:	60 f3       	brcs	.-40     	; 0x2282 <__mulsf3+0x170>
    22aa:	6b 8f       	std	Y+27, r22	; 0x1b
    22ac:	7c 8f       	std	Y+28, r23	; 0x1c
    22ae:	6f e7       	ldi	r22, 0x7F	; 127
    22b0:	e6 2e       	mov	r14, r22
    22b2:	f1 2c       	mov	r15, r1
    22b4:	01 2d       	mov	r16, r1
    22b6:	11 2d       	mov	r17, r1
    22b8:	e8 22       	and	r14, r24
    22ba:	f9 22       	and	r15, r25
    22bc:	0a 23       	and	r16, r26
    22be:	1b 23       	and	r17, r27
    22c0:	60 e4       	ldi	r22, 0x40	; 64
    22c2:	e6 16       	cp	r14, r22
    22c4:	f1 04       	cpc	r15, r1
    22c6:	01 05       	cpc	r16, r1
    22c8:	11 05       	cpc	r17, r1
    22ca:	61 f4       	brne	.+24     	; 0x22e4 <__mulsf3+0x1d2>
    22cc:	87 fd       	sbrc	r24, 7
    22ce:	0a c0       	rjmp	.+20     	; 0x22e4 <__mulsf3+0x1d2>
    22d0:	21 15       	cp	r18, r1
    22d2:	31 05       	cpc	r19, r1
    22d4:	41 05       	cpc	r20, r1
    22d6:	51 05       	cpc	r21, r1
    22d8:	29 f0       	breq	.+10     	; 0x22e4 <__mulsf3+0x1d2>
    22da:	80 5c       	subi	r24, 0xC0	; 192
    22dc:	9f 4f       	sbci	r25, 0xFF	; 255
    22de:	af 4f       	sbci	r26, 0xFF	; 255
    22e0:	bf 4f       	sbci	r27, 0xFF	; 255
    22e2:	80 78       	andi	r24, 0x80	; 128
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	9e 8f       	std	Y+30, r25	; 0x1e
    22e8:	af 8f       	std	Y+31, r26	; 0x1f
    22ea:	b8 a3       	std	Y+32, r27	; 0x20
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	89 8f       	std	Y+25, r24	; 0x19
    22f0:	ce 01       	movw	r24, r28
    22f2:	49 96       	adiw	r24, 0x19	; 25
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <__mulsf3+0x1e8>
    22f6:	80 e8       	ldi	r24, 0x80	; 128
    22f8:	90 e2       	ldi	r25, 0x20	; 32
    22fa:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    22fe:	a0 96       	adiw	r28, 0x20	; 32
    2300:	e2 e1       	ldi	r30, 0x12	; 18
    2302:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__epilogue_restores__>

00002306 <__divsf3>:
    2306:	a8 e1       	ldi	r26, 0x18	; 24
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e8       	ldi	r30, 0x89	; 137
    230c:	f1 e1       	ldi	r31, 0x11	; 17
    230e:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__prologue_saves__+0x10>
    2312:	69 83       	std	Y+1, r22	; 0x01
    2314:	7a 83       	std	Y+2, r23	; 0x02
    2316:	8b 83       	std	Y+3, r24	; 0x03
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	2d 83       	std	Y+5, r18	; 0x05
    231c:	3e 83       	std	Y+6, r19	; 0x06
    231e:	4f 83       	std	Y+7, r20	; 0x07
    2320:	58 87       	std	Y+8, r21	; 0x08
    2322:	8e 01       	movw	r16, r28
    2324:	07 5f       	subi	r16, 0xF7	; 247
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	ce 01       	movw	r24, r28
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	b8 01       	movw	r22, r16
    232e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2332:	81 e1       	ldi	r24, 0x11	; 17
    2334:	e8 2e       	mov	r14, r24
    2336:	f1 2c       	mov	r15, r1
    2338:	ec 0e       	add	r14, r28
    233a:	fd 1e       	adc	r15, r29
    233c:	ce 01       	movw	r24, r28
    233e:	05 96       	adiw	r24, 0x05	; 5
    2340:	b7 01       	movw	r22, r14
    2342:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2346:	99 85       	ldd	r25, Y+9	; 0x09
    2348:	92 30       	cpi	r25, 0x02	; 2
    234a:	08 f4       	brcc	.+2      	; 0x234e <__divsf3+0x48>
    234c:	83 c0       	rjmp	.+262    	; 0x2454 <__divsf3+0x14e>
    234e:	89 89       	ldd	r24, Y+17	; 0x11
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	08 f4       	brcc	.+2      	; 0x2356 <__divsf3+0x50>
    2354:	7b c0       	rjmp	.+246    	; 0x244c <__divsf3+0x146>
    2356:	2a 85       	ldd	r18, Y+10	; 0x0a
    2358:	3a 89       	ldd	r19, Y+18	; 0x12
    235a:	23 27       	eor	r18, r19
    235c:	2a 87       	std	Y+10, r18	; 0x0a
    235e:	94 30       	cpi	r25, 0x04	; 4
    2360:	11 f0       	breq	.+4      	; 0x2366 <__divsf3+0x60>
    2362:	92 30       	cpi	r25, 0x02	; 2
    2364:	21 f4       	brne	.+8      	; 0x236e <__divsf3+0x68>
    2366:	98 17       	cp	r25, r24
    2368:	09 f0       	breq	.+2      	; 0x236c <__divsf3+0x66>
    236a:	6c c0       	rjmp	.+216    	; 0x2444 <__divsf3+0x13e>
    236c:	71 c0       	rjmp	.+226    	; 0x2450 <__divsf3+0x14a>
    236e:	84 30       	cpi	r24, 0x04	; 4
    2370:	39 f4       	brne	.+14     	; 0x2380 <__divsf3+0x7a>
    2372:	1d 86       	std	Y+13, r1	; 0x0d
    2374:	1e 86       	std	Y+14, r1	; 0x0e
    2376:	1f 86       	std	Y+15, r1	; 0x0f
    2378:	18 8a       	std	Y+16, r1	; 0x10
    237a:	1b 86       	std	Y+11, r1	; 0x0b
    237c:	1c 86       	std	Y+12, r1	; 0x0c
    237e:	6a c0       	rjmp	.+212    	; 0x2454 <__divsf3+0x14e>
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	19 f4       	brne	.+6      	; 0x238a <__divsf3+0x84>
    2384:	84 e0       	ldi	r24, 0x04	; 4
    2386:	89 87       	std	Y+9, r24	; 0x09
    2388:	65 c0       	rjmp	.+202    	; 0x2454 <__divsf3+0x14e>
    238a:	8b 85       	ldd	r24, Y+11	; 0x0b
    238c:	9c 85       	ldd	r25, Y+12	; 0x0c
    238e:	2b 89       	ldd	r18, Y+19	; 0x13
    2390:	3c 89       	ldd	r19, Y+20	; 0x14
    2392:	82 1b       	sub	r24, r18
    2394:	93 0b       	sbc	r25, r19
    2396:	8b 87       	std	Y+11, r24	; 0x0b
    2398:	9c 87       	std	Y+12, r25	; 0x0c
    239a:	2d 85       	ldd	r18, Y+13	; 0x0d
    239c:	3e 85       	ldd	r19, Y+14	; 0x0e
    239e:	4f 85       	ldd	r20, Y+15	; 0x0f
    23a0:	58 89       	ldd	r21, Y+16	; 0x10
    23a2:	ed 88       	ldd	r14, Y+21	; 0x15
    23a4:	fe 88       	ldd	r15, Y+22	; 0x16
    23a6:	0f 89       	ldd	r16, Y+23	; 0x17
    23a8:	18 8d       	ldd	r17, Y+24	; 0x18
    23aa:	2e 15       	cp	r18, r14
    23ac:	3f 05       	cpc	r19, r15
    23ae:	40 07       	cpc	r20, r16
    23b0:	51 07       	cpc	r21, r17
    23b2:	38 f4       	brcc	.+14     	; 0x23c2 <__divsf3+0xbc>
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	44 1f       	adc	r20, r20
    23ba:	55 1f       	adc	r21, r21
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	8b 87       	std	Y+11, r24	; 0x0b
    23c0:	9c 87       	std	Y+12, r25	; 0x0c
    23c2:	6f e1       	ldi	r22, 0x1F	; 31
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	a1 2c       	mov	r10, r1
    23c8:	b1 2c       	mov	r11, r1
    23ca:	c1 2c       	mov	r12, r1
    23cc:	a0 e4       	ldi	r26, 0x40	; 64
    23ce:	da 2e       	mov	r13, r26
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	dc 01       	movw	r26, r24
    23d6:	2e 15       	cp	r18, r14
    23d8:	3f 05       	cpc	r19, r15
    23da:	40 07       	cpc	r20, r16
    23dc:	51 07       	cpc	r21, r17
    23de:	40 f0       	brcs	.+16     	; 0x23f0 <__divsf3+0xea>
    23e0:	8a 29       	or	r24, r10
    23e2:	9b 29       	or	r25, r11
    23e4:	ac 29       	or	r26, r12
    23e6:	bd 29       	or	r27, r13
    23e8:	2e 19       	sub	r18, r14
    23ea:	3f 09       	sbc	r19, r15
    23ec:	40 0b       	sbc	r20, r16
    23ee:	51 0b       	sbc	r21, r17
    23f0:	d6 94       	lsr	r13
    23f2:	c7 94       	ror	r12
    23f4:	b7 94       	ror	r11
    23f6:	a7 94       	ror	r10
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	44 1f       	adc	r20, r20
    23fe:	55 1f       	adc	r21, r21
    2400:	61 50       	subi	r22, 0x01	; 1
    2402:	70 40       	sbci	r23, 0x00	; 0
    2404:	41 f7       	brne	.-48     	; 0x23d6 <__divsf3+0xd0>
    2406:	6f e7       	ldi	r22, 0x7F	; 127
    2408:	e6 2e       	mov	r14, r22
    240a:	f1 2c       	mov	r15, r1
    240c:	01 2d       	mov	r16, r1
    240e:	11 2d       	mov	r17, r1
    2410:	e8 22       	and	r14, r24
    2412:	f9 22       	and	r15, r25
    2414:	0a 23       	and	r16, r26
    2416:	1b 23       	and	r17, r27
    2418:	60 e4       	ldi	r22, 0x40	; 64
    241a:	e6 16       	cp	r14, r22
    241c:	f1 04       	cpc	r15, r1
    241e:	01 05       	cpc	r16, r1
    2420:	11 05       	cpc	r17, r1
    2422:	61 f4       	brne	.+24     	; 0x243c <__divsf3+0x136>
    2424:	87 fd       	sbrc	r24, 7
    2426:	0a c0       	rjmp	.+20     	; 0x243c <__divsf3+0x136>
    2428:	21 15       	cp	r18, r1
    242a:	31 05       	cpc	r19, r1
    242c:	41 05       	cpc	r20, r1
    242e:	51 05       	cpc	r21, r1
    2430:	29 f0       	breq	.+10     	; 0x243c <__divsf3+0x136>
    2432:	80 5c       	subi	r24, 0xC0	; 192
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	af 4f       	sbci	r26, 0xFF	; 255
    2438:	bf 4f       	sbci	r27, 0xFF	; 255
    243a:	80 78       	andi	r24, 0x80	; 128
    243c:	8d 87       	std	Y+13, r24	; 0x0d
    243e:	9e 87       	std	Y+14, r25	; 0x0e
    2440:	af 87       	std	Y+15, r26	; 0x0f
    2442:	b8 8b       	std	Y+16, r27	; 0x10
    2444:	8e 01       	movw	r16, r28
    2446:	07 5f       	subi	r16, 0xF7	; 247
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <__divsf3+0x14e>
    244c:	87 01       	movw	r16, r14
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <__divsf3+0x14e>
    2450:	00 e8       	ldi	r16, 0x80	; 128
    2452:	10 e2       	ldi	r17, 0x20	; 32
    2454:	c8 01       	movw	r24, r16
    2456:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    245a:	68 96       	adiw	r28, 0x18	; 24
    245c:	ea e0       	ldi	r30, 0x0A	; 10
    245e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x10>

00002462 <__gesf2>:
    2462:	a8 e1       	ldi	r26, 0x18	; 24
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e3       	ldi	r30, 0x37	; 55
    2468:	f2 e1       	ldi	r31, 0x12	; 18
    246a:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__prologue_saves__+0x18>
    246e:	69 83       	std	Y+1, r22	; 0x01
    2470:	7a 83       	std	Y+2, r23	; 0x02
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	2d 83       	std	Y+5, r18	; 0x05
    2478:	3e 83       	std	Y+6, r19	; 0x06
    247a:	4f 83       	std	Y+7, r20	; 0x07
    247c:	58 87       	std	Y+8, r21	; 0x08
    247e:	8e 01       	movw	r16, r28
    2480:	07 5f       	subi	r16, 0xF7	; 247
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	ce 01       	movw	r24, r28
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	b8 01       	movw	r22, r16
    248a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    248e:	81 e1       	ldi	r24, 0x11	; 17
    2490:	e8 2e       	mov	r14, r24
    2492:	f1 2c       	mov	r15, r1
    2494:	ec 0e       	add	r14, r28
    2496:	fd 1e       	adc	r15, r29
    2498:	ce 01       	movw	r24, r28
    249a:	05 96       	adiw	r24, 0x05	; 5
    249c:	b7 01       	movw	r22, r14
    249e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	40 f0       	brcs	.+16     	; 0x24b8 <__gesf2+0x56>
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	28 f0       	brcs	.+10     	; 0x24b8 <__gesf2+0x56>
    24ae:	c8 01       	movw	r24, r16
    24b0:	b7 01       	movw	r22, r14
    24b2:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fpcmp_parts_f>
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <__gesf2+0x58>
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	68 96       	adiw	r28, 0x18	; 24
    24bc:	e6 e0       	ldi	r30, 0x06	; 6
    24be:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__+0x18>

000024c2 <__fixsfsi>:
    24c2:	ac e0       	ldi	r26, 0x0C	; 12
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__prologue_saves__+0x20>
    24ce:	69 83       	std	Y+1, r22	; 0x01
    24d0:	7a 83       	std	Y+2, r23	; 0x02
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	be 01       	movw	r22, r28
    24dc:	6b 5f       	subi	r22, 0xFB	; 251
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	81 f1       	breq	.+96     	; 0x254a <__fixsfsi+0x88>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	70 f1       	brcs	.+92     	; 0x254a <__fixsfsi+0x88>
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	21 f4       	brne	.+8      	; 0x24fa <__fixsfsi+0x38>
    24f2:	8e 81       	ldd	r24, Y+6	; 0x06
    24f4:	88 23       	and	r24, r24
    24f6:	69 f1       	breq	.+90     	; 0x2552 <__fixsfsi+0x90>
    24f8:	0a c0       	rjmp	.+20     	; 0x250e <__fixsfsi+0x4c>
    24fa:	2f 81       	ldd	r18, Y+7	; 0x07
    24fc:	38 85       	ldd	r19, Y+8	; 0x08
    24fe:	37 fd       	sbrc	r19, 7
    2500:	24 c0       	rjmp	.+72     	; 0x254a <__fixsfsi+0x88>
    2502:	6e 81       	ldd	r22, Y+6	; 0x06
    2504:	2f 31       	cpi	r18, 0x1F	; 31
    2506:	31 05       	cpc	r19, r1
    2508:	3c f0       	brlt	.+14     	; 0x2518 <__fixsfsi+0x56>
    250a:	66 23       	and	r22, r22
    250c:	11 f1       	breq	.+68     	; 0x2552 <__fixsfsi+0x90>
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	50 e8       	ldi	r21, 0x80	; 128
    2516:	21 c0       	rjmp	.+66     	; 0x255a <__fixsfsi+0x98>
    2518:	8e e1       	ldi	r24, 0x1E	; 30
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	82 1b       	sub	r24, r18
    251e:	93 0b       	sbc	r25, r19
    2520:	29 85       	ldd	r18, Y+9	; 0x09
    2522:	3a 85       	ldd	r19, Y+10	; 0x0a
    2524:	4b 85       	ldd	r20, Y+11	; 0x0b
    2526:	5c 85       	ldd	r21, Y+12	; 0x0c
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__fixsfsi+0x70>
    252a:	56 95       	lsr	r21
    252c:	47 95       	ror	r20
    252e:	37 95       	ror	r19
    2530:	27 95       	ror	r18
    2532:	8a 95       	dec	r24
    2534:	d2 f7       	brpl	.-12     	; 0x252a <__fixsfsi+0x68>
    2536:	66 23       	and	r22, r22
    2538:	81 f0       	breq	.+32     	; 0x255a <__fixsfsi+0x98>
    253a:	50 95       	com	r21
    253c:	40 95       	com	r20
    253e:	30 95       	com	r19
    2540:	21 95       	neg	r18
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	4f 4f       	sbci	r20, 0xFF	; 255
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
    2548:	08 c0       	rjmp	.+16     	; 0x255a <__fixsfsi+0x98>
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a9 01       	movw	r20, r18
    2550:	04 c0       	rjmp	.+8      	; 0x255a <__fixsfsi+0x98>
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f ef       	ldi	r20, 0xFF	; 255
    2558:	5f e7       	ldi	r21, 0x7F	; 127
    255a:	b9 01       	movw	r22, r18
    255c:	ca 01       	movw	r24, r20
    255e:	2c 96       	adiw	r28, 0x0c	; 12
    2560:	e2 e0       	ldi	r30, 0x02	; 2
    2562:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x20>

00002566 <__floatunsisf>:
    2566:	a8 e0       	ldi	r26, 0x08	; 8
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e9 eb       	ldi	r30, 0xB9	; 185
    256c:	f2 e1       	ldi	r31, 0x12	; 18
    256e:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x14>
    2572:	7b 01       	movw	r14, r22
    2574:	8c 01       	movw	r16, r24
    2576:	1a 82       	std	Y+2, r1	; 0x02
    2578:	61 15       	cp	r22, r1
    257a:	71 05       	cpc	r23, r1
    257c:	81 05       	cpc	r24, r1
    257e:	91 05       	cpc	r25, r1
    2580:	19 f4       	brne	.+6      	; 0x2588 <__floatunsisf+0x22>
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	5f c0       	rjmp	.+190    	; 0x2646 <__floatunsisf+0xe0>
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	8e e1       	ldi	r24, 0x1E	; 30
    258e:	c8 2e       	mov	r12, r24
    2590:	d1 2c       	mov	r13, r1
    2592:	cb 82       	std	Y+3, r12	; 0x03
    2594:	dc 82       	std	Y+4, r13	; 0x04
    2596:	ed 82       	std	Y+5, r14	; 0x05
    2598:	fe 82       	std	Y+6, r15	; 0x06
    259a:	0f 83       	std	Y+7, r16	; 0x07
    259c:	18 87       	std	Y+8, r17	; 0x08
    259e:	c8 01       	movw	r24, r16
    25a0:	b7 01       	movw	r22, r14
    25a2:	0e 94 2b 13 	call	0x2656	; 0x2656 <__clzsi2>
    25a6:	fc 01       	movw	r30, r24
    25a8:	31 97       	sbiw	r30, 0x01	; 1
    25aa:	f7 ff       	sbrs	r31, 7
    25ac:	3a c0       	rjmp	.+116    	; 0x2622 <__floatunsisf+0xbc>
    25ae:	aa 27       	eor	r26, r26
    25b0:	bb 27       	eor	r27, r27
    25b2:	ae 1b       	sub	r26, r30
    25b4:	bf 0b       	sbc	r27, r31
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	0a 2e       	mov	r0, r26
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__floatunsisf+0x64>
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	44 1f       	adc	r20, r20
    25c8:	55 1f       	adc	r21, r21
    25ca:	0a 94       	dec	r0
    25cc:	d2 f7       	brpl	.-12     	; 0x25c2 <__floatunsisf+0x5c>
    25ce:	21 50       	subi	r18, 0x01	; 1
    25d0:	30 40       	sbci	r19, 0x00	; 0
    25d2:	40 40       	sbci	r20, 0x00	; 0
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	2e 21       	and	r18, r14
    25d8:	3f 21       	and	r19, r15
    25da:	40 23       	and	r20, r16
    25dc:	51 23       	and	r21, r17
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	21 15       	cp	r18, r1
    25e8:	31 05       	cpc	r19, r1
    25ea:	41 05       	cpc	r20, r1
    25ec:	51 05       	cpc	r21, r1
    25ee:	19 f4       	brne	.+6      	; 0x25f6 <__floatunsisf+0x90>
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	cb 01       	movw	r24, r22
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <__floatunsisf+0x9a>
    25f8:	16 95       	lsr	r17
    25fa:	07 95       	ror	r16
    25fc:	f7 94       	ror	r15
    25fe:	e7 94       	ror	r14
    2600:	aa 95       	dec	r26
    2602:	d2 f7       	brpl	.-12     	; 0x25f8 <__floatunsisf+0x92>
    2604:	e6 2a       	or	r14, r22
    2606:	f7 2a       	or	r15, r23
    2608:	08 2b       	or	r16, r24
    260a:	19 2b       	or	r17, r25
    260c:	ed 82       	std	Y+5, r14	; 0x05
    260e:	fe 82       	std	Y+6, r15	; 0x06
    2610:	0f 83       	std	Y+7, r16	; 0x07
    2612:	18 87       	std	Y+8, r17	; 0x08
    2614:	8e e1       	ldi	r24, 0x1E	; 30
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	8e 1b       	sub	r24, r30
    261a:	9f 0b       	sbc	r25, r31
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <__floatunsisf+0xe0>
    2622:	30 97       	sbiw	r30, 0x00	; 0
    2624:	81 f0       	breq	.+32     	; 0x2646 <__floatunsisf+0xe0>
    2626:	0e 2e       	mov	r0, r30
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <__floatunsisf+0xcc>
    262a:	ee 0c       	add	r14, r14
    262c:	ff 1c       	adc	r15, r15
    262e:	00 1f       	adc	r16, r16
    2630:	11 1f       	adc	r17, r17
    2632:	0a 94       	dec	r0
    2634:	d2 f7       	brpl	.-12     	; 0x262a <__floatunsisf+0xc4>
    2636:	ed 82       	std	Y+5, r14	; 0x05
    2638:	fe 82       	std	Y+6, r15	; 0x06
    263a:	0f 83       	std	Y+7, r16	; 0x07
    263c:	18 87       	std	Y+8, r17	; 0x08
    263e:	ce 1a       	sub	r12, r30
    2640:	df 0a       	sbc	r13, r31
    2642:	cb 82       	std	Y+3, r12	; 0x03
    2644:	dc 82       	std	Y+4, r13	; 0x04
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    264e:	28 96       	adiw	r28, 0x08	; 8
    2650:	e8 e0       	ldi	r30, 0x08	; 8
    2652:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x14>

00002656 <__clzsi2>:
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	7b 01       	movw	r14, r22
    2668:	8c 01       	movw	r16, r24
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	e8 16       	cp	r14, r24
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	f8 06       	cpc	r15, r24
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	08 07       	cpc	r16, r24
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	18 07       	cpc	r17, r24
    267a:	58 f4       	brcc	.+22     	; 0x2692 <__clzsi2+0x3c>
    267c:	ef ef       	ldi	r30, 0xFF	; 255
    267e:	ee 16       	cp	r14, r30
    2680:	f1 04       	cpc	r15, r1
    2682:	01 05       	cpc	r16, r1
    2684:	11 05       	cpc	r17, r1
    2686:	09 f0       	breq	.+2      	; 0x268a <__clzsi2+0x34>
    2688:	90 f4       	brcc	.+36     	; 0x26ae <__clzsi2+0x58>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	dc 01       	movw	r26, r24
    2690:	17 c0       	rjmp	.+46     	; 0x26c0 <__clzsi2+0x6a>
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	ef 16       	cp	r14, r31
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	ff 06       	cpc	r15, r31
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	0f 07       	cpc	r16, r31
    269e:	f1 e0       	ldi	r31, 0x01	; 1
    26a0:	1f 07       	cpc	r17, r31
    26a2:	50 f4       	brcc	.+20     	; 0x26b8 <__clzsi2+0x62>
    26a4:	80 e1       	ldi	r24, 0x10	; 16
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e0       	ldi	r26, 0x00	; 0
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <__clzsi2+0x6a>
    26ae:	88 e0       	ldi	r24, 0x08	; 8
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__clzsi2+0x6a>
    26b8:	88 e1       	ldi	r24, 0x18	; 24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	20 e2       	ldi	r18, 0x20	; 32
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	4a 0b       	sbc	r20, r26
    26ce:	5b 0b       	sbc	r21, r27
    26d0:	57 01       	movw	r10, r14
    26d2:	68 01       	movw	r12, r16
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <__clzsi2+0x88>
    26d6:	d6 94       	lsr	r13
    26d8:	c7 94       	ror	r12
    26da:	b7 94       	ror	r11
    26dc:	a7 94       	ror	r10
    26de:	8a 95       	dec	r24
    26e0:	d2 f7       	brpl	.-12     	; 0x26d6 <__clzsi2+0x80>
    26e2:	d6 01       	movw	r26, r12
    26e4:	c5 01       	movw	r24, r10
    26e6:	88 57       	subi	r24, 0x78	; 120
    26e8:	9f 4d       	sbci	r25, 0xDF	; 223
    26ea:	fc 01       	movw	r30, r24
    26ec:	80 81       	ld	r24, Z
    26ee:	28 1b       	sub	r18, r24
    26f0:	31 09       	sbc	r19, r1
    26f2:	41 09       	sbc	r20, r1
    26f4:	51 09       	sbc	r21, r1
    26f6:	c9 01       	movw	r24, r18
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	08 95       	ret

0000270a <__pack_f>:
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fc 01       	movw	r30, r24
    2718:	24 81       	ldd	r18, Z+4	; 0x04
    271a:	35 81       	ldd	r19, Z+5	; 0x05
    271c:	46 81       	ldd	r20, Z+6	; 0x06
    271e:	57 81       	ldd	r21, Z+7	; 0x07
    2720:	61 81       	ldd	r22, Z+1	; 0x01
    2722:	80 81       	ld	r24, Z
    2724:	82 30       	cpi	r24, 0x02	; 2
    2726:	20 f4       	brcc	.+8      	; 0x2730 <__pack_f+0x26>
    2728:	40 61       	ori	r20, 0x10	; 16
    272a:	ef ef       	ldi	r30, 0xFF	; 255
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	a3 c0       	rjmp	.+326    	; 0x2876 <__stack+0x77>
    2730:	84 30       	cpi	r24, 0x04	; 4
    2732:	09 f4       	brne	.+2      	; 0x2736 <__pack_f+0x2c>
    2734:	9b c0       	rjmp	.+310    	; 0x286c <__stack+0x6d>
    2736:	82 30       	cpi	r24, 0x02	; 2
    2738:	09 f4       	brne	.+2      	; 0x273c <__pack_f+0x32>
    273a:	92 c0       	rjmp	.+292    	; 0x2860 <__stack+0x61>
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	41 05       	cpc	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <__pack_f+0x3e>
    2746:	8f c0       	rjmp	.+286    	; 0x2866 <__stack+0x67>
    2748:	02 80       	ldd	r0, Z+2	; 0x02
    274a:	f3 81       	ldd	r31, Z+3	; 0x03
    274c:	e0 2d       	mov	r30, r0
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	e2 38       	cpi	r30, 0x82	; 130
    2752:	f8 07       	cpc	r31, r24
    2754:	0c f0       	brlt	.+2      	; 0x2758 <__pack_f+0x4e>
    2756:	5a c0       	rjmp	.+180    	; 0x280c <__stack+0xd>
    2758:	c2 e8       	ldi	r28, 0x82	; 130
    275a:	df ef       	ldi	r29, 0xFF	; 255
    275c:	ce 1b       	sub	r28, r30
    275e:	df 0b       	sbc	r29, r31
    2760:	ca 31       	cpi	r28, 0x1A	; 26
    2762:	d1 05       	cpc	r29, r1
    2764:	6c f5       	brge	.+90     	; 0x27c0 <__pack_f+0xb6>
    2766:	79 01       	movw	r14, r18
    2768:	8a 01       	movw	r16, r20
    276a:	0c 2e       	mov	r0, r28
    276c:	04 c0       	rjmp	.+8      	; 0x2776 <__pack_f+0x6c>
    276e:	16 95       	lsr	r17
    2770:	07 95       	ror	r16
    2772:	f7 94       	ror	r15
    2774:	e7 94       	ror	r14
    2776:	0a 94       	dec	r0
    2778:	d2 f7       	brpl	.-12     	; 0x276e <__pack_f+0x64>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	0c 2e       	mov	r0, r28
    2784:	04 c0       	rjmp	.+8      	; 0x278e <__pack_f+0x84>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	aa 1f       	adc	r26, r26
    278c:	bb 1f       	adc	r27, r27
    278e:	0a 94       	dec	r0
    2790:	d2 f7       	brpl	.-12     	; 0x2786 <__pack_f+0x7c>
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	a1 09       	sbc	r26, r1
    2796:	b1 09       	sbc	r27, r1
    2798:	82 23       	and	r24, r18
    279a:	93 23       	and	r25, r19
    279c:	a4 23       	and	r26, r20
    279e:	b5 23       	and	r27, r21
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	a1 05       	cpc	r26, r1
    27ac:	b1 05       	cpc	r27, r1
    27ae:	19 f4       	brne	.+6      	; 0x27b6 <__pack_f+0xac>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	a9 01       	movw	r20, r18
    27b6:	2e 29       	or	r18, r14
    27b8:	3f 29       	or	r19, r15
    27ba:	40 2b       	or	r20, r16
    27bc:	51 2b       	or	r21, r17
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <__pack_f+0xbc>
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	a9 01       	movw	r20, r18
    27c6:	da 01       	movw	r26, r20
    27c8:	c9 01       	movw	r24, r18
    27ca:	8f 77       	andi	r24, 0x7F	; 127
    27cc:	90 70       	andi	r25, 0x00	; 0
    27ce:	a0 70       	andi	r26, 0x00	; 0
    27d0:	b0 70       	andi	r27, 0x00	; 0
    27d2:	80 34       	cpi	r24, 0x40	; 64
    27d4:	91 05       	cpc	r25, r1
    27d6:	a1 05       	cpc	r26, r1
    27d8:	b1 05       	cpc	r27, r1
    27da:	39 f4       	brne	.+14     	; 0x27ea <__pack_f+0xe0>
    27dc:	27 ff       	sbrs	r18, 7
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <__pack_f+0xe8>
    27e0:	20 5c       	subi	r18, 0xC0	; 192
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	4f 4f       	sbci	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <__pack_f+0xe8>
    27ea:	21 5c       	subi	r18, 0xC1	; 193
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	4f 4f       	sbci	r20, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255
    27f2:	e1 e0       	ldi	r30, 0x01	; 1
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	20 30       	cpi	r18, 0x00	; 0
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	38 07       	cpc	r19, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	48 07       	cpc	r20, r24
    2800:	80 e4       	ldi	r24, 0x40	; 64
    2802:	58 07       	cpc	r21, r24
    2804:	28 f5       	brcc	.+74     	; 0x2850 <__stack+0x51>
    2806:	e0 e0       	ldi	r30, 0x00	; 0
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	22 c0       	rjmp	.+68     	; 0x2850 <__stack+0x51>
    280c:	e0 38       	cpi	r30, 0x80	; 128
    280e:	f1 05       	cpc	r31, r1
    2810:	6c f5       	brge	.+90     	; 0x286c <__stack+0x6d>
    2812:	e1 58       	subi	r30, 0x81	; 129
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	da 01       	movw	r26, r20
    2818:	c9 01       	movw	r24, r18
    281a:	8f 77       	andi	r24, 0x7F	; 127
    281c:	90 70       	andi	r25, 0x00	; 0
    281e:	a0 70       	andi	r26, 0x00	; 0
    2820:	b0 70       	andi	r27, 0x00	; 0
    2822:	80 34       	cpi	r24, 0x40	; 64
    2824:	91 05       	cpc	r25, r1
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	39 f4       	brne	.+14     	; 0x283a <__stack+0x3b>
    282c:	27 ff       	sbrs	r18, 7
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <__stack+0x43>
    2830:	20 5c       	subi	r18, 0xC0	; 192
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	4f 4f       	sbci	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <__stack+0x43>
    283a:	21 5c       	subi	r18, 0xC1	; 193
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	4f 4f       	sbci	r20, 0xFF	; 255
    2840:	5f 4f       	sbci	r21, 0xFF	; 255
    2842:	57 ff       	sbrs	r21, 7
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <__stack+0x51>
    2846:	56 95       	lsr	r21
    2848:	47 95       	ror	r20
    284a:	37 95       	ror	r19
    284c:	27 95       	ror	r18
    284e:	31 96       	adiw	r30, 0x01	; 1
    2850:	87 e0       	ldi	r24, 0x07	; 7
    2852:	56 95       	lsr	r21
    2854:	47 95       	ror	r20
    2856:	37 95       	ror	r19
    2858:	27 95       	ror	r18
    285a:	8a 95       	dec	r24
    285c:	d1 f7       	brne	.-12     	; 0x2852 <__stack+0x53>
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <__stack+0x77>
    2860:	e0 e0       	ldi	r30, 0x00	; 0
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <__stack+0x71>
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <__stack+0x77>
    286c:	ef ef       	ldi	r30, 0xFF	; 255
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	a9 01       	movw	r20, r18
    2876:	8e 2f       	mov	r24, r30
    2878:	87 95       	ror	r24
    287a:	88 27       	eor	r24, r24
    287c:	87 95       	ror	r24
    287e:	94 2f       	mov	r25, r20
    2880:	9f 77       	andi	r25, 0x7F	; 127
    2882:	67 95       	ror	r22
    2884:	66 27       	eor	r22, r22
    2886:	67 95       	ror	r22
    2888:	e6 95       	lsr	r30
    288a:	e2 2e       	mov	r14, r18
    288c:	a9 2f       	mov	r26, r25
    288e:	a8 2b       	or	r26, r24
    2890:	fe 2f       	mov	r31, r30
    2892:	f6 2b       	or	r31, r22
    2894:	62 2f       	mov	r22, r18
    2896:	73 2f       	mov	r23, r19
    2898:	8a 2f       	mov	r24, r26
    289a:	9f 2f       	mov	r25, r31
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	e6 e0       	ldi	r30, 0x06	; 6
    28a2:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__+0x18>

000028a6 <__unpack_f>:
    28a6:	dc 01       	movw	r26, r24
    28a8:	fb 01       	movw	r30, r22
    28aa:	2c 91       	ld	r18, X
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	3c 91       	ld	r19, X
    28b0:	11 97       	sbiw	r26, 0x01	; 1
    28b2:	12 96       	adiw	r26, 0x02	; 2
    28b4:	8c 91       	ld	r24, X
    28b6:	12 97       	sbiw	r26, 0x02	; 2
    28b8:	48 2f       	mov	r20, r24
    28ba:	4f 77       	andi	r20, 0x7F	; 127
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	98 2f       	mov	r25, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	99 27       	eor	r25, r25
    28c4:	99 1f       	adc	r25, r25
    28c6:	13 96       	adiw	r26, 0x03	; 3
    28c8:	6c 91       	ld	r22, X
    28ca:	13 97       	sbiw	r26, 0x03	; 3
    28cc:	86 2f       	mov	r24, r22
    28ce:	88 0f       	add	r24, r24
    28d0:	89 2b       	or	r24, r25
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	66 1f       	adc	r22, r22
    28d6:	66 27       	eor	r22, r22
    28d8:	66 1f       	adc	r22, r22
    28da:	61 83       	std	Z+1, r22	; 0x01
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	39 f5       	brne	.+78     	; 0x292e <__unpack_f+0x88>
    28e0:	21 15       	cp	r18, r1
    28e2:	31 05       	cpc	r19, r1
    28e4:	41 05       	cpc	r20, r1
    28e6:	51 05       	cpc	r21, r1
    28e8:	11 f4       	brne	.+4      	; 0x28ee <__unpack_f+0x48>
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	29 c0       	rjmp	.+82     	; 0x2940 <__unpack_f+0x9a>
    28ee:	82 e8       	ldi	r24, 0x82	; 130
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	82 83       	std	Z+2, r24	; 0x02
    28f4:	93 83       	std	Z+3, r25	; 0x03
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	6a 95       	dec	r22
    2902:	d1 f7       	brne	.-12     	; 0x28f8 <__unpack_f+0x52>
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	80 83       	st	Z, r24
    2908:	09 c0       	rjmp	.+18     	; 0x291c <__unpack_f+0x76>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	44 1f       	adc	r20, r20
    2910:	55 1f       	adc	r21, r21
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	82 83       	std	Z+2, r24	; 0x02
    291a:	93 83       	std	Z+3, r25	; 0x03
    291c:	20 30       	cpi	r18, 0x00	; 0
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	38 07       	cpc	r19, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	48 07       	cpc	r20, r24
    2926:	80 e4       	ldi	r24, 0x40	; 64
    2928:	58 07       	cpc	r21, r24
    292a:	78 f3       	brcs	.-34     	; 0x290a <__unpack_f+0x64>
    292c:	20 c0       	rjmp	.+64     	; 0x296e <__unpack_f+0xc8>
    292e:	8f 3f       	cpi	r24, 0xFF	; 255
    2930:	91 05       	cpc	r25, r1
    2932:	79 f4       	brne	.+30     	; 0x2952 <__unpack_f+0xac>
    2934:	21 15       	cp	r18, r1
    2936:	31 05       	cpc	r19, r1
    2938:	41 05       	cpc	r20, r1
    293a:	51 05       	cpc	r21, r1
    293c:	19 f4       	brne	.+6      	; 0x2944 <__unpack_f+0x9e>
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	80 83       	st	Z, r24
    2942:	08 95       	ret
    2944:	44 ff       	sbrs	r20, 4
    2946:	03 c0       	rjmp	.+6      	; 0x294e <__unpack_f+0xa8>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
    294c:	10 c0       	rjmp	.+32     	; 0x296e <__unpack_f+0xc8>
    294e:	10 82       	st	Z, r1
    2950:	0e c0       	rjmp	.+28     	; 0x296e <__unpack_f+0xc8>
    2952:	8f 57       	subi	r24, 0x7F	; 127
    2954:	90 40       	sbci	r25, 0x00	; 0
    2956:	82 83       	std	Z+2, r24	; 0x02
    2958:	93 83       	std	Z+3, r25	; 0x03
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	80 83       	st	Z, r24
    295e:	87 e0       	ldi	r24, 0x07	; 7
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	44 1f       	adc	r20, r20
    2966:	55 1f       	adc	r21, r21
    2968:	8a 95       	dec	r24
    296a:	d1 f7       	brne	.-12     	; 0x2960 <__unpack_f+0xba>
    296c:	50 64       	ori	r21, 0x40	; 64
    296e:	24 83       	std	Z+4, r18	; 0x04
    2970:	35 83       	std	Z+5, r19	; 0x05
    2972:	46 83       	std	Z+6, r20	; 0x06
    2974:	57 83       	std	Z+7, r21	; 0x07
    2976:	08 95       	ret

00002978 <__fpcmp_parts_f>:
    2978:	fc 01       	movw	r30, r24
    297a:	db 01       	movw	r26, r22
    297c:	90 81       	ld	r25, Z
    297e:	92 30       	cpi	r25, 0x02	; 2
    2980:	08 f4       	brcc	.+2      	; 0x2984 <__fpcmp_parts_f+0xc>
    2982:	49 c0       	rjmp	.+146    	; 0x2a16 <__fpcmp_parts_f+0x9e>
    2984:	8c 91       	ld	r24, X
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	08 f4       	brcc	.+2      	; 0x298c <__fpcmp_parts_f+0x14>
    298a:	45 c0       	rjmp	.+138    	; 0x2a16 <__fpcmp_parts_f+0x9e>
    298c:	94 30       	cpi	r25, 0x04	; 4
    298e:	51 f4       	brne	.+20     	; 0x29a4 <__fpcmp_parts_f+0x2c>
    2990:	61 81       	ldd	r22, Z+1	; 0x01
    2992:	84 30       	cpi	r24, 0x04	; 4
    2994:	b1 f5       	brne	.+108    	; 0x2a02 <__fpcmp_parts_f+0x8a>
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	2c 91       	ld	r18, X
    299a:	11 97       	sbiw	r26, 0x01	; 1
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	26 1b       	sub	r18, r22
    29a0:	31 09       	sbc	r19, r1
    29a2:	41 c0       	rjmp	.+130    	; 0x2a26 <__fpcmp_parts_f+0xae>
    29a4:	84 30       	cpi	r24, 0x04	; 4
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <__fpcmp_parts_f+0x38>
    29a8:	92 30       	cpi	r25, 0x02	; 2
    29aa:	41 f4       	brne	.+16     	; 0x29bc <__fpcmp_parts_f+0x44>
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	b1 f1       	breq	.+108    	; 0x2a1c <__fpcmp_parts_f+0xa4>
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	8c 91       	ld	r24, X
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	88 23       	and	r24, r24
    29b8:	a1 f1       	breq	.+104    	; 0x2a22 <__fpcmp_parts_f+0xaa>
    29ba:	2d c0       	rjmp	.+90     	; 0x2a16 <__fpcmp_parts_f+0x9e>
    29bc:	61 81       	ldd	r22, Z+1	; 0x01
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	01 f1       	breq	.+64     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29c2:	11 96       	adiw	r26, 0x01	; 1
    29c4:	8c 91       	ld	r24, X
    29c6:	11 97       	sbiw	r26, 0x01	; 1
    29c8:	68 17       	cp	r22, r24
    29ca:	d9 f4       	brne	.+54     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29cc:	22 81       	ldd	r18, Z+2	; 0x02
    29ce:	33 81       	ldd	r19, Z+3	; 0x03
    29d0:	12 96       	adiw	r26, 0x02	; 2
    29d2:	8d 91       	ld	r24, X+
    29d4:	9c 91       	ld	r25, X
    29d6:	13 97       	sbiw	r26, 0x03	; 3
    29d8:	82 17       	cp	r24, r18
    29da:	93 07       	cpc	r25, r19
    29dc:	94 f0       	brlt	.+36     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	bc f0       	brlt	.+46     	; 0x2a12 <__fpcmp_parts_f+0x9a>
    29e4:	24 81       	ldd	r18, Z+4	; 0x04
    29e6:	35 81       	ldd	r19, Z+5	; 0x05
    29e8:	46 81       	ldd	r20, Z+6	; 0x06
    29ea:	57 81       	ldd	r21, Z+7	; 0x07
    29ec:	14 96       	adiw	r26, 0x04	; 4
    29ee:	8d 91       	ld	r24, X+
    29f0:	9d 91       	ld	r25, X+
    29f2:	0d 90       	ld	r0, X+
    29f4:	bc 91       	ld	r27, X
    29f6:	a0 2d       	mov	r26, r0
    29f8:	82 17       	cp	r24, r18
    29fa:	93 07       	cpc	r25, r19
    29fc:	a4 07       	cpc	r26, r20
    29fe:	b5 07       	cpc	r27, r21
    2a00:	18 f4       	brcc	.+6      	; 0x2a08 <__fpcmp_parts_f+0x90>
    2a02:	66 23       	and	r22, r22
    2a04:	41 f0       	breq	.+16     	; 0x2a16 <__fpcmp_parts_f+0x9e>
    2a06:	0d c0       	rjmp	.+26     	; 0x2a22 <__fpcmp_parts_f+0xaa>
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	4a 07       	cpc	r20, r26
    2a0e:	5b 07       	cpc	r21, r27
    2a10:	28 f4       	brcc	.+10     	; 0x2a1c <__fpcmp_parts_f+0xa4>
    2a12:	66 23       	and	r22, r22
    2a14:	31 f0       	breq	.+12     	; 0x2a22 <__fpcmp_parts_f+0xaa>
    2a16:	21 e0       	ldi	r18, 0x01	; 1
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__fpcmp_parts_f+0xae>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <__fpcmp_parts_f+0xae>
    2a22:	2f ef       	ldi	r18, 0xFF	; 255
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	c9 01       	movw	r24, r18
    2a28:	08 95       	ret

00002a2a <__mulsi3>:
    2a2a:	62 9f       	mul	r22, r18
    2a2c:	d0 01       	movw	r26, r0
    2a2e:	73 9f       	mul	r23, r19
    2a30:	f0 01       	movw	r30, r0
    2a32:	82 9f       	mul	r24, r18
    2a34:	e0 0d       	add	r30, r0
    2a36:	f1 1d       	adc	r31, r1
    2a38:	64 9f       	mul	r22, r20
    2a3a:	e0 0d       	add	r30, r0
    2a3c:	f1 1d       	adc	r31, r1
    2a3e:	92 9f       	mul	r25, r18
    2a40:	f0 0d       	add	r31, r0
    2a42:	83 9f       	mul	r24, r19
    2a44:	f0 0d       	add	r31, r0
    2a46:	74 9f       	mul	r23, r20
    2a48:	f0 0d       	add	r31, r0
    2a4a:	65 9f       	mul	r22, r21
    2a4c:	f0 0d       	add	r31, r0
    2a4e:	99 27       	eor	r25, r25
    2a50:	72 9f       	mul	r23, r18
    2a52:	b0 0d       	add	r27, r0
    2a54:	e1 1d       	adc	r30, r1
    2a56:	f9 1f       	adc	r31, r25
    2a58:	63 9f       	mul	r22, r19
    2a5a:	b0 0d       	add	r27, r0
    2a5c:	e1 1d       	adc	r30, r1
    2a5e:	f9 1f       	adc	r31, r25
    2a60:	bd 01       	movw	r22, r26
    2a62:	cf 01       	movw	r24, r30
    2a64:	11 24       	eor	r1, r1
    2a66:	08 95       	ret

00002a68 <__udivmodhi4>:
    2a68:	aa 1b       	sub	r26, r26
    2a6a:	bb 1b       	sub	r27, r27
    2a6c:	51 e1       	ldi	r21, 0x11	; 17
    2a6e:	07 c0       	rjmp	.+14     	; 0x2a7e <__udivmodhi4_ep>

00002a70 <__udivmodhi4_loop>:
    2a70:	aa 1f       	adc	r26, r26
    2a72:	bb 1f       	adc	r27, r27
    2a74:	a6 17       	cp	r26, r22
    2a76:	b7 07       	cpc	r27, r23
    2a78:	10 f0       	brcs	.+4      	; 0x2a7e <__udivmodhi4_ep>
    2a7a:	a6 1b       	sub	r26, r22
    2a7c:	b7 0b       	sbc	r27, r23

00002a7e <__udivmodhi4_ep>:
    2a7e:	88 1f       	adc	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	5a 95       	dec	r21
    2a84:	a9 f7       	brne	.-22     	; 0x2a70 <__udivmodhi4_loop>
    2a86:	80 95       	com	r24
    2a88:	90 95       	com	r25
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	08 95       	ret

00002a90 <__divmodhi4>:
    2a90:	97 fb       	bst	r25, 7
    2a92:	09 2e       	mov	r0, r25
    2a94:	07 26       	eor	r0, r23
    2a96:	0a d0       	rcall	.+20     	; 0x2aac <__divmodhi4_neg1>
    2a98:	77 fd       	sbrc	r23, 7
    2a9a:	04 d0       	rcall	.+8      	; 0x2aa4 <__divmodhi4_neg2>
    2a9c:	e5 df       	rcall	.-54     	; 0x2a68 <__udivmodhi4>
    2a9e:	06 d0       	rcall	.+12     	; 0x2aac <__divmodhi4_neg1>
    2aa0:	00 20       	and	r0, r0
    2aa2:	1a f4       	brpl	.+6      	; 0x2aaa <__divmodhi4_exit>

00002aa4 <__divmodhi4_neg2>:
    2aa4:	70 95       	com	r23
    2aa6:	61 95       	neg	r22
    2aa8:	7f 4f       	sbci	r23, 0xFF	; 255

00002aaa <__divmodhi4_exit>:
    2aaa:	08 95       	ret

00002aac <__divmodhi4_neg1>:
    2aac:	f6 f7       	brtc	.-4      	; 0x2aaa <__divmodhi4_exit>
    2aae:	90 95       	com	r25
    2ab0:	81 95       	neg	r24
    2ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab4:	08 95       	ret

00002ab6 <__udivmodsi4>:
    2ab6:	a1 e2       	ldi	r26, 0x21	; 33
    2ab8:	1a 2e       	mov	r1, r26
    2aba:	aa 1b       	sub	r26, r26
    2abc:	bb 1b       	sub	r27, r27
    2abe:	fd 01       	movw	r30, r26
    2ac0:	0d c0       	rjmp	.+26     	; 0x2adc <__udivmodsi4_ep>

00002ac2 <__udivmodsi4_loop>:
    2ac2:	aa 1f       	adc	r26, r26
    2ac4:	bb 1f       	adc	r27, r27
    2ac6:	ee 1f       	adc	r30, r30
    2ac8:	ff 1f       	adc	r31, r31
    2aca:	a2 17       	cp	r26, r18
    2acc:	b3 07       	cpc	r27, r19
    2ace:	e4 07       	cpc	r30, r20
    2ad0:	f5 07       	cpc	r31, r21
    2ad2:	20 f0       	brcs	.+8      	; 0x2adc <__udivmodsi4_ep>
    2ad4:	a2 1b       	sub	r26, r18
    2ad6:	b3 0b       	sbc	r27, r19
    2ad8:	e4 0b       	sbc	r30, r20
    2ada:	f5 0b       	sbc	r31, r21

00002adc <__udivmodsi4_ep>:
    2adc:	66 1f       	adc	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	88 1f       	adc	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	1a 94       	dec	r1
    2ae6:	69 f7       	brne	.-38     	; 0x2ac2 <__udivmodsi4_loop>
    2ae8:	60 95       	com	r22
    2aea:	70 95       	com	r23
    2aec:	80 95       	com	r24
    2aee:	90 95       	com	r25
    2af0:	9b 01       	movw	r18, r22
    2af2:	ac 01       	movw	r20, r24
    2af4:	bd 01       	movw	r22, r26
    2af6:	cf 01       	movw	r24, r30
    2af8:	08 95       	ret

00002afa <__prologue_saves__>:
    2afa:	2f 92       	push	r2
    2afc:	3f 92       	push	r3
    2afe:	4f 92       	push	r4
    2b00:	5f 92       	push	r5
    2b02:	6f 92       	push	r6
    2b04:	7f 92       	push	r7
    2b06:	8f 92       	push	r8
    2b08:	9f 92       	push	r9
    2b0a:	af 92       	push	r10
    2b0c:	bf 92       	push	r11
    2b0e:	cf 92       	push	r12
    2b10:	df 92       	push	r13
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	ca 1b       	sub	r28, r26
    2b24:	db 0b       	sbc	r29, r27
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	09 94       	ijmp

00002b2c <__epilogue_restores__>:
    2b2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b2e:	39 88       	ldd	r3, Y+17	; 0x11
    2b30:	48 88       	ldd	r4, Y+16	; 0x10
    2b32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b40:	c8 84       	ldd	r12, Y+8	; 0x08
    2b42:	df 80       	ldd	r13, Y+7	; 0x07
    2b44:	ee 80       	ldd	r14, Y+6	; 0x06
    2b46:	fd 80       	ldd	r15, Y+5	; 0x05
    2b48:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b50:	ce 0f       	add	r28, r30
    2b52:	d1 1d       	adc	r29, r1
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	ed 01       	movw	r28, r26
    2b5a:	08 95       	ret

00002b5c <_exit>:
    2b5c:	f8 94       	cli

00002b5e <__stop_program>:
    2b5e:	ff cf       	rjmp	.-2      	; 0x2b5e <__stop_program>
