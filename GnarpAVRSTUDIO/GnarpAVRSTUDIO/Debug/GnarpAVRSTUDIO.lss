
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00802000  00001f28  00001fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000105  00802118  00802118  000020d4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000097a  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ab6  00000000  00000000  000033df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018e5  00000000  00000000  00007e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002cfc  00000000  00000000  0000977a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000670  00000000  00000000  0000c478  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001345  00000000  00000000  0000cae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001dc9  00000000  00000000  0000de2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b61  00000000  00000000  0000fbf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  00010757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e8 e2       	ldi	r30, 0x28	; 40
     18c:	ff e1       	ldi	r31, 0x1F	; 31
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 31       	cpi	r26, 0x18	; 24
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e1       	ldi	r26, 0x18	; 24
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ad 31       	cpi	r26, 0x1D	; 29
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 8a 04 	call	0x914	; 0x914 <main>
     1ae:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 2e 21 	lds	r24, 0x212E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	eb 01       	movw	r28, r22
     1ce:	6a 01       	movw	r12, r20
    //outmin: minimum value to output
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
     1d0:	e8 2f       	mov	r30, r24
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ec 5d       	subi	r30, 0xDC	; 220
     1da:	fe 4d       	sbci	r31, 0xDE	; 222
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__floatunsisf>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 ef       	ldi	r19, 0xF0	; 240
     1ec:	43 e7       	ldi	r20, 0x73	; 115
     1ee:	55 e4       	ldi	r21, 0x45	; 69
     1f0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3>
     1f4:	7b 01       	movw	r14, r22
     1f6:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin) + outmin;
     1f8:	cc 1a       	sub	r12, r28
     1fa:	dd 0a       	sbc	r13, r29
     1fc:	b6 01       	movw	r22, r12
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__floatunsisf>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
     20a:	c8 01       	movw	r24, r16
     20c:	b7 01       	movw	r22, r14
     20e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     212:	8b 01       	movw	r16, r22
     214:	c8 2e       	mov	r12, r24
     216:	e9 2e       	mov	r14, r25
     218:	be 01       	movw	r22, r28
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__floatunsisf>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
     226:	60 2f       	mov	r22, r16
     228:	71 2f       	mov	r23, r17
     22a:	8c 2d       	mov	r24, r12
     22c:	9e 2d       	mov	r25, r14
     22e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__addsf3>
    
    return (uint16_t) temp;
     232:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
}
     236:	cb 01       	movw	r24, r22
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	08 95       	ret

0000024a <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     24a:	80 91 1c 21 	lds	r24, 0x211C
     24e:	08 95       	ret

00000250 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     250:	80 91 1d 21 	lds	r24, 0x211D
     254:	08 95       	ret

00000256 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     256:	80 91 1a 21 	lds	r24, 0x211A
     25a:	08 95       	ret

0000025c <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     25c:	80 91 1b 21 	lds	r24, 0x211B
     260:	08 95       	ret

00000262 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     262:	80 91 18 21 	lds	r24, 0x2118
     266:	08 95       	ret

00000268 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     268:	80 91 19 21 	lds	r24, 0x2119
     26c:	08 95       	ret

0000026e <startup_functions>:

void startup_functions(){
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     276:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     278:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     280:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     282:	a0 e5       	ldi	r26, 0x50	; 80
     284:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     286:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     288:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     28a:	98 ed       	ldi	r25, 0xD8	; 216
     28c:	15 c0       	rjmp	.+42     	; 0x2b8 <startup_functions+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     28e:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     290:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     292:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     294:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     298:	70 91 51 00 	lds	r23, 0x0051
     29c:	73 ff       	sbrs	r23, 3
     29e:	fc cf       	rjmp	.-8      	; 0x298 <startup_functions+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     2a0:	15 96       	adiw	r26, 0x05	; 5
     2a2:	3c 93       	st	X, r19
     2a4:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     2a6:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     2aa:	70 91 51 00 	lds	r23, 0x0051
     2ae:	74 ff       	sbrs	r23, 4
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <startup_functions+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     2b2:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     2b4:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     2b8:	70 91 40 00 	lds	r23, 0x0040
     2bc:	74 30       	cpi	r23, 0x04	; 4
     2be:	39 f7       	brne	.-50     	; 0x28e <startup_functions+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     2c0:	f8 94       	cli
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     2c2:	a0 e6       	ldi	r26, 0x60	; 96
     2c4:	b6 e0       	ldi	r27, 0x06	; 6
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	12 96       	adiw	r26, 0x02	; 2
     2ca:	8c 93       	st	X, r24
     2cc:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     2ce:	80 e8       	ldi	r24, 0x80	; 128
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	8c 93       	st	X, r24
     2d4:	11 97       	sbiw	r26, 0x01	; 1
    PORTD.OUTSET = 0x80;       //set TxD high for initialization
     2d6:	15 96       	adiw	r26, 0x05	; 5
     2d8:	8c 93       	st	X, r24
     2da:	15 97       	sbiw	r26, 0x05	; 5
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Medium Level, TX interrupt as Low Level, DRE as Hi Level
     2dc:	e0 eb       	ldi	r30, 0xB0	; 176
     2de:	f9 e0       	ldi	r31, 0x09	; 9
     2e0:	90 e2       	ldi	r25, 0x20	; 32
     2e2:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2e4:	33 e0       	ldi	r19, 0x03	; 3
     2e6:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     2e8:	8f e2       	ldi	r24, 0x2F	; 47
     2ea:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     2ec:	17 82       	std	Z+7, r1	; 0x07
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     2ee:	88 e1       	ldi	r24, 0x18	; 24
     2f0:	84 83       	std	Z+4, r24	; 0x04
    PMIC.CTRL |= 0x02;         //enable all levels on interrupts
     2f2:	80 91 a2 00 	lds	r24, 0x00A2
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     2fe:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     300:	c0 e0       	ldi	r28, 0x00	; 0
     302:	d6 e0       	ldi	r29, 0x06	; 6
     304:	89 ef       	ldi	r24, 0xF9	; 249
     306:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	f2 e0       	ldi	r31, 0x02	; 2
     30c:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     310:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     312:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     314:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     316:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     318:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     31a:	80 91 00 02 	lds	r24, 0x0200
     31e:	81 60       	ori	r24, 0x01	; 1
     320:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     328:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     32a:	12 a2       	std	Z+34, r1	; 0x22
        PORTC.OUTSET = 0x08;
    
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     32c:	40 e2       	ldi	r20, 0x20	; 32
     32e:	56 e0       	ldi	r21, 0x06	; 6
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	fa 01       	movw	r30, r20
     334:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     336:	28 e0       	ldi	r18, 0x08	; 8
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	96 e0       	ldi	r25, 0x06	; 6
     33c:	fc 01       	movw	r30, r24
     33e:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x02;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     340:	fa 01       	movw	r30, r20
     342:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     348:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f6 e0       	ldi	r31, 0x06	; 6
     34e:	88 ef       	ldi	r24, 0xF8	; 248
     350:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	11 96       	adiw	r26, 0x01	; 1
     356:	8c 93       	st	X, r24
     358:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	15 96       	adiw	r26, 0x05	; 5
     35e:	8c 93       	st	X, r24
     360:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     362:	90 ef       	ldi	r25, 0xF0	; 240
     364:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     366:	16 96       	adiw	r26, 0x06	; 6
     368:	8c 93       	st	X, r24
     36a:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	16 96       	adiw	r26, 0x06	; 6
     370:	8c 93       	st	X, r24
     372:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     374:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <preloop_functions>:

void preloop_functions(){
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     38a:	80 91 88 06 	lds	r24, 0x0688
     38e:	86 95       	lsr	r24
     390:	86 95       	lsr	r24
     392:	86 95       	lsr	r24
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <preloop_functions+0x1e>
     398:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     39a:	80 91 28 06 	lds	r24, 0x0628
     39e:	86 95       	lsr	r24
     3a0:	86 95       	lsr	r24
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <preloop_functions+0x2e>
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <preloop_functions+0x30>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	e8 2e       	mov	r14, r24
     3ae:	e9 2a       	or	r14, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     3b0:	80 91 28 06 	lds	r24, 0x0628
     3b4:	86 95       	lsr	r24
     3b6:	86 95       	lsr	r24
     3b8:	86 95       	lsr	r24
     3ba:	80 fd       	sbrc	r24, 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <preloop_functions+0x46>
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <preloop_functions+0x48>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	e8 2a       	or	r14, r24
     3c6:	e0 92 23 21 	sts	0x2123, r14
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3ca:	60 91 22 21 	lds	r22, 0x2122
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	f0 90 21 21 	lds	r15, 0x2121
     3d4:	ee e1       	ldi	r30, 0x1E	; 30
     3d6:	f1 e2       	ldi	r31, 0x21	; 33
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	4e 2d       	mov	r20, r14
     3de:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3e4:	d8 2e       	mov	r13, r24
     3e6:	ea 01       	movw	r28, r20
     3e8:	08 2e       	mov	r0, r24
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <preloop_functions+0x74>
     3ec:	d5 95       	asr	r29
     3ee:	c7 95       	ror	r28
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <preloop_functions+0x70>
     3f4:	db 01       	movw	r26, r22
     3f6:	08 2e       	mov	r0, r24
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <preloop_functions+0x82>
     3fa:	b5 95       	asr	r27
     3fc:	a7 95       	ror	r26
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <preloop_functions+0x7e>
     402:	ca 17       	cp	r28, r26
     404:	db 07       	cpc	r29, r27
     406:	21 f4       	brne	.+8      	; 0x410 <preloop_functions+0x94>
            switch_history_counts[i]++;                            //increment count        
     408:	a0 81       	ld	r26, Z
     40a:	af 5f       	subi	r26, 0xFF	; 255
     40c:	a0 83       	st	Z, r26
     40e:	01 c0       	rjmp	.+2      	; 0x412 <preloop_functions+0x96>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     410:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     412:	a0 81       	ld	r26, Z
     414:	a9 30       	cpi	r26, 0x09	; 9
     416:	60 f0       	brcs	.+24     	; 0x430 <preloop_functions+0xb4>
            final_switch_states &= ~(1 << i);
     418:	d9 01       	movw	r26, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <preloop_functions+0xa4>
     41c:	aa 0f       	add	r26, r26
     41e:	bb 1f       	adc	r27, r27
     420:	da 94       	dec	r13
     422:	e2 f7       	brpl	.-8      	; 0x41c <preloop_functions+0xa0>
     424:	ba 2f       	mov	r27, r26
     426:	b0 95       	com	r27
     428:	fb 22       	and	r15, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     42a:	ae 21       	and	r26, r14
     42c:	fa 2a       	or	r15, r26
            switch_history_counts[i] = 0;                          //and reset count
     42e:	10 82       	st	Z, r1
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	91 05       	cpc	r25, r1
     438:	a9 f6       	brne	.-86     	; 0x3e4 <preloop_functions+0x68>
     43a:	f0 92 21 21 	sts	0x2121, r15
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     43e:	e0 92 22 21 	sts	0x2122, r14
     442:	80 91 18 21 	lds	r24, 0x2118
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     446:	f0 fe       	sbrs	r15, 0
     448:	0c c0       	rjmp	.+24     	; 0x462 <preloop_functions+0xe6>
        if (toggle_switch_state)                //if toggle WAS on
     44a:	88 23       	and	r24, r24
     44c:	19 f0       	breq	.+6      	; 0x454 <preloop_functions+0xd8>
            toggle_switch_edge = EDGE_NONE;     //no edge
     44e:	10 92 19 21 	sts	0x2119, r1
     452:	03 c0       	rjmp	.+6      	; 0x45a <preloop_functions+0xde>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 19 21 	sts	0x2119, r24
        toggle_switch_state = 1;                //set current value
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 18 21 	sts	0x2118, r24
     460:	0a c0       	rjmp	.+20     	; 0x476 <preloop_functions+0xfa>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     462:	88 23       	and	r24, r24
     464:	21 f0       	breq	.+8      	; 0x46e <preloop_functions+0xf2>
            toggle_switch_edge = EDGE_FALL;     //new off
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	80 93 19 21 	sts	0x2119, r24
     46c:	02 c0       	rjmp	.+4      	; 0x472 <preloop_functions+0xf6>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     46e:	10 92 19 21 	sts	0x2119, r1
        toggle_switch_state = 0;                //set current value
     472:	10 92 18 21 	sts	0x2118, r1
     476:	80 91 1a 21 	lds	r24, 0x211A
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     47a:	f1 fe       	sbrs	r15, 1
     47c:	0c c0       	rjmp	.+24     	; 0x496 <preloop_functions+0x11a>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     47e:	88 23       	and	r24, r24
     480:	19 f0       	breq	.+6      	; 0x488 <preloop_functions+0x10c>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     482:	10 92 1b 21 	sts	0x211B, r1
     486:	03 c0       	rjmp	.+6      	; 0x48e <preloop_functions+0x112>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 1b 21 	sts	0x211B, r24
        pushbutton_switch_state = 1;                //set current value
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 1a 21 	sts	0x211A, r24
     494:	0a c0       	rjmp	.+20     	; 0x4aa <preloop_functions+0x12e>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     496:	88 23       	and	r24, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <preloop_functions+0x126>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	80 93 1b 21 	sts	0x211B, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <preloop_functions+0x12a>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     4a2:	10 92 1b 21 	sts	0x211B, r1
        pushbutton_switch_state = 0;                //set current value
     4a6:	10 92 1a 21 	sts	0x211A, r1
     4aa:	80 91 1c 21 	lds	r24, 0x211C
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     4ae:	f2 fe       	sbrs	r15, 2
     4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <preloop_functions+0x15a>
        if (encoder_switch_state)                //if encoder WAS on
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <preloop_functions+0x140>
            encoder_switch_edge = EDGE_NONE;     //no edge
     4b6:	10 92 1d 21 	sts	0x211D, r1
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <preloop_functions+0x146>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 1d 21 	sts	0x211D, r24
        encoder_switch_state = 1;                //set current value
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 1c 21 	sts	0x211C, r24
     4c8:	e4 e2       	ldi	r30, 0x24	; 36
     4ca:	f1 e2       	ldi	r31, 0x21	; 33
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     4cc:	23 e0       	ldi	r18, 0x03	; 3
     4ce:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4d0:	a0 e0       	ldi	r26, 0x00	; 0
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <preloop_functions+0x170>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
        encoder_switch_state = 1;                //set current value
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     4d6:	88 23       	and	r24, r24
     4d8:	21 f0       	breq	.+8      	; 0x4e2 <preloop_functions+0x166>
            encoder_switch_edge = EDGE_FALL;     //new off
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 1d 21 	sts	0x211D, r24
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <preloop_functions+0x16a>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     4e2:	10 92 1d 21 	sts	0x211D, r1
        encoder_switch_state = 0;                //set current value
     4e6:	10 92 1c 21 	sts	0x211C, r1
     4ea:	ee cf       	rjmp	.-36     	; 0x4c8 <preloop_functions+0x14c>
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4ec:	80 91 23 02 	lds	r24, 0x0223
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	93 96       	adiw	r26, 0x23	; 35
     4f4:	8c 93       	st	X, r24
     4f6:	93 97       	sbiw	r26, 0x23	; 35
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     4f8:	80 91 21 02 	lds	r24, 0x0221
     4fc:	87 7c       	andi	r24, 0xC7	; 199
     4fe:	91 96       	adiw	r26, 0x21	; 33
     500:	8c 93       	st	X, r24
     502:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     504:	40 91 21 02 	lds	r20, 0x0221
     508:	c9 01       	movw	r24, r18
     50a:	53 e0       	ldi	r21, 0x03	; 3
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	5a 95       	dec	r21
     512:	e1 f7       	brne	.-8      	; 0x50c <preloop_functions+0x190>
     514:	48 2b       	or	r20, r24
     516:	91 96       	adiw	r26, 0x21	; 33
     518:	4c 93       	st	X, r20
     51a:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     51c:	80 91 20 02 	lds	r24, 0x0220
     520:	80 68       	ori	r24, 0x80	; 128
     522:	90 96       	adiw	r26, 0x20	; 32
     524:	8c 93       	st	X, r24
     526:	90 97       	sbiw	r26, 0x20	; 32
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     528:	80 91 23 02 	lds	r24, 0x0223
     52c:	80 ff       	sbrs	r24, 0
     52e:	fc cf       	rjmp	.-8      	; 0x528 <preloop_functions+0x1ac>
        
        pot_values[i] = ADCA.CH0.RESL;
     530:	80 91 24 02 	lds	r24, 0x0224
        pot_values[i] |= ADCA.CH0.RESH << 8;
     534:	90 91 25 02 	lds	r25, 0x0225
     538:	19 2f       	mov	r17, r25
     53a:	00 e0       	ldi	r16, 0x00	; 0
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     53c:	90 e0       	ldi	r25, 0x00	; 0
        pot_values[i] |= ADCA.CH0.RESH << 8;
     53e:	80 2b       	or	r24, r16
     540:	91 2b       	or	r25, r17
     542:	80 83       	st	Z, r24
     544:	91 83       	std	Z+1, r25	; 0x01
        
        if (pot_values[i] < POTMIN)
     546:	80 3c       	cpi	r24, 0xC0	; 192
     548:	91 05       	cpc	r25, r1
     54a:	18 f4       	brcc	.+6      	; 0x552 <preloop_functions+0x1d6>
            pot_values[i] = 0;
     54c:	10 82       	st	Z, r1
     54e:	11 82       	std	Z+1, r1	; 0x01
     550:	04 c0       	rjmp	.+8      	; 0x55a <preloop_functions+0x1de>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     552:	80 5c       	subi	r24, 0xC0	; 192
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	80 83       	st	Z, r24
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	32 96       	adiw	r30, 0x02	; 2
static void read_pots(){
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     560:	28 30       	cpi	r18, 0x08	; 8
     562:	31 05       	cpc	r19, r1
     564:	19 f6       	brne	.-122    	; 0x4ec <preloop_functions+0x170>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     566:	80 91 28 06 	lds	r24, 0x0628
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	80 fd       	sbrc	r24, 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     570:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     574:	84 2f       	mov	r24, r20
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	20 91 2f 21 	lds	r18, 0x212F
     57c:	51 e0       	ldi	r21, 0x01	; 1
     57e:	25 27       	eor	r18, r21
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	82 23       	and	r24, r18
     584:	93 23       	and	r25, r19
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	59 f0       	breq	.+22     	; 0x5a0 <preloop_functions+0x224>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     58a:	86 2f       	mov	r24, r22
     58c:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     58e:	80 fd       	sbrc	r24, 0
     590:	03 c0       	rjmp	.+6      	; 0x598 <preloop_functions+0x21c>
            encoder_state = TURN_CW;    //CW        
     592:	50 93 2e 21 	sts	0x212E, r21
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <preloop_functions+0x228>
        else
            encoder_state = TURN_CCW;    //CCW
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	80 93 2e 21 	sts	0x212E, r24
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <preloop_functions+0x228>
    }
    else
        encoder_state = TURN_NONE;   
     5a0:	10 92 2e 21 	sts	0x212E, r1
    last_a = current_a;
     5a4:	40 93 2f 21 	sts	0x212F, r20

void preloop_functions(){
    read_switches();
    read_pots();
    read_encoder();
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	08 95       	ret

000005b8 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
     5b8:	2f 92       	push	r2
     5ba:	3f 92       	push	r3
     5bc:	4f 92       	push	r4
     5be:	5f 92       	push	r5
     5c0:	6f 92       	push	r6
     5c2:	7f 92       	push	r7
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <postloop_functions+0x26>
     5de:	0f 92       	push	r0
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	b8 2e       	mov	r11, r24
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

static void set_LEDs(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    //booleans and such convert to LED out
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	4a 83       	std	Y+2, r20	; 0x02
     5ea:	2b 83       	std	Y+3, r18	; 0x03
     5ec:	6e 01       	movw	r12, r28
     5ee:	08 94       	sec
     5f0:	c1 1c       	adc	r12, r1
     5f2:	d1 1c       	adc	r13, r1
     5f4:	22 e0       	ldi	r18, 0x02	; 2
     5f6:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	e4 2e       	mov	r14, r20
     5fc:	f1 2c       	mov	r15, r1
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	49 2e       	mov	r4, r25
     602:	51 2c       	mov	r5, r1
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	28 2e       	mov	r2, r24
     608:	31 2c       	mov	r3, r1
     60a:	e0 e6       	ldi	r30, 0x60	; 96
     60c:	f6 e0       	ldi	r31, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     60e:	b0 e4       	ldi	r27, 0x40	; 64
     610:	8b 2e       	mov	r8, r27
     612:	b6 e0       	ldi	r27, 0x06	; 6
     614:	9b 2e       	mov	r9, r27
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     616:	a1 e0       	ldi	r26, 0x01	; 1
     618:	6a 2e       	mov	r6, r26
     61a:	71 2c       	mov	r7, r1
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
     624:	a8 2e       	mov	r10, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     626:	01 15       	cp	r16, r1
     628:	11 05       	cpc	r17, r1
     62a:	21 f4       	brne	.+8      	; 0x634 <postloop_functions+0x7c>
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	11 f0       	breq	.+4      	; 0x634 <postloop_functions+0x7c>
            digit = 10;
     630:	7a e0       	ldi	r23, 0x0A	; 10
     632:	a7 2e       	mov	r10, r23
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     634:	c9 01       	movw	r24, r18
     636:	b2 01       	movw	r22, r4
     638:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     63c:	a1 01       	movw	r20, r2
     63e:	08 2e       	mov	r0, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <postloop_functions+0x8e>
     642:	44 0f       	add	r20, r20
     644:	55 1f       	adc	r21, r21
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <postloop_functions+0x8a>
     64a:	46 83       	std	Z+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     64c:	40 ef       	ldi	r20, 0xF0	; 240
     64e:	d4 01       	movw	r26, r8
     650:	16 96       	adiw	r26, 0x06	; 6
     652:	4c 93       	st	X, r20
     654:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     656:	a2 94       	swap	r10
     658:	60 ef       	ldi	r22, 0xF0	; 240
     65a:	a6 22       	and	r10, r22
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	ac 92       	st	X, r10
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     660:	58 e3       	ldi	r21, 0x38	; 56
     662:	55 83       	std	Z+5, r21	; 0x05
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     664:	d6 01       	movw	r26, r12
     666:	9d 91       	ld	r25, X+
     668:	6d 01       	movw	r12, r26
     66a:	99 23       	and	r25, r25
     66c:	41 f0       	breq	.+16     	; 0x67e <postloop_functions+0xc6>
            PORTD.OUTSET = 1 << (i+2)%3;
     66e:	a3 01       	movw	r20, r6
     670:	02 c0       	rjmp	.+4      	; 0x676 <postloop_functions+0xbe>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	8a 95       	dec	r24
     678:	e2 f7       	brpl	.-8      	; 0x672 <postloop_functions+0xba>
     67a:	45 83       	std	Z+5, r20	; 0x05
     67c:	07 c0       	rjmp	.+14     	; 0x68c <postloop_functions+0xd4>
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     67e:	d3 01       	movw	r26, r6
     680:	02 c0       	rjmp	.+4      	; 0x686 <postloop_functions+0xce>
     682:	aa 0f       	add	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	8a 95       	dec	r24
     688:	e2 f7       	brpl	.-8      	; 0x682 <postloop_functions+0xca>
     68a:	a6 83       	std	Z+6, r26	; 0x06
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     690:	25 30       	cpi	r18, 0x05	; 5
     692:	31 05       	cpc	r19, r1
     694:	31 f0       	breq	.+12     	; 0x6a2 <postloop_functions+0xea>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
     696:	c8 01       	movw	r24, r16
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
     69e:	8b 01       	movw	r16, r22
     6a0:	bd cf       	rjmp	.-134    	; 0x61c <postloop_functions+0x64>
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
    }
    
    if (status_LED)                                //light STATLED if necessary
     6a2:	bb 20       	and	r11, r11
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <postloop_functions+0xf8>
        PORTC.OUTCLR = 0x08;
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	e0 e4       	ldi	r30, 0x40	; 64
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <postloop_functions+0x100>
    else
        PORTC.OUTSET = 0x08;
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e0 e4       	ldi	r30, 0x40	; 64
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 83       	std	Z+5, r24	; 0x05
    read_encoder();
}

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     6b8:	23 96       	adiw	r28, 0x03	; 3
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	3f 90       	pop	r3
     6e0:	2f 90       	pop	r2
     6e2:	08 95       	ret

000006e4 <test_pots>:
ISR(USARTD1_RXC_vect){
	i_MIDIRX = USARTD1.DATA & 0xFF;
//	USARTD1.STATUS &= ~0x80;
}
*/
void test_pots(){
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     6ee:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	uint8_t selPOT = 0;
     6f2:	ff 24       	eor	r15, r15
	
	while(1){
		preloop_functions();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     6f4:	c4 e6       	ldi	r28, 0x64	; 100
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
	startup_functions();
	
	uint8_t selPOT = 0;
	
	while(1){
		preloop_functions();
     6f8:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     6fc:	8f 2d       	mov	r24, r15
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	43 e6       	ldi	r20, 0x63	; 99
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     70a:	2f 2d       	mov	r18, r15
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	2f 5f       	subi	r18, 0xFF	; 255
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	2c 9f       	mul	r18, r28
     714:	80 01       	movw	r16, r0
     716:	2d 9f       	mul	r18, r29
     718:	10 0d       	add	r17, r0
     71a:	3c 9f       	mul	r19, r28
     71c:	10 0d       	add	r17, r0
     71e:	11 24       	eor	r1, r1
     720:	08 0f       	add	r16, r24
     722:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     724:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	29 f4       	brne	.+10     	; 0x736 <test_pots+0x52>
			selPOT++;
     72c:	f3 94       	inc	r15
			if (selPOT>4)
     72e:	8f 2d       	mov	r24, r15
     730:	85 30       	cpi	r24, 0x05	; 5
     732:	08 f0       	brcs	.+2      	; 0x736 <test_pots+0x52>
				selPOT = 0;
     734:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	
	}	
     742:	da cf       	rjmp	.-76     	; 0x6f8 <test_pots+0x14>

00000744 <test_switches>:
	
	
}
*/

void test_switches(){
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	00 d0       	rcall	.+0      	; 0x74e <test_switches+0xa>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     752:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	while(1){
		preloop_functions();
     756:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     75a:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     75e:	8a 83       	std	Y+2, r24	; 0x02
     760:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     76a:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	6a 81       	ldd	r22, Y+2	; 0x02
     770:	49 81       	ldd	r20, Y+1	; 0x01
     772:	00 e0       	ldi	r16, 0x00	; 0
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
     77a:	ed cf       	rjmp	.-38     	; 0x756 <test_switches+0x12>

0000077c <test_seven_segment>:
	}
}


void test_seven_segment(){
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	startup_functions();
     786:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	
	while(1){
		preloop_functions();
     78e:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     792:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     796:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     798:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     79c:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     79e:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     7a2:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     7a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <test_seven_segment+0x3c>
			if (i == 999)
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	c7 3e       	cpi	r28, 0xE7	; 231
     7b0:	d8 07       	cpc	r29, r24
     7b2:	51 f0       	breq	.+20     	; 0x7c8 <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     7b4:	21 96       	adiw	r28, 0x01	; 1
     7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     7b8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	49 f4       	brne	.+18     	; 0x7d2 <test_seven_segment+0x56>
			if (i == 0)
     7c0:	20 97       	sbiw	r28, 0x00	; 0
     7c2:	29 f0       	breq	.+10     	; 0x7ce <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     7c4:	21 97       	sbiw	r28, 0x01	; 1
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	d0 e0       	ldi	r29, 0x00	; 0
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     7ce:	c7 ee       	ldi	r28, 0xE7	; 231
     7d0:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	6f 2d       	mov	r22, r15
     7d6:	40 2f       	mov	r20, r16
     7d8:	21 2f       	mov	r18, r17
     7da:	8e 01       	movw	r16, r28
     7dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     7e0:	d6 cf       	rjmp	.-84     	; 0x78e <test_seven_segment+0x12>

000007e2 <test_ADC>:
}

void test_ADC(){
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	startup_functions();
     7f4:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     7f8:	c0 e0       	ldi	r28, 0x00	; 0
     7fa:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     7fc:	84 e6       	ldi	r24, 0x64	; 100
     7fe:	a8 2e       	mov	r10, r24
     800:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     802:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     806:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     80a:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     80c:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     810:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     812:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     816:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     818:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	29 f4       	brne	.+10     	; 0x82a <test_ADC+0x48>
			if (pot_select == 4)
     820:	c4 30       	cpi	r28, 0x04	; 4
     822:	d1 05       	cpc	r29, r1
     824:	51 f0       	breq	.+20     	; 0x83a <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     826:	21 96       	adiw	r28, 0x01	; 1
     828:	0d c0       	rjmp	.+26     	; 0x844 <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     82a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	49 f4       	brne	.+18     	; 0x844 <test_ADC+0x62>
			if (pot_select == 0)
     832:	20 97       	sbiw	r28, 0x00	; 0
     834:	29 f0       	breq	.+10     	; 0x840 <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     836:	21 97       	sbiw	r28, 0x01	; 1
     838:	05 c0       	rjmp	.+10     	; 0x844 <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     83a:	c0 e0       	ldi	r28, 0x00	; 0
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	02 c0       	rjmp	.+4      	; 0x844 <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     840:	c4 e0       	ldi	r28, 0x04	; 4
     842:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     844:	8c 2f       	mov	r24, r28
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	43 e6       	ldi	r20, 0x63	; 99
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     852:	ca 9d       	mul	r28, r10
     854:	80 01       	movw	r16, r0
     856:	cb 9d       	mul	r28, r11
     858:	10 0d       	add	r17, r0
     85a:	da 9d       	mul	r29, r10
     85c:	10 0d       	add	r17, r0
     85e:	11 24       	eor	r1, r1
     860:	08 0f       	add	r16, r24
     862:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	6d 2d       	mov	r22, r13
     868:	4e 2d       	mov	r20, r14
     86a:	2f 2d       	mov	r18, r15
     86c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     870:	c8 cf       	rjmp	.-112    	; 0x802 <test_ADC+0x20>

00000872 <test_xnor>:
}

void test_xnor(){
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     87e:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	MidiDevice * midi_device = serial_midi_init();
     882:	0e 94 ab 04 	call	0x956	; 0x956 <serial_midi_init>
     886:	7c 01       	movw	r14, r24
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     888:	c4 e6       	ldi	r28, 0x64	; 100
     88a:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	MidiDevice * midi_device = serial_midi_init();
	
	while(1){
		preloop_functions();
     88c:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     890:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	29 f4       	brne	.+10     	; 0x8a2 <test_xnor+0x30>
			if (note <= 64)
     898:	c1 34       	cpi	r28, 0x41	; 65
     89a:	d1 05       	cpc	r29, r1
     89c:	58 f0       	brcs	.+22     	; 0x8b4 <test_xnor+0x42>
				note = 152;
			else
				note += -1;
     89e:	21 97       	sbiw	r28, 0x01	; 1
     8a0:	0e c0       	rjmp	.+28     	; 0x8be <test_xnor+0x4c>
		}
		else if (get_encoder() == TURN_CW){
     8a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	51 f4       	brne	.+20     	; 0x8be <test_xnor+0x4c>
			if (note >= 152)
     8aa:	c8 39       	cpi	r28, 0x98	; 152
     8ac:	d1 05       	cpc	r29, r1
     8ae:	28 f4       	brcc	.+10     	; 0x8ba <test_xnor+0x48>
				note = 64;
			else
				note++;
     8b0:	21 96       	adiw	r28, 0x01	; 1
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <test_xnor+0x4c>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     8b4:	c8 e9       	ldi	r28, 0x98	; 152
     8b6:	d0 e0       	ldi	r29, 0x00	; 0
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <test_xnor+0x4c>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     8ba:	c0 e4       	ldi	r28, 0x40	; 64
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note++;
		}				
					
		if (get_encoder_switch_edge() == EDGE_RISE)
     8be:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	39 f4       	brne	.+14     	; 0x8d4 <test_xnor+0x62>
		    midi_send_noteon(midi_device,MIDI_CHAN,note,120);
     8c6:	c7 01       	movw	r24, r14
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	4c 2f       	mov	r20, r28
     8cc:	28 e7       	ldi	r18, 0x78	; 120
     8ce:	0e 94 93 05 	call	0xb26	; 0xb26 <midi_send_noteon>
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <test_xnor+0x76>
		else if (get_encoder_switch_edge() == EDGE_FALL)
     8d4:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	31 f4       	brne	.+12     	; 0x8e8 <test_xnor+0x76>
			midi_send_noteoff(midi_device,MIDI_CHAN,note,120);
     8dc:	c7 01       	movw	r24, r14
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	4c 2f       	mov	r20, r28
     8e2:	28 e7       	ldi	r18, 0x78	; 120
     8e4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <midi_send_noteoff>
			
		status_LED = get_encoder_switch_state();
     8e8:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     8ec:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     8ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8f2:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     8f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(midi_device,MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(midi_device,MIDI_CHAN,note,120);
			
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	01 30       	cpi	r16, 0x01	; 1
     8fc:	09 f0       	breq	.+2      	; 0x900 <test_xnor+0x8e>
     8fe:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	09 f0       	breq	.+2      	; 0x908 <test_xnor+0x96>
     906:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     908:	81 2f       	mov	r24, r17
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	8e 01       	movw	r16, r28
     90e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     912:	bc cf       	rjmp	.-136    	; 0x88c <test_xnor+0x1a>

00000914 <main>:



int main(void) {

	test_xnor();
     914:	0e 94 39 04 	call	0x872	; 0x872 <test_xnor>

	return 0;
}
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	08 95       	ret

0000091e <serial_midi_send>:
#include <avr/interrupt.h>
#include "stdlib.h"

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     91e:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     920:	80 91 b1 09 	lds	r24, 0x09B1
     924:	85 ff       	sbrs	r24, 5
     926:	fc cf       	rjmp	.-8      	; 0x920 <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
     928:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     92c:	62 30       	cpi	r22, 0x02	; 2
     92e:	70 f0       	brcs	.+28     	; 0x94c <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     930:	80 91 b1 09 	lds	r24, 0x09B1
     934:	85 ff       	sbrs	r24, 5
     936:	fc cf       	rjmp	.-8      	; 0x930 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
     938:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     93c:	63 30       	cpi	r22, 0x03	; 3
     93e:	31 f4       	brne	.+12     	; 0x94c <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     940:	80 91 b1 09 	lds	r24, 0x09B1
     944:	85 ff       	sbrs	r24, 5
     946:	fc cf       	rjmp	.-8      	; 0x940 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
     948:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <serial_midi_device>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
     950:	80 e3       	ldi	r24, 0x30	; 48
     952:	91 e2       	ldi	r25, 0x21	; 33
     954:	08 95       	ret

00000956 <serial_midi_init>:

MidiDevice* serial_midi_init(){
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
     95a:	c0 e3       	ldi	r28, 0x30	; 48
     95c:	d1 e2       	ldi	r29, 0x21	; 33
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 ee 06 	call	0xddc	; 0xddc <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
     964:	ce 01       	movw	r24, r28
     966:	6f e8       	ldi	r22, 0x8F	; 143
     968:	74 e0       	ldi	r23, 0x04	; 4
     96a:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_device_set_send_func>

   return serial_midi_device();
}
     96e:	ce 01       	movw	r24, r28
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     976:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     978:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     97a:	63 83       	std	Z+3, r22	; 0x03
     97c:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
     97e:	11 82       	std	Z+1, r1	; 0x01
     980:	10 82       	st	Z, r1
}
     982:	08 95       	ret

00000984 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     990:	0e 94 3c 05 	call	0xa78	; 0xa78 <store_and_clear_interrupt>
     994:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	c9 01       	movw	r24, r18
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	6a 81       	ldd	r22, Y+2	; 0x02
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     9a6:	48 81       	ld	r20, Y
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	84 17       	cp	r24, r20
     9ac:	95 07       	cpc	r25, r21
     9ae:	29 f4       	brne	.+10     	; 0x9ba <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
     9b0:	80 2f       	mov	r24, r16
     9b2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <restore_interrupt_setting>
      return false;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	13 c0       	rjmp	.+38     	; 0x9e0 <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
     9ba:	eb 81       	ldd	r30, Y+3	; 0x03
     9bc:	fc 81       	ldd	r31, Y+4	; 0x04
     9be:	e2 0f       	add	r30, r18
     9c0:	f3 1f       	adc	r31, r19
     9c2:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     9c4:	29 81       	ldd	r18, Y+1	; 0x01
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	6a 81       	ldd	r22, Y+2	; 0x02
     9ce:	c9 01       	movw	r24, r18
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     9d6:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     9d8:	80 2f       	mov	r24, r16
     9da:	0e 94 3f 05 	call	0xa7e	; 0xa7e <restore_interrupt_setting>
      return true;
     9de:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     9f2:	0e 94 3c 05 	call	0xa78	; 0xa78 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	98 81       	ld	r25, Y
     9fa:	29 17       	cp	r18, r25
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     9fe:	12 2f       	mov	r17, r18
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
     a02:	1a 81       	ldd	r17, Y+2	; 0x02
     a04:	12 0f       	add	r17, r18
     a06:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
     a08:	0e 94 3f 05 	call	0xa7e	; 0xa7e <restore_interrupt_setting>
   return len;
}
     a0c:	81 2f       	mov	r24, r17
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	08 95       	ret

00000a16 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     a16:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     a18:	80 81       	ld	r24, Z
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	86 0f       	add	r24, r22
     a1e:	91 1d       	adc	r25, r1
     a20:	62 81       	ldd	r22, Z+2	; 0x02
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     a28:	03 80       	ldd	r0, Z+3	; 0x03
     a2a:	f4 81       	ldd	r31, Z+4	; 0x04
     a2c:	e0 2d       	mov	r30, r0
     a2e:	e8 0f       	add	r30, r24
     a30:	f9 1f       	adc	r31, r25
}
     a32:	80 81       	ld	r24, Z
     a34:	08 95       	ret

00000a36 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
     a46:	69 83       	std	Y+1, r22	; 0x01
     a48:	0e 94 3c 05 	call	0xa78	; 0xa78 <store_and_clear_interrupt>
     a4c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     a4e:	f8 01       	movw	r30, r16
     a50:	20 81       	ld	r18, Z
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	69 81       	ldd	r22, Y+1	; 0x01
     a56:	26 0f       	add	r18, r22
     a58:	31 1d       	adc	r19, r1
     a5a:	62 81       	ldd	r22, Z+2	; 0x02
     a5c:	c9 01       	movw	r24, r18
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     a64:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
     a66:	84 2f       	mov	r24, r20
     a68:	0e 94 3f 05 	call	0xa7e	; 0xa7e <restore_interrupt_setting>
}
     a6c:	0f 90       	pop	r0
     a6e:	cf 91       	pop	r28
     a70:	df 91       	pop	r29
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
     a78:	8f b7       	in	r24, 0x3f	; 63
    cli();
     a7a:	f8 94       	cli
    return sreg;
}
     a7c:	08 95       	ret

00000a7e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
     a7e:	8f bf       	out	0x3f, r24	; 63
}
     a80:	08 95       	ret

00000a82 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     a82:	88 1f       	adc	r24, r24
     a84:	88 27       	eor	r24, r24
     a86:	88 1f       	adc	r24, r24
     a88:	08 95       	ret

00000a8a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	88 3f       	cpi	r24, 0xF8	; 248
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <midi_is_realtime+0x8>
     a90:	90 e0       	ldi	r25, 0x00	; 0
}
     a92:	89 2f       	mov	r24, r25
     a94:	08 95       	ret

00000a96 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	20 7f       	andi	r18, 0xF0	; 240
     a9c:	30 70       	andi	r19, 0x00	; 0
     a9e:	20 3b       	cpi	r18, 0xB0	; 176
     aa0:	31 05       	cpc	r19, r1
     aa2:	f1 f0       	breq	.+60     	; 0xae0 <midi_packet_length+0x4a>
     aa4:	21 3b       	cpi	r18, 0xB1	; 177
     aa6:	31 05       	cpc	r19, r1
     aa8:	54 f4       	brge	.+20     	; 0xabe <midi_packet_length+0x28>
     aaa:	20 39       	cpi	r18, 0x90	; 144
     aac:	31 05       	cpc	r19, r1
     aae:	c1 f0       	breq	.+48     	; 0xae0 <midi_packet_length+0x4a>
     ab0:	20 3a       	cpi	r18, 0xA0	; 160
     ab2:	31 05       	cpc	r19, r1
     ab4:	a9 f0       	breq	.+42     	; 0xae0 <midi_packet_length+0x4a>
     ab6:	20 38       	cpi	r18, 0x80	; 128
     ab8:	31 05       	cpc	r19, r1
     aba:	e9 f4       	brne	.+58     	; 0xaf6 <midi_packet_length+0x60>
     abc:	11 c0       	rjmp	.+34     	; 0xae0 <midi_packet_length+0x4a>
     abe:	20 3d       	cpi	r18, 0xD0	; 208
     ac0:	31 05       	cpc	r19, r1
     ac2:	d9 f0       	breq	.+54     	; 0xafa <midi_packet_length+0x64>
     ac4:	21 3d       	cpi	r18, 0xD1	; 209
     ac6:	31 05       	cpc	r19, r1
     ac8:	24 f4       	brge	.+8      	; 0xad2 <midi_packet_length+0x3c>
     aca:	20 3c       	cpi	r18, 0xC0	; 192
     acc:	31 05       	cpc	r19, r1
     ace:	99 f4       	brne	.+38     	; 0xaf6 <midi_packet_length+0x60>
     ad0:	14 c0       	rjmp	.+40     	; 0xafa <midi_packet_length+0x64>
     ad2:	20 3e       	cpi	r18, 0xE0	; 224
     ad4:	31 05       	cpc	r19, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <midi_packet_length+0x4a>
     ad8:	20 3f       	cpi	r18, 0xF0	; 240
     ada:	31 05       	cpc	r19, r1
     adc:	61 f4       	brne	.+24     	; 0xaf6 <midi_packet_length+0x60>
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     ae4:	e8 2f       	mov	r30, r24
     ae6:	e1 5f       	subi	r30, 0xF1	; 241
     ae8:	ef 30       	cpi	r30, 0x0F	; 15
     aea:	48 f4       	brcc	.+18     	; 0xafe <midi_packet_length+0x68>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e0 50       	subi	r30, 0x00	; 0
     af0:	f0 4e       	sbci	r31, 0xE0	; 224
     af2:	80 81       	ld	r24, Z
     af4:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	08 95       	ret
     afe:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     b00:	08 95       	ret

00000b02 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     b02:	0f 93       	push	r16
     b04:	36 2f       	mov	r19, r22
     b06:	54 2f       	mov	r21, r20
     b08:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     b0a:	3f 70       	andi	r19, 0x0F	; 15
     b0c:	30 6b       	ori	r19, 0xB0	; 176
     b0e:	5f 77       	andi	r21, 0x7F	; 127
     b10:	0f 77       	andi	r16, 0x7F	; 127
     b12:	dc 01       	movw	r26, r24
     b14:	ed 91       	ld	r30, X+
     b16:	fc 91       	ld	r31, X
     b18:	63 e0       	ldi	r22, 0x03	; 3
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	43 2f       	mov	r20, r19
     b1e:	25 2f       	mov	r18, r21
     b20:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     b26:	0f 93       	push	r16
     b28:	36 2f       	mov	r19, r22
     b2a:	54 2f       	mov	r21, r20
     b2c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     b2e:	3f 70       	andi	r19, 0x0F	; 15
     b30:	30 69       	ori	r19, 0x90	; 144
     b32:	5f 77       	andi	r21, 0x7F	; 127
     b34:	0f 77       	andi	r16, 0x7F	; 127
     b36:	dc 01       	movw	r26, r24
     b38:	ed 91       	ld	r30, X+
     b3a:	fc 91       	ld	r31, X
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	43 2f       	mov	r20, r19
     b42:	25 2f       	mov	r18, r21
     b44:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     b4a:	0f 93       	push	r16
     b4c:	36 2f       	mov	r19, r22
     b4e:	54 2f       	mov	r21, r20
     b50:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     b52:	3f 70       	andi	r19, 0x0F	; 15
     b54:	30 68       	ori	r19, 0x80	; 128
     b56:	5f 77       	andi	r21, 0x7F	; 127
     b58:	0f 77       	andi	r16, 0x7F	; 127
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	63 e0       	ldi	r22, 0x03	; 3
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	43 2f       	mov	r20, r19
     b66:	25 2f       	mov	r18, r21
     b68:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     b6e:	0f 93       	push	r16
     b70:	36 2f       	mov	r19, r22
     b72:	54 2f       	mov	r21, r20
     b74:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     b76:	3f 70       	andi	r19, 0x0F	; 15
     b78:	30 6a       	ori	r19, 0xA0	; 160
     b7a:	5f 77       	andi	r21, 0x7F	; 127
     b7c:	0f 77       	andi	r16, 0x7F	; 127
     b7e:	dc 01       	movw	r26, r24
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	63 e0       	ldi	r22, 0x03	; 3
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	43 2f       	mov	r20, r19
     b8a:	25 2f       	mov	r18, r21
     b8c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret

00000b92 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     b98:	20 e2       	ldi	r18, 0x20	; 32
     b9a:	40 30       	cpi	r20, 0x00	; 0
     b9c:	52 07       	cpc	r21, r18
     b9e:	3c f4       	brge	.+14     	; 0xbae <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     ba0:	a0 ee       	ldi	r26, 0xE0	; 224
     ba2:	40 30       	cpi	r20, 0x00	; 0
     ba4:	5a 07       	cpc	r21, r26
     ba6:	34 f0       	brlt	.+12     	; 0xbb4 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     ba8:	00 50       	subi	r16, 0x00	; 0
     baa:	10 4e       	sbci	r17, 0xE0	; 224
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     bae:	0f ef       	ldi	r16, 0xFF	; 255
     bb0:	1f e3       	ldi	r17, 0x3F	; 63
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     bb8:	46 2f       	mov	r20, r22
     bba:	4f 70       	andi	r20, 0x0F	; 15
     bbc:	40 6e       	ori	r20, 0xE0	; 224
     bbe:	20 2f       	mov	r18, r16
     bc0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     bc2:	00 0f       	add	r16, r16
     bc4:	01 2f       	mov	r16, r17
     bc6:	00 1f       	adc	r16, r16
     bc8:	11 0b       	sbc	r17, r17
     bca:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     bcc:	0f 77       	andi	r16, 0x7F	; 127
     bce:	dc 01       	movw	r26, r24
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	63 e0       	ldi	r22, 0x03	; 3
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     be0:	0f 93       	push	r16
     be2:	36 2f       	mov	r19, r22
     be4:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     be6:	3f 70       	andi	r19, 0x0F	; 15
     be8:	30 6c       	ori	r19, 0xC0	; 192
     bea:	2f 77       	andi	r18, 0x7F	; 127
     bec:	dc 01       	movw	r26, r24
     bee:	ed 91       	ld	r30, X+
     bf0:	fc 91       	ld	r31, X
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	43 2f       	mov	r20, r19
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     c00:	0f 93       	push	r16
     c02:	36 2f       	mov	r19, r22
     c04:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     c06:	3f 70       	andi	r19, 0x0F	; 15
     c08:	30 6d       	ori	r19, 0xD0	; 208
     c0a:	2f 77       	andi	r18, 0x7F	; 127
     c0c:	dc 01       	movw	r26, r24
     c0e:	ed 91       	ld	r30, X+
     c10:	fc 91       	ld	r31, X
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	43 2f       	mov	r20, r19
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     c20:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	48 ef       	ldi	r20, 0xF8	; 248
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	09 95       	icall
}
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     c38:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     c3a:	dc 01       	movw	r26, r24
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	49 ef       	ldi	r20, 0xF9	; 249
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	09 95       	icall
}
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <midi_send_start>:

void midi_send_start(MidiDevice * device){
     c50:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     c52:	dc 01       	movw	r26, r24
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	4a ef       	ldi	r20, 0xFA	; 250
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	09 95       	icall
}
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     c68:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     c6a:	dc 01       	movw	r26, r24
     c6c:	ed 91       	ld	r30, X+
     c6e:	fc 91       	ld	r31, X
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	4b ef       	ldi	r20, 0xFB	; 251
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	00 e0       	ldi	r16, 0x00	; 0
     c7a:	09 95       	icall
}
     c7c:	0f 91       	pop	r16
     c7e:	08 95       	ret

00000c80 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     c80:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     c82:	dc 01       	movw	r26, r24
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	4c ef       	ldi	r20, 0xFC	; 252
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	09 95       	icall
}
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     c98:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     c9a:	dc 01       	movw	r26, r24
     c9c:	ed 91       	ld	r30, X+
     c9e:	fc 91       	ld	r31, X
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	4e ef       	ldi	r20, 0xFE	; 254
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	09 95       	icall
}
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     cb0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     cb2:	dc 01       	movw	r26, r24
     cb4:	ed 91       	ld	r30, X+
     cb6:	fc 91       	ld	r31, X
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	4f ef       	ldi	r20, 0xFF	; 255
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	00 e0       	ldi	r16, 0x00	; 0
     cc2:	09 95       	icall
}
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     cc8:	0f 93       	push	r16
     cca:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
     ccc:	2f 77       	andi	r18, 0x7F	; 127
     cce:	dc 01       	movw	r26, r24
     cd0:	ed 91       	ld	r30, X+
     cd2:	fc 91       	ld	r31, X
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	41 ef       	ldi	r20, 0xF1	; 241
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
   device->send_func(device, 3,
     ce6:	26 2f       	mov	r18, r22
     ce8:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     cea:	8b 01       	movw	r16, r22
     cec:	00 0f       	add	r16, r16
     cee:	01 2f       	mov	r16, r17
     cf0:	00 1f       	adc	r16, r16
     cf2:	11 0b       	sbc	r17, r17
     cf4:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     cf6:	0f 77       	andi	r16, 0x7F	; 127
     cf8:	dc 01       	movw	r26, r24
     cfa:	ed 91       	ld	r30, X+
     cfc:	fc 91       	ld	r31, X
     cfe:	63 e0       	ldi	r22, 0x03	; 3
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	42 ef       	ldi	r20, 0xF2	; 242
     d04:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     d0c:	0f 93       	push	r16
     d0e:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
     d10:	2f 77       	andi	r18, 0x7F	; 127
     d12:	dc 01       	movw	r26, r24
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	43 ef       	ldi	r20, 0xF3	; 243
     d1e:	00 e0       	ldi	r16, 0x00	; 0
     d20:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     d26:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     d28:	dc 01       	movw	r26, r24
     d2a:	ed 91       	ld	r30, X+
     d2c:	fc 91       	ld	r31, X
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	46 ef       	ldi	r20, 0xF6	; 246
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	09 95       	icall
}
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     d3e:	0f 93       	push	r16
     d40:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     d42:	dc 01       	movw	r26, r24
     d44:	ed 91       	ld	r30, X+
     d46:	fc 91       	ld	r31, X
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	00 e0       	ldi	r16, 0x00	; 0
     d50:	09 95       	icall
}
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     d56:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     d58:	dc 01       	movw	r26, r24
     d5a:	ed 91       	ld	r30, X+
     d5c:	fc 91       	ld	r31, X
     d5e:	09 95       	icall
}
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
     d64:	fc 01       	movw	r30, r24
     d66:	62 83       	std	Z+2, r22	; 0x02
     d68:	73 83       	std	Z+3, r23	; 0x03
}
     d6a:	08 95       	ret

00000d6c <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     d6c:	fc 01       	movw	r30, r24
     d6e:	64 83       	std	Z+4, r22	; 0x04
     d70:	75 83       	std	Z+5, r23	; 0x05
}
     d72:	08 95       	ret

00000d74 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     d74:	fc 01       	movw	r30, r24
     d76:	66 83       	std	Z+6, r22	; 0x06
     d78:	77 83       	std	Z+7, r23	; 0x07
}
     d7a:	08 95       	ret

00000d7c <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
     d7c:	fc 01       	movw	r30, r24
     d7e:	60 87       	std	Z+8, r22	; 0x08
     d80:	71 87       	std	Z+9, r23	; 0x09
}
     d82:	08 95       	ret

00000d84 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
     d84:	fc 01       	movw	r30, r24
     d86:	62 87       	std	Z+10, r22	; 0x0a
     d88:	73 87       	std	Z+11, r23	; 0x0b
}
     d8a:	08 95       	ret

00000d8c <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
     d8c:	fc 01       	movw	r30, r24
     d8e:	64 87       	std	Z+12, r22	; 0x0c
     d90:	75 87       	std	Z+13, r23	; 0x0d
}
     d92:	08 95       	ret

00000d94 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
     d94:	fc 01       	movw	r30, r24
     d96:	66 87       	std	Z+14, r22	; 0x0e
     d98:	77 87       	std	Z+15, r23	; 0x0f
}
     d9a:	08 95       	ret

00000d9c <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
     d9c:	fc 01       	movw	r30, r24
     d9e:	60 8b       	std	Z+16, r22	; 0x10
     da0:	71 8b       	std	Z+17, r23	; 0x11
}
     da2:	08 95       	ret

00000da4 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
     da4:	fc 01       	movw	r30, r24
     da6:	62 8b       	std	Z+18, r22	; 0x12
     da8:	73 8b       	std	Z+19, r23	; 0x13
}
     daa:	08 95       	ret

00000dac <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
     dac:	fc 01       	movw	r30, r24
     dae:	64 8b       	std	Z+20, r22	; 0x14
     db0:	75 8b       	std	Z+21, r23	; 0x15
}
     db2:	08 95       	ret

00000db4 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     db4:	fc 01       	movw	r30, r24
     db6:	66 8b       	std	Z+22, r22	; 0x16
     db8:	77 8b       	std	Z+23, r23	; 0x17
}
     dba:	08 95       	ret

00000dbc <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
     dbc:	fc 01       	movw	r30, r24
     dbe:	60 8f       	std	Z+24, r22	; 0x18
     dc0:	71 8f       	std	Z+25, r23	; 0x19
}
     dc2:	08 95       	ret

00000dc4 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
     dc4:	fc 01       	movw	r30, r24
     dc6:	62 8f       	std	Z+26, r22	; 0x1a
     dc8:	73 8f       	std	Z+27, r23	; 0x1b
}
     dca:	08 95       	ret

00000dcc <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
     dcc:	fc 01       	movw	r30, r24
     dce:	64 8f       	std	Z+28, r22	; 0x1c
     dd0:	75 8f       	std	Z+29, r23	; 0x1d
}
     dd2:	08 95       	ret

00000dd4 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
     dd4:	fc 01       	movw	r30, r24
     dd6:	66 8f       	std	Z+30, r22	; 0x1e
     dd8:	77 8f       	std	Z+31, r23	; 0x1f
}
     dda:	08 95       	ret

00000ddc <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
     de2:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
     de4:	1e a2       	std	Y+38, r1	; 0x26
     de6:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     de8:	bc 01       	movw	r22, r24
     dea:	68 5d       	subi	r22, 0xD8	; 216
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	88 51       	subi	r24, 0x18	; 24
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	40 ec       	ldi	r20, 0xC0	; 192
     df4:	0e 94 bb 04 	call	0x976	; 0x976 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
     df8:	1a 82       	std	Y+2, r1	; 0x02
     dfa:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
     dfc:	1c 82       	std	Y+4, r1	; 0x04
     dfe:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
     e00:	1e 82       	std	Y+6, r1	; 0x06
     e02:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
     e04:	18 86       	std	Y+8, r1	; 0x08
     e06:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
     e08:	1a 86       	std	Y+10, r1	; 0x0a
     e0a:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
     e0c:	1c 86       	std	Y+12, r1	; 0x0c
     e0e:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
     e10:	1e 86       	std	Y+14, r1	; 0x0e
     e12:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
     e14:	18 8a       	std	Y+16, r1	; 0x10
     e16:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
     e18:	1a 8a       	std	Y+18, r1	; 0x12
     e1a:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
     e1c:	1c 8a       	std	Y+20, r1	; 0x14
     e1e:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
     e20:	1e 8a       	std	Y+22, r1	; 0x16
     e22:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
     e24:	18 8e       	std	Y+24, r1	; 0x18
     e26:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
     e28:	1a 8e       	std	Y+26, r1	; 0x1a
     e2a:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
     e2c:	1c 8e       	std	Y+28, r1	; 0x1c
     e2e:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
     e30:	1e 8e       	std	Y+30, r1	; 0x1e
     e32:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
     e34:	18 a2       	std	Y+32, r1	; 0x20
     e36:	19 a2       	std	Y+33, r1	; 0x21
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	0f 92       	push	r0
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
     e54:	e4 2f       	mov	r30, r20
     e56:	f5 2f       	mov	r31, r21
     e58:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
     e5a:	8c 01       	movw	r16, r24
     e5c:	08 51       	subi	r16, 0x18	; 24
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
     e62:	f6 01       	movw	r30, r12
     e64:	61 91       	ld	r22, Z+
     e66:	6f 01       	movw	r12, r30
     e68:	c8 01       	movw	r24, r16
     e6a:	49 83       	std	Y+1, r20	; 0x01
     e6c:	0e 94 c2 04 	call	0x984	; 0x984 <bytequeue_enqueue>
     e70:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
     e72:	8c 2d       	mov	r24, r12
     e74:	84 1b       	sub	r24, r20
     e76:	8f 15       	cp	r24, r15
     e78:	a0 f3       	brcs	.-24     	; 0xe62 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	08 95       	ret

00000e8c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
     e8c:	fc 01       	movw	r30, r24
     e8e:	60 83       	st	Z, r22
     e90:	71 83       	std	Z+1, r23	; 0x01
}
     e92:	08 95       	ret

00000e94 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
     e94:	fc 01       	movw	r30, r24
     e96:	60 a3       	std	Z+32, r22	; 0x20
     e98:	71 a3       	std	Z+33, r23	; 0x21
}
     e9a:	08 95       	ret

00000e9c <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
     eae:	6b 01       	movw	r12, r22
     eb0:	14 2f       	mov	r17, r20
     eb2:	e2 2e       	mov	r14, r18
     eb4:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
     eb6:	8d a1       	ldd	r24, Y+37	; 0x25
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	31 f4       	brne	.+12     	; 0xec8 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
     ebc:	ea 8d       	ldd	r30, Y+26	; 0x1a
     ebe:	fb 8d       	ldd	r31, Y+27	; 0x1b
     ec0:	30 97       	sbiw	r30, 0x00	; 0
     ec2:	09 f0       	breq	.+2      	; 0xec6 <midi_input_callbacks+0x2a>
     ec4:	83 c0       	rjmp	.+262    	; 0xfcc <midi_input_callbacks+0x130>
     ec6:	95 c0       	rjmp	.+298    	; 0xff2 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
     ec8:	62 30       	cpi	r22, 0x02	; 2
     eca:	71 05       	cpc	r23, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <midi_input_callbacks+0x34>
     ece:	42 c0       	rjmp	.+132    	; 0xf54 <midi_input_callbacks+0xb8>
     ed0:	63 30       	cpi	r22, 0x03	; 3
     ed2:	71 05       	cpc	r23, r1
     ed4:	29 f0       	breq	.+10     	; 0xee0 <midi_input_callbacks+0x44>
     ed6:	61 30       	cpi	r22, 0x01	; 1
     ed8:	71 05       	cpc	r23, r1
     eda:	09 f0       	breq	.+2      	; 0xede <midi_input_callbacks+0x42>
     edc:	73 c0       	rjmp	.+230    	; 0xfc4 <midi_input_callbacks+0x128>
     ede:	60 c0       	rjmp	.+192    	; 0xfa0 <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
     ee0:	84 2f       	mov	r24, r20
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	80 7f       	andi	r24, 0xF0	; 240
     ee6:	90 70       	andi	r25, 0x00	; 0
     ee8:	80 3a       	cpi	r24, 0xA0	; 160
     eea:	91 05       	cpc	r25, r1
     eec:	e1 f0       	breq	.+56     	; 0xf26 <midi_input_callbacks+0x8a>
     eee:	81 3a       	cpi	r24, 0xA1	; 161
     ef0:	91 05       	cpc	r25, r1
     ef2:	3c f4       	brge	.+14     	; 0xf02 <midi_input_callbacks+0x66>
     ef4:	80 38       	cpi	r24, 0x80	; 128
     ef6:	91 05       	cpc	r25, r1
     ef8:	99 f0       	breq	.+38     	; 0xf20 <midi_input_callbacks+0x84>
     efa:	80 39       	cpi	r24, 0x90	; 144
     efc:	91 05       	cpc	r25, r1
     efe:	f9 f4       	brne	.+62     	; 0xf3e <midi_input_callbacks+0xa2>
     f00:	0c c0       	rjmp	.+24     	; 0xf1a <midi_input_callbacks+0x7e>
     f02:	80 3e       	cpi	r24, 0xE0	; 224
     f04:	91 05       	cpc	r25, r1
     f06:	91 f0       	breq	.+36     	; 0xf2c <midi_input_callbacks+0x90>
     f08:	80 3f       	cpi	r24, 0xF0	; 240
     f0a:	91 05       	cpc	r25, r1
     f0c:	91 f0       	breq	.+36     	; 0xf32 <midi_input_callbacks+0x96>
     f0e:	80 3b       	cpi	r24, 0xB0	; 176
     f10:	91 05       	cpc	r25, r1
     f12:	a9 f4       	brne	.+42     	; 0xf3e <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
     f1a:	ec 81       	ldd	r30, Y+4	; 0x04
     f1c:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
     f20:	ee 81       	ldd	r30, Y+6	; 0x06
     f22:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
     f26:	e8 85       	ldd	r30, Y+8	; 0x08
     f28:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
     f2c:	ea 85       	ldd	r30, Y+10	; 0x0a
     f2e:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
     f32:	42 3f       	cpi	r20, 0xF2	; 242
     f34:	09 f0       	breq	.+2      	; 0xf38 <midi_input_callbacks+0x9c>
     f36:	5d c0       	rjmp	.+186    	; 0xff2 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
     f38:	ec 85       	ldd	r30, Y+12	; 0x0c
     f3a:	fd 85       	ldd	r31, Y+13	; 0x0d
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
     f3e:	e0 e0       	ldi	r30, 0x00	; 0
     f40:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	09 f4       	brne	.+2      	; 0xf48 <midi_input_callbacks+0xac>
     f46:	55 c0       	rjmp	.+170    	; 0xff2 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
     f48:	ce 01       	movw	r24, r28
     f4a:	61 2f       	mov	r22, r17
     f4c:	4e 2d       	mov	r20, r14
     f4e:	2f 2d       	mov	r18, r15
     f50:	09 95       	icall
     f52:	42 c0       	rjmp	.+132    	; 0xfd8 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
     f54:	84 2f       	mov	r24, r20
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	80 7f       	andi	r24, 0xF0	; 240
     f5a:	90 70       	andi	r25, 0x00	; 0
     f5c:	80 3d       	cpi	r24, 0xD0	; 208
     f5e:	91 05       	cpc	r25, r1
     f60:	49 f0       	breq	.+18     	; 0xf74 <midi_input_callbacks+0xd8>
     f62:	80 3f       	cpi	r24, 0xF0	; 240
     f64:	91 05       	cpc	r25, r1
     f66:	49 f0       	breq	.+18     	; 0xf7a <midi_input_callbacks+0xde>
     f68:	80 3c       	cpi	r24, 0xC0	; 192
     f6a:	91 05       	cpc	r25, r1
     f6c:	81 f4       	brne	.+32     	; 0xf8e <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
     f6e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f70:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
     f74:	e8 89       	ldd	r30, Y+16	; 0x10
     f76:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
     f78:	0c c0       	rjmp	.+24     	; 0xf92 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
     f7a:	43 3f       	cpi	r20, 0xF3	; 243
     f7c:	19 f4       	brne	.+6      	; 0xf84 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
     f7e:	ea 89       	ldd	r30, Y+18	; 0x12
     f80:	fb 89       	ldd	r31, Y+19	; 0x13
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
     f84:	41 3f       	cpi	r20, 0xF1	; 241
     f86:	a9 f5       	brne	.+106    	; 0xff2 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
     f88:	ec 89       	ldd	r30, Y+20	; 0x14
     f8a:	fd 89       	ldd	r31, Y+21	; 0x15
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
     f8e:	e0 e0       	ldi	r30, 0x00	; 0
     f90:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	71 f1       	breq	.+92     	; 0xff2 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
     f96:	ce 01       	movw	r24, r28
     f98:	61 2f       	mov	r22, r17
     f9a:	4e 2d       	mov	r20, r14
     f9c:	09 95       	icall
     f9e:	1c c0       	rjmp	.+56     	; 0xfd8 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
     fa0:	84 2f       	mov	r24, r20
     fa2:	0e 94 45 05 	call	0xa8a	; 0xa8a <midi_is_realtime>
     fa6:	88 23       	and	r24, r24
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
     faa:	ee 89       	ldd	r30, Y+22	; 0x16
     fac:	ff 89       	ldd	r31, Y+23	; 0x17
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
     fb0:	16 3f       	cpi	r17, 0xF6	; 246
     fb2:	f9 f4       	brne	.+62     	; 0xff2 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
     fb4:	e8 8d       	ldd	r30, Y+24	; 0x18
     fb6:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	d9 f0       	breq	.+54     	; 0xff2 <midi_input_callbacks+0x156>
                  func(device, byte0);
     fbc:	ce 01       	movw	r24, r28
     fbe:	61 2f       	mov	r22, r17
     fc0:	09 95       	icall
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
     fc4:	64 30       	cpi	r22, 0x04	; 4
     fc6:	71 05       	cpc	r23, r1
     fc8:	90 f4       	brcc	.+36     	; 0xfee <midi_input_callbacks+0x152>
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
     fcc:	ce 01       	movw	r24, r28
     fce:	b6 01       	movw	r22, r12
     fd0:	41 2f       	mov	r20, r17
     fd2:	2e 2d       	mov	r18, r14
     fd4:	0f 2d       	mov	r16, r15
     fd6:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
     fd8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fda:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	71 f0       	breq	.+28     	; 0xffc <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
     fe0:	ce 01       	movw	r24, r28
     fe2:	b6 01       	movw	r22, r12
     fe4:	41 2f       	mov	r20, r17
     fe6:	2e 2d       	mov	r18, r14
     fe8:	0f 2d       	mov	r16, r15
     fea:	09 95       	icall
     fec:	07 c0       	rjmp	.+14     	; 0xffc <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
     fee:	cc 24       	eor	r12, r12
     ff0:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
     ff2:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ff4:	fd 8d       	ldd	r31, Y+29	; 0x1d
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	49 f7       	brne	.-46     	; 0xfcc <midi_input_callbacks+0x130>
     ffa:	ee cf       	rjmp	.-36     	; 0xfd8 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	08 95       	ret

0000100e <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ec 01       	movw	r28, r24
    101c:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    101e:	86 2f       	mov	r24, r22
    1020:	0e 94 45 05 	call	0xa8a	; 0xa8a <midi_is_realtime>
    1024:	88 23       	and	r24, r24
    1026:	69 f0       	breq	.+26     	; 0x1042 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1028:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    102e:	ce 01       	movw	r24, r28
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	41 2f       	mov	r20, r17
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	00 e0       	ldi	r16, 0x00	; 0
    103a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <midi_input_callbacks>
      device->input_state = state;
    103e:	ed a2       	std	Y+37, r14	; 0x25
    1040:	7e c0       	rjmp	.+252    	; 0x113e <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1042:	81 2f       	mov	r24, r17
    1044:	0e 94 41 05 	call	0xa82	; 0xa82 <midi_is_statusbyte>
    1048:	4d a1       	ldd	r20, Y+37	; 0x25
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <midi_process_byte+0x42>
    104e:	42 c0       	rjmp	.+132    	; 0x10d4 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1050:	44 30       	cpi	r20, 0x04	; 4
    1052:	29 f0       	breq	.+10     	; 0x105e <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1054:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	8e a3       	std	Y+38, r24	; 0x26
    105c:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    105e:	81 2f       	mov	r24, r17
    1060:	0e 94 4b 05 	call	0xa96	; 0xa96 <midi_packet_length>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	39 f0       	breq	.+14     	; 0x1076 <midi_process_byte+0x68>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	78 f0       	brcs	.+30     	; 0x108a <midi_process_byte+0x7c>
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	59 f0       	breq	.+22     	; 0x1086 <midi_process_byte+0x78>
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	61 f5       	brne	.+88     	; 0x10cc <midi_process_byte+0xbe>
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1076:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1078:	ce 01       	movw	r24, r28
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	41 2f       	mov	r20, r17
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	1f c0       	rjmp	.+62     	; 0x10c4 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1086:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1088:	5a c0       	rjmp	.+180    	; 0x113e <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    108a:	10 3f       	cpi	r17, 0xF0	; 240
    108c:	19 f0       	breq	.+6      	; 0x1094 <midi_process_byte+0x86>
    108e:	17 3f       	cpi	r17, 0xF7	; 247
    1090:	e9 f4       	brne	.+58     	; 0x10cc <midi_process_byte+0xbe>
    1092:	04 c0       	rjmp	.+8      	; 0x109c <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1098:	1a a3       	std	Y+34, r17	; 0x22
    109a:	3f c0       	rjmp	.+126    	; 0x111a <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    109c:	2e a1       	ldd	r18, Y+38	; 0x26
    109e:	3f a1       	ldd	r19, Y+39	; 0x27
    10a0:	c9 01       	movw	r24, r18
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
    10aa:	8c 0f       	add	r24, r28
    10ac:	9d 1f       	adc	r25, r29
    10ae:	fc 01       	movw	r30, r24
    10b0:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    10b2:	b9 01       	movw	r22, r18
    10b4:	6f 5f       	subi	r22, 0xFF	; 255
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	6e a3       	std	Y+38, r22	; 0x26
    10ba:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    10bc:	ce 01       	movw	r24, r28
    10be:	4a a1       	ldd	r20, Y+34	; 0x22
    10c0:	2b a1       	ldd	r18, Y+35	; 0x23
    10c2:	0c a1       	ldd	r16, Y+36	; 0x24
    10c4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    10c8:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    10ca:	39 c0       	rjmp	.+114    	; 0x113e <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    10cc:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    10ce:	1e a2       	std	Y+38, r1	; 0x26
    10d0:	1f a2       	std	Y+39, r1	; 0x27
            break;
    10d2:	35 c0       	rjmp	.+106    	; 0x113e <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    10d4:	44 23       	and	r20, r20
    10d6:	99 f1       	breq	.+102    	; 0x113e <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    10d8:	2e a1       	ldd	r18, Y+38	; 0x26
    10da:	3f a1       	ldd	r19, Y+39	; 0x27
    10dc:	c9 01       	movw	r24, r18
    10de:	63 e0       	ldi	r22, 0x03	; 3
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
    10e6:	7c 01       	movw	r14, r24
    10e8:	fe 01       	movw	r30, r28
    10ea:	e8 0f       	add	r30, r24
    10ec:	f9 1f       	adc	r31, r25
    10ee:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    10f0:	b9 01       	movw	r22, r18
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	6e a3       	std	Y+38, r22	; 0x26
    10f8:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	91 f0       	breq	.+36     	; 0x1124 <midi_process_byte+0x116>
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	e8 16       	cp	r14, r24
    1104:	f1 04       	cpc	r15, r1
    1106:	d9 f4       	brne	.+54     	; 0x113e <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1108:	ce 01       	movw	r24, r28
    110a:	4a a1       	ldd	r20, Y+34	; 0x22
    110c:	2b a1       	ldd	r18, Y+35	; 0x23
    110e:	0c a1       	ldd	r16, Y+36	; 0x24
    1110:	0e 94 4e 07 	call	0xe9c	; 0xe9c <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1114:	8d a1       	ldd	r24, Y+37	; 0x25
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	91 f0       	breq	.+36     	; 0x113e <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	8e a3       	std	Y+38, r24	; 0x26
    1120:	9f a3       	std	Y+39, r25	; 0x27
    1122:	0d c0       	rjmp	.+26     	; 0x113e <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1124:	42 30       	cpi	r20, 0x02	; 2
    1126:	59 f4       	brne	.+22     	; 0x113e <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1128:	ce 01       	movw	r24, r28
    112a:	4a a1       	ldd	r20, Y+34	; 0x22
    112c:	2b a1       	ldd	r18, Y+35	; 0x23
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	0e 94 4e 07 	call	0xe9c	; 0xe9c <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1134:	8d a1       	ldd	r24, Y+37	; 0x25
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	11 f0       	breq	.+4      	; 0x113e <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    113a:	ee a2       	std	Y+38, r14	; 0x26
    113c:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	08 95       	ret

0000114c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    115e:	e8 a1       	ldd	r30, Y+32	; 0x20
    1160:	f9 a1       	ldd	r31, Y+33	; 0x21
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    1166:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1168:	8e 01       	movw	r16, r28
    116a:	08 51       	subi	r16, 0x18	; 24
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	c8 01       	movw	r24, r16
    1170:	0e 94 f5 04 	call	0x9ea	; 0x9ea <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1174:	ee 24       	eor	r14, r14
    1176:	ff 24       	eor	r15, r15
    1178:	c8 2e       	mov	r12, r24
    117a:	dd 24       	eor	r13, r13
    117c:	0f c0       	rjmp	.+30     	; 0x119c <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    117e:	c8 01       	movw	r24, r16
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	0e 94 0b 05 	call	0xa16	; 0xa16 <bytequeue_get>
    1186:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 07 08 	call	0x100e	; 0x100e <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    118e:	c8 01       	movw	r24, r16
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	0e 94 1b 05 	call	0xa36	; 0xa36 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1196:	08 94       	sec
    1198:	e1 1c       	adc	r14, r1
    119a:	f1 1c       	adc	r15, r1
    119c:	ec 14       	cp	r14, r12
    119e:	fd 04       	cpc	r15, r13
    11a0:	70 f3       	brcs	.-36     	; 0x117e <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	08 95       	ret

000011b4 <__fixunssfsi>:
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	7b 01       	movw	r14, r22
    11be:	8c 01       	movw	r16, r24
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	5f e4       	ldi	r21, 0x4F	; 79
    11c8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__gesf2>
    11cc:	87 fd       	sbrc	r24, 7
    11ce:	11 c0       	rjmp	.+34     	; 0x11f2 <__fixunssfsi+0x3e>
    11d0:	c8 01       	movw	r24, r16
    11d2:	b7 01       	movw	r22, r14
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	5f e4       	ldi	r21, 0x4F	; 79
    11dc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__subsf3>
    11e0:	0e 94 86 0c 	call	0x190c	; 0x190c <__fixsfsi>
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	20 50       	subi	r18, 0x00	; 0
    11ea:	30 40       	sbci	r19, 0x00	; 0
    11ec:	40 40       	sbci	r20, 0x00	; 0
    11ee:	50 48       	sbci	r21, 0x80	; 128
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <__fixunssfsi+0x4a>
    11f2:	c8 01       	movw	r24, r16
    11f4:	b7 01       	movw	r22, r14
    11f6:	0e 94 86 0c 	call	0x190c	; 0x190c <__fixsfsi>
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	b9 01       	movw	r22, r18
    1200:	ca 01       	movw	r24, r20
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <_fpadd_parts>:
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ec e0       	ldi	r30, 0x0C	; 12
    1212:	f9 e0       	ldi	r31, 0x09	; 9
    1214:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__+0x8>
    1218:	fc 01       	movw	r30, r24
    121a:	ea 01       	movw	r28, r20
    121c:	80 81       	ld	r24, Z
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	08 f4       	brcc	.+2      	; 0x1224 <_fpadd_parts+0x18>
    1222:	38 c1       	rjmp	.+624    	; 0x1494 <_fpadd_parts+0x288>
    1224:	db 01       	movw	r26, r22
    1226:	9c 91       	ld	r25, X
    1228:	92 30       	cpi	r25, 0x02	; 2
    122a:	08 f4       	brcc	.+2      	; 0x122e <_fpadd_parts+0x22>
    122c:	30 c1       	rjmp	.+608    	; 0x148e <_fpadd_parts+0x282>
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	59 f4       	brne	.+22     	; 0x1248 <_fpadd_parts+0x3c>
    1232:	94 30       	cpi	r25, 0x04	; 4
    1234:	09 f0       	breq	.+2      	; 0x1238 <_fpadd_parts+0x2c>
    1236:	2e c1       	rjmp	.+604    	; 0x1494 <_fpadd_parts+0x288>
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	8c 91       	ld	r24, X
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	98 17       	cp	r25, r24
    1242:	09 f0       	breq	.+2      	; 0x1246 <_fpadd_parts+0x3a>
    1244:	21 c1       	rjmp	.+578    	; 0x1488 <_fpadd_parts+0x27c>
    1246:	26 c1       	rjmp	.+588    	; 0x1494 <_fpadd_parts+0x288>
    1248:	94 30       	cpi	r25, 0x04	; 4
    124a:	09 f4       	brne	.+2      	; 0x124e <_fpadd_parts+0x42>
    124c:	20 c1       	rjmp	.+576    	; 0x148e <_fpadd_parts+0x282>
    124e:	92 30       	cpi	r25, 0x02	; 2
    1250:	b1 f4       	brne	.+44     	; 0x127e <_fpadd_parts+0x72>
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	09 f0       	breq	.+2      	; 0x1258 <_fpadd_parts+0x4c>
    1256:	1e c1       	rjmp	.+572    	; 0x1494 <_fpadd_parts+0x288>
    1258:	ca 01       	movw	r24, r20
    125a:	af 01       	movw	r20, r30
    125c:	28 e0       	ldi	r18, 0x08	; 8
    125e:	da 01       	movw	r26, r20
    1260:	0d 90       	ld	r0, X+
    1262:	ad 01       	movw	r20, r26
    1264:	dc 01       	movw	r26, r24
    1266:	0d 92       	st	X+, r0
    1268:	cd 01       	movw	r24, r26
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	c1 f7       	brne	.-16     	; 0x125e <_fpadd_parts+0x52>
    126e:	db 01       	movw	r26, r22
    1270:	11 96       	adiw	r26, 0x01	; 1
    1272:	8c 91       	ld	r24, X
    1274:	11 97       	sbiw	r26, 0x01	; 1
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	89 23       	and	r24, r25
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	0a c1       	rjmp	.+532    	; 0x1492 <_fpadd_parts+0x286>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f4       	brne	.+2      	; 0x1284 <_fpadd_parts+0x78>
    1282:	05 c1       	rjmp	.+522    	; 0x148e <_fpadd_parts+0x282>
    1284:	c2 80       	ldd	r12, Z+2	; 0x02
    1286:	d3 80       	ldd	r13, Z+3	; 0x03
    1288:	db 01       	movw	r26, r22
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	6d 90       	ld	r6, X+
    128e:	7c 90       	ld	r7, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	24 81       	ldd	r18, Z+4	; 0x04
    1294:	35 81       	ldd	r19, Z+5	; 0x05
    1296:	46 81       	ldd	r20, Z+6	; 0x06
    1298:	57 81       	ldd	r21, Z+7	; 0x07
    129a:	14 96       	adiw	r26, 0x04	; 4
    129c:	ed 90       	ld	r14, X+
    129e:	fd 90       	ld	r15, X+
    12a0:	0d 91       	ld	r16, X+
    12a2:	1c 91       	ld	r17, X
    12a4:	17 97       	sbiw	r26, 0x07	; 7
    12a6:	c6 01       	movw	r24, r12
    12a8:	86 19       	sub	r24, r6
    12aa:	97 09       	sbc	r25, r7
    12ac:	5c 01       	movw	r10, r24
    12ae:	97 ff       	sbrs	r25, 7
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <_fpadd_parts+0xae>
    12b2:	aa 24       	eor	r10, r10
    12b4:	bb 24       	eor	r11, r11
    12b6:	a8 1a       	sub	r10, r24
    12b8:	b9 0a       	sbc	r11, r25
    12ba:	b0 e2       	ldi	r27, 0x20	; 32
    12bc:	ab 16       	cp	r10, r27
    12be:	b1 04       	cpc	r11, r1
    12c0:	0c f0       	brlt	.+2      	; 0x12c4 <_fpadd_parts+0xb8>
    12c2:	61 c0       	rjmp	.+194    	; 0x1386 <_fpadd_parts+0x17a>
    12c4:	18 16       	cp	r1, r24
    12c6:	19 06       	cpc	r1, r25
    12c8:	6c f5       	brge	.+90     	; 0x1324 <_fpadd_parts+0x118>
    12ca:	37 01       	movw	r6, r14
    12cc:	48 01       	movw	r8, r16
    12ce:	0a 2c       	mov	r0, r10
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <_fpadd_parts+0xce>
    12d2:	96 94       	lsr	r9
    12d4:	87 94       	ror	r8
    12d6:	77 94       	ror	r7
    12d8:	67 94       	ror	r6
    12da:	0a 94       	dec	r0
    12dc:	d2 f7       	brpl	.-12     	; 0x12d2 <_fpadd_parts+0xc6>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	0a 2c       	mov	r0, r10
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <_fpadd_parts+0xe6>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	aa 1f       	adc	r26, r26
    12f0:	bb 1f       	adc	r27, r27
    12f2:	0a 94       	dec	r0
    12f4:	d2 f7       	brpl	.-12     	; 0x12ea <_fpadd_parts+0xde>
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	a1 09       	sbc	r26, r1
    12fa:	b1 09       	sbc	r27, r1
    12fc:	8e 21       	and	r24, r14
    12fe:	9f 21       	and	r25, r15
    1300:	a0 23       	and	r26, r16
    1302:	b1 23       	and	r27, r17
    1304:	ee 24       	eor	r14, r14
    1306:	ff 24       	eor	r15, r15
    1308:	87 01       	movw	r16, r14
    130a:	e3 94       	inc	r14
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	a1 05       	cpc	r26, r1
    1310:	b1 05       	cpc	r27, r1
    1312:	19 f4       	brne	.+6      	; 0x131a <_fpadd_parts+0x10e>
    1314:	ee 24       	eor	r14, r14
    1316:	ff 24       	eor	r15, r15
    1318:	87 01       	movw	r16, r14
    131a:	e6 28       	or	r14, r6
    131c:	f7 28       	or	r15, r7
    131e:	08 29       	or	r16, r8
    1320:	19 29       	or	r17, r9
    1322:	3c c0       	rjmp	.+120    	; 0x139c <_fpadd_parts+0x190>
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	d1 f1       	breq	.+116    	; 0x139c <_fpadd_parts+0x190>
    1328:	ca 0c       	add	r12, r10
    132a:	db 1c       	adc	r13, r11
    132c:	39 01       	movw	r6, r18
    132e:	4a 01       	movw	r8, r20
    1330:	0a 2c       	mov	r0, r10
    1332:	04 c0       	rjmp	.+8      	; 0x133c <_fpadd_parts+0x130>
    1334:	96 94       	lsr	r9
    1336:	87 94       	ror	r8
    1338:	77 94       	ror	r7
    133a:	67 94       	ror	r6
    133c:	0a 94       	dec	r0
    133e:	d2 f7       	brpl	.-12     	; 0x1334 <_fpadd_parts+0x128>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	0a 2c       	mov	r0, r10
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <_fpadd_parts+0x148>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	0a 94       	dec	r0
    1356:	d2 f7       	brpl	.-12     	; 0x134c <_fpadd_parts+0x140>
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	a1 09       	sbc	r26, r1
    135c:	b1 09       	sbc	r27, r1
    135e:	82 23       	and	r24, r18
    1360:	93 23       	and	r25, r19
    1362:	a4 23       	and	r26, r20
    1364:	b5 23       	and	r27, r21
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	a1 05       	cpc	r26, r1
    1372:	b1 05       	cpc	r27, r1
    1374:	19 f4       	brne	.+6      	; 0x137c <_fpadd_parts+0x170>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	26 29       	or	r18, r6
    137e:	37 29       	or	r19, r7
    1380:	48 29       	or	r20, r8
    1382:	59 29       	or	r21, r9
    1384:	0b c0       	rjmp	.+22     	; 0x139c <_fpadd_parts+0x190>
    1386:	6c 14       	cp	r6, r12
    1388:	7d 04       	cpc	r7, r13
    138a:	24 f4       	brge	.+8      	; 0x1394 <_fpadd_parts+0x188>
    138c:	ee 24       	eor	r14, r14
    138e:	ff 24       	eor	r15, r15
    1390:	87 01       	movw	r16, r14
    1392:	04 c0       	rjmp	.+8      	; 0x139c <_fpadd_parts+0x190>
    1394:	63 01       	movw	r12, r6
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	81 81       	ldd	r24, Z+1	; 0x01
    139e:	fb 01       	movw	r30, r22
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	89 17       	cp	r24, r25
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <_fpadd_parts+0x19c>
    13a6:	45 c0       	rjmp	.+138    	; 0x1432 <_fpadd_parts+0x226>
    13a8:	88 23       	and	r24, r24
    13aa:	49 f0       	breq	.+18     	; 0x13be <_fpadd_parts+0x1b2>
    13ac:	d8 01       	movw	r26, r16
    13ae:	c7 01       	movw	r24, r14
    13b0:	82 1b       	sub	r24, r18
    13b2:	93 0b       	sbc	r25, r19
    13b4:	a4 0b       	sbc	r26, r20
    13b6:	b5 0b       	sbc	r27, r21
    13b8:	9c 01       	movw	r18, r24
    13ba:	ad 01       	movw	r20, r26
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <_fpadd_parts+0x1ba>
    13be:	2e 19       	sub	r18, r14
    13c0:	3f 09       	sbc	r19, r15
    13c2:	40 0b       	sbc	r20, r16
    13c4:	51 0b       	sbc	r21, r17
    13c6:	57 fd       	sbrc	r21, 7
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <_fpadd_parts+0x1c6>
    13ca:	19 82       	std	Y+1, r1	; 0x01
    13cc:	ca 82       	std	Y+2, r12	; 0x02
    13ce:	db 82       	std	Y+3, r13	; 0x03
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <_fpadd_parts+0x1dc>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	ca 82       	std	Y+2, r12	; 0x02
    13d8:	db 82       	std	Y+3, r13	; 0x03
    13da:	50 95       	com	r21
    13dc:	40 95       	com	r20
    13de:	30 95       	com	r19
    13e0:	21 95       	neg	r18
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	4f 4f       	sbci	r20, 0xFF	; 255
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	2c 83       	std	Y+4, r18	; 0x04
    13ea:	3d 83       	std	Y+5, r19	; 0x05
    13ec:	4e 83       	std	Y+6, r20	; 0x06
    13ee:	5f 83       	std	Y+7, r21	; 0x07
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <_fpadd_parts+0x200>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	aa 1f       	adc	r26, r26
    13f8:	bb 1f       	adc	r27, r27
    13fa:	8c 83       	std	Y+4, r24	; 0x04
    13fc:	9d 83       	std	Y+5, r25	; 0x05
    13fe:	ae 83       	std	Y+6, r26	; 0x06
    1400:	bf 83       	std	Y+7, r27	; 0x07
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	9b 81       	ldd	r25, Y+3	; 0x03
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	9b 83       	std	Y+3, r25	; 0x03
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	ae 81       	ldd	r26, Y+6	; 0x06
    1412:	bf 81       	ldd	r27, Y+7	; 0x07
    1414:	9c 01       	movw	r18, r24
    1416:	ad 01       	movw	r20, r26
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	30 40       	sbci	r19, 0x00	; 0
    141c:	40 40       	sbci	r20, 0x00	; 0
    141e:	50 40       	sbci	r21, 0x00	; 0
    1420:	2f 3f       	cpi	r18, 0xFF	; 255
    1422:	ef ef       	ldi	r30, 0xFF	; 255
    1424:	3e 07       	cpc	r19, r30
    1426:	ef ef       	ldi	r30, 0xFF	; 255
    1428:	4e 07       	cpc	r20, r30
    142a:	ef e3       	ldi	r30, 0x3F	; 63
    142c:	5e 07       	cpc	r21, r30
    142e:	08 f3       	brcs	.-62     	; 0x13f2 <_fpadd_parts+0x1e6>
    1430:	0b c0       	rjmp	.+22     	; 0x1448 <_fpadd_parts+0x23c>
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	ca 82       	std	Y+2, r12	; 0x02
    1436:	db 82       	std	Y+3, r13	; 0x03
    1438:	2e 0d       	add	r18, r14
    143a:	3f 1d       	adc	r19, r15
    143c:	40 1f       	adc	r20, r16
    143e:	51 1f       	adc	r21, r17
    1440:	2c 83       	std	Y+4, r18	; 0x04
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	4e 83       	std	Y+6, r20	; 0x06
    1446:	5f 83       	std	Y+7, r21	; 0x07
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	88 83       	st	Y, r24
    144c:	2c 81       	ldd	r18, Y+4	; 0x04
    144e:	3d 81       	ldd	r19, Y+5	; 0x05
    1450:	4e 81       	ldd	r20, Y+6	; 0x06
    1452:	5f 81       	ldd	r21, Y+7	; 0x07
    1454:	57 ff       	sbrs	r21, 7
    1456:	1d c0       	rjmp	.+58     	; 0x1492 <_fpadd_parts+0x286>
    1458:	da 01       	movw	r26, r20
    145a:	c9 01       	movw	r24, r18
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	a0 70       	andi	r26, 0x00	; 0
    1462:	b0 70       	andi	r27, 0x00	; 0
    1464:	56 95       	lsr	r21
    1466:	47 95       	ror	r20
    1468:	37 95       	ror	r19
    146a:	27 95       	ror	r18
    146c:	82 2b       	or	r24, r18
    146e:	93 2b       	or	r25, r19
    1470:	a4 2b       	or	r26, r20
    1472:	b5 2b       	or	r27, r21
    1474:	8c 83       	std	Y+4, r24	; 0x04
    1476:	9d 83       	std	Y+5, r25	; 0x05
    1478:	ae 83       	std	Y+6, r26	; 0x06
    147a:	bf 83       	std	Y+7, r27	; 0x07
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	9b 81       	ldd	r25, Y+3	; 0x03
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <_fpadd_parts+0x286>
    1488:	ef e0       	ldi	r30, 0x0F	; 15
    148a:	f0 e2       	ldi	r31, 0x20	; 32
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <_fpadd_parts+0x288>
    148e:	fb 01       	movw	r30, r22
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <_fpadd_parts+0x288>
    1492:	fe 01       	movw	r30, r28
    1494:	cf 01       	movw	r24, r30
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	ee e0       	ldi	r30, 0x0E	; 14
    149c:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__epilogue_restores__+0x8>

000014a0 <__addsf3>:
    14a0:	a0 e2       	ldi	r26, 0x20	; 32
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e6 e5       	ldi	r30, 0x56	; 86
    14a6:	fa e0       	ldi	r31, 0x0A	; 10
    14a8:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    14ac:	69 83       	std	Y+1, r22	; 0x01
    14ae:	7a 83       	std	Y+2, r23	; 0x02
    14b0:	8b 83       	std	Y+3, r24	; 0x03
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	2d 83       	std	Y+5, r18	; 0x05
    14b6:	3e 83       	std	Y+6, r19	; 0x06
    14b8:	4f 83       	std	Y+7, r20	; 0x07
    14ba:	58 87       	std	Y+8, r21	; 0x08
    14bc:	89 e0       	ldi	r24, 0x09	; 9
    14be:	e8 2e       	mov	r14, r24
    14c0:	f1 2c       	mov	r15, r1
    14c2:	ec 0e       	add	r14, r28
    14c4:	fd 1e       	adc	r15, r29
    14c6:	ce 01       	movw	r24, r28
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	b7 01       	movw	r22, r14
    14cc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    14d0:	8e 01       	movw	r16, r28
    14d2:	0f 5e       	subi	r16, 0xEF	; 239
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	ce 01       	movw	r24, r28
    14d8:	05 96       	adiw	r24, 0x05	; 5
    14da:	b8 01       	movw	r22, r16
    14dc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    14e0:	c7 01       	movw	r24, r14
    14e2:	b8 01       	movw	r22, r16
    14e4:	ae 01       	movw	r20, r28
    14e6:	47 5e       	subi	r20, 0xE7	; 231
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	0e 94 06 09 	call	0x120c	; 0x120c <_fpadd_parts>
    14ee:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__pack_f>
    14f2:	a0 96       	adiw	r28, 0x20	; 32
    14f4:	e6 e0       	ldi	r30, 0x06	; 6
    14f6:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

000014fa <__subsf3>:
    14fa:	a0 e2       	ldi	r26, 0x20	; 32
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e8       	ldi	r30, 0x83	; 131
    1500:	fa e0       	ldi	r31, 0x0A	; 10
    1502:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    1506:	69 83       	std	Y+1, r22	; 0x01
    1508:	7a 83       	std	Y+2, r23	; 0x02
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	2d 83       	std	Y+5, r18	; 0x05
    1510:	3e 83       	std	Y+6, r19	; 0x06
    1512:	4f 83       	std	Y+7, r20	; 0x07
    1514:	58 87       	std	Y+8, r21	; 0x08
    1516:	8e 01       	movw	r16, r28
    1518:	07 5f       	subi	r16, 0xF7	; 247
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	b8 01       	movw	r22, r16
    1522:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    1526:	91 e1       	ldi	r25, 0x11	; 17
    1528:	e9 2e       	mov	r14, r25
    152a:	f1 2c       	mov	r15, r1
    152c:	ec 0e       	add	r14, r28
    152e:	fd 1e       	adc	r15, r29
    1530:	ce 01       	movw	r24, r28
    1532:	05 96       	adiw	r24, 0x05	; 5
    1534:	b7 01       	movw	r22, r14
    1536:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    153a:	8a 89       	ldd	r24, Y+18	; 0x12
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	89 27       	eor	r24, r25
    1540:	8a 8b       	std	Y+18, r24	; 0x12
    1542:	c8 01       	movw	r24, r16
    1544:	b7 01       	movw	r22, r14
    1546:	ae 01       	movw	r20, r28
    1548:	47 5e       	subi	r20, 0xE7	; 231
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	0e 94 06 09 	call	0x120c	; 0x120c <_fpadd_parts>
    1550:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__pack_f>
    1554:	a0 96       	adiw	r28, 0x20	; 32
    1556:	e6 e0       	ldi	r30, 0x06	; 6
    1558:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

0000155c <__mulsf3>:
    155c:	a0 e2       	ldi	r26, 0x20	; 32
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 eb       	ldi	r30, 0xB4	; 180
    1562:	fa e0       	ldi	r31, 0x0A	; 10
    1564:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__>
    1568:	69 83       	std	Y+1, r22	; 0x01
    156a:	7a 83       	std	Y+2, r23	; 0x02
    156c:	8b 83       	std	Y+3, r24	; 0x03
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	2d 83       	std	Y+5, r18	; 0x05
    1572:	3e 83       	std	Y+6, r19	; 0x06
    1574:	4f 83       	std	Y+7, r20	; 0x07
    1576:	58 87       	std	Y+8, r21	; 0x08
    1578:	ce 01       	movw	r24, r28
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	be 01       	movw	r22, r28
    157e:	67 5f       	subi	r22, 0xF7	; 247
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    1586:	ce 01       	movw	r24, r28
    1588:	05 96       	adiw	r24, 0x05	; 5
    158a:	be 01       	movw	r22, r28
    158c:	6f 5e       	subi	r22, 0xEF	; 239
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    1594:	99 85       	ldd	r25, Y+9	; 0x09
    1596:	92 30       	cpi	r25, 0x02	; 2
    1598:	78 f0       	brcs	.+30     	; 0x15b8 <__mulsf3+0x5c>
    159a:	89 89       	ldd	r24, Y+17	; 0x11
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	c0 f0       	brcs	.+48     	; 0x15d0 <__mulsf3+0x74>
    15a0:	94 30       	cpi	r25, 0x04	; 4
    15a2:	19 f4       	brne	.+6      	; 0x15aa <__mulsf3+0x4e>
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	41 f4       	brne	.+16     	; 0x15b8 <__mulsf3+0x5c>
    15a8:	cb c0       	rjmp	.+406    	; 0x1740 <__mulsf3+0x1e4>
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <__mulsf3+0x58>
    15ae:	92 30       	cpi	r25, 0x02	; 2
    15b0:	79 f4       	brne	.+30     	; 0x15d0 <__mulsf3+0x74>
    15b2:	c6 c0       	rjmp	.+396    	; 0x1740 <__mulsf3+0x1e4>
    15b4:	92 30       	cpi	r25, 0x02	; 2
    15b6:	51 f4       	brne	.+20     	; 0x15cc <__mulsf3+0x70>
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    15bc:	9a 89       	ldd	r25, Y+18	; 0x12
    15be:	29 17       	cp	r18, r25
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <__mulsf3+0x68>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	8a 87       	std	Y+10, r24	; 0x0a
    15c6:	ce 01       	movw	r24, r28
    15c8:	09 96       	adiw	r24, 0x09	; 9
    15ca:	bc c0       	rjmp	.+376    	; 0x1744 <__mulsf3+0x1e8>
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	51 f4       	brne	.+20     	; 0x15e4 <__mulsf3+0x88>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15d4:	9a 89       	ldd	r25, Y+18	; 0x12
    15d6:	29 17       	cp	r18, r25
    15d8:	09 f4       	brne	.+2      	; 0x15dc <__mulsf3+0x80>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	8a 8b       	std	Y+18, r24	; 0x12
    15de:	ce 01       	movw	r24, r28
    15e0:	41 96       	adiw	r24, 0x11	; 17
    15e2:	b0 c0       	rjmp	.+352    	; 0x1744 <__mulsf3+0x1e8>
    15e4:	6d 84       	ldd	r6, Y+13	; 0x0d
    15e6:	7e 84       	ldd	r7, Y+14	; 0x0e
    15e8:	8f 84       	ldd	r8, Y+15	; 0x0f
    15ea:	98 88       	ldd	r9, Y+16	; 0x10
    15ec:	ed 88       	ldd	r14, Y+21	; 0x15
    15ee:	fe 88       	ldd	r15, Y+22	; 0x16
    15f0:	0f 89       	ldd	r16, Y+23	; 0x17
    15f2:	18 8d       	ldd	r17, Y+24	; 0x18
    15f4:	e0 e2       	ldi	r30, 0x20	; 32
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	dc 01       	movw	r26, r24
    15fe:	aa 24       	eor	r10, r10
    1600:	bb 24       	eor	r11, r11
    1602:	65 01       	movw	r12, r10
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	b3 01       	movw	r22, r6
    160c:	61 70       	andi	r22, 0x01	; 1
    160e:	70 70       	andi	r23, 0x00	; 0
    1610:	61 15       	cp	r22, r1
    1612:	71 05       	cpc	r23, r1
    1614:	d1 f0       	breq	.+52     	; 0x164a <__mulsf3+0xee>
    1616:	2e 0d       	add	r18, r14
    1618:	3f 1d       	adc	r19, r15
    161a:	40 1f       	adc	r20, r16
    161c:	51 1f       	adc	r21, r17
    161e:	15 01       	movw	r2, r10
    1620:	26 01       	movw	r4, r12
    1622:	28 0e       	add	r2, r24
    1624:	39 1e       	adc	r3, r25
    1626:	4a 1e       	adc	r4, r26
    1628:	5b 1e       	adc	r5, r27
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	2e 15       	cp	r18, r14
    1634:	3f 05       	cpc	r19, r15
    1636:	40 07       	cpc	r20, r16
    1638:	51 07       	cpc	r21, r17
    163a:	18 f0       	brcs	.+6      	; 0x1642 <__mulsf3+0xe6>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	dc 01       	movw	r26, r24
    1642:	82 0d       	add	r24, r2
    1644:	93 1d       	adc	r25, r3
    1646:	a4 1d       	adc	r26, r4
    1648:	b5 1d       	adc	r27, r5
    164a:	aa 0c       	add	r10, r10
    164c:	bb 1c       	adc	r11, r11
    164e:	cc 1c       	adc	r12, r12
    1650:	dd 1c       	adc	r13, r13
    1652:	17 ff       	sbrs	r17, 7
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <__mulsf3+0x10c>
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	26 2e       	mov	r2, r22
    165a:	31 2c       	mov	r3, r1
    165c:	41 2c       	mov	r4, r1
    165e:	51 2c       	mov	r5, r1
    1660:	a2 28       	or	r10, r2
    1662:	b3 28       	or	r11, r3
    1664:	c4 28       	or	r12, r4
    1666:	d5 28       	or	r13, r5
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	49 f0       	breq	.+18     	; 0x167e <__mulsf3+0x122>
    166c:	ee 0c       	add	r14, r14
    166e:	ff 1c       	adc	r15, r15
    1670:	00 1f       	adc	r16, r16
    1672:	11 1f       	adc	r17, r17
    1674:	96 94       	lsr	r9
    1676:	87 94       	ror	r8
    1678:	77 94       	ror	r7
    167a:	67 94       	ror	r6
    167c:	c6 cf       	rjmp	.-116    	; 0x160a <__mulsf3+0xae>
    167e:	6b 89       	ldd	r22, Y+19	; 0x13
    1680:	7c 89       	ldd	r23, Y+20	; 0x14
    1682:	eb 85       	ldd	r30, Y+11	; 0x0b
    1684:	fc 85       	ldd	r31, Y+12	; 0x0c
    1686:	6e 0f       	add	r22, r30
    1688:	7f 1f       	adc	r23, r31
    168a:	6e 5f       	subi	r22, 0xFE	; 254
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	6b 8f       	std	Y+27, r22	; 0x1b
    1690:	7c 8f       	std	Y+28, r23	; 0x1c
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	ea 85       	ldd	r30, Y+10	; 0x0a
    1696:	7a 89       	ldd	r23, Y+18	; 0x12
    1698:	e7 17       	cp	r30, r23
    169a:	09 f4       	brne	.+2      	; 0x169e <__mulsf3+0x142>
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	6a 8f       	std	Y+26, r22	; 0x1a
    16a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    16a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    16a4:	10 c0       	rjmp	.+32     	; 0x16c6 <__mulsf3+0x16a>
    16a6:	fc 01       	movw	r30, r24
    16a8:	e1 70       	andi	r30, 0x01	; 1
    16aa:	f0 70       	andi	r31, 0x00	; 0
    16ac:	30 97       	sbiw	r30, 0x00	; 0
    16ae:	29 f0       	breq	.+10     	; 0x16ba <__mulsf3+0x15e>
    16b0:	56 95       	lsr	r21
    16b2:	47 95       	ror	r20
    16b4:	37 95       	ror	r19
    16b6:	27 95       	ror	r18
    16b8:	50 68       	ori	r21, 0x80	; 128
    16ba:	b6 95       	lsr	r27
    16bc:	a7 95       	ror	r26
    16be:	97 95       	ror	r25
    16c0:	87 95       	ror	r24
    16c2:	6f 5f       	subi	r22, 0xFF	; 255
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	b7 fd       	sbrc	r27, 7
    16c8:	ee cf       	rjmp	.-36     	; 0x16a6 <__mulsf3+0x14a>
    16ca:	0c c0       	rjmp	.+24     	; 0x16e4 <__mulsf3+0x188>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	aa 1f       	adc	r26, r26
    16d2:	bb 1f       	adc	r27, r27
    16d4:	57 fd       	sbrc	r21, 7
    16d6:	81 60       	ori	r24, 0x01	; 1
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	44 1f       	adc	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	61 50       	subi	r22, 0x01	; 1
    16e2:	70 40       	sbci	r23, 0x00	; 0
    16e4:	80 30       	cpi	r24, 0x00	; 0
    16e6:	e0 e0       	ldi	r30, 0x00	; 0
    16e8:	9e 07       	cpc	r25, r30
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	ae 07       	cpc	r26, r30
    16ee:	e0 e4       	ldi	r30, 0x40	; 64
    16f0:	be 07       	cpc	r27, r30
    16f2:	60 f3       	brcs	.-40     	; 0x16cc <__mulsf3+0x170>
    16f4:	6b 8f       	std	Y+27, r22	; 0x1b
    16f6:	7c 8f       	std	Y+28, r23	; 0x1c
    16f8:	6f e7       	ldi	r22, 0x7F	; 127
    16fa:	e6 2e       	mov	r14, r22
    16fc:	f1 2c       	mov	r15, r1
    16fe:	01 2d       	mov	r16, r1
    1700:	11 2d       	mov	r17, r1
    1702:	e8 22       	and	r14, r24
    1704:	f9 22       	and	r15, r25
    1706:	0a 23       	and	r16, r26
    1708:	1b 23       	and	r17, r27
    170a:	60 e4       	ldi	r22, 0x40	; 64
    170c:	e6 16       	cp	r14, r22
    170e:	f1 04       	cpc	r15, r1
    1710:	01 05       	cpc	r16, r1
    1712:	11 05       	cpc	r17, r1
    1714:	61 f4       	brne	.+24     	; 0x172e <__mulsf3+0x1d2>
    1716:	87 fd       	sbrc	r24, 7
    1718:	0a c0       	rjmp	.+20     	; 0x172e <__mulsf3+0x1d2>
    171a:	21 15       	cp	r18, r1
    171c:	31 05       	cpc	r19, r1
    171e:	41 05       	cpc	r20, r1
    1720:	51 05       	cpc	r21, r1
    1722:	29 f0       	breq	.+10     	; 0x172e <__mulsf3+0x1d2>
    1724:	80 5c       	subi	r24, 0xC0	; 192
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	af 4f       	sbci	r26, 0xFF	; 255
    172a:	bf 4f       	sbci	r27, 0xFF	; 255
    172c:	80 78       	andi	r24, 0x80	; 128
    172e:	8d 8f       	std	Y+29, r24	; 0x1d
    1730:	9e 8f       	std	Y+30, r25	; 0x1e
    1732:	af 8f       	std	Y+31, r26	; 0x1f
    1734:	b8 a3       	std	Y+32, r27	; 0x20
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	89 8f       	std	Y+25, r24	; 0x19
    173a:	ce 01       	movw	r24, r28
    173c:	49 96       	adiw	r24, 0x19	; 25
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <__mulsf3+0x1e8>
    1740:	8f e0       	ldi	r24, 0x0F	; 15
    1742:	90 e2       	ldi	r25, 0x20	; 32
    1744:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__pack_f>
    1748:	a0 96       	adiw	r28, 0x20	; 32
    174a:	e2 e1       	ldi	r30, 0x12	; 18
    174c:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__epilogue_restores__>

00001750 <__divsf3>:
    1750:	a8 e1       	ldi	r26, 0x18	; 24
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ee ea       	ldi	r30, 0xAE	; 174
    1756:	fb e0       	ldi	r31, 0x0B	; 11
    1758:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__prologue_saves__+0x10>
    175c:	69 83       	std	Y+1, r22	; 0x01
    175e:	7a 83       	std	Y+2, r23	; 0x02
    1760:	8b 83       	std	Y+3, r24	; 0x03
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	2d 83       	std	Y+5, r18	; 0x05
    1766:	3e 83       	std	Y+6, r19	; 0x06
    1768:	4f 83       	std	Y+7, r20	; 0x07
    176a:	58 87       	std	Y+8, r21	; 0x08
    176c:	8e 01       	movw	r16, r28
    176e:	07 5f       	subi	r16, 0xF7	; 247
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	b8 01       	movw	r22, r16
    1778:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    177c:	81 e1       	ldi	r24, 0x11	; 17
    177e:	e8 2e       	mov	r14, r24
    1780:	f1 2c       	mov	r15, r1
    1782:	ec 0e       	add	r14, r28
    1784:	fd 1e       	adc	r15, r29
    1786:	ce 01       	movw	r24, r28
    1788:	05 96       	adiw	r24, 0x05	; 5
    178a:	b7 01       	movw	r22, r14
    178c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    1790:	99 85       	ldd	r25, Y+9	; 0x09
    1792:	92 30       	cpi	r25, 0x02	; 2
    1794:	08 f4       	brcc	.+2      	; 0x1798 <__divsf3+0x48>
    1796:	83 c0       	rjmp	.+262    	; 0x189e <__divsf3+0x14e>
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <__divsf3+0x50>
    179e:	7b c0       	rjmp	.+246    	; 0x1896 <__divsf3+0x146>
    17a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17a2:	3a 89       	ldd	r19, Y+18	; 0x12
    17a4:	23 27       	eor	r18, r19
    17a6:	2a 87       	std	Y+10, r18	; 0x0a
    17a8:	94 30       	cpi	r25, 0x04	; 4
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <__divsf3+0x60>
    17ac:	92 30       	cpi	r25, 0x02	; 2
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <__divsf3+0x68>
    17b0:	98 17       	cp	r25, r24
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <__divsf3+0x66>
    17b4:	6c c0       	rjmp	.+216    	; 0x188e <__divsf3+0x13e>
    17b6:	71 c0       	rjmp	.+226    	; 0x189a <__divsf3+0x14a>
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	39 f4       	brne	.+14     	; 0x17ca <__divsf3+0x7a>
    17bc:	1d 86       	std	Y+13, r1	; 0x0d
    17be:	1e 86       	std	Y+14, r1	; 0x0e
    17c0:	1f 86       	std	Y+15, r1	; 0x0f
    17c2:	18 8a       	std	Y+16, r1	; 0x10
    17c4:	1b 86       	std	Y+11, r1	; 0x0b
    17c6:	1c 86       	std	Y+12, r1	; 0x0c
    17c8:	6a c0       	rjmp	.+212    	; 0x189e <__divsf3+0x14e>
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <__divsf3+0x84>
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	89 87       	std	Y+9, r24	; 0x09
    17d2:	65 c0       	rjmp	.+202    	; 0x189e <__divsf3+0x14e>
    17d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d8:	2b 89       	ldd	r18, Y+19	; 0x13
    17da:	3c 89       	ldd	r19, Y+20	; 0x14
    17dc:	82 1b       	sub	r24, r18
    17de:	93 0b       	sbc	r25, r19
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    17e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    17e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    17ea:	58 89       	ldd	r21, Y+16	; 0x10
    17ec:	ed 88       	ldd	r14, Y+21	; 0x15
    17ee:	fe 88       	ldd	r15, Y+22	; 0x16
    17f0:	0f 89       	ldd	r16, Y+23	; 0x17
    17f2:	18 8d       	ldd	r17, Y+24	; 0x18
    17f4:	2e 15       	cp	r18, r14
    17f6:	3f 05       	cpc	r19, r15
    17f8:	40 07       	cpc	r20, r16
    17fa:	51 07       	cpc	r21, r17
    17fc:	38 f4       	brcc	.+14     	; 0x180c <__divsf3+0xbc>
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	44 1f       	adc	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	8b 87       	std	Y+11, r24	; 0x0b
    180a:	9c 87       	std	Y+12, r25	; 0x0c
    180c:	6f e1       	ldi	r22, 0x1F	; 31
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	a1 2c       	mov	r10, r1
    1812:	b1 2c       	mov	r11, r1
    1814:	c1 2c       	mov	r12, r1
    1816:	a0 e4       	ldi	r26, 0x40	; 64
    1818:	da 2e       	mov	r13, r26
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	dc 01       	movw	r26, r24
    1820:	2e 15       	cp	r18, r14
    1822:	3f 05       	cpc	r19, r15
    1824:	40 07       	cpc	r20, r16
    1826:	51 07       	cpc	r21, r17
    1828:	40 f0       	brcs	.+16     	; 0x183a <__divsf3+0xea>
    182a:	8a 29       	or	r24, r10
    182c:	9b 29       	or	r25, r11
    182e:	ac 29       	or	r26, r12
    1830:	bd 29       	or	r27, r13
    1832:	2e 19       	sub	r18, r14
    1834:	3f 09       	sbc	r19, r15
    1836:	40 0b       	sbc	r20, r16
    1838:	51 0b       	sbc	r21, r17
    183a:	d6 94       	lsr	r13
    183c:	c7 94       	ror	r12
    183e:	b7 94       	ror	r11
    1840:	a7 94       	ror	r10
    1842:	22 0f       	add	r18, r18
    1844:	33 1f       	adc	r19, r19
    1846:	44 1f       	adc	r20, r20
    1848:	55 1f       	adc	r21, r21
    184a:	61 50       	subi	r22, 0x01	; 1
    184c:	70 40       	sbci	r23, 0x00	; 0
    184e:	41 f7       	brne	.-48     	; 0x1820 <__divsf3+0xd0>
    1850:	6f e7       	ldi	r22, 0x7F	; 127
    1852:	e6 2e       	mov	r14, r22
    1854:	f1 2c       	mov	r15, r1
    1856:	01 2d       	mov	r16, r1
    1858:	11 2d       	mov	r17, r1
    185a:	e8 22       	and	r14, r24
    185c:	f9 22       	and	r15, r25
    185e:	0a 23       	and	r16, r26
    1860:	1b 23       	and	r17, r27
    1862:	60 e4       	ldi	r22, 0x40	; 64
    1864:	e6 16       	cp	r14, r22
    1866:	f1 04       	cpc	r15, r1
    1868:	01 05       	cpc	r16, r1
    186a:	11 05       	cpc	r17, r1
    186c:	61 f4       	brne	.+24     	; 0x1886 <__divsf3+0x136>
    186e:	87 fd       	sbrc	r24, 7
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <__divsf3+0x136>
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	41 05       	cpc	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	29 f0       	breq	.+10     	; 0x1886 <__divsf3+0x136>
    187c:	80 5c       	subi	r24, 0xC0	; 192
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	af 4f       	sbci	r26, 0xFF	; 255
    1882:	bf 4f       	sbci	r27, 0xFF	; 255
    1884:	80 78       	andi	r24, 0x80	; 128
    1886:	8d 87       	std	Y+13, r24	; 0x0d
    1888:	9e 87       	std	Y+14, r25	; 0x0e
    188a:	af 87       	std	Y+15, r26	; 0x0f
    188c:	b8 8b       	std	Y+16, r27	; 0x10
    188e:	8e 01       	movw	r16, r28
    1890:	07 5f       	subi	r16, 0xF7	; 247
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	04 c0       	rjmp	.+8      	; 0x189e <__divsf3+0x14e>
    1896:	87 01       	movw	r16, r14
    1898:	02 c0       	rjmp	.+4      	; 0x189e <__divsf3+0x14e>
    189a:	0f e0       	ldi	r16, 0x0F	; 15
    189c:	10 e2       	ldi	r17, 0x20	; 32
    189e:	c8 01       	movw	r24, r16
    18a0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__pack_f>
    18a4:	68 96       	adiw	r28, 0x18	; 24
    18a6:	ea e0       	ldi	r30, 0x0A	; 10
    18a8:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__epilogue_restores__+0x10>

000018ac <__gesf2>:
    18ac:	a8 e1       	ldi	r26, 0x18	; 24
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ec e5       	ldi	r30, 0x5C	; 92
    18b2:	fc e0       	ldi	r31, 0x0C	; 12
    18b4:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    18b8:	69 83       	std	Y+1, r22	; 0x01
    18ba:	7a 83       	std	Y+2, r23	; 0x02
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	2d 83       	std	Y+5, r18	; 0x05
    18c2:	3e 83       	std	Y+6, r19	; 0x06
    18c4:	4f 83       	std	Y+7, r20	; 0x07
    18c6:	58 87       	std	Y+8, r21	; 0x08
    18c8:	8e 01       	movw	r16, r28
    18ca:	07 5f       	subi	r16, 0xF7	; 247
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	ce 01       	movw	r24, r28
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	b8 01       	movw	r22, r16
    18d4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    18d8:	81 e1       	ldi	r24, 0x11	; 17
    18da:	e8 2e       	mov	r14, r24
    18dc:	f1 2c       	mov	r15, r1
    18de:	ec 0e       	add	r14, r28
    18e0:	fd 1e       	adc	r15, r29
    18e2:	ce 01       	movw	r24, r28
    18e4:	05 96       	adiw	r24, 0x05	; 5
    18e6:	b7 01       	movw	r22, r14
    18e8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	40 f0       	brcs	.+16     	; 0x1902 <__gesf2+0x56>
    18f2:	89 89       	ldd	r24, Y+17	; 0x11
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	28 f0       	brcs	.+10     	; 0x1902 <__gesf2+0x56>
    18f8:	c8 01       	movw	r24, r16
    18fa:	b7 01       	movw	r22, r14
    18fc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fpcmp_parts_f>
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <__gesf2+0x58>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	68 96       	adiw	r28, 0x18	; 24
    1906:	e6 e0       	ldi	r30, 0x06	; 6
    1908:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

0000190c <__fixsfsi>:
    190c:	ac e0       	ldi	r26, 0x0C	; 12
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ec e8       	ldi	r30, 0x8C	; 140
    1912:	fc e0       	ldi	r31, 0x0C	; 12
    1914:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x20>
    1918:	69 83       	std	Y+1, r22	; 0x01
    191a:	7a 83       	std	Y+2, r23	; 0x02
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	be 01       	movw	r22, r28
    1926:	6b 5f       	subi	r22, 0xFB	; 251
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__unpack_f>
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	81 f1       	breq	.+96     	; 0x1994 <__fixsfsi+0x88>
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	70 f1       	brcs	.+92     	; 0x1994 <__fixsfsi+0x88>
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	21 f4       	brne	.+8      	; 0x1944 <__fixsfsi+0x38>
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	88 23       	and	r24, r24
    1940:	69 f1       	breq	.+90     	; 0x199c <__fixsfsi+0x90>
    1942:	0a c0       	rjmp	.+20     	; 0x1958 <__fixsfsi+0x4c>
    1944:	2f 81       	ldd	r18, Y+7	; 0x07
    1946:	38 85       	ldd	r19, Y+8	; 0x08
    1948:	37 fd       	sbrc	r19, 7
    194a:	24 c0       	rjmp	.+72     	; 0x1994 <__fixsfsi+0x88>
    194c:	6e 81       	ldd	r22, Y+6	; 0x06
    194e:	2f 31       	cpi	r18, 0x1F	; 31
    1950:	31 05       	cpc	r19, r1
    1952:	3c f0       	brlt	.+14     	; 0x1962 <__fixsfsi+0x56>
    1954:	66 23       	and	r22, r22
    1956:	11 f1       	breq	.+68     	; 0x199c <__fixsfsi+0x90>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e8       	ldi	r21, 0x80	; 128
    1960:	21 c0       	rjmp	.+66     	; 0x19a4 <__fixsfsi+0x98>
    1962:	8e e1       	ldi	r24, 0x1E	; 30
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	82 1b       	sub	r24, r18
    1968:	93 0b       	sbc	r25, r19
    196a:	29 85       	ldd	r18, Y+9	; 0x09
    196c:	3a 85       	ldd	r19, Y+10	; 0x0a
    196e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1970:	5c 85       	ldd	r21, Y+12	; 0x0c
    1972:	04 c0       	rjmp	.+8      	; 0x197c <__fixsfsi+0x70>
    1974:	56 95       	lsr	r21
    1976:	47 95       	ror	r20
    1978:	37 95       	ror	r19
    197a:	27 95       	ror	r18
    197c:	8a 95       	dec	r24
    197e:	d2 f7       	brpl	.-12     	; 0x1974 <__fixsfsi+0x68>
    1980:	66 23       	and	r22, r22
    1982:	81 f0       	breq	.+32     	; 0x19a4 <__fixsfsi+0x98>
    1984:	50 95       	com	r21
    1986:	40 95       	com	r20
    1988:	30 95       	com	r19
    198a:	21 95       	neg	r18
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	4f 4f       	sbci	r20, 0xFF	; 255
    1990:	5f 4f       	sbci	r21, 0xFF	; 255
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <__fixsfsi+0x98>
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	a9 01       	movw	r20, r18
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <__fixsfsi+0x98>
    199c:	2f ef       	ldi	r18, 0xFF	; 255
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f ef       	ldi	r20, 0xFF	; 255
    19a2:	5f e7       	ldi	r21, 0x7F	; 127
    19a4:	b9 01       	movw	r22, r18
    19a6:	ca 01       	movw	r24, r20
    19a8:	2c 96       	adiw	r28, 0x0c	; 12
    19aa:	e2 e0       	ldi	r30, 0x02	; 2
    19ac:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__epilogue_restores__+0x20>

000019b0 <__floatunsisf>:
    19b0:	a8 e0       	ldi	r26, 0x08	; 8
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__+0x14>
    19bc:	7b 01       	movw	r14, r22
    19be:	8c 01       	movw	r16, r24
    19c0:	1a 82       	std	Y+2, r1	; 0x02
    19c2:	61 15       	cp	r22, r1
    19c4:	71 05       	cpc	r23, r1
    19c6:	81 05       	cpc	r24, r1
    19c8:	91 05       	cpc	r25, r1
    19ca:	19 f4       	brne	.+6      	; 0x19d2 <__floatunsisf+0x22>
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	5f c0       	rjmp	.+190    	; 0x1a90 <__floatunsisf+0xe0>
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	8e e1       	ldi	r24, 0x1E	; 30
    19d8:	c8 2e       	mov	r12, r24
    19da:	d1 2c       	mov	r13, r1
    19dc:	cb 82       	std	Y+3, r12	; 0x03
    19de:	dc 82       	std	Y+4, r13	; 0x04
    19e0:	ed 82       	std	Y+5, r14	; 0x05
    19e2:	fe 82       	std	Y+6, r15	; 0x06
    19e4:	0f 83       	std	Y+7, r16	; 0x07
    19e6:	18 87       	std	Y+8, r17	; 0x08
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__clzsi2>
    19f0:	fc 01       	movw	r30, r24
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	f7 ff       	sbrs	r31, 7
    19f6:	3a c0       	rjmp	.+116    	; 0x1a6c <__floatunsisf+0xbc>
    19f8:	aa 27       	eor	r26, r26
    19fa:	bb 27       	eor	r27, r27
    19fc:	ae 1b       	sub	r26, r30
    19fe:	bf 0b       	sbc	r27, r31
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0a 2e       	mov	r0, r26
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <__floatunsisf+0x64>
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	44 1f       	adc	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	0a 94       	dec	r0
    1a16:	d2 f7       	brpl	.-12     	; 0x1a0c <__floatunsisf+0x5c>
    1a18:	21 50       	subi	r18, 0x01	; 1
    1a1a:	30 40       	sbci	r19, 0x00	; 0
    1a1c:	40 40       	sbci	r20, 0x00	; 0
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	2e 21       	and	r18, r14
    1a22:	3f 21       	and	r19, r15
    1a24:	40 23       	and	r20, r16
    1a26:	51 23       	and	r21, r17
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	21 15       	cp	r18, r1
    1a32:	31 05       	cpc	r19, r1
    1a34:	41 05       	cpc	r20, r1
    1a36:	51 05       	cpc	r21, r1
    1a38:	19 f4       	brne	.+6      	; 0x1a40 <__floatunsisf+0x90>
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	cb 01       	movw	r24, r22
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <__floatunsisf+0x9a>
    1a42:	16 95       	lsr	r17
    1a44:	07 95       	ror	r16
    1a46:	f7 94       	ror	r15
    1a48:	e7 94       	ror	r14
    1a4a:	aa 95       	dec	r26
    1a4c:	d2 f7       	brpl	.-12     	; 0x1a42 <__floatunsisf+0x92>
    1a4e:	e6 2a       	or	r14, r22
    1a50:	f7 2a       	or	r15, r23
    1a52:	08 2b       	or	r16, r24
    1a54:	19 2b       	or	r17, r25
    1a56:	ed 82       	std	Y+5, r14	; 0x05
    1a58:	fe 82       	std	Y+6, r15	; 0x06
    1a5a:	0f 83       	std	Y+7, r16	; 0x07
    1a5c:	18 87       	std	Y+8, r17	; 0x08
    1a5e:	8e e1       	ldi	r24, 0x1E	; 30
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	8e 1b       	sub	r24, r30
    1a64:	9f 0b       	sbc	r25, r31
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <__floatunsisf+0xe0>
    1a6c:	30 97       	sbiw	r30, 0x00	; 0
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <__floatunsisf+0xe0>
    1a70:	0e 2e       	mov	r0, r30
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <__floatunsisf+0xcc>
    1a74:	ee 0c       	add	r14, r14
    1a76:	ff 1c       	adc	r15, r15
    1a78:	00 1f       	adc	r16, r16
    1a7a:	11 1f       	adc	r17, r17
    1a7c:	0a 94       	dec	r0
    1a7e:	d2 f7       	brpl	.-12     	; 0x1a74 <__floatunsisf+0xc4>
    1a80:	ed 82       	std	Y+5, r14	; 0x05
    1a82:	fe 82       	std	Y+6, r15	; 0x06
    1a84:	0f 83       	std	Y+7, r16	; 0x07
    1a86:	18 87       	std	Y+8, r17	; 0x08
    1a88:	ce 1a       	sub	r12, r30
    1a8a:	df 0a       	sbc	r13, r31
    1a8c:	cb 82       	std	Y+3, r12	; 0x03
    1a8e:	dc 82       	std	Y+4, r13	; 0x04
    1a90:	ce 01       	movw	r24, r28
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__pack_f>
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	e8 e0       	ldi	r30, 0x08	; 8
    1a9c:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x14>

00001aa0 <__clzsi2>:
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	7b 01       	movw	r14, r22
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	e8 16       	cp	r14, r24
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	f8 06       	cpc	r15, r24
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	08 07       	cpc	r16, r24
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	18 07       	cpc	r17, r24
    1ac4:	58 f4       	brcc	.+22     	; 0x1adc <__clzsi2+0x3c>
    1ac6:	ef ef       	ldi	r30, 0xFF	; 255
    1ac8:	ee 16       	cp	r14, r30
    1aca:	f1 04       	cpc	r15, r1
    1acc:	01 05       	cpc	r16, r1
    1ace:	11 05       	cpc	r17, r1
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <__clzsi2+0x34>
    1ad2:	90 f4       	brcc	.+36     	; 0x1af8 <__clzsi2+0x58>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	dc 01       	movw	r26, r24
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <__clzsi2+0x6a>
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ef 16       	cp	r14, r31
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	ff 06       	cpc	r15, r31
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	0f 07       	cpc	r16, r31
    1ae8:	f1 e0       	ldi	r31, 0x01	; 1
    1aea:	1f 07       	cpc	r17, r31
    1aec:	50 f4       	brcc	.+20     	; 0x1b02 <__clzsi2+0x62>
    1aee:	80 e1       	ldi	r24, 0x10	; 16
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <__clzsi2+0x6a>
    1af8:	88 e0       	ldi	r24, 0x08	; 8
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e0       	ldi	r26, 0x00	; 0
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <__clzsi2+0x6a>
    1b02:	88 e1       	ldi	r24, 0x18	; 24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	20 e2       	ldi	r18, 0x20	; 32
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	28 1b       	sub	r18, r24
    1b14:	39 0b       	sbc	r19, r25
    1b16:	4a 0b       	sbc	r20, r26
    1b18:	5b 0b       	sbc	r21, r27
    1b1a:	57 01       	movw	r10, r14
    1b1c:	68 01       	movw	r12, r16
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__clzsi2+0x88>
    1b20:	d6 94       	lsr	r13
    1b22:	c7 94       	ror	r12
    1b24:	b7 94       	ror	r11
    1b26:	a7 94       	ror	r10
    1b28:	8a 95       	dec	r24
    1b2a:	d2 f7       	brpl	.-12     	; 0x1b20 <__clzsi2+0x80>
    1b2c:	d6 01       	movw	r26, r12
    1b2e:	c5 01       	movw	r24, r10
    1b30:	89 5e       	subi	r24, 0xE9	; 233
    1b32:	9f 4d       	sbci	r25, 0xDF	; 223
    1b34:	fc 01       	movw	r30, r24
    1b36:	80 81       	ld	r24, Z
    1b38:	28 1b       	sub	r18, r24
    1b3a:	31 09       	sbc	r19, r1
    1b3c:	41 09       	sbc	r20, r1
    1b3e:	51 09       	sbc	r21, r1
    1b40:	c9 01       	movw	r24, r18
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	08 95       	ret

00001b54 <__pack_f>:
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	fc 01       	movw	r30, r24
    1b62:	24 81       	ldd	r18, Z+4	; 0x04
    1b64:	35 81       	ldd	r19, Z+5	; 0x05
    1b66:	46 81       	ldd	r20, Z+6	; 0x06
    1b68:	57 81       	ldd	r21, Z+7	; 0x07
    1b6a:	61 81       	ldd	r22, Z+1	; 0x01
    1b6c:	80 81       	ld	r24, Z
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	20 f4       	brcc	.+8      	; 0x1b7a <__pack_f+0x26>
    1b72:	40 61       	ori	r20, 0x10	; 16
    1b74:	ef ef       	ldi	r30, 0xFF	; 255
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	a3 c0       	rjmp	.+326    	; 0x1cc0 <__pack_f+0x16c>
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__pack_f+0x2c>
    1b7e:	9b c0       	rjmp	.+310    	; 0x1cb6 <__pack_f+0x162>
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <__pack_f+0x32>
    1b84:	92 c0       	rjmp	.+292    	; 0x1caa <__pack_f+0x156>
    1b86:	21 15       	cp	r18, r1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	41 05       	cpc	r20, r1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <__pack_f+0x3e>
    1b90:	8f c0       	rjmp	.+286    	; 0x1cb0 <__pack_f+0x15c>
    1b92:	02 80       	ldd	r0, Z+2	; 0x02
    1b94:	f3 81       	ldd	r31, Z+3	; 0x03
    1b96:	e0 2d       	mov	r30, r0
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	e2 38       	cpi	r30, 0x82	; 130
    1b9c:	f8 07       	cpc	r31, r24
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <__pack_f+0x4e>
    1ba0:	5a c0       	rjmp	.+180    	; 0x1c56 <__pack_f+0x102>
    1ba2:	c2 e8       	ldi	r28, 0x82	; 130
    1ba4:	df ef       	ldi	r29, 0xFF	; 255
    1ba6:	ce 1b       	sub	r28, r30
    1ba8:	df 0b       	sbc	r29, r31
    1baa:	ca 31       	cpi	r28, 0x1A	; 26
    1bac:	d1 05       	cpc	r29, r1
    1bae:	6c f5       	brge	.+90     	; 0x1c0a <__pack_f+0xb6>
    1bb0:	79 01       	movw	r14, r18
    1bb2:	8a 01       	movw	r16, r20
    1bb4:	0c 2e       	mov	r0, r28
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <__pack_f+0x6c>
    1bb8:	16 95       	lsr	r17
    1bba:	07 95       	ror	r16
    1bbc:	f7 94       	ror	r15
    1bbe:	e7 94       	ror	r14
    1bc0:	0a 94       	dec	r0
    1bc2:	d2 f7       	brpl	.-12     	; 0x1bb8 <__pack_f+0x64>
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	0c 2e       	mov	r0, r28
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <__pack_f+0x84>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	aa 1f       	adc	r26, r26
    1bd6:	bb 1f       	adc	r27, r27
    1bd8:	0a 94       	dec	r0
    1bda:	d2 f7       	brpl	.-12     	; 0x1bd0 <__pack_f+0x7c>
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	a1 09       	sbc	r26, r1
    1be0:	b1 09       	sbc	r27, r1
    1be2:	82 23       	and	r24, r18
    1be4:	93 23       	and	r25, r19
    1be6:	a4 23       	and	r26, r20
    1be8:	b5 23       	and	r27, r21
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	a1 05       	cpc	r26, r1
    1bf6:	b1 05       	cpc	r27, r1
    1bf8:	19 f4       	brne	.+6      	; 0x1c00 <__pack_f+0xac>
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	a9 01       	movw	r20, r18
    1c00:	2e 29       	or	r18, r14
    1c02:	3f 29       	or	r19, r15
    1c04:	40 2b       	or	r20, r16
    1c06:	51 2b       	or	r21, r17
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <__pack_f+0xbc>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	da 01       	movw	r26, r20
    1c12:	c9 01       	movw	r24, r18
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	90 70       	andi	r25, 0x00	; 0
    1c18:	a0 70       	andi	r26, 0x00	; 0
    1c1a:	b0 70       	andi	r27, 0x00	; 0
    1c1c:	80 34       	cpi	r24, 0x40	; 64
    1c1e:	91 05       	cpc	r25, r1
    1c20:	a1 05       	cpc	r26, r1
    1c22:	b1 05       	cpc	r27, r1
    1c24:	39 f4       	brne	.+14     	; 0x1c34 <__pack_f+0xe0>
    1c26:	27 ff       	sbrs	r18, 7
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <__pack_f+0xe8>
    1c2a:	20 5c       	subi	r18, 0xC0	; 192
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <__pack_f+0xe8>
    1c34:	21 5c       	subi	r18, 0xC1	; 193
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	4f 4f       	sbci	r20, 0xFF	; 255
    1c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3c:	e1 e0       	ldi	r30, 0x01	; 1
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	20 30       	cpi	r18, 0x00	; 0
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	38 07       	cpc	r19, r24
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	48 07       	cpc	r20, r24
    1c4a:	80 e4       	ldi	r24, 0x40	; 64
    1c4c:	58 07       	cpc	r21, r24
    1c4e:	28 f5       	brcc	.+74     	; 0x1c9a <__pack_f+0x146>
    1c50:	e0 e0       	ldi	r30, 0x00	; 0
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	22 c0       	rjmp	.+68     	; 0x1c9a <__pack_f+0x146>
    1c56:	e0 38       	cpi	r30, 0x80	; 128
    1c58:	f1 05       	cpc	r31, r1
    1c5a:	6c f5       	brge	.+90     	; 0x1cb6 <__pack_f+0x162>
    1c5c:	e1 58       	subi	r30, 0x81	; 129
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	da 01       	movw	r26, r20
    1c62:	c9 01       	movw	r24, r18
    1c64:	8f 77       	andi	r24, 0x7F	; 127
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	a0 70       	andi	r26, 0x00	; 0
    1c6a:	b0 70       	andi	r27, 0x00	; 0
    1c6c:	80 34       	cpi	r24, 0x40	; 64
    1c6e:	91 05       	cpc	r25, r1
    1c70:	a1 05       	cpc	r26, r1
    1c72:	b1 05       	cpc	r27, r1
    1c74:	39 f4       	brne	.+14     	; 0x1c84 <__pack_f+0x130>
    1c76:	27 ff       	sbrs	r18, 7
    1c78:	09 c0       	rjmp	.+18     	; 0x1c8c <__pack_f+0x138>
    1c7a:	20 5c       	subi	r18, 0xC0	; 192
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c80:	5f 4f       	sbci	r21, 0xFF	; 255
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__pack_f+0x138>
    1c84:	21 5c       	subi	r18, 0xC1	; 193
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	4f 4f       	sbci	r20, 0xFF	; 255
    1c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8c:	57 ff       	sbrs	r21, 7
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <__pack_f+0x146>
    1c90:	56 95       	lsr	r21
    1c92:	47 95       	ror	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
    1c98:	31 96       	adiw	r30, 0x01	; 1
    1c9a:	87 e0       	ldi	r24, 0x07	; 7
    1c9c:	56 95       	lsr	r21
    1c9e:	47 95       	ror	r20
    1ca0:	37 95       	ror	r19
    1ca2:	27 95       	ror	r18
    1ca4:	8a 95       	dec	r24
    1ca6:	d1 f7       	brne	.-12     	; 0x1c9c <__pack_f+0x148>
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <__pack_f+0x16c>
    1caa:	e0 e0       	ldi	r30, 0x00	; 0
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <__pack_f+0x166>
    1cb0:	e0 e0       	ldi	r30, 0x00	; 0
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <__pack_f+0x16c>
    1cb6:	ef ef       	ldi	r30, 0xFF	; 255
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	8e 2f       	mov	r24, r30
    1cc2:	87 95       	ror	r24
    1cc4:	88 27       	eor	r24, r24
    1cc6:	87 95       	ror	r24
    1cc8:	94 2f       	mov	r25, r20
    1cca:	9f 77       	andi	r25, 0x7F	; 127
    1ccc:	67 95       	ror	r22
    1cce:	66 27       	eor	r22, r22
    1cd0:	67 95       	ror	r22
    1cd2:	e6 95       	lsr	r30
    1cd4:	e2 2e       	mov	r14, r18
    1cd6:	a9 2f       	mov	r26, r25
    1cd8:	a8 2b       	or	r26, r24
    1cda:	fe 2f       	mov	r31, r30
    1cdc:	f6 2b       	or	r31, r22
    1cde:	62 2f       	mov	r22, r18
    1ce0:	73 2f       	mov	r23, r19
    1ce2:	8a 2f       	mov	r24, r26
    1ce4:	9f 2f       	mov	r25, r31
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	e6 e0       	ldi	r30, 0x06	; 6
    1cec:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__epilogue_restores__+0x18>

00001cf0 <__unpack_f>:
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	2c 91       	ld	r18, X
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	3c 91       	ld	r19, X
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	12 96       	adiw	r26, 0x02	; 2
    1cfe:	8c 91       	ld	r24, X
    1d00:	12 97       	sbiw	r26, 0x02	; 2
    1d02:	48 2f       	mov	r20, r24
    1d04:	4f 77       	andi	r20, 0x7F	; 127
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	98 2f       	mov	r25, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	99 27       	eor	r25, r25
    1d0e:	99 1f       	adc	r25, r25
    1d10:	13 96       	adiw	r26, 0x03	; 3
    1d12:	6c 91       	ld	r22, X
    1d14:	13 97       	sbiw	r26, 0x03	; 3
    1d16:	86 2f       	mov	r24, r22
    1d18:	88 0f       	add	r24, r24
    1d1a:	89 2b       	or	r24, r25
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	66 1f       	adc	r22, r22
    1d20:	66 27       	eor	r22, r22
    1d22:	66 1f       	adc	r22, r22
    1d24:	61 83       	std	Z+1, r22	; 0x01
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	39 f5       	brne	.+78     	; 0x1d78 <__unpack_f+0x88>
    1d2a:	21 15       	cp	r18, r1
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	41 05       	cpc	r20, r1
    1d30:	51 05       	cpc	r21, r1
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <__unpack_f+0x48>
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	29 c0       	rjmp	.+82     	; 0x1d8a <__unpack_f+0x9a>
    1d38:	82 e8       	ldi	r24, 0x82	; 130
    1d3a:	9f ef       	ldi	r25, 0xFF	; 255
    1d3c:	82 83       	std	Z+2, r24	; 0x02
    1d3e:	93 83       	std	Z+3, r25	; 0x03
    1d40:	67 e0       	ldi	r22, 0x07	; 7
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	44 1f       	adc	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	6a 95       	dec	r22
    1d4c:	d1 f7       	brne	.-12     	; 0x1d42 <__unpack_f+0x52>
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	80 83       	st	Z, r24
    1d52:	09 c0       	rjmp	.+18     	; 0x1d66 <__unpack_f+0x76>
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	44 1f       	adc	r20, r20
    1d5a:	55 1f       	adc	r21, r21
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	82 83       	std	Z+2, r24	; 0x02
    1d64:	93 83       	std	Z+3, r25	; 0x03
    1d66:	20 30       	cpi	r18, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	38 07       	cpc	r19, r24
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	48 07       	cpc	r20, r24
    1d70:	80 e4       	ldi	r24, 0x40	; 64
    1d72:	58 07       	cpc	r21, r24
    1d74:	78 f3       	brcs	.-34     	; 0x1d54 <__unpack_f+0x64>
    1d76:	20 c0       	rjmp	.+64     	; 0x1db8 <__unpack_f+0xc8>
    1d78:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	79 f4       	brne	.+30     	; 0x1d9c <__unpack_f+0xac>
    1d7e:	21 15       	cp	r18, r1
    1d80:	31 05       	cpc	r19, r1
    1d82:	41 05       	cpc	r20, r1
    1d84:	51 05       	cpc	r21, r1
    1d86:	19 f4       	brne	.+6      	; 0x1d8e <__unpack_f+0x9e>
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	80 83       	st	Z, r24
    1d8c:	08 95       	ret
    1d8e:	44 ff       	sbrs	r20, 4
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <__unpack_f+0xa8>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 83       	st	Z, r24
    1d96:	10 c0       	rjmp	.+32     	; 0x1db8 <__unpack_f+0xc8>
    1d98:	10 82       	st	Z, r1
    1d9a:	0e c0       	rjmp	.+28     	; 0x1db8 <__unpack_f+0xc8>
    1d9c:	8f 57       	subi	r24, 0x7F	; 127
    1d9e:	90 40       	sbci	r25, 0x00	; 0
    1da0:	82 83       	std	Z+2, r24	; 0x02
    1da2:	93 83       	std	Z+3, r25	; 0x03
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	80 83       	st	Z, r24
    1da8:	87 e0       	ldi	r24, 0x07	; 7
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	44 1f       	adc	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	8a 95       	dec	r24
    1db4:	d1 f7       	brne	.-12     	; 0x1daa <__unpack_f+0xba>
    1db6:	50 64       	ori	r21, 0x40	; 64
    1db8:	24 83       	std	Z+4, r18	; 0x04
    1dba:	35 83       	std	Z+5, r19	; 0x05
    1dbc:	46 83       	std	Z+6, r20	; 0x06
    1dbe:	57 83       	std	Z+7, r21	; 0x07
    1dc0:	08 95       	ret

00001dc2 <__fpcmp_parts_f>:
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	db 01       	movw	r26, r22
    1dc6:	90 81       	ld	r25, Z
    1dc8:	92 30       	cpi	r25, 0x02	; 2
    1dca:	08 f4       	brcc	.+2      	; 0x1dce <__fpcmp_parts_f+0xc>
    1dcc:	49 c0       	rjmp	.+146    	; 0x1e60 <__fpcmp_parts_f+0x9e>
    1dce:	8c 91       	ld	r24, X
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	08 f4       	brcc	.+2      	; 0x1dd6 <__fpcmp_parts_f+0x14>
    1dd4:	45 c0       	rjmp	.+138    	; 0x1e60 <__fpcmp_parts_f+0x9e>
    1dd6:	94 30       	cpi	r25, 0x04	; 4
    1dd8:	51 f4       	brne	.+20     	; 0x1dee <__fpcmp_parts_f+0x2c>
    1dda:	61 81       	ldd	r22, Z+1	; 0x01
    1ddc:	84 30       	cpi	r24, 0x04	; 4
    1dde:	b1 f5       	brne	.+108    	; 0x1e4c <__fpcmp_parts_f+0x8a>
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	2c 91       	ld	r18, X
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	26 1b       	sub	r18, r22
    1dea:	31 09       	sbc	r19, r1
    1dec:	41 c0       	rjmp	.+130    	; 0x1e70 <__fpcmp_parts_f+0xae>
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	21 f0       	breq	.+8      	; 0x1dfa <__fpcmp_parts_f+0x38>
    1df2:	92 30       	cpi	r25, 0x02	; 2
    1df4:	41 f4       	brne	.+16     	; 0x1e06 <__fpcmp_parts_f+0x44>
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	b1 f1       	breq	.+108    	; 0x1e66 <__fpcmp_parts_f+0xa4>
    1dfa:	11 96       	adiw	r26, 0x01	; 1
    1dfc:	8c 91       	ld	r24, X
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	88 23       	and	r24, r24
    1e02:	a1 f1       	breq	.+104    	; 0x1e6c <__fpcmp_parts_f+0xaa>
    1e04:	2d c0       	rjmp	.+90     	; 0x1e60 <__fpcmp_parts_f+0x9e>
    1e06:	61 81       	ldd	r22, Z+1	; 0x01
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	01 f1       	breq	.+64     	; 0x1e4c <__fpcmp_parts_f+0x8a>
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	8c 91       	ld	r24, X
    1e10:	11 97       	sbiw	r26, 0x01	; 1
    1e12:	68 17       	cp	r22, r24
    1e14:	d9 f4       	brne	.+54     	; 0x1e4c <__fpcmp_parts_f+0x8a>
    1e16:	22 81       	ldd	r18, Z+2	; 0x02
    1e18:	33 81       	ldd	r19, Z+3	; 0x03
    1e1a:	12 96       	adiw	r26, 0x02	; 2
    1e1c:	8d 91       	ld	r24, X+
    1e1e:	9c 91       	ld	r25, X
    1e20:	13 97       	sbiw	r26, 0x03	; 3
    1e22:	82 17       	cp	r24, r18
    1e24:	93 07       	cpc	r25, r19
    1e26:	94 f0       	brlt	.+36     	; 0x1e4c <__fpcmp_parts_f+0x8a>
    1e28:	28 17       	cp	r18, r24
    1e2a:	39 07       	cpc	r19, r25
    1e2c:	bc f0       	brlt	.+46     	; 0x1e5c <__fpcmp_parts_f+0x9a>
    1e2e:	24 81       	ldd	r18, Z+4	; 0x04
    1e30:	35 81       	ldd	r19, Z+5	; 0x05
    1e32:	46 81       	ldd	r20, Z+6	; 0x06
    1e34:	57 81       	ldd	r21, Z+7	; 0x07
    1e36:	14 96       	adiw	r26, 0x04	; 4
    1e38:	8d 91       	ld	r24, X+
    1e3a:	9d 91       	ld	r25, X+
    1e3c:	0d 90       	ld	r0, X+
    1e3e:	bc 91       	ld	r27, X
    1e40:	a0 2d       	mov	r26, r0
    1e42:	82 17       	cp	r24, r18
    1e44:	93 07       	cpc	r25, r19
    1e46:	a4 07       	cpc	r26, r20
    1e48:	b5 07       	cpc	r27, r21
    1e4a:	18 f4       	brcc	.+6      	; 0x1e52 <__fpcmp_parts_f+0x90>
    1e4c:	66 23       	and	r22, r22
    1e4e:	41 f0       	breq	.+16     	; 0x1e60 <__fpcmp_parts_f+0x9e>
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <__fpcmp_parts_f+0xaa>
    1e52:	28 17       	cp	r18, r24
    1e54:	39 07       	cpc	r19, r25
    1e56:	4a 07       	cpc	r20, r26
    1e58:	5b 07       	cpc	r21, r27
    1e5a:	28 f4       	brcc	.+10     	; 0x1e66 <__fpcmp_parts_f+0xa4>
    1e5c:	66 23       	and	r22, r22
    1e5e:	31 f0       	breq	.+12     	; 0x1e6c <__fpcmp_parts_f+0xaa>
    1e60:	21 e0       	ldi	r18, 0x01	; 1
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <__fpcmp_parts_f+0xae>
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <__fpcmp_parts_f+0xae>
    1e6c:	2f ef       	ldi	r18, 0xFF	; 255
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	c9 01       	movw	r24, r18
    1e72:	08 95       	ret

00001e74 <__udivmodhi4>:
    1e74:	aa 1b       	sub	r26, r26
    1e76:	bb 1b       	sub	r27, r27
    1e78:	51 e1       	ldi	r21, 0x11	; 17
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <__udivmodhi4_ep>

00001e7c <__udivmodhi4_loop>:
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	a6 17       	cp	r26, r22
    1e82:	b7 07       	cpc	r27, r23
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__udivmodhi4_ep>
    1e86:	a6 1b       	sub	r26, r22
    1e88:	b7 0b       	sbc	r27, r23

00001e8a <__udivmodhi4_ep>:
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	5a 95       	dec	r21
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__udivmodhi4_loop>
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	08 95       	ret

00001e9c <__divmodhi4>:
    1e9c:	97 fb       	bst	r25, 7
    1e9e:	09 2e       	mov	r0, r25
    1ea0:	07 26       	eor	r0, r23
    1ea2:	0a d0       	rcall	.+20     	; 0x1eb8 <__divmodhi4_neg1>
    1ea4:	77 fd       	sbrc	r23, 7
    1ea6:	04 d0       	rcall	.+8      	; 0x1eb0 <__divmodhi4_neg2>
    1ea8:	e5 df       	rcall	.-54     	; 0x1e74 <__udivmodhi4>
    1eaa:	06 d0       	rcall	.+12     	; 0x1eb8 <__divmodhi4_neg1>
    1eac:	00 20       	and	r0, r0
    1eae:	1a f4       	brpl	.+6      	; 0x1eb6 <__divmodhi4_exit>

00001eb0 <__divmodhi4_neg2>:
    1eb0:	70 95       	com	r23
    1eb2:	61 95       	neg	r22
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255

00001eb6 <__divmodhi4_exit>:
    1eb6:	08 95       	ret

00001eb8 <__divmodhi4_neg1>:
    1eb8:	f6 f7       	brtc	.-4      	; 0x1eb6 <__divmodhi4_exit>
    1eba:	90 95       	com	r25
    1ebc:	81 95       	neg	r24
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	08 95       	ret

00001ec2 <__prologue_saves__>:
    1ec2:	2f 92       	push	r2
    1ec4:	3f 92       	push	r3
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	ca 1b       	sub	r28, r26
    1eec:	db 0b       	sbc	r29, r27
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	09 94       	ijmp

00001ef4 <__epilogue_restores__>:
    1ef4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef6:	39 88       	ldd	r3, Y+17	; 0x11
    1ef8:	48 88       	ldd	r4, Y+16	; 0x10
    1efa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1efc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1efe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f06:	b9 84       	ldd	r11, Y+9	; 0x09
    1f08:	c8 84       	ldd	r12, Y+8	; 0x08
    1f0a:	df 80       	ldd	r13, Y+7	; 0x07
    1f0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1f0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f10:	0c 81       	ldd	r16, Y+4	; 0x04
    1f12:	1b 81       	ldd	r17, Y+3	; 0x03
    1f14:	aa 81       	ldd	r26, Y+2	; 0x02
    1f16:	b9 81       	ldd	r27, Y+1	; 0x01
    1f18:	ce 0f       	add	r28, r30
    1f1a:	d1 1d       	adc	r29, r1
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	ed 01       	movw	r28, r26
    1f22:	08 95       	ret

00001f24 <_exit>:
    1f24:	f8 94       	cli

00001f26 <__stop_program>:
    1f26:	ff cf       	rjmp	.-2      	; 0x1f26 <__stop_program>
