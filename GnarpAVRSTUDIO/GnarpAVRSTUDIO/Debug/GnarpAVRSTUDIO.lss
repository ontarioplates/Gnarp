
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00002628  000026bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000109  00802138  00802138  000027f4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00002f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a1d  00000000  00000000  00003185  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005293  00000000  00000000  00003ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019ce  00000000  00000000  00008e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000331d  00000000  00000000  0000a803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  0000db20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001682  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000214d  00000000  00000000  0000f892  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000acf  00000000  00000000  000119df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  000124ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e8 e2       	ldi	r30, 0x28	; 40
     18c:	f6 e2       	ldi	r31, 0x26	; 38
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 33       	cpi	r26, 0x38	; 56
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 34       	cpi	r26, 0x41	; 65
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 c9 07 	call	0xf92	; 0xf92 <main>
     1ae:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 4e 21 	lds	r24, 0x214E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	eb 01       	movw	r28, r22
     1ce:	6a 01       	movw	r12, r20
    //outmin: minimum value to output
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
     1d0:	e8 2f       	mov	r30, r24
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ec 5b       	subi	r30, 0xBC	; 188
     1da:	fe 4d       	sbci	r31, 0xDE	; 222
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 17 10 	call	0x202e	; 0x202e <__floatunsisf>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 ef       	ldi	r19, 0xF0	; 240
     1ec:	43 e7       	ldi	r20, 0x73	; 115
     1ee:	55 e4       	ldi	r21, 0x45	; 69
     1f0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__divsf3>
     1f4:	7b 01       	movw	r14, r22
     1f6:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin) + outmin;
     1f8:	cc 1a       	sub	r12, r28
     1fa:	dd 0a       	sbc	r13, r29
     1fc:	b6 01       	movw	r22, r12
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 17 10 	call	0x202e	; 0x202e <__floatunsisf>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
     20a:	c8 01       	movw	r24, r16
     20c:	b7 01       	movw	r22, r14
     20e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__mulsf3>
     212:	8b 01       	movw	r16, r22
     214:	c8 2e       	mov	r12, r24
     216:	e9 2e       	mov	r14, r25
     218:	be 01       	movw	r22, r28
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 17 10 	call	0x202e	; 0x202e <__floatunsisf>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
     226:	60 2f       	mov	r22, r16
     228:	71 2f       	mov	r23, r17
     22a:	8c 2d       	mov	r24, r12
     22c:	9e 2d       	mov	r25, r14
     22e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__addsf3>
    
    return (uint16_t) temp;
     232:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixunssfsi>
}
     236:	cb 01       	movw	r24, r22
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	08 95       	ret

0000024a <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     24a:	80 91 3c 21 	lds	r24, 0x213C
     24e:	08 95       	ret

00000250 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     250:	80 91 3d 21 	lds	r24, 0x213D
     254:	08 95       	ret

00000256 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     256:	80 91 3a 21 	lds	r24, 0x213A
     25a:	08 95       	ret

0000025c <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     25c:	80 91 3b 21 	lds	r24, 0x213B
     260:	08 95       	ret

00000262 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     262:	80 91 38 21 	lds	r24, 0x2138
     266:	08 95       	ret

00000268 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     268:	80 91 39 21 	lds	r24, 0x2139
     26c:	08 95       	ret

0000026e <startup_functions>:

void startup_functions(){
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     276:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     278:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     280:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     282:	a0 e5       	ldi	r26, 0x50	; 80
     284:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     286:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     288:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     28a:	98 ed       	ldi	r25, 0xD8	; 216
     28c:	15 c0       	rjmp	.+42     	; 0x2b8 <startup_functions+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     28e:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     290:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     292:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     294:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     298:	70 91 51 00 	lds	r23, 0x0051
     29c:	73 ff       	sbrs	r23, 3
     29e:	fc cf       	rjmp	.-8      	; 0x298 <startup_functions+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     2a0:	15 96       	adiw	r26, 0x05	; 5
     2a2:	3c 93       	st	X, r19
     2a4:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     2a6:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     2aa:	70 91 51 00 	lds	r23, 0x0051
     2ae:	74 ff       	sbrs	r23, 4
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <startup_functions+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     2b2:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     2b4:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     2b8:	70 91 40 00 	lds	r23, 0x0040
     2bc:	74 30       	cpi	r23, 0x04	; 4
     2be:	39 f7       	brne	.-50     	; 0x28e <startup_functions+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     2c0:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     2c2:	a0 e6       	ldi	r26, 0x60	; 96
     2c4:	b6 e0       	ldi	r27, 0x06	; 6
     2c6:	80 e8       	ldi	r24, 0x80	; 128
     2c8:	15 96       	adiw	r26, 0x05	; 5
     2ca:	8c 93       	st	X, r24
     2cc:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     2ce:	90 e4       	ldi	r25, 0x40	; 64
     2d0:	12 96       	adiw	r26, 0x02	; 2
     2d2:	9c 93       	st	X, r25
     2d4:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     2d6:	11 96       	adiw	r26, 0x01	; 1
     2d8:	8c 93       	st	X, r24
     2da:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     2dc:	e0 eb       	ldi	r30, 0xB0	; 176
     2de:	f9 e0       	ldi	r31, 0x09	; 9
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     2e4:	90 e2       	ldi	r25, 0x20	; 32
     2e6:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2e8:	33 e0       	ldi	r19, 0x03	; 3
     2ea:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     2ec:	8f e2       	ldi	r24, 0x2F	; 47
     2ee:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     2f0:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     2f2:	80 91 a2 00 	lds	r24, 0x00A2
     2f6:	87 68       	ori	r24, 0x87	; 135
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     2fe:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     300:	c0 e0       	ldi	r28, 0x00	; 0
     302:	d6 e0       	ldi	r29, 0x06	; 6
     304:	89 ef       	ldi	r24, 0xF9	; 249
     306:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	f2 e0       	ldi	r31, 0x02	; 2
     30c:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     310:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     312:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     314:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     316:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     318:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     31a:	80 91 00 02 	lds	r24, 0x0200
     31e:	81 60       	ori	r24, 0x01	; 1
     320:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     328:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     32a:	12 a2       	std	Z+34, r1	; 0x22
        PORTC.OUTSET = 0x08;
    
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     32c:	40 e2       	ldi	r20, 0x20	; 32
     32e:	56 e0       	ldi	r21, 0x06	; 6
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	fa 01       	movw	r30, r20
     334:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     336:	28 e0       	ldi	r18, 0x08	; 8
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	96 e0       	ldi	r25, 0x06	; 6
     33c:	fc 01       	movw	r30, r24
     33e:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     340:	fa 01       	movw	r30, r20
     342:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     348:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f6 e0       	ldi	r31, 0x06	; 6
     34e:	88 ef       	ldi	r24, 0xF8	; 248
     350:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	11 96       	adiw	r26, 0x01	; 1
     356:	8c 93       	st	X, r24
     358:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	15 96       	adiw	r26, 0x05	; 5
     35e:	8c 93       	st	X, r24
     360:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     362:	90 ef       	ldi	r25, 0xF0	; 240
     364:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     366:	16 96       	adiw	r26, 0x06	; 6
     368:	8c 93       	st	X, r24
     36a:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	16 96       	adiw	r26, 0x06	; 6
     370:	8c 93       	st	X, r24
     372:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     374:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <preloop_functions>:

void preloop_functions(){
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     38a:	80 91 88 06 	lds	r24, 0x0688
     38e:	86 95       	lsr	r24
     390:	86 95       	lsr	r24
     392:	86 95       	lsr	r24
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <preloop_functions+0x1e>
     398:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     39a:	80 91 28 06 	lds	r24, 0x0628
     39e:	86 95       	lsr	r24
     3a0:	86 95       	lsr	r24
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <preloop_functions+0x2e>
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <preloop_functions+0x30>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	e8 2e       	mov	r14, r24
     3ae:	e9 2a       	or	r14, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     3b0:	80 91 28 06 	lds	r24, 0x0628
     3b4:	86 95       	lsr	r24
     3b6:	86 95       	lsr	r24
     3b8:	86 95       	lsr	r24
     3ba:	80 fd       	sbrc	r24, 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <preloop_functions+0x46>
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <preloop_functions+0x48>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	e8 2a       	or	r14, r24
     3c6:	e0 92 43 21 	sts	0x2143, r14
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3ca:	60 91 42 21 	lds	r22, 0x2142
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	f0 90 41 21 	lds	r15, 0x2141
     3d4:	ee e3       	ldi	r30, 0x3E	; 62
     3d6:	f1 e2       	ldi	r31, 0x21	; 33
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	4e 2d       	mov	r20, r14
     3de:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3e4:	d8 2e       	mov	r13, r24
     3e6:	ea 01       	movw	r28, r20
     3e8:	08 2e       	mov	r0, r24
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <preloop_functions+0x74>
     3ec:	d5 95       	asr	r29
     3ee:	c7 95       	ror	r28
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <preloop_functions+0x70>
     3f4:	db 01       	movw	r26, r22
     3f6:	08 2e       	mov	r0, r24
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <preloop_functions+0x82>
     3fa:	b5 95       	asr	r27
     3fc:	a7 95       	ror	r26
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <preloop_functions+0x7e>
     402:	ca 17       	cp	r28, r26
     404:	db 07       	cpc	r29, r27
     406:	21 f4       	brne	.+8      	; 0x410 <preloop_functions+0x94>
            switch_history_counts[i]++;                            //increment count        
     408:	a0 81       	ld	r26, Z
     40a:	af 5f       	subi	r26, 0xFF	; 255
     40c:	a0 83       	st	Z, r26
     40e:	01 c0       	rjmp	.+2      	; 0x412 <preloop_functions+0x96>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     410:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     412:	a0 81       	ld	r26, Z
     414:	a9 30       	cpi	r26, 0x09	; 9
     416:	60 f0       	brcs	.+24     	; 0x430 <preloop_functions+0xb4>
            final_switch_states &= ~(1 << i);
     418:	d9 01       	movw	r26, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <preloop_functions+0xa4>
     41c:	aa 0f       	add	r26, r26
     41e:	bb 1f       	adc	r27, r27
     420:	da 94       	dec	r13
     422:	e2 f7       	brpl	.-8      	; 0x41c <preloop_functions+0xa0>
     424:	ba 2f       	mov	r27, r26
     426:	b0 95       	com	r27
     428:	fb 22       	and	r15, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     42a:	ae 21       	and	r26, r14
     42c:	fa 2a       	or	r15, r26
            switch_history_counts[i] = 0;                          //and reset count
     42e:	10 82       	st	Z, r1
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	91 05       	cpc	r25, r1
     438:	a9 f6       	brne	.-86     	; 0x3e4 <preloop_functions+0x68>
     43a:	f0 92 41 21 	sts	0x2141, r15
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     43e:	e0 92 42 21 	sts	0x2142, r14
     442:	80 91 38 21 	lds	r24, 0x2138
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     446:	f0 fe       	sbrs	r15, 0
     448:	0c c0       	rjmp	.+24     	; 0x462 <preloop_functions+0xe6>
        if (toggle_switch_state)                //if toggle WAS on
     44a:	88 23       	and	r24, r24
     44c:	19 f0       	breq	.+6      	; 0x454 <preloop_functions+0xd8>
            toggle_switch_edge = EDGE_NONE;     //no edge
     44e:	10 92 39 21 	sts	0x2139, r1
     452:	03 c0       	rjmp	.+6      	; 0x45a <preloop_functions+0xde>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 39 21 	sts	0x2139, r24
        toggle_switch_state = 1;                //set current value
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 38 21 	sts	0x2138, r24
     460:	0a c0       	rjmp	.+20     	; 0x476 <preloop_functions+0xfa>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     462:	88 23       	and	r24, r24
     464:	21 f0       	breq	.+8      	; 0x46e <preloop_functions+0xf2>
            toggle_switch_edge = EDGE_FALL;     //new off
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	80 93 39 21 	sts	0x2139, r24
     46c:	02 c0       	rjmp	.+4      	; 0x472 <preloop_functions+0xf6>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     46e:	10 92 39 21 	sts	0x2139, r1
        toggle_switch_state = 0;                //set current value
     472:	10 92 38 21 	sts	0x2138, r1
     476:	80 91 3a 21 	lds	r24, 0x213A
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     47a:	f1 fe       	sbrs	r15, 1
     47c:	0c c0       	rjmp	.+24     	; 0x496 <preloop_functions+0x11a>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     47e:	88 23       	and	r24, r24
     480:	19 f0       	breq	.+6      	; 0x488 <preloop_functions+0x10c>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     482:	10 92 3b 21 	sts	0x213B, r1
     486:	03 c0       	rjmp	.+6      	; 0x48e <preloop_functions+0x112>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 3b 21 	sts	0x213B, r24
        pushbutton_switch_state = 1;                //set current value
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 3a 21 	sts	0x213A, r24
     494:	0a c0       	rjmp	.+20     	; 0x4aa <preloop_functions+0x12e>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     496:	88 23       	and	r24, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <preloop_functions+0x126>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	80 93 3b 21 	sts	0x213B, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <preloop_functions+0x12a>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     4a2:	10 92 3b 21 	sts	0x213B, r1
        pushbutton_switch_state = 0;                //set current value
     4a6:	10 92 3a 21 	sts	0x213A, r1
     4aa:	80 91 3c 21 	lds	r24, 0x213C
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     4ae:	f2 fe       	sbrs	r15, 2
     4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <preloop_functions+0x15a>
        if (encoder_switch_state)                //if encoder WAS on
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <preloop_functions+0x140>
            encoder_switch_edge = EDGE_NONE;     //no edge
     4b6:	10 92 3d 21 	sts	0x213D, r1
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <preloop_functions+0x146>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 3d 21 	sts	0x213D, r24
        encoder_switch_state = 1;                //set current value
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 3c 21 	sts	0x213C, r24
     4c8:	e4 e4       	ldi	r30, 0x44	; 68
     4ca:	f1 e2       	ldi	r31, 0x21	; 33
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     4cc:	23 e0       	ldi	r18, 0x03	; 3
     4ce:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4d0:	a0 e0       	ldi	r26, 0x00	; 0
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <preloop_functions+0x170>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
        encoder_switch_state = 1;                //set current value
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     4d6:	88 23       	and	r24, r24
     4d8:	21 f0       	breq	.+8      	; 0x4e2 <preloop_functions+0x166>
            encoder_switch_edge = EDGE_FALL;     //new off
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 3d 21 	sts	0x213D, r24
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <preloop_functions+0x16a>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     4e2:	10 92 3d 21 	sts	0x213D, r1
        encoder_switch_state = 0;                //set current value
     4e6:	10 92 3c 21 	sts	0x213C, r1
     4ea:	ee cf       	rjmp	.-36     	; 0x4c8 <preloop_functions+0x14c>
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4ec:	80 91 23 02 	lds	r24, 0x0223
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	93 96       	adiw	r26, 0x23	; 35
     4f4:	8c 93       	st	X, r24
     4f6:	93 97       	sbiw	r26, 0x23	; 35
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     4f8:	80 91 21 02 	lds	r24, 0x0221
     4fc:	87 7c       	andi	r24, 0xC7	; 199
     4fe:	91 96       	adiw	r26, 0x21	; 33
     500:	8c 93       	st	X, r24
     502:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     504:	40 91 21 02 	lds	r20, 0x0221
     508:	c9 01       	movw	r24, r18
     50a:	53 e0       	ldi	r21, 0x03	; 3
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	5a 95       	dec	r21
     512:	e1 f7       	brne	.-8      	; 0x50c <preloop_functions+0x190>
     514:	48 2b       	or	r20, r24
     516:	91 96       	adiw	r26, 0x21	; 33
     518:	4c 93       	st	X, r20
     51a:	91 97       	sbiw	r26, 0x21	; 33
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     51c:	80 91 20 02 	lds	r24, 0x0220
     520:	80 68       	ori	r24, 0x80	; 128
     522:	90 96       	adiw	r26, 0x20	; 32
     524:	8c 93       	st	X, r24
     526:	90 97       	sbiw	r26, 0x20	; 32
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     528:	80 91 23 02 	lds	r24, 0x0223
     52c:	80 ff       	sbrs	r24, 0
     52e:	fc cf       	rjmp	.-8      	; 0x528 <preloop_functions+0x1ac>
        
        pot_values[i] = ADCA.CH0.RESL;
     530:	80 91 24 02 	lds	r24, 0x0224
        pot_values[i] |= ADCA.CH0.RESH << 8;
     534:	90 91 25 02 	lds	r25, 0x0225
     538:	19 2f       	mov	r17, r25
     53a:	00 e0       	ldi	r16, 0x00	; 0
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     53c:	90 e0       	ldi	r25, 0x00	; 0
        pot_values[i] |= ADCA.CH0.RESH << 8;
     53e:	80 2b       	or	r24, r16
     540:	91 2b       	or	r25, r17
     542:	80 83       	st	Z, r24
     544:	91 83       	std	Z+1, r25	; 0x01
        
        if (pot_values[i] < POTMIN)
     546:	80 3c       	cpi	r24, 0xC0	; 192
     548:	91 05       	cpc	r25, r1
     54a:	18 f4       	brcc	.+6      	; 0x552 <preloop_functions+0x1d6>
            pot_values[i] = 0;
     54c:	10 82       	st	Z, r1
     54e:	11 82       	std	Z+1, r1	; 0x01
     550:	04 c0       	rjmp	.+8      	; 0x55a <preloop_functions+0x1de>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     552:	80 5c       	subi	r24, 0xC0	; 192
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	80 83       	st	Z, r24
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	32 96       	adiw	r30, 0x02	; 2
static void read_pots(){
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     560:	28 30       	cpi	r18, 0x08	; 8
     562:	31 05       	cpc	r19, r1
     564:	19 f6       	brne	.-122    	; 0x4ec <preloop_functions+0x170>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     566:	80 91 28 06 	lds	r24, 0x0628
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	80 fd       	sbrc	r24, 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     570:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     574:	84 2f       	mov	r24, r20
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	20 91 4f 21 	lds	r18, 0x214F
     57c:	51 e0       	ldi	r21, 0x01	; 1
     57e:	25 27       	eor	r18, r21
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	82 23       	and	r24, r18
     584:	93 23       	and	r25, r19
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	59 f0       	breq	.+22     	; 0x5a0 <preloop_functions+0x224>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     58a:	86 2f       	mov	r24, r22
     58c:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     58e:	80 fd       	sbrc	r24, 0
     590:	03 c0       	rjmp	.+6      	; 0x598 <preloop_functions+0x21c>
            encoder_state = TURN_CW;    //CW        
     592:	50 93 4e 21 	sts	0x214E, r21
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <preloop_functions+0x228>
        else
            encoder_state = TURN_CCW;    //CCW
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	80 93 4e 21 	sts	0x214E, r24
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <preloop_functions+0x228>
    }
    else
        encoder_state = TURN_NONE;   
     5a0:	10 92 4e 21 	sts	0x214E, r1
    last_a = current_a;
     5a4:	40 93 4f 21 	sts	0x214F, r20

void preloop_functions(){
    read_switches();
    read_pots();
    read_encoder();
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	08 95       	ret

000005b8 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
     5b8:	2f 92       	push	r2
     5ba:	3f 92       	push	r3
     5bc:	4f 92       	push	r4
     5be:	5f 92       	push	r5
     5c0:	6f 92       	push	r6
     5c2:	7f 92       	push	r7
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <postloop_functions+0x26>
     5de:	0f 92       	push	r0
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	b8 2e       	mov	r11, r24
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

static void set_LEDs(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    //booleans and such convert to LED out
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	4a 83       	std	Y+2, r20	; 0x02
     5ea:	2b 83       	std	Y+3, r18	; 0x03
     5ec:	6e 01       	movw	r12, r28
     5ee:	08 94       	sec
     5f0:	c1 1c       	adc	r12, r1
     5f2:	d1 1c       	adc	r13, r1
     5f4:	22 e0       	ldi	r18, 0x02	; 2
     5f6:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	e4 2e       	mov	r14, r20
     5fc:	f1 2c       	mov	r15, r1
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	49 2e       	mov	r4, r25
     602:	51 2c       	mov	r5, r1
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	28 2e       	mov	r2, r24
     608:	31 2c       	mov	r3, r1
     60a:	e0 e6       	ldi	r30, 0x60	; 96
     60c:	f6 e0       	ldi	r31, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     60e:	b0 e4       	ldi	r27, 0x40	; 64
     610:	8b 2e       	mov	r8, r27
     612:	b6 e0       	ldi	r27, 0x06	; 6
     614:	9b 2e       	mov	r9, r27
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     616:	a1 e0       	ldi	r26, 0x01	; 1
     618:	6a 2e       	mov	r6, r26
     61a:	71 2c       	mov	r7, r1
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	0e 94 98 12 	call	0x2530	; 0x2530 <__udivmodhi4>
     624:	a8 2e       	mov	r10, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     626:	01 15       	cp	r16, r1
     628:	11 05       	cpc	r17, r1
     62a:	21 f4       	brne	.+8      	; 0x634 <postloop_functions+0x7c>
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	11 f0       	breq	.+4      	; 0x634 <postloop_functions+0x7c>
            digit = 10;
     630:	7a e0       	ldi	r23, 0x0A	; 10
     632:	a7 2e       	mov	r10, r23
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     634:	c9 01       	movw	r24, r18
     636:	b2 01       	movw	r22, r4
     638:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divmodhi4>
     63c:	a1 01       	movw	r20, r2
     63e:	08 2e       	mov	r0, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <postloop_functions+0x8e>
     642:	44 0f       	add	r20, r20
     644:	55 1f       	adc	r21, r21
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <postloop_functions+0x8a>
     64a:	46 83       	std	Z+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     64c:	40 ef       	ldi	r20, 0xF0	; 240
     64e:	d4 01       	movw	r26, r8
     650:	16 96       	adiw	r26, 0x06	; 6
     652:	4c 93       	st	X, r20
     654:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     656:	a2 94       	swap	r10
     658:	60 ef       	ldi	r22, 0xF0	; 240
     65a:	a6 22       	and	r10, r22
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	ac 92       	st	X, r10
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     660:	58 e3       	ldi	r21, 0x38	; 56
     662:	55 83       	std	Z+5, r21	; 0x05
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     664:	d6 01       	movw	r26, r12
     666:	9d 91       	ld	r25, X+
     668:	6d 01       	movw	r12, r26
     66a:	99 23       	and	r25, r25
     66c:	41 f0       	breq	.+16     	; 0x67e <postloop_functions+0xc6>
            PORTD.OUTSET = 1 << (i+2)%3;
     66e:	a3 01       	movw	r20, r6
     670:	02 c0       	rjmp	.+4      	; 0x676 <postloop_functions+0xbe>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	8a 95       	dec	r24
     678:	e2 f7       	brpl	.-8      	; 0x672 <postloop_functions+0xba>
     67a:	45 83       	std	Z+5, r20	; 0x05
     67c:	07 c0       	rjmp	.+14     	; 0x68c <postloop_functions+0xd4>
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     67e:	d3 01       	movw	r26, r6
     680:	02 c0       	rjmp	.+4      	; 0x686 <postloop_functions+0xce>
     682:	aa 0f       	add	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	8a 95       	dec	r24
     688:	e2 f7       	brpl	.-8      	; 0x682 <postloop_functions+0xca>
     68a:	a6 83       	std	Z+6, r26	; 0x06
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     690:	25 30       	cpi	r18, 0x05	; 5
     692:	31 05       	cpc	r19, r1
     694:	31 f0       	breq	.+12     	; 0x6a2 <postloop_functions+0xea>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
     696:	c8 01       	movw	r24, r16
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 98 12 	call	0x2530	; 0x2530 <__udivmodhi4>
     69e:	8b 01       	movw	r16, r22
     6a0:	bd cf       	rjmp	.-134    	; 0x61c <postloop_functions+0x64>
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
    }
    
    if (status_LED)                                //light STATLED if necessary
     6a2:	bb 20       	and	r11, r11
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <postloop_functions+0xf8>
        PORTC.OUTCLR = 0x08;
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	e0 e4       	ldi	r30, 0x40	; 64
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <postloop_functions+0x100>
    else
        PORTC.OUTSET = 0x08;
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e0 e4       	ldi	r30, 0x40	; 64
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 83       	std	Z+5, r24	; 0x05
    read_encoder();
}

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     6b8:	23 96       	adiw	r28, 0x03	; 3
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	3f 90       	pop	r3
     6e0:	2f 90       	pop	r2
     6e2:	08 95       	ret

000006e4 <__vector_16>:
#define MIDI_CHAN 0

uint16_t tick_count = 0;
uint16_t LED_count = 0;

ISR(TCC0_CCA_vect){
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	TCC0.CNT = 0x0000;	//reset counter
     706:	e0 e0       	ldi	r30, 0x00	; 0
     708:	f8 e0       	ldi	r31, 0x08	; 8
     70a:	10 a2       	std	Z+32, r1	; 0x20
     70c:	11 a2       	std	Z+33, r1	; 0x21
	tick_count++;
     70e:	80 91 50 21 	lds	r24, 0x2150
     712:	90 91 51 21 	lds	r25, 0x2151
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	80 93 50 21 	sts	0x2150, r24
     71c:	90 93 51 21 	sts	0x2151, r25
	if (get_pushbutton_switch_state() == 1)
     720:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     724:	88 23       	and	r24, r24
     726:	21 f0       	breq	.+8      	; 0x730 <__vector_16+0x4c>
		midi_send_clock(serial_midi_device());
     728:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     72c:	0e 94 4f 09 	call	0x129e	; 0x129e <midi_send_clock>
}
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <__vector_91>:

ISR(USARTD1_RXC_vect){
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     774:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     778:	40 91 b0 09 	lds	r20, 0x09B0
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <midi_device_input>
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <test_pots>:

void test_pots(){
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     7b0:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	uint8_t selPOT = 0;
     7b4:	ff 24       	eor	r15, r15
	
	while(1){
		preloop_functions();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7b6:	c4 e6       	ldi	r28, 0x64	; 100
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
	startup_functions();
	
	uint8_t selPOT = 0;
	
	while(1){
		preloop_functions();
     7ba:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7be:	8f 2d       	mov	r24, r15
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	43 e6       	ldi	r20, 0x63	; 99
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     7cc:	2f 2d       	mov	r18, r15
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	2c 9f       	mul	r18, r28
     7d6:	80 01       	movw	r16, r0
     7d8:	2d 9f       	mul	r18, r29
     7da:	10 0d       	add	r17, r0
     7dc:	3c 9f       	mul	r19, r28
     7de:	10 0d       	add	r17, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	08 0f       	add	r16, r24
     7e4:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     7e6:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	29 f4       	brne	.+10     	; 0x7f8 <test_pots+0x52>
			selPOT++;
     7ee:	f3 94       	inc	r15
			if (selPOT>4)
     7f0:	8f 2d       	mov	r24, r15
     7f2:	85 30       	cpi	r24, 0x05	; 5
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <test_pots+0x52>
				selPOT = 0;
     7f6:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	
	}	
     804:	da cf       	rjmp	.-76     	; 0x7ba <test_pots+0x14>

00000806 <test_switches>:
	
	
}
*/

void test_switches(){
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	00 d0       	rcall	.+0      	; 0x810 <test_switches+0xa>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     814:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	while(1){
		preloop_functions();
     818:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     81c:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     820:	8a 83       	std	Y+2, r24	; 0x02
     822:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     82c:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	6a 81       	ldd	r22, Y+2	; 0x02
     832:	49 81       	ldd	r20, Y+1	; 0x01
     834:	00 e0       	ldi	r16, 0x00	; 0
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
     83c:	ed cf       	rjmp	.-38     	; 0x818 <test_switches+0x12>

0000083e <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	startup_functions();
     848:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     84c:	c0 e0       	ldi	r28, 0x00	; 0
     84e:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	
	while(1){
		preloop_functions();
     850:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     854:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     858:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     85a:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     85e:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     860:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     864:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     866:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	31 f4       	brne	.+12     	; 0x87a <test_seven_segment+0x3c>
			if (i == 999)
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	c7 3e       	cpi	r28, 0xE7	; 231
     872:	d8 07       	cpc	r29, r24
     874:	51 f0       	breq	.+20     	; 0x88a <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	0d c0       	rjmp	.+26     	; 0x894 <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     87a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	49 f4       	brne	.+18     	; 0x894 <test_seven_segment+0x56>
			if (i == 0)
     882:	20 97       	sbiw	r28, 0x00	; 0
     884:	29 f0       	breq	.+10     	; 0x890 <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     886:	21 97       	sbiw	r28, 0x01	; 1
     888:	05 c0       	rjmp	.+10     	; 0x894 <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     88a:	c0 e0       	ldi	r28, 0x00	; 0
     88c:	d0 e0       	ldi	r29, 0x00	; 0
     88e:	02 c0       	rjmp	.+4      	; 0x894 <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     890:	c7 ee       	ldi	r28, 0xE7	; 231
     892:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	6f 2d       	mov	r22, r15
     898:	40 2f       	mov	r20, r16
     89a:	21 2f       	mov	r18, r17
     89c:	8e 01       	movw	r16, r28
     89e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     8a2:	d6 cf       	rjmp	.-84     	; 0x850 <test_seven_segment+0x12>

000008a4 <test_ADC>:
}

void test_ADC(){
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	startup_functions();
     8b6:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     8ba:	c0 e0       	ldi	r28, 0x00	; 0
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     8be:	84 e6       	ldi	r24, 0x64	; 100
     8c0:	a8 2e       	mov	r10, r24
     8c2:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     8c4:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     8c8:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     8cc:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     8ce:	0e 94 2b 01 	call	0x256	; 0x256 <get_pushbutton_switch_state>
     8d2:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     8d4:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     8d8:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     8da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	29 f4       	brne	.+10     	; 0x8ec <test_ADC+0x48>
			if (pot_select == 4)
     8e2:	c4 30       	cpi	r28, 0x04	; 4
     8e4:	d1 05       	cpc	r29, r1
     8e6:	51 f0       	breq	.+20     	; 0x8fc <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     8e8:	21 96       	adiw	r28, 0x01	; 1
     8ea:	0d c0       	rjmp	.+26     	; 0x906 <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     8ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8f0:	82 30       	cpi	r24, 0x02	; 2
     8f2:	49 f4       	brne	.+18     	; 0x906 <test_ADC+0x62>
			if (pot_select == 0)
     8f4:	20 97       	sbiw	r28, 0x00	; 0
     8f6:	29 f0       	breq	.+10     	; 0x902 <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     8f8:	21 97       	sbiw	r28, 0x01	; 1
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     902:	c4 e0       	ldi	r28, 0x04	; 4
     904:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     906:	8c 2f       	mov	r24, r28
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	43 e6       	ldi	r20, 0x63	; 99
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     914:	ca 9d       	mul	r28, r10
     916:	80 01       	movw	r16, r0
     918:	cb 9d       	mul	r28, r11
     91a:	10 0d       	add	r17, r0
     91c:	da 9d       	mul	r29, r10
     91e:	10 0d       	add	r17, r0
     920:	11 24       	eor	r1, r1
     922:	08 0f       	add	r16, r24
     924:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	6d 2d       	mov	r22, r13
     92a:	4e 2d       	mov	r20, r14
     92c:	2f 2d       	mov	r18, r15
     92e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     932:	c8 cf       	rjmp	.-112    	; 0x8c4 <test_ADC+0x20>

00000934 <test_xnor_out>:
}

void test_xnor_out(){
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     93c:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     940:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <serial_midi_init>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     944:	c4 e6       	ldi	r28, 0x64	; 100
     946:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
	serial_midi_init();
	
	while(1){
		preloop_functions();
     948:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     94c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	29 f4       	brne	.+10     	; 0x95e <test_xnor_out+0x2a>
			if (note <= 64)
     954:	c1 34       	cpi	r28, 0x41	; 65
     956:	d1 05       	cpc	r29, r1
     958:	58 f0       	brcs	.+22     	; 0x970 <test_xnor_out+0x3c>
				note = 152;
			else
				note += -1;
     95a:	21 97       	sbiw	r28, 0x01	; 1
     95c:	0e c0       	rjmp	.+28     	; 0x97a <test_xnor_out+0x46>
		}
		else if (get_encoder() == TURN_CW){
     95e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	51 f4       	brne	.+20     	; 0x97a <test_xnor_out+0x46>
			if (note >= 152)
     966:	c8 39       	cpi	r28, 0x98	; 152
     968:	d1 05       	cpc	r29, r1
     96a:	28 f4       	brcc	.+10     	; 0x976 <test_xnor_out+0x42>
				note = 64;
			else
				note++;
     96c:	21 96       	adiw	r28, 0x01	; 1
     96e:	05 c0       	rjmp	.+10     	; 0x97a <test_xnor_out+0x46>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     970:	c8 e9       	ldi	r28, 0x98	; 152
     972:	d0 e0       	ldi	r29, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <test_xnor_out+0x46>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     976:	c0 e4       	ldi	r28, 0x40	; 64
     978:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note++;
		}				
					
		if (get_encoder_switch_edge() == EDGE_RISE)
     97a:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	41 f4       	brne	.+16     	; 0x992 <test_xnor_out+0x5e>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
     982:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	4c 2f       	mov	r20, r28
     98a:	28 e7       	ldi	r18, 0x78	; 120
     98c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <midi_send_noteon>
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <test_xnor_out+0x74>
		else if (get_encoder_switch_edge() == EDGE_FALL)
     992:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	39 f4       	brne	.+14     	; 0x9a8 <test_xnor_out+0x74>
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
     99a:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	4c 2f       	mov	r20, r28
     9a2:	28 e7       	ldi	r18, 0x78	; 120
     9a4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <midi_send_noteoff>
			
		status_LED = get_encoder_switch_state();
     9a8:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     9ac:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     9ae:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9b2:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     9b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
			
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	01 30       	cpi	r16, 0x01	; 1
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <test_xnor_out+0x8c>
     9be:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     9c0:	41 e0       	ldi	r20, 0x01	; 1
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <test_xnor_out+0x94>
     9c6:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9c8:	81 2f       	mov	r24, r17
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	8e 01       	movw	r16, r28
     9ce:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     9d2:	ba cf       	rjmp	.-140    	; 0x948 <test_xnor_out+0x14>

000009d4 <test_xnor_in>:
	
}

void test_xnor_in(){
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     9dc:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     9e0:	c4 e6       	ldi	r28, 0x64	; 100
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
	
	startup_functions();
//	serial_midi_init();
	
	while(1){
		preloop_functions();
     9e4:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     9e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	29 f4       	brne	.+10     	; 0x9fa <test_xnor_in+0x26>
			if (note <= 64)
     9f0:	c1 34       	cpi	r28, 0x41	; 65
     9f2:	d1 05       	cpc	r29, r1
     9f4:	58 f0       	brcs	.+22     	; 0xa0c <test_xnor_in+0x38>
				note = 152;
			else
				note += -1;
     9f6:	21 97       	sbiw	r28, 0x01	; 1
     9f8:	0e c0       	rjmp	.+28     	; 0xa16 <test_xnor_in+0x42>
		}
		else if (get_encoder() == TURN_CW){
     9fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	51 f4       	brne	.+20     	; 0xa16 <test_xnor_in+0x42>
			if (note >= 152)
     a02:	c8 39       	cpi	r28, 0x98	; 152
     a04:	d1 05       	cpc	r29, r1
     a06:	28 f4       	brcc	.+10     	; 0xa12 <test_xnor_in+0x3e>
				note = 64;
			else
				note++;
     a08:	21 96       	adiw	r28, 0x01	; 1
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <test_xnor_in+0x42>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     a0c:	c8 e9       	ldi	r28, 0x98	; 152
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <test_xnor_in+0x42>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     a12:	c0 e4       	ldi	r28, 0x40	; 64
     a14:	d0 e0       	ldi	r29, 0x00	; 0
/*		if (get_encoder_switch_edge() == EDGE_RISE)
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
     a16:	0e 94 25 01 	call	0x24a	; 0x24a <get_encoder_switch_state>
     a1a:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     a1c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a20:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     a22:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	01 30       	cpi	r16, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <test_xnor_in+0x5a>
     a2c:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	82 30       	cpi	r24, 0x02	; 2
     a32:	09 f0       	breq	.+2      	; 0xa36 <test_xnor_in+0x62>
     a34:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a36:	81 2f       	mov	r24, r17
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	8e 01       	movw	r16, r28
     a3c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     a40:	d1 cf       	rjmp	.-94     	; 0x9e4 <test_xnor_in+0x10>

00000a42 <test_blank>:
	
}

void test_blank(){
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a46:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	
	while(1){
		preloop_functions();
     a4a:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
     a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <test_blank+0x8>

00000a60 <test_timer>:
	}
	
}

void test_timer(){
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a68:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	TCC0.CTRLA = 0x00;  //disable timer
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f8 e0       	ldi	r31, 0x08	; 8
     a70:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     a74:	80 e1       	ldi	r24, 0x10	; 16
     a76:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     a78:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     a7a:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     a7c:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CCA = 23437;	//compare to 46875 (12MHz / 256)
     a82:	8d e8       	ldi	r24, 0x8D	; 141
     a84:	9b e5       	ldi	r25, 0x5B	; 91
     a86:	80 a7       	std	Z+40, r24	; 0x28
     a88:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CNT = 0x0000;	//reset counter
     a8a:	10 a2       	std	Z+32, r1	; 0x20
     a8c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
     a8e:	87 e0       	ldi	r24, 0x07	; 7
     a90:	80 93 00 08 	sts	0x0800, r24
			else
				LED_count++;
		}		
		else if (get_encoder() == TURN_CCW){
			if (LED_count == 0)
				LED_count = 999;
     a94:	c7 ee       	ldi	r28, 0xE7	; 231
     a96:	d3 e0       	ldi	r29, 0x03	; 3
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
	
	
	
	while(1){
		preloop_functions();
     a98:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>
		
		if (get_encoder() == TURN_CW){
     a9c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	79 f4       	brne	.+30     	; 0xac2 <test_timer+0x62>
			if (LED_count == 999)
     aa4:	80 91 52 21 	lds	r24, 0x2152
     aa8:	90 91 53 21 	lds	r25, 0x2153
     aac:	23 e0       	ldi	r18, 0x03	; 3
     aae:	87 3e       	cpi	r24, 0xE7	; 231
     ab0:	92 07       	cpc	r25, r18
     ab2:	29 f4       	brne	.+10     	; 0xabe <test_timer+0x5e>
				LED_count = 0;
     ab4:	10 92 52 21 	sts	0x2152, r1
     ab8:	10 92 53 21 	sts	0x2153, r1
     abc:	16 c0       	rjmp	.+44     	; 0xaea <test_timer+0x8a>
			else
				LED_count++;
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	10 c0       	rjmp	.+32     	; 0xae2 <test_timer+0x82>
		}		
		else if (get_encoder() == TURN_CCW){
     ac2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	81 f4       	brne	.+32     	; 0xaea <test_timer+0x8a>
			if (LED_count == 0)
     aca:	80 91 52 21 	lds	r24, 0x2152
     ace:	90 91 53 21 	lds	r25, 0x2153
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	29 f4       	brne	.+10     	; 0xae0 <test_timer+0x80>
				LED_count = 999;
     ad6:	c0 93 52 21 	sts	0x2152, r28
     ada:	d0 93 53 21 	sts	0x2153, r29
     ade:	05 c0       	rjmp	.+10     	; 0xaea <test_timer+0x8a>
			else
				LED_count+= -1;
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	80 93 52 21 	sts	0x2152, r24
     ae6:	90 93 53 21 	sts	0x2153, r25
		}				
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     aea:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	41 f4       	brne	.+16     	; 0xb02 <test_timer+0xa2>
			LED_count = 0;
     af2:	10 92 52 21 	sts	0x2152, r1
     af6:	10 92 53 21 	sts	0x2153, r1
			TCC0_CNT = 0;
     afa:	10 92 20 08 	sts	0x0820, r1
     afe:	10 92 21 08 	sts	0x0821, r1
		}			
			
		seven_segment_value = LED_count;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     b02:	00 91 52 21 	lds	r16, 0x2152
     b06:	10 91 53 21 	lds	r17, 0x2153
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     b16:	c0 cf       	rjmp	.-128    	; 0xa98 <test_timer+0x38>

00000b18 <BPM_to_TMR>:
	
}

void BPM_to_TMR(uint16_t BPM){
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	ae 97       	sbiw	r28, 0x2e	; 46
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     b2a:	de 01       	movw	r26, r28
     b2c:	1f 96       	adiw	r26, 0x0f	; 15
     b2e:	e0 e0       	ldi	r30, 0x00	; 0
     b30:	f0 e2       	ldi	r31, 0x20	; 32
     b32:	20 e2       	ldi	r18, 0x20	; 32
     b34:	01 90       	ld	r0, Z+
     b36:	0d 92       	st	X+, r0
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     b3c:	20 91 00 08 	lds	r18, 0x0800
     b40:	2f 70       	andi	r18, 0x0F	; 15
     b42:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     b48:	1b 82       	std	Y+3, r1	; 0x03
     b4a:	1c 82       	std	Y+4, r1	; 0x04
     b4c:	1d 82       	std	Y+5, r1	; 0x05
     b4e:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     b50:	9c 01       	movw	r18, r24
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	77 e8       	ldi	r23, 0x87	; 135
     b5a:	83 e9       	ldi	r24, 0x93	; 147
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 bf 12 	call	0x257e	; 0x257e <__udivmodsi4>
     b62:	2f 83       	std	Y+7, r18	; 0x07
     b64:	38 87       	std	Y+8, r19	; 0x08
     b66:	49 87       	std	Y+9, r20	; 0x09
     b68:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     b6a:	6f 81       	ldd	r22, Y+7	; 0x07
     b6c:	78 85       	ldd	r23, Y+8	; 0x08
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	9a 85       	ldd	r25, Y+10	; 0x0a
     b72:	ea 81       	ldd	r30, Y+2	; 0x02
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	8e 01       	movw	r16, r28
     b80:	0f 5f       	subi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	11 c0       	rjmp	.+34     	; 0xba8 <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	88 30       	cpi	r24, 0x08	; 8
     b90:	08 f0       	brcs	.+2      	; 0xb94 <BPM_to_TMR+0x7c>
     b92:	93 c0       	rjmp	.+294    	; 0xcba <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	e0 0f       	add	r30, r16
     baa:	f1 1f       	adc	r31, r17
     bac:	26 85       	ldd	r18, Z+14	; 0x0e
     bae:	37 85       	ldd	r19, Z+15	; 0x0f
     bb0:	40 89       	ldd	r20, Z+16	; 0x10
     bb2:	51 89       	ldd	r21, Z+17	; 0x11
     bb4:	0e 94 bf 12 	call	0x257e	; 0x257e <__udivmodsi4>
     bb8:	2b 87       	std	Y+11, r18	; 0x0b
     bba:	3c 87       	std	Y+12, r19	; 0x0c
     bbc:	4d 87       	std	Y+13, r20	; 0x0d
     bbe:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc4:	ad 85       	ldd	r26, Y+13	; 0x0d
     bc6:	be 85       	ldd	r27, Y+14	; 0x0e
     bc8:	80 30       	cpi	r24, 0x00	; 0
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	92 07       	cpc	r25, r18
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	a2 07       	cpc	r26, r18
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	b2 07       	cpc	r27, r18
     bd6:	b8 f6       	brcc	.-82     	; 0xb86 <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     bd8:	80 91 00 08 	lds	r24, 0x0800
     bdc:	88 23       	and	r24, r24
     bde:	09 f4       	brne	.+2      	; 0xbe2 <BPM_to_TMR+0xca>
     be0:	61 c0       	rjmp	.+194    	; 0xca4 <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	98 17       	cp	r25, r24
     be8:	09 f4       	brne	.+2      	; 0xbec <BPM_to_TMR+0xd4>
     bea:	5a c0       	rjmp	.+180    	; 0xca0 <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
     bec:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     bf0:	60 91 20 08 	lds	r22, 0x0820
     bf4:	70 91 21 08 	lds	r23, 0x0821
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	8e 01       	movw	r16, r28
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	e0 0f       	add	r30, r16
     c0c:	f1 1f       	adc	r31, r17
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	26 85       	ldd	r18, Z+14	; 0x0e
     c14:	37 85       	ldd	r19, Z+15	; 0x0f
     c16:	40 89       	ldd	r20, Z+16	; 0x10
     c18:	51 89       	ldd	r21, Z+17	; 0x11
     c1a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__mulsi3>
     c1e:	6b 83       	std	Y+3, r22	; 0x03
     c20:	7c 83       	std	Y+4, r23	; 0x04
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     c26:	6b 81       	ldd	r22, Y+3	; 0x03
     c28:	7c 81       	ldd	r23, Y+4	; 0x04
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	e9 81       	ldd	r30, Y+1	; 0x01
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	26 85       	ldd	r18, Z+14	; 0x0e
     c40:	37 85       	ldd	r19, Z+15	; 0x0f
     c42:	40 89       	ldd	r20, Z+16	; 0x10
     c44:	51 89       	ldd	r21, Z+17	; 0x11
     c46:	0e 94 bf 12 	call	0x257e	; 0x257e <__udivmodsi4>
     c4a:	2b 83       	std	Y+3, r18	; 0x03
     c4c:	3c 83       	std	Y+4, r19	; 0x04
     c4e:	4d 83       	std	Y+5, r20	; 0x05
     c50:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     c52:	10 c0       	rjmp	.+32     	; 0xc74 <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	ad 81       	ldd	r26, Y+5	; 0x05
     c5a:	be 81       	ldd	r27, Y+6	; 0x06
     c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c60:	4d 85       	ldd	r20, Y+13	; 0x0d
     c62:	5e 85       	ldd	r21, Y+14	; 0x0e
     c64:	82 1b       	sub	r24, r18
     c66:	93 0b       	sbc	r25, r19
     c68:	a4 0b       	sbc	r26, r20
     c6a:	b5 0b       	sbc	r27, r21
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	ad 83       	std	Y+5, r26	; 0x05
     c72:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     c74:	2b 81       	ldd	r18, Y+3	; 0x03
     c76:	3c 81       	ldd	r19, Y+4	; 0x04
     c78:	4d 81       	ldd	r20, Y+5	; 0x05
     c7a:	5e 81       	ldd	r21, Y+6	; 0x06
     c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c80:	ad 85       	ldd	r26, Y+13	; 0x0d
     c82:	be 85       	ldd	r27, Y+14	; 0x0e
     c84:	82 17       	cp	r24, r18
     c86:	93 07       	cpc	r25, r19
     c88:	a4 07       	cpc	r26, r20
     c8a:	b5 07       	cpc	r27, r21
     c8c:	18 f3       	brcs	.-58     	; 0xc54 <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	ad 81       	ldd	r26, Y+5	; 0x05
     c94:	be 81       	ldd	r27, Y+6	; 0x06
     c96:	e0 e0       	ldi	r30, 0x00	; 0
     c98:	f8 e0       	ldi	r31, 0x08	; 8
     c9a:	80 a3       	std	Z+32, r24	; 0x20
     c9c:	91 a3       	std	Z+33, r25	; 0x21
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     ca0:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca8:	ad 85       	ldd	r26, Y+13	; 0x0d
     caa:	be 85       	ldd	r27, Y+14	; 0x0e
     cac:	e0 e0       	ldi	r30, 0x00	; 0
     cae:	f8 e0       	ldi	r31, 0x08	; 8
     cb0:	80 a7       	std	Z+40, r24	; 0x28
     cb2:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	80 93 00 08 	sts	0x0800, r24

	return;
}
     cba:	ae 96       	adiw	r28, 0x2e	; 46
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <test_BPM>:

void test_BPM(){
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	2b 97       	sbiw	r28, 0x0b	; 11
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	de bf       	out	0x3e, r29	; 62
	volatile bool decimal_point0 = 0;
     cde:	19 82       	std	Y+1, r1	; 0x01
	volatile bool decimal_point1 = 0;
     ce0:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool decimal_point2 = 0;
     ce2:	1b 82       	std	Y+3, r1	; 0x03
	volatile bool status_LED = 0;
     ce4:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint16_t seven_segment_value = 0;
     ce6:	18 86       	std	Y+8, r1	; 0x08
     ce8:	19 86       	std	Y+9, r1	; 0x09
	volatile uint16_t BPM = 120;
     cea:	88 e7       	ldi	r24, 0x78	; 120
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	8a 87       	std	Y+10, r24	; 0x0a
     cf0:	9b 87       	std	Y+11, r25	; 0x0b
	volatile uint8_t beat_count = 0;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint8_t measure_count = 0;
     cf4:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile bool off_sent = 0;
     cf6:	1f 82       	std	Y+7, r1	; 0x07
	
	
	startup_functions();
     cf8:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     cfc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <serial_midi_init>
	
	TCC0.CTRLA = 0x00;  //disable timer
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	f8 e0       	ldi	r31, 0x08	; 8
     d04:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     d08:	80 e1       	ldi	r24, 0x10	; 16
     d0a:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     d0c:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     d0e:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     d10:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	87 83       	std	Z+7, r24	; 0x07
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
     d16:	8a 85       	ldd	r24, Y+10	; 0x0a
     d18:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1a:	0e 94 8c 05 	call	0xb18	; 0xb18 <BPM_to_TMR>
					}						
				}
		}
		
		if (tick_count > 2 && !off_sent){
			off_sent = 1;
     d1e:	ff 24       	eor	r15, r15
     d20:	f3 94       	inc	r15
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
//	TCC0.CNT = 0x0000;	//reset counter
	//TCC0.CTRLA = 0x01;  //enable timer = clk
	
	while(1){
		preloop_functions();
     d22:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>

		if (get_encoder() == TURN_CW){
     d26:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	51 f4       	brne	.+20     	; 0xd42 <test_BPM+0x78>
			if (BPM < 400)
     d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d30:	9b 85       	ldd	r25, Y+11	; 0x0b
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	80 39       	cpi	r24, 0x90	; 144
     d36:	92 07       	cpc	r25, r18
     d38:	90 f4       	brcc	.+36     	; 0xd5e <test_BPM+0x94>
				BPM++;
     d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <test_BPM+0x90>
				BPM_to_TMR(BPM);
		}
		else if (get_encoder() == TURN_CCW){
     d42:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	71 f4       	brne	.+28     	; 0xd66 <test_BPM+0x9c>
			if (BPM > 50){
     d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4e:	83 33       	cpi	r24, 0x33	; 51
     d50:	91 05       	cpc	r25, r1
     d52:	48 f0       	brcs	.+18     	; 0xd66 <test_BPM+0x9c>
				BPM += -1;
     d54:	8a 85       	ldd	r24, Y+10	; 0x0a
     d56:	9b 85       	ldd	r25, Y+11	; 0x0b
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	8a 87       	std	Y+10, r24	; 0x0a
     d5c:	9b 87       	std	Y+11, r25	; 0x0b
				BPM_to_TMR(BPM);
     d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d60:	9b 85       	ldd	r25, Y+11	; 0x0b
     d62:	0e 94 8c 05 	call	0xb18	; 0xb18 <BPM_to_TMR>
			}				
		}
		

		if (tick_count >= 24){
     d66:	80 91 50 21 	lds	r24, 0x2150
     d6a:	90 91 51 21 	lds	r25, 0x2151
     d6e:	88 31       	cpi	r24, 0x18	; 24
     d70:	91 05       	cpc	r25, r1
     d72:	30 f1       	brcs	.+76     	; 0xdc0 <test_BPM+0xf6>
			midi_send_noteon(serial_midi_device(),MIDI_CHAN,48,100);
     d74:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	40 e3       	ldi	r20, 0x30	; 48
     d7c:	24 e6       	ldi	r18, 0x64	; 100
     d7e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <midi_send_noteon>
			off_sent = 0;
     d82:	1f 82       	std	Y+7, r1	; 0x07
			tick_count = tick_count - 24;
     d84:	80 91 50 21 	lds	r24, 0x2150
     d88:	90 91 51 21 	lds	r25, 0x2151
     d8c:	48 97       	sbiw	r24, 0x18	; 24
     d8e:	80 93 50 21 	sts	0x2150, r24
     d92:	90 93 51 21 	sts	0x2151, r25
			beat_count++;
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	8d 83       	std	Y+5, r24	; 0x05
				if (beat_count > 3){
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	78 f0       	brcs	.+30     	; 0xdc0 <test_BPM+0xf6>
					midi_send_noteon(serial_midi_device(),MIDI_CHAN,52,100);
     da2:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	44 e3       	ldi	r20, 0x34	; 52
     daa:	24 e6       	ldi	r18, 0x64	; 100
     dac:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <midi_send_noteon>
					beat_count = 0;
     db0:	1d 82       	std	Y+5, r1	; 0x05
					measure_count++;
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8e 83       	std	Y+6, r24	; 0x06
					if (measure_count > 99){
     db8:	8e 81       	ldd	r24, Y+6	; 0x06
     dba:	84 36       	cpi	r24, 0x64	; 100
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <test_BPM+0xf6>
						measure_count = 0;
     dbe:	1e 82       	std	Y+6, r1	; 0x06
					}						
				}
		}
		
		if (tick_count > 2 && !off_sent){
     dc0:	80 91 50 21 	lds	r24, 0x2150
     dc4:	90 91 51 21 	lds	r25, 0x2151
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	91 05       	cpc	r25, r1
     dcc:	a8 f0       	brcs	.+42     	; 0xdf8 <test_BPM+0x12e>
     dce:	8f 81       	ldd	r24, Y+7	; 0x07
     dd0:	88 23       	and	r24, r24
     dd2:	91 f4       	brne	.+36     	; 0xdf8 <test_BPM+0x12e>
			off_sent = 1;
     dd4:	ff 82       	std	Y+7, r15	; 0x07
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,48,100);
     dd6:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	40 e3       	ldi	r20, 0x30	; 48
     dde:	24 e6       	ldi	r18, 0x64	; 100
     de0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <midi_send_noteoff>
				if (beat_count == 0)
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	88 23       	and	r24, r24
     de8:	39 f4       	brne	.+14     	; 0xdf8 <test_BPM+0x12e>
					midi_send_noteoff(serial_midi_device(),MIDI_CHAN,52,100);
     dea:	0e 94 e7 07 	call	0xfce	; 0xfce <serial_midi_device>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	44 e3       	ldi	r20, 0x34	; 52
     df2:	24 e6       	ldi	r18, 0x64	; 100
     df4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <midi_send_noteoff>
		}
		
		decimal_point0 = 0;
     df8:	19 82       	std	Y+1, r1	; 0x01
		decimal_point1 = 0;
     dfa:	1a 82       	std	Y+2, r1	; 0x02
		if (tick_count < 12)
     dfc:	80 91 50 21 	lds	r24, 0x2150
     e00:	90 91 51 21 	lds	r25, 0x2151
     e04:	8c 30       	cpi	r24, 0x0C	; 12
     e06:	91 05       	cpc	r25, r1
     e08:	08 f4       	brcc	.+2      	; 0xe0c <test_BPM+0x142>
			decimal_point0 = 1;
     e0a:	f9 82       	std	Y+1, r15	; 0x01
		if (beat_count < 2)
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	08 f4       	brcc	.+2      	; 0xe14 <test_BPM+0x14a>
			decimal_point1 = 1;
     e12:	fa 82       	std	Y+2, r15	; 0x02
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     e14:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	31 f4       	brne	.+12     	; 0xe28 <test_BPM+0x15e>
			beat_count = 0;
     e1c:	1d 82       	std	Y+5, r1	; 0x05
			measure_count = 0;
     e1e:	1e 82       	std	Y+6, r1	; 0x06
			tick_count = 0;
     e20:	10 92 50 21 	sts	0x2150, r1
     e24:	10 92 51 21 	sts	0x2151, r1
		}			
		
		if (get_toggle_switch_state())
     e28:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     e2c:	88 23       	and	r24, r24
     e2e:	49 f0       	breq	.+18     	; 0xe42 <test_BPM+0x178>
			seven_segment_value = beat_count + 10*measure_count;
     e30:	2d 81       	ldd	r18, Y+5	; 0x05
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	3a e0       	ldi	r19, 0x0A	; 10
     e36:	83 9f       	mul	r24, r19
     e38:	c0 01       	movw	r24, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	82 0f       	add	r24, r18
     e3e:	91 1d       	adc	r25, r1
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <test_BPM+0x17c>
		else
			seven_segment_value = BPM;
     e42:	8a 85       	ldd	r24, Y+10	; 0x0a
     e44:	9b 85       	ldd	r25, Y+11	; 0x0b
     e46:	88 87       	std	Y+8, r24	; 0x08
     e48:	99 87       	std	Y+9, r25	; 0x09
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	69 81       	ldd	r22, Y+1	; 0x01
     e4e:	4a 81       	ldd	r20, Y+2	; 0x02
     e50:	2b 81       	ldd	r18, Y+3	; 0x03
     e52:	08 85       	ldd	r16, Y+8	; 0x08
     e54:	19 85       	ldd	r17, Y+9	; 0x09
     e56:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     e5a:	63 cf       	rjmp	.-314    	; 0xd22 <test_BPM+0x58>

00000e5c <test_tick_accuracy>:
	
}

void test_tick_accuracy(){
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	2b 97       	sbiw	r28, 0x0b	; 11
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	de bf       	out	0x3e, r29	; 62
	volatile bool decimal_point0 = 0;
     e70:	19 82       	std	Y+1, r1	; 0x01
	volatile bool decimal_point1 = 0;
     e72:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool decimal_point2 = 0;
     e74:	1b 82       	std	Y+3, r1	; 0x03
	volatile bool status_LED = 0;
     e76:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint16_t seven_segment_value = 0;
     e78:	18 86       	std	Y+8, r1	; 0x08
     e7a:	19 86       	std	Y+9, r1	; 0x09
	volatile uint16_t BPM = 120;
     e7c:	88 e7       	ldi	r24, 0x78	; 120
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	8a 87       	std	Y+10, r24	; 0x0a
     e82:	9b 87       	std	Y+11, r25	; 0x0b
	volatile uint8_t beat_count = 0;
     e84:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint8_t measure_count = 0;
     e86:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile bool off_sent = 0;
     e88:	1f 82       	std	Y+7, r1	; 0x07
	
	
	startup_functions();
     e8a:	0e 94 37 01 	call	0x26e	; 0x26e <startup_functions>
	serial_midi_init();
     e8e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <serial_midi_init>
	
	TCC0.CTRLA = 0x00;  //disable timer
     e92:	e0 e0       	ldi	r30, 0x00	; 0
     e94:	f8 e0       	ldi	r31, 0x08	; 8
     e96:	10 92 00 08 	sts	0x0800, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     e9a:	80 e1       	ldi	r24, 0x10	; 16
     e9c:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     e9e:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     ea0:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     ea2:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	87 83       	std	Z+7, r24	; 0x07
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
     ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
     eac:	0e 94 8c 05 	call	0xb18	; 0xb18 <BPM_to_TMR>
		
		
		decimal_point0 = 0;
		decimal_point1 = 0;
		if (tick_count < 12)
			decimal_point0 = 1;
     eb0:	ff 24       	eor	r15, r15
     eb2:	f3 94       	inc	r15
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
//	TCC0.CNT = 0x0000;	//reset counter
	//TCC0.CTRLA = 0x01;  //enable timer = clk
	
	while(1){
		preloop_functions();
     eb4:	0e 94 be 01 	call	0x37c	; 0x37c <preloop_functions>

		if (get_encoder() == TURN_CW){
     eb8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	51 f4       	brne	.+20     	; 0xed4 <test_tick_accuracy+0x78>
			if (BPM < 400)
     ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	80 39       	cpi	r24, 0x90	; 144
     ec8:	92 07       	cpc	r25, r18
     eca:	90 f4       	brcc	.+36     	; 0xef0 <test_tick_accuracy+0x94>
				BPM++;
     ecc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ece:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <test_tick_accuracy+0x90>
				BPM_to_TMR(BPM);
		}
		else if (get_encoder() == TURN_CCW){
     ed4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	71 f4       	brne	.+28     	; 0xef8 <test_tick_accuracy+0x9c>
			if (BPM > 30){
     edc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ede:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee0:	8f 31       	cpi	r24, 0x1F	; 31
     ee2:	91 05       	cpc	r25, r1
     ee4:	48 f0       	brcs	.+18     	; 0xef8 <test_tick_accuracy+0x9c>
				BPM += -1;
     ee6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	8a 87       	std	Y+10, r24	; 0x0a
     eee:	9b 87       	std	Y+11, r25	; 0x0b
				BPM_to_TMR(BPM);
     ef0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef4:	0e 94 8c 05 	call	0xb18	; 0xb18 <BPM_to_TMR>
			}				
		}
		

		if (tick_count >= 24){
     ef8:	80 91 50 21 	lds	r24, 0x2150
     efc:	90 91 51 21 	lds	r25, 0x2151
     f00:	88 31       	cpi	r24, 0x18	; 24
     f02:	91 05       	cpc	r25, r1
     f04:	a0 f0       	brcs	.+40     	; 0xf2e <test_tick_accuracy+0xd2>
			off_sent = 0;
     f06:	1f 82       	std	Y+7, r1	; 0x07
			tick_count = tick_count - 24;
     f08:	48 97       	sbiw	r24, 0x18	; 24
     f0a:	80 93 50 21 	sts	0x2150, r24
     f0e:	90 93 51 21 	sts	0x2151, r25
			beat_count++;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8d 83       	std	Y+5, r24	; 0x05
				if (beat_count > 3){
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	40 f0       	brcs	.+16     	; 0xf2e <test_tick_accuracy+0xd2>
					beat_count = 0;
     f1e:	1d 82       	std	Y+5, r1	; 0x05
					measure_count++;
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	8e 83       	std	Y+6, r24	; 0x06
					if (measure_count > 99){
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	84 36       	cpi	r24, 0x64	; 100
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <test_tick_accuracy+0xd2>
						measure_count = 0;
     f2c:	1e 82       	std	Y+6, r1	; 0x06
					}						
				}
		}
		
		
		decimal_point0 = 0;
     f2e:	19 82       	std	Y+1, r1	; 0x01
		decimal_point1 = 0;
     f30:	1a 82       	std	Y+2, r1	; 0x02
		if (tick_count < 12)
     f32:	80 91 50 21 	lds	r24, 0x2150
     f36:	90 91 51 21 	lds	r25, 0x2151
     f3a:	8c 30       	cpi	r24, 0x0C	; 12
     f3c:	91 05       	cpc	r25, r1
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <test_tick_accuracy+0xe6>
			decimal_point0 = 1;
     f40:	f9 82       	std	Y+1, r15	; 0x01
		if (beat_count < 2)
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	08 f4       	brcc	.+2      	; 0xf4a <test_tick_accuracy+0xee>
			decimal_point1 = 1;
     f48:	fa 82       	std	Y+2, r15	; 0x02
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     f4a:	0e 94 28 01 	call	0x250	; 0x250 <get_encoder_switch_edge>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	31 f4       	brne	.+12     	; 0xf5e <test_tick_accuracy+0x102>
			beat_count = 0;
     f52:	1d 82       	std	Y+5, r1	; 0x05
			measure_count = 0;
     f54:	1e 82       	std	Y+6, r1	; 0x06
			tick_count = 0;
     f56:	10 92 50 21 	sts	0x2150, r1
     f5a:	10 92 51 21 	sts	0x2151, r1
		}			
		
		if (get_toggle_switch_state())
     f5e:	0e 94 31 01 	call	0x262	; 0x262 <get_toggle_switch_state>
     f62:	88 23       	and	r24, r24
     f64:	49 f0       	breq	.+18     	; 0xf78 <test_tick_accuracy+0x11c>
			seven_segment_value = beat_count + 10*measure_count;
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
     f6a:	3a e0       	ldi	r19, 0x0A	; 10
     f6c:	83 9f       	mul	r24, r19
     f6e:	c0 01       	movw	r24, r0
     f70:	11 24       	eor	r1, r1
     f72:	82 0f       	add	r24, r18
     f74:	91 1d       	adc	r25, r1
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <test_tick_accuracy+0x120>
		else
			seven_segment_value = BPM;
     f78:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7c:	88 87       	std	Y+8, r24	; 0x08
     f7e:	99 87       	std	Y+9, r25	; 0x09
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	69 81       	ldd	r22, Y+1	; 0x01
     f84:	4a 81       	ldd	r20, Y+2	; 0x02
     f86:	2b 81       	ldd	r18, Y+3	; 0x03
     f88:	08 85       	ldd	r16, Y+8	; 0x08
     f8a:	19 85       	ldd	r17, Y+9	; 0x09
     f8c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <postloop_functions>
	}
     f90:	91 cf       	rjmp	.-222    	; 0xeb4 <test_tick_accuracy+0x58>

00000f92 <main>:
}

int main(void) {

//    test_BPM();
   test_tick_accuracy();
     f92:	0e 94 2e 07 	call	0xe5c	; 0xe5c <test_tick_accuracy>
//    test_seven_segment();

	return 0;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <serial_midi_send>:
#include <avr/interrupt.h>
#include "stdlib.h"

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     f9c:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     f9e:	80 91 b1 09 	lds	r24, 0x09B1
     fa2:	85 ff       	sbrs	r24, 5
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
     fa6:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     faa:	62 30       	cpi	r22, 0x02	; 2
     fac:	70 f0       	brcs	.+28     	; 0xfca <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     fae:	80 91 b1 09 	lds	r24, 0x09B1
     fb2:	85 ff       	sbrs	r24, 5
     fb4:	fc cf       	rjmp	.-8      	; 0xfae <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
     fb6:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     fba:	63 30       	cpi	r22, 0x03	; 3
     fbc:	31 f4       	brne	.+12     	; 0xfca <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     fbe:	80 91 b1 09 	lds	r24, 0x09B1
     fc2:	85 ff       	sbrs	r24, 5
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
     fc6:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <serial_midi_device>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
     fce:	84 e5       	ldi	r24, 0x54	; 84
     fd0:	91 e2       	ldi	r25, 0x21	; 33
     fd2:	08 95       	ret

00000fd4 <serial_midi_init>:

MidiDevice* serial_midi_init(){
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
     fd8:	c4 e5       	ldi	r28, 0x54	; 84
     fda:	d1 e2       	ldi	r29, 0x21	; 33
     fdc:	ce 01       	movw	r24, r28
     fde:	0e 94 2d 0a 	call	0x145a	; 0x145a <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
     fe2:	ce 01       	movw	r24, r28
     fe4:	6e ec       	ldi	r22, 0xCE	; 206
     fe6:	77 e0       	ldi	r23, 0x07	; 7
     fe8:	0e 94 85 0a 	call	0x150a	; 0x150a <midi_device_set_send_func>

   return serial_midi_device();
}
     fec:	ce 01       	movw	r24, r28
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     ff4:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     ff6:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     ff8:	63 83       	std	Z+3, r22	; 0x03
     ffa:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
     ffc:	11 82       	std	Z+1, r1	; 0x01
     ffe:	10 82       	st	Z, r1
}
    1000:	08 95       	ret

00001002 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	ec 01       	movw	r28, r24
    100c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    100e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <store_and_clear_interrupt>
    1012:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	c9 01       	movw	r24, r18
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	6a 81       	ldd	r22, Y+2	; 0x02
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divmodhi4>
    1024:	48 81       	ld	r20, Y
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	84 17       	cp	r24, r20
    102a:	95 07       	cpc	r25, r21
    102c:	29 f4       	brne	.+10     	; 0x1038 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    102e:	80 2f       	mov	r24, r16
    1030:	0e 94 7e 08 	call	0x10fc	; 0x10fc <restore_interrupt_setting>
      return false;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	13 c0       	rjmp	.+38     	; 0x105e <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    1038:	eb 81       	ldd	r30, Y+3	; 0x03
    103a:	fc 81       	ldd	r31, Y+4	; 0x04
    103c:	e2 0f       	add	r30, r18
    103e:	f3 1f       	adc	r31, r19
    1040:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	6a 81       	ldd	r22, Y+2	; 0x02
    104c:	c9 01       	movw	r24, r18
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divmodhi4>
    1054:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1056:	80 2f       	mov	r24, r16
    1058:	0e 94 7e 08 	call	0x10fc	; 0x10fc <restore_interrupt_setting>
      return true;
    105c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1070:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1074:	29 81       	ldd	r18, Y+1	; 0x01
    1076:	98 81       	ld	r25, Y
    1078:	29 17       	cp	r18, r25
    107a:	10 f0       	brcs	.+4      	; 0x1080 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    107c:	12 2f       	mov	r17, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    1080:	1a 81       	ldd	r17, Y+2	; 0x02
    1082:	12 0f       	add	r17, r18
    1084:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1086:	0e 94 7e 08 	call	0x10fc	; 0x10fc <restore_interrupt_setting>
   return len;
}
    108a:	81 2f       	mov	r24, r17
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	08 95       	ret

00001094 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1094:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1096:	80 81       	ld	r24, Z
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	86 0f       	add	r24, r22
    109c:	91 1d       	adc	r25, r1
    109e:	62 81       	ldd	r22, Z+2	; 0x02
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divmodhi4>
    10a6:	03 80       	ldd	r0, Z+3	; 0x03
    10a8:	f4 81       	ldd	r31, Z+4	; 0x04
    10aa:	e0 2d       	mov	r30, r0
    10ac:	e8 0f       	add	r30, r24
    10ae:	f9 1f       	adc	r31, r25
}
    10b0:	80 81       	ld	r24, Z
    10b2:	08 95       	ret

000010b4 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    10c4:	69 83       	std	Y+1, r22	; 0x01
    10c6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <store_and_clear_interrupt>
    10ca:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    10cc:	f8 01       	movw	r30, r16
    10ce:	20 81       	ld	r18, Z
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	69 81       	ldd	r22, Y+1	; 0x01
    10d4:	26 0f       	add	r18, r22
    10d6:	31 1d       	adc	r19, r1
    10d8:	62 81       	ldd	r22, Z+2	; 0x02
    10da:	c9 01       	movw	r24, r18
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divmodhi4>
    10e2:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    10e4:	84 2f       	mov	r24, r20
    10e6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <restore_interrupt_setting>
}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    10f6:	8f b7       	in	r24, 0x3f	; 63
    cli();
    10f8:	f8 94       	cli
    return sreg;
}
    10fa:	08 95       	ret

000010fc <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    10fc:	8f bf       	out	0x3f, r24	; 63
}
    10fe:	08 95       	ret

00001100 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1100:	88 1f       	adc	r24, r24
    1102:	88 27       	eor	r24, r24
    1104:	88 1f       	adc	r24, r24
    1106:	08 95       	ret

00001108 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	88 3f       	cpi	r24, 0xF8	; 248
    110c:	08 f4       	brcc	.+2      	; 0x1110 <midi_is_realtime+0x8>
    110e:	90 e0       	ldi	r25, 0x00	; 0
}
    1110:	89 2f       	mov	r24, r25
    1112:	08 95       	ret

00001114 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	20 7f       	andi	r18, 0xF0	; 240
    111a:	30 70       	andi	r19, 0x00	; 0
    111c:	20 3b       	cpi	r18, 0xB0	; 176
    111e:	31 05       	cpc	r19, r1
    1120:	f1 f0       	breq	.+60     	; 0x115e <midi_packet_length+0x4a>
    1122:	21 3b       	cpi	r18, 0xB1	; 177
    1124:	31 05       	cpc	r19, r1
    1126:	54 f4       	brge	.+20     	; 0x113c <midi_packet_length+0x28>
    1128:	20 39       	cpi	r18, 0x90	; 144
    112a:	31 05       	cpc	r19, r1
    112c:	c1 f0       	breq	.+48     	; 0x115e <midi_packet_length+0x4a>
    112e:	20 3a       	cpi	r18, 0xA0	; 160
    1130:	31 05       	cpc	r19, r1
    1132:	a9 f0       	breq	.+42     	; 0x115e <midi_packet_length+0x4a>
    1134:	20 38       	cpi	r18, 0x80	; 128
    1136:	31 05       	cpc	r19, r1
    1138:	e9 f4       	brne	.+58     	; 0x1174 <midi_packet_length+0x60>
    113a:	11 c0       	rjmp	.+34     	; 0x115e <midi_packet_length+0x4a>
    113c:	20 3d       	cpi	r18, 0xD0	; 208
    113e:	31 05       	cpc	r19, r1
    1140:	d9 f0       	breq	.+54     	; 0x1178 <midi_packet_length+0x64>
    1142:	21 3d       	cpi	r18, 0xD1	; 209
    1144:	31 05       	cpc	r19, r1
    1146:	24 f4       	brge	.+8      	; 0x1150 <midi_packet_length+0x3c>
    1148:	20 3c       	cpi	r18, 0xC0	; 192
    114a:	31 05       	cpc	r19, r1
    114c:	99 f4       	brne	.+38     	; 0x1174 <midi_packet_length+0x60>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <midi_packet_length+0x64>
    1150:	20 3e       	cpi	r18, 0xE0	; 224
    1152:	31 05       	cpc	r19, r1
    1154:	21 f0       	breq	.+8      	; 0x115e <midi_packet_length+0x4a>
    1156:	20 3f       	cpi	r18, 0xF0	; 240
    1158:	31 05       	cpc	r19, r1
    115a:	61 f4       	brne	.+24     	; 0x1174 <midi_packet_length+0x60>
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1162:	e8 2f       	mov	r30, r24
    1164:	e1 5f       	subi	r30, 0xF1	; 241
    1166:	ef 30       	cpi	r30, 0x0F	; 15
    1168:	48 f4       	brcc	.+18     	; 0x117c <midi_packet_length+0x68>
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	e0 5e       	subi	r30, 0xE0	; 224
    116e:	ff 4d       	sbci	r31, 0xDF	; 223
    1170:	80 81       	ld	r24, Z
    1172:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	08 95       	ret
    117c:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    117e:	08 95       	ret

00001180 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1180:	0f 93       	push	r16
    1182:	36 2f       	mov	r19, r22
    1184:	54 2f       	mov	r21, r20
    1186:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1188:	3f 70       	andi	r19, 0x0F	; 15
    118a:	30 6b       	ori	r19, 0xB0	; 176
    118c:	5f 77       	andi	r21, 0x7F	; 127
    118e:	0f 77       	andi	r16, 0x7F	; 127
    1190:	dc 01       	movw	r26, r24
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	63 e0       	ldi	r22, 0x03	; 3
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	43 2f       	mov	r20, r19
    119c:	25 2f       	mov	r18, r21
    119e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    11a0:	0f 91       	pop	r16
    11a2:	08 95       	ret

000011a4 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    11a4:	0f 93       	push	r16
    11a6:	36 2f       	mov	r19, r22
    11a8:	54 2f       	mov	r21, r20
    11aa:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    11ac:	3f 70       	andi	r19, 0x0F	; 15
    11ae:	30 69       	ori	r19, 0x90	; 144
    11b0:	5f 77       	andi	r21, 0x7F	; 127
    11b2:	0f 77       	andi	r16, 0x7F	; 127
    11b4:	dc 01       	movw	r26, r24
    11b6:	ed 91       	ld	r30, X+
    11b8:	fc 91       	ld	r31, X
    11ba:	63 e0       	ldi	r22, 0x03	; 3
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	43 2f       	mov	r20, r19
    11c0:	25 2f       	mov	r18, r21
    11c2:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    11c8:	0f 93       	push	r16
    11ca:	36 2f       	mov	r19, r22
    11cc:	54 2f       	mov	r21, r20
    11ce:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    11d0:	3f 70       	andi	r19, 0x0F	; 15
    11d2:	30 68       	ori	r19, 0x80	; 128
    11d4:	5f 77       	andi	r21, 0x7F	; 127
    11d6:	0f 77       	andi	r16, 0x7F	; 127
    11d8:	dc 01       	movw	r26, r24
    11da:	ed 91       	ld	r30, X+
    11dc:	fc 91       	ld	r31, X
    11de:	63 e0       	ldi	r22, 0x03	; 3
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	43 2f       	mov	r20, r19
    11e4:	25 2f       	mov	r18, r21
    11e6:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    11ec:	0f 93       	push	r16
    11ee:	36 2f       	mov	r19, r22
    11f0:	54 2f       	mov	r21, r20
    11f2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    11f4:	3f 70       	andi	r19, 0x0F	; 15
    11f6:	30 6a       	ori	r19, 0xA0	; 160
    11f8:	5f 77       	andi	r21, 0x7F	; 127
    11fa:	0f 77       	andi	r16, 0x7F	; 127
    11fc:	dc 01       	movw	r26, r24
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	43 2f       	mov	r20, r19
    1208:	25 2f       	mov	r18, r21
    120a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1216:	20 e2       	ldi	r18, 0x20	; 32
    1218:	40 30       	cpi	r20, 0x00	; 0
    121a:	52 07       	cpc	r21, r18
    121c:	3c f4       	brge	.+14     	; 0x122c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    121e:	a0 ee       	ldi	r26, 0xE0	; 224
    1220:	40 30       	cpi	r20, 0x00	; 0
    1222:	5a 07       	cpc	r21, r26
    1224:	34 f0       	brlt	.+12     	; 0x1232 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1226:	00 50       	subi	r16, 0x00	; 0
    1228:	10 4e       	sbci	r17, 0xE0	; 224
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    122c:	0f ef       	ldi	r16, 0xFF	; 255
    122e:	1f e3       	ldi	r17, 0x3F	; 63
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1236:	46 2f       	mov	r20, r22
    1238:	4f 70       	andi	r20, 0x0F	; 15
    123a:	40 6e       	ori	r20, 0xE0	; 224
    123c:	20 2f       	mov	r18, r16
    123e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1240:	00 0f       	add	r16, r16
    1242:	01 2f       	mov	r16, r17
    1244:	00 1f       	adc	r16, r16
    1246:	11 0b       	sbc	r17, r17
    1248:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    124a:	0f 77       	andi	r16, 0x7F	; 127
    124c:	dc 01       	movw	r26, r24
    124e:	ed 91       	ld	r30, X+
    1250:	fc 91       	ld	r31, X
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    125e:	0f 93       	push	r16
    1260:	36 2f       	mov	r19, r22
    1262:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1264:	3f 70       	andi	r19, 0x0F	; 15
    1266:	30 6c       	ori	r19, 0xC0	; 192
    1268:	2f 77       	andi	r18, 0x7F	; 127
    126a:	dc 01       	movw	r26, r24
    126c:	ed 91       	ld	r30, X+
    126e:	fc 91       	ld	r31, X
    1270:	62 e0       	ldi	r22, 0x02	; 2
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	43 2f       	mov	r20, r19
    1276:	00 e0       	ldi	r16, 0x00	; 0
    1278:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    127e:	0f 93       	push	r16
    1280:	36 2f       	mov	r19, r22
    1282:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1284:	3f 70       	andi	r19, 0x0F	; 15
    1286:	30 6d       	ori	r19, 0xD0	; 208
    1288:	2f 77       	andi	r18, 0x7F	; 127
    128a:	dc 01       	movw	r26, r24
    128c:	ed 91       	ld	r30, X+
    128e:	fc 91       	ld	r31, X
    1290:	62 e0       	ldi	r22, 0x02	; 2
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	43 2f       	mov	r20, r19
    1296:	00 e0       	ldi	r16, 0x00	; 0
    1298:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    129e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    12a0:	dc 01       	movw	r26, r24
    12a2:	ed 91       	ld	r30, X+
    12a4:	fc 91       	ld	r31, X
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	48 ef       	ldi	r20, 0xF8	; 248
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	00 e0       	ldi	r16, 0x00	; 0
    12b0:	09 95       	icall
}
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    12b6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    12b8:	dc 01       	movw	r26, r24
    12ba:	ed 91       	ld	r30, X+
    12bc:	fc 91       	ld	r31, X
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	49 ef       	ldi	r20, 0xF9	; 249
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	00 e0       	ldi	r16, 0x00	; 0
    12c8:	09 95       	icall
}
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <midi_send_start>:

void midi_send_start(MidiDevice * device){
    12ce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    12d0:	dc 01       	movw	r26, r24
    12d2:	ed 91       	ld	r30, X+
    12d4:	fc 91       	ld	r31, X
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	4a ef       	ldi	r20, 0xFA	; 250
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	09 95       	icall
}
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    12e6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    12e8:	dc 01       	movw	r26, r24
    12ea:	ed 91       	ld	r30, X+
    12ec:	fc 91       	ld	r31, X
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	4b ef       	ldi	r20, 0xFB	; 251
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	09 95       	icall
}
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    12fe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1300:	dc 01       	movw	r26, r24
    1302:	ed 91       	ld	r30, X+
    1304:	fc 91       	ld	r31, X
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	4c ef       	ldi	r20, 0xFC	; 252
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	09 95       	icall
}
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1316:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1318:	dc 01       	movw	r26, r24
    131a:	ed 91       	ld	r30, X+
    131c:	fc 91       	ld	r31, X
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	4e ef       	ldi	r20, 0xFE	; 254
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	00 e0       	ldi	r16, 0x00	; 0
    1328:	09 95       	icall
}
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    132e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1330:	dc 01       	movw	r26, r24
    1332:	ed 91       	ld	r30, X+
    1334:	fc 91       	ld	r31, X
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	4f ef       	ldi	r20, 0xFF	; 255
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	00 e0       	ldi	r16, 0x00	; 0
    1340:	09 95       	icall
}
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1346:	0f 93       	push	r16
    1348:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    134a:	2f 77       	andi	r18, 0x7F	; 127
    134c:	dc 01       	movw	r26, r24
    134e:	ed 91       	ld	r30, X+
    1350:	fc 91       	ld	r31, X
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	41 ef       	ldi	r20, 0xF1	; 241
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
   device->send_func(device, 3,
    1364:	26 2f       	mov	r18, r22
    1366:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1368:	8b 01       	movw	r16, r22
    136a:	00 0f       	add	r16, r16
    136c:	01 2f       	mov	r16, r17
    136e:	00 1f       	adc	r16, r16
    1370:	11 0b       	sbc	r17, r17
    1372:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1374:	0f 77       	andi	r16, 0x7F	; 127
    1376:	dc 01       	movw	r26, r24
    1378:	ed 91       	ld	r30, X+
    137a:	fc 91       	ld	r31, X
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	42 ef       	ldi	r20, 0xF2	; 242
    1382:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    138a:	0f 93       	push	r16
    138c:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    138e:	2f 77       	andi	r18, 0x7F	; 127
    1390:	dc 01       	movw	r26, r24
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	62 e0       	ldi	r22, 0x02	; 2
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	43 ef       	ldi	r20, 0xF3	; 243
    139c:	00 e0       	ldi	r16, 0x00	; 0
    139e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    13a0:	0f 91       	pop	r16
    13a2:	08 95       	ret

000013a4 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    13a4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    13a6:	dc 01       	movw	r26, r24
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	46 ef       	ldi	r20, 0xF6	; 246
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	00 e0       	ldi	r16, 0x00	; 0
    13b6:	09 95       	icall
}
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    13bc:	0f 93       	push	r16
    13be:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    13c0:	dc 01       	movw	r26, r24
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	09 95       	icall
}
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret

000013d4 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    13d4:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    13d6:	dc 01       	movw	r26, r24
    13d8:	ed 91       	ld	r30, X+
    13da:	fc 91       	ld	r31, X
    13dc:	09 95       	icall
}
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    13e2:	fc 01       	movw	r30, r24
    13e4:	62 83       	std	Z+2, r22	; 0x02
    13e6:	73 83       	std	Z+3, r23	; 0x03
}
    13e8:	08 95       	ret

000013ea <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    13ea:	fc 01       	movw	r30, r24
    13ec:	64 83       	std	Z+4, r22	; 0x04
    13ee:	75 83       	std	Z+5, r23	; 0x05
}
    13f0:	08 95       	ret

000013f2 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    13f2:	fc 01       	movw	r30, r24
    13f4:	66 83       	std	Z+6, r22	; 0x06
    13f6:	77 83       	std	Z+7, r23	; 0x07
}
    13f8:	08 95       	ret

000013fa <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    13fa:	fc 01       	movw	r30, r24
    13fc:	60 87       	std	Z+8, r22	; 0x08
    13fe:	71 87       	std	Z+9, r23	; 0x09
}
    1400:	08 95       	ret

00001402 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1402:	fc 01       	movw	r30, r24
    1404:	62 87       	std	Z+10, r22	; 0x0a
    1406:	73 87       	std	Z+11, r23	; 0x0b
}
    1408:	08 95       	ret

0000140a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    140a:	fc 01       	movw	r30, r24
    140c:	64 87       	std	Z+12, r22	; 0x0c
    140e:	75 87       	std	Z+13, r23	; 0x0d
}
    1410:	08 95       	ret

00001412 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1412:	fc 01       	movw	r30, r24
    1414:	66 87       	std	Z+14, r22	; 0x0e
    1416:	77 87       	std	Z+15, r23	; 0x0f
}
    1418:	08 95       	ret

0000141a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    141a:	fc 01       	movw	r30, r24
    141c:	60 8b       	std	Z+16, r22	; 0x10
    141e:	71 8b       	std	Z+17, r23	; 0x11
}
    1420:	08 95       	ret

00001422 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1422:	fc 01       	movw	r30, r24
    1424:	62 8b       	std	Z+18, r22	; 0x12
    1426:	73 8b       	std	Z+19, r23	; 0x13
}
    1428:	08 95       	ret

0000142a <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    142a:	fc 01       	movw	r30, r24
    142c:	64 8b       	std	Z+20, r22	; 0x14
    142e:	75 8b       	std	Z+21, r23	; 0x15
}
    1430:	08 95       	ret

00001432 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1432:	fc 01       	movw	r30, r24
    1434:	66 8b       	std	Z+22, r22	; 0x16
    1436:	77 8b       	std	Z+23, r23	; 0x17
}
    1438:	08 95       	ret

0000143a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    143a:	fc 01       	movw	r30, r24
    143c:	60 8f       	std	Z+24, r22	; 0x18
    143e:	71 8f       	std	Z+25, r23	; 0x19
}
    1440:	08 95       	ret

00001442 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1442:	fc 01       	movw	r30, r24
    1444:	62 8f       	std	Z+26, r22	; 0x1a
    1446:	73 8f       	std	Z+27, r23	; 0x1b
}
    1448:	08 95       	ret

0000144a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    144a:	fc 01       	movw	r30, r24
    144c:	64 8f       	std	Z+28, r22	; 0x1c
    144e:	75 8f       	std	Z+29, r23	; 0x1d
}
    1450:	08 95       	ret

00001452 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1452:	fc 01       	movw	r30, r24
    1454:	66 8f       	std	Z+30, r22	; 0x1e
    1456:	77 8f       	std	Z+31, r23	; 0x1f
}
    1458:	08 95       	ret

0000145a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1460:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1462:	1e a2       	std	Y+38, r1	; 0x26
    1464:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1466:	bc 01       	movw	r22, r24
    1468:	68 5d       	subi	r22, 0xD8	; 216
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	88 51       	subi	r24, 0x18	; 24
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	40 ec       	ldi	r20, 0xC0	; 192
    1472:	0e 94 fa 07 	call	0xff4	; 0xff4 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1476:	1a 82       	std	Y+2, r1	; 0x02
    1478:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    147a:	1c 82       	std	Y+4, r1	; 0x04
    147c:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    147e:	1e 82       	std	Y+6, r1	; 0x06
    1480:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1482:	18 86       	std	Y+8, r1	; 0x08
    1484:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1486:	1a 86       	std	Y+10, r1	; 0x0a
    1488:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    148a:	1c 86       	std	Y+12, r1	; 0x0c
    148c:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    148e:	1e 86       	std	Y+14, r1	; 0x0e
    1490:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1492:	18 8a       	std	Y+16, r1	; 0x10
    1494:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1496:	1a 8a       	std	Y+18, r1	; 0x12
    1498:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    149a:	1c 8a       	std	Y+20, r1	; 0x14
    149c:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    149e:	1e 8a       	std	Y+22, r1	; 0x16
    14a0:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    14a2:	18 8e       	std	Y+24, r1	; 0x18
    14a4:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    14a6:	1a 8e       	std	Y+26, r1	; 0x1a
    14a8:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    14aa:	1c 8e       	std	Y+28, r1	; 0x1c
    14ac:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    14ae:	1e 8e       	std	Y+30, r1	; 0x1e
    14b0:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    14b2:	18 a2       	std	Y+32, r1	; 0x20
    14b4:	19 a2       	std	Y+33, r1	; 0x21
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    14d2:	e4 2f       	mov	r30, r20
    14d4:	f5 2f       	mov	r31, r21
    14d6:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    14d8:	8c 01       	movw	r16, r24
    14da:	08 51       	subi	r16, 0x18	; 24
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    14e0:	f6 01       	movw	r30, r12
    14e2:	61 91       	ld	r22, Z+
    14e4:	6f 01       	movw	r12, r30
    14e6:	c8 01       	movw	r24, r16
    14e8:	49 83       	std	Y+1, r20	; 0x01
    14ea:	0e 94 01 08 	call	0x1002	; 0x1002 <bytequeue_enqueue>
    14ee:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    14f0:	8c 2d       	mov	r24, r12
    14f2:	84 1b       	sub	r24, r20
    14f4:	8f 15       	cp	r24, r15
    14f6:	a0 f3       	brcs	.-24     	; 0x14e0 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	08 95       	ret

0000150a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    150a:	fc 01       	movw	r30, r24
    150c:	60 83       	st	Z, r22
    150e:	71 83       	std	Z+1, r23	; 0x01
}
    1510:	08 95       	ret

00001512 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1512:	fc 01       	movw	r30, r24
    1514:	60 a3       	std	Z+32, r22	; 0x20
    1516:	71 a3       	std	Z+33, r23	; 0x21
}
    1518:	08 95       	ret

0000151a <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
    152c:	6b 01       	movw	r12, r22
    152e:	14 2f       	mov	r17, r20
    1530:	e2 2e       	mov	r14, r18
    1532:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1534:	8d a1       	ldd	r24, Y+37	; 0x25
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	31 f4       	brne	.+12     	; 0x1546 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    153a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    153c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	09 f0       	breq	.+2      	; 0x1544 <midi_input_callbacks+0x2a>
    1542:	83 c0       	rjmp	.+262    	; 0x164a <midi_input_callbacks+0x130>
    1544:	95 c0       	rjmp	.+298    	; 0x1670 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1546:	62 30       	cpi	r22, 0x02	; 2
    1548:	71 05       	cpc	r23, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <midi_input_callbacks+0x34>
    154c:	42 c0       	rjmp	.+132    	; 0x15d2 <midi_input_callbacks+0xb8>
    154e:	63 30       	cpi	r22, 0x03	; 3
    1550:	71 05       	cpc	r23, r1
    1552:	29 f0       	breq	.+10     	; 0x155e <midi_input_callbacks+0x44>
    1554:	61 30       	cpi	r22, 0x01	; 1
    1556:	71 05       	cpc	r23, r1
    1558:	09 f0       	breq	.+2      	; 0x155c <midi_input_callbacks+0x42>
    155a:	73 c0       	rjmp	.+230    	; 0x1642 <midi_input_callbacks+0x128>
    155c:	60 c0       	rjmp	.+192    	; 0x161e <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    155e:	84 2f       	mov	r24, r20
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	80 7f       	andi	r24, 0xF0	; 240
    1564:	90 70       	andi	r25, 0x00	; 0
    1566:	80 3a       	cpi	r24, 0xA0	; 160
    1568:	91 05       	cpc	r25, r1
    156a:	e1 f0       	breq	.+56     	; 0x15a4 <midi_input_callbacks+0x8a>
    156c:	81 3a       	cpi	r24, 0xA1	; 161
    156e:	91 05       	cpc	r25, r1
    1570:	3c f4       	brge	.+14     	; 0x1580 <midi_input_callbacks+0x66>
    1572:	80 38       	cpi	r24, 0x80	; 128
    1574:	91 05       	cpc	r25, r1
    1576:	99 f0       	breq	.+38     	; 0x159e <midi_input_callbacks+0x84>
    1578:	80 39       	cpi	r24, 0x90	; 144
    157a:	91 05       	cpc	r25, r1
    157c:	f9 f4       	brne	.+62     	; 0x15bc <midi_input_callbacks+0xa2>
    157e:	0c c0       	rjmp	.+24     	; 0x1598 <midi_input_callbacks+0x7e>
    1580:	80 3e       	cpi	r24, 0xE0	; 224
    1582:	91 05       	cpc	r25, r1
    1584:	91 f0       	breq	.+36     	; 0x15aa <midi_input_callbacks+0x90>
    1586:	80 3f       	cpi	r24, 0xF0	; 240
    1588:	91 05       	cpc	r25, r1
    158a:	91 f0       	breq	.+36     	; 0x15b0 <midi_input_callbacks+0x96>
    158c:	80 3b       	cpi	r24, 0xB0	; 176
    158e:	91 05       	cpc	r25, r1
    1590:	a9 f4       	brne	.+42     	; 0x15bc <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1592:	ea 81       	ldd	r30, Y+2	; 0x02
    1594:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1598:	ec 81       	ldd	r30, Y+4	; 0x04
    159a:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    159c:	11 c0       	rjmp	.+34     	; 0x15c0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    159e:	ee 81       	ldd	r30, Y+6	; 0x06
    15a0:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    15a2:	0e c0       	rjmp	.+28     	; 0x15c0 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    15a4:	e8 85       	ldd	r30, Y+8	; 0x08
    15a6:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    15aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    15ac:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    15ae:	08 c0       	rjmp	.+16     	; 0x15c0 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    15b0:	42 3f       	cpi	r20, 0xF2	; 242
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <midi_input_callbacks+0x9c>
    15b4:	5d c0       	rjmp	.+186    	; 0x1670 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    15b6:	ec 85       	ldd	r30, Y+12	; 0x0c
    15b8:	fd 85       	ldd	r31, Y+13	; 0x0d
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    15bc:	e0 e0       	ldi	r30, 0x00	; 0
    15be:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    15c0:	30 97       	sbiw	r30, 0x00	; 0
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <midi_input_callbacks+0xac>
    15c4:	55 c0       	rjmp	.+170    	; 0x1670 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    15c6:	ce 01       	movw	r24, r28
    15c8:	61 2f       	mov	r22, r17
    15ca:	4e 2d       	mov	r20, r14
    15cc:	2f 2d       	mov	r18, r15
    15ce:	09 95       	icall
    15d0:	42 c0       	rjmp	.+132    	; 0x1656 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    15d2:	84 2f       	mov	r24, r20
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	80 7f       	andi	r24, 0xF0	; 240
    15d8:	90 70       	andi	r25, 0x00	; 0
    15da:	80 3d       	cpi	r24, 0xD0	; 208
    15dc:	91 05       	cpc	r25, r1
    15de:	49 f0       	breq	.+18     	; 0x15f2 <midi_input_callbacks+0xd8>
    15e0:	80 3f       	cpi	r24, 0xF0	; 240
    15e2:	91 05       	cpc	r25, r1
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <midi_input_callbacks+0xde>
    15e6:	80 3c       	cpi	r24, 0xC0	; 192
    15e8:	91 05       	cpc	r25, r1
    15ea:	81 f4       	brne	.+32     	; 0x160c <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    15ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ee:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    15f2:	e8 89       	ldd	r30, Y+16	; 0x10
    15f4:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    15f8:	43 3f       	cpi	r20, 0xF3	; 243
    15fa:	19 f4       	brne	.+6      	; 0x1602 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    15fc:	ea 89       	ldd	r30, Y+18	; 0x12
    15fe:	fb 89       	ldd	r31, Y+19	; 0x13
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1602:	41 3f       	cpi	r20, 0xF1	; 241
    1604:	a9 f5       	brne	.+106    	; 0x1670 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1606:	ec 89       	ldd	r30, Y+20	; 0x14
    1608:	fd 89       	ldd	r31, Y+21	; 0x15
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    160c:	e0 e0       	ldi	r30, 0x00	; 0
    160e:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1610:	30 97       	sbiw	r30, 0x00	; 0
    1612:	71 f1       	breq	.+92     	; 0x1670 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1614:	ce 01       	movw	r24, r28
    1616:	61 2f       	mov	r22, r17
    1618:	4e 2d       	mov	r20, r14
    161a:	09 95       	icall
    161c:	1c c0       	rjmp	.+56     	; 0x1656 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    161e:	84 2f       	mov	r24, r20
    1620:	0e 94 84 08 	call	0x1108	; 0x1108 <midi_is_realtime>
    1624:	88 23       	and	r24, r24
    1626:	19 f0       	breq	.+6      	; 0x162e <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1628:	ee 89       	ldd	r30, Y+22	; 0x16
    162a:	ff 89       	ldd	r31, Y+23	; 0x17
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    162e:	16 3f       	cpi	r17, 0xF6	; 246
    1630:	f9 f4       	brne	.+62     	; 0x1670 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1632:	e8 8d       	ldd	r30, Y+24	; 0x18
    1634:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1636:	30 97       	sbiw	r30, 0x00	; 0
    1638:	d9 f0       	breq	.+54     	; 0x1670 <midi_input_callbacks+0x156>
                  func(device, byte0);
    163a:	ce 01       	movw	r24, r28
    163c:	61 2f       	mov	r22, r17
    163e:	09 95       	icall
    1640:	0a c0       	rjmp	.+20     	; 0x1656 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1642:	64 30       	cpi	r22, 0x04	; 4
    1644:	71 05       	cpc	r23, r1
    1646:	90 f4       	brcc	.+36     	; 0x166c <midi_input_callbacks+0x152>
    1648:	13 c0       	rjmp	.+38     	; 0x1670 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    164a:	ce 01       	movw	r24, r28
    164c:	b6 01       	movw	r22, r12
    164e:	41 2f       	mov	r20, r17
    1650:	2e 2d       	mov	r18, r14
    1652:	0f 2d       	mov	r16, r15
    1654:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1656:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1658:	ff 8d       	ldd	r31, Y+31	; 0x1f
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	71 f0       	breq	.+28     	; 0x167a <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    165e:	ce 01       	movw	r24, r28
    1660:	b6 01       	movw	r22, r12
    1662:	41 2f       	mov	r20, r17
    1664:	2e 2d       	mov	r18, r14
    1666:	0f 2d       	mov	r16, r15
    1668:	09 95       	icall
    166a:	07 c0       	rjmp	.+14     	; 0x167a <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    166c:	cc 24       	eor	r12, r12
    166e:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1670:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1672:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	49 f7       	brne	.-46     	; 0x164a <midi_input_callbacks+0x130>
    1678:	ee cf       	rjmp	.-36     	; 0x1656 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	08 95       	ret

0000168c <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
    169a:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    169c:	86 2f       	mov	r24, r22
    169e:	0e 94 84 08 	call	0x1108	; 0x1108 <midi_is_realtime>
    16a2:	88 23       	and	r24, r24
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    16a6:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    16ac:	ce 01       	movw	r24, r28
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	41 2f       	mov	r20, r17
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	00 e0       	ldi	r16, 0x00	; 0
    16b8:	0e 94 8d 0a 	call	0x151a	; 0x151a <midi_input_callbacks>
      device->input_state = state;
    16bc:	ed a2       	std	Y+37, r14	; 0x25
    16be:	7e c0       	rjmp	.+252    	; 0x17bc <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    16c0:	81 2f       	mov	r24, r17
    16c2:	0e 94 80 08 	call	0x1100	; 0x1100 <midi_is_statusbyte>
    16c6:	4d a1       	ldd	r20, Y+37	; 0x25
    16c8:	88 23       	and	r24, r24
    16ca:	09 f4       	brne	.+2      	; 0x16ce <midi_process_byte+0x42>
    16cc:	42 c0       	rjmp	.+132    	; 0x1752 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    16ce:	44 30       	cpi	r20, 0x04	; 4
    16d0:	29 f0       	breq	.+10     	; 0x16dc <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    16d2:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	8e a3       	std	Y+38, r24	; 0x26
    16da:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    16dc:	81 2f       	mov	r24, r17
    16de:	0e 94 8a 08 	call	0x1114	; 0x1114 <midi_packet_length>
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	39 f0       	breq	.+14     	; 0x16f4 <midi_process_byte+0x68>
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	78 f0       	brcs	.+30     	; 0x1708 <midi_process_byte+0x7c>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	59 f0       	breq	.+22     	; 0x1704 <midi_process_byte+0x78>
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	61 f5       	brne	.+88     	; 0x174a <midi_process_byte+0xbe>
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    16f4:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    16f6:	ce 01       	movw	r24, r28
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	41 2f       	mov	r20, r17
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	00 e0       	ldi	r16, 0x00	; 0
    1702:	1f c0       	rjmp	.+62     	; 0x1742 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1704:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1706:	5a c0       	rjmp	.+180    	; 0x17bc <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1708:	10 3f       	cpi	r17, 0xF0	; 240
    170a:	19 f0       	breq	.+6      	; 0x1712 <midi_process_byte+0x86>
    170c:	17 3f       	cpi	r17, 0xF7	; 247
    170e:	e9 f4       	brne	.+58     	; 0x174a <midi_process_byte+0xbe>
    1710:	04 c0       	rjmp	.+8      	; 0x171a <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1716:	1a a3       	std	Y+34, r17	; 0x22
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    171a:	2e a1       	ldd	r18, Y+38	; 0x26
    171c:	3f a1       	ldd	r19, Y+39	; 0x27
    171e:	c9 01       	movw	r24, r18
    1720:	63 e0       	ldi	r22, 0x03	; 3
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	0e 94 98 12 	call	0x2530	; 0x2530 <__udivmodhi4>
    1728:	8c 0f       	add	r24, r28
    172a:	9d 1f       	adc	r25, r29
    172c:	fc 01       	movw	r30, r24
    172e:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1730:	b9 01       	movw	r22, r18
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	6e a3       	std	Y+38, r22	; 0x26
    1738:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    173a:	ce 01       	movw	r24, r28
    173c:	4a a1       	ldd	r20, Y+34	; 0x22
    173e:	2b a1       	ldd	r18, Y+35	; 0x23
    1740:	0c a1       	ldd	r16, Y+36	; 0x24
    1742:	0e 94 8d 0a 	call	0x151a	; 0x151a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1746:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1748:	39 c0       	rjmp	.+114    	; 0x17bc <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    174a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    174c:	1e a2       	std	Y+38, r1	; 0x26
    174e:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1750:	35 c0       	rjmp	.+106    	; 0x17bc <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1752:	44 23       	and	r20, r20
    1754:	99 f1       	breq	.+102    	; 0x17bc <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1756:	2e a1       	ldd	r18, Y+38	; 0x26
    1758:	3f a1       	ldd	r19, Y+39	; 0x27
    175a:	c9 01       	movw	r24, r18
    175c:	63 e0       	ldi	r22, 0x03	; 3
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	0e 94 98 12 	call	0x2530	; 0x2530 <__udivmodhi4>
    1764:	7c 01       	movw	r14, r24
    1766:	fe 01       	movw	r30, r28
    1768:	e8 0f       	add	r30, r24
    176a:	f9 1f       	adc	r31, r25
    176c:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    176e:	b9 01       	movw	r22, r18
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	6e a3       	std	Y+38, r22	; 0x26
    1776:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	91 f0       	breq	.+36     	; 0x17a2 <midi_process_byte+0x116>
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	e8 16       	cp	r14, r24
    1782:	f1 04       	cpc	r15, r1
    1784:	d9 f4       	brne	.+54     	; 0x17bc <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1786:	ce 01       	movw	r24, r28
    1788:	4a a1       	ldd	r20, Y+34	; 0x22
    178a:	2b a1       	ldd	r18, Y+35	; 0x23
    178c:	0c a1       	ldd	r16, Y+36	; 0x24
    178e:	0e 94 8d 0a 	call	0x151a	; 0x151a <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	91 f0       	breq	.+36     	; 0x17bc <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	8e a3       	std	Y+38, r24	; 0x26
    179e:	9f a3       	std	Y+39, r25	; 0x27
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    17a2:	42 30       	cpi	r20, 0x02	; 2
    17a4:	59 f4       	brne	.+22     	; 0x17bc <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    17a6:	ce 01       	movw	r24, r28
    17a8:	4a a1       	ldd	r20, Y+34	; 0x22
    17aa:	2b a1       	ldd	r18, Y+35	; 0x23
    17ac:	00 e0       	ldi	r16, 0x00	; 0
    17ae:	0e 94 8d 0a 	call	0x151a	; 0x151a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    17b2:	8d a1       	ldd	r24, Y+37	; 0x25
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	11 f0       	breq	.+4      	; 0x17bc <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    17b8:	ee a2       	std	Y+38, r14	; 0x26
    17ba:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ec 01       	movw	r28, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    17dc:	e8 a1       	ldd	r30, Y+32	; 0x20
    17de:	f9 a1       	ldd	r31, Y+33	; 0x21
    17e0:	30 97       	sbiw	r30, 0x00	; 0
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <midi_device_process+0x1c>
      device->pre_input_process_callback(device);
    17e4:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    17e6:	8e 01       	movw	r16, r28
    17e8:	08 51       	subi	r16, 0x18	; 24
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	c8 01       	movw	r24, r16
    17ee:	0e 94 34 08 	call	0x1068	; 0x1068 <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    17f2:	ee 24       	eor	r14, r14
    17f4:	ff 24       	eor	r15, r15
    17f6:	c8 2e       	mov	r12, r24
    17f8:	dd 24       	eor	r13, r13
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <midi_device_process+0x50>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    17fc:	c8 01       	movw	r24, r16
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 4a 08 	call	0x1094	; 0x1094 <bytequeue_get>
    1804:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1806:	ce 01       	movw	r24, r28
    1808:	0e 94 46 0b 	call	0x168c	; 0x168c <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    180c:	c8 01       	movw	r24, r16
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1814:	08 94       	sec
    1816:	e1 1c       	adc	r14, r1
    1818:	f1 1c       	adc	r15, r1
    181a:	ec 14       	cp	r14, r12
    181c:	fd 04       	cpc	r15, r13
    181e:	70 f3       	brcs	.-36     	; 0x17fc <midi_device_process+0x32>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	08 95       	ret

00001832 <__fixunssfsi>:
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	7b 01       	movw	r14, r22
    183c:	8c 01       	movw	r16, r24
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	5f e4       	ldi	r21, 0x4F	; 79
    1846:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__gesf2>
    184a:	87 fd       	sbrc	r24, 7
    184c:	11 c0       	rjmp	.+34     	; 0x1870 <__fixunssfsi+0x3e>
    184e:	c8 01       	movw	r24, r16
    1850:	b7 01       	movw	r22, r14
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	5f e4       	ldi	r21, 0x4F	; 79
    185a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__subsf3>
    185e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	20 50       	subi	r18, 0x00	; 0
    1868:	30 40       	sbci	r19, 0x00	; 0
    186a:	40 40       	sbci	r20, 0x00	; 0
    186c:	50 48       	sbci	r21, 0x80	; 128
    186e:	06 c0       	rjmp	.+12     	; 0x187c <__fixunssfsi+0x4a>
    1870:	c8 01       	movw	r24, r16
    1872:	b7 01       	movw	r22, r14
    1874:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	b9 01       	movw	r22, r18
    187e:	ca 01       	movw	r24, r20
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	08 95       	ret

0000188a <_fpadd_parts>:
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e4       	ldi	r30, 0x4B	; 75
    1890:	fc e0       	ldi	r31, 0x0C	; 12
    1892:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x8>
    1896:	fc 01       	movw	r30, r24
    1898:	ea 01       	movw	r28, r20
    189a:	80 81       	ld	r24, Z
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <_fpadd_parts+0x18>
    18a0:	38 c1       	rjmp	.+624    	; 0x1b12 <_fpadd_parts+0x288>
    18a2:	db 01       	movw	r26, r22
    18a4:	9c 91       	ld	r25, X
    18a6:	92 30       	cpi	r25, 0x02	; 2
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <_fpadd_parts+0x22>
    18aa:	30 c1       	rjmp	.+608    	; 0x1b0c <_fpadd_parts+0x282>
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	59 f4       	brne	.+22     	; 0x18c6 <_fpadd_parts+0x3c>
    18b0:	94 30       	cpi	r25, 0x04	; 4
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <_fpadd_parts+0x2c>
    18b4:	2e c1       	rjmp	.+604    	; 0x1b12 <_fpadd_parts+0x288>
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	11 96       	adiw	r26, 0x01	; 1
    18ba:	8c 91       	ld	r24, X
    18bc:	11 97       	sbiw	r26, 0x01	; 1
    18be:	98 17       	cp	r25, r24
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <_fpadd_parts+0x3a>
    18c2:	21 c1       	rjmp	.+578    	; 0x1b06 <_fpadd_parts+0x27c>
    18c4:	26 c1       	rjmp	.+588    	; 0x1b12 <_fpadd_parts+0x288>
    18c6:	94 30       	cpi	r25, 0x04	; 4
    18c8:	09 f4       	brne	.+2      	; 0x18cc <_fpadd_parts+0x42>
    18ca:	20 c1       	rjmp	.+576    	; 0x1b0c <_fpadd_parts+0x282>
    18cc:	92 30       	cpi	r25, 0x02	; 2
    18ce:	b1 f4       	brne	.+44     	; 0x18fc <_fpadd_parts+0x72>
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <_fpadd_parts+0x4c>
    18d4:	1e c1       	rjmp	.+572    	; 0x1b12 <_fpadd_parts+0x288>
    18d6:	ca 01       	movw	r24, r20
    18d8:	af 01       	movw	r20, r30
    18da:	28 e0       	ldi	r18, 0x08	; 8
    18dc:	da 01       	movw	r26, r20
    18de:	0d 90       	ld	r0, X+
    18e0:	ad 01       	movw	r20, r26
    18e2:	dc 01       	movw	r26, r24
    18e4:	0d 92       	st	X+, r0
    18e6:	cd 01       	movw	r24, r26
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	c1 f7       	brne	.-16     	; 0x18dc <_fpadd_parts+0x52>
    18ec:	db 01       	movw	r26, r22
    18ee:	11 96       	adiw	r26, 0x01	; 1
    18f0:	8c 91       	ld	r24, X
    18f2:	11 97       	sbiw	r26, 0x01	; 1
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	89 23       	and	r24, r25
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	0a c1       	rjmp	.+532    	; 0x1b10 <_fpadd_parts+0x286>
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	09 f4       	brne	.+2      	; 0x1902 <_fpadd_parts+0x78>
    1900:	05 c1       	rjmp	.+522    	; 0x1b0c <_fpadd_parts+0x282>
    1902:	c2 80       	ldd	r12, Z+2	; 0x02
    1904:	d3 80       	ldd	r13, Z+3	; 0x03
    1906:	db 01       	movw	r26, r22
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	6d 90       	ld	r6, X+
    190c:	7c 90       	ld	r7, X
    190e:	13 97       	sbiw	r26, 0x03	; 3
    1910:	24 81       	ldd	r18, Z+4	; 0x04
    1912:	35 81       	ldd	r19, Z+5	; 0x05
    1914:	46 81       	ldd	r20, Z+6	; 0x06
    1916:	57 81       	ldd	r21, Z+7	; 0x07
    1918:	14 96       	adiw	r26, 0x04	; 4
    191a:	ed 90       	ld	r14, X+
    191c:	fd 90       	ld	r15, X+
    191e:	0d 91       	ld	r16, X+
    1920:	1c 91       	ld	r17, X
    1922:	17 97       	sbiw	r26, 0x07	; 7
    1924:	c6 01       	movw	r24, r12
    1926:	86 19       	sub	r24, r6
    1928:	97 09       	sbc	r25, r7
    192a:	5c 01       	movw	r10, r24
    192c:	97 ff       	sbrs	r25, 7
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <_fpadd_parts+0xae>
    1930:	aa 24       	eor	r10, r10
    1932:	bb 24       	eor	r11, r11
    1934:	a8 1a       	sub	r10, r24
    1936:	b9 0a       	sbc	r11, r25
    1938:	b0 e2       	ldi	r27, 0x20	; 32
    193a:	ab 16       	cp	r10, r27
    193c:	b1 04       	cpc	r11, r1
    193e:	0c f0       	brlt	.+2      	; 0x1942 <_fpadd_parts+0xb8>
    1940:	61 c0       	rjmp	.+194    	; 0x1a04 <_fpadd_parts+0x17a>
    1942:	18 16       	cp	r1, r24
    1944:	19 06       	cpc	r1, r25
    1946:	6c f5       	brge	.+90     	; 0x19a2 <_fpadd_parts+0x118>
    1948:	37 01       	movw	r6, r14
    194a:	48 01       	movw	r8, r16
    194c:	0a 2c       	mov	r0, r10
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <_fpadd_parts+0xce>
    1950:	96 94       	lsr	r9
    1952:	87 94       	ror	r8
    1954:	77 94       	ror	r7
    1956:	67 94       	ror	r6
    1958:	0a 94       	dec	r0
    195a:	d2 f7       	brpl	.-12     	; 0x1950 <_fpadd_parts+0xc6>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e0       	ldi	r26, 0x00	; 0
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	0a 2c       	mov	r0, r10
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <_fpadd_parts+0xe6>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	aa 1f       	adc	r26, r26
    196e:	bb 1f       	adc	r27, r27
    1970:	0a 94       	dec	r0
    1972:	d2 f7       	brpl	.-12     	; 0x1968 <_fpadd_parts+0xde>
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	a1 09       	sbc	r26, r1
    1978:	b1 09       	sbc	r27, r1
    197a:	8e 21       	and	r24, r14
    197c:	9f 21       	and	r25, r15
    197e:	a0 23       	and	r26, r16
    1980:	b1 23       	and	r27, r17
    1982:	ee 24       	eor	r14, r14
    1984:	ff 24       	eor	r15, r15
    1986:	87 01       	movw	r16, r14
    1988:	e3 94       	inc	r14
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	a1 05       	cpc	r26, r1
    198e:	b1 05       	cpc	r27, r1
    1990:	19 f4       	brne	.+6      	; 0x1998 <_fpadd_parts+0x10e>
    1992:	ee 24       	eor	r14, r14
    1994:	ff 24       	eor	r15, r15
    1996:	87 01       	movw	r16, r14
    1998:	e6 28       	or	r14, r6
    199a:	f7 28       	or	r15, r7
    199c:	08 29       	or	r16, r8
    199e:	19 29       	or	r17, r9
    19a0:	3c c0       	rjmp	.+120    	; 0x1a1a <_fpadd_parts+0x190>
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	d1 f1       	breq	.+116    	; 0x1a1a <_fpadd_parts+0x190>
    19a6:	ca 0c       	add	r12, r10
    19a8:	db 1c       	adc	r13, r11
    19aa:	39 01       	movw	r6, r18
    19ac:	4a 01       	movw	r8, r20
    19ae:	0a 2c       	mov	r0, r10
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <_fpadd_parts+0x130>
    19b2:	96 94       	lsr	r9
    19b4:	87 94       	ror	r8
    19b6:	77 94       	ror	r7
    19b8:	67 94       	ror	r6
    19ba:	0a 94       	dec	r0
    19bc:	d2 f7       	brpl	.-12     	; 0x19b2 <_fpadd_parts+0x128>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	0a 2c       	mov	r0, r10
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <_fpadd_parts+0x148>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	aa 1f       	adc	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	0a 94       	dec	r0
    19d4:	d2 f7       	brpl	.-12     	; 0x19ca <_fpadd_parts+0x140>
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	a1 09       	sbc	r26, r1
    19da:	b1 09       	sbc	r27, r1
    19dc:	82 23       	and	r24, r18
    19de:	93 23       	and	r25, r19
    19e0:	a4 23       	and	r26, r20
    19e2:	b5 23       	and	r27, r21
    19e4:	21 e0       	ldi	r18, 0x01	; 1
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	a1 05       	cpc	r26, r1
    19f0:	b1 05       	cpc	r27, r1
    19f2:	19 f4       	brne	.+6      	; 0x19fa <_fpadd_parts+0x170>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	26 29       	or	r18, r6
    19fc:	37 29       	or	r19, r7
    19fe:	48 29       	or	r20, r8
    1a00:	59 29       	or	r21, r9
    1a02:	0b c0       	rjmp	.+22     	; 0x1a1a <_fpadd_parts+0x190>
    1a04:	6c 14       	cp	r6, r12
    1a06:	7d 04       	cpc	r7, r13
    1a08:	24 f4       	brge	.+8      	; 0x1a12 <_fpadd_parts+0x188>
    1a0a:	ee 24       	eor	r14, r14
    1a0c:	ff 24       	eor	r15, r15
    1a0e:	87 01       	movw	r16, r14
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <_fpadd_parts+0x190>
    1a12:	63 01       	movw	r12, r6
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	81 81       	ldd	r24, Z+1	; 0x01
    1a1c:	fb 01       	movw	r30, r22
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	89 17       	cp	r24, r25
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <_fpadd_parts+0x19c>
    1a24:	45 c0       	rjmp	.+138    	; 0x1ab0 <_fpadd_parts+0x226>
    1a26:	88 23       	and	r24, r24
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <_fpadd_parts+0x1b2>
    1a2a:	d8 01       	movw	r26, r16
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	82 1b       	sub	r24, r18
    1a30:	93 0b       	sbc	r25, r19
    1a32:	a4 0b       	sbc	r26, r20
    1a34:	b5 0b       	sbc	r27, r21
    1a36:	9c 01       	movw	r18, r24
    1a38:	ad 01       	movw	r20, r26
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <_fpadd_parts+0x1ba>
    1a3c:	2e 19       	sub	r18, r14
    1a3e:	3f 09       	sbc	r19, r15
    1a40:	40 0b       	sbc	r20, r16
    1a42:	51 0b       	sbc	r21, r17
    1a44:	57 fd       	sbrc	r21, 7
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <_fpadd_parts+0x1c6>
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	ca 82       	std	Y+2, r12	; 0x02
    1a4c:	db 82       	std	Y+3, r13	; 0x03
    1a4e:	0b c0       	rjmp	.+22     	; 0x1a66 <_fpadd_parts+0x1dc>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	ca 82       	std	Y+2, r12	; 0x02
    1a56:	db 82       	std	Y+3, r13	; 0x03
    1a58:	50 95       	com	r21
    1a5a:	40 95       	com	r20
    1a5c:	30 95       	com	r19
    1a5e:	21 95       	neg	r18
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	4f 4f       	sbci	r20, 0xFF	; 255
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255
    1a66:	2c 83       	std	Y+4, r18	; 0x04
    1a68:	3d 83       	std	Y+5, r19	; 0x05
    1a6a:	4e 83       	std	Y+6, r20	; 0x06
    1a6c:	5f 83       	std	Y+7, r21	; 0x07
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <_fpadd_parts+0x200>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	aa 1f       	adc	r26, r26
    1a76:	bb 1f       	adc	r27, r27
    1a78:	8c 83       	std	Y+4, r24	; 0x04
    1a7a:	9d 83       	std	Y+5, r25	; 0x05
    1a7c:	ae 83       	std	Y+6, r26	; 0x06
    1a7e:	bf 83       	std	Y+7, r27	; 0x07
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	8a 83       	std	Y+2, r24	; 0x02
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a90:	bf 81       	ldd	r27, Y+7	; 0x07
    1a92:	9c 01       	movw	r18, r24
    1a94:	ad 01       	movw	r20, r26
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	30 40       	sbci	r19, 0x00	; 0
    1a9a:	40 40       	sbci	r20, 0x00	; 0
    1a9c:	50 40       	sbci	r21, 0x00	; 0
    1a9e:	2f 3f       	cpi	r18, 0xFF	; 255
    1aa0:	ef ef       	ldi	r30, 0xFF	; 255
    1aa2:	3e 07       	cpc	r19, r30
    1aa4:	ef ef       	ldi	r30, 0xFF	; 255
    1aa6:	4e 07       	cpc	r20, r30
    1aa8:	ef e3       	ldi	r30, 0x3F	; 63
    1aaa:	5e 07       	cpc	r21, r30
    1aac:	08 f3       	brcs	.-62     	; 0x1a70 <_fpadd_parts+0x1e6>
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <_fpadd_parts+0x23c>
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	ca 82       	std	Y+2, r12	; 0x02
    1ab4:	db 82       	std	Y+3, r13	; 0x03
    1ab6:	2e 0d       	add	r18, r14
    1ab8:	3f 1d       	adc	r19, r15
    1aba:	40 1f       	adc	r20, r16
    1abc:	51 1f       	adc	r21, r17
    1abe:	2c 83       	std	Y+4, r18	; 0x04
    1ac0:	3d 83       	std	Y+5, r19	; 0x05
    1ac2:	4e 83       	std	Y+6, r20	; 0x06
    1ac4:	5f 83       	std	Y+7, r21	; 0x07
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	88 83       	st	Y, r24
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ad2:	57 ff       	sbrs	r21, 7
    1ad4:	1d c0       	rjmp	.+58     	; 0x1b10 <_fpadd_parts+0x286>
    1ad6:	da 01       	movw	r26, r20
    1ad8:	c9 01       	movw	r24, r18
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	a0 70       	andi	r26, 0x00	; 0
    1ae0:	b0 70       	andi	r27, 0x00	; 0
    1ae2:	56 95       	lsr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	37 95       	ror	r19
    1ae8:	27 95       	ror	r18
    1aea:	82 2b       	or	r24, r18
    1aec:	93 2b       	or	r25, r19
    1aee:	a4 2b       	or	r26, r20
    1af0:	b5 2b       	or	r27, r21
    1af2:	8c 83       	std	Y+4, r24	; 0x04
    1af4:	9d 83       	std	Y+5, r25	; 0x05
    1af6:	ae 83       	std	Y+6, r26	; 0x06
    1af8:	bf 83       	std	Y+7, r27	; 0x07
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <_fpadd_parts+0x286>
    1b06:	ef e2       	ldi	r30, 0x2F	; 47
    1b08:	f0 e2       	ldi	r31, 0x20	; 32
    1b0a:	03 c0       	rjmp	.+6      	; 0x1b12 <_fpadd_parts+0x288>
    1b0c:	fb 01       	movw	r30, r22
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <_fpadd_parts+0x288>
    1b10:	fe 01       	movw	r30, r28
    1b12:	cf 01       	movw	r24, r30
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	ee e0       	ldi	r30, 0x0E	; 14
    1b1a:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__epilogue_restores__+0x8>

00001b1e <__addsf3>:
    1b1e:	a0 e2       	ldi	r26, 0x20	; 32
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e9       	ldi	r30, 0x95	; 149
    1b24:	fd e0       	ldi	r31, 0x0D	; 13
    1b26:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x18>
    1b2a:	69 83       	std	Y+1, r22	; 0x01
    1b2c:	7a 83       	std	Y+2, r23	; 0x02
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	2d 83       	std	Y+5, r18	; 0x05
    1b34:	3e 83       	std	Y+6, r19	; 0x06
    1b36:	4f 83       	std	Y+7, r20	; 0x07
    1b38:	58 87       	std	Y+8, r21	; 0x08
    1b3a:	89 e0       	ldi	r24, 0x09	; 9
    1b3c:	e8 2e       	mov	r14, r24
    1b3e:	f1 2c       	mov	r15, r1
    1b40:	ec 0e       	add	r14, r28
    1b42:	fd 1e       	adc	r15, r29
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	b7 01       	movw	r22, r14
    1b4a:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1b4e:	8e 01       	movw	r16, r28
    1b50:	0f 5e       	subi	r16, 0xEF	; 239
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	ce 01       	movw	r24, r28
    1b56:	05 96       	adiw	r24, 0x05	; 5
    1b58:	b8 01       	movw	r22, r16
    1b5a:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1b5e:	c7 01       	movw	r24, r14
    1b60:	b8 01       	movw	r22, r16
    1b62:	ae 01       	movw	r20, r28
    1b64:	47 5e       	subi	r20, 0xE7	; 231
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	0e 94 45 0c 	call	0x188a	; 0x188a <_fpadd_parts>
    1b6c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__pack_f>
    1b70:	a0 96       	adiw	r28, 0x20	; 32
    1b72:	e6 e0       	ldi	r30, 0x06	; 6
    1b74:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x18>

00001b78 <__subsf3>:
    1b78:	a0 e2       	ldi	r26, 0x20	; 32
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1b7e:	fd e0       	ldi	r31, 0x0D	; 13
    1b80:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x18>
    1b84:	69 83       	std	Y+1, r22	; 0x01
    1b86:	7a 83       	std	Y+2, r23	; 0x02
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	2d 83       	std	Y+5, r18	; 0x05
    1b8e:	3e 83       	std	Y+6, r19	; 0x06
    1b90:	4f 83       	std	Y+7, r20	; 0x07
    1b92:	58 87       	std	Y+8, r21	; 0x08
    1b94:	8e 01       	movw	r16, r28
    1b96:	07 5f       	subi	r16, 0xF7	; 247
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	b8 01       	movw	r22, r16
    1ba0:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1ba4:	91 e1       	ldi	r25, 0x11	; 17
    1ba6:	e9 2e       	mov	r14, r25
    1ba8:	f1 2c       	mov	r15, r1
    1baa:	ec 0e       	add	r14, r28
    1bac:	fd 1e       	adc	r15, r29
    1bae:	ce 01       	movw	r24, r28
    1bb0:	05 96       	adiw	r24, 0x05	; 5
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1bb8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	89 27       	eor	r24, r25
    1bbe:	8a 8b       	std	Y+18, r24	; 0x12
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	ae 01       	movw	r20, r28
    1bc6:	47 5e       	subi	r20, 0xE7	; 231
    1bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bca:	0e 94 45 0c 	call	0x188a	; 0x188a <_fpadd_parts>
    1bce:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__pack_f>
    1bd2:	a0 96       	adiw	r28, 0x20	; 32
    1bd4:	e6 e0       	ldi	r30, 0x06	; 6
    1bd6:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x18>

00001bda <__mulsf3>:
    1bda:	a0 e2       	ldi	r26, 0x20	; 32
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e3 ef       	ldi	r30, 0xF3	; 243
    1be0:	fd e0       	ldi	r31, 0x0D	; 13
    1be2:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__>
    1be6:	69 83       	std	Y+1, r22	; 0x01
    1be8:	7a 83       	std	Y+2, r23	; 0x02
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	2d 83       	std	Y+5, r18	; 0x05
    1bf0:	3e 83       	std	Y+6, r19	; 0x06
    1bf2:	4f 83       	std	Y+7, r20	; 0x07
    1bf4:	58 87       	std	Y+8, r21	; 0x08
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	be 01       	movw	r22, r28
    1bfc:	67 5f       	subi	r22, 0xF7	; 247
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1c04:	ce 01       	movw	r24, r28
    1c06:	05 96       	adiw	r24, 0x05	; 5
    1c08:	be 01       	movw	r22, r28
    1c0a:	6f 5e       	subi	r22, 0xEF	; 239
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0e:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1c12:	99 85       	ldd	r25, Y+9	; 0x09
    1c14:	92 30       	cpi	r25, 0x02	; 2
    1c16:	78 f0       	brcs	.+30     	; 0x1c36 <__mulsf3+0x5c>
    1c18:	89 89       	ldd	r24, Y+17	; 0x11
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	c0 f0       	brcs	.+48     	; 0x1c4e <__mulsf3+0x74>
    1c1e:	94 30       	cpi	r25, 0x04	; 4
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <__mulsf3+0x4e>
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	41 f4       	brne	.+16     	; 0x1c36 <__mulsf3+0x5c>
    1c26:	cb c0       	rjmp	.+406    	; 0x1dbe <__mulsf3+0x1e4>
    1c28:	84 30       	cpi	r24, 0x04	; 4
    1c2a:	19 f4       	brne	.+6      	; 0x1c32 <__mulsf3+0x58>
    1c2c:	92 30       	cpi	r25, 0x02	; 2
    1c2e:	79 f4       	brne	.+30     	; 0x1c4e <__mulsf3+0x74>
    1c30:	c6 c0       	rjmp	.+396    	; 0x1dbe <__mulsf3+0x1e4>
    1c32:	92 30       	cpi	r25, 0x02	; 2
    1c34:	51 f4       	brne	.+20     	; 0x1c4a <__mulsf3+0x70>
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c3c:	29 17       	cp	r18, r25
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__mulsf3+0x68>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	8a 87       	std	Y+10, r24	; 0x0a
    1c44:	ce 01       	movw	r24, r28
    1c46:	09 96       	adiw	r24, 0x09	; 9
    1c48:	bc c0       	rjmp	.+376    	; 0x1dc2 <__mulsf3+0x1e8>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	51 f4       	brne	.+20     	; 0x1c62 <__mulsf3+0x88>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c52:	9a 89       	ldd	r25, Y+18	; 0x12
    1c54:	29 17       	cp	r18, r25
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <__mulsf3+0x80>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	8a 8b       	std	Y+18, r24	; 0x12
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	41 96       	adiw	r24, 0x11	; 17
    1c60:	b0 c0       	rjmp	.+352    	; 0x1dc2 <__mulsf3+0x1e8>
    1c62:	6d 84       	ldd	r6, Y+13	; 0x0d
    1c64:	7e 84       	ldd	r7, Y+14	; 0x0e
    1c66:	8f 84       	ldd	r8, Y+15	; 0x0f
    1c68:	98 88       	ldd	r9, Y+16	; 0x10
    1c6a:	ed 88       	ldd	r14, Y+21	; 0x15
    1c6c:	fe 88       	ldd	r15, Y+22	; 0x16
    1c6e:	0f 89       	ldd	r16, Y+23	; 0x17
    1c70:	18 8d       	ldd	r17, Y+24	; 0x18
    1c72:	e0 e2       	ldi	r30, 0x20	; 32
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	aa 24       	eor	r10, r10
    1c7e:	bb 24       	eor	r11, r11
    1c80:	65 01       	movw	r12, r10
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	b3 01       	movw	r22, r6
    1c8a:	61 70       	andi	r22, 0x01	; 1
    1c8c:	70 70       	andi	r23, 0x00	; 0
    1c8e:	61 15       	cp	r22, r1
    1c90:	71 05       	cpc	r23, r1
    1c92:	d1 f0       	breq	.+52     	; 0x1cc8 <__mulsf3+0xee>
    1c94:	2e 0d       	add	r18, r14
    1c96:	3f 1d       	adc	r19, r15
    1c98:	40 1f       	adc	r20, r16
    1c9a:	51 1f       	adc	r21, r17
    1c9c:	15 01       	movw	r2, r10
    1c9e:	26 01       	movw	r4, r12
    1ca0:	28 0e       	add	r2, r24
    1ca2:	39 1e       	adc	r3, r25
    1ca4:	4a 1e       	adc	r4, r26
    1ca6:	5b 1e       	adc	r5, r27
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	2e 15       	cp	r18, r14
    1cb2:	3f 05       	cpc	r19, r15
    1cb4:	40 07       	cpc	r20, r16
    1cb6:	51 07       	cpc	r21, r17
    1cb8:	18 f0       	brcs	.+6      	; 0x1cc0 <__mulsf3+0xe6>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	82 0d       	add	r24, r2
    1cc2:	93 1d       	adc	r25, r3
    1cc4:	a4 1d       	adc	r26, r4
    1cc6:	b5 1d       	adc	r27, r5
    1cc8:	aa 0c       	add	r10, r10
    1cca:	bb 1c       	adc	r11, r11
    1ccc:	cc 1c       	adc	r12, r12
    1cce:	dd 1c       	adc	r13, r13
    1cd0:	17 ff       	sbrs	r17, 7
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <__mulsf3+0x10c>
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	26 2e       	mov	r2, r22
    1cd8:	31 2c       	mov	r3, r1
    1cda:	41 2c       	mov	r4, r1
    1cdc:	51 2c       	mov	r5, r1
    1cde:	a2 28       	or	r10, r2
    1ce0:	b3 28       	or	r11, r3
    1ce2:	c4 28       	or	r12, r4
    1ce4:	d5 28       	or	r13, r5
    1ce6:	31 97       	sbiw	r30, 0x01	; 1
    1ce8:	49 f0       	breq	.+18     	; 0x1cfc <__mulsf3+0x122>
    1cea:	ee 0c       	add	r14, r14
    1cec:	ff 1c       	adc	r15, r15
    1cee:	00 1f       	adc	r16, r16
    1cf0:	11 1f       	adc	r17, r17
    1cf2:	96 94       	lsr	r9
    1cf4:	87 94       	ror	r8
    1cf6:	77 94       	ror	r7
    1cf8:	67 94       	ror	r6
    1cfa:	c6 cf       	rjmp	.-116    	; 0x1c88 <__mulsf3+0xae>
    1cfc:	6b 89       	ldd	r22, Y+19	; 0x13
    1cfe:	7c 89       	ldd	r23, Y+20	; 0x14
    1d00:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d02:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d04:	6e 0f       	add	r22, r30
    1d06:	7f 1f       	adc	r23, r31
    1d08:	6e 5f       	subi	r22, 0xFE	; 254
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	6b 8f       	std	Y+27, r22	; 0x1b
    1d0e:	7c 8f       	std	Y+28, r23	; 0x1c
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d14:	7a 89       	ldd	r23, Y+18	; 0x12
    1d16:	e7 17       	cp	r30, r23
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <__mulsf3+0x142>
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	6a 8f       	std	Y+26, r22	; 0x1a
    1d1e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d20:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d22:	10 c0       	rjmp	.+32     	; 0x1d44 <__mulsf3+0x16a>
    1d24:	fc 01       	movw	r30, r24
    1d26:	e1 70       	andi	r30, 0x01	; 1
    1d28:	f0 70       	andi	r31, 0x00	; 0
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	29 f0       	breq	.+10     	; 0x1d38 <__mulsf3+0x15e>
    1d2e:	56 95       	lsr	r21
    1d30:	47 95       	ror	r20
    1d32:	37 95       	ror	r19
    1d34:	27 95       	ror	r18
    1d36:	50 68       	ori	r21, 0x80	; 128
    1d38:	b6 95       	lsr	r27
    1d3a:	a7 95       	ror	r26
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	b7 fd       	sbrc	r27, 7
    1d46:	ee cf       	rjmp	.-36     	; 0x1d24 <__mulsf3+0x14a>
    1d48:	0c c0       	rjmp	.+24     	; 0x1d62 <__mulsf3+0x188>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	aa 1f       	adc	r26, r26
    1d50:	bb 1f       	adc	r27, r27
    1d52:	57 fd       	sbrc	r21, 7
    1d54:	81 60       	ori	r24, 0x01	; 1
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	44 1f       	adc	r20, r20
    1d5c:	55 1f       	adc	r21, r21
    1d5e:	61 50       	subi	r22, 0x01	; 1
    1d60:	70 40       	sbci	r23, 0x00	; 0
    1d62:	80 30       	cpi	r24, 0x00	; 0
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	9e 07       	cpc	r25, r30
    1d68:	e0 e0       	ldi	r30, 0x00	; 0
    1d6a:	ae 07       	cpc	r26, r30
    1d6c:	e0 e4       	ldi	r30, 0x40	; 64
    1d6e:	be 07       	cpc	r27, r30
    1d70:	60 f3       	brcs	.-40     	; 0x1d4a <__mulsf3+0x170>
    1d72:	6b 8f       	std	Y+27, r22	; 0x1b
    1d74:	7c 8f       	std	Y+28, r23	; 0x1c
    1d76:	6f e7       	ldi	r22, 0x7F	; 127
    1d78:	e6 2e       	mov	r14, r22
    1d7a:	f1 2c       	mov	r15, r1
    1d7c:	01 2d       	mov	r16, r1
    1d7e:	11 2d       	mov	r17, r1
    1d80:	e8 22       	and	r14, r24
    1d82:	f9 22       	and	r15, r25
    1d84:	0a 23       	and	r16, r26
    1d86:	1b 23       	and	r17, r27
    1d88:	60 e4       	ldi	r22, 0x40	; 64
    1d8a:	e6 16       	cp	r14, r22
    1d8c:	f1 04       	cpc	r15, r1
    1d8e:	01 05       	cpc	r16, r1
    1d90:	11 05       	cpc	r17, r1
    1d92:	61 f4       	brne	.+24     	; 0x1dac <__mulsf3+0x1d2>
    1d94:	87 fd       	sbrc	r24, 7
    1d96:	0a c0       	rjmp	.+20     	; 0x1dac <__mulsf3+0x1d2>
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	41 05       	cpc	r20, r1
    1d9e:	51 05       	cpc	r21, r1
    1da0:	29 f0       	breq	.+10     	; 0x1dac <__mulsf3+0x1d2>
    1da2:	80 5c       	subi	r24, 0xC0	; 192
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	af 4f       	sbci	r26, 0xFF	; 255
    1da8:	bf 4f       	sbci	r27, 0xFF	; 255
    1daa:	80 78       	andi	r24, 0x80	; 128
    1dac:	8d 8f       	std	Y+29, r24	; 0x1d
    1dae:	9e 8f       	std	Y+30, r25	; 0x1e
    1db0:	af 8f       	std	Y+31, r26	; 0x1f
    1db2:	b8 a3       	std	Y+32, r27	; 0x20
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	89 8f       	std	Y+25, r24	; 0x19
    1db8:	ce 01       	movw	r24, r28
    1dba:	49 96       	adiw	r24, 0x19	; 25
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <__mulsf3+0x1e8>
    1dbe:	8f e2       	ldi	r24, 0x2F	; 47
    1dc0:	90 e2       	ldi	r25, 0x20	; 32
    1dc2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__pack_f>
    1dc6:	a0 96       	adiw	r28, 0x20	; 32
    1dc8:	e2 e1       	ldi	r30, 0x12	; 18
    1dca:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__epilogue_restores__>

00001dce <__divsf3>:
    1dce:	a8 e1       	ldi	r26, 0x18	; 24
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	ed ee       	ldi	r30, 0xED	; 237
    1dd4:	fe e0       	ldi	r31, 0x0E	; 14
    1dd6:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x10>
    1dda:	69 83       	std	Y+1, r22	; 0x01
    1ddc:	7a 83       	std	Y+2, r23	; 0x02
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    1de0:	9c 83       	std	Y+4, r25	; 0x04
    1de2:	2d 83       	std	Y+5, r18	; 0x05
    1de4:	3e 83       	std	Y+6, r19	; 0x06
    1de6:	4f 83       	std	Y+7, r20	; 0x07
    1de8:	58 87       	std	Y+8, r21	; 0x08
    1dea:	8e 01       	movw	r16, r28
    1dec:	07 5f       	subi	r16, 0xF7	; 247
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	ce 01       	movw	r24, r28
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	b8 01       	movw	r22, r16
    1df6:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1dfa:	81 e1       	ldi	r24, 0x11	; 17
    1dfc:	e8 2e       	mov	r14, r24
    1dfe:	f1 2c       	mov	r15, r1
    1e00:	ec 0e       	add	r14, r28
    1e02:	fd 1e       	adc	r15, r29
    1e04:	ce 01       	movw	r24, r28
    1e06:	05 96       	adiw	r24, 0x05	; 5
    1e08:	b7 01       	movw	r22, r14
    1e0a:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1e0e:	99 85       	ldd	r25, Y+9	; 0x09
    1e10:	92 30       	cpi	r25, 0x02	; 2
    1e12:	08 f4       	brcc	.+2      	; 0x1e16 <__divsf3+0x48>
    1e14:	83 c0       	rjmp	.+262    	; 0x1f1c <__divsf3+0x14e>
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <__divsf3+0x50>
    1e1c:	7b c0       	rjmp	.+246    	; 0x1f14 <__divsf3+0x146>
    1e1e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e20:	3a 89       	ldd	r19, Y+18	; 0x12
    1e22:	23 27       	eor	r18, r19
    1e24:	2a 87       	std	Y+10, r18	; 0x0a
    1e26:	94 30       	cpi	r25, 0x04	; 4
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <__divsf3+0x60>
    1e2a:	92 30       	cpi	r25, 0x02	; 2
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <__divsf3+0x68>
    1e2e:	98 17       	cp	r25, r24
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <__divsf3+0x66>
    1e32:	6c c0       	rjmp	.+216    	; 0x1f0c <__divsf3+0x13e>
    1e34:	71 c0       	rjmp	.+226    	; 0x1f18 <__divsf3+0x14a>
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <__divsf3+0x7a>
    1e3a:	1d 86       	std	Y+13, r1	; 0x0d
    1e3c:	1e 86       	std	Y+14, r1	; 0x0e
    1e3e:	1f 86       	std	Y+15, r1	; 0x0f
    1e40:	18 8a       	std	Y+16, r1	; 0x10
    1e42:	1b 86       	std	Y+11, r1	; 0x0b
    1e44:	1c 86       	std	Y+12, r1	; 0x0c
    1e46:	6a c0       	rjmp	.+212    	; 0x1f1c <__divsf3+0x14e>
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	19 f4       	brne	.+6      	; 0x1e52 <__divsf3+0x84>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	89 87       	std	Y+9, r24	; 0x09
    1e50:	65 c0       	rjmp	.+202    	; 0x1f1c <__divsf3+0x14e>
    1e52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e56:	2b 89       	ldd	r18, Y+19	; 0x13
    1e58:	3c 89       	ldd	r19, Y+20	; 0x14
    1e5a:	82 1b       	sub	r24, r18
    1e5c:	93 0b       	sbc	r25, r19
    1e5e:	8b 87       	std	Y+11, r24	; 0x0b
    1e60:	9c 87       	std	Y+12, r25	; 0x0c
    1e62:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e64:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e66:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e68:	58 89       	ldd	r21, Y+16	; 0x10
    1e6a:	ed 88       	ldd	r14, Y+21	; 0x15
    1e6c:	fe 88       	ldd	r15, Y+22	; 0x16
    1e6e:	0f 89       	ldd	r16, Y+23	; 0x17
    1e70:	18 8d       	ldd	r17, Y+24	; 0x18
    1e72:	2e 15       	cp	r18, r14
    1e74:	3f 05       	cpc	r19, r15
    1e76:	40 07       	cpc	r20, r16
    1e78:	51 07       	cpc	r21, r17
    1e7a:	38 f4       	brcc	.+14     	; 0x1e8a <__divsf3+0xbc>
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	44 1f       	adc	r20, r20
    1e82:	55 1f       	adc	r21, r21
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	8b 87       	std	Y+11, r24	; 0x0b
    1e88:	9c 87       	std	Y+12, r25	; 0x0c
    1e8a:	6f e1       	ldi	r22, 0x1F	; 31
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	a1 2c       	mov	r10, r1
    1e90:	b1 2c       	mov	r11, r1
    1e92:	c1 2c       	mov	r12, r1
    1e94:	a0 e4       	ldi	r26, 0x40	; 64
    1e96:	da 2e       	mov	r13, r26
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	2e 15       	cp	r18, r14
    1ea0:	3f 05       	cpc	r19, r15
    1ea2:	40 07       	cpc	r20, r16
    1ea4:	51 07       	cpc	r21, r17
    1ea6:	40 f0       	brcs	.+16     	; 0x1eb8 <__divsf3+0xea>
    1ea8:	8a 29       	or	r24, r10
    1eaa:	9b 29       	or	r25, r11
    1eac:	ac 29       	or	r26, r12
    1eae:	bd 29       	or	r27, r13
    1eb0:	2e 19       	sub	r18, r14
    1eb2:	3f 09       	sbc	r19, r15
    1eb4:	40 0b       	sbc	r20, r16
    1eb6:	51 0b       	sbc	r21, r17
    1eb8:	d6 94       	lsr	r13
    1eba:	c7 94       	ror	r12
    1ebc:	b7 94       	ror	r11
    1ebe:	a7 94       	ror	r10
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	44 1f       	adc	r20, r20
    1ec6:	55 1f       	adc	r21, r21
    1ec8:	61 50       	subi	r22, 0x01	; 1
    1eca:	70 40       	sbci	r23, 0x00	; 0
    1ecc:	41 f7       	brne	.-48     	; 0x1e9e <__divsf3+0xd0>
    1ece:	6f e7       	ldi	r22, 0x7F	; 127
    1ed0:	e6 2e       	mov	r14, r22
    1ed2:	f1 2c       	mov	r15, r1
    1ed4:	01 2d       	mov	r16, r1
    1ed6:	11 2d       	mov	r17, r1
    1ed8:	e8 22       	and	r14, r24
    1eda:	f9 22       	and	r15, r25
    1edc:	0a 23       	and	r16, r26
    1ede:	1b 23       	and	r17, r27
    1ee0:	60 e4       	ldi	r22, 0x40	; 64
    1ee2:	e6 16       	cp	r14, r22
    1ee4:	f1 04       	cpc	r15, r1
    1ee6:	01 05       	cpc	r16, r1
    1ee8:	11 05       	cpc	r17, r1
    1eea:	61 f4       	brne	.+24     	; 0x1f04 <__divsf3+0x136>
    1eec:	87 fd       	sbrc	r24, 7
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <__divsf3+0x136>
    1ef0:	21 15       	cp	r18, r1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	41 05       	cpc	r20, r1
    1ef6:	51 05       	cpc	r21, r1
    1ef8:	29 f0       	breq	.+10     	; 0x1f04 <__divsf3+0x136>
    1efa:	80 5c       	subi	r24, 0xC0	; 192
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	af 4f       	sbci	r26, 0xFF	; 255
    1f00:	bf 4f       	sbci	r27, 0xFF	; 255
    1f02:	80 78       	andi	r24, 0x80	; 128
    1f04:	8d 87       	std	Y+13, r24	; 0x0d
    1f06:	9e 87       	std	Y+14, r25	; 0x0e
    1f08:	af 87       	std	Y+15, r26	; 0x0f
    1f0a:	b8 8b       	std	Y+16, r27	; 0x10
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	07 5f       	subi	r16, 0xF7	; 247
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <__divsf3+0x14e>
    1f14:	87 01       	movw	r16, r14
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <__divsf3+0x14e>
    1f18:	0f e2       	ldi	r16, 0x2F	; 47
    1f1a:	10 e2       	ldi	r17, 0x20	; 32
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__pack_f>
    1f22:	68 96       	adiw	r28, 0x18	; 24
    1f24:	ea e0       	ldi	r30, 0x0A	; 10
    1f26:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x10>

00001f2a <__gesf2>:
    1f2a:	a8 e1       	ldi	r26, 0x18	; 24
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	eb e9       	ldi	r30, 0x9B	; 155
    1f30:	ff e0       	ldi	r31, 0x0F	; 15
    1f32:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x18>
    1f36:	69 83       	std	Y+1, r22	; 0x01
    1f38:	7a 83       	std	Y+2, r23	; 0x02
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	2d 83       	std	Y+5, r18	; 0x05
    1f40:	3e 83       	std	Y+6, r19	; 0x06
    1f42:	4f 83       	std	Y+7, r20	; 0x07
    1f44:	58 87       	std	Y+8, r21	; 0x08
    1f46:	8e 01       	movw	r16, r28
    1f48:	07 5f       	subi	r16, 0xF7	; 247
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	b8 01       	movw	r22, r16
    1f52:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1f56:	81 e1       	ldi	r24, 0x11	; 17
    1f58:	e8 2e       	mov	r14, r24
    1f5a:	f1 2c       	mov	r15, r1
    1f5c:	ec 0e       	add	r14, r28
    1f5e:	fd 1e       	adc	r15, r29
    1f60:	ce 01       	movw	r24, r28
    1f62:	05 96       	adiw	r24, 0x05	; 5
    1f64:	b7 01       	movw	r22, r14
    1f66:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	40 f0       	brcs	.+16     	; 0x1f80 <__gesf2+0x56>
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	28 f0       	brcs	.+10     	; 0x1f80 <__gesf2+0x56>
    1f76:	c8 01       	movw	r24, r16
    1f78:	b7 01       	movw	r22, r14
    1f7a:	0e 94 20 12 	call	0x2440	; 0x2440 <__fpcmp_parts_f>
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <__gesf2+0x58>
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	68 96       	adiw	r28, 0x18	; 24
    1f84:	e6 e0       	ldi	r30, 0x06	; 6
    1f86:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x18>

00001f8a <__fixsfsi>:
    1f8a:	ac e0       	ldi	r26, 0x0C	; 12
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb ec       	ldi	r30, 0xCB	; 203
    1f90:	ff e0       	ldi	r31, 0x0F	; 15
    1f92:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__prologue_saves__+0x20>
    1f96:	69 83       	std	Y+1, r22	; 0x01
    1f98:	7a 83       	std	Y+2, r23	; 0x02
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	be 01       	movw	r22, r28
    1fa4:	6b 5f       	subi	r22, 0xFB	; 251
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	81 f1       	breq	.+96     	; 0x2012 <__fixsfsi+0x88>
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	70 f1       	brcs	.+92     	; 0x2012 <__fixsfsi+0x88>
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	21 f4       	brne	.+8      	; 0x1fc2 <__fixsfsi+0x38>
    1fba:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbc:	88 23       	and	r24, r24
    1fbe:	69 f1       	breq	.+90     	; 0x201a <__fixsfsi+0x90>
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__fixsfsi+0x4c>
    1fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    1fc4:	38 85       	ldd	r19, Y+8	; 0x08
    1fc6:	37 fd       	sbrc	r19, 7
    1fc8:	24 c0       	rjmp	.+72     	; 0x2012 <__fixsfsi+0x88>
    1fca:	6e 81       	ldd	r22, Y+6	; 0x06
    1fcc:	2f 31       	cpi	r18, 0x1F	; 31
    1fce:	31 05       	cpc	r19, r1
    1fd0:	3c f0       	brlt	.+14     	; 0x1fe0 <__fixsfsi+0x56>
    1fd2:	66 23       	and	r22, r22
    1fd4:	11 f1       	breq	.+68     	; 0x201a <__fixsfsi+0x90>
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e8       	ldi	r21, 0x80	; 128
    1fde:	21 c0       	rjmp	.+66     	; 0x2022 <__fixsfsi+0x98>
    1fe0:	8e e1       	ldi	r24, 0x1E	; 30
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	82 1b       	sub	r24, r18
    1fe6:	93 0b       	sbc	r25, r19
    1fe8:	29 85       	ldd	r18, Y+9	; 0x09
    1fea:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fec:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fee:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <__fixsfsi+0x70>
    1ff2:	56 95       	lsr	r21
    1ff4:	47 95       	ror	r20
    1ff6:	37 95       	ror	r19
    1ff8:	27 95       	ror	r18
    1ffa:	8a 95       	dec	r24
    1ffc:	d2 f7       	brpl	.-12     	; 0x1ff2 <__fixsfsi+0x68>
    1ffe:	66 23       	and	r22, r22
    2000:	81 f0       	breq	.+32     	; 0x2022 <__fixsfsi+0x98>
    2002:	50 95       	com	r21
    2004:	40 95       	com	r20
    2006:	30 95       	com	r19
    2008:	21 95       	neg	r18
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	4f 4f       	sbci	r20, 0xFF	; 255
    200e:	5f 4f       	sbci	r21, 0xFF	; 255
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <__fixsfsi+0x98>
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	a9 01       	movw	r20, r18
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <__fixsfsi+0x98>
    201a:	2f ef       	ldi	r18, 0xFF	; 255
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f ef       	ldi	r20, 0xFF	; 255
    2020:	5f e7       	ldi	r21, 0x7F	; 127
    2022:	b9 01       	movw	r22, r18
    2024:	ca 01       	movw	r24, r20
    2026:	2c 96       	adiw	r28, 0x0c	; 12
    2028:	e2 e0       	ldi	r30, 0x02	; 2
    202a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x20>

0000202e <__floatunsisf>:
    202e:	a8 e0       	ldi	r26, 0x08	; 8
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ed e1       	ldi	r30, 0x1D	; 29
    2034:	f0 e1       	ldi	r31, 0x10	; 16
    2036:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__+0x14>
    203a:	7b 01       	movw	r14, r22
    203c:	8c 01       	movw	r16, r24
    203e:	1a 82       	std	Y+2, r1	; 0x02
    2040:	61 15       	cp	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	81 05       	cpc	r24, r1
    2046:	91 05       	cpc	r25, r1
    2048:	19 f4       	brne	.+6      	; 0x2050 <__floatunsisf+0x22>
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	5f c0       	rjmp	.+190    	; 0x210e <__floatunsisf+0xe0>
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	8e e1       	ldi	r24, 0x1E	; 30
    2056:	c8 2e       	mov	r12, r24
    2058:	d1 2c       	mov	r13, r1
    205a:	cb 82       	std	Y+3, r12	; 0x03
    205c:	dc 82       	std	Y+4, r13	; 0x04
    205e:	ed 82       	std	Y+5, r14	; 0x05
    2060:	fe 82       	std	Y+6, r15	; 0x06
    2062:	0f 83       	std	Y+7, r16	; 0x07
    2064:	18 87       	std	Y+8, r17	; 0x08
    2066:	c8 01       	movw	r24, r16
    2068:	b7 01       	movw	r22, r14
    206a:	0e 94 8f 10 	call	0x211e	; 0x211e <__clzsi2>
    206e:	fc 01       	movw	r30, r24
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	f7 ff       	sbrs	r31, 7
    2074:	3a c0       	rjmp	.+116    	; 0x20ea <__floatunsisf+0xbc>
    2076:	aa 27       	eor	r26, r26
    2078:	bb 27       	eor	r27, r27
    207a:	ae 1b       	sub	r26, r30
    207c:	bf 0b       	sbc	r27, r31
    207e:	21 e0       	ldi	r18, 0x01	; 1
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	0a 2e       	mov	r0, r26
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <__floatunsisf+0x64>
    208a:	22 0f       	add	r18, r18
    208c:	33 1f       	adc	r19, r19
    208e:	44 1f       	adc	r20, r20
    2090:	55 1f       	adc	r21, r21
    2092:	0a 94       	dec	r0
    2094:	d2 f7       	brpl	.-12     	; 0x208a <__floatunsisf+0x5c>
    2096:	21 50       	subi	r18, 0x01	; 1
    2098:	30 40       	sbci	r19, 0x00	; 0
    209a:	40 40       	sbci	r20, 0x00	; 0
    209c:	50 40       	sbci	r21, 0x00	; 0
    209e:	2e 21       	and	r18, r14
    20a0:	3f 21       	and	r19, r15
    20a2:	40 23       	and	r20, r16
    20a4:	51 23       	and	r21, r17
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	21 15       	cp	r18, r1
    20b0:	31 05       	cpc	r19, r1
    20b2:	41 05       	cpc	r20, r1
    20b4:	51 05       	cpc	r21, r1
    20b6:	19 f4       	brne	.+6      	; 0x20be <__floatunsisf+0x90>
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	cb 01       	movw	r24, r22
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <__floatunsisf+0x9a>
    20c0:	16 95       	lsr	r17
    20c2:	07 95       	ror	r16
    20c4:	f7 94       	ror	r15
    20c6:	e7 94       	ror	r14
    20c8:	aa 95       	dec	r26
    20ca:	d2 f7       	brpl	.-12     	; 0x20c0 <__floatunsisf+0x92>
    20cc:	e6 2a       	or	r14, r22
    20ce:	f7 2a       	or	r15, r23
    20d0:	08 2b       	or	r16, r24
    20d2:	19 2b       	or	r17, r25
    20d4:	ed 82       	std	Y+5, r14	; 0x05
    20d6:	fe 82       	std	Y+6, r15	; 0x06
    20d8:	0f 83       	std	Y+7, r16	; 0x07
    20da:	18 87       	std	Y+8, r17	; 0x08
    20dc:	8e e1       	ldi	r24, 0x1E	; 30
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	8e 1b       	sub	r24, r30
    20e2:	9f 0b       	sbc	r25, r31
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	12 c0       	rjmp	.+36     	; 0x210e <__floatunsisf+0xe0>
    20ea:	30 97       	sbiw	r30, 0x00	; 0
    20ec:	81 f0       	breq	.+32     	; 0x210e <__floatunsisf+0xe0>
    20ee:	0e 2e       	mov	r0, r30
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <__floatunsisf+0xcc>
    20f2:	ee 0c       	add	r14, r14
    20f4:	ff 1c       	adc	r15, r15
    20f6:	00 1f       	adc	r16, r16
    20f8:	11 1f       	adc	r17, r17
    20fa:	0a 94       	dec	r0
    20fc:	d2 f7       	brpl	.-12     	; 0x20f2 <__floatunsisf+0xc4>
    20fe:	ed 82       	std	Y+5, r14	; 0x05
    2100:	fe 82       	std	Y+6, r15	; 0x06
    2102:	0f 83       	std	Y+7, r16	; 0x07
    2104:	18 87       	std	Y+8, r17	; 0x08
    2106:	ce 1a       	sub	r12, r30
    2108:	df 0a       	sbc	r13, r31
    210a:	cb 82       	std	Y+3, r12	; 0x03
    210c:	dc 82       	std	Y+4, r13	; 0x04
    210e:	ce 01       	movw	r24, r28
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__pack_f>
    2116:	28 96       	adiw	r28, 0x08	; 8
    2118:	e8 e0       	ldi	r30, 0x08	; 8
    211a:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__+0x14>

0000211e <__clzsi2>:
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	cf 92       	push	r12
    2124:	df 92       	push	r13
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	7b 01       	movw	r14, r22
    2130:	8c 01       	movw	r16, r24
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	e8 16       	cp	r14, r24
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	f8 06       	cpc	r15, r24
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	08 07       	cpc	r16, r24
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	18 07       	cpc	r17, r24
    2142:	58 f4       	brcc	.+22     	; 0x215a <__clzsi2+0x3c>
    2144:	ef ef       	ldi	r30, 0xFF	; 255
    2146:	ee 16       	cp	r14, r30
    2148:	f1 04       	cpc	r15, r1
    214a:	01 05       	cpc	r16, r1
    214c:	11 05       	cpc	r17, r1
    214e:	09 f0       	breq	.+2      	; 0x2152 <__clzsi2+0x34>
    2150:	90 f4       	brcc	.+36     	; 0x2176 <__clzsi2+0x58>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	dc 01       	movw	r26, r24
    2158:	17 c0       	rjmp	.+46     	; 0x2188 <__clzsi2+0x6a>
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	ef 16       	cp	r14, r31
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	ff 06       	cpc	r15, r31
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	0f 07       	cpc	r16, r31
    2166:	f1 e0       	ldi	r31, 0x01	; 1
    2168:	1f 07       	cpc	r17, r31
    216a:	50 f4       	brcc	.+20     	; 0x2180 <__clzsi2+0x62>
    216c:	80 e1       	ldi	r24, 0x10	; 16
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e0       	ldi	r26, 0x00	; 0
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	09 c0       	rjmp	.+18     	; 0x2188 <__clzsi2+0x6a>
    2176:	88 e0       	ldi	r24, 0x08	; 8
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <__clzsi2+0x6a>
    2180:	88 e1       	ldi	r24, 0x18	; 24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e0       	ldi	r26, 0x00	; 0
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	20 e2       	ldi	r18, 0x20	; 32
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	28 1b       	sub	r18, r24
    2192:	39 0b       	sbc	r19, r25
    2194:	4a 0b       	sbc	r20, r26
    2196:	5b 0b       	sbc	r21, r27
    2198:	57 01       	movw	r10, r14
    219a:	68 01       	movw	r12, r16
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <__clzsi2+0x88>
    219e:	d6 94       	lsr	r13
    21a0:	c7 94       	ror	r12
    21a2:	b7 94       	ror	r11
    21a4:	a7 94       	ror	r10
    21a6:	8a 95       	dec	r24
    21a8:	d2 f7       	brpl	.-12     	; 0x219e <__clzsi2+0x80>
    21aa:	d6 01       	movw	r26, r12
    21ac:	c5 01       	movw	r24, r10
    21ae:	89 5c       	subi	r24, 0xC9	; 201
    21b0:	9f 4d       	sbci	r25, 0xDF	; 223
    21b2:	fc 01       	movw	r30, r24
    21b4:	80 81       	ld	r24, Z
    21b6:	28 1b       	sub	r18, r24
    21b8:	31 09       	sbc	r19, r1
    21ba:	41 09       	sbc	r20, r1
    21bc:	51 09       	sbc	r21, r1
    21be:	c9 01       	movw	r24, r18
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	bf 90       	pop	r11
    21ce:	af 90       	pop	r10
    21d0:	08 95       	ret

000021d2 <__pack_f>:
    21d2:	ef 92       	push	r14
    21d4:	ff 92       	push	r15
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	fc 01       	movw	r30, r24
    21e0:	24 81       	ldd	r18, Z+4	; 0x04
    21e2:	35 81       	ldd	r19, Z+5	; 0x05
    21e4:	46 81       	ldd	r20, Z+6	; 0x06
    21e6:	57 81       	ldd	r21, Z+7	; 0x07
    21e8:	61 81       	ldd	r22, Z+1	; 0x01
    21ea:	80 81       	ld	r24, Z
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	20 f4       	brcc	.+8      	; 0x21f8 <__pack_f+0x26>
    21f0:	40 61       	ori	r20, 0x10	; 16
    21f2:	ef ef       	ldi	r30, 0xFF	; 255
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	a3 c0       	rjmp	.+326    	; 0x233e <__pack_f+0x16c>
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__pack_f+0x2c>
    21fc:	9b c0       	rjmp	.+310    	; 0x2334 <__pack_f+0x162>
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	09 f4       	brne	.+2      	; 0x2204 <__pack_f+0x32>
    2202:	92 c0       	rjmp	.+292    	; 0x2328 <__pack_f+0x156>
    2204:	21 15       	cp	r18, r1
    2206:	31 05       	cpc	r19, r1
    2208:	41 05       	cpc	r20, r1
    220a:	51 05       	cpc	r21, r1
    220c:	09 f4       	brne	.+2      	; 0x2210 <__pack_f+0x3e>
    220e:	8f c0       	rjmp	.+286    	; 0x232e <__pack_f+0x15c>
    2210:	02 80       	ldd	r0, Z+2	; 0x02
    2212:	f3 81       	ldd	r31, Z+3	; 0x03
    2214:	e0 2d       	mov	r30, r0
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	e2 38       	cpi	r30, 0x82	; 130
    221a:	f8 07       	cpc	r31, r24
    221c:	0c f0       	brlt	.+2      	; 0x2220 <__pack_f+0x4e>
    221e:	5a c0       	rjmp	.+180    	; 0x22d4 <__pack_f+0x102>
    2220:	c2 e8       	ldi	r28, 0x82	; 130
    2222:	df ef       	ldi	r29, 0xFF	; 255
    2224:	ce 1b       	sub	r28, r30
    2226:	df 0b       	sbc	r29, r31
    2228:	ca 31       	cpi	r28, 0x1A	; 26
    222a:	d1 05       	cpc	r29, r1
    222c:	6c f5       	brge	.+90     	; 0x2288 <__pack_f+0xb6>
    222e:	79 01       	movw	r14, r18
    2230:	8a 01       	movw	r16, r20
    2232:	0c 2e       	mov	r0, r28
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__pack_f+0x6c>
    2236:	16 95       	lsr	r17
    2238:	07 95       	ror	r16
    223a:	f7 94       	ror	r15
    223c:	e7 94       	ror	r14
    223e:	0a 94       	dec	r0
    2240:	d2 f7       	brpl	.-12     	; 0x2236 <__pack_f+0x64>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	0c 2e       	mov	r0, r28
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <__pack_f+0x84>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	aa 1f       	adc	r26, r26
    2254:	bb 1f       	adc	r27, r27
    2256:	0a 94       	dec	r0
    2258:	d2 f7       	brpl	.-12     	; 0x224e <__pack_f+0x7c>
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	a1 09       	sbc	r26, r1
    225e:	b1 09       	sbc	r27, r1
    2260:	82 23       	and	r24, r18
    2262:	93 23       	and	r25, r19
    2264:	a4 23       	and	r26, r20
    2266:	b5 23       	and	r27, r21
    2268:	21 e0       	ldi	r18, 0x01	; 1
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	a1 05       	cpc	r26, r1
    2274:	b1 05       	cpc	r27, r1
    2276:	19 f4       	brne	.+6      	; 0x227e <__pack_f+0xac>
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	a9 01       	movw	r20, r18
    227e:	2e 29       	or	r18, r14
    2280:	3f 29       	or	r19, r15
    2282:	40 2b       	or	r20, r16
    2284:	51 2b       	or	r21, r17
    2286:	03 c0       	rjmp	.+6      	; 0x228e <__pack_f+0xbc>
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	a9 01       	movw	r20, r18
    228e:	da 01       	movw	r26, r20
    2290:	c9 01       	movw	r24, r18
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	a0 70       	andi	r26, 0x00	; 0
    2298:	b0 70       	andi	r27, 0x00	; 0
    229a:	80 34       	cpi	r24, 0x40	; 64
    229c:	91 05       	cpc	r25, r1
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	39 f4       	brne	.+14     	; 0x22b2 <__pack_f+0xe0>
    22a4:	27 ff       	sbrs	r18, 7
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__pack_f+0xe8>
    22a8:	20 5c       	subi	r18, 0xC0	; 192
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	4f 4f       	sbci	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <__pack_f+0xe8>
    22b2:	21 5c       	subi	r18, 0xC1	; 193
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	e1 e0       	ldi	r30, 0x01	; 1
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	20 30       	cpi	r18, 0x00	; 0
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	38 07       	cpc	r19, r24
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	48 07       	cpc	r20, r24
    22c8:	80 e4       	ldi	r24, 0x40	; 64
    22ca:	58 07       	cpc	r21, r24
    22cc:	28 f5       	brcc	.+74     	; 0x2318 <__pack_f+0x146>
    22ce:	e0 e0       	ldi	r30, 0x00	; 0
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	22 c0       	rjmp	.+68     	; 0x2318 <__pack_f+0x146>
    22d4:	e0 38       	cpi	r30, 0x80	; 128
    22d6:	f1 05       	cpc	r31, r1
    22d8:	6c f5       	brge	.+90     	; 0x2334 <__pack_f+0x162>
    22da:	e1 58       	subi	r30, 0x81	; 129
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	da 01       	movw	r26, r20
    22e0:	c9 01       	movw	r24, r18
    22e2:	8f 77       	andi	r24, 0x7F	; 127
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	a0 70       	andi	r26, 0x00	; 0
    22e8:	b0 70       	andi	r27, 0x00	; 0
    22ea:	80 34       	cpi	r24, 0x40	; 64
    22ec:	91 05       	cpc	r25, r1
    22ee:	a1 05       	cpc	r26, r1
    22f0:	b1 05       	cpc	r27, r1
    22f2:	39 f4       	brne	.+14     	; 0x2302 <__pack_f+0x130>
    22f4:	27 ff       	sbrs	r18, 7
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <__pack_f+0x138>
    22f8:	20 5c       	subi	r18, 0xC0	; 192
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	4f 4f       	sbci	r20, 0xFF	; 255
    22fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2300:	04 c0       	rjmp	.+8      	; 0x230a <__pack_f+0x138>
    2302:	21 5c       	subi	r18, 0xC1	; 193
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	4f 4f       	sbci	r20, 0xFF	; 255
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	57 ff       	sbrs	r21, 7
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <__pack_f+0x146>
    230e:	56 95       	lsr	r21
    2310:	47 95       	ror	r20
    2312:	37 95       	ror	r19
    2314:	27 95       	ror	r18
    2316:	31 96       	adiw	r30, 0x01	; 1
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	56 95       	lsr	r21
    231c:	47 95       	ror	r20
    231e:	37 95       	ror	r19
    2320:	27 95       	ror	r18
    2322:	8a 95       	dec	r24
    2324:	d1 f7       	brne	.-12     	; 0x231a <__pack_f+0x148>
    2326:	0b c0       	rjmp	.+22     	; 0x233e <__pack_f+0x16c>
    2328:	e0 e0       	ldi	r30, 0x00	; 0
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <__pack_f+0x166>
    232e:	e0 e0       	ldi	r30, 0x00	; 0
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	05 c0       	rjmp	.+10     	; 0x233e <__pack_f+0x16c>
    2334:	ef ef       	ldi	r30, 0xFF	; 255
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	8e 2f       	mov	r24, r30
    2340:	87 95       	ror	r24
    2342:	88 27       	eor	r24, r24
    2344:	87 95       	ror	r24
    2346:	94 2f       	mov	r25, r20
    2348:	9f 77       	andi	r25, 0x7F	; 127
    234a:	67 95       	ror	r22
    234c:	66 27       	eor	r22, r22
    234e:	67 95       	ror	r22
    2350:	e6 95       	lsr	r30
    2352:	e2 2e       	mov	r14, r18
    2354:	a9 2f       	mov	r26, r25
    2356:	a8 2b       	or	r26, r24
    2358:	fe 2f       	mov	r31, r30
    235a:	f6 2b       	or	r31, r22
    235c:	62 2f       	mov	r22, r18
    235e:	73 2f       	mov	r23, r19
    2360:	8a 2f       	mov	r24, r26
    2362:	9f 2f       	mov	r25, r31
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	e6 e0       	ldi	r30, 0x06	; 6
    236a:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x18>

0000236e <__unpack_f>:
    236e:	dc 01       	movw	r26, r24
    2370:	fb 01       	movw	r30, r22
    2372:	2c 91       	ld	r18, X
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	3c 91       	ld	r19, X
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	12 96       	adiw	r26, 0x02	; 2
    237c:	8c 91       	ld	r24, X
    237e:	12 97       	sbiw	r26, 0x02	; 2
    2380:	48 2f       	mov	r20, r24
    2382:	4f 77       	andi	r20, 0x7F	; 127
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	98 2f       	mov	r25, r24
    2388:	99 1f       	adc	r25, r25
    238a:	99 27       	eor	r25, r25
    238c:	99 1f       	adc	r25, r25
    238e:	13 96       	adiw	r26, 0x03	; 3
    2390:	6c 91       	ld	r22, X
    2392:	13 97       	sbiw	r26, 0x03	; 3
    2394:	86 2f       	mov	r24, r22
    2396:	88 0f       	add	r24, r24
    2398:	89 2b       	or	r24, r25
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	66 1f       	adc	r22, r22
    239e:	66 27       	eor	r22, r22
    23a0:	66 1f       	adc	r22, r22
    23a2:	61 83       	std	Z+1, r22	; 0x01
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	39 f5       	brne	.+78     	; 0x23f6 <__unpack_f+0x88>
    23a8:	21 15       	cp	r18, r1
    23aa:	31 05       	cpc	r19, r1
    23ac:	41 05       	cpc	r20, r1
    23ae:	51 05       	cpc	r21, r1
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__unpack_f+0x48>
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	29 c0       	rjmp	.+82     	; 0x2408 <__unpack_f+0x9a>
    23b6:	82 e8       	ldi	r24, 0x82	; 130
    23b8:	9f ef       	ldi	r25, 0xFF	; 255
    23ba:	82 83       	std	Z+2, r24	; 0x02
    23bc:	93 83       	std	Z+3, r25	; 0x03
    23be:	67 e0       	ldi	r22, 0x07	; 7
    23c0:	22 0f       	add	r18, r18
    23c2:	33 1f       	adc	r19, r19
    23c4:	44 1f       	adc	r20, r20
    23c6:	55 1f       	adc	r21, r21
    23c8:	6a 95       	dec	r22
    23ca:	d1 f7       	brne	.-12     	; 0x23c0 <__unpack_f+0x52>
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	80 83       	st	Z, r24
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <__unpack_f+0x76>
    23d2:	22 0f       	add	r18, r18
    23d4:	33 1f       	adc	r19, r19
    23d6:	44 1f       	adc	r20, r20
    23d8:	55 1f       	adc	r21, r21
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	82 83       	std	Z+2, r24	; 0x02
    23e2:	93 83       	std	Z+3, r25	; 0x03
    23e4:	20 30       	cpi	r18, 0x00	; 0
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	38 07       	cpc	r19, r24
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	48 07       	cpc	r20, r24
    23ee:	80 e4       	ldi	r24, 0x40	; 64
    23f0:	58 07       	cpc	r21, r24
    23f2:	78 f3       	brcs	.-34     	; 0x23d2 <__unpack_f+0x64>
    23f4:	20 c0       	rjmp	.+64     	; 0x2436 <__unpack_f+0xc8>
    23f6:	8f 3f       	cpi	r24, 0xFF	; 255
    23f8:	91 05       	cpc	r25, r1
    23fa:	79 f4       	brne	.+30     	; 0x241a <__unpack_f+0xac>
    23fc:	21 15       	cp	r18, r1
    23fe:	31 05       	cpc	r19, r1
    2400:	41 05       	cpc	r20, r1
    2402:	51 05       	cpc	r21, r1
    2404:	19 f4       	brne	.+6      	; 0x240c <__unpack_f+0x9e>
    2406:	84 e0       	ldi	r24, 0x04	; 4
    2408:	80 83       	st	Z, r24
    240a:	08 95       	ret
    240c:	44 ff       	sbrs	r20, 4
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <__unpack_f+0xa8>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 83       	st	Z, r24
    2414:	10 c0       	rjmp	.+32     	; 0x2436 <__unpack_f+0xc8>
    2416:	10 82       	st	Z, r1
    2418:	0e c0       	rjmp	.+28     	; 0x2436 <__unpack_f+0xc8>
    241a:	8f 57       	subi	r24, 0x7F	; 127
    241c:	90 40       	sbci	r25, 0x00	; 0
    241e:	82 83       	std	Z+2, r24	; 0x02
    2420:	93 83       	std	Z+3, r25	; 0x03
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	80 83       	st	Z, r24
    2426:	87 e0       	ldi	r24, 0x07	; 7
    2428:	22 0f       	add	r18, r18
    242a:	33 1f       	adc	r19, r19
    242c:	44 1f       	adc	r20, r20
    242e:	55 1f       	adc	r21, r21
    2430:	8a 95       	dec	r24
    2432:	d1 f7       	brne	.-12     	; 0x2428 <__unpack_f+0xba>
    2434:	50 64       	ori	r21, 0x40	; 64
    2436:	24 83       	std	Z+4, r18	; 0x04
    2438:	35 83       	std	Z+5, r19	; 0x05
    243a:	46 83       	std	Z+6, r20	; 0x06
    243c:	57 83       	std	Z+7, r21	; 0x07
    243e:	08 95       	ret

00002440 <__fpcmp_parts_f>:
    2440:	fc 01       	movw	r30, r24
    2442:	db 01       	movw	r26, r22
    2444:	90 81       	ld	r25, Z
    2446:	92 30       	cpi	r25, 0x02	; 2
    2448:	08 f4       	brcc	.+2      	; 0x244c <__fpcmp_parts_f+0xc>
    244a:	49 c0       	rjmp	.+146    	; 0x24de <__fpcmp_parts_f+0x9e>
    244c:	8c 91       	ld	r24, X
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	08 f4       	brcc	.+2      	; 0x2454 <__fpcmp_parts_f+0x14>
    2452:	45 c0       	rjmp	.+138    	; 0x24de <__fpcmp_parts_f+0x9e>
    2454:	94 30       	cpi	r25, 0x04	; 4
    2456:	51 f4       	brne	.+20     	; 0x246c <__fpcmp_parts_f+0x2c>
    2458:	61 81       	ldd	r22, Z+1	; 0x01
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	b1 f5       	brne	.+108    	; 0x24ca <__fpcmp_parts_f+0x8a>
    245e:	11 96       	adiw	r26, 0x01	; 1
    2460:	2c 91       	ld	r18, X
    2462:	11 97       	sbiw	r26, 0x01	; 1
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	26 1b       	sub	r18, r22
    2468:	31 09       	sbc	r19, r1
    246a:	41 c0       	rjmp	.+130    	; 0x24ee <__fpcmp_parts_f+0xae>
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	21 f0       	breq	.+8      	; 0x2478 <__fpcmp_parts_f+0x38>
    2470:	92 30       	cpi	r25, 0x02	; 2
    2472:	41 f4       	brne	.+16     	; 0x2484 <__fpcmp_parts_f+0x44>
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	b1 f1       	breq	.+108    	; 0x24e4 <__fpcmp_parts_f+0xa4>
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	8c 91       	ld	r24, X
    247c:	11 97       	sbiw	r26, 0x01	; 1
    247e:	88 23       	and	r24, r24
    2480:	a1 f1       	breq	.+104    	; 0x24ea <__fpcmp_parts_f+0xaa>
    2482:	2d c0       	rjmp	.+90     	; 0x24de <__fpcmp_parts_f+0x9e>
    2484:	61 81       	ldd	r22, Z+1	; 0x01
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	01 f1       	breq	.+64     	; 0x24ca <__fpcmp_parts_f+0x8a>
    248a:	11 96       	adiw	r26, 0x01	; 1
    248c:	8c 91       	ld	r24, X
    248e:	11 97       	sbiw	r26, 0x01	; 1
    2490:	68 17       	cp	r22, r24
    2492:	d9 f4       	brne	.+54     	; 0x24ca <__fpcmp_parts_f+0x8a>
    2494:	22 81       	ldd	r18, Z+2	; 0x02
    2496:	33 81       	ldd	r19, Z+3	; 0x03
    2498:	12 96       	adiw	r26, 0x02	; 2
    249a:	8d 91       	ld	r24, X+
    249c:	9c 91       	ld	r25, X
    249e:	13 97       	sbiw	r26, 0x03	; 3
    24a0:	82 17       	cp	r24, r18
    24a2:	93 07       	cpc	r25, r19
    24a4:	94 f0       	brlt	.+36     	; 0x24ca <__fpcmp_parts_f+0x8a>
    24a6:	28 17       	cp	r18, r24
    24a8:	39 07       	cpc	r19, r25
    24aa:	bc f0       	brlt	.+46     	; 0x24da <__fpcmp_parts_f+0x9a>
    24ac:	24 81       	ldd	r18, Z+4	; 0x04
    24ae:	35 81       	ldd	r19, Z+5	; 0x05
    24b0:	46 81       	ldd	r20, Z+6	; 0x06
    24b2:	57 81       	ldd	r21, Z+7	; 0x07
    24b4:	14 96       	adiw	r26, 0x04	; 4
    24b6:	8d 91       	ld	r24, X+
    24b8:	9d 91       	ld	r25, X+
    24ba:	0d 90       	ld	r0, X+
    24bc:	bc 91       	ld	r27, X
    24be:	a0 2d       	mov	r26, r0
    24c0:	82 17       	cp	r24, r18
    24c2:	93 07       	cpc	r25, r19
    24c4:	a4 07       	cpc	r26, r20
    24c6:	b5 07       	cpc	r27, r21
    24c8:	18 f4       	brcc	.+6      	; 0x24d0 <__fpcmp_parts_f+0x90>
    24ca:	66 23       	and	r22, r22
    24cc:	41 f0       	breq	.+16     	; 0x24de <__fpcmp_parts_f+0x9e>
    24ce:	0d c0       	rjmp	.+26     	; 0x24ea <__fpcmp_parts_f+0xaa>
    24d0:	28 17       	cp	r18, r24
    24d2:	39 07       	cpc	r19, r25
    24d4:	4a 07       	cpc	r20, r26
    24d6:	5b 07       	cpc	r21, r27
    24d8:	28 f4       	brcc	.+10     	; 0x24e4 <__fpcmp_parts_f+0xa4>
    24da:	66 23       	and	r22, r22
    24dc:	31 f0       	breq	.+12     	; 0x24ea <__fpcmp_parts_f+0xaa>
    24de:	21 e0       	ldi	r18, 0x01	; 1
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <__fpcmp_parts_f+0xae>
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <__fpcmp_parts_f+0xae>
    24ea:	2f ef       	ldi	r18, 0xFF	; 255
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	c9 01       	movw	r24, r18
    24f0:	08 95       	ret

000024f2 <__mulsi3>:
    24f2:	62 9f       	mul	r22, r18
    24f4:	d0 01       	movw	r26, r0
    24f6:	73 9f       	mul	r23, r19
    24f8:	f0 01       	movw	r30, r0
    24fa:	82 9f       	mul	r24, r18
    24fc:	e0 0d       	add	r30, r0
    24fe:	f1 1d       	adc	r31, r1
    2500:	64 9f       	mul	r22, r20
    2502:	e0 0d       	add	r30, r0
    2504:	f1 1d       	adc	r31, r1
    2506:	92 9f       	mul	r25, r18
    2508:	f0 0d       	add	r31, r0
    250a:	83 9f       	mul	r24, r19
    250c:	f0 0d       	add	r31, r0
    250e:	74 9f       	mul	r23, r20
    2510:	f0 0d       	add	r31, r0
    2512:	65 9f       	mul	r22, r21
    2514:	f0 0d       	add	r31, r0
    2516:	99 27       	eor	r25, r25
    2518:	72 9f       	mul	r23, r18
    251a:	b0 0d       	add	r27, r0
    251c:	e1 1d       	adc	r30, r1
    251e:	f9 1f       	adc	r31, r25
    2520:	63 9f       	mul	r22, r19
    2522:	b0 0d       	add	r27, r0
    2524:	e1 1d       	adc	r30, r1
    2526:	f9 1f       	adc	r31, r25
    2528:	bd 01       	movw	r22, r26
    252a:	cf 01       	movw	r24, r30
    252c:	11 24       	eor	r1, r1
    252e:	08 95       	ret

00002530 <__udivmodhi4>:
    2530:	aa 1b       	sub	r26, r26
    2532:	bb 1b       	sub	r27, r27
    2534:	51 e1       	ldi	r21, 0x11	; 17
    2536:	07 c0       	rjmp	.+14     	; 0x2546 <__udivmodhi4_ep>

00002538 <__udivmodhi4_loop>:
    2538:	aa 1f       	adc	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	a6 17       	cp	r26, r22
    253e:	b7 07       	cpc	r27, r23
    2540:	10 f0       	brcs	.+4      	; 0x2546 <__udivmodhi4_ep>
    2542:	a6 1b       	sub	r26, r22
    2544:	b7 0b       	sbc	r27, r23

00002546 <__udivmodhi4_ep>:
    2546:	88 1f       	adc	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	5a 95       	dec	r21
    254c:	a9 f7       	brne	.-22     	; 0x2538 <__udivmodhi4_loop>
    254e:	80 95       	com	r24
    2550:	90 95       	com	r25
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	08 95       	ret

00002558 <__divmodhi4>:
    2558:	97 fb       	bst	r25, 7
    255a:	09 2e       	mov	r0, r25
    255c:	07 26       	eor	r0, r23
    255e:	0a d0       	rcall	.+20     	; 0x2574 <__divmodhi4_neg1>
    2560:	77 fd       	sbrc	r23, 7
    2562:	04 d0       	rcall	.+8      	; 0x256c <__divmodhi4_neg2>
    2564:	e5 df       	rcall	.-54     	; 0x2530 <__udivmodhi4>
    2566:	06 d0       	rcall	.+12     	; 0x2574 <__divmodhi4_neg1>
    2568:	00 20       	and	r0, r0
    256a:	1a f4       	brpl	.+6      	; 0x2572 <__divmodhi4_exit>

0000256c <__divmodhi4_neg2>:
    256c:	70 95       	com	r23
    256e:	61 95       	neg	r22
    2570:	7f 4f       	sbci	r23, 0xFF	; 255

00002572 <__divmodhi4_exit>:
    2572:	08 95       	ret

00002574 <__divmodhi4_neg1>:
    2574:	f6 f7       	brtc	.-4      	; 0x2572 <__divmodhi4_exit>
    2576:	90 95       	com	r25
    2578:	81 95       	neg	r24
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	08 95       	ret

0000257e <__udivmodsi4>:
    257e:	a1 e2       	ldi	r26, 0x21	; 33
    2580:	1a 2e       	mov	r1, r26
    2582:	aa 1b       	sub	r26, r26
    2584:	bb 1b       	sub	r27, r27
    2586:	fd 01       	movw	r30, r26
    2588:	0d c0       	rjmp	.+26     	; 0x25a4 <__udivmodsi4_ep>

0000258a <__udivmodsi4_loop>:
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	ee 1f       	adc	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	a2 17       	cp	r26, r18
    2594:	b3 07       	cpc	r27, r19
    2596:	e4 07       	cpc	r30, r20
    2598:	f5 07       	cpc	r31, r21
    259a:	20 f0       	brcs	.+8      	; 0x25a4 <__udivmodsi4_ep>
    259c:	a2 1b       	sub	r26, r18
    259e:	b3 0b       	sbc	r27, r19
    25a0:	e4 0b       	sbc	r30, r20
    25a2:	f5 0b       	sbc	r31, r21

000025a4 <__udivmodsi4_ep>:
    25a4:	66 1f       	adc	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	88 1f       	adc	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	1a 94       	dec	r1
    25ae:	69 f7       	brne	.-38     	; 0x258a <__udivmodsi4_loop>
    25b0:	60 95       	com	r22
    25b2:	70 95       	com	r23
    25b4:	80 95       	com	r24
    25b6:	90 95       	com	r25
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	bd 01       	movw	r22, r26
    25be:	cf 01       	movw	r24, r30
    25c0:	08 95       	ret

000025c2 <__prologue_saves__>:
    25c2:	2f 92       	push	r2
    25c4:	3f 92       	push	r3
    25c6:	4f 92       	push	r4
    25c8:	5f 92       	push	r5
    25ca:	6f 92       	push	r6
    25cc:	7f 92       	push	r7
    25ce:	8f 92       	push	r8
    25d0:	9f 92       	push	r9
    25d2:	af 92       	push	r10
    25d4:	bf 92       	push	r11
    25d6:	cf 92       	push	r12
    25d8:	df 92       	push	r13
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	ca 1b       	sub	r28, r26
    25ec:	db 0b       	sbc	r29, r27
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	09 94       	ijmp

000025f4 <__epilogue_restores__>:
    25f4:	2a 88       	ldd	r2, Y+18	; 0x12
    25f6:	39 88       	ldd	r3, Y+17	; 0x11
    25f8:	48 88       	ldd	r4, Y+16	; 0x10
    25fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2600:	8c 84       	ldd	r8, Y+12	; 0x0c
    2602:	9b 84       	ldd	r9, Y+11	; 0x0b
    2604:	aa 84       	ldd	r10, Y+10	; 0x0a
    2606:	b9 84       	ldd	r11, Y+9	; 0x09
    2608:	c8 84       	ldd	r12, Y+8	; 0x08
    260a:	df 80       	ldd	r13, Y+7	; 0x07
    260c:	ee 80       	ldd	r14, Y+6	; 0x06
    260e:	fd 80       	ldd	r15, Y+5	; 0x05
    2610:	0c 81       	ldd	r16, Y+4	; 0x04
    2612:	1b 81       	ldd	r17, Y+3	; 0x03
    2614:	aa 81       	ldd	r26, Y+2	; 0x02
    2616:	b9 81       	ldd	r27, Y+1	; 0x01
    2618:	ce 0f       	add	r28, r30
    261a:	d1 1d       	adc	r29, r1
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	ed 01       	movw	r28, r26
    2622:	08 95       	ret

00002624 <_exit>:
    2624:	f8 94       	cli

00002626 <__stop_program>:
    2626:	ff cf       	rjmp	.-2      	; 0x2626 <__stop_program>
