
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00802000  00002682  00002716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  00802158  00802158  0000286e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a7e  00000000  00000000  00003241  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005651  00000000  00000000  00003cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c2a  00000000  00000000  00009310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000323b  00000000  00000000  0000af3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000750  00000000  00000000  0000e178  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016c6  00000000  00000000  0000e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e85  00000000  00000000  0000ff8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000bf1  00000000  00000000  00011e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  00012a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 e8       	ldi	r30, 0x82	; 130
     18c:	f6 e2       	ldi	r31, 0x26	; 38
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 35       	cpi	r26, 0x58	; 88
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e5       	ldi	r26, 0x58	; 88
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 36       	cpi	r26, 0x60	; 96
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 39 07 	call	0xe72	; 0xe72 <main>
     1ae:	0c 94 3f 13 	jmp	0x267e	; 0x267e <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 6e 21 	lds	r24, 0x216E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	2f 92       	push	r2
     1be:	3f 92       	push	r3
     1c0:	4f 92       	push	r4
     1c2:	5f 92       	push	r5
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <get_pot_value+0x26>
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	6b 01       	movw	r12, r22
     1e8:	2a 01       	movw	r4, r20
    //outmax: maximum value to output
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	ec 59       	subi	r30, 0x9C	; 156
     1f4:	fe 4d       	sbci	r31, 0xDE	; 222
     1f6:	60 81       	ld	r22, Z
     1f8:	71 81       	ldd	r23, Z+1	; 0x01
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	42 e7       	ldi	r20, 0x72	; 114
     208:	55 e4       	ldi	r21, 0x45	; 69
     20a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__divsf3>
     20e:	7b 01       	movw	r14, r22
     210:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin + 1) + outmin;
     212:	b2 01       	movw	r22, r4
     214:	6c 19       	sub	r22, r12
     216:	7d 09       	sbc	r23, r13
     218:	6f 5f       	subi	r22, 0xFF	; 255
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
     224:	9b 01       	movw	r18, r22
     226:	ac 01       	movw	r20, r24
     228:	c8 01       	movw	r24, r16
     22a:	b7 01       	movw	r22, r14
     22c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
     230:	7b 01       	movw	r14, r22
     232:	8c 01       	movw	r16, r24
     234:	b6 01       	movw	r22, r12
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
     23e:	d6 2e       	mov	r13, r22
     240:	c7 2e       	mov	r12, r23
     242:	b8 2e       	mov	r11, r24
     244:	a9 2e       	mov	r10, r25
     246:	16 01       	movw	r2, r12
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	6e 2d       	mov	r22, r14
     24e:	7f 2d       	mov	r23, r15
     250:	80 2f       	mov	r24, r16
     252:	91 2f       	mov	r25, r17
     254:	d6 01       	movw	r26, r12
     256:	f5 01       	movw	r30, r10
     258:	2b 2f       	mov	r18, r27
     25a:	3a 2f       	mov	r19, r26
     25c:	4f 2f       	mov	r20, r31
     25e:	5e 2f       	mov	r21, r30
     260:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__addsf3>
     264:	96 2e       	mov	r9, r22
     266:	87 2e       	mov	r8, r23
     268:	78 2e       	mov	r7, r24
     26a:	69 2e       	mov	r6, r25
	
	if (temp > outmax)
     26c:	b2 01       	movw	r22, r4
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
     276:	f6 2e       	mov	r15, r22
     278:	07 2f       	mov	r16, r23
     27a:	18 2f       	mov	r17, r24
     27c:	e9 2e       	mov	r14, r25
     27e:	a4 01       	movw	r20, r8
     280:	93 01       	movw	r18, r6
     282:	65 2f       	mov	r22, r21
     284:	74 2f       	mov	r23, r20
     286:	83 2f       	mov	r24, r19
     288:	92 2f       	mov	r25, r18
     28a:	2f 2d       	mov	r18, r15
     28c:	30 2f       	mov	r19, r16
     28e:	41 2f       	mov	r20, r17
     290:	5e 2d       	mov	r21, r14
     292:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__gtsf2>
     296:	18 16       	cp	r1, r24
     298:	24 f0       	brlt	.+8      	; 0x2a2 <get_pot_value+0xe6>
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin + 1) + outmin;
     29a:	f9 2c       	mov	r15, r9
     29c:	08 2d       	mov	r16, r8
     29e:	17 2d       	mov	r17, r7
     2a0:	e6 2c       	mov	r14, r6
	
	if (temp > outmax)
		temp = outmax;
		
	if (temp < outmin)
     2a2:	6f 2d       	mov	r22, r15
     2a4:	70 2f       	mov	r23, r16
     2a6:	81 2f       	mov	r24, r17
     2a8:	9e 2d       	mov	r25, r14
     2aa:	d6 01       	movw	r26, r12
     2ac:	f5 01       	movw	r30, r10
     2ae:	2b 2f       	mov	r18, r27
     2b0:	3c 2d       	mov	r19, r12
     2b2:	4f 2f       	mov	r20, r31
     2b4:	5a 2d       	mov	r21, r10
     2b6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__ltsf2>
     2ba:	87 fd       	sbrc	r24, 7
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <get_pot_value+0x10a>
     2be:	3f 2c       	mov	r3, r15
     2c0:	20 2e       	mov	r2, r16
     2c2:	19 83       	std	Y+1, r17	; 0x01
     2c4:	ea 82       	std	Y+2, r14	; 0x02
		temp = outmin;
    
    return (uint16_t) temp;
     2c6:	a1 01       	movw	r20, r2
     2c8:	39 81       	ldd	r19, Y+1	; 0x01
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	65 2f       	mov	r22, r21
     2ce:	72 2d       	mov	r23, r2
     2d0:	83 2f       	mov	r24, r19
     2d2:	92 2f       	mov	r25, r18
     2d4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fixunssfsi>
}
     2d8:	cb 01       	movw	r24, r22
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	7f 90       	pop	r7
     2f8:	6f 90       	pop	r6
     2fa:	5f 90       	pop	r5
     2fc:	4f 90       	pop	r4
     2fe:	3f 90       	pop	r3
     300:	2f 90       	pop	r2
     302:	08 95       	ret

00000304 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     304:	8f 92       	push	r8
     306:	9f 92       	push	r9
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	fc 01       	movw	r30, r24
     31e:	22 e0       	ldi	r18, 0x02	; 2
     320:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     322:	ca e0       	ldi	r28, 0x0A	; 10
     324:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     326:	73 e0       	ldi	r23, 0x03	; 3
     328:	c7 2e       	mov	r12, r23
     32a:	d1 2c       	mov	r13, r1
     32c:	68 e0       	ldi	r22, 0x08	; 8
     32e:	a6 2e       	mov	r10, r22
     330:	b1 2c       	mov	r11, r1
     332:	00 e6       	ldi	r16, 0x60	; 96
     334:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     336:	50 e4       	ldi	r21, 0x40	; 64
     338:	e5 2e       	mov	r14, r21
     33a:	56 e0       	ldi	r21, 0x06	; 6
     33c:	f5 2e       	mov	r15, r21
     33e:	40 ef       	ldi	r20, 0xF0	; 240
     340:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     342:	98 e3       	ldi	r25, 0x38	; 56
     344:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     346:	cf 01       	movw	r24, r30
     348:	be 01       	movw	r22, r28
     34a:	0e 94 c5 12 	call	0x258a	; 0x258a <__udivmodhi4>
     34e:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     350:	30 97       	sbiw	r30, 0x00	; 0
     352:	19 f4       	brne	.+6      	; 0x35a <set_seven_segment_LEDs+0x56>
     354:	22 30       	cpi	r18, 0x02	; 2
     356:	09 f0       	breq	.+2      	; 0x35a <set_seven_segment_LEDs+0x56>
            digit = 10;
     358:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     35a:	c9 01       	movw	r24, r18
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__divmodhi4>
     362:	b5 01       	movw	r22, r10
     364:	02 c0       	rjmp	.+4      	; 0x36a <set_seven_segment_LEDs+0x66>
     366:	66 0f       	add	r22, r22
     368:	77 1f       	adc	r23, r23
     36a:	8a 95       	dec	r24
     36c:	e2 f7       	brpl	.-8      	; 0x366 <set_seven_segment_LEDs+0x62>
     36e:	d8 01       	movw	r26, r16
     370:	16 96       	adiw	r26, 0x06	; 6
     372:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     374:	d7 01       	movw	r26, r14
     376:	16 96       	adiw	r26, 0x06	; 6
     378:	9c 92       	st	X, r9
     37a:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     37c:	42 95       	swap	r20
     37e:	40 7f       	andi	r20, 0xF0	; 240
     380:	15 96       	adiw	r26, 0x05	; 5
     382:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     384:	d8 01       	movw	r26, r16
     386:	15 96       	adiw	r26, 0x05	; 5
     388:	8c 92       	st	X, r8
     38a:	15 97       	sbiw	r26, 0x05	; 5
     38c:	2f 5f       	subi	r18, 0xFF	; 255
     38e:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     390:	25 30       	cpi	r18, 0x05	; 5
     392:	31 05       	cpc	r19, r1
     394:	31 f0       	breq	.+12     	; 0x3a2 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     396:	cf 01       	movw	r24, r30
     398:	be 01       	movw	r22, r28
     39a:	0e 94 c5 12 	call	0x258a	; 0x258a <__udivmodhi4>
     39e:	fb 01       	movw	r30, r22
     3a0:	d2 cf       	rjmp	.-92     	; 0x346 <set_seven_segment_LEDs+0x42>
    }
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	08 95       	ret

000003bc <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     3bc:	88 23       	and	r24, r24
     3be:	21 f0       	breq	.+8      	; 0x3c8 <set_LEDs_on+0xc>
		PORTC.OUTCLR = 0x08;
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f6 e0       	ldi	r31, 0x06	; 6
     3c6:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_0)
     3c8:	66 23       	and	r22, r22
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <set_LEDs_on+0x18>
		PORTD.OUTSET = 0x04;
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	e0 e6       	ldi	r30, 0x60	; 96
     3d0:	f6 e0       	ldi	r31, 0x06	; 6
     3d2:	85 83       	std	Z+5, r24	; 0x05
		
	if (decimal_point_1)
     3d4:	44 23       	and	r20, r20
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <set_LEDs_on+0x24>
		PORTD.OUTSET = 0x01;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	e0 e6       	ldi	r30, 0x60	; 96
     3dc:	f6 e0       	ldi	r31, 0x06	; 6
     3de:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_2)
     3e0:	22 23       	and	r18, r18
     3e2:	21 f0       	breq	.+8      	; 0x3ec <set_LEDs_on+0x30>
		PORTD.OUTSET = 0x02;
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	e0 e6       	ldi	r30, 0x60	; 96
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	85 83       	std	Z+5, r24	; 0x05
     3ec:	08 95       	ret

000003ee <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     3ee:	88 23       	and	r24, r24
     3f0:	21 f0       	breq	.+8      	; 0x3fa <set_LEDs_off+0xc>
		PORTC.OUTSET = 0x08;
     3f2:	88 e0       	ldi	r24, 0x08	; 8
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f6 e0       	ldi	r31, 0x06	; 6
     3f8:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_0)
     3fa:	66 23       	and	r22, r22
     3fc:	21 f0       	breq	.+8      	; 0x406 <set_LEDs_off+0x18>
		PORTD.OUTCLR = 0x04;
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	e0 e6       	ldi	r30, 0x60	; 96
     402:	f6 e0       	ldi	r31, 0x06	; 6
     404:	86 83       	std	Z+6, r24	; 0x06
		
	if (decimal_point_1)
     406:	44 23       	and	r20, r20
     408:	21 f0       	breq	.+8      	; 0x412 <set_LEDs_off+0x24>
		PORTD.OUTCLR = 0x01;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	e0 e6       	ldi	r30, 0x60	; 96
     40e:	f6 e0       	ldi	r31, 0x06	; 6
     410:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_2)
     412:	22 23       	and	r18, r18
     414:	21 f0       	breq	.+8      	; 0x41e <set_LEDs_off+0x30>
		PORTD.OUTCLR = 0x02;
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	e0 e6       	ldi	r30, 0x60	; 96
     41a:	f6 e0       	ldi	r31, 0x06	; 6
     41c:	86 83       	std	Z+6, r24	; 0x06
     41e:	08 95       	ret

00000420 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     420:	80 91 5c 21 	lds	r24, 0x215C
     424:	08 95       	ret

00000426 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     426:	80 91 5d 21 	lds	r24, 0x215D
     42a:	08 95       	ret

0000042c <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     42c:	80 91 5a 21 	lds	r24, 0x215A
     430:	08 95       	ret

00000432 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     432:	80 91 5b 21 	lds	r24, 0x215B
     436:	08 95       	ret

00000438 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     438:	80 91 58 21 	lds	r24, 0x2158
     43c:	08 95       	ret

0000043e <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     43e:	80 91 59 21 	lds	r24, 0x2159
     442:	08 95       	ret

00000444 <initialize_hardware>:

void initialize_hardware(){
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     448:	e0 e4       	ldi	r30, 0x40	; 64
     44a:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     44c:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     44e:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     450:	c0 e5       	ldi	r28, 0x50	; 80
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     456:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     458:	a0 e5       	ldi	r26, 0x50	; 80
     45a:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     45c:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     45e:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     460:	98 ed       	ldi	r25, 0xD8	; 216
     462:	15 c0       	rjmp	.+42     	; 0x48e <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     464:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     466:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     468:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     46a:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     46e:	70 91 51 00 	lds	r23, 0x0051
     472:	73 ff       	sbrs	r23, 3
     474:	fc cf       	rjmp	.-8      	; 0x46e <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     476:	15 96       	adiw	r26, 0x05	; 5
     478:	3c 93       	st	X, r19
     47a:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     47c:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     480:	70 91 51 00 	lds	r23, 0x0051
     484:	74 ff       	sbrs	r23, 4
     486:	fc cf       	rjmp	.-8      	; 0x480 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     488:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     48a:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     48e:	70 91 40 00 	lds	r23, 0x0040
     492:	74 30       	cpi	r23, 0x04	; 4
     494:	39 f7       	brne	.-50     	; 0x464 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     496:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     498:	a0 e6       	ldi	r26, 0x60	; 96
     49a:	b6 e0       	ldi	r27, 0x06	; 6
     49c:	80 e8       	ldi	r24, 0x80	; 128
     49e:	15 96       	adiw	r26, 0x05	; 5
     4a0:	8c 93       	st	X, r24
     4a2:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     4a4:	90 e4       	ldi	r25, 0x40	; 64
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	9c 93       	st	X, r25
     4aa:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	8c 93       	st	X, r24
     4b0:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     4b2:	e0 eb       	ldi	r30, 0xB0	; 176
     4b4:	f9 e0       	ldi	r31, 0x09	; 9
     4b6:	88 e1       	ldi	r24, 0x18	; 24
     4b8:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     4ba:	90 e2       	ldi	r25, 0x20	; 32
     4bc:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     4be:	33 e0       	ldi	r19, 0x03	; 3
     4c0:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     4c2:	8f e2       	ldi	r24, 0x2F	; 47
     4c4:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     4c6:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     4c8:	80 91 a2 00 	lds	r24, 0x00A2
     4cc:	87 68       	ori	r24, 0x87	; 135
     4ce:	e0 ea       	ldi	r30, 0xA0	; 160
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     4d4:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d6 e0       	ldi	r29, 0x06	; 6
     4da:	89 ef       	ldi	r24, 0xF9	; 249
     4dc:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     4de:	e0 e0       	ldi	r30, 0x00	; 0
     4e0:	f2 e0       	ldi	r31, 0x02	; 2
     4e2:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     4e6:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     4e8:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     4ea:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     4f0:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     4f2:	80 91 00 02 	lds	r24, 0x0200
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     4fc:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     4fe:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     500:	12 a2       	std	Z+34, r1	; 0x22
	if (decimal_point_2)
		PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     502:	40 e2       	ldi	r20, 0x20	; 32
     504:	56 e0       	ldi	r21, 0x06	; 6
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	fa 01       	movw	r30, r20
     50a:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     50c:	28 e0       	ldi	r18, 0x08	; 8
     50e:	80 e8       	ldi	r24, 0x80	; 128
     510:	96 e0       	ldi	r25, 0x06	; 6
     512:	fc 01       	movw	r30, r24
     514:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     516:	fa 01       	movw	r30, r20
     518:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     51a:	86 e0       	ldi	r24, 0x06	; 6
     51c:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     51e:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     520:	e0 e4       	ldi	r30, 0x40	; 64
     522:	f6 e0       	ldi	r31, 0x06	; 6
     524:	88 ef       	ldi	r24, 0xF8	; 248
     526:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     528:	8f e3       	ldi	r24, 0x3F	; 63
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	8c 93       	st	X, r24
     52e:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     530:	88 e3       	ldi	r24, 0x38	; 56
     532:	15 96       	adiw	r26, 0x05	; 5
     534:	8c 93       	st	X, r24
     536:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     538:	90 ef       	ldi	r25, 0xF0	; 240
     53a:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     53c:	16 96       	adiw	r26, 0x06	; 6
     53e:	8c 93       	st	X, r24
     540:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     542:	87 e0       	ldi	r24, 0x07	; 7
     544:	16 96       	adiw	r26, 0x06	; 6
     546:	8c 93       	st	X, r24
     548:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     54a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <read_hardware>:

void read_hardware(){
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     56a:	80 91 88 06 	lds	r24, 0x0688
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	86 95       	lsr	r24
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	09 f0       	breq	.+2      	; 0x57a <read_hardware+0x28>
     578:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     57a:	80 91 28 06 	lds	r24, 0x0628
     57e:	86 95       	lsr	r24
     580:	86 95       	lsr	r24
     582:	80 fd       	sbrc	r24, 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <read_hardware+0x38>
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	01 c0       	rjmp	.+2      	; 0x58c <read_hardware+0x3a>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	c8 2e       	mov	r12, r24
     58e:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     590:	80 91 28 06 	lds	r24, 0x0628
     594:	86 95       	lsr	r24
     596:	86 95       	lsr	r24
     598:	86 95       	lsr	r24
     59a:	80 fd       	sbrc	r24, 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <read_hardware+0x50>
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <read_hardware+0x52>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	c8 2a       	or	r12, r24
     5a6:	c0 92 63 21 	sts	0x2163, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     5aa:	60 91 62 21 	lds	r22, 0x2162
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	d0 90 61 21 	lds	r13, 0x2161
     5b4:	ee e5       	ldi	r30, 0x5E	; 94
     5b6:	f1 e2       	ldi	r31, 0x21	; 33
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	4c 2d       	mov	r20, r12
     5be:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     5c4:	b8 2e       	mov	r11, r24
     5c6:	8a 01       	movw	r16, r20
     5c8:	08 2e       	mov	r0, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <read_hardware+0x7e>
     5cc:	15 95       	asr	r17
     5ce:	07 95       	ror	r16
     5d0:	0a 94       	dec	r0
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <read_hardware+0x7a>
     5d4:	db 01       	movw	r26, r22
     5d6:	08 2e       	mov	r0, r24
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <read_hardware+0x8c>
     5da:	b5 95       	asr	r27
     5dc:	a7 95       	ror	r26
     5de:	0a 94       	dec	r0
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <read_hardware+0x88>
     5e2:	0a 17       	cp	r16, r26
     5e4:	1b 07       	cpc	r17, r27
     5e6:	21 f4       	brne	.+8      	; 0x5f0 <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     5e8:	a0 81       	ld	r26, Z
     5ea:	af 5f       	subi	r26, 0xFF	; 255
     5ec:	a0 83       	st	Z, r26
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     5f0:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     5f2:	a0 81       	ld	r26, Z
     5f4:	a9 30       	cpi	r26, 0x09	; 9
     5f6:	60 f0       	brcs	.+24     	; 0x610 <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     5f8:	d9 01       	movw	r26, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <read_hardware+0xae>
     5fc:	aa 0f       	add	r26, r26
     5fe:	bb 1f       	adc	r27, r27
     600:	ba 94       	dec	r11
     602:	e2 f7       	brpl	.-8      	; 0x5fc <read_hardware+0xaa>
     604:	ba 2f       	mov	r27, r26
     606:	b0 95       	com	r27
     608:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     60a:	ac 21       	and	r26, r12
     60c:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     60e:	10 82       	st	Z, r1
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	91 05       	cpc	r25, r1
     618:	a9 f6       	brne	.-86     	; 0x5c4 <read_hardware+0x72>
     61a:	d0 92 61 21 	sts	0x2161, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     61e:	c0 92 62 21 	sts	0x2162, r12
     622:	80 91 58 21 	lds	r24, 0x2158
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     626:	d0 fe       	sbrs	r13, 0
     628:	0c c0       	rjmp	.+24     	; 0x642 <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     62a:	88 23       	and	r24, r24
     62c:	19 f0       	breq	.+6      	; 0x634 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     62e:	10 92 59 21 	sts	0x2159, r1
     632:	03 c0       	rjmp	.+6      	; 0x63a <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	80 93 59 21 	sts	0x2159, r24
        toggle_switch_state = 1;                //set current value
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 58 21 	sts	0x2158, r24
     640:	0a c0       	rjmp	.+20     	; 0x656 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     642:	88 23       	and	r24, r24
     644:	21 f0       	breq	.+8      	; 0x64e <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	80 93 59 21 	sts	0x2159, r24
     64c:	02 c0       	rjmp	.+4      	; 0x652 <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     64e:	10 92 59 21 	sts	0x2159, r1
        toggle_switch_state = 0;                //set current value
     652:	10 92 58 21 	sts	0x2158, r1
     656:	80 91 5a 21 	lds	r24, 0x215A
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     65a:	d1 fe       	sbrs	r13, 1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     65e:	88 23       	and	r24, r24
     660:	19 f0       	breq	.+6      	; 0x668 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     662:	10 92 5b 21 	sts	0x215B, r1
     666:	03 c0       	rjmp	.+6      	; 0x66e <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 5b 21 	sts	0x215B, r24
        pushbutton_switch_state = 1;                //set current value
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 5a 21 	sts	0x215A, r24
     674:	0a c0       	rjmp	.+20     	; 0x68a <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     676:	88 23       	and	r24, r24
     678:	21 f0       	breq	.+8      	; 0x682 <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	80 93 5b 21 	sts	0x215B, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     682:	10 92 5b 21 	sts	0x215B, r1
        pushbutton_switch_state = 0;                //set current value
     686:	10 92 5a 21 	sts	0x215A, r1
     68a:	80 91 5c 21 	lds	r24, 0x215C
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     68e:	d2 fe       	sbrs	r13, 2
     690:	0c c0       	rjmp	.+24     	; 0x6aa <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     692:	88 23       	and	r24, r24
     694:	19 f0       	breq	.+6      	; 0x69c <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     696:	10 92 5d 21 	sts	0x215D, r1
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 5d 21 	sts	0x215D, r24
        encoder_switch_state = 1;                //set current value
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 5c 21 	sts	0x215C, r24
     6a8:	0a c0       	rjmp	.+20     	; 0x6be <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     6aa:	88 23       	and	r24, r24
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	80 93 5d 21 	sts	0x215D, r24
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     6b6:	10 92 5d 21 	sts	0x215D, r1
        encoder_switch_state = 0;                //set current value
     6ba:	10 92 5c 21 	sts	0x215C, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     6be:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	62 c0       	rjmp	.+196    	; 0x78a <read_hardware+0x238>
     6c6:	20 91 23 02 	lds	r18, 0x0223
     6ca:	21 60       	ori	r18, 0x01	; 1
     6cc:	fc 01       	movw	r30, r24
     6ce:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     6d0:	20 91 21 02 	lds	r18, 0x0221
     6d4:	27 7c       	andi	r18, 0xC7	; 199
     6d6:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     6d8:	40 91 21 02 	lds	r20, 0x0221
     6dc:	29 81       	ldd	r18, Y+1	; 0x01
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	2d 5f       	subi	r18, 0xFD	; 253
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	6a 95       	dec	r22
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <read_hardware+0x194>
     6ee:	42 2b       	or	r20, r18
     6f0:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     6f2:	20 91 20 02 	lds	r18, 0x0220
     6f6:	20 68       	ori	r18, 0x80	; 128
     6f8:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     6fa:	20 91 23 02 	lds	r18, 0x0223
     6fe:	20 ff       	sbrs	r18, 0
     700:	fc cf       	rjmp	.-8      	; 0x6fa <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	20 91 24 02 	lds	r18, 0x0224
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ec 59       	subi	r30, 0x9C	; 156
     710:	fe 4d       	sbci	r31, 0xDE	; 222
     712:	20 83       	st	Z, r18
     714:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	20 91 25 02 	lds	r18, 0x0225
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ec 59       	subi	r30, 0x9C	; 156
     724:	fe 4d       	sbci	r31, 0xDE	; 222
     726:	f2 2e       	mov	r15, r18
     728:	ee 24       	eor	r14, r14
     72a:	20 81       	ld	r18, Z
     72c:	31 81       	ldd	r19, Z+1	; 0x01
     72e:	2e 29       	or	r18, r14
     730:	3f 29       	or	r19, r15
     732:	20 83       	st	Z, r18
     734:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POTMIN)
     736:	e9 81       	ldd	r30, Y+1	; 0x01
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	ec 59       	subi	r30, 0x9C	; 156
     740:	fe 4d       	sbci	r31, 0xDE	; 222
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	20 3e       	cpi	r18, 0xE0	; 224
     748:	31 05       	cpc	r19, r1
     74a:	48 f4       	brcc	.+18     	; 0x75e <read_hardware+0x20c>
            pot_values[i] = 0;
     74c:	e9 81       	ldd	r30, Y+1	; 0x01
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ec 59       	subi	r30, 0x9C	; 156
     756:	fe 4d       	sbci	r31, 0xDE	; 222
     758:	10 82       	st	Z, r1
     75a:	11 82       	std	Z+1, r1	; 0x01
     75c:	13 c0       	rjmp	.+38     	; 0x784 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	a9 81       	ldd	r26, Y+1	; 0x01
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ec 59       	subi	r30, 0x9C	; 156
     76a:	fe 4d       	sbci	r31, 0xDE	; 222
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	aa 0f       	add	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	ac 59       	subi	r26, 0x9C	; 156
     774:	be 4d       	sbci	r27, 0xDE	; 222
     776:	2d 91       	ld	r18, X+
     778:	3c 91       	ld	r19, X
     77a:	11 97       	sbiw	r26, 0x01	; 1
     77c:	20 5e       	subi	r18, 0xE0	; 224
     77e:	30 40       	sbci	r19, 0x00	; 0
     780:	20 83       	st	Z, r18
     782:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     784:	29 81       	ldd	r18, Y+1	; 0x01
     786:	2f 5f       	subi	r18, 0xFF	; 255
     788:	29 83       	std	Y+1, r18	; 0x01
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	25 30       	cpi	r18, 0x05	; 5
     78e:	08 f4       	brcc	.+2      	; 0x792 <read_hardware+0x240>
     790:	9a cf       	rjmp	.-204    	; 0x6c6 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     792:	80 91 28 06 	lds	r24, 0x0628
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	80 fd       	sbrc	r24, 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     79c:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     7a0:	84 2f       	mov	r24, r20
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	20 91 6f 21 	lds	r18, 0x216F
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	25 27       	eor	r18, r21
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	82 23       	and	r24, r18
     7b0:	93 23       	and	r25, r19
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	59 f0       	breq	.+22     	; 0x7cc <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     7b6:	86 2f       	mov	r24, r22
     7b8:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     7ba:	80 fd       	sbrc	r24, 0
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     7be:	50 93 6e 21 	sts	0x216E, r21
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	80 93 6e 21 	sts	0x216E, r24
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     7cc:	10 92 6e 21 	sts	0x216E, r1
    last_a = current_a;
     7d0:	40 93 6f 21 	sts	0x216F, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	08 95       	ret

000007ea <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
	
	//set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     7ea:	08 95       	ret

000007ec <__vector_91>:
uint16_t next_duration;
	
const uint8_t pitch_array[7] = {50, 55, 53, 60, 59, 65, 40};
uint8_t pitch_array_select = 0;
*/
ISR(USARTD1_RXC_vect){
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
//	static uint8_t new_byte[1];
//	new_byte[0] = USARTD1.DATA;
	midi_device_input(serial_midi_device(),1,&(USARTD1.DATA));
     80e:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	40 eb       	ldi	r20, 0xB0	; 176
     816:	59 e0       	ldi	r21, 0x09	; 9
     818:	0e 94 1e 0a 	call	0x143c	; 0x143c <midi_device_input>
	midi_device_process(serial_midi_device());
     81c:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     820:	0e 94 a5 0b 	call	0x174a	; 0x174a <midi_device_process>
}
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	bf 91       	pop	r27
     82a:	af 91       	pop	r26
     82c:	9f 91       	pop	r25
     82e:	8f 91       	pop	r24
     830:	7f 91       	pop	r23
     832:	6f 91       	pop	r22
     834:	5f 91       	pop	r21
     836:	4f 91       	pop	r20
     838:	3f 91       	pop	r19
     83a:	2f 91       	pop	r18
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	0f 90       	pop	r0
     842:	1f 90       	pop	r1
     844:	18 95       	reti

00000846 <test_pots>:

void test_pots(){
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     84c:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	uint8_t selPOT = 0;
     850:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		read_hardware();
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     852:	c4 e6       	ldi	r28, 0x64	; 100
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	01 c0       	rjmp	.+2      	; 0x85a <test_pots+0x14>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
			selPOT++;
			if (selPOT>4)
				selPOT = 0;
     858:	10 e0       	ldi	r17, 0x00	; 0
	initialize_hardware();
	
	uint8_t selPOT = 0;
	
	while(1){
		read_hardware();
     85a:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     85e:	81 2f       	mov	r24, r17
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	43 e6       	ldi	r20, 0x63	; 99
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     86c:	21 2f       	mov	r18, r17
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	2c 9f       	mul	r18, r28
     876:	a0 01       	movw	r20, r0
     878:	2d 9f       	mul	r18, r29
     87a:	50 0d       	add	r21, r0
     87c:	3c 9f       	mul	r19, r28
     87e:	50 0d       	add	r21, r0
     880:	11 24       	eor	r1, r1
     882:	84 0f       	add	r24, r20
     884:	95 1f       	adc	r25, r21
     886:	0e 94 82 01 	call	0x304	; 0x304 <set_seven_segment_LEDs>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     88a:	0e 94 13 02 	call	0x426	; 0x426 <get_encoder_switch_edge>
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	21 f7       	brne	.-56     	; 0x85a <test_pots+0x14>
			selPOT++;
     892:	1f 5f       	subi	r17, 0xFF	; 255
			if (selPOT>4)
     894:	15 30       	cpi	r17, 0x05	; 5
     896:	00 f7       	brcc	.-64     	; 0x858 <test_pots+0x12>
     898:	e0 cf       	rjmp	.-64     	; 0x85a <test_pots+0x14>

0000089a <test_switches>:
	
	
}
*/

void test_switches(){
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <test_switches+0xa>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     8a8:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	while(1){
		read_hardware();
     8ac:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     8b0:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     8b4:	8a 83       	std	Y+2, r24	; 0x02
     8b6:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     8c0:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	6a 81       	ldd	r22, Y+2	; 0x02
     8c6:	49 81       	ldd	r20, Y+1	; 0x01
     8c8:	00 e0       	ldi	r16, 0x00	; 0
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
     8d0:	ed cf       	rjmp	.-38     	; 0x8ac <test_switches+0x12>

000008d2 <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	initialize_hardware();
     8dc:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     8e0:	c0 e0       	ldi	r28, 0x00	; 0
     8e2:	d0 e0       	ldi	r29, 0x00	; 0
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     8e4:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     8e8:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     8ec:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     8ee:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     8f2:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     8f4:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     8f8:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     8fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	31 f4       	brne	.+12     	; 0x90e <test_seven_segment+0x3c>
			if (i == 999)
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	c7 3e       	cpi	r28, 0xE7	; 231
     906:	d8 07       	cpc	r29, r24
     908:	51 f0       	breq	.+20     	; 0x91e <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     90a:	21 96       	adiw	r28, 0x01	; 1
     90c:	0d c0       	rjmp	.+26     	; 0x928 <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     90e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	49 f4       	brne	.+18     	; 0x928 <test_seven_segment+0x56>
			if (i == 0)
     916:	20 97       	sbiw	r28, 0x00	; 0
     918:	29 f0       	breq	.+10     	; 0x924 <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     91a:	21 97       	sbiw	r28, 0x01	; 1
     91c:	05 c0       	rjmp	.+10     	; 0x928 <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     91e:	c0 e0       	ldi	r28, 0x00	; 0
     920:	d0 e0       	ldi	r29, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     924:	c7 ee       	ldi	r28, 0xE7	; 231
     926:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	6f 2d       	mov	r22, r15
     92c:	40 2f       	mov	r20, r16
     92e:	21 2f       	mov	r18, r17
     930:	8e 01       	movw	r16, r28
     932:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
	}
     936:	d6 cf       	rjmp	.-84     	; 0x8e4 <test_seven_segment+0x12>

00000938 <test_ADC>:
}

void test_ADC(){
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	initialize_hardware();
     94a:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     94e:	c0 e0       	ldi	r28, 0x00	; 0
     950:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	a8 2e       	mov	r10, r24
     956:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     958:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     95c:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     960:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     962:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     966:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     968:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     96c:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     96e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	29 f4       	brne	.+10     	; 0x980 <test_ADC+0x48>
			if (pot_select == 4)
     976:	c4 30       	cpi	r28, 0x04	; 4
     978:	d1 05       	cpc	r29, r1
     97a:	51 f0       	breq	.+20     	; 0x990 <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	0d c0       	rjmp	.+26     	; 0x99a <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     980:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	49 f4       	brne	.+18     	; 0x99a <test_ADC+0x62>
			if (pot_select == 0)
     988:	20 97       	sbiw	r28, 0x00	; 0
     98a:	29 f0       	breq	.+10     	; 0x996 <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     98c:	21 97       	sbiw	r28, 0x01	; 1
     98e:	05 c0       	rjmp	.+10     	; 0x99a <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	02 c0       	rjmp	.+4      	; 0x99a <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     996:	c4 e0       	ldi	r28, 0x04	; 4
     998:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     99a:	8c 2f       	mov	r24, r28
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	43 e6       	ldi	r20, 0x63	; 99
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     9a8:	ca 9d       	mul	r28, r10
     9aa:	80 01       	movw	r16, r0
     9ac:	cb 9d       	mul	r28, r11
     9ae:	10 0d       	add	r17, r0
     9b0:	da 9d       	mul	r29, r10
     9b2:	10 0d       	add	r17, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	08 0f       	add	r16, r24
     9b8:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	6d 2d       	mov	r22, r13
     9be:	4e 2d       	mov	r20, r14
     9c0:	2f 2d       	mov	r18, r15
     9c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
	}
     9c6:	c8 cf       	rjmp	.-112    	; 0x958 <test_ADC+0x20>

000009c8 <test_xnor_in>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}
*/
void test_xnor_in(){
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
	static uint8_t new_byte;

	initialize_hardware();
     9ce:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	serial_midi_init();
     9d2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <serial_midi_init>
	
	while(1){
		read_hardware();
		
		if (get_encoder_switch_edge()){
			new_byte = 0x90;
     9d6:	90 e9       	ldi	r25, 0x90	; 144
     9d8:	f9 2e       	mov	r15, r25
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x3D;
     9da:	0d e3       	ldi	r16, 0x3D	; 61
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x64;
     9dc:	14 e6       	ldi	r17, 0x64	; 100

	initialize_hardware();
	serial_midi_init();
	
	while(1){
		read_hardware();
     9de:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		if (get_encoder_switch_edge()){
     9e2:	0e 94 13 02 	call	0x426	; 0x426 <get_encoder_switch_edge>
     9e6:	88 23       	and	r24, r24
     9e8:	d1 f3       	breq	.-12     	; 0x9de <test_xnor_in+0x16>
			new_byte = 0x90;
     9ea:	f0 92 70 21 	sts	0x2170, r15
			midi_device_input(serial_midi_device(),1,&new_byte);
     9ee:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	40 e7       	ldi	r20, 0x70	; 112
     9f6:	51 e2       	ldi	r21, 0x21	; 33
     9f8:	0e 94 1e 0a 	call	0x143c	; 0x143c <midi_device_input>
			midi_device_process(serial_midi_device());
     9fc:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     a00:	0e 94 a5 0b 	call	0x174a	; 0x174a <midi_device_process>
			
			new_byte = 0x3D;
     a04:	00 93 70 21 	sts	0x2170, r16
			midi_device_input(serial_midi_device(),1,&new_byte);
     a08:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	40 e7       	ldi	r20, 0x70	; 112
     a10:	51 e2       	ldi	r21, 0x21	; 33
     a12:	0e 94 1e 0a 	call	0x143c	; 0x143c <midi_device_input>
			midi_device_process(serial_midi_device());
     a16:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     a1a:	0e 94 a5 0b 	call	0x174a	; 0x174a <midi_device_process>
			
			new_byte = 0x64;
     a1e:	10 93 70 21 	sts	0x2170, r17
			midi_device_input(serial_midi_device(),1,&new_byte);
     a22:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	40 e7       	ldi	r20, 0x70	; 112
     a2a:	51 e2       	ldi	r21, 0x21	; 33
     a2c:	0e 94 1e 0a 	call	0x143c	; 0x143c <midi_device_input>
			midi_device_process(serial_midi_device());
     a30:	0e 94 a3 07 	call	0xf46	; 0xf46 <serial_midi_device>
     a34:	0e 94 a5 0b 	call	0x174a	; 0x174a <midi_device_process>
     a38:	d2 cf       	rjmp	.-92     	; 0x9de <test_xnor_in+0x16>

00000a3a <test_blank>:
		
	}
	
}

void test_blank(){
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	initialize_hardware();
     a3e:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	while(1){
		read_hardware();
     a42:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	00 e0       	ldi	r16, 0x00	; 0
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
     a56:	f5 cf       	rjmp	.-22     	; 0xa42 <test_blank+0x8>

00000a58 <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	df 93       	push	r29
     a5e:	cf 93       	push	r28
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	ae 97       	sbiw	r28, 0x2e	; 46
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     a6a:	de 01       	movw	r26, r28
     a6c:	1f 96       	adiw	r26, 0x0f	; 15
     a6e:	e0 e2       	ldi	r30, 0x20	; 32
     a70:	f0 e2       	ldi	r31, 0x20	; 32
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	01 90       	ld	r0, Z+
     a76:	0d 92       	st	X+, r0
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     a7c:	20 91 00 08 	lds	r18, 0x0800
     a80:	2f 70       	andi	r18, 0x0F	; 15
     a82:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     a88:	1b 82       	std	Y+3, r1	; 0x03
     a8a:	1c 82       	std	Y+4, r1	; 0x04
     a8c:	1d 82       	std	Y+5, r1	; 0x05
     a8e:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     a90:	9c 01       	movw	r18, r24
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	77 e8       	ldi	r23, 0x87	; 135
     a9a:	83 e9       	ldi	r24, 0x93	; 147
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     aa2:	2f 83       	std	Y+7, r18	; 0x07
     aa4:	38 87       	std	Y+8, r19	; 0x08
     aa6:	49 87       	std	Y+9, r20	; 0x09
     aa8:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     aaa:	6f 81       	ldd	r22, Y+7	; 0x07
     aac:	78 85       	ldd	r23, Y+8	; 0x08
     aae:	89 85       	ldd	r24, Y+9	; 0x09
     ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab2:	ea 81       	ldd	r30, Y+2	; 0x02
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	8e 01       	movw	r16, r28
     ac0:	0f 5f       	subi	r16, 0xFF	; 255
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	11 c0       	rjmp	.+34     	; 0xae8 <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	88 30       	cpi	r24, 0x08	; 8
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <BPM_to_TMR+0x7c>
     ad2:	93 c0       	rjmp	.+294    	; 0xbfa <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     ad4:	6f 81       	ldd	r22, Y+7	; 0x07
     ad6:	78 85       	ldd	r23, Y+8	; 0x08
     ad8:	89 85       	ldd	r24, Y+9	; 0x09
     ada:	9a 85       	ldd	r25, Y+10	; 0x0a
     adc:	ea 81       	ldd	r30, Y+2	; 0x02
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	e0 0f       	add	r30, r16
     aea:	f1 1f       	adc	r31, r17
     aec:	26 85       	ldd	r18, Z+14	; 0x0e
     aee:	37 85       	ldd	r19, Z+15	; 0x0f
     af0:	40 89       	ldd	r20, Z+16	; 0x10
     af2:	51 89       	ldd	r21, Z+17	; 0x11
     af4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     af8:	2b 87       	std	Y+11, r18	; 0x0b
     afa:	3c 87       	std	Y+12, r19	; 0x0c
     afc:	4d 87       	std	Y+13, r20	; 0x0d
     afe:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     b00:	8b 85       	ldd	r24, Y+11	; 0x0b
     b02:	9c 85       	ldd	r25, Y+12	; 0x0c
     b04:	ad 85       	ldd	r26, Y+13	; 0x0d
     b06:	be 85       	ldd	r27, Y+14	; 0x0e
     b08:	80 30       	cpi	r24, 0x00	; 0
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	92 07       	cpc	r25, r18
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	a2 07       	cpc	r26, r18
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	b2 07       	cpc	r27, r18
     b16:	b8 f6       	brcc	.-82     	; 0xac6 <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     b18:	80 91 00 08 	lds	r24, 0x0800
     b1c:	88 23       	and	r24, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <BPM_to_TMR+0xca>
     b20:	61 c0       	rjmp	.+194    	; 0xbe4 <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     b22:	99 81       	ldd	r25, Y+1	; 0x01
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	98 17       	cp	r25, r24
     b28:	09 f4       	brne	.+2      	; 0xb2c <BPM_to_TMR+0xd4>
     b2a:	5a c0       	rjmp	.+180    	; 0xbe0 <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
     b2c:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     b30:	60 91 20 08 	lds	r22, 0x0820
     b34:	70 91 21 08 	lds	r23, 0x0821
     b38:	ea 81       	ldd	r30, Y+2	; 0x02
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	8e 01       	movw	r16, r28
     b46:	0f 5f       	subi	r16, 0xFF	; 255
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	e0 0f       	add	r30, r16
     b4c:	f1 1f       	adc	r31, r17
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	26 85       	ldd	r18, Z+14	; 0x0e
     b54:	37 85       	ldd	r19, Z+15	; 0x0f
     b56:	40 89       	ldd	r20, Z+16	; 0x10
     b58:	51 89       	ldd	r21, Z+17	; 0x11
     b5a:	0e 94 a6 12 	call	0x254c	; 0x254c <__mulsi3>
     b5e:	6b 83       	std	Y+3, r22	; 0x03
     b60:	7c 83       	std	Y+4, r23	; 0x04
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     b66:	6b 81       	ldd	r22, Y+3	; 0x03
     b68:	7c 81       	ldd	r23, Y+4	; 0x04
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	e9 81       	ldd	r30, Y+1	; 0x01
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	e0 0f       	add	r30, r16
     b7c:	f1 1f       	adc	r31, r17
     b7e:	26 85       	ldd	r18, Z+14	; 0x0e
     b80:	37 85       	ldd	r19, Z+15	; 0x0f
     b82:	40 89       	ldd	r20, Z+16	; 0x10
     b84:	51 89       	ldd	r21, Z+17	; 0x11
     b86:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     b8a:	2b 83       	std	Y+3, r18	; 0x03
     b8c:	3c 83       	std	Y+4, r19	; 0x04
     b8e:	4d 83       	std	Y+5, r20	; 0x05
     b90:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     b92:	10 c0       	rjmp	.+32     	; 0xbb4 <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	ad 81       	ldd	r26, Y+5	; 0x05
     b9a:	be 81       	ldd	r27, Y+6	; 0x06
     b9c:	2b 85       	ldd	r18, Y+11	; 0x0b
     b9e:	3c 85       	ldd	r19, Y+12	; 0x0c
     ba0:	4d 85       	ldd	r20, Y+13	; 0x0d
     ba2:	5e 85       	ldd	r21, Y+14	; 0x0e
     ba4:	82 1b       	sub	r24, r18
     ba6:	93 0b       	sbc	r25, r19
     ba8:	a4 0b       	sbc	r26, r20
     baa:	b5 0b       	sbc	r27, r21
     bac:	8b 83       	std	Y+3, r24	; 0x03
     bae:	9c 83       	std	Y+4, r25	; 0x04
     bb0:	ad 83       	std	Y+5, r26	; 0x05
     bb2:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     bb4:	2b 81       	ldd	r18, Y+3	; 0x03
     bb6:	3c 81       	ldd	r19, Y+4	; 0x04
     bb8:	4d 81       	ldd	r20, Y+5	; 0x05
     bba:	5e 81       	ldd	r21, Y+6	; 0x06
     bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc0:	ad 85       	ldd	r26, Y+13	; 0x0d
     bc2:	be 85       	ldd	r27, Y+14	; 0x0e
     bc4:	82 17       	cp	r24, r18
     bc6:	93 07       	cpc	r25, r19
     bc8:	a4 07       	cpc	r26, r20
     bca:	b5 07       	cpc	r27, r21
     bcc:	18 f3       	brcs	.-58     	; 0xb94 <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	ad 81       	ldd	r26, Y+5	; 0x05
     bd4:	be 81       	ldd	r27, Y+6	; 0x06
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	f8 e0       	ldi	r31, 0x08	; 8
     bda:	80 a3       	std	Z+32, r24	; 0x20
     bdc:	91 a3       	std	Z+33, r25	; 0x21
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     be0:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     be4:	8b 85       	ldd	r24, Y+11	; 0x0b
     be6:	9c 85       	ldd	r25, Y+12	; 0x0c
     be8:	ad 85       	ldd	r26, Y+13	; 0x0d
     bea:	be 85       	ldd	r27, Y+14	; 0x0e
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f8 e0       	ldi	r31, 0x08	; 8
     bf0:	80 a7       	std	Z+40, r24	; 0x28
     bf2:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	80 93 00 08 	sts	0x0800, r24

	return;
}
     bfa:	ae 96       	adiw	r28, 0x2e	; 46
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	ae 97       	sbiw	r28, 0x2e	; 46
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
     c1c:	de 01       	movw	r26, r28
     c1e:	1f 96       	adiw	r26, 0x0f	; 15
     c20:	e0 e0       	ldi	r30, 0x00	; 0
     c22:	f0 e2       	ldi	r31, 0x20	; 32
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	01 90       	ld	r0, Z+
     c28:	0d 92       	st	X+, r0
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     c2e:	20 91 00 08 	lds	r18, 0x0800
     c32:	2f 70       	andi	r18, 0x0F	; 15
     c34:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     c3a:	1b 82       	std	Y+3, r1	; 0x03
     c3c:	1c 82       	std	Y+4, r1	; 0x04
     c3e:	1d 82       	std	Y+5, r1	; 0x05
     c40:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
     c42:	9c 01       	movw	r18, r24
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	78 ea       	ldi	r23, 0xA8	; 168
     c4c:	84 ed       	ldi	r24, 0xD4	; 212
     c4e:	95 e5       	ldi	r25, 0x55	; 85
     c50:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     c54:	2f 83       	std	Y+7, r18	; 0x07
     c56:	38 87       	std	Y+8, r19	; 0x08
     c58:	49 87       	std	Y+9, r20	; 0x09
     c5a:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     c5c:	6f 81       	ldd	r22, Y+7	; 0x07
     c5e:	78 85       	ldd	r23, Y+8	; 0x08
     c60:	89 85       	ldd	r24, Y+9	; 0x09
     c62:	9a 85       	ldd	r25, Y+10	; 0x0a
     c64:	ea 81       	ldd	r30, Y+2	; 0x02
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	8e 01       	movw	r16, r28
     c72:	0f 5f       	subi	r16, 0xFF	; 255
     c74:	1f 4f       	sbci	r17, 0xFF	; 255
     c76:	11 c0       	rjmp	.+34     	; 0xc9a <BPM_to_TMR2+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	88 30       	cpi	r24, 0x08	; 8
     c82:	08 f0       	brcs	.+2      	; 0xc86 <BPM_to_TMR2+0x7c>
     c84:	a1 c0       	rjmp	.+322    	; 0xdc8 <BPM_to_TMR2+0x1be>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     c86:	6f 81       	ldd	r22, Y+7	; 0x07
     c88:	78 85       	ldd	r23, Y+8	; 0x08
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	ea 81       	ldd	r30, Y+2	; 0x02
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	e0 0f       	add	r30, r16
     c9c:	f1 1f       	adc	r31, r17
     c9e:	26 85       	ldd	r18, Z+14	; 0x0e
     ca0:	37 85       	ldd	r19, Z+15	; 0x0f
     ca2:	40 89       	ldd	r20, Z+16	; 0x10
     ca4:	51 89       	ldd	r21, Z+17	; 0x11
     ca6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     caa:	2b 87       	std	Y+11, r18	; 0x0b
     cac:	3c 87       	std	Y+12, r19	; 0x0c
     cae:	4d 87       	std	Y+13, r20	; 0x0d
     cb0:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     cb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb6:	ad 85       	ldd	r26, Y+13	; 0x0d
     cb8:	be 85       	ldd	r27, Y+14	; 0x0e
     cba:	80 30       	cpi	r24, 0x00	; 0
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	92 07       	cpc	r25, r18
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	a2 07       	cpc	r26, r18
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	b2 07       	cpc	r27, r18
     cc8:	b8 f6       	brcc	.-82     	; 0xc78 <BPM_to_TMR2+0x6e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     cca:	80 91 00 08 	lds	r24, 0x0800
     cce:	88 23       	and	r24, r24
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <BPM_to_TMR2+0xca>
     cd2:	61 c0       	rjmp	.+194    	; 0xd96 <BPM_to_TMR2+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     cd4:	99 81       	ldd	r25, Y+1	; 0x01
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	98 17       	cp	r25, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <BPM_to_TMR2+0xd4>
     cdc:	5a c0       	rjmp	.+180    	; 0xd92 <BPM_to_TMR2+0x188>
			TCC0.CTRLA = 0x00;
     cde:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     ce2:	60 91 20 08 	lds	r22, 0x0820
     ce6:	70 91 21 08 	lds	r23, 0x0821
     cea:	ea 81       	ldd	r30, Y+2	; 0x02
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	8e 01       	movw	r16, r28
     cf8:	0f 5f       	subi	r16, 0xFF	; 255
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	e0 0f       	add	r30, r16
     cfe:	f1 1f       	adc	r31, r17
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	26 85       	ldd	r18, Z+14	; 0x0e
     d06:	37 85       	ldd	r19, Z+15	; 0x0f
     d08:	40 89       	ldd	r20, Z+16	; 0x10
     d0a:	51 89       	ldd	r21, Z+17	; 0x11
     d0c:	0e 94 a6 12 	call	0x254c	; 0x254c <__mulsi3>
     d10:	6b 83       	std	Y+3, r22	; 0x03
     d12:	7c 83       	std	Y+4, r23	; 0x04
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     d18:	6b 81       	ldd	r22, Y+3	; 0x03
     d1a:	7c 81       	ldd	r23, Y+4	; 0x04
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e0 0f       	add	r30, r16
     d2e:	f1 1f       	adc	r31, r17
     d30:	26 85       	ldd	r18, Z+14	; 0x0e
     d32:	37 85       	ldd	r19, Z+15	; 0x0f
     d34:	40 89       	ldd	r20, Z+16	; 0x10
     d36:	51 89       	ldd	r21, Z+17	; 0x11
     d38:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodsi4>
     d3c:	2b 83       	std	Y+3, r18	; 0x03
     d3e:	3c 83       	std	Y+4, r19	; 0x04
     d40:	4d 83       	std	Y+5, r20	; 0x05
     d42:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     d44:	10 c0       	rjmp	.+32     	; 0xd66 <BPM_to_TMR2+0x15c>
				adjusted_count = adjusted_count - compare_value;
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	ad 81       	ldd	r26, Y+5	; 0x05
     d4c:	be 81       	ldd	r27, Y+6	; 0x06
     d4e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d50:	3c 85       	ldd	r19, Y+12	; 0x0c
     d52:	4d 85       	ldd	r20, Y+13	; 0x0d
     d54:	5e 85       	ldd	r21, Y+14	; 0x0e
     d56:	82 1b       	sub	r24, r18
     d58:	93 0b       	sbc	r25, r19
     d5a:	a4 0b       	sbc	r26, r20
     d5c:	b5 0b       	sbc	r27, r21
     d5e:	8b 83       	std	Y+3, r24	; 0x03
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	ad 83       	std	Y+5, r26	; 0x05
     d64:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     d66:	2b 81       	ldd	r18, Y+3	; 0x03
     d68:	3c 81       	ldd	r19, Y+4	; 0x04
     d6a:	4d 81       	ldd	r20, Y+5	; 0x05
     d6c:	5e 81       	ldd	r21, Y+6	; 0x06
     d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d70:	9c 85       	ldd	r25, Y+12	; 0x0c
     d72:	ad 85       	ldd	r26, Y+13	; 0x0d
     d74:	be 85       	ldd	r27, Y+14	; 0x0e
     d76:	82 17       	cp	r24, r18
     d78:	93 07       	cpc	r25, r19
     d7a:	a4 07       	cpc	r26, r20
     d7c:	b5 07       	cpc	r27, r21
     d7e:	18 f3       	brcs	.-58     	; 0xd46 <BPM_to_TMR2+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	ad 81       	ldd	r26, Y+5	; 0x05
     d86:	be 81       	ldd	r27, Y+6	; 0x06
     d88:	e0 e0       	ldi	r30, 0x00	; 0
     d8a:	f8 e0       	ldi	r31, 0x08	; 8
     d8c:	80 a3       	std	Z+32, r24	; 0x20
     d8e:	91 a3       	std	Z+33, r25	; 0x21
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <BPM_to_TMR2+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     d92:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
     d96:	8b 85       	ldd	r24, Y+11	; 0x0b
     d98:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9a:	ad 85       	ldd	r26, Y+13	; 0x0d
     d9c:	be 85       	ldd	r27, Y+14	; 0x0e
     d9e:	e0 e0       	ldi	r30, 0x00	; 0
     da0:	f8 e0       	ldi	r31, 0x08	; 8
     da2:	80 a7       	std	Z+40, r24	; 0x28
     da4:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
     da6:	8b 85       	ldd	r24, Y+11	; 0x0b
     da8:	9c 85       	ldd	r25, Y+12	; 0x0c
     daa:	ad 85       	ldd	r26, Y+13	; 0x0d
     dac:	be 85       	ldd	r27, Y+14	; 0x0e
     dae:	68 e1       	ldi	r22, 0x18	; 24
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 c5 12 	call	0x258a	; 0x258a <__udivmodhi4>
     db6:	66 a7       	std	Z+46, r22	; 0x2e
     db8:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
     dba:	80 91 01 08 	lds	r24, 0x0801
     dbe:	80 69       	ori	r24, 0x90	; 144
     dc0:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	80 93 00 08 	sts	0x0800, r24

	return;
}
     dc8:	ae 96       	adiw	r28, 0x2e	; 46
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <test_pot_banks>:
	}
	
}
*/

void test_pot_banks(){
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
	initialize_hardware();
     de4:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	uint16_t pot_out_max = 10;
	uint16_t pot_out_min = 0;
     de8:	c0 e0       	ldi	r28, 0x00	; 0
     dea:	d0 e0       	ldi	r29, 0x00	; 0
*/

void test_pot_banks(){
	initialize_hardware();
	
	uint16_t pot_out_max = 10;
     dec:	0a e0       	ldi	r16, 0x0A	; 10
     dee:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t pot_out_min = 0;
	uint16_t pot_out_value = 0;
	
	while(1){
		read_hardware();
     df0:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		if (get_encoder() == TURN_CW){
     df4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 f4       	brne	.+36     	; 0xe20 <test_pot_banks+0x48>
			if (get_encoder_switch_state()){
     dfc:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     e00:	88 23       	and	r24, r24
     e02:	39 f0       	breq	.+14     	; 0xe12 <test_pot_banks+0x3a>
				if (pot_out_min < (pot_out_max - 1))
     e04:	c8 01       	movw	r24, r16
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	c8 17       	cp	r28, r24
     e0a:	d9 07       	cpc	r29, r25
     e0c:	e0 f4       	brcc	.+56     	; 0xe46 <test_pot_banks+0x6e>
					pot_out_min++;
     e0e:	21 96       	adiw	r28, 0x01	; 1
     e10:	1a c0       	rjmp	.+52     	; 0xe46 <test_pot_banks+0x6e>
			}					
			else if (pot_out_max < 999)
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	07 3e       	cpi	r16, 0xE7	; 231
     e16:	18 07       	cpc	r17, r24
     e18:	b0 f4       	brcc	.+44     	; 0xe46 <test_pot_banks+0x6e>
				pot_out_max++;
     e1a:	0f 5f       	subi	r16, 0xFF	; 255
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <test_pot_banks+0x6e>
		}
		else if (get_encoder() == TURN_CCW){
     e20:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	79 f4       	brne	.+30     	; 0xe46 <test_pot_banks+0x6e>
			if (get_encoder_switch_state()){
     e28:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     e2c:	88 23       	and	r24, r24
     e2e:	21 f0       	breq	.+8      	; 0xe38 <test_pot_banks+0x60>
				if (pot_out_min > 0)
     e30:	20 97       	sbiw	r28, 0x00	; 0
     e32:	49 f0       	breq	.+18     	; 0xe46 <test_pot_banks+0x6e>
					pot_out_min += -1;
     e34:	21 97       	sbiw	r28, 0x01	; 1
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <test_pot_banks+0x6e>
			}					
			else if (pot_out_max > (pot_out_min + 1))
     e38:	ce 01       	movw	r24, r28
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	80 17       	cp	r24, r16
     e3e:	91 07       	cpc	r25, r17
     e40:	10 f4       	brcc	.+4      	; 0xe46 <test_pot_banks+0x6e>
				pot_out_max += -1;
     e42:	01 50       	subi	r16, 0x01	; 1
     e44:	10 40       	sbci	r17, 0x00	; 0
		}
		
		pot_out_value = get_pot_value(2, pot_out_min, pot_out_max);
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	be 01       	movw	r22, r28
     e4a:	a8 01       	movw	r20, r16
     e4c:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     e50:	7c 01       	movw	r14, r24
		
		if (get_toggle_switch_state())
     e52:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     e56:	88 23       	and	r24, r24
     e58:	11 f0       	breq	.+4      	; 0xe5e <test_pot_banks+0x86>
			set_seven_segment_LEDs(pot_out_value);
     e5a:	c7 01       	movw	r24, r14
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <test_pot_banks+0x94>
		else if (get_pushbutton_switch_state())
     e5e:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <test_pot_banks+0x92>
			set_seven_segment_LEDs(pot_out_min);
     e66:	ce 01       	movw	r24, r28
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <test_pot_banks+0x94>
		else
			set_seven_segment_LEDs(pot_out_max);
     e6a:	c8 01       	movw	r24, r16
     e6c:	0e 94 82 01 	call	0x304	; 0x304 <set_seven_segment_LEDs>
     e70:	bf cf       	rjmp	.-130    	; 0xdf0 <test_pot_banks+0x18>

00000e72 <main>:
	}
}

int main(void) {

	test_xnor_in();
     e72:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <test_xnor_in>
   
	return 0;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	08 95       	ret

00000e7c <generic_noteon_callback>:
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}

void generic_noteon_callback(MidiDevice * device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	26 97       	sbiw	r28, 0x06	; 6
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	6c 83       	std	Y+4, r22	; 0x04
     e8c:	4d 83       	std	Y+5, r20	; 0x05
     e8e:	2e 83       	std	Y+6, r18	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
     e90:	de 01       	movw	r26, r28
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	fe 01       	movw	r30, r28
     e96:	34 96       	adiw	r30, 0x04	; 4
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <generic_noteon_callback+0x1e>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
     ea2:	80 91 72 21 	lds	r24, 0x2172
     ea6:	8f 3f       	cpi	r24, 0xFF	; 255
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <generic_noteon_callback+0x3a>
		j++;
     eaa:	80 91 72 21 	lds	r24, 0x2172
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	80 93 72 21 	sts	0x2172, r24
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <generic_noteon_callback+0x3e>
	else
		j = 0;
     eb6:	10 92 72 21 	sts	0x2172, r1
	

}
     eba:	26 96       	adiw	r28, 0x06	; 6
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <generic_catchall_callback>:

void generic_catchall_callback(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     ec6:	0f 93       	push	r16
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	26 97       	sbiw	r28, 0x06	; 6
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	4c 83       	std	Y+4, r20	; 0x04
     ed8:	2d 83       	std	Y+5, r18	; 0x05
     eda:	0e 83       	std	Y+6, r16	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
     edc:	de 01       	movw	r26, r28
     ede:	11 96       	adiw	r26, 0x01	; 1
     ee0:	fe 01       	movw	r30, r28
     ee2:	34 96       	adiw	r30, 0x04	; 4
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	01 90       	ld	r0, Z+
     ee8:	0d 92       	st	X+, r0
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	e1 f7       	brne	.-8      	; 0xee6 <generic_catchall_callback+0x20>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
     eee:	80 91 71 21 	lds	r24, 0x2171
     ef2:	8f 3f       	cpi	r24, 0xFF	; 255
     ef4:	31 f0       	breq	.+12     	; 0xf02 <generic_catchall_callback+0x3c>
		j++;
     ef6:	80 91 71 21 	lds	r24, 0x2171
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	80 93 71 21 	sts	0x2171, r24
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <generic_catchall_callback+0x40>
	else
		j = 0;
     f02:	10 92 71 21 	sts	0x2171, r1
	

     f06:	26 96       	adiw	r28, 0x06	; 6
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <serial_midi_send>:

#define MIDI_CHAN 0

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     f14:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     f16:	80 91 b1 09 	lds	r24, 0x09B1
     f1a:	85 ff       	sbrs	r24, 5
     f1c:	fc cf       	rjmp	.-8      	; 0xf16 <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
     f1e:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     f22:	62 30       	cpi	r22, 0x02	; 2
     f24:	70 f0       	brcs	.+28     	; 0xf42 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     f26:	80 91 b1 09 	lds	r24, 0x09B1
     f2a:	85 ff       	sbrs	r24, 5
     f2c:	fc cf       	rjmp	.-8      	; 0xf26 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
     f2e:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     f32:	63 30       	cpi	r22, 0x03	; 3
     f34:	31 f4       	brne	.+12     	; 0xf42 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     f36:	80 91 b1 09 	lds	r24, 0x09B1
     f3a:	85 ff       	sbrs	r24, 5
     f3c:	fc cf       	rjmp	.-8      	; 0xf36 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
     f3e:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <serial_midi_device>:

MidiDevice * serial_midi_device() {
   return &midi_device;
}
     f46:	83 e7       	ldi	r24, 0x73	; 115
     f48:	91 e2       	ldi	r25, 0x21	; 33
     f4a:	08 95       	ret

00000f4c <serial_midi_init>:

void serial_midi_init(){
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
     f50:	c3 e7       	ldi	r28, 0x73	; 115
     f52:	d1 e2       	ldi	r29, 0x21	; 33
     f54:	ce 01       	movw	r24, r28
     f56:	0e 94 ed 09 	call	0x13da	; 0x13da <midi_device_init>
   midi_register_noteon_callback(&midi_device, generic_noteon_callback);
     f5a:	ce 01       	movw	r24, r28
     f5c:	6e e3       	ldi	r22, 0x3E	; 62
     f5e:	77 e0       	ldi	r23, 0x07	; 7
     f60:	0e 94 b5 09 	call	0x136a	; 0x136a <midi_register_noteon_callback>
   midi_register_catchall_callback(&midi_device, generic_catchall_callback);
     f64:	ce 01       	movw	r24, r28
     f66:	63 e6       	ldi	r22, 0x63	; 99
     f68:	77 e0       	ldi	r23, 0x07	; 7
     f6a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <midi_register_catchall_callback>
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     f74:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     f76:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     f78:	63 83       	std	Z+3, r22	; 0x03
     f7a:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
}
     f80:	08 95       	ret

00000f82 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
     f8c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     f8e:	0e 94 3b 08 	call	0x1076	; 0x1076 <store_and_clear_interrupt>
     f92:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	c9 01       	movw	r24, r18
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	6a 81       	ldd	r22, Y+2	; 0x02
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__divmodhi4>
     fa4:	48 81       	ld	r20, Y
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	84 17       	cp	r24, r20
     faa:	95 07       	cpc	r25, r21
     fac:	29 f4       	brne	.+10     	; 0xfb8 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
     fae:	80 2f       	mov	r24, r16
     fb0:	0e 94 3e 08 	call	0x107c	; 0x107c <restore_interrupt_setting>
      return false;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
     fb8:	eb 81       	ldd	r30, Y+3	; 0x03
     fba:	fc 81       	ldd	r31, Y+4	; 0x04
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	2f 5f       	subi	r18, 0xFF	; 255
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	6a 81       	ldd	r22, Y+2	; 0x02
     fcc:	c9 01       	movw	r24, r18
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__divmodhi4>
     fd4:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     fd6:	80 2f       	mov	r24, r16
     fd8:	0e 94 3e 08 	call	0x107c	; 0x107c <restore_interrupt_setting>
      return true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     ff0:	0e 94 3b 08 	call	0x1076	; 0x1076 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	98 81       	ld	r25, Y
     ff8:	29 17       	cp	r18, r25
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     ffc:	12 2f       	mov	r17, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    1000:	1a 81       	ldd	r17, Y+2	; 0x02
    1002:	12 0f       	add	r17, r18
    1004:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1006:	0e 94 3e 08 	call	0x107c	; 0x107c <restore_interrupt_setting>
   return len;
}
    100a:	81 2f       	mov	r24, r17
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret

00001014 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1014:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1016:	80 81       	ld	r24, Z
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	86 0f       	add	r24, r22
    101c:	91 1d       	adc	r25, r1
    101e:	62 81       	ldd	r22, Z+2	; 0x02
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__divmodhi4>
    1026:	03 80       	ldd	r0, Z+3	; 0x03
    1028:	f4 81       	ldd	r31, Z+4	; 0x04
    102a:	e0 2d       	mov	r30, r0
    102c:	e8 0f       	add	r30, r24
    102e:	f9 1f       	adc	r31, r25
}
    1030:	80 81       	ld	r24, Z
    1032:	08 95       	ret

00001034 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    1044:	69 83       	std	Y+1, r22	; 0x01
    1046:	0e 94 3b 08 	call	0x1076	; 0x1076 <store_and_clear_interrupt>
    104a:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    104c:	f8 01       	movw	r30, r16
    104e:	20 81       	ld	r18, Z
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	69 81       	ldd	r22, Y+1	; 0x01
    1054:	26 0f       	add	r18, r22
    1056:	31 1d       	adc	r19, r1
    1058:	62 81       	ldd	r22, Z+2	; 0x02
    105a:	c9 01       	movw	r24, r18
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__divmodhi4>
    1062:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1064:	84 2f       	mov	r24, r20
    1066:	0e 94 3e 08 	call	0x107c	; 0x107c <restore_interrupt_setting>
}
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    1076:	8f b7       	in	r24, 0x3f	; 63
    cli();
    1078:	f8 94       	cli
    return sreg;
}
    107a:	08 95       	ret

0000107c <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    107c:	8f bf       	out	0x3f, r24	; 63
}
    107e:	08 95       	ret

00001080 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1080:	88 1f       	adc	r24, r24
    1082:	88 27       	eor	r24, r24
    1084:	88 1f       	adc	r24, r24
    1086:	08 95       	ret

00001088 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	88 3f       	cpi	r24, 0xF8	; 248
    108c:	08 f4       	brcc	.+2      	; 0x1090 <midi_is_realtime+0x8>
    108e:	90 e0       	ldi	r25, 0x00	; 0
}
    1090:	89 2f       	mov	r24, r25
    1092:	08 95       	ret

00001094 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	20 7f       	andi	r18, 0xF0	; 240
    109a:	30 70       	andi	r19, 0x00	; 0
    109c:	20 3b       	cpi	r18, 0xB0	; 176
    109e:	31 05       	cpc	r19, r1
    10a0:	f1 f0       	breq	.+60     	; 0x10de <midi_packet_length+0x4a>
    10a2:	21 3b       	cpi	r18, 0xB1	; 177
    10a4:	31 05       	cpc	r19, r1
    10a6:	54 f4       	brge	.+20     	; 0x10bc <midi_packet_length+0x28>
    10a8:	20 39       	cpi	r18, 0x90	; 144
    10aa:	31 05       	cpc	r19, r1
    10ac:	c1 f0       	breq	.+48     	; 0x10de <midi_packet_length+0x4a>
    10ae:	20 3a       	cpi	r18, 0xA0	; 160
    10b0:	31 05       	cpc	r19, r1
    10b2:	a9 f0       	breq	.+42     	; 0x10de <midi_packet_length+0x4a>
    10b4:	20 38       	cpi	r18, 0x80	; 128
    10b6:	31 05       	cpc	r19, r1
    10b8:	e9 f4       	brne	.+58     	; 0x10f4 <midi_packet_length+0x60>
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <midi_packet_length+0x4a>
    10bc:	20 3d       	cpi	r18, 0xD0	; 208
    10be:	31 05       	cpc	r19, r1
    10c0:	d9 f0       	breq	.+54     	; 0x10f8 <midi_packet_length+0x64>
    10c2:	21 3d       	cpi	r18, 0xD1	; 209
    10c4:	31 05       	cpc	r19, r1
    10c6:	24 f4       	brge	.+8      	; 0x10d0 <midi_packet_length+0x3c>
    10c8:	20 3c       	cpi	r18, 0xC0	; 192
    10ca:	31 05       	cpc	r19, r1
    10cc:	99 f4       	brne	.+38     	; 0x10f4 <midi_packet_length+0x60>
    10ce:	14 c0       	rjmp	.+40     	; 0x10f8 <midi_packet_length+0x64>
    10d0:	20 3e       	cpi	r18, 0xE0	; 224
    10d2:	31 05       	cpc	r19, r1
    10d4:	21 f0       	breq	.+8      	; 0x10de <midi_packet_length+0x4a>
    10d6:	20 3f       	cpi	r18, 0xF0	; 240
    10d8:	31 05       	cpc	r19, r1
    10da:	61 f4       	brne	.+24     	; 0x10f4 <midi_packet_length+0x60>
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    10e2:	e8 2f       	mov	r30, r24
    10e4:	e1 5f       	subi	r30, 0xF1	; 241
    10e6:	ef 30       	cpi	r30, 0x0F	; 15
    10e8:	48 f4       	brcc	.+18     	; 0x10fc <midi_packet_length+0x68>
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e0 5c       	subi	r30, 0xC0	; 192
    10ee:	ff 4d       	sbci	r31, 0xDF	; 223
    10f0:	80 81       	ld	r24, Z
    10f2:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	08 95       	ret
    10fc:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    10fe:	08 95       	ret

00001100 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1100:	0f 93       	push	r16
    1102:	36 2f       	mov	r19, r22
    1104:	54 2f       	mov	r21, r20
    1106:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1108:	3f 70       	andi	r19, 0x0F	; 15
    110a:	30 6b       	ori	r19, 0xB0	; 176
    110c:	5f 77       	andi	r21, 0x7F	; 127
    110e:	0f 77       	andi	r16, 0x7F	; 127
    1110:	dc 01       	movw	r26, r24
    1112:	ed 91       	ld	r30, X+
    1114:	fc 91       	ld	r31, X
    1116:	63 e0       	ldi	r22, 0x03	; 3
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	43 2f       	mov	r20, r19
    111c:	25 2f       	mov	r18, r21
    111e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1124:	0f 93       	push	r16
    1126:	36 2f       	mov	r19, r22
    1128:	54 2f       	mov	r21, r20
    112a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    112c:	3f 70       	andi	r19, 0x0F	; 15
    112e:	30 69       	ori	r19, 0x90	; 144
    1130:	5f 77       	andi	r21, 0x7F	; 127
    1132:	0f 77       	andi	r16, 0x7F	; 127
    1134:	dc 01       	movw	r26, r24
    1136:	ed 91       	ld	r30, X+
    1138:	fc 91       	ld	r31, X
    113a:	63 e0       	ldi	r22, 0x03	; 3
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	43 2f       	mov	r20, r19
    1140:	25 2f       	mov	r18, r21
    1142:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1148:	0f 93       	push	r16
    114a:	36 2f       	mov	r19, r22
    114c:	54 2f       	mov	r21, r20
    114e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1150:	3f 70       	andi	r19, 0x0F	; 15
    1152:	30 68       	ori	r19, 0x80	; 128
    1154:	5f 77       	andi	r21, 0x7F	; 127
    1156:	0f 77       	andi	r16, 0x7F	; 127
    1158:	dc 01       	movw	r26, r24
    115a:	ed 91       	ld	r30, X+
    115c:	fc 91       	ld	r31, X
    115e:	63 e0       	ldi	r22, 0x03	; 3
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	43 2f       	mov	r20, r19
    1164:	25 2f       	mov	r18, r21
    1166:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    116c:	0f 93       	push	r16
    116e:	36 2f       	mov	r19, r22
    1170:	54 2f       	mov	r21, r20
    1172:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1174:	3f 70       	andi	r19, 0x0F	; 15
    1176:	30 6a       	ori	r19, 0xA0	; 160
    1178:	5f 77       	andi	r21, 0x7F	; 127
    117a:	0f 77       	andi	r16, 0x7F	; 127
    117c:	dc 01       	movw	r26, r24
    117e:	ed 91       	ld	r30, X+
    1180:	fc 91       	ld	r31, X
    1182:	63 e0       	ldi	r22, 0x03	; 3
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	43 2f       	mov	r20, r19
    1188:	25 2f       	mov	r18, r21
    118a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1196:	20 e2       	ldi	r18, 0x20	; 32
    1198:	40 30       	cpi	r20, 0x00	; 0
    119a:	52 07       	cpc	r21, r18
    119c:	3c f4       	brge	.+14     	; 0x11ac <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    119e:	a0 ee       	ldi	r26, 0xE0	; 224
    11a0:	40 30       	cpi	r20, 0x00	; 0
    11a2:	5a 07       	cpc	r21, r26
    11a4:	34 f0       	brlt	.+12     	; 0x11b2 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    11a6:	00 50       	subi	r16, 0x00	; 0
    11a8:	10 4e       	sbci	r17, 0xE0	; 224
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    11ac:	0f ef       	ldi	r16, 0xFF	; 255
    11ae:	1f e3       	ldi	r17, 0x3F	; 63
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    11b6:	46 2f       	mov	r20, r22
    11b8:	4f 70       	andi	r20, 0x0F	; 15
    11ba:	40 6e       	ori	r20, 0xE0	; 224
    11bc:	20 2f       	mov	r18, r16
    11be:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    11c0:	00 0f       	add	r16, r16
    11c2:	01 2f       	mov	r16, r17
    11c4:	00 1f       	adc	r16, r16
    11c6:	11 0b       	sbc	r17, r17
    11c8:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    11ca:	0f 77       	andi	r16, 0x7F	; 127
    11cc:	dc 01       	movw	r26, r24
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    11de:	0f 93       	push	r16
    11e0:	36 2f       	mov	r19, r22
    11e2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    11e4:	3f 70       	andi	r19, 0x0F	; 15
    11e6:	30 6c       	ori	r19, 0xC0	; 192
    11e8:	2f 77       	andi	r18, 0x7F	; 127
    11ea:	dc 01       	movw	r26, r24
    11ec:	ed 91       	ld	r30, X+
    11ee:	fc 91       	ld	r31, X
    11f0:	62 e0       	ldi	r22, 0x02	; 2
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	43 2f       	mov	r20, r19
    11f6:	00 e0       	ldi	r16, 0x00	; 0
    11f8:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    11fe:	0f 93       	push	r16
    1200:	36 2f       	mov	r19, r22
    1202:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1204:	3f 70       	andi	r19, 0x0F	; 15
    1206:	30 6d       	ori	r19, 0xD0	; 208
    1208:	2f 77       	andi	r18, 0x7F	; 127
    120a:	dc 01       	movw	r26, r24
    120c:	ed 91       	ld	r30, X+
    120e:	fc 91       	ld	r31, X
    1210:	62 e0       	ldi	r22, 0x02	; 2
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	43 2f       	mov	r20, r19
    1216:	00 e0       	ldi	r16, 0x00	; 0
    1218:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    121e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1220:	dc 01       	movw	r26, r24
    1222:	ed 91       	ld	r30, X+
    1224:	fc 91       	ld	r31, X
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	48 ef       	ldi	r20, 0xF8	; 248
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	00 e0       	ldi	r16, 0x00	; 0
    1230:	09 95       	icall
}
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1236:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1238:	dc 01       	movw	r26, r24
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	49 ef       	ldi	r20, 0xF9	; 249
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	09 95       	icall
}
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <midi_send_start>:

void midi_send_start(MidiDevice * device){
    124e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1250:	dc 01       	movw	r26, r24
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	4a ef       	ldi	r20, 0xFA	; 250
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	00 e0       	ldi	r16, 0x00	; 0
    1260:	09 95       	icall
}
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1266:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1268:	dc 01       	movw	r26, r24
    126a:	ed 91       	ld	r30, X+
    126c:	fc 91       	ld	r31, X
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	4b ef       	ldi	r20, 0xFB	; 251
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	00 e0       	ldi	r16, 0x00	; 0
    1278:	09 95       	icall
}
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    127e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1280:	dc 01       	movw	r26, r24
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	4c ef       	ldi	r20, 0xFC	; 252
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	09 95       	icall
}
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1296:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1298:	dc 01       	movw	r26, r24
    129a:	ed 91       	ld	r30, X+
    129c:	fc 91       	ld	r31, X
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	4e ef       	ldi	r20, 0xFE	; 254
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	09 95       	icall
}
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    12ae:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    12b0:	dc 01       	movw	r26, r24
    12b2:	ed 91       	ld	r30, X+
    12b4:	fc 91       	ld	r31, X
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	4f ef       	ldi	r20, 0xFF	; 255
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	09 95       	icall
}
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    12c6:	0f 93       	push	r16
    12c8:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    12ca:	2f 77       	andi	r18, 0x7F	; 127
    12cc:	dc 01       	movw	r26, r24
    12ce:	ed 91       	ld	r30, X+
    12d0:	fc 91       	ld	r31, X
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	41 ef       	ldi	r20, 0xF1	; 241
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
   device->send_func(device, 3,
    12e4:	26 2f       	mov	r18, r22
    12e6:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    12e8:	8b 01       	movw	r16, r22
    12ea:	00 0f       	add	r16, r16
    12ec:	01 2f       	mov	r16, r17
    12ee:	00 1f       	adc	r16, r16
    12f0:	11 0b       	sbc	r17, r17
    12f2:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    12f4:	0f 77       	andi	r16, 0x7F	; 127
    12f6:	dc 01       	movw	r26, r24
    12f8:	ed 91       	ld	r30, X+
    12fa:	fc 91       	ld	r31, X
    12fc:	63 e0       	ldi	r22, 0x03	; 3
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	42 ef       	ldi	r20, 0xF2	; 242
    1302:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    130a:	0f 93       	push	r16
    130c:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    130e:	2f 77       	andi	r18, 0x7F	; 127
    1310:	dc 01       	movw	r26, r24
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	62 e0       	ldi	r22, 0x02	; 2
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	43 ef       	ldi	r20, 0xF3	; 243
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1324:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1326:	dc 01       	movw	r26, r24
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	46 ef       	ldi	r20, 0xF6	; 246
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	00 e0       	ldi	r16, 0x00	; 0
    1336:	09 95       	icall
}
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    133c:	0f 93       	push	r16
    133e:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1340:	dc 01       	movw	r26, r24
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	00 e0       	ldi	r16, 0x00	; 0
    134e:	09 95       	icall
}
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1354:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1356:	dc 01       	movw	r26, r24
    1358:	ed 91       	ld	r30, X+
    135a:	fc 91       	ld	r31, X
    135c:	09 95       	icall
}
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1362:	fc 01       	movw	r30, r24
    1364:	62 83       	std	Z+2, r22	; 0x02
    1366:	73 83       	std	Z+3, r23	; 0x03
}
    1368:	08 95       	ret

0000136a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    136a:	fc 01       	movw	r30, r24
    136c:	64 83       	std	Z+4, r22	; 0x04
    136e:	75 83       	std	Z+5, r23	; 0x05
}
    1370:	08 95       	ret

00001372 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1372:	fc 01       	movw	r30, r24
    1374:	66 83       	std	Z+6, r22	; 0x06
    1376:	77 83       	std	Z+7, r23	; 0x07
}
    1378:	08 95       	ret

0000137a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    137a:	fc 01       	movw	r30, r24
    137c:	60 87       	std	Z+8, r22	; 0x08
    137e:	71 87       	std	Z+9, r23	; 0x09
}
    1380:	08 95       	ret

00001382 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1382:	fc 01       	movw	r30, r24
    1384:	62 87       	std	Z+10, r22	; 0x0a
    1386:	73 87       	std	Z+11, r23	; 0x0b
}
    1388:	08 95       	ret

0000138a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    138a:	fc 01       	movw	r30, r24
    138c:	64 87       	std	Z+12, r22	; 0x0c
    138e:	75 87       	std	Z+13, r23	; 0x0d
}
    1390:	08 95       	ret

00001392 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1392:	fc 01       	movw	r30, r24
    1394:	66 87       	std	Z+14, r22	; 0x0e
    1396:	77 87       	std	Z+15, r23	; 0x0f
}
    1398:	08 95       	ret

0000139a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    139a:	fc 01       	movw	r30, r24
    139c:	60 8b       	std	Z+16, r22	; 0x10
    139e:	71 8b       	std	Z+17, r23	; 0x11
}
    13a0:	08 95       	ret

000013a2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    13a2:	fc 01       	movw	r30, r24
    13a4:	62 8b       	std	Z+18, r22	; 0x12
    13a6:	73 8b       	std	Z+19, r23	; 0x13
}
    13a8:	08 95       	ret

000013aa <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    13aa:	fc 01       	movw	r30, r24
    13ac:	64 8b       	std	Z+20, r22	; 0x14
    13ae:	75 8b       	std	Z+21, r23	; 0x15
}
    13b0:	08 95       	ret

000013b2 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    13b2:	fc 01       	movw	r30, r24
    13b4:	66 8b       	std	Z+22, r22	; 0x16
    13b6:	77 8b       	std	Z+23, r23	; 0x17
}
    13b8:	08 95       	ret

000013ba <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    13ba:	fc 01       	movw	r30, r24
    13bc:	60 8f       	std	Z+24, r22	; 0x18
    13be:	71 8f       	std	Z+25, r23	; 0x19
}
    13c0:	08 95       	ret

000013c2 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    13c2:	fc 01       	movw	r30, r24
    13c4:	62 8f       	std	Z+26, r22	; 0x1a
    13c6:	73 8f       	std	Z+27, r23	; 0x1b
}
    13c8:	08 95       	ret

000013ca <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    13ca:	fc 01       	movw	r30, r24
    13cc:	64 8f       	std	Z+28, r22	; 0x1c
    13ce:	75 8f       	std	Z+29, r23	; 0x1d
}
    13d0:	08 95       	ret

000013d2 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    13d2:	fc 01       	movw	r30, r24
    13d4:	66 8f       	std	Z+30, r22	; 0x1e
    13d6:	77 8f       	std	Z+31, r23	; 0x1f
}
    13d8:	08 95       	ret

000013da <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    13e0:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    13e2:	1e a2       	std	Y+38, r1	; 0x26
    13e4:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    13e6:	bc 01       	movw	r22, r24
    13e8:	68 5d       	subi	r22, 0xD8	; 216
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	88 51       	subi	r24, 0x18	; 24
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	40 ec       	ldi	r20, 0xC0	; 192
    13f2:	0e 94 ba 07 	call	0xf74	; 0xf74 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    13fa:	1c 82       	std	Y+4, r1	; 0x04
    13fc:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    13fe:	1e 82       	std	Y+6, r1	; 0x06
    1400:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1402:	18 86       	std	Y+8, r1	; 0x08
    1404:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1406:	1a 86       	std	Y+10, r1	; 0x0a
    1408:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    140a:	1c 86       	std	Y+12, r1	; 0x0c
    140c:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    140e:	1e 86       	std	Y+14, r1	; 0x0e
    1410:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1412:	18 8a       	std	Y+16, r1	; 0x10
    1414:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1416:	1a 8a       	std	Y+18, r1	; 0x12
    1418:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    141a:	1c 8a       	std	Y+20, r1	; 0x14
    141c:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    141e:	1e 8a       	std	Y+22, r1	; 0x16
    1420:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1422:	18 8e       	std	Y+24, r1	; 0x18
    1424:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1426:	1a 8e       	std	Y+26, r1	; 0x1a
    1428:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    142a:	1c 8e       	std	Y+28, r1	; 0x1c
    142c:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    142e:	1e 8e       	std	Y+30, r1	; 0x1e
    1430:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1432:	18 a2       	std	Y+32, r1	; 0x20
    1434:	19 a2       	std	Y+33, r1	; 0x21
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	0f 92       	push	r0
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1452:	e4 2f       	mov	r30, r20
    1454:	f5 2f       	mov	r31, r21
    1456:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1458:	8c 01       	movw	r16, r24
    145a:	08 51       	subi	r16, 0x18	; 24
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1460:	f6 01       	movw	r30, r12
    1462:	61 91       	ld	r22, Z+
    1464:	6f 01       	movw	r12, r30
    1466:	c8 01       	movw	r24, r16
    1468:	49 83       	std	Y+1, r20	; 0x01
    146a:	0e 94 c1 07 	call	0xf82	; 0xf82 <bytequeue_enqueue>
    146e:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1470:	8c 2d       	mov	r24, r12
    1472:	84 1b       	sub	r24, r20
    1474:	8f 15       	cp	r24, r15
    1476:	a0 f3       	brcs	.-24     	; 0x1460 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    148a:	fc 01       	movw	r30, r24
    148c:	60 83       	st	Z, r22
    148e:	71 83       	std	Z+1, r23	; 0x01
}
    1490:	08 95       	ret

00001492 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1492:	fc 01       	movw	r30, r24
    1494:	60 a3       	std	Z+32, r22	; 0x20
    1496:	71 a3       	std	Z+33, r23	; 0x21
}
    1498:	08 95       	ret

0000149a <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	6b 01       	movw	r12, r22
    14ae:	14 2f       	mov	r17, r20
    14b0:	e2 2e       	mov	r14, r18
    14b2:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    14b4:	8d a1       	ldd	r24, Y+37	; 0x25
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	31 f4       	brne	.+12     	; 0x14c6 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    14ba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14bc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    14be:	30 97       	sbiw	r30, 0x00	; 0
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <midi_input_callbacks+0x2a>
    14c2:	83 c0       	rjmp	.+262    	; 0x15ca <midi_input_callbacks+0x130>
    14c4:	95 c0       	rjmp	.+298    	; 0x15f0 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    14c6:	62 30       	cpi	r22, 0x02	; 2
    14c8:	71 05       	cpc	r23, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <midi_input_callbacks+0x34>
    14cc:	42 c0       	rjmp	.+132    	; 0x1552 <midi_input_callbacks+0xb8>
    14ce:	63 30       	cpi	r22, 0x03	; 3
    14d0:	71 05       	cpc	r23, r1
    14d2:	29 f0       	breq	.+10     	; 0x14de <midi_input_callbacks+0x44>
    14d4:	61 30       	cpi	r22, 0x01	; 1
    14d6:	71 05       	cpc	r23, r1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <midi_input_callbacks+0x42>
    14da:	73 c0       	rjmp	.+230    	; 0x15c2 <midi_input_callbacks+0x128>
    14dc:	60 c0       	rjmp	.+192    	; 0x159e <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    14de:	84 2f       	mov	r24, r20
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	80 7f       	andi	r24, 0xF0	; 240
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	80 3a       	cpi	r24, 0xA0	; 160
    14e8:	91 05       	cpc	r25, r1
    14ea:	e1 f0       	breq	.+56     	; 0x1524 <midi_input_callbacks+0x8a>
    14ec:	81 3a       	cpi	r24, 0xA1	; 161
    14ee:	91 05       	cpc	r25, r1
    14f0:	3c f4       	brge	.+14     	; 0x1500 <midi_input_callbacks+0x66>
    14f2:	80 38       	cpi	r24, 0x80	; 128
    14f4:	91 05       	cpc	r25, r1
    14f6:	99 f0       	breq	.+38     	; 0x151e <midi_input_callbacks+0x84>
    14f8:	80 39       	cpi	r24, 0x90	; 144
    14fa:	91 05       	cpc	r25, r1
    14fc:	f9 f4       	brne	.+62     	; 0x153c <midi_input_callbacks+0xa2>
    14fe:	0c c0       	rjmp	.+24     	; 0x1518 <midi_input_callbacks+0x7e>
    1500:	80 3e       	cpi	r24, 0xE0	; 224
    1502:	91 05       	cpc	r25, r1
    1504:	91 f0       	breq	.+36     	; 0x152a <midi_input_callbacks+0x90>
    1506:	80 3f       	cpi	r24, 0xF0	; 240
    1508:	91 05       	cpc	r25, r1
    150a:	91 f0       	breq	.+36     	; 0x1530 <midi_input_callbacks+0x96>
    150c:	80 3b       	cpi	r24, 0xB0	; 176
    150e:	91 05       	cpc	r25, r1
    1510:	a9 f4       	brne	.+42     	; 0x153c <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1512:	ea 81       	ldd	r30, Y+2	; 0x02
    1514:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1518:	ec 81       	ldd	r30, Y+4	; 0x04
    151a:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    151c:	11 c0       	rjmp	.+34     	; 0x1540 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    151e:	ee 81       	ldd	r30, Y+6	; 0x06
    1520:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1522:	0e c0       	rjmp	.+28     	; 0x1540 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1524:	e8 85       	ldd	r30, Y+8	; 0x08
    1526:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1528:	0b c0       	rjmp	.+22     	; 0x1540 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    152a:	ea 85       	ldd	r30, Y+10	; 0x0a
    152c:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1530:	42 3f       	cpi	r20, 0xF2	; 242
    1532:	09 f0       	breq	.+2      	; 0x1536 <midi_input_callbacks+0x9c>
    1534:	5d c0       	rjmp	.+186    	; 0x15f0 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1536:	ec 85       	ldd	r30, Y+12	; 0x0c
    1538:	fd 85       	ldd	r31, Y+13	; 0x0d
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    153c:	e0 e0       	ldi	r30, 0x00	; 0
    153e:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1540:	30 97       	sbiw	r30, 0x00	; 0
    1542:	09 f4       	brne	.+2      	; 0x1546 <midi_input_callbacks+0xac>
    1544:	55 c0       	rjmp	.+170    	; 0x15f0 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1546:	ce 01       	movw	r24, r28
    1548:	61 2f       	mov	r22, r17
    154a:	4e 2d       	mov	r20, r14
    154c:	2f 2d       	mov	r18, r15
    154e:	09 95       	icall
    1550:	42 c0       	rjmp	.+132    	; 0x15d6 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1552:	84 2f       	mov	r24, r20
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	80 7f       	andi	r24, 0xF0	; 240
    1558:	90 70       	andi	r25, 0x00	; 0
    155a:	80 3d       	cpi	r24, 0xD0	; 208
    155c:	91 05       	cpc	r25, r1
    155e:	49 f0       	breq	.+18     	; 0x1572 <midi_input_callbacks+0xd8>
    1560:	80 3f       	cpi	r24, 0xF0	; 240
    1562:	91 05       	cpc	r25, r1
    1564:	49 f0       	breq	.+18     	; 0x1578 <midi_input_callbacks+0xde>
    1566:	80 3c       	cpi	r24, 0xC0	; 192
    1568:	91 05       	cpc	r25, r1
    156a:	81 f4       	brne	.+32     	; 0x158c <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    156c:	ee 85       	ldd	r30, Y+14	; 0x0e
    156e:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1572:	e8 89       	ldd	r30, Y+16	; 0x10
    1574:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1578:	43 3f       	cpi	r20, 0xF3	; 243
    157a:	19 f4       	brne	.+6      	; 0x1582 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    157c:	ea 89       	ldd	r30, Y+18	; 0x12
    157e:	fb 89       	ldd	r31, Y+19	; 0x13
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1582:	41 3f       	cpi	r20, 0xF1	; 241
    1584:	a9 f5       	brne	.+106    	; 0x15f0 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1586:	ec 89       	ldd	r30, Y+20	; 0x14
    1588:	fd 89       	ldd	r31, Y+21	; 0x15
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    158c:	e0 e0       	ldi	r30, 0x00	; 0
    158e:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1590:	30 97       	sbiw	r30, 0x00	; 0
    1592:	71 f1       	breq	.+92     	; 0x15f0 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1594:	ce 01       	movw	r24, r28
    1596:	61 2f       	mov	r22, r17
    1598:	4e 2d       	mov	r20, r14
    159a:	09 95       	icall
    159c:	1c c0       	rjmp	.+56     	; 0x15d6 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    159e:	84 2f       	mov	r24, r20
    15a0:	0e 94 44 08 	call	0x1088	; 0x1088 <midi_is_realtime>
    15a4:	88 23       	and	r24, r24
    15a6:	19 f0       	breq	.+6      	; 0x15ae <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    15a8:	ee 89       	ldd	r30, Y+22	; 0x16
    15aa:	ff 89       	ldd	r31, Y+23	; 0x17
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    15ae:	16 3f       	cpi	r17, 0xF6	; 246
    15b0:	f9 f4       	brne	.+62     	; 0x15f0 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    15b2:	e8 8d       	ldd	r30, Y+24	; 0x18
    15b4:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	d9 f0       	breq	.+54     	; 0x15f0 <midi_input_callbacks+0x156>
                  func(device, byte0);
    15ba:	ce 01       	movw	r24, r28
    15bc:	61 2f       	mov	r22, r17
    15be:	09 95       	icall
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    15c2:	64 30       	cpi	r22, 0x04	; 4
    15c4:	71 05       	cpc	r23, r1
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <midi_input_callbacks+0x152>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    15ca:	ce 01       	movw	r24, r28
    15cc:	b6 01       	movw	r22, r12
    15ce:	41 2f       	mov	r20, r17
    15d0:	2e 2d       	mov	r18, r14
    15d2:	0f 2d       	mov	r16, r15
    15d4:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    15d6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    15d8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    15da:	30 97       	sbiw	r30, 0x00	; 0
    15dc:	71 f0       	breq	.+28     	; 0x15fa <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    15de:	ce 01       	movw	r24, r28
    15e0:	b6 01       	movw	r22, r12
    15e2:	41 2f       	mov	r20, r17
    15e4:	2e 2d       	mov	r18, r14
    15e6:	0f 2d       	mov	r16, r15
    15e8:	09 95       	icall
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    15ec:	cc 24       	eor	r12, r12
    15ee:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    15f0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    15f2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    15f4:	30 97       	sbiw	r30, 0x00	; 0
    15f6:	49 f7       	brne	.-46     	; 0x15ca <midi_input_callbacks+0x130>
    15f8:	ee cf       	rjmp	.-36     	; 0x15d6 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	08 95       	ret

0000160c <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
    161a:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    161c:	86 2f       	mov	r24, r22
    161e:	0e 94 44 08 	call	0x1088	; 0x1088 <midi_is_realtime>
    1622:	88 23       	and	r24, r24
    1624:	69 f0       	breq	.+26     	; 0x1640 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1626:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    162c:	ce 01       	movw	r24, r28
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	41 2f       	mov	r20, r17
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	00 e0       	ldi	r16, 0x00	; 0
    1638:	0e 94 4d 0a 	call	0x149a	; 0x149a <midi_input_callbacks>
      device->input_state = state;
    163c:	ed a2       	std	Y+37, r14	; 0x25
    163e:	7e c0       	rjmp	.+252    	; 0x173c <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1640:	81 2f       	mov	r24, r17
    1642:	0e 94 40 08 	call	0x1080	; 0x1080 <midi_is_statusbyte>
    1646:	4d a1       	ldd	r20, Y+37	; 0x25
    1648:	88 23       	and	r24, r24
    164a:	09 f4       	brne	.+2      	; 0x164e <midi_process_byte+0x42>
    164c:	42 c0       	rjmp	.+132    	; 0x16d2 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    164e:	44 30       	cpi	r20, 0x04	; 4
    1650:	29 f0       	breq	.+10     	; 0x165c <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1652:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	8e a3       	std	Y+38, r24	; 0x26
    165a:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    165c:	81 2f       	mov	r24, r17
    165e:	0e 94 4a 08 	call	0x1094	; 0x1094 <midi_packet_length>
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	39 f0       	breq	.+14     	; 0x1674 <midi_process_byte+0x68>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	78 f0       	brcs	.+30     	; 0x1688 <midi_process_byte+0x7c>
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	59 f0       	breq	.+22     	; 0x1684 <midi_process_byte+0x78>
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	61 f5       	brne	.+88     	; 0x16ca <midi_process_byte+0xbe>
    1672:	08 c0       	rjmp	.+16     	; 0x1684 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1674:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1676:	ce 01       	movw	r24, r28
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	41 2f       	mov	r20, r17
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	00 e0       	ldi	r16, 0x00	; 0
    1682:	1f c0       	rjmp	.+62     	; 0x16c2 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1684:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1686:	5a c0       	rjmp	.+180    	; 0x173c <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1688:	10 3f       	cpi	r17, 0xF0	; 240
    168a:	19 f0       	breq	.+6      	; 0x1692 <midi_process_byte+0x86>
    168c:	17 3f       	cpi	r17, 0xF7	; 247
    168e:	e9 f4       	brne	.+58     	; 0x16ca <midi_process_byte+0xbe>
    1690:	04 c0       	rjmp	.+8      	; 0x169a <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1696:	1a a3       	std	Y+34, r17	; 0x22
    1698:	3f c0       	rjmp	.+126    	; 0x1718 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    169a:	2e a1       	ldd	r18, Y+38	; 0x26
    169c:	3f a1       	ldd	r19, Y+39	; 0x27
    169e:	c9 01       	movw	r24, r18
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	0e 94 c5 12 	call	0x258a	; 0x258a <__udivmodhi4>
    16a8:	8c 0f       	add	r24, r28
    16aa:	9d 1f       	adc	r25, r29
    16ac:	fc 01       	movw	r30, r24
    16ae:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    16b0:	b9 01       	movw	r22, r18
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	6e a3       	std	Y+38, r22	; 0x26
    16b8:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    16ba:	ce 01       	movw	r24, r28
    16bc:	4a a1       	ldd	r20, Y+34	; 0x22
    16be:	2b a1       	ldd	r18, Y+35	; 0x23
    16c0:	0c a1       	ldd	r16, Y+36	; 0x24
    16c2:	0e 94 4d 0a 	call	0x149a	; 0x149a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    16c6:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    16c8:	39 c0       	rjmp	.+114    	; 0x173c <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    16ca:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    16cc:	1e a2       	std	Y+38, r1	; 0x26
    16ce:	1f a2       	std	Y+39, r1	; 0x27
            break;
    16d0:	35 c0       	rjmp	.+106    	; 0x173c <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    16d2:	44 23       	and	r20, r20
    16d4:	99 f1       	breq	.+102    	; 0x173c <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    16d6:	2e a1       	ldd	r18, Y+38	; 0x26
    16d8:	3f a1       	ldd	r19, Y+39	; 0x27
    16da:	c9 01       	movw	r24, r18
    16dc:	63 e0       	ldi	r22, 0x03	; 3
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	0e 94 c5 12 	call	0x258a	; 0x258a <__udivmodhi4>
    16e4:	7c 01       	movw	r14, r24
    16e6:	fe 01       	movw	r30, r28
    16e8:	e8 0f       	add	r30, r24
    16ea:	f9 1f       	adc	r31, r25
    16ec:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    16ee:	b9 01       	movw	r22, r18
    16f0:	6f 5f       	subi	r22, 0xFF	; 255
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	6e a3       	std	Y+38, r22	; 0x26
    16f6:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	91 f0       	breq	.+36     	; 0x1722 <midi_process_byte+0x116>
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	e8 16       	cp	r14, r24
    1702:	f1 04       	cpc	r15, r1
    1704:	d9 f4       	brne	.+54     	; 0x173c <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1706:	ce 01       	movw	r24, r28
    1708:	4a a1       	ldd	r20, Y+34	; 0x22
    170a:	2b a1       	ldd	r18, Y+35	; 0x23
    170c:	0c a1       	ldd	r16, Y+36	; 0x24
    170e:	0e 94 4d 0a 	call	0x149a	; 0x149a <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1712:	8d a1       	ldd	r24, Y+37	; 0x25
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	91 f0       	breq	.+36     	; 0x173c <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	8e a3       	std	Y+38, r24	; 0x26
    171e:	9f a3       	std	Y+39, r25	; 0x27
    1720:	0d c0       	rjmp	.+26     	; 0x173c <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1722:	42 30       	cpi	r20, 0x02	; 2
    1724:	59 f4       	brne	.+22     	; 0x173c <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1726:	ce 01       	movw	r24, r28
    1728:	4a a1       	ldd	r20, Y+34	; 0x22
    172a:	2b a1       	ldd	r18, Y+35	; 0x23
    172c:	00 e0       	ldi	r16, 0x00	; 0
    172e:	0e 94 4d 0a 	call	0x149a	; 0x149a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	11 f0       	breq	.+4      	; 0x173c <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1738:	ee a2       	std	Y+38, r14	; 0x26
    173a:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <midi_device_process+0xe>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	8c 01       	movw	r16, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1760:	dc 01       	movw	r26, r24
    1762:	90 96       	adiw	r26, 0x20	; 32
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	91 97       	sbiw	r26, 0x21	; 33
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	09 f0       	breq	.+2      	; 0x1770 <midi_device_process+0x26>
      device->pre_input_process_callback(device);
    176e:	09 95       	icall

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1770:	88 ee       	ldi	r24, 0xE8	; 232
    1772:	e8 2e       	mov	r14, r24
    1774:	f1 2c       	mov	r15, r1
    1776:	e0 0e       	add	r14, r16
    1778:	f1 1e       	adc	r15, r17
    177a:	c7 01       	movw	r24, r14
    177c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <bytequeue_length>
    1780:	89 83       	std	Y+1, r24	; 0x01
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1782:	1a 82       	std	Y+2, r1	; 0x02
    1784:	1b 82       	std	Y+3, r1	; 0x03
    1786:	11 c0       	rjmp	.+34     	; 0x17aa <midi_device_process+0x60>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1788:	c7 01       	movw	r24, r14
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	0e 94 0a 08 	call	0x1014	; 0x1014 <bytequeue_get>
    1790:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 06 0b 	call	0x160c	; 0x160c <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1798:	c7 01       	movw	r24, r14
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	0e 94 1a 08 	call	0x1034	; 0x1034 <bytequeue_remove>

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	9b 83       	std	Y+3, r25	; 0x03
    17aa:	2a 81       	ldd	r18, Y+2	; 0x02
    17ac:	3b 81       	ldd	r19, Y+3	; 0x03
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	28 17       	cp	r18, r24
    17b4:	39 07       	cpc	r19, r25
    17b6:	40 f3       	brcs	.-48     	; 0x1788 <midi_device_process+0x3e>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    17b8:	23 96       	adiw	r28, 0x03	; 3
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	08 95       	ret

000017cc <__fixunssfsi>:
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	7b 01       	movw	r14, r22
    17d6:	8c 01       	movw	r16, r24
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	5f e4       	ldi	r21, 0x4F	; 79
    17e0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__gesf2>
    17e4:	87 fd       	sbrc	r24, 7
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <__fixunssfsi+0x3e>
    17e8:	c8 01       	movw	r24, r16
    17ea:	b7 01       	movw	r22, r14
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	5f e4       	ldi	r21, 0x4F	; 79
    17f4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__subsf3>
    17f8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fixsfsi>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	20 50       	subi	r18, 0x00	; 0
    1802:	30 40       	sbci	r19, 0x00	; 0
    1804:	40 40       	sbci	r20, 0x00	; 0
    1806:	50 48       	sbci	r21, 0x80	; 128
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <__fixunssfsi+0x4a>
    180a:	c8 01       	movw	r24, r16
    180c:	b7 01       	movw	r22, r14
    180e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fixsfsi>
    1812:	9b 01       	movw	r18, r22
    1814:	ac 01       	movw	r20, r24
    1816:	b9 01       	movw	r22, r18
    1818:	ca 01       	movw	r24, r20
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	08 95       	ret

00001824 <_fpadd_parts>:
    1824:	a0 e0       	ldi	r26, 0x00	; 0
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e8 e1       	ldi	r30, 0x18	; 24
    182a:	fc e0       	ldi	r31, 0x0C	; 12
    182c:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x8>
    1830:	fc 01       	movw	r30, r24
    1832:	ea 01       	movw	r28, r20
    1834:	80 81       	ld	r24, Z
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	08 f4       	brcc	.+2      	; 0x183c <_fpadd_parts+0x18>
    183a:	38 c1       	rjmp	.+624    	; 0x1aac <_fpadd_parts+0x288>
    183c:	db 01       	movw	r26, r22
    183e:	9c 91       	ld	r25, X
    1840:	92 30       	cpi	r25, 0x02	; 2
    1842:	08 f4       	brcc	.+2      	; 0x1846 <_fpadd_parts+0x22>
    1844:	30 c1       	rjmp	.+608    	; 0x1aa6 <_fpadd_parts+0x282>
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	59 f4       	brne	.+22     	; 0x1860 <_fpadd_parts+0x3c>
    184a:	94 30       	cpi	r25, 0x04	; 4
    184c:	09 f0       	breq	.+2      	; 0x1850 <_fpadd_parts+0x2c>
    184e:	2e c1       	rjmp	.+604    	; 0x1aac <_fpadd_parts+0x288>
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	8c 91       	ld	r24, X
    1856:	11 97       	sbiw	r26, 0x01	; 1
    1858:	98 17       	cp	r25, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <_fpadd_parts+0x3a>
    185c:	21 c1       	rjmp	.+578    	; 0x1aa0 <_fpadd_parts+0x27c>
    185e:	26 c1       	rjmp	.+588    	; 0x1aac <_fpadd_parts+0x288>
    1860:	94 30       	cpi	r25, 0x04	; 4
    1862:	09 f4       	brne	.+2      	; 0x1866 <_fpadd_parts+0x42>
    1864:	20 c1       	rjmp	.+576    	; 0x1aa6 <_fpadd_parts+0x282>
    1866:	92 30       	cpi	r25, 0x02	; 2
    1868:	b1 f4       	brne	.+44     	; 0x1896 <_fpadd_parts+0x72>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	09 f0       	breq	.+2      	; 0x1870 <_fpadd_parts+0x4c>
    186e:	1e c1       	rjmp	.+572    	; 0x1aac <_fpadd_parts+0x288>
    1870:	ca 01       	movw	r24, r20
    1872:	af 01       	movw	r20, r30
    1874:	28 e0       	ldi	r18, 0x08	; 8
    1876:	da 01       	movw	r26, r20
    1878:	0d 90       	ld	r0, X+
    187a:	ad 01       	movw	r20, r26
    187c:	dc 01       	movw	r26, r24
    187e:	0d 92       	st	X+, r0
    1880:	cd 01       	movw	r24, r26
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	c1 f7       	brne	.-16     	; 0x1876 <_fpadd_parts+0x52>
    1886:	db 01       	movw	r26, r22
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	8c 91       	ld	r24, X
    188c:	11 97       	sbiw	r26, 0x01	; 1
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	89 23       	and	r24, r25
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	0a c1       	rjmp	.+532    	; 0x1aaa <_fpadd_parts+0x286>
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	09 f4       	brne	.+2      	; 0x189c <_fpadd_parts+0x78>
    189a:	05 c1       	rjmp	.+522    	; 0x1aa6 <_fpadd_parts+0x282>
    189c:	c2 80       	ldd	r12, Z+2	; 0x02
    189e:	d3 80       	ldd	r13, Z+3	; 0x03
    18a0:	db 01       	movw	r26, r22
    18a2:	12 96       	adiw	r26, 0x02	; 2
    18a4:	6d 90       	ld	r6, X+
    18a6:	7c 90       	ld	r7, X
    18a8:	13 97       	sbiw	r26, 0x03	; 3
    18aa:	24 81       	ldd	r18, Z+4	; 0x04
    18ac:	35 81       	ldd	r19, Z+5	; 0x05
    18ae:	46 81       	ldd	r20, Z+6	; 0x06
    18b0:	57 81       	ldd	r21, Z+7	; 0x07
    18b2:	14 96       	adiw	r26, 0x04	; 4
    18b4:	ed 90       	ld	r14, X+
    18b6:	fd 90       	ld	r15, X+
    18b8:	0d 91       	ld	r16, X+
    18ba:	1c 91       	ld	r17, X
    18bc:	17 97       	sbiw	r26, 0x07	; 7
    18be:	c6 01       	movw	r24, r12
    18c0:	86 19       	sub	r24, r6
    18c2:	97 09       	sbc	r25, r7
    18c4:	5c 01       	movw	r10, r24
    18c6:	97 ff       	sbrs	r25, 7
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <_fpadd_parts+0xae>
    18ca:	aa 24       	eor	r10, r10
    18cc:	bb 24       	eor	r11, r11
    18ce:	a8 1a       	sub	r10, r24
    18d0:	b9 0a       	sbc	r11, r25
    18d2:	b0 e2       	ldi	r27, 0x20	; 32
    18d4:	ab 16       	cp	r10, r27
    18d6:	b1 04       	cpc	r11, r1
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <_fpadd_parts+0xb8>
    18da:	61 c0       	rjmp	.+194    	; 0x199e <_fpadd_parts+0x17a>
    18dc:	18 16       	cp	r1, r24
    18de:	19 06       	cpc	r1, r25
    18e0:	6c f5       	brge	.+90     	; 0x193c <_fpadd_parts+0x118>
    18e2:	37 01       	movw	r6, r14
    18e4:	48 01       	movw	r8, r16
    18e6:	0a 2c       	mov	r0, r10
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <_fpadd_parts+0xce>
    18ea:	96 94       	lsr	r9
    18ec:	87 94       	ror	r8
    18ee:	77 94       	ror	r7
    18f0:	67 94       	ror	r6
    18f2:	0a 94       	dec	r0
    18f4:	d2 f7       	brpl	.-12     	; 0x18ea <_fpadd_parts+0xc6>
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	0a 2c       	mov	r0, r10
    1900:	04 c0       	rjmp	.+8      	; 0x190a <_fpadd_parts+0xe6>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	aa 1f       	adc	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	0a 94       	dec	r0
    190c:	d2 f7       	brpl	.-12     	; 0x1902 <_fpadd_parts+0xde>
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	a1 09       	sbc	r26, r1
    1912:	b1 09       	sbc	r27, r1
    1914:	8e 21       	and	r24, r14
    1916:	9f 21       	and	r25, r15
    1918:	a0 23       	and	r26, r16
    191a:	b1 23       	and	r27, r17
    191c:	ee 24       	eor	r14, r14
    191e:	ff 24       	eor	r15, r15
    1920:	87 01       	movw	r16, r14
    1922:	e3 94       	inc	r14
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	a1 05       	cpc	r26, r1
    1928:	b1 05       	cpc	r27, r1
    192a:	19 f4       	brne	.+6      	; 0x1932 <_fpadd_parts+0x10e>
    192c:	ee 24       	eor	r14, r14
    192e:	ff 24       	eor	r15, r15
    1930:	87 01       	movw	r16, r14
    1932:	e6 28       	or	r14, r6
    1934:	f7 28       	or	r15, r7
    1936:	08 29       	or	r16, r8
    1938:	19 29       	or	r17, r9
    193a:	3c c0       	rjmp	.+120    	; 0x19b4 <_fpadd_parts+0x190>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	d1 f1       	breq	.+116    	; 0x19b4 <_fpadd_parts+0x190>
    1940:	ca 0c       	add	r12, r10
    1942:	db 1c       	adc	r13, r11
    1944:	39 01       	movw	r6, r18
    1946:	4a 01       	movw	r8, r20
    1948:	0a 2c       	mov	r0, r10
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <_fpadd_parts+0x130>
    194c:	96 94       	lsr	r9
    194e:	87 94       	ror	r8
    1950:	77 94       	ror	r7
    1952:	67 94       	ror	r6
    1954:	0a 94       	dec	r0
    1956:	d2 f7       	brpl	.-12     	; 0x194c <_fpadd_parts+0x128>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	0a 2c       	mov	r0, r10
    1962:	04 c0       	rjmp	.+8      	; 0x196c <_fpadd_parts+0x148>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	0a 94       	dec	r0
    196e:	d2 f7       	brpl	.-12     	; 0x1964 <_fpadd_parts+0x140>
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b1 09       	sbc	r27, r1
    1976:	82 23       	and	r24, r18
    1978:	93 23       	and	r25, r19
    197a:	a4 23       	and	r26, r20
    197c:	b5 23       	and	r27, r21
    197e:	21 e0       	ldi	r18, 0x01	; 1
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	a1 05       	cpc	r26, r1
    198a:	b1 05       	cpc	r27, r1
    198c:	19 f4       	brne	.+6      	; 0x1994 <_fpadd_parts+0x170>
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	26 29       	or	r18, r6
    1996:	37 29       	or	r19, r7
    1998:	48 29       	or	r20, r8
    199a:	59 29       	or	r21, r9
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <_fpadd_parts+0x190>
    199e:	6c 14       	cp	r6, r12
    19a0:	7d 04       	cpc	r7, r13
    19a2:	24 f4       	brge	.+8      	; 0x19ac <_fpadd_parts+0x188>
    19a4:	ee 24       	eor	r14, r14
    19a6:	ff 24       	eor	r15, r15
    19a8:	87 01       	movw	r16, r14
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <_fpadd_parts+0x190>
    19ac:	63 01       	movw	r12, r6
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	81 81       	ldd	r24, Z+1	; 0x01
    19b6:	fb 01       	movw	r30, r22
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	89 17       	cp	r24, r25
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <_fpadd_parts+0x19c>
    19be:	45 c0       	rjmp	.+138    	; 0x1a4a <_fpadd_parts+0x226>
    19c0:	88 23       	and	r24, r24
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <_fpadd_parts+0x1b2>
    19c4:	d8 01       	movw	r26, r16
    19c6:	c7 01       	movw	r24, r14
    19c8:	82 1b       	sub	r24, r18
    19ca:	93 0b       	sbc	r25, r19
    19cc:	a4 0b       	sbc	r26, r20
    19ce:	b5 0b       	sbc	r27, r21
    19d0:	9c 01       	movw	r18, r24
    19d2:	ad 01       	movw	r20, r26
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <_fpadd_parts+0x1ba>
    19d6:	2e 19       	sub	r18, r14
    19d8:	3f 09       	sbc	r19, r15
    19da:	40 0b       	sbc	r20, r16
    19dc:	51 0b       	sbc	r21, r17
    19de:	57 fd       	sbrc	r21, 7
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <_fpadd_parts+0x1c6>
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	ca 82       	std	Y+2, r12	; 0x02
    19e6:	db 82       	std	Y+3, r13	; 0x03
    19e8:	0b c0       	rjmp	.+22     	; 0x1a00 <_fpadd_parts+0x1dc>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	ca 82       	std	Y+2, r12	; 0x02
    19f0:	db 82       	std	Y+3, r13	; 0x03
    19f2:	50 95       	com	r21
    19f4:	40 95       	com	r20
    19f6:	30 95       	com	r19
    19f8:	21 95       	neg	r18
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	4f 4f       	sbci	r20, 0xFF	; 255
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1a00:	2c 83       	std	Y+4, r18	; 0x04
    1a02:	3d 83       	std	Y+5, r19	; 0x05
    1a04:	4e 83       	std	Y+6, r20	; 0x06
    1a06:	5f 83       	std	Y+7, r21	; 0x07
    1a08:	0d c0       	rjmp	.+26     	; 0x1a24 <_fpadd_parts+0x200>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	8c 83       	std	Y+4, r24	; 0x04
    1a14:	9d 83       	std	Y+5, r25	; 0x05
    1a16:	ae 83       	std	Y+6, r26	; 0x06
    1a18:	bf 83       	std	Y+7, r27	; 0x07
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	9b 83       	std	Y+3, r25	; 0x03
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	ae 81       	ldd	r26, Y+6	; 0x06
    1a2a:	bf 81       	ldd	r27, Y+7	; 0x07
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	ad 01       	movw	r20, r26
    1a30:	21 50       	subi	r18, 0x01	; 1
    1a32:	30 40       	sbci	r19, 0x00	; 0
    1a34:	40 40       	sbci	r20, 0x00	; 0
    1a36:	50 40       	sbci	r21, 0x00	; 0
    1a38:	2f 3f       	cpi	r18, 0xFF	; 255
    1a3a:	ef ef       	ldi	r30, 0xFF	; 255
    1a3c:	3e 07       	cpc	r19, r30
    1a3e:	ef ef       	ldi	r30, 0xFF	; 255
    1a40:	4e 07       	cpc	r20, r30
    1a42:	ef e3       	ldi	r30, 0x3F	; 63
    1a44:	5e 07       	cpc	r21, r30
    1a46:	08 f3       	brcs	.-62     	; 0x1a0a <_fpadd_parts+0x1e6>
    1a48:	0b c0       	rjmp	.+22     	; 0x1a60 <_fpadd_parts+0x23c>
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	ca 82       	std	Y+2, r12	; 0x02
    1a4e:	db 82       	std	Y+3, r13	; 0x03
    1a50:	2e 0d       	add	r18, r14
    1a52:	3f 1d       	adc	r19, r15
    1a54:	40 1f       	adc	r20, r16
    1a56:	51 1f       	adc	r21, r17
    1a58:	2c 83       	std	Y+4, r18	; 0x04
    1a5a:	3d 83       	std	Y+5, r19	; 0x05
    1a5c:	4e 83       	std	Y+6, r20	; 0x06
    1a5e:	5f 83       	std	Y+7, r21	; 0x07
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	88 83       	st	Y, r24
    1a64:	2c 81       	ldd	r18, Y+4	; 0x04
    1a66:	3d 81       	ldd	r19, Y+5	; 0x05
    1a68:	4e 81       	ldd	r20, Y+6	; 0x06
    1a6a:	5f 81       	ldd	r21, Y+7	; 0x07
    1a6c:	57 ff       	sbrs	r21, 7
    1a6e:	1d c0       	rjmp	.+58     	; 0x1aaa <_fpadd_parts+0x286>
    1a70:	da 01       	movw	r26, r20
    1a72:	c9 01       	movw	r24, r18
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	a0 70       	andi	r26, 0x00	; 0
    1a7a:	b0 70       	andi	r27, 0x00	; 0
    1a7c:	56 95       	lsr	r21
    1a7e:	47 95       	ror	r20
    1a80:	37 95       	ror	r19
    1a82:	27 95       	ror	r18
    1a84:	82 2b       	or	r24, r18
    1a86:	93 2b       	or	r25, r19
    1a88:	a4 2b       	or	r26, r20
    1a8a:	b5 2b       	or	r27, r21
    1a8c:	8c 83       	std	Y+4, r24	; 0x04
    1a8e:	9d 83       	std	Y+5, r25	; 0x05
    1a90:	ae 83       	std	Y+6, r26	; 0x06
    1a92:	bf 83       	std	Y+7, r27	; 0x07
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <_fpadd_parts+0x286>
    1aa0:	ef e4       	ldi	r30, 0x4F	; 79
    1aa2:	f0 e2       	ldi	r31, 0x20	; 32
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <_fpadd_parts+0x288>
    1aa6:	fb 01       	movw	r30, r22
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <_fpadd_parts+0x288>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	cf 01       	movw	r24, r30
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	ee e0       	ldi	r30, 0x0E	; 14
    1ab4:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x8>

00001ab8 <__addsf3>:
    1ab8:	a0 e2       	ldi	r26, 0x20	; 32
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e2 e6       	ldi	r30, 0x62	; 98
    1abe:	fd e0       	ldi	r31, 0x0D	; 13
    1ac0:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x18>
    1ac4:	69 83       	std	Y+1, r22	; 0x01
    1ac6:	7a 83       	std	Y+2, r23	; 0x02
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	2d 83       	std	Y+5, r18	; 0x05
    1ace:	3e 83       	std	Y+6, r19	; 0x06
    1ad0:	4f 83       	std	Y+7, r20	; 0x07
    1ad2:	58 87       	std	Y+8, r21	; 0x08
    1ad4:	89 e0       	ldi	r24, 0x09	; 9
    1ad6:	e8 2e       	mov	r14, r24
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	ec 0e       	add	r14, r28
    1adc:	fd 1e       	adc	r15, r29
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1ae8:	8e 01       	movw	r16, r28
    1aea:	0f 5e       	subi	r16, 0xEF	; 239
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	ce 01       	movw	r24, r28
    1af0:	05 96       	adiw	r24, 0x05	; 5
    1af2:	b8 01       	movw	r22, r16
    1af4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1af8:	c7 01       	movw	r24, r14
    1afa:	b8 01       	movw	r22, r16
    1afc:	ae 01       	movw	r20, r28
    1afe:	47 5e       	subi	r20, 0xE7	; 231
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	0e 94 12 0c 	call	0x1824	; 0x1824 <_fpadd_parts>
    1b06:	0e 94 16 11 	call	0x222c	; 0x222c <__pack_f>
    1b0a:	a0 96       	adiw	r28, 0x20	; 32
    1b0c:	e6 e0       	ldi	r30, 0x06	; 6
    1b0e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00001b12 <__subsf3>:
    1b12:	a0 e2       	ldi	r26, 0x20	; 32
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	ef e8       	ldi	r30, 0x8F	; 143
    1b18:	fd e0       	ldi	r31, 0x0D	; 13
    1b1a:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x18>
    1b1e:	69 83       	std	Y+1, r22	; 0x01
    1b20:	7a 83       	std	Y+2, r23	; 0x02
    1b22:	8b 83       	std	Y+3, r24	; 0x03
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	2d 83       	std	Y+5, r18	; 0x05
    1b28:	3e 83       	std	Y+6, r19	; 0x06
    1b2a:	4f 83       	std	Y+7, r20	; 0x07
    1b2c:	58 87       	std	Y+8, r21	; 0x08
    1b2e:	8e 01       	movw	r16, r28
    1b30:	07 5f       	subi	r16, 0xF7	; 247
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	b8 01       	movw	r22, r16
    1b3a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1b3e:	91 e1       	ldi	r25, 0x11	; 17
    1b40:	e9 2e       	mov	r14, r25
    1b42:	f1 2c       	mov	r15, r1
    1b44:	ec 0e       	add	r14, r28
    1b46:	fd 1e       	adc	r15, r29
    1b48:	ce 01       	movw	r24, r28
    1b4a:	05 96       	adiw	r24, 0x05	; 5
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1b52:	8a 89       	ldd	r24, Y+18	; 0x12
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	89 27       	eor	r24, r25
    1b58:	8a 8b       	std	Y+18, r24	; 0x12
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	ae 01       	movw	r20, r28
    1b60:	47 5e       	subi	r20, 0xE7	; 231
    1b62:	5f 4f       	sbci	r21, 0xFF	; 255
    1b64:	0e 94 12 0c 	call	0x1824	; 0x1824 <_fpadd_parts>
    1b68:	0e 94 16 11 	call	0x222c	; 0x222c <__pack_f>
    1b6c:	a0 96       	adiw	r28, 0x20	; 32
    1b6e:	e6 e0       	ldi	r30, 0x06	; 6
    1b70:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00001b74 <__mulsf3>:
    1b74:	a0 e2       	ldi	r26, 0x20	; 32
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e0 ec       	ldi	r30, 0xC0	; 192
    1b7a:	fd e0       	ldi	r31, 0x0D	; 13
    1b7c:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__prologue_saves__>
    1b80:	69 83       	std	Y+1, r22	; 0x01
    1b82:	7a 83       	std	Y+2, r23	; 0x02
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	2d 83       	std	Y+5, r18	; 0x05
    1b8a:	3e 83       	std	Y+6, r19	; 0x06
    1b8c:	4f 83       	std	Y+7, r20	; 0x07
    1b8e:	58 87       	std	Y+8, r21	; 0x08
    1b90:	ce 01       	movw	r24, r28
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	be 01       	movw	r22, r28
    1b96:	67 5f       	subi	r22, 0xF7	; 247
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	05 96       	adiw	r24, 0x05	; 5
    1ba2:	be 01       	movw	r22, r28
    1ba4:	6f 5e       	subi	r22, 0xEF	; 239
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1bac:	99 85       	ldd	r25, Y+9	; 0x09
    1bae:	92 30       	cpi	r25, 0x02	; 2
    1bb0:	78 f0       	brcs	.+30     	; 0x1bd0 <__mulsf3+0x5c>
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	82 30       	cpi	r24, 0x02	; 2
    1bb6:	c0 f0       	brcs	.+48     	; 0x1be8 <__mulsf3+0x74>
    1bb8:	94 30       	cpi	r25, 0x04	; 4
    1bba:	19 f4       	brne	.+6      	; 0x1bc2 <__mulsf3+0x4e>
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	41 f4       	brne	.+16     	; 0x1bd0 <__mulsf3+0x5c>
    1bc0:	cb c0       	rjmp	.+406    	; 0x1d58 <__mulsf3+0x1e4>
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	19 f4       	brne	.+6      	; 0x1bcc <__mulsf3+0x58>
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	79 f4       	brne	.+30     	; 0x1be8 <__mulsf3+0x74>
    1bca:	c6 c0       	rjmp	.+396    	; 0x1d58 <__mulsf3+0x1e4>
    1bcc:	92 30       	cpi	r25, 0x02	; 2
    1bce:	51 f4       	brne	.+20     	; 0x1be4 <__mulsf3+0x70>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd6:	29 17       	cp	r18, r25
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__mulsf3+0x68>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	8a 87       	std	Y+10, r24	; 0x0a
    1bde:	ce 01       	movw	r24, r28
    1be0:	09 96       	adiw	r24, 0x09	; 9
    1be2:	bc c0       	rjmp	.+376    	; 0x1d5c <__mulsf3+0x1e8>
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	51 f4       	brne	.+20     	; 0x1bfc <__mulsf3+0x88>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bec:	9a 89       	ldd	r25, Y+18	; 0x12
    1bee:	29 17       	cp	r18, r25
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <__mulsf3+0x80>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	8a 8b       	std	Y+18, r24	; 0x12
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	41 96       	adiw	r24, 0x11	; 17
    1bfa:	b0 c0       	rjmp	.+352    	; 0x1d5c <__mulsf3+0x1e8>
    1bfc:	6d 84       	ldd	r6, Y+13	; 0x0d
    1bfe:	7e 84       	ldd	r7, Y+14	; 0x0e
    1c00:	8f 84       	ldd	r8, Y+15	; 0x0f
    1c02:	98 88       	ldd	r9, Y+16	; 0x10
    1c04:	ed 88       	ldd	r14, Y+21	; 0x15
    1c06:	fe 88       	ldd	r15, Y+22	; 0x16
    1c08:	0f 89       	ldd	r16, Y+23	; 0x17
    1c0a:	18 8d       	ldd	r17, Y+24	; 0x18
    1c0c:	e0 e2       	ldi	r30, 0x20	; 32
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	dc 01       	movw	r26, r24
    1c16:	aa 24       	eor	r10, r10
    1c18:	bb 24       	eor	r11, r11
    1c1a:	65 01       	movw	r12, r10
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	a9 01       	movw	r20, r18
    1c22:	b3 01       	movw	r22, r6
    1c24:	61 70       	andi	r22, 0x01	; 1
    1c26:	70 70       	andi	r23, 0x00	; 0
    1c28:	61 15       	cp	r22, r1
    1c2a:	71 05       	cpc	r23, r1
    1c2c:	d1 f0       	breq	.+52     	; 0x1c62 <__mulsf3+0xee>
    1c2e:	2e 0d       	add	r18, r14
    1c30:	3f 1d       	adc	r19, r15
    1c32:	40 1f       	adc	r20, r16
    1c34:	51 1f       	adc	r21, r17
    1c36:	15 01       	movw	r2, r10
    1c38:	26 01       	movw	r4, r12
    1c3a:	28 0e       	add	r2, r24
    1c3c:	39 1e       	adc	r3, r25
    1c3e:	4a 1e       	adc	r4, r26
    1c40:	5b 1e       	adc	r5, r27
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	2e 15       	cp	r18, r14
    1c4c:	3f 05       	cpc	r19, r15
    1c4e:	40 07       	cpc	r20, r16
    1c50:	51 07       	cpc	r21, r17
    1c52:	18 f0       	brcs	.+6      	; 0x1c5a <__mulsf3+0xe6>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	dc 01       	movw	r26, r24
    1c5a:	82 0d       	add	r24, r2
    1c5c:	93 1d       	adc	r25, r3
    1c5e:	a4 1d       	adc	r26, r4
    1c60:	b5 1d       	adc	r27, r5
    1c62:	aa 0c       	add	r10, r10
    1c64:	bb 1c       	adc	r11, r11
    1c66:	cc 1c       	adc	r12, r12
    1c68:	dd 1c       	adc	r13, r13
    1c6a:	17 ff       	sbrs	r17, 7
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <__mulsf3+0x10c>
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	26 2e       	mov	r2, r22
    1c72:	31 2c       	mov	r3, r1
    1c74:	41 2c       	mov	r4, r1
    1c76:	51 2c       	mov	r5, r1
    1c78:	a2 28       	or	r10, r2
    1c7a:	b3 28       	or	r11, r3
    1c7c:	c4 28       	or	r12, r4
    1c7e:	d5 28       	or	r13, r5
    1c80:	31 97       	sbiw	r30, 0x01	; 1
    1c82:	49 f0       	breq	.+18     	; 0x1c96 <__mulsf3+0x122>
    1c84:	ee 0c       	add	r14, r14
    1c86:	ff 1c       	adc	r15, r15
    1c88:	00 1f       	adc	r16, r16
    1c8a:	11 1f       	adc	r17, r17
    1c8c:	96 94       	lsr	r9
    1c8e:	87 94       	ror	r8
    1c90:	77 94       	ror	r7
    1c92:	67 94       	ror	r6
    1c94:	c6 cf       	rjmp	.-116    	; 0x1c22 <__mulsf3+0xae>
    1c96:	6b 89       	ldd	r22, Y+19	; 0x13
    1c98:	7c 89       	ldd	r23, Y+20	; 0x14
    1c9a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c9c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c9e:	6e 0f       	add	r22, r30
    1ca0:	7f 1f       	adc	r23, r31
    1ca2:	6e 5f       	subi	r22, 0xFE	; 254
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	6b 8f       	std	Y+27, r22	; 0x1b
    1ca8:	7c 8f       	std	Y+28, r23	; 0x1c
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cae:	7a 89       	ldd	r23, Y+18	; 0x12
    1cb0:	e7 17       	cp	r30, r23
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__mulsf3+0x142>
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	6a 8f       	std	Y+26, r22	; 0x1a
    1cb8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1cba:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1cbc:	10 c0       	rjmp	.+32     	; 0x1cde <__mulsf3+0x16a>
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e1 70       	andi	r30, 0x01	; 1
    1cc2:	f0 70       	andi	r31, 0x00	; 0
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	29 f0       	breq	.+10     	; 0x1cd2 <__mulsf3+0x15e>
    1cc8:	56 95       	lsr	r21
    1cca:	47 95       	ror	r20
    1ccc:	37 95       	ror	r19
    1cce:	27 95       	ror	r18
    1cd0:	50 68       	ori	r21, 0x80	; 128
    1cd2:	b6 95       	lsr	r27
    1cd4:	a7 95       	ror	r26
    1cd6:	97 95       	ror	r25
    1cd8:	87 95       	ror	r24
    1cda:	6f 5f       	subi	r22, 0xFF	; 255
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	b7 fd       	sbrc	r27, 7
    1ce0:	ee cf       	rjmp	.-36     	; 0x1cbe <__mulsf3+0x14a>
    1ce2:	0c c0       	rjmp	.+24     	; 0x1cfc <__mulsf3+0x188>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	57 fd       	sbrc	r21, 7
    1cee:	81 60       	ori	r24, 0x01	; 1
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	44 1f       	adc	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	61 50       	subi	r22, 0x01	; 1
    1cfa:	70 40       	sbci	r23, 0x00	; 0
    1cfc:	80 30       	cpi	r24, 0x00	; 0
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
    1d00:	9e 07       	cpc	r25, r30
    1d02:	e0 e0       	ldi	r30, 0x00	; 0
    1d04:	ae 07       	cpc	r26, r30
    1d06:	e0 e4       	ldi	r30, 0x40	; 64
    1d08:	be 07       	cpc	r27, r30
    1d0a:	60 f3       	brcs	.-40     	; 0x1ce4 <__mulsf3+0x170>
    1d0c:	6b 8f       	std	Y+27, r22	; 0x1b
    1d0e:	7c 8f       	std	Y+28, r23	; 0x1c
    1d10:	6f e7       	ldi	r22, 0x7F	; 127
    1d12:	e6 2e       	mov	r14, r22
    1d14:	f1 2c       	mov	r15, r1
    1d16:	01 2d       	mov	r16, r1
    1d18:	11 2d       	mov	r17, r1
    1d1a:	e8 22       	and	r14, r24
    1d1c:	f9 22       	and	r15, r25
    1d1e:	0a 23       	and	r16, r26
    1d20:	1b 23       	and	r17, r27
    1d22:	60 e4       	ldi	r22, 0x40	; 64
    1d24:	e6 16       	cp	r14, r22
    1d26:	f1 04       	cpc	r15, r1
    1d28:	01 05       	cpc	r16, r1
    1d2a:	11 05       	cpc	r17, r1
    1d2c:	61 f4       	brne	.+24     	; 0x1d46 <__mulsf3+0x1d2>
    1d2e:	87 fd       	sbrc	r24, 7
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <__mulsf3+0x1d2>
    1d32:	21 15       	cp	r18, r1
    1d34:	31 05       	cpc	r19, r1
    1d36:	41 05       	cpc	r20, r1
    1d38:	51 05       	cpc	r21, r1
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <__mulsf3+0x1d2>
    1d3c:	80 5c       	subi	r24, 0xC0	; 192
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	af 4f       	sbci	r26, 0xFF	; 255
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	80 78       	andi	r24, 0x80	; 128
    1d46:	8d 8f       	std	Y+29, r24	; 0x1d
    1d48:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4a:	af 8f       	std	Y+31, r26	; 0x1f
    1d4c:	b8 a3       	std	Y+32, r27	; 0x20
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	89 8f       	std	Y+25, r24	; 0x19
    1d52:	ce 01       	movw	r24, r28
    1d54:	49 96       	adiw	r24, 0x19	; 25
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <__mulsf3+0x1e8>
    1d58:	8f e4       	ldi	r24, 0x4F	; 79
    1d5a:	90 e2       	ldi	r25, 0x20	; 32
    1d5c:	0e 94 16 11 	call	0x222c	; 0x222c <__pack_f>
    1d60:	a0 96       	adiw	r28, 0x20	; 32
    1d62:	e2 e1       	ldi	r30, 0x12	; 18
    1d64:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__>

00001d68 <__divsf3>:
    1d68:	a8 e1       	ldi	r26, 0x18	; 24
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ea eb       	ldi	r30, 0xBA	; 186
    1d6e:	fe e0       	ldi	r31, 0x0E	; 14
    1d70:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x10>
    1d74:	69 83       	std	Y+1, r22	; 0x01
    1d76:	7a 83       	std	Y+2, r23	; 0x02
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	2d 83       	std	Y+5, r18	; 0x05
    1d7e:	3e 83       	std	Y+6, r19	; 0x06
    1d80:	4f 83       	std	Y+7, r20	; 0x07
    1d82:	58 87       	std	Y+8, r21	; 0x08
    1d84:	8e 01       	movw	r16, r28
    1d86:	07 5f       	subi	r16, 0xF7	; 247
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	b8 01       	movw	r22, r16
    1d90:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1d94:	81 e1       	ldi	r24, 0x11	; 17
    1d96:	e8 2e       	mov	r14, r24
    1d98:	f1 2c       	mov	r15, r1
    1d9a:	ec 0e       	add	r14, r28
    1d9c:	fd 1e       	adc	r15, r29
    1d9e:	ce 01       	movw	r24, r28
    1da0:	05 96       	adiw	r24, 0x05	; 5
    1da2:	b7 01       	movw	r22, r14
    1da4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1da8:	99 85       	ldd	r25, Y+9	; 0x09
    1daa:	92 30       	cpi	r25, 0x02	; 2
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <__divsf3+0x48>
    1dae:	83 c0       	rjmp	.+262    	; 0x1eb6 <__divsf3+0x14e>
    1db0:	89 89       	ldd	r24, Y+17	; 0x11
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	08 f4       	brcc	.+2      	; 0x1db8 <__divsf3+0x50>
    1db6:	7b c0       	rjmp	.+246    	; 0x1eae <__divsf3+0x146>
    1db8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1dba:	3a 89       	ldd	r19, Y+18	; 0x12
    1dbc:	23 27       	eor	r18, r19
    1dbe:	2a 87       	std	Y+10, r18	; 0x0a
    1dc0:	94 30       	cpi	r25, 0x04	; 4
    1dc2:	11 f0       	breq	.+4      	; 0x1dc8 <__divsf3+0x60>
    1dc4:	92 30       	cpi	r25, 0x02	; 2
    1dc6:	21 f4       	brne	.+8      	; 0x1dd0 <__divsf3+0x68>
    1dc8:	98 17       	cp	r25, r24
    1dca:	09 f0       	breq	.+2      	; 0x1dce <__divsf3+0x66>
    1dcc:	6c c0       	rjmp	.+216    	; 0x1ea6 <__divsf3+0x13e>
    1dce:	71 c0       	rjmp	.+226    	; 0x1eb2 <__divsf3+0x14a>
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	39 f4       	brne	.+14     	; 0x1de2 <__divsf3+0x7a>
    1dd4:	1d 86       	std	Y+13, r1	; 0x0d
    1dd6:	1e 86       	std	Y+14, r1	; 0x0e
    1dd8:	1f 86       	std	Y+15, r1	; 0x0f
    1dda:	18 8a       	std	Y+16, r1	; 0x10
    1ddc:	1b 86       	std	Y+11, r1	; 0x0b
    1dde:	1c 86       	std	Y+12, r1	; 0x0c
    1de0:	6a c0       	rjmp	.+212    	; 0x1eb6 <__divsf3+0x14e>
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	19 f4       	brne	.+6      	; 0x1dec <__divsf3+0x84>
    1de6:	84 e0       	ldi	r24, 0x04	; 4
    1de8:	89 87       	std	Y+9, r24	; 0x09
    1dea:	65 c0       	rjmp	.+202    	; 0x1eb6 <__divsf3+0x14e>
    1dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df0:	2b 89       	ldd	r18, Y+19	; 0x13
    1df2:	3c 89       	ldd	r19, Y+20	; 0x14
    1df4:	82 1b       	sub	r24, r18
    1df6:	93 0b       	sbc	r25, r19
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
    1dfc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dfe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e00:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e02:	58 89       	ldd	r21, Y+16	; 0x10
    1e04:	ed 88       	ldd	r14, Y+21	; 0x15
    1e06:	fe 88       	ldd	r15, Y+22	; 0x16
    1e08:	0f 89       	ldd	r16, Y+23	; 0x17
    1e0a:	18 8d       	ldd	r17, Y+24	; 0x18
    1e0c:	2e 15       	cp	r18, r14
    1e0e:	3f 05       	cpc	r19, r15
    1e10:	40 07       	cpc	r20, r16
    1e12:	51 07       	cpc	r21, r17
    1e14:	38 f4       	brcc	.+14     	; 0x1e24 <__divsf3+0xbc>
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	44 1f       	adc	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	6f e1       	ldi	r22, 0x1F	; 31
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	a1 2c       	mov	r10, r1
    1e2a:	b1 2c       	mov	r11, r1
    1e2c:	c1 2c       	mov	r12, r1
    1e2e:	a0 e4       	ldi	r26, 0x40	; 64
    1e30:	da 2e       	mov	r13, r26
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	dc 01       	movw	r26, r24
    1e38:	2e 15       	cp	r18, r14
    1e3a:	3f 05       	cpc	r19, r15
    1e3c:	40 07       	cpc	r20, r16
    1e3e:	51 07       	cpc	r21, r17
    1e40:	40 f0       	brcs	.+16     	; 0x1e52 <__divsf3+0xea>
    1e42:	8a 29       	or	r24, r10
    1e44:	9b 29       	or	r25, r11
    1e46:	ac 29       	or	r26, r12
    1e48:	bd 29       	or	r27, r13
    1e4a:	2e 19       	sub	r18, r14
    1e4c:	3f 09       	sbc	r19, r15
    1e4e:	40 0b       	sbc	r20, r16
    1e50:	51 0b       	sbc	r21, r17
    1e52:	d6 94       	lsr	r13
    1e54:	c7 94       	ror	r12
    1e56:	b7 94       	ror	r11
    1e58:	a7 94       	ror	r10
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	44 1f       	adc	r20, r20
    1e60:	55 1f       	adc	r21, r21
    1e62:	61 50       	subi	r22, 0x01	; 1
    1e64:	70 40       	sbci	r23, 0x00	; 0
    1e66:	41 f7       	brne	.-48     	; 0x1e38 <__divsf3+0xd0>
    1e68:	6f e7       	ldi	r22, 0x7F	; 127
    1e6a:	e6 2e       	mov	r14, r22
    1e6c:	f1 2c       	mov	r15, r1
    1e6e:	01 2d       	mov	r16, r1
    1e70:	11 2d       	mov	r17, r1
    1e72:	e8 22       	and	r14, r24
    1e74:	f9 22       	and	r15, r25
    1e76:	0a 23       	and	r16, r26
    1e78:	1b 23       	and	r17, r27
    1e7a:	60 e4       	ldi	r22, 0x40	; 64
    1e7c:	e6 16       	cp	r14, r22
    1e7e:	f1 04       	cpc	r15, r1
    1e80:	01 05       	cpc	r16, r1
    1e82:	11 05       	cpc	r17, r1
    1e84:	61 f4       	brne	.+24     	; 0x1e9e <__divsf3+0x136>
    1e86:	87 fd       	sbrc	r24, 7
    1e88:	0a c0       	rjmp	.+20     	; 0x1e9e <__divsf3+0x136>
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	41 05       	cpc	r20, r1
    1e90:	51 05       	cpc	r21, r1
    1e92:	29 f0       	breq	.+10     	; 0x1e9e <__divsf3+0x136>
    1e94:	80 5c       	subi	r24, 0xC0	; 192
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	af 4f       	sbci	r26, 0xFF	; 255
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	80 78       	andi	r24, 0x80	; 128
    1e9e:	8d 87       	std	Y+13, r24	; 0x0d
    1ea0:	9e 87       	std	Y+14, r25	; 0x0e
    1ea2:	af 87       	std	Y+15, r26	; 0x0f
    1ea4:	b8 8b       	std	Y+16, r27	; 0x10
    1ea6:	8e 01       	movw	r16, r28
    1ea8:	07 5f       	subi	r16, 0xF7	; 247
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <__divsf3+0x14e>
    1eae:	87 01       	movw	r16, r14
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <__divsf3+0x14e>
    1eb2:	0f e4       	ldi	r16, 0x4F	; 79
    1eb4:	10 e2       	ldi	r17, 0x20	; 32
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	0e 94 16 11 	call	0x222c	; 0x222c <__pack_f>
    1ebc:	68 96       	adiw	r28, 0x18	; 24
    1ebe:	ea e0       	ldi	r30, 0x0A	; 10
    1ec0:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x10>

00001ec4 <__gtsf2>:
    1ec4:	a8 e1       	ldi	r26, 0x18	; 24
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e8 e6       	ldi	r30, 0x68	; 104
    1eca:	ff e0       	ldi	r31, 0x0F	; 15
    1ecc:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x18>
    1ed0:	69 83       	std	Y+1, r22	; 0x01
    1ed2:	7a 83       	std	Y+2, r23	; 0x02
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	2d 83       	std	Y+5, r18	; 0x05
    1eda:	3e 83       	std	Y+6, r19	; 0x06
    1edc:	4f 83       	std	Y+7, r20	; 0x07
    1ede:	58 87       	std	Y+8, r21	; 0x08
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	07 5f       	subi	r16, 0xF7	; 247
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	b8 01       	movw	r22, r16
    1eec:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1ef0:	81 e1       	ldi	r24, 0x11	; 17
    1ef2:	e8 2e       	mov	r14, r24
    1ef4:	f1 2c       	mov	r15, r1
    1ef6:	ec 0e       	add	r14, r28
    1ef8:	fd 1e       	adc	r15, r29
    1efa:	ce 01       	movw	r24, r28
    1efc:	05 96       	adiw	r24, 0x05	; 5
    1efe:	b7 01       	movw	r22, r14
    1f00:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	40 f0       	brcs	.+16     	; 0x1f1a <__gtsf2+0x56>
    1f0a:	89 89       	ldd	r24, Y+17	; 0x11
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	28 f0       	brcs	.+10     	; 0x1f1a <__gtsf2+0x56>
    1f10:	c8 01       	movw	r24, r16
    1f12:	b7 01       	movw	r22, r14
    1f14:	0e 94 4d 12 	call	0x249a	; 0x249a <__fpcmp_parts_f>
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <__gtsf2+0x58>
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	68 96       	adiw	r28, 0x18	; 24
    1f1e:	e6 e0       	ldi	r30, 0x06	; 6
    1f20:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00001f24 <__gesf2>:
    1f24:	a8 e1       	ldi	r26, 0x18	; 24
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e8 e9       	ldi	r30, 0x98	; 152
    1f2a:	ff e0       	ldi	r31, 0x0F	; 15
    1f2c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x18>
    1f30:	69 83       	std	Y+1, r22	; 0x01
    1f32:	7a 83       	std	Y+2, r23	; 0x02
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	2d 83       	std	Y+5, r18	; 0x05
    1f3a:	3e 83       	std	Y+6, r19	; 0x06
    1f3c:	4f 83       	std	Y+7, r20	; 0x07
    1f3e:	58 87       	std	Y+8, r21	; 0x08
    1f40:	8e 01       	movw	r16, r28
    1f42:	07 5f       	subi	r16, 0xF7	; 247
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	b8 01       	movw	r22, r16
    1f4c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1f50:	81 e1       	ldi	r24, 0x11	; 17
    1f52:	e8 2e       	mov	r14, r24
    1f54:	f1 2c       	mov	r15, r1
    1f56:	ec 0e       	add	r14, r28
    1f58:	fd 1e       	adc	r15, r29
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	05 96       	adiw	r24, 0x05	; 5
    1f5e:	b7 01       	movw	r22, r14
    1f60:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	40 f0       	brcs	.+16     	; 0x1f7a <__gesf2+0x56>
    1f6a:	89 89       	ldd	r24, Y+17	; 0x11
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	28 f0       	brcs	.+10     	; 0x1f7a <__gesf2+0x56>
    1f70:	c8 01       	movw	r24, r16
    1f72:	b7 01       	movw	r22, r14
    1f74:	0e 94 4d 12 	call	0x249a	; 0x249a <__fpcmp_parts_f>
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <__gesf2+0x58>
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	68 96       	adiw	r28, 0x18	; 24
    1f7e:	e6 e0       	ldi	r30, 0x06	; 6
    1f80:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00001f84 <__ltsf2>:
    1f84:	a8 e1       	ldi	r26, 0x18	; 24
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 ec       	ldi	r30, 0xC8	; 200
    1f8a:	ff e0       	ldi	r31, 0x0F	; 15
    1f8c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x18>
    1f90:	69 83       	std	Y+1, r22	; 0x01
    1f92:	7a 83       	std	Y+2, r23	; 0x02
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	2d 83       	std	Y+5, r18	; 0x05
    1f9a:	3e 83       	std	Y+6, r19	; 0x06
    1f9c:	4f 83       	std	Y+7, r20	; 0x07
    1f9e:	58 87       	std	Y+8, r21	; 0x08
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	07 5f       	subi	r16, 0xF7	; 247
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	b8 01       	movw	r22, r16
    1fac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1fb0:	81 e1       	ldi	r24, 0x11	; 17
    1fb2:	e8 2e       	mov	r14, r24
    1fb4:	f1 2c       	mov	r15, r1
    1fb6:	ec 0e       	add	r14, r28
    1fb8:	fd 1e       	adc	r15, r29
    1fba:	ce 01       	movw	r24, r28
    1fbc:	05 96       	adiw	r24, 0x05	; 5
    1fbe:	b7 01       	movw	r22, r14
    1fc0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    1fc4:	89 85       	ldd	r24, Y+9	; 0x09
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	40 f0       	brcs	.+16     	; 0x1fda <__ltsf2+0x56>
    1fca:	89 89       	ldd	r24, Y+17	; 0x11
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	28 f0       	brcs	.+10     	; 0x1fda <__ltsf2+0x56>
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	0e 94 4d 12 	call	0x249a	; 0x249a <__fpcmp_parts_f>
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <__ltsf2+0x58>
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	68 96       	adiw	r28, 0x18	; 24
    1fde:	e6 e0       	ldi	r30, 0x06	; 6
    1fe0:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00001fe4 <__fixsfsi>:
    1fe4:	ac e0       	ldi	r26, 0x0C	; 12
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e8 ef       	ldi	r30, 0xF8	; 248
    1fea:	ff e0       	ldi	r31, 0x0F	; 15
    1fec:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__prologue_saves__+0x20>
    1ff0:	69 83       	std	Y+1, r22	; 0x01
    1ff2:	7a 83       	std	Y+2, r23	; 0x02
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	be 01       	movw	r22, r28
    1ffe:	6b 5f       	subi	r22, 0xFB	; 251
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__unpack_f>
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	81 f1       	breq	.+96     	; 0x206c <__fixsfsi+0x88>
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	70 f1       	brcs	.+92     	; 0x206c <__fixsfsi+0x88>
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	21 f4       	brne	.+8      	; 0x201c <__fixsfsi+0x38>
    2014:	8e 81       	ldd	r24, Y+6	; 0x06
    2016:	88 23       	and	r24, r24
    2018:	69 f1       	breq	.+90     	; 0x2074 <__fixsfsi+0x90>
    201a:	0a c0       	rjmp	.+20     	; 0x2030 <__fixsfsi+0x4c>
    201c:	2f 81       	ldd	r18, Y+7	; 0x07
    201e:	38 85       	ldd	r19, Y+8	; 0x08
    2020:	37 fd       	sbrc	r19, 7
    2022:	24 c0       	rjmp	.+72     	; 0x206c <__fixsfsi+0x88>
    2024:	6e 81       	ldd	r22, Y+6	; 0x06
    2026:	2f 31       	cpi	r18, 0x1F	; 31
    2028:	31 05       	cpc	r19, r1
    202a:	3c f0       	brlt	.+14     	; 0x203a <__fixsfsi+0x56>
    202c:	66 23       	and	r22, r22
    202e:	11 f1       	breq	.+68     	; 0x2074 <__fixsfsi+0x90>
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e8       	ldi	r21, 0x80	; 128
    2038:	21 c0       	rjmp	.+66     	; 0x207c <__fixsfsi+0x98>
    203a:	8e e1       	ldi	r24, 0x1E	; 30
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	82 1b       	sub	r24, r18
    2040:	93 0b       	sbc	r25, r19
    2042:	29 85       	ldd	r18, Y+9	; 0x09
    2044:	3a 85       	ldd	r19, Y+10	; 0x0a
    2046:	4b 85       	ldd	r20, Y+11	; 0x0b
    2048:	5c 85       	ldd	r21, Y+12	; 0x0c
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <__fixsfsi+0x70>
    204c:	56 95       	lsr	r21
    204e:	47 95       	ror	r20
    2050:	37 95       	ror	r19
    2052:	27 95       	ror	r18
    2054:	8a 95       	dec	r24
    2056:	d2 f7       	brpl	.-12     	; 0x204c <__fixsfsi+0x68>
    2058:	66 23       	and	r22, r22
    205a:	81 f0       	breq	.+32     	; 0x207c <__fixsfsi+0x98>
    205c:	50 95       	com	r21
    205e:	40 95       	com	r20
    2060:	30 95       	com	r19
    2062:	21 95       	neg	r18
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	4f 4f       	sbci	r20, 0xFF	; 255
    2068:	5f 4f       	sbci	r21, 0xFF	; 255
    206a:	08 c0       	rjmp	.+16     	; 0x207c <__fixsfsi+0x98>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	a9 01       	movw	r20, r18
    2072:	04 c0       	rjmp	.+8      	; 0x207c <__fixsfsi+0x98>
    2074:	2f ef       	ldi	r18, 0xFF	; 255
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    2078:	4f ef       	ldi	r20, 0xFF	; 255
    207a:	5f e7       	ldi	r21, 0x7F	; 127
    207c:	b9 01       	movw	r22, r18
    207e:	ca 01       	movw	r24, r20
    2080:	2c 96       	adiw	r28, 0x0c	; 12
    2082:	e2 e0       	ldi	r30, 0x02	; 2
    2084:	0c 94 37 13 	jmp	0x266e	; 0x266e <__epilogue_restores__+0x20>

00002088 <__floatunsisf>:
    2088:	a8 e0       	ldi	r26, 0x08	; 8
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	ea e4       	ldi	r30, 0x4A	; 74
    208e:	f0 e1       	ldi	r31, 0x10	; 16
    2090:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__prologue_saves__+0x14>
    2094:	7b 01       	movw	r14, r22
    2096:	8c 01       	movw	r16, r24
    2098:	1a 82       	std	Y+2, r1	; 0x02
    209a:	61 15       	cp	r22, r1
    209c:	71 05       	cpc	r23, r1
    209e:	81 05       	cpc	r24, r1
    20a0:	91 05       	cpc	r25, r1
    20a2:	19 f4       	brne	.+6      	; 0x20aa <__floatunsisf+0x22>
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	5f c0       	rjmp	.+190    	; 0x2168 <__floatunsisf+0xe0>
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	8e e1       	ldi	r24, 0x1E	; 30
    20b0:	c8 2e       	mov	r12, r24
    20b2:	d1 2c       	mov	r13, r1
    20b4:	cb 82       	std	Y+3, r12	; 0x03
    20b6:	dc 82       	std	Y+4, r13	; 0x04
    20b8:	ed 82       	std	Y+5, r14	; 0x05
    20ba:	fe 82       	std	Y+6, r15	; 0x06
    20bc:	0f 83       	std	Y+7, r16	; 0x07
    20be:	18 87       	std	Y+8, r17	; 0x08
    20c0:	c8 01       	movw	r24, r16
    20c2:	b7 01       	movw	r22, r14
    20c4:	0e 94 bc 10 	call	0x2178	; 0x2178 <__clzsi2>
    20c8:	fc 01       	movw	r30, r24
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	f7 ff       	sbrs	r31, 7
    20ce:	3a c0       	rjmp	.+116    	; 0x2144 <__floatunsisf+0xbc>
    20d0:	aa 27       	eor	r26, r26
    20d2:	bb 27       	eor	r27, r27
    20d4:	ae 1b       	sub	r26, r30
    20d6:	bf 0b       	sbc	r27, r31
    20d8:	21 e0       	ldi	r18, 0x01	; 1
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	0a 2e       	mov	r0, r26
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <__floatunsisf+0x64>
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	44 1f       	adc	r20, r20
    20ea:	55 1f       	adc	r21, r21
    20ec:	0a 94       	dec	r0
    20ee:	d2 f7       	brpl	.-12     	; 0x20e4 <__floatunsisf+0x5c>
    20f0:	21 50       	subi	r18, 0x01	; 1
    20f2:	30 40       	sbci	r19, 0x00	; 0
    20f4:	40 40       	sbci	r20, 0x00	; 0
    20f6:	50 40       	sbci	r21, 0x00	; 0
    20f8:	2e 21       	and	r18, r14
    20fa:	3f 21       	and	r19, r15
    20fc:	40 23       	and	r20, r16
    20fe:	51 23       	and	r21, r17
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	21 15       	cp	r18, r1
    210a:	31 05       	cpc	r19, r1
    210c:	41 05       	cpc	r20, r1
    210e:	51 05       	cpc	r21, r1
    2110:	19 f4       	brne	.+6      	; 0x2118 <__floatunsisf+0x90>
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	cb 01       	movw	r24, r22
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <__floatunsisf+0x9a>
    211a:	16 95       	lsr	r17
    211c:	07 95       	ror	r16
    211e:	f7 94       	ror	r15
    2120:	e7 94       	ror	r14
    2122:	aa 95       	dec	r26
    2124:	d2 f7       	brpl	.-12     	; 0x211a <__floatunsisf+0x92>
    2126:	e6 2a       	or	r14, r22
    2128:	f7 2a       	or	r15, r23
    212a:	08 2b       	or	r16, r24
    212c:	19 2b       	or	r17, r25
    212e:	ed 82       	std	Y+5, r14	; 0x05
    2130:	fe 82       	std	Y+6, r15	; 0x06
    2132:	0f 83       	std	Y+7, r16	; 0x07
    2134:	18 87       	std	Y+8, r17	; 0x08
    2136:	8e e1       	ldi	r24, 0x1E	; 30
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	8e 1b       	sub	r24, r30
    213c:	9f 0b       	sbc	r25, r31
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	12 c0       	rjmp	.+36     	; 0x2168 <__floatunsisf+0xe0>
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	81 f0       	breq	.+32     	; 0x2168 <__floatunsisf+0xe0>
    2148:	0e 2e       	mov	r0, r30
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <__floatunsisf+0xcc>
    214c:	ee 0c       	add	r14, r14
    214e:	ff 1c       	adc	r15, r15
    2150:	00 1f       	adc	r16, r16
    2152:	11 1f       	adc	r17, r17
    2154:	0a 94       	dec	r0
    2156:	d2 f7       	brpl	.-12     	; 0x214c <__floatunsisf+0xc4>
    2158:	ed 82       	std	Y+5, r14	; 0x05
    215a:	fe 82       	std	Y+6, r15	; 0x06
    215c:	0f 83       	std	Y+7, r16	; 0x07
    215e:	18 87       	std	Y+8, r17	; 0x08
    2160:	ce 1a       	sub	r12, r30
    2162:	df 0a       	sbc	r13, r31
    2164:	cb 82       	std	Y+3, r12	; 0x03
    2166:	dc 82       	std	Y+4, r13	; 0x04
    2168:	ce 01       	movw	r24, r28
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	0e 94 16 11 	call	0x222c	; 0x222c <__pack_f>
    2170:	28 96       	adiw	r28, 0x08	; 8
    2172:	e8 e0       	ldi	r30, 0x08	; 8
    2174:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x14>

00002178 <__clzsi2>:
    2178:	af 92       	push	r10
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	7b 01       	movw	r14, r22
    218a:	8c 01       	movw	r16, r24
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	e8 16       	cp	r14, r24
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	f8 06       	cpc	r15, r24
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	08 07       	cpc	r16, r24
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	18 07       	cpc	r17, r24
    219c:	58 f4       	brcc	.+22     	; 0x21b4 <__clzsi2+0x3c>
    219e:	ef ef       	ldi	r30, 0xFF	; 255
    21a0:	ee 16       	cp	r14, r30
    21a2:	f1 04       	cpc	r15, r1
    21a4:	01 05       	cpc	r16, r1
    21a6:	11 05       	cpc	r17, r1
    21a8:	09 f0       	breq	.+2      	; 0x21ac <__clzsi2+0x34>
    21aa:	90 f4       	brcc	.+36     	; 0x21d0 <__clzsi2+0x58>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	dc 01       	movw	r26, r24
    21b2:	17 c0       	rjmp	.+46     	; 0x21e2 <__clzsi2+0x6a>
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	ef 16       	cp	r14, r31
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	ff 06       	cpc	r15, r31
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	0f 07       	cpc	r16, r31
    21c0:	f1 e0       	ldi	r31, 0x01	; 1
    21c2:	1f 07       	cpc	r17, r31
    21c4:	50 f4       	brcc	.+20     	; 0x21da <__clzsi2+0x62>
    21c6:	80 e1       	ldi	r24, 0x10	; 16
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e0       	ldi	r26, 0x00	; 0
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	09 c0       	rjmp	.+18     	; 0x21e2 <__clzsi2+0x6a>
    21d0:	88 e0       	ldi	r24, 0x08	; 8
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <__clzsi2+0x6a>
    21da:	88 e1       	ldi	r24, 0x18	; 24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	20 e2       	ldi	r18, 0x20	; 32
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	28 1b       	sub	r18, r24
    21ec:	39 0b       	sbc	r19, r25
    21ee:	4a 0b       	sbc	r20, r26
    21f0:	5b 0b       	sbc	r21, r27
    21f2:	57 01       	movw	r10, r14
    21f4:	68 01       	movw	r12, r16
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__clzsi2+0x88>
    21f8:	d6 94       	lsr	r13
    21fa:	c7 94       	ror	r12
    21fc:	b7 94       	ror	r11
    21fe:	a7 94       	ror	r10
    2200:	8a 95       	dec	r24
    2202:	d2 f7       	brpl	.-12     	; 0x21f8 <__clzsi2+0x80>
    2204:	d6 01       	movw	r26, r12
    2206:	c5 01       	movw	r24, r10
    2208:	89 5a       	subi	r24, 0xA9	; 169
    220a:	9f 4d       	sbci	r25, 0xDF	; 223
    220c:	fc 01       	movw	r30, r24
    220e:	80 81       	ld	r24, Z
    2210:	28 1b       	sub	r18, r24
    2212:	31 09       	sbc	r19, r1
    2214:	41 09       	sbc	r20, r1
    2216:	51 09       	sbc	r21, r1
    2218:	c9 01       	movw	r24, r18
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	bf 90       	pop	r11
    2228:	af 90       	pop	r10
    222a:	08 95       	ret

0000222c <__pack_f>:
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	fc 01       	movw	r30, r24
    223a:	24 81       	ldd	r18, Z+4	; 0x04
    223c:	35 81       	ldd	r19, Z+5	; 0x05
    223e:	46 81       	ldd	r20, Z+6	; 0x06
    2240:	57 81       	ldd	r21, Z+7	; 0x07
    2242:	61 81       	ldd	r22, Z+1	; 0x01
    2244:	80 81       	ld	r24, Z
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	20 f4       	brcc	.+8      	; 0x2252 <__pack_f+0x26>
    224a:	40 61       	ori	r20, 0x10	; 16
    224c:	ef ef       	ldi	r30, 0xFF	; 255
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	a3 c0       	rjmp	.+326    	; 0x2398 <__pack_f+0x16c>
    2252:	84 30       	cpi	r24, 0x04	; 4
    2254:	09 f4       	brne	.+2      	; 0x2258 <__pack_f+0x2c>
    2256:	9b c0       	rjmp	.+310    	; 0x238e <__pack_f+0x162>
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	09 f4       	brne	.+2      	; 0x225e <__pack_f+0x32>
    225c:	92 c0       	rjmp	.+292    	; 0x2382 <__pack_f+0x156>
    225e:	21 15       	cp	r18, r1
    2260:	31 05       	cpc	r19, r1
    2262:	41 05       	cpc	r20, r1
    2264:	51 05       	cpc	r21, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <__pack_f+0x3e>
    2268:	8f c0       	rjmp	.+286    	; 0x2388 <__pack_f+0x15c>
    226a:	02 80       	ldd	r0, Z+2	; 0x02
    226c:	f3 81       	ldd	r31, Z+3	; 0x03
    226e:	e0 2d       	mov	r30, r0
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	e2 38       	cpi	r30, 0x82	; 130
    2274:	f8 07       	cpc	r31, r24
    2276:	0c f0       	brlt	.+2      	; 0x227a <__pack_f+0x4e>
    2278:	5a c0       	rjmp	.+180    	; 0x232e <__pack_f+0x102>
    227a:	c2 e8       	ldi	r28, 0x82	; 130
    227c:	df ef       	ldi	r29, 0xFF	; 255
    227e:	ce 1b       	sub	r28, r30
    2280:	df 0b       	sbc	r29, r31
    2282:	ca 31       	cpi	r28, 0x1A	; 26
    2284:	d1 05       	cpc	r29, r1
    2286:	6c f5       	brge	.+90     	; 0x22e2 <__pack_f+0xb6>
    2288:	79 01       	movw	r14, r18
    228a:	8a 01       	movw	r16, r20
    228c:	0c 2e       	mov	r0, r28
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <__pack_f+0x6c>
    2290:	16 95       	lsr	r17
    2292:	07 95       	ror	r16
    2294:	f7 94       	ror	r15
    2296:	e7 94       	ror	r14
    2298:	0a 94       	dec	r0
    229a:	d2 f7       	brpl	.-12     	; 0x2290 <__pack_f+0x64>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	0c 2e       	mov	r0, r28
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <__pack_f+0x84>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	aa 1f       	adc	r26, r26
    22ae:	bb 1f       	adc	r27, r27
    22b0:	0a 94       	dec	r0
    22b2:	d2 f7       	brpl	.-12     	; 0x22a8 <__pack_f+0x7c>
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	a1 09       	sbc	r26, r1
    22b8:	b1 09       	sbc	r27, r1
    22ba:	82 23       	and	r24, r18
    22bc:	93 23       	and	r25, r19
    22be:	a4 23       	and	r26, r20
    22c0:	b5 23       	and	r27, r21
    22c2:	21 e0       	ldi	r18, 0x01	; 1
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	a1 05       	cpc	r26, r1
    22ce:	b1 05       	cpc	r27, r1
    22d0:	19 f4       	brne	.+6      	; 0x22d8 <__pack_f+0xac>
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	2e 29       	or	r18, r14
    22da:	3f 29       	or	r19, r15
    22dc:	40 2b       	or	r20, r16
    22de:	51 2b       	or	r21, r17
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <__pack_f+0xbc>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	a9 01       	movw	r20, r18
    22e8:	da 01       	movw	r26, r20
    22ea:	c9 01       	movw	r24, r18
    22ec:	8f 77       	andi	r24, 0x7F	; 127
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	a0 70       	andi	r26, 0x00	; 0
    22f2:	b0 70       	andi	r27, 0x00	; 0
    22f4:	80 34       	cpi	r24, 0x40	; 64
    22f6:	91 05       	cpc	r25, r1
    22f8:	a1 05       	cpc	r26, r1
    22fa:	b1 05       	cpc	r27, r1
    22fc:	39 f4       	brne	.+14     	; 0x230c <__pack_f+0xe0>
    22fe:	27 ff       	sbrs	r18, 7
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <__pack_f+0xe8>
    2302:	20 5c       	subi	r18, 0xC0	; 192
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	4f 4f       	sbci	r20, 0xFF	; 255
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <__pack_f+0xe8>
    230c:	21 5c       	subi	r18, 0xC1	; 193
    230e:	3f 4f       	sbci	r19, 0xFF	; 255
    2310:	4f 4f       	sbci	r20, 0xFF	; 255
    2312:	5f 4f       	sbci	r21, 0xFF	; 255
    2314:	e1 e0       	ldi	r30, 0x01	; 1
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	20 30       	cpi	r18, 0x00	; 0
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	38 07       	cpc	r19, r24
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	48 07       	cpc	r20, r24
    2322:	80 e4       	ldi	r24, 0x40	; 64
    2324:	58 07       	cpc	r21, r24
    2326:	28 f5       	brcc	.+74     	; 0x2372 <__pack_f+0x146>
    2328:	e0 e0       	ldi	r30, 0x00	; 0
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	22 c0       	rjmp	.+68     	; 0x2372 <__pack_f+0x146>
    232e:	e0 38       	cpi	r30, 0x80	; 128
    2330:	f1 05       	cpc	r31, r1
    2332:	6c f5       	brge	.+90     	; 0x238e <__pack_f+0x162>
    2334:	e1 58       	subi	r30, 0x81	; 129
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	da 01       	movw	r26, r20
    233a:	c9 01       	movw	r24, r18
    233c:	8f 77       	andi	r24, 0x7F	; 127
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	a0 70       	andi	r26, 0x00	; 0
    2342:	b0 70       	andi	r27, 0x00	; 0
    2344:	80 34       	cpi	r24, 0x40	; 64
    2346:	91 05       	cpc	r25, r1
    2348:	a1 05       	cpc	r26, r1
    234a:	b1 05       	cpc	r27, r1
    234c:	39 f4       	brne	.+14     	; 0x235c <__pack_f+0x130>
    234e:	27 ff       	sbrs	r18, 7
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <__pack_f+0x138>
    2352:	20 5c       	subi	r18, 0xC0	; 192
    2354:	3f 4f       	sbci	r19, 0xFF	; 255
    2356:	4f 4f       	sbci	r20, 0xFF	; 255
    2358:	5f 4f       	sbci	r21, 0xFF	; 255
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <__pack_f+0x138>
    235c:	21 5c       	subi	r18, 0xC1	; 193
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	4f 4f       	sbci	r20, 0xFF	; 255
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	57 ff       	sbrs	r21, 7
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <__pack_f+0x146>
    2368:	56 95       	lsr	r21
    236a:	47 95       	ror	r20
    236c:	37 95       	ror	r19
    236e:	27 95       	ror	r18
    2370:	31 96       	adiw	r30, 0x01	; 1
    2372:	87 e0       	ldi	r24, 0x07	; 7
    2374:	56 95       	lsr	r21
    2376:	47 95       	ror	r20
    2378:	37 95       	ror	r19
    237a:	27 95       	ror	r18
    237c:	8a 95       	dec	r24
    237e:	d1 f7       	brne	.-12     	; 0x2374 <__pack_f+0x148>
    2380:	0b c0       	rjmp	.+22     	; 0x2398 <__pack_f+0x16c>
    2382:	e0 e0       	ldi	r30, 0x00	; 0
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	05 c0       	rjmp	.+10     	; 0x2392 <__pack_f+0x166>
    2388:	e0 e0       	ldi	r30, 0x00	; 0
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <__pack_f+0x16c>
    238e:	ef ef       	ldi	r30, 0xFF	; 255
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	8e 2f       	mov	r24, r30
    239a:	87 95       	ror	r24
    239c:	88 27       	eor	r24, r24
    239e:	87 95       	ror	r24
    23a0:	94 2f       	mov	r25, r20
    23a2:	9f 77       	andi	r25, 0x7F	; 127
    23a4:	67 95       	ror	r22
    23a6:	66 27       	eor	r22, r22
    23a8:	67 95       	ror	r22
    23aa:	e6 95       	lsr	r30
    23ac:	e2 2e       	mov	r14, r18
    23ae:	a9 2f       	mov	r26, r25
    23b0:	a8 2b       	or	r26, r24
    23b2:	fe 2f       	mov	r31, r30
    23b4:	f6 2b       	or	r31, r22
    23b6:	62 2f       	mov	r22, r18
    23b8:	73 2f       	mov	r23, r19
    23ba:	8a 2f       	mov	r24, r26
    23bc:	9f 2f       	mov	r25, r31
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	e6 e0       	ldi	r30, 0x06	; 6
    23c4:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000023c8 <__unpack_f>:
    23c8:	dc 01       	movw	r26, r24
    23ca:	fb 01       	movw	r30, r22
    23cc:	2c 91       	ld	r18, X
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	3c 91       	ld	r19, X
    23d2:	11 97       	sbiw	r26, 0x01	; 1
    23d4:	12 96       	adiw	r26, 0x02	; 2
    23d6:	8c 91       	ld	r24, X
    23d8:	12 97       	sbiw	r26, 0x02	; 2
    23da:	48 2f       	mov	r20, r24
    23dc:	4f 77       	andi	r20, 0x7F	; 127
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	98 2f       	mov	r25, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	99 27       	eor	r25, r25
    23e6:	99 1f       	adc	r25, r25
    23e8:	13 96       	adiw	r26, 0x03	; 3
    23ea:	6c 91       	ld	r22, X
    23ec:	13 97       	sbiw	r26, 0x03	; 3
    23ee:	86 2f       	mov	r24, r22
    23f0:	88 0f       	add	r24, r24
    23f2:	89 2b       	or	r24, r25
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	66 1f       	adc	r22, r22
    23f8:	66 27       	eor	r22, r22
    23fa:	66 1f       	adc	r22, r22
    23fc:	61 83       	std	Z+1, r22	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	39 f5       	brne	.+78     	; 0x2450 <__unpack_f+0x88>
    2402:	21 15       	cp	r18, r1
    2404:	31 05       	cpc	r19, r1
    2406:	41 05       	cpc	r20, r1
    2408:	51 05       	cpc	r21, r1
    240a:	11 f4       	brne	.+4      	; 0x2410 <__unpack_f+0x48>
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	29 c0       	rjmp	.+82     	; 0x2462 <__unpack_f+0x9a>
    2410:	82 e8       	ldi	r24, 0x82	; 130
    2412:	9f ef       	ldi	r25, 0xFF	; 255
    2414:	82 83       	std	Z+2, r24	; 0x02
    2416:	93 83       	std	Z+3, r25	; 0x03
    2418:	67 e0       	ldi	r22, 0x07	; 7
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	44 1f       	adc	r20, r20
    2420:	55 1f       	adc	r21, r21
    2422:	6a 95       	dec	r22
    2424:	d1 f7       	brne	.-12     	; 0x241a <__unpack_f+0x52>
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	80 83       	st	Z, r24
    242a:	09 c0       	rjmp	.+18     	; 0x243e <__unpack_f+0x76>
    242c:	22 0f       	add	r18, r18
    242e:	33 1f       	adc	r19, r19
    2430:	44 1f       	adc	r20, r20
    2432:	55 1f       	adc	r21, r21
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	93 83       	std	Z+3, r25	; 0x03
    243e:	20 30       	cpi	r18, 0x00	; 0
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	38 07       	cpc	r19, r24
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	48 07       	cpc	r20, r24
    2448:	80 e4       	ldi	r24, 0x40	; 64
    244a:	58 07       	cpc	r21, r24
    244c:	78 f3       	brcs	.-34     	; 0x242c <__unpack_f+0x64>
    244e:	20 c0       	rjmp	.+64     	; 0x2490 <__unpack_f+0xc8>
    2450:	8f 3f       	cpi	r24, 0xFF	; 255
    2452:	91 05       	cpc	r25, r1
    2454:	79 f4       	brne	.+30     	; 0x2474 <__unpack_f+0xac>
    2456:	21 15       	cp	r18, r1
    2458:	31 05       	cpc	r19, r1
    245a:	41 05       	cpc	r20, r1
    245c:	51 05       	cpc	r21, r1
    245e:	19 f4       	brne	.+6      	; 0x2466 <__unpack_f+0x9e>
    2460:	84 e0       	ldi	r24, 0x04	; 4
    2462:	80 83       	st	Z, r24
    2464:	08 95       	ret
    2466:	44 ff       	sbrs	r20, 4
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <__unpack_f+0xa8>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 83       	st	Z, r24
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <__unpack_f+0xc8>
    2470:	10 82       	st	Z, r1
    2472:	0e c0       	rjmp	.+28     	; 0x2490 <__unpack_f+0xc8>
    2474:	8f 57       	subi	r24, 0x7F	; 127
    2476:	90 40       	sbci	r25, 0x00	; 0
    2478:	82 83       	std	Z+2, r24	; 0x02
    247a:	93 83       	std	Z+3, r25	; 0x03
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	80 83       	st	Z, r24
    2480:	87 e0       	ldi	r24, 0x07	; 7
    2482:	22 0f       	add	r18, r18
    2484:	33 1f       	adc	r19, r19
    2486:	44 1f       	adc	r20, r20
    2488:	55 1f       	adc	r21, r21
    248a:	8a 95       	dec	r24
    248c:	d1 f7       	brne	.-12     	; 0x2482 <__unpack_f+0xba>
    248e:	50 64       	ori	r21, 0x40	; 64
    2490:	24 83       	std	Z+4, r18	; 0x04
    2492:	35 83       	std	Z+5, r19	; 0x05
    2494:	46 83       	std	Z+6, r20	; 0x06
    2496:	57 83       	std	Z+7, r21	; 0x07
    2498:	08 95       	ret

0000249a <__fpcmp_parts_f>:
    249a:	fc 01       	movw	r30, r24
    249c:	db 01       	movw	r26, r22
    249e:	90 81       	ld	r25, Z
    24a0:	92 30       	cpi	r25, 0x02	; 2
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <__fpcmp_parts_f+0xc>
    24a4:	49 c0       	rjmp	.+146    	; 0x2538 <__fpcmp_parts_f+0x9e>
    24a6:	8c 91       	ld	r24, X
    24a8:	82 30       	cpi	r24, 0x02	; 2
    24aa:	08 f4       	brcc	.+2      	; 0x24ae <__fpcmp_parts_f+0x14>
    24ac:	45 c0       	rjmp	.+138    	; 0x2538 <__fpcmp_parts_f+0x9e>
    24ae:	94 30       	cpi	r25, 0x04	; 4
    24b0:	51 f4       	brne	.+20     	; 0x24c6 <__fpcmp_parts_f+0x2c>
    24b2:	61 81       	ldd	r22, Z+1	; 0x01
    24b4:	84 30       	cpi	r24, 0x04	; 4
    24b6:	b1 f5       	brne	.+108    	; 0x2524 <__fpcmp_parts_f+0x8a>
    24b8:	11 96       	adiw	r26, 0x01	; 1
    24ba:	2c 91       	ld	r18, X
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	26 1b       	sub	r18, r22
    24c2:	31 09       	sbc	r19, r1
    24c4:	41 c0       	rjmp	.+130    	; 0x2548 <__fpcmp_parts_f+0xae>
    24c6:	84 30       	cpi	r24, 0x04	; 4
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <__fpcmp_parts_f+0x38>
    24ca:	92 30       	cpi	r25, 0x02	; 2
    24cc:	41 f4       	brne	.+16     	; 0x24de <__fpcmp_parts_f+0x44>
    24ce:	82 30       	cpi	r24, 0x02	; 2
    24d0:	b1 f1       	breq	.+108    	; 0x253e <__fpcmp_parts_f+0xa4>
    24d2:	11 96       	adiw	r26, 0x01	; 1
    24d4:	8c 91       	ld	r24, X
    24d6:	11 97       	sbiw	r26, 0x01	; 1
    24d8:	88 23       	and	r24, r24
    24da:	a1 f1       	breq	.+104    	; 0x2544 <__fpcmp_parts_f+0xaa>
    24dc:	2d c0       	rjmp	.+90     	; 0x2538 <__fpcmp_parts_f+0x9e>
    24de:	61 81       	ldd	r22, Z+1	; 0x01
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	01 f1       	breq	.+64     	; 0x2524 <__fpcmp_parts_f+0x8a>
    24e4:	11 96       	adiw	r26, 0x01	; 1
    24e6:	8c 91       	ld	r24, X
    24e8:	11 97       	sbiw	r26, 0x01	; 1
    24ea:	68 17       	cp	r22, r24
    24ec:	d9 f4       	brne	.+54     	; 0x2524 <__fpcmp_parts_f+0x8a>
    24ee:	22 81       	ldd	r18, Z+2	; 0x02
    24f0:	33 81       	ldd	r19, Z+3	; 0x03
    24f2:	12 96       	adiw	r26, 0x02	; 2
    24f4:	8d 91       	ld	r24, X+
    24f6:	9c 91       	ld	r25, X
    24f8:	13 97       	sbiw	r26, 0x03	; 3
    24fa:	82 17       	cp	r24, r18
    24fc:	93 07       	cpc	r25, r19
    24fe:	94 f0       	brlt	.+36     	; 0x2524 <__fpcmp_parts_f+0x8a>
    2500:	28 17       	cp	r18, r24
    2502:	39 07       	cpc	r19, r25
    2504:	bc f0       	brlt	.+46     	; 0x2534 <__fpcmp_parts_f+0x9a>
    2506:	24 81       	ldd	r18, Z+4	; 0x04
    2508:	35 81       	ldd	r19, Z+5	; 0x05
    250a:	46 81       	ldd	r20, Z+6	; 0x06
    250c:	57 81       	ldd	r21, Z+7	; 0x07
    250e:	14 96       	adiw	r26, 0x04	; 4
    2510:	8d 91       	ld	r24, X+
    2512:	9d 91       	ld	r25, X+
    2514:	0d 90       	ld	r0, X+
    2516:	bc 91       	ld	r27, X
    2518:	a0 2d       	mov	r26, r0
    251a:	82 17       	cp	r24, r18
    251c:	93 07       	cpc	r25, r19
    251e:	a4 07       	cpc	r26, r20
    2520:	b5 07       	cpc	r27, r21
    2522:	18 f4       	brcc	.+6      	; 0x252a <__fpcmp_parts_f+0x90>
    2524:	66 23       	and	r22, r22
    2526:	41 f0       	breq	.+16     	; 0x2538 <__fpcmp_parts_f+0x9e>
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <__fpcmp_parts_f+0xaa>
    252a:	28 17       	cp	r18, r24
    252c:	39 07       	cpc	r19, r25
    252e:	4a 07       	cpc	r20, r26
    2530:	5b 07       	cpc	r21, r27
    2532:	28 f4       	brcc	.+10     	; 0x253e <__fpcmp_parts_f+0xa4>
    2534:	66 23       	and	r22, r22
    2536:	31 f0       	breq	.+12     	; 0x2544 <__fpcmp_parts_f+0xaa>
    2538:	21 e0       	ldi	r18, 0x01	; 1
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	05 c0       	rjmp	.+10     	; 0x2548 <__fpcmp_parts_f+0xae>
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <__fpcmp_parts_f+0xae>
    2544:	2f ef       	ldi	r18, 0xFF	; 255
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	c9 01       	movw	r24, r18
    254a:	08 95       	ret

0000254c <__mulsi3>:
    254c:	62 9f       	mul	r22, r18
    254e:	d0 01       	movw	r26, r0
    2550:	73 9f       	mul	r23, r19
    2552:	f0 01       	movw	r30, r0
    2554:	82 9f       	mul	r24, r18
    2556:	e0 0d       	add	r30, r0
    2558:	f1 1d       	adc	r31, r1
    255a:	64 9f       	mul	r22, r20
    255c:	e0 0d       	add	r30, r0
    255e:	f1 1d       	adc	r31, r1
    2560:	92 9f       	mul	r25, r18
    2562:	f0 0d       	add	r31, r0
    2564:	83 9f       	mul	r24, r19
    2566:	f0 0d       	add	r31, r0
    2568:	74 9f       	mul	r23, r20
    256a:	f0 0d       	add	r31, r0
    256c:	65 9f       	mul	r22, r21
    256e:	f0 0d       	add	r31, r0
    2570:	99 27       	eor	r25, r25
    2572:	72 9f       	mul	r23, r18
    2574:	b0 0d       	add	r27, r0
    2576:	e1 1d       	adc	r30, r1
    2578:	f9 1f       	adc	r31, r25
    257a:	63 9f       	mul	r22, r19
    257c:	b0 0d       	add	r27, r0
    257e:	e1 1d       	adc	r30, r1
    2580:	f9 1f       	adc	r31, r25
    2582:	bd 01       	movw	r22, r26
    2584:	cf 01       	movw	r24, r30
    2586:	11 24       	eor	r1, r1
    2588:	08 95       	ret

0000258a <__udivmodhi4>:
    258a:	aa 1b       	sub	r26, r26
    258c:	bb 1b       	sub	r27, r27
    258e:	51 e1       	ldi	r21, 0x11	; 17
    2590:	07 c0       	rjmp	.+14     	; 0x25a0 <__udivmodhi4_ep>

00002592 <__udivmodhi4_loop>:
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	a6 17       	cp	r26, r22
    2598:	b7 07       	cpc	r27, r23
    259a:	10 f0       	brcs	.+4      	; 0x25a0 <__udivmodhi4_ep>
    259c:	a6 1b       	sub	r26, r22
    259e:	b7 0b       	sbc	r27, r23

000025a0 <__udivmodhi4_ep>:
    25a0:	88 1f       	adc	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	5a 95       	dec	r21
    25a6:	a9 f7       	brne	.-22     	; 0x2592 <__udivmodhi4_loop>
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	08 95       	ret

000025b2 <__divmodhi4>:
    25b2:	97 fb       	bst	r25, 7
    25b4:	09 2e       	mov	r0, r25
    25b6:	07 26       	eor	r0, r23
    25b8:	0a d0       	rcall	.+20     	; 0x25ce <__divmodhi4_neg1>
    25ba:	77 fd       	sbrc	r23, 7
    25bc:	04 d0       	rcall	.+8      	; 0x25c6 <__divmodhi4_neg2>
    25be:	e5 df       	rcall	.-54     	; 0x258a <__udivmodhi4>
    25c0:	06 d0       	rcall	.+12     	; 0x25ce <__divmodhi4_neg1>
    25c2:	00 20       	and	r0, r0
    25c4:	1a f4       	brpl	.+6      	; 0x25cc <__divmodhi4_exit>

000025c6 <__divmodhi4_neg2>:
    25c6:	70 95       	com	r23
    25c8:	61 95       	neg	r22
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255

000025cc <__divmodhi4_exit>:
    25cc:	08 95       	ret

000025ce <__divmodhi4_neg1>:
    25ce:	f6 f7       	brtc	.-4      	; 0x25cc <__divmodhi4_exit>
    25d0:	90 95       	com	r25
    25d2:	81 95       	neg	r24
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	08 95       	ret

000025d8 <__udivmodsi4>:
    25d8:	a1 e2       	ldi	r26, 0x21	; 33
    25da:	1a 2e       	mov	r1, r26
    25dc:	aa 1b       	sub	r26, r26
    25de:	bb 1b       	sub	r27, r27
    25e0:	fd 01       	movw	r30, r26
    25e2:	0d c0       	rjmp	.+26     	; 0x25fe <__udivmodsi4_ep>

000025e4 <__udivmodsi4_loop>:
    25e4:	aa 1f       	adc	r26, r26
    25e6:	bb 1f       	adc	r27, r27
    25e8:	ee 1f       	adc	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	a2 17       	cp	r26, r18
    25ee:	b3 07       	cpc	r27, r19
    25f0:	e4 07       	cpc	r30, r20
    25f2:	f5 07       	cpc	r31, r21
    25f4:	20 f0       	brcs	.+8      	; 0x25fe <__udivmodsi4_ep>
    25f6:	a2 1b       	sub	r26, r18
    25f8:	b3 0b       	sbc	r27, r19
    25fa:	e4 0b       	sbc	r30, r20
    25fc:	f5 0b       	sbc	r31, r21

000025fe <__udivmodsi4_ep>:
    25fe:	66 1f       	adc	r22, r22
    2600:	77 1f       	adc	r23, r23
    2602:	88 1f       	adc	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	1a 94       	dec	r1
    2608:	69 f7       	brne	.-38     	; 0x25e4 <__udivmodsi4_loop>
    260a:	60 95       	com	r22
    260c:	70 95       	com	r23
    260e:	80 95       	com	r24
    2610:	90 95       	com	r25
    2612:	9b 01       	movw	r18, r22
    2614:	ac 01       	movw	r20, r24
    2616:	bd 01       	movw	r22, r26
    2618:	cf 01       	movw	r24, r30
    261a:	08 95       	ret

0000261c <__prologue_saves__>:
    261c:	2f 92       	push	r2
    261e:	3f 92       	push	r3
    2620:	4f 92       	push	r4
    2622:	5f 92       	push	r5
    2624:	6f 92       	push	r6
    2626:	7f 92       	push	r7
    2628:	8f 92       	push	r8
    262a:	9f 92       	push	r9
    262c:	af 92       	push	r10
    262e:	bf 92       	push	r11
    2630:	cf 92       	push	r12
    2632:	df 92       	push	r13
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	ca 1b       	sub	r28, r26
    2646:	db 0b       	sbc	r29, r27
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	09 94       	ijmp

0000264e <__epilogue_restores__>:
    264e:	2a 88       	ldd	r2, Y+18	; 0x12
    2650:	39 88       	ldd	r3, Y+17	; 0x11
    2652:	48 88       	ldd	r4, Y+16	; 0x10
    2654:	5f 84       	ldd	r5, Y+15	; 0x0f
    2656:	6e 84       	ldd	r6, Y+14	; 0x0e
    2658:	7d 84       	ldd	r7, Y+13	; 0x0d
    265a:	8c 84       	ldd	r8, Y+12	; 0x0c
    265c:	9b 84       	ldd	r9, Y+11	; 0x0b
    265e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2660:	b9 84       	ldd	r11, Y+9	; 0x09
    2662:	c8 84       	ldd	r12, Y+8	; 0x08
    2664:	df 80       	ldd	r13, Y+7	; 0x07
    2666:	ee 80       	ldd	r14, Y+6	; 0x06
    2668:	fd 80       	ldd	r15, Y+5	; 0x05
    266a:	0c 81       	ldd	r16, Y+4	; 0x04
    266c:	1b 81       	ldd	r17, Y+3	; 0x03
    266e:	aa 81       	ldd	r26, Y+2	; 0x02
    2670:	b9 81       	ldd	r27, Y+1	; 0x01
    2672:	ce 0f       	add	r28, r30
    2674:	d1 1d       	adc	r29, r1
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	ed 01       	movw	r28, r26
    267c:	08 95       	ret

0000267e <_exit>:
    267e:	f8 94       	cli

00002680 <__stop_program>:
    2680:	ff cf       	rjmp	.-2      	; 0x2680 <__stop_program>
