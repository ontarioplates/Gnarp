
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00802000  00002924  000029b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010b  00802190  00802190  00002b48  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00003299  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ac6  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005b35  00000000  00000000  00003fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bf6  00000000  00000000  00009af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000320c  00000000  00000000  0000b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000740  00000000  00000000  0000e8f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017ee  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e80  00000000  00000000  00010826  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000baa  00000000  00000000  000126a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_16>
      44:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_17>
      48:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__vector_18>
      4c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e4 e2       	ldi	r30, 0x24	; 36
     18c:	f9 e2       	ldi	r31, 0x29	; 41
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a0 39       	cpi	r26, 0x90	; 144
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a0 e9       	ldi	r26, 0x90	; 144
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ab 39       	cpi	r26, 0x9B	; 155
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <main>
     1ae:	0c 94 90 14 	jmp	0x2920	; 0x2920 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 a6 21 	lds	r24, 0x21A6
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	2f 92       	push	r2
     1be:	3f 92       	push	r3
     1c0:	4f 92       	push	r4
     1c2:	5f 92       	push	r5
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	0f 92       	push	r0
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	18 2f       	mov	r17, r24
     1e8:	3b 01       	movw	r6, r22
     1ea:	4a 01       	movw	r8, r20
    
	const uint16_t pot_range = POTMAX - POTMIN; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin) + outmin;
     1ec:	ba 01       	movw	r22, r20
     1ee:	66 19       	sub	r22, r6
     1f0:	77 09       	sbc	r23, r7
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 95 11 	call	0x232a	; 0x232a <__floatunsisf>
     1fa:	6b 01       	movw	r12, r22
     1fc:	7c 01       	movw	r14, r24
    //outmax: maximum value to output
    
	const uint16_t pot_range = POTMAX - POTMIN; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
     1fe:	e1 2f       	mov	r30, r17
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e4 56       	subi	r30, 0x64	; 100
     208:	fe 4d       	sbci	r31, 0xDE	; 222
     20a:	60 81       	ld	r22, Z
     20c:	71 81       	ldd	r23, Z+1	; 0x01
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 95 11 	call	0x232a	; 0x232a <__floatunsisf>
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e4       	ldi	r19, 0x40	; 64
     21a:	4f e4       	ldi	r20, 0x4F	; 79
     21c:	55 e4       	ldi	r21, 0x45	; 69
     21e:	0e 94 35 10 	call	0x206a	; 0x206a <__divsf3>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
    temp = temp*(outmax - outmin) + outmin;
     226:	c7 01       	movw	r24, r14
     228:	b6 01       	movw	r22, r12
     22a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsf3>
     22e:	d6 2e       	mov	r13, r22
     230:	c7 2e       	mov	r12, r23
     232:	b8 2e       	mov	r11, r24
     234:	a9 2e       	mov	r10, r25
     236:	b3 01       	movw	r22, r6
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 95 11 	call	0x232a	; 0x232a <__floatunsisf>
     240:	f6 2e       	mov	r15, r22
     242:	07 2f       	mov	r16, r23
     244:	18 2f       	mov	r17, r24
     246:	e9 2e       	mov	r14, r25
     248:	46 2e       	mov	r4, r22
     24a:	37 2e       	mov	r3, r23
     24c:	28 2e       	mov	r2, r24
     24e:	99 83       	std	Y+1, r25	; 0x01
     250:	6d 2d       	mov	r22, r13
     252:	7c 2d       	mov	r23, r12
     254:	8b 2d       	mov	r24, r11
     256:	9a 2d       	mov	r25, r10
     258:	2f 2d       	mov	r18, r15
     25a:	30 2f       	mov	r19, r16
     25c:	41 2f       	mov	r20, r17
     25e:	5e 2d       	mov	r21, r14
     260:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     264:	a6 2e       	mov	r10, r22
     266:	77 2e       	mov	r7, r23
     268:	68 2e       	mov	r6, r24
     26a:	59 2e       	mov	r5, r25
	
	if (temp > outmax)
     26c:	b4 01       	movw	r22, r8
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 95 11 	call	0x232a	; 0x232a <__floatunsisf>
     276:	d6 2e       	mov	r13, r22
     278:	c7 2e       	mov	r12, r23
     27a:	b8 2e       	mov	r11, r24
     27c:	99 2e       	mov	r9, r25
     27e:	2a 2d       	mov	r18, r10
     280:	37 2d       	mov	r19, r7
     282:	46 2d       	mov	r20, r6
     284:	55 2d       	mov	r21, r5
     286:	0e 94 13 11 	call	0x2226	; 0x2226 <__ltsf2>
     28a:	88 23       	and	r24, r24
     28c:	24 f0       	brlt	.+8      	; 0x296 <get_pot_value+0xda>
    
	const uint16_t pot_range = POTMAX - POTMIN; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin) + outmin;
     28e:	da 2c       	mov	r13, r10
     290:	c7 2c       	mov	r12, r7
     292:	b6 2c       	mov	r11, r6
     294:	95 2c       	mov	r9, r5
	
	if (temp > outmax)
		temp = outmax;
		
	if (temp < outmin)
     296:	6d 2d       	mov	r22, r13
     298:	7c 2d       	mov	r23, r12
     29a:	8b 2d       	mov	r24, r11
     29c:	99 2d       	mov	r25, r9
     29e:	2f 2d       	mov	r18, r15
     2a0:	30 2f       	mov	r19, r16
     2a2:	41 2f       	mov	r20, r17
     2a4:	5e 2d       	mov	r21, r14
     2a6:	0e 94 13 11 	call	0x2226	; 0x2226 <__ltsf2>
     2aa:	88 23       	and	r24, r24
     2ac:	24 f0       	brlt	.+8      	; 0x2b6 <get_pot_value+0xfa>
     2ae:	4d 2c       	mov	r4, r13
     2b0:	3c 2c       	mov	r3, r12
     2b2:	2b 2c       	mov	r2, r11
     2b4:	99 82       	std	Y+1, r9	; 0x01
		temp = outmin;
    
    return (uint16_t) temp;
     2b6:	29 81       	ldd	r18, Y+1	; 0x01
     2b8:	64 2d       	mov	r22, r4
     2ba:	73 2d       	mov	r23, r3
     2bc:	82 2d       	mov	r24, r2
     2be:	92 2f       	mov	r25, r18
     2c0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fixunssfsi>
}
     2c4:	86 2f       	mov	r24, r22
     2c6:	97 2f       	mov	r25, r23
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	bf 90       	pop	r11
     2dc:	af 90       	pop	r10
     2de:	9f 90       	pop	r9
     2e0:	8f 90       	pop	r8
     2e2:	7f 90       	pop	r7
     2e4:	6f 90       	pop	r6
     2e6:	5f 90       	pop	r5
     2e8:	4f 90       	pop	r4
     2ea:	3f 90       	pop	r3
     2ec:	2f 90       	pop	r2
     2ee:	08 95       	ret

000002f0 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	9c 01       	movw	r18, r24
     30e:	dd 24       	eor	r13, r13
     310:	d3 94       	inc	r13
     312:	ee 24       	eor	r14, r14
     314:	ff 24       	eor	r15, r15
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     316:	ea e0       	ldi	r30, 0x0A	; 10
     318:	f0 e0       	ldi	r31, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     31a:	0f 2e       	mov	r0, r31
     31c:	f3 e0       	ldi	r31, 0x03	; 3
     31e:	af 2e       	mov	r10, r31
     320:	bb 24       	eor	r11, r11
     322:	f0 2d       	mov	r31, r0
     324:	88 24       	eor	r8, r8
     326:	99 24       	eor	r9, r9
     328:	68 94       	set
     32a:	83 f8       	bld	r8, 3
     32c:	c0 e6       	ldi	r28, 0x60	; 96
     32e:	d6 e0       	ldi	r29, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     330:	00 e4       	ldi	r16, 0x40	; 64
     332:	16 e0       	ldi	r17, 0x06	; 6
     334:	0f 2e       	mov	r0, r31
     336:	f0 ef       	ldi	r31, 0xF0	; 240
     338:	7f 2e       	mov	r7, r31
     33a:	f0 2d       	mov	r31, r0
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     33c:	0f 2e       	mov	r0, r31
     33e:	f8 e3       	ldi	r31, 0x38	; 56
     340:	6f 2e       	mov	r6, r31
     342:	f0 2d       	mov	r31, r0
     344:	04 c0       	rjmp	.+8      	; 0x34e <set_seven_segment_LEDs+0x5e>
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
     346:	08 94       	sec
     348:	e1 1c       	adc	r14, r1
     34a:	f1 1c       	adc	r15, r1
     34c:	d3 94       	inc	r13
     34e:	4e 2d       	mov	r20, r14
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     350:	c9 01       	movw	r24, r18
     352:	bf 01       	movw	r22, r30
     354:	0e 94 16 14 	call	0x282c	; 0x282c <__udivmodhi4>
     358:	c8 2e       	mov	r12, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     35a:	21 15       	cp	r18, r1
     35c:	31 05       	cpc	r19, r1
     35e:	31 f4       	brne	.+12     	; 0x36c <set_seven_segment_LEDs+0x7c>
     360:	ee 20       	and	r14, r14
     362:	29 f1       	breq	.+74     	; 0x3ae <set_seven_segment_LEDs+0xbe>
            digit = 10;
     364:	0f 2e       	mov	r0, r31
     366:	fa e0       	ldi	r31, 0x0A	; 10
     368:	cf 2e       	mov	r12, r31
     36a:	f0 2d       	mov	r31, r0
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     36c:	84 2f       	mov	r24, r20
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 96       	adiw	r24, 0x02	; 2
     372:	b5 01       	movw	r22, r10
     374:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
     378:	a4 01       	movw	r20, r8
     37a:	02 c0       	rjmp	.+4      	; 0x380 <set_seven_segment_LEDs+0x90>
     37c:	44 0f       	add	r20, r20
     37e:	55 1f       	adc	r21, r21
     380:	8a 95       	dec	r24
     382:	e2 f7       	brpl	.-8      	; 0x37c <set_seven_segment_LEDs+0x8c>
     384:	4e 83       	std	Y+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     386:	d8 01       	movw	r26, r16
     388:	16 96       	adiw	r26, 0x06	; 6
     38a:	7c 92       	st	X, r7
     38c:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     38e:	cc 0c       	add	r12, r12
     390:	cc 0c       	add	r12, r12
     392:	cc 0c       	add	r12, r12
     394:	cc 0c       	add	r12, r12
     396:	15 96       	adiw	r26, 0x05	; 5
     398:	cc 92       	st	X, r12
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     39a:	6d 82       	std	Y+5, r6	; 0x05

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     39c:	bd 2d       	mov	r27, r13
     39e:	b3 30       	cpi	r27, 0x03	; 3
     3a0:	00 f5       	brcc	.+64     	; 0x3e2 <set_seven_segment_LEDs+0xf2>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     3a2:	c9 01       	movw	r24, r18
     3a4:	bf 01       	movw	r22, r30
     3a6:	0e 94 16 14 	call	0x282c	; 0x282c <__udivmodhi4>
     3aa:	9b 01       	movw	r18, r22
     3ac:	cc cf       	rjmp	.-104    	; 0x346 <set_seven_segment_LEDs+0x56>
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     3ae:	8e 2d       	mov	r24, r14
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 96       	adiw	r24, 0x02	; 2
     3b4:	b5 01       	movw	r22, r10
     3b6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
     3ba:	a4 01       	movw	r20, r8
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <set_seven_segment_LEDs+0xd2>
     3be:	44 0f       	add	r20, r20
     3c0:	55 1f       	adc	r21, r21
     3c2:	8a 95       	dec	r24
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <set_seven_segment_LEDs+0xce>
     3c6:	4e 83       	std	Y+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     3c8:	d8 01       	movw	r26, r16
     3ca:	16 96       	adiw	r26, 0x06	; 6
     3cc:	7c 92       	st	X, r7
     3ce:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     3d0:	cc 0c       	add	r12, r12
     3d2:	cc 0c       	add	r12, r12
     3d4:	cc 0c       	add	r12, r12
     3d6:	cc 0c       	add	r12, r12
     3d8:	15 96       	adiw	r26, 0x05	; 5
     3da:	cc 92       	st	X, r12
     3dc:	15 97       	sbiw	r26, 0x05	; 5
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     3de:	6d 82       	std	Y+5, r6	; 0x05
     3e0:	b2 cf       	rjmp	.-156    	; 0x346 <set_seven_segment_LEDs+0x56>
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
    }
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	cf 90       	pop	r12
     3f2:	bf 90       	pop	r11
     3f4:	af 90       	pop	r10
     3f6:	9f 90       	pop	r9
     3f8:	8f 90       	pop	r8
     3fa:	7f 90       	pop	r7
     3fc:	6f 90       	pop	r6
     3fe:	08 95       	ret

00000400 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     400:	88 23       	and	r24, r24
     402:	21 f0       	breq	.+8      	; 0x40c <set_LEDs_on+0xc>
		PORTC.OUTCLR = 0x08;
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	e0 e4       	ldi	r30, 0x40	; 64
     408:	f6 e0       	ldi	r31, 0x06	; 6
     40a:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_0)
     40c:	66 23       	and	r22, r22
     40e:	21 f0       	breq	.+8      	; 0x418 <set_LEDs_on+0x18>
		PORTD.OUTSET = 0x04;
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	e0 e6       	ldi	r30, 0x60	; 96
     414:	f6 e0       	ldi	r31, 0x06	; 6
     416:	85 83       	std	Z+5, r24	; 0x05
		
	if (decimal_point_1)
     418:	44 23       	and	r20, r20
     41a:	21 f0       	breq	.+8      	; 0x424 <set_LEDs_on+0x24>
		PORTD.OUTSET = 0x01;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	e0 e6       	ldi	r30, 0x60	; 96
     420:	f6 e0       	ldi	r31, 0x06	; 6
     422:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_2)
     424:	22 23       	and	r18, r18
     426:	21 f0       	breq	.+8      	; 0x430 <set_LEDs_on+0x30>
		PORTD.OUTSET = 0x02;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	e0 e6       	ldi	r30, 0x60	; 96
     42c:	f6 e0       	ldi	r31, 0x06	; 6
     42e:	85 83       	std	Z+5, r24	; 0x05
     430:	08 95       	ret

00000432 <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     432:	88 23       	and	r24, r24
     434:	21 f0       	breq	.+8      	; 0x43e <set_LEDs_off+0xc>
		PORTC.OUTSET = 0x08;
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	e0 e4       	ldi	r30, 0x40	; 64
     43a:	f6 e0       	ldi	r31, 0x06	; 6
     43c:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_0)
     43e:	66 23       	and	r22, r22
     440:	21 f0       	breq	.+8      	; 0x44a <set_LEDs_off+0x18>
		PORTD.OUTCLR = 0x04;
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	e0 e6       	ldi	r30, 0x60	; 96
     446:	f6 e0       	ldi	r31, 0x06	; 6
     448:	86 83       	std	Z+6, r24	; 0x06
		
	if (decimal_point_1)
     44a:	44 23       	and	r20, r20
     44c:	21 f0       	breq	.+8      	; 0x456 <set_LEDs_off+0x24>
		PORTD.OUTCLR = 0x01;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	e0 e6       	ldi	r30, 0x60	; 96
     452:	f6 e0       	ldi	r31, 0x06	; 6
     454:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_2)
     456:	22 23       	and	r18, r18
     458:	21 f0       	breq	.+8      	; 0x462 <set_LEDs_off+0x30>
		PORTD.OUTCLR = 0x02;
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	e0 e6       	ldi	r30, 0x60	; 96
     45e:	f6 e0       	ldi	r31, 0x06	; 6
     460:	86 83       	std	Z+6, r24	; 0x06
     462:	08 95       	ret

00000464 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     464:	80 91 94 21 	lds	r24, 0x2194
     468:	08 95       	ret

0000046a <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     46a:	80 91 95 21 	lds	r24, 0x2195
     46e:	08 95       	ret

00000470 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     470:	80 91 92 21 	lds	r24, 0x2192
     474:	08 95       	ret

00000476 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     476:	80 91 93 21 	lds	r24, 0x2193
     47a:	08 95       	ret

0000047c <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     47c:	80 91 90 21 	lds	r24, 0x2190
     480:	08 95       	ret

00000482 <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     482:	80 91 91 21 	lds	r24, 0x2191
     486:	08 95       	ret

00000488 <initialize_hardware>:

void initialize_hardware(){
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     48c:	80 91 40 00 	lds	r24, 0x0040
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	01 f1       	breq	.+64     	; 0x4d4 <initialize_hardware+0x4c>
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     494:	a0 e4       	ldi	r26, 0x40	; 64
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	71 e0       	ldi	r23, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     49a:	94 e0       	ldi	r25, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     49c:	e0 e5       	ldi	r30, 0x50	; 80
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	6b e8       	ldi	r22, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     4a2:	58 e0       	ldi	r21, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     4a4:	42 ec       	ldi	r20, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     4a6:	38 e1       	ldi	r19, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     4a8:	28 ed       	ldi	r18, 0xD8	; 216
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     4aa:	11 96       	adiw	r26, 0x01	; 1
     4ac:	7c 93       	st	X, r23
     4ae:	11 97       	sbiw	r26, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     4b0:	13 96       	adiw	r26, 0x03	; 3
     4b2:	9c 93       	st	X, r25
     4b4:	13 97       	sbiw	r26, 0x03	; 3
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     4b6:	62 83       	std	Z+2, r22	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     4b8:	50 83       	st	Z, r21
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     4ba:	81 81       	ldd	r24, Z+1	; 0x01
     4bc:	83 ff       	sbrs	r24, 3
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <initialize_hardware+0x32>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     4c0:	45 83       	std	Z+5, r20	; 0x05
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     4c2:	30 83       	st	Z, r19
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     4c4:	81 81       	ldd	r24, Z+1	; 0x01
     4c6:	84 ff       	sbrs	r24, 4
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     4ca:	24 bf       	out	0x34, r18	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     4cc:	9c 93       	st	X, r25
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     4ce:	8c 91       	ld	r24, X
     4d0:	84 30       	cpi	r24, 0x04	; 4
     4d2:	59 f7       	brne	.-42     	; 0x4aa <initialize_hardware+0x22>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     4d4:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     4d6:	a0 e6       	ldi	r26, 0x60	; 96
     4d8:	b6 e0       	ldi	r27, 0x06	; 6
     4da:	80 e8       	ldi	r24, 0x80	; 128
     4dc:	15 96       	adiw	r26, 0x05	; 5
     4de:	8c 93       	st	X, r24
     4e0:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     4e2:	90 e4       	ldi	r25, 0x40	; 64
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	9c 93       	st	X, r25
     4e8:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     4ea:	11 96       	adiw	r26, 0x01	; 1
     4ec:	8c 93       	st	X, r24
     4ee:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     4f0:	e0 eb       	ldi	r30, 0xB0	; 176
     4f2:	f9 e0       	ldi	r31, 0x09	; 9
     4f4:	88 e1       	ldi	r24, 0x18	; 24
     4f6:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	83 83       	std	Z+3, r24	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     4fc:	33 e0       	ldi	r19, 0x03	; 3
     4fe:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     500:	9f e2       	ldi	r25, 0x2F	; 47
     502:	96 83       	std	Z+6, r25	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     504:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     506:	e0 ea       	ldi	r30, 0xA0	; 160
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	92 81       	ldd	r25, Z+2	; 0x02
     50c:	97 68       	ori	r25, 0x87	; 135
     50e:	92 83       	std	Z+2, r25	; 0x02
    sei();                     //enable global interrupts
     510:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     512:	c0 e0       	ldi	r28, 0x00	; 0
     514:	d6 e0       	ldi	r29, 0x06	; 6
     516:	99 ef       	ldi	r25, 0xF9	; 249
     518:	9a 83       	std	Y+2, r25	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     51a:	e0 e0       	ldi	r30, 0x00	; 0
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	10 82       	st	Z, r1
    ADCA.CTRLB = 0x00;
     520:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     522:	82 83       	std	Z+2, r24	; 0x02
    ADCA.EVCTRL = 0x00;
     524:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     526:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     528:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     52a:	80 81       	ld	r24, Z
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	80 83       	st	Z, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     534:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     536:	12 a2       	std	Z+34, r1	; 0x22
	if (decimal_point_2)
		PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	56 e0       	ldi	r21, 0x06	; 6
     53c:	8c e0       	ldi	r24, 0x0C	; 12
     53e:	fa 01       	movw	r30, r20
     540:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     542:	28 e0       	ldi	r18, 0x08	; 8
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	96 e0       	ldi	r25, 0x06	; 6
     548:	fc 01       	movw	r30, r24
     54a:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     54c:	fa 01       	movw	r30, r20
     54e:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     550:	86 e0       	ldi	r24, 0x06	; 6
     552:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     554:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     556:	e0 e4       	ldi	r30, 0x40	; 64
     558:	f6 e0       	ldi	r31, 0x06	; 6
     55a:	88 ef       	ldi	r24, 0xF8	; 248
     55c:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     55e:	8f e3       	ldi	r24, 0x3F	; 63
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	8c 93       	st	X, r24
     564:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     566:	88 e3       	ldi	r24, 0x38	; 56
     568:	15 96       	adiw	r26, 0x05	; 5
     56a:	8c 93       	st	X, r24
     56c:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     56e:	90 ef       	ldi	r25, 0xF0	; 240
     570:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     572:	16 96       	adiw	r26, 0x06	; 6
     574:	8c 93       	st	X, r24
     576:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     578:	87 e0       	ldi	r24, 0x07	; 7
     57a:	16 96       	adiw	r26, 0x06	; 6
     57c:	8c 93       	st	X, r24
     57e:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     580:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <read_hardware>:

void read_hardware(){
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	0f 92       	push	r0
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     5a0:	e0 e8       	ldi	r30, 0x80	; 128
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	30 85       	ldd	r19, Z+8	; 0x08
     5a6:	36 95       	lsr	r19
     5a8:	36 95       	lsr	r19
     5aa:	36 95       	lsr	r19
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <read_hardware+0x2a>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     5b2:	e0 e2       	ldi	r30, 0x20	; 32
     5b4:	f6 e0       	ldi	r31, 0x06	; 6
     5b6:	30 85       	ldd	r19, Z+8	; 0x08
     5b8:	36 95       	lsr	r19
     5ba:	36 95       	lsr	r19
     5bc:	30 fd       	sbrc	r19, 0
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <read_hardware+0x3c>
     5c0:	32 e0       	ldi	r19, 0x02	; 2
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <read_hardware+0x3e>
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	23 2b       	or	r18, r19
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     5c8:	e0 e2       	ldi	r30, 0x20	; 32
     5ca:	f6 e0       	ldi	r31, 0x06	; 6
     5cc:	30 85       	ldd	r19, Z+8	; 0x08
     5ce:	36 95       	lsr	r19
     5d0:	36 95       	lsr	r19
     5d2:	36 95       	lsr	r19
     5d4:	30 fd       	sbrc	r19, 0
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <read_hardware+0x58>
     5d8:	bb 24       	eor	r11, r11
     5da:	68 94       	set
     5dc:	b2 f8       	bld	r11, 2
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <read_hardware+0x5a>
     5e0:	bb 24       	eor	r11, r11
     5e2:	b2 2a       	or	r11, r18
     5e4:	b0 92 9b 21 	sts	0x219B, r11
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     5e8:	00 91 9a 21 	lds	r16, 0x219A
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	c0 90 99 21 	lds	r12, 0x2199
     5f2:	e6 e9       	ldi	r30, 0x96	; 150
     5f4:	f1 e2       	ldi	r31, 0x21	; 33
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	ab 2d       	mov	r26, r11
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     5fe:	ee 24       	eor	r14, r14
     600:	ff 24       	eor	r15, r15
     602:	e3 94       	inc	r14
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     604:	bd 01       	movw	r22, r26
     606:	02 2e       	mov	r0, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <read_hardware+0x86>
     60a:	75 95       	asr	r23
     60c:	67 95       	ror	r22
     60e:	0a 94       	dec	r0
     610:	e2 f7       	brpl	.-8      	; 0x60a <read_hardware+0x82>
     612:	a8 01       	movw	r20, r16
     614:	02 2e       	mov	r0, r18
     616:	02 c0       	rjmp	.+4      	; 0x61c <read_hardware+0x94>
     618:	55 95       	asr	r21
     61a:	47 95       	ror	r20
     61c:	0a 94       	dec	r0
     61e:	e2 f7       	brpl	.-8      	; 0x618 <read_hardware+0x90>
     620:	64 17       	cp	r22, r20
     622:	75 07       	cpc	r23, r21
     624:	31 f4       	brne	.+12     	; 0x632 <read_hardware+0xaa>
            switch_history_counts[i]++;                            //increment count        
     626:	40 81       	ld	r20, Z
     628:	4f 5f       	subi	r20, 0xFF	; 255
     62a:	40 83       	st	Z, r20
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     62c:	49 30       	cpi	r20, 0x09	; 9
     62e:	18 f4       	brcc	.+6      	; 0x636 <read_hardware+0xae>
     630:	0f c0       	rjmp	.+30     	; 0x650 <read_hardware+0xc8>
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
     632:	10 82       	st	Z, r1
     634:	0d c0       	rjmp	.+26     	; 0x650 <read_hardware+0xc8>
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     636:	a7 01       	movw	r20, r14
     638:	02 2e       	mov	r0, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <read_hardware+0xb8>
     63c:	44 0f       	add	r20, r20
     63e:	55 1f       	adc	r21, r21
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <read_hardware+0xb4>
     644:	54 2f       	mov	r21, r20
     646:	50 95       	com	r21
     648:	c5 22       	and	r12, r21
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     64a:	4b 21       	and	r20, r11
     64c:	c4 2a       	or	r12, r20
            switch_history_counts[i] = 0;                          //and reset count
     64e:	10 82       	st	Z, r1
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     656:	23 30       	cpi	r18, 0x03	; 3
     658:	31 05       	cpc	r19, r1
     65a:	a1 f6       	brne	.-88     	; 0x604 <read_hardware+0x7c>
     65c:	c0 92 99 21 	sts	0x2199, r12
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     660:	b0 92 9a 21 	sts	0x219A, r11
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     664:	c0 fe       	sbrs	r12, 0
     666:	0e c0       	rjmp	.+28     	; 0x684 <read_hardware+0xfc>
        if (toggle_switch_state)                //if toggle WAS on
     668:	20 91 90 21 	lds	r18, 0x2190
     66c:	22 23       	and	r18, r18
     66e:	19 f0       	breq	.+6      	; 0x676 <read_hardware+0xee>
            toggle_switch_edge = EDGE_NONE;     //no edge
     670:	10 92 91 21 	sts	0x2191, r1
     674:	03 c0       	rjmp	.+6      	; 0x67c <read_hardware+0xf4>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	20 93 91 21 	sts	0x2191, r18
        toggle_switch_state = 1;                //set current value
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	20 93 90 21 	sts	0x2190, r18
     682:	0c c0       	rjmp	.+24     	; 0x69c <read_hardware+0x114>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     684:	20 91 90 21 	lds	r18, 0x2190
     688:	22 23       	and	r18, r18
     68a:	21 f0       	breq	.+8      	; 0x694 <read_hardware+0x10c>
            toggle_switch_edge = EDGE_FALL;     //new off
     68c:	22 e0       	ldi	r18, 0x02	; 2
     68e:	20 93 91 21 	sts	0x2191, r18
     692:	02 c0       	rjmp	.+4      	; 0x698 <read_hardware+0x110>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     694:	10 92 91 21 	sts	0x2191, r1
        toggle_switch_state = 0;                //set current value
     698:	10 92 90 21 	sts	0x2190, r1
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     69c:	20 91 99 21 	lds	r18, 0x2199
     6a0:	21 ff       	sbrs	r18, 1
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <read_hardware+0x138>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     6a4:	20 91 92 21 	lds	r18, 0x2192
     6a8:	22 23       	and	r18, r18
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <read_hardware+0x12a>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     6ac:	10 92 93 21 	sts	0x2193, r1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <read_hardware+0x130>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	20 93 93 21 	sts	0x2193, r18
        pushbutton_switch_state = 1;                //set current value
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	20 93 92 21 	sts	0x2192, r18
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <read_hardware+0x150>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     6c0:	20 91 92 21 	lds	r18, 0x2192
     6c4:	22 23       	and	r18, r18
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <read_hardware+0x148>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     6c8:	22 e0       	ldi	r18, 0x02	; 2
     6ca:	20 93 93 21 	sts	0x2193, r18
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <read_hardware+0x14c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     6d0:	10 92 93 21 	sts	0x2193, r1
        pushbutton_switch_state = 0;                //set current value
     6d4:	10 92 92 21 	sts	0x2192, r1
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     6d8:	20 91 99 21 	lds	r18, 0x2199
     6dc:	22 ff       	sbrs	r18, 2
     6de:	0e c0       	rjmp	.+28     	; 0x6fc <read_hardware+0x174>
        if (encoder_switch_state)                //if encoder WAS on
     6e0:	20 91 94 21 	lds	r18, 0x2194
     6e4:	22 23       	and	r18, r18
     6e6:	19 f0       	breq	.+6      	; 0x6ee <read_hardware+0x166>
            encoder_switch_edge = EDGE_NONE;     //no edge
     6e8:	10 92 95 21 	sts	0x2195, r1
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <read_hardware+0x16c>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     6ee:	21 e0       	ldi	r18, 0x01	; 1
     6f0:	20 93 95 21 	sts	0x2195, r18
        encoder_switch_state = 1;                //set current value
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	20 93 94 21 	sts	0x2194, r18
     6fa:	0c c0       	rjmp	.+24     	; 0x714 <read_hardware+0x18c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     6fc:	20 91 94 21 	lds	r18, 0x2194
     700:	22 23       	and	r18, r18
     702:	21 f0       	breq	.+8      	; 0x70c <read_hardware+0x184>
            encoder_switch_edge = EDGE_FALL;     //new off
     704:	22 e0       	ldi	r18, 0x02	; 2
     706:	20 93 95 21 	sts	0x2195, r18
     70a:	02 c0       	rjmp	.+4      	; 0x710 <read_hardware+0x188>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     70c:	10 92 95 21 	sts	0x2195, r1
        encoder_switch_state = 0;                //set current value
     710:	10 92 94 21 	sts	0x2194, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     714:	19 82       	std	Y+1, r1	; 0x01
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	25 30       	cpi	r18, 0x05	; 5
     71a:	08 f0       	brcs	.+2      	; 0x71e <read_hardware+0x196>
     71c:	6c c0       	rjmp	.+216    	; 0x7f6 <read_hardware+0x26e>
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     71e:	e0 e0       	ldi	r30, 0x00	; 0
     720:	f2 e0       	ldi	r31, 0x02	; 2
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     722:	2c e9       	ldi	r18, 0x9C	; 156
     724:	31 e2       	ldi	r19, 0x21	; 33
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     726:	43 a1       	ldd	r20, Z+35	; 0x23
     728:	41 60       	ori	r20, 0x01	; 1
     72a:	43 a3       	std	Z+35, r20	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     72c:	41 a1       	ldd	r20, Z+33	; 0x21
     72e:	47 7c       	andi	r20, 0xC7	; 199
     730:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     732:	a1 a1       	ldd	r26, Z+33	; 0x21
     734:	69 81       	ldd	r22, Y+1	; 0x01
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	6d 5f       	subi	r22, 0xFD	; 253
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	ab 01       	movw	r20, r22
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	44 0f       	add	r20, r20
     744:	55 1f       	adc	r21, r21
     746:	44 0f       	add	r20, r20
     748:	55 1f       	adc	r21, r21
     74a:	4a 2b       	or	r20, r26
     74c:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     74e:	40 a1       	ldd	r20, Z+32	; 0x20
     750:	40 68       	ori	r20, 0x80	; 128
     752:	40 a3       	std	Z+32, r20	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     754:	43 a1       	ldd	r20, Z+35	; 0x23
     756:	40 ff       	sbrs	r20, 0
     758:	fd cf       	rjmp	.-6      	; 0x754 <read_hardware+0x1cc>
        
        pot_values[i] = ADCA.CH0.RESL;
     75a:	a9 81       	ldd	r26, Y+1	; 0x01
     75c:	44 a1       	ldd	r20, Z+36	; 0x24
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	aa 0f       	add	r26, r26
     762:	bb 1f       	adc	r27, r27
     764:	a2 0f       	add	r26, r18
     766:	b3 1f       	adc	r27, r19
     768:	4c 93       	st	X, r20
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	1c 92       	st	X, r1
        pot_values[i] |= ADCA.CH0.RESH << 8;
     76e:	a9 81       	ldd	r26, Y+1	; 0x01
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	45 a1       	ldd	r20, Z+37	; 0x25
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a2 0f       	add	r26, r18
     77a:	b3 1f       	adc	r27, r19
     77c:	94 2f       	mov	r25, r20
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	4d 91       	ld	r20, X+
     782:	5c 91       	ld	r21, X
     784:	11 97       	sbiw	r26, 0x01	; 1
     786:	48 2b       	or	r20, r24
     788:	59 2b       	or	r21, r25
     78a:	4d 93       	st	X+, r20
     78c:	5c 93       	st	X, r21
        
        if (pot_values[i] < POTMIN)
     78e:	a9 81       	ldd	r26, Y+1	; 0x01
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	aa 0f       	add	r26, r26
     794:	bb 1f       	adc	r27, r27
     796:	a2 0f       	add	r26, r18
     798:	b3 1f       	adc	r27, r19
     79a:	4d 91       	ld	r20, X+
     79c:	5c 91       	ld	r21, X
     79e:	11 97       	sbiw	r26, 0x01	; 1
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	45 3f       	cpi	r20, 0xF5	; 245
     7a4:	56 07       	cpc	r21, r22
     7a6:	50 f4       	brcc	.+20     	; 0x7bc <read_hardware+0x234>
            pot_values[i] = 0;
     7a8:	a9 81       	ldd	r26, Y+1	; 0x01
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	aa 0f       	add	r26, r26
     7ae:	bb 1f       	adc	r27, r27
     7b0:	a2 0f       	add	r26, r18
     7b2:	b3 1f       	adc	r27, r19
     7b4:	1d 92       	st	X+, r1
     7b6:	1c 92       	st	X, r1
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <read_hardware+0x260>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     7bc:	a9 81       	ldd	r26, Y+1	; 0x01
     7be:	49 81       	ldd	r20, Y+1	; 0x01
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	aa 0f       	add	r26, r26
     7c4:	bb 1f       	adc	r27, r27
     7c6:	bd 01       	movw	r22, r26
     7c8:	62 0f       	add	r22, r18
     7ca:	73 1f       	adc	r23, r19
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	44 0f       	add	r20, r20
     7d0:	55 1f       	adc	r21, r21
     7d2:	42 0f       	add	r20, r18
     7d4:	53 1f       	adc	r21, r19
     7d6:	da 01       	movw	r26, r20
     7d8:	4d 91       	ld	r20, X+
     7da:	5c 91       	ld	r21, X
     7dc:	45 5f       	subi	r20, 0xF5	; 245
     7de:	51 40       	sbci	r21, 0x01	; 1
     7e0:	db 01       	movw	r26, r22
     7e2:	4d 93       	st	X+, r20
     7e4:	5c 93       	st	X, r21
     7e6:	11 97       	sbiw	r26, 0x01	; 1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     7e8:	49 81       	ldd	r20, Y+1	; 0x01
     7ea:	4f 5f       	subi	r20, 0xFF	; 255
     7ec:	49 83       	std	Y+1, r20	; 0x01
     7ee:	49 81       	ldd	r20, Y+1	; 0x01
     7f0:	45 30       	cpi	r20, 0x05	; 5
     7f2:	08 f4       	brcc	.+2      	; 0x7f6 <read_hardware+0x26e>
     7f4:	98 cf       	rjmp	.-208    	; 0x726 <read_hardware+0x19e>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     7f6:	e0 e2       	ldi	r30, 0x20	; 32
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	80 85       	ldd	r24, Z+8	; 0x08
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	80 fd       	sbrc	r24, 0
     800:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     802:	e0 e2       	ldi	r30, 0x20	; 32
     804:	f6 e0       	ldi	r31, 0x06	; 6
     806:	50 85       	ldd	r21, Z+8	; 0x08
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     808:	24 2f       	mov	r18, r20
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	90 91 a7 21 	lds	r25, 0x21A7
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	89 27       	eor	r24, r25
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	82 23       	and	r24, r18
     818:	93 23       	and	r25, r19
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	59 f0       	breq	.+22     	; 0x834 <read_hardware+0x2ac>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     81e:	56 95       	lsr	r21
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     820:	50 fd       	sbrc	r21, 0
     822:	04 c0       	rjmp	.+8      	; 0x82c <read_hardware+0x2a4>
            encoder_state = TURN_CW;    //CW        
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 a6 21 	sts	0x21A6, r24
     82a:	06 c0       	rjmp	.+12     	; 0x838 <read_hardware+0x2b0>
        else
            encoder_state = TURN_CCW;    //CCW
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	80 93 a6 21 	sts	0x21A6, r24
     832:	02 c0       	rjmp	.+4      	; 0x838 <read_hardware+0x2b0>
    }
    else
        encoder_state = TURN_NONE;   
     834:	10 92 a6 21 	sts	0x21A6, r1
    last_a = current_a;
     838:	40 93 a7 21 	sts	0x21A7, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	08 95       	ret

00000852 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
	
	//set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     852:	08 95       	ret

00000854 <__vector_91>:
uint16_t next_duration;
	
const uint8_t pitch_array[7] = {50, 55, 53, 60, 59, 65, 40};
uint8_t pitch_array_select = 0;

ISR(USARTD1_RXC_vect){
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	ef 93       	push	r30
     874:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     876:	0e 94 9c 07 	call	0xf38	; 0xf38 <serial_midi_device>
     87a:	40 91 b0 09 	lds	r20, 0x09B0
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	0e 94 95 0b 	call	0x172a	; 0x172a <midi_device_input>
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <test_pots>:

void test_pots(){
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     8b2:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	
	uint8_t selPOT = 0;
     8b6:	ff 24       	eor	r15, r15
	
	while(1){
		read_hardware();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     8b8:	c4 e6       	ldi	r28, 0x64	; 100
     8ba:	d0 e0       	ldi	r29, 0x00	; 0
	initialize_hardware();
	
	uint8_t selPOT = 0;
	
	while(1){
		read_hardware();
     8bc:	0e 94 c4 02 	call	0x588	; 0x588 <read_hardware>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     8c0:	8f 2d       	mov	r24, r15
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	43 e6       	ldi	r20, 0x63	; 99
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     8ce:	2f 2d       	mov	r18, r15
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	2c 9f       	mul	r18, r28
     8d8:	80 01       	movw	r16, r0
     8da:	2d 9f       	mul	r18, r29
     8dc:	10 0d       	add	r17, r0
     8de:	3c 9f       	mul	r19, r28
     8e0:	10 0d       	add	r17, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	08 0f       	add	r16, r24
     8e6:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     8e8:	0e 94 35 02 	call	0x46a	; 0x46a <get_encoder_switch_edge>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	29 f4       	brne	.+10     	; 0x8fa <test_pots+0x52>
			selPOT++;
     8f0:	f3 94       	inc	r15
			if (selPOT>4)
     8f2:	8f 2d       	mov	r24, r15
     8f4:	85 30       	cpi	r24, 0x05	; 5
     8f6:	08 f0       	brcs	.+2      	; 0x8fa <test_pots+0x52>
				selPOT = 0;
     8f8:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	0e 94 29 04 	call	0x852	; 0x852 <postloop_functions>
	
	}	
     906:	da cf       	rjmp	.-76     	; 0x8bc <test_pots+0x14>

00000908 <test_switches>:
	
	
}
*/

void test_switches(){
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     90c:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	
	while(1){
		read_hardware();
     910:	0e 94 c4 02 	call	0x588	; 0x588 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     914:	0e 94 32 02 	call	0x464	; 0x464 <get_encoder_switch_state>
     918:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     91a:	0e 94 38 02 	call	0x470	; 0x470 <get_pushbutton_switch_state>
     91e:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     920:	0e 94 3e 02 	call	0x47c	; 0x47c <get_toggle_switch_state>
     924:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	60 2f       	mov	r22, r16
     92a:	41 2f       	mov	r20, r17
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	0e 94 29 04 	call	0x852	; 0x852 <postloop_functions>
     934:	ed cf       	rjmp	.-38     	; 0x910 <test_switches+0x8>

00000936 <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	initialize_hardware();
     944:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     948:	c0 e0       	ldi	r28, 0x00	; 0
     94a:	d0 e0       	ldi	r29, 0x00	; 0
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     94c:	0f 2e       	mov	r0, r31
     94e:	f7 ee       	ldi	r31, 0xE7	; 231
     950:	cf 2e       	mov	r12, r31
     952:	f3 e0       	ldi	r31, 0x03	; 3
     954:	df 2e       	mov	r13, r31
     956:	f0 2d       	mov	r31, r0
	uint16_t i = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     958:	0e 94 c4 02 	call	0x588	; 0x588 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     95c:	0e 94 32 02 	call	0x464	; 0x464 <get_encoder_switch_state>
     960:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     962:	0e 94 38 02 	call	0x470	; 0x470 <get_pushbutton_switch_state>
     966:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     968:	0e 94 3e 02 	call	0x47c	; 0x47c <get_toggle_switch_state>
     96c:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     96e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	31 f4       	brne	.+12     	; 0x982 <test_seven_segment+0x4c>
			if (i == 999)
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	c7 3e       	cpi	r28, 0xE7	; 231
     97a:	d8 07       	cpc	r29, r24
     97c:	51 f0       	breq	.+20     	; 0x992 <test_seven_segment+0x5c>
				i = 0;
			else
				i++;
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	0c c0       	rjmp	.+24     	; 0x99a <test_seven_segment+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     982:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	41 f4       	brne	.+16     	; 0x99a <test_seven_segment+0x64>
			if (i == 0)
     98a:	20 97       	sbiw	r28, 0x00	; 0
     98c:	29 f0       	breq	.+10     	; 0x998 <test_seven_segment+0x62>
				i = 999;
			else
				i += -1;
     98e:	21 97       	sbiw	r28, 0x01	; 1
     990:	04 c0       	rjmp	.+8      	; 0x99a <test_seven_segment+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	01 c0       	rjmp	.+2      	; 0x99a <test_seven_segment+0x64>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     998:	e6 01       	movw	r28, r12
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	60 2f       	mov	r22, r16
     99e:	41 2f       	mov	r20, r17
     9a0:	2f 2d       	mov	r18, r15
     9a2:	8e 01       	movw	r16, r28
     9a4:	0e 94 29 04 	call	0x852	; 0x852 <postloop_functions>
	}
     9a8:	d7 cf       	rjmp	.-82     	; 0x958 <test_seven_segment+0x22>

000009aa <test_ADC>:
}

void test_ADC(){
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	initialize_hardware();
     9ba:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     9be:	c0 e0       	ldi	r28, 0x00	; 0
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f4 e6       	ldi	r31, 0x64	; 100
     9c6:	cf 2e       	mov	r12, r31
     9c8:	dd 24       	eor	r13, r13
     9ca:	f0 2d       	mov	r31, r0
	uint16_t pot_select = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     9cc:	0e 94 c4 02 	call	0x588	; 0x588 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     9d0:	0e 94 32 02 	call	0x464	; 0x464 <get_encoder_switch_state>
     9d4:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     9d6:	0e 94 38 02 	call	0x470	; 0x470 <get_pushbutton_switch_state>
     9da:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     9dc:	0e 94 3e 02 	call	0x47c	; 0x47c <get_toggle_switch_state>
     9e0:	e8 2e       	mov	r14, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     9e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	29 f4       	brne	.+10     	; 0x9f4 <test_ADC+0x4a>
			if (pot_select == 4)
     9ea:	c4 30       	cpi	r28, 0x04	; 4
     9ec:	d1 05       	cpc	r29, r1
     9ee:	51 f0       	breq	.+20     	; 0xa04 <test_ADC+0x5a>
				pot_select = 0;
			else
				pot_select++;
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <test_ADC+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     9f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	49 f4       	brne	.+18     	; 0xa0e <test_ADC+0x64>
			if (pot_select == 0)
     9fc:	20 97       	sbiw	r28, 0x00	; 0
     9fe:	29 f0       	breq	.+10     	; 0xa0a <test_ADC+0x60>
				pot_select = 4;
			else
				pot_select += -1;
     a00:	21 97       	sbiw	r28, 0x01	; 1
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <test_ADC+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <test_ADC+0x64>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     a0a:	c4 e0       	ldi	r28, 0x04	; 4
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     a0e:	8c 2f       	mov	r24, r28
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	43 e6       	ldi	r20, 0x63	; 99
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     a1c:	cc 9d       	mul	r28, r12
     a1e:	f0 01       	movw	r30, r0
     a20:	cd 9d       	mul	r28, r13
     a22:	f0 0d       	add	r31, r0
     a24:	dc 9d       	mul	r29, r12
     a26:	f0 0d       	add	r31, r0
     a28:	11 24       	eor	r1, r1
     a2a:	e8 0f       	add	r30, r24
     a2c:	f9 1f       	adc	r31, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	6f 2d       	mov	r22, r15
     a32:	41 2f       	mov	r20, r17
     a34:	2e 2d       	mov	r18, r14
     a36:	8f 01       	movw	r16, r30
     a38:	0e 94 29 04 	call	0x852	; 0x852 <postloop_functions>
	}
     a3c:	c7 cf       	rjmp	.-114    	; 0x9cc <test_ADC+0x22>

00000a3e <test_blank>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}
*/
void test_blank(){
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	initialize_hardware();
     a42:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	
	while(1){
		read_hardware();
     a46:	0e 94 c4 02 	call	0x588	; 0x588 <read_hardware>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	0e 94 29 04 	call	0x852	; 0x852 <postloop_functions>
     a5a:	f5 cf       	rjmp	.-22     	; 0xa46 <test_blank+0x8>

00000a5c <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	ae 97       	sbiw	r28, 0x2e	; 46
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     a6e:	de 01       	movw	r26, r28
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	e7 e2       	ldi	r30, 0x27	; 39
     a74:	f0 e2       	ldi	r31, 0x20	; 32
     a76:	20 e2       	ldi	r18, 0x20	; 32
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     a80:	20 91 00 08 	lds	r18, 0x0800
     a84:	2f 70       	andi	r18, 0x0F	; 15
     a86:	29 a3       	std	Y+33, r18	; 0x21
	volatile uint8_t new_clock_divide_select = 1;
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	2a a3       	std	Y+34, r18	; 0x22
	volatile uint32_t adjusted_count = 0;
     a8c:	1b a2       	std	Y+35, r1	; 0x23
     a8e:	1c a2       	std	Y+36, r1	; 0x24
     a90:	1d a2       	std	Y+37, r1	; 0x25
     a92:	1e a2       	std	Y+38, r1	; 0x26
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     a94:	9c 01       	movw	r18, r24
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	77 e8       	ldi	r23, 0x87	; 135
     a9e:	83 e9       	ldi	r24, 0x93	; 147
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     aa6:	2f a3       	std	Y+39, r18	; 0x27
     aa8:	38 a7       	std	Y+40, r19	; 0x28
     aaa:	49 a7       	std	Y+41, r20	; 0x29
     aac:	5a a7       	std	Y+42, r21	; 0x2a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     aae:	6f a1       	ldd	r22, Y+39	; 0x27
     ab0:	78 a5       	ldd	r23, Y+40	; 0x28
     ab2:	89 a5       	ldd	r24, Y+41	; 0x29
     ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ab6:	ea a1       	ldd	r30, Y+34	; 0x22
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	ec 0f       	add	r30, r28
     ac4:	fd 1f       	adc	r31, r29
     ac6:	21 81       	ldd	r18, Z+1	; 0x01
     ac8:	32 81       	ldd	r19, Z+2	; 0x02
     aca:	43 81       	ldd	r20, Z+3	; 0x03
     acc:	54 81       	ldd	r21, Z+4	; 0x04
     ace:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     ad2:	2b a7       	std	Y+43, r18	; 0x2b
     ad4:	3c a7       	std	Y+44, r19	; 0x2c
     ad6:	4d a7       	std	Y+45, r20	; 0x2d
     ad8:	5e a7       	std	Y+46, r21	; 0x2e
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     ada:	8b a5       	ldd	r24, Y+43	; 0x2b
     adc:	9c a5       	ldd	r25, Y+44	; 0x2c
     ade:	ad a5       	ldd	r26, Y+45	; 0x2d
     ae0:	be a5       	ldd	r27, Y+46	; 0x2e
     ae2:	80 30       	cpi	r24, 0x00	; 0
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	92 07       	cpc	r25, r18
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	a2 07       	cpc	r26, r18
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	b2 07       	cpc	r27, r18
     af0:	98 f1       	brcs	.+102    	; 0xb58 <BPM_to_TMR+0xfc>
		new_clock_divide_select++;             //try the next highest divider
     af2:	8a a1       	ldd	r24, Y+34	; 0x22
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     af8:	8a a1       	ldd	r24, Y+34	; 0x22
     afa:	88 30       	cpi	r24, 0x08	; 8
     afc:	40 f0       	brcs	.+16     	; 0xb0e <BPM_to_TMR+0xb2>
     afe:	a8 c0       	rjmp	.+336    	; 0xc50 <BPM_to_TMR+0x1f4>
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     b00:	8a a1       	ldd	r24, Y+34	; 0x22
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     b06:	8a a1       	ldd	r24, Y+34	; 0x22
     b08:	88 30       	cpi	r24, 0x08	; 8
     b0a:	20 f0       	brcs	.+8      	; 0xb14 <BPM_to_TMR+0xb8>
     b0c:	a1 c0       	rjmp	.+322    	; 0xc50 <BPM_to_TMR+0x1f4>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     b0e:	8e 01       	movw	r16, r28
     b10:	0f 5f       	subi	r16, 0xFF	; 255
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	6f a1       	ldd	r22, Y+39	; 0x27
     b16:	78 a5       	ldd	r23, Y+40	; 0x28
     b18:	89 a5       	ldd	r24, Y+41	; 0x29
     b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     b1c:	ea a1       	ldd	r30, Y+34	; 0x22
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	e0 0f       	add	r30, r16
     b2a:	f1 1f       	adc	r31, r17
     b2c:	20 81       	ld	r18, Z
     b2e:	31 81       	ldd	r19, Z+1	; 0x01
     b30:	42 81       	ldd	r20, Z+2	; 0x02
     b32:	53 81       	ldd	r21, Z+3	; 0x03
     b34:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     b38:	2b a7       	std	Y+43, r18	; 0x2b
     b3a:	3c a7       	std	Y+44, r19	; 0x2c
     b3c:	4d a7       	std	Y+45, r20	; 0x2d
     b3e:	5e a7       	std	Y+46, r21	; 0x2e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     b40:	8b a5       	ldd	r24, Y+43	; 0x2b
     b42:	9c a5       	ldd	r25, Y+44	; 0x2c
     b44:	ad a5       	ldd	r26, Y+45	; 0x2d
     b46:	be a5       	ldd	r27, Y+46	; 0x2e
     b48:	80 30       	cpi	r24, 0x00	; 0
     b4a:	e0 e0       	ldi	r30, 0x00	; 0
     b4c:	9e 07       	cpc	r25, r30
     b4e:	e1 e0       	ldi	r30, 0x01	; 1
     b50:	ae 07       	cpc	r26, r30
     b52:	e0 e0       	ldi	r30, 0x00	; 0
     b54:	be 07       	cpc	r27, r30
     b56:	a0 f6       	brcc	.-88     	; 0xb00 <BPM_to_TMR+0xa4>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     b58:	80 91 00 08 	lds	r24, 0x0800
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <BPM_to_TMR+0x106>
     b60:	6d c0       	rjmp	.+218    	; 0xc3c <BPM_to_TMR+0x1e0>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     b62:	99 a1       	ldd	r25, Y+33	; 0x21
     b64:	8a a1       	ldd	r24, Y+34	; 0x22
     b66:	98 17       	cp	r25, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <BPM_to_TMR+0x110>
     b6a:	66 c0       	rjmp	.+204    	; 0xc38 <BPM_to_TMR+0x1dc>
			TCC0.CTRLA = 0x00;
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
     b6e:	f8 e0       	ldi	r31, 0x08	; 8
     b70:	10 82       	st	Z, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     b72:	60 a1       	ldd	r22, Z+32	; 0x20
     b74:	71 a1       	ldd	r23, Z+33	; 0x21
     b76:	ea a1       	ldd	r30, Y+34	; 0x22
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	8e 01       	movw	r16, r28
     b84:	0f 5f       	subi	r16, 0xFF	; 255
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	e0 0f       	add	r30, r16
     b8a:	f1 1f       	adc	r31, r17
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	20 81       	ld	r18, Z
     b92:	31 81       	ldd	r19, Z+1	; 0x01
     b94:	42 81       	ldd	r20, Z+2	; 0x02
     b96:	53 81       	ldd	r21, Z+3	; 0x03
     b98:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__mulsi3>
     b9c:	6b a3       	std	Y+35, r22	; 0x23
     b9e:	7c a3       	std	Y+36, r23	; 0x24
     ba0:	8d a3       	std	Y+37, r24	; 0x25
     ba2:	9e a3       	std	Y+38, r25	; 0x26
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     ba4:	6b a1       	ldd	r22, Y+35	; 0x23
     ba6:	7c a1       	ldd	r23, Y+36	; 0x24
     ba8:	8d a1       	ldd	r24, Y+37	; 0x25
     baa:	9e a1       	ldd	r25, Y+38	; 0x26
     bac:	29 a1       	ldd	r18, Y+33	; 0x21
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	02 0f       	add	r16, r18
     bba:	13 1f       	adc	r17, r19
     bbc:	f8 01       	movw	r30, r16
     bbe:	20 81       	ld	r18, Z
     bc0:	31 81       	ldd	r19, Z+1	; 0x01
     bc2:	42 81       	ldd	r20, Z+2	; 0x02
     bc4:	53 81       	ldd	r21, Z+3	; 0x03
     bc6:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     bca:	2b a3       	std	Y+35, r18	; 0x23
     bcc:	3c a3       	std	Y+36, r19	; 0x24
     bce:	4d a3       	std	Y+37, r20	; 0x25
     bd0:	5e a3       	std	Y+38, r21	; 0x26
			while (adjusted_count > compare_value)
     bd2:	2b a1       	ldd	r18, Y+35	; 0x23
     bd4:	3c a1       	ldd	r19, Y+36	; 0x24
     bd6:	4d a1       	ldd	r20, Y+37	; 0x25
     bd8:	5e a1       	ldd	r21, Y+38	; 0x26
     bda:	8b a5       	ldd	r24, Y+43	; 0x2b
     bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bde:	ad a5       	ldd	r26, Y+45	; 0x2d
     be0:	be a5       	ldd	r27, Y+46	; 0x2e
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	a4 07       	cpc	r26, r20
     be8:	b5 07       	cpc	r27, r21
     bea:	e8 f4       	brcc	.+58     	; 0xc26 <BPM_to_TMR+0x1ca>
				adjusted_count = adjusted_count - compare_value;
     bec:	8b a1       	ldd	r24, Y+35	; 0x23
     bee:	9c a1       	ldd	r25, Y+36	; 0x24
     bf0:	ad a1       	ldd	r26, Y+37	; 0x25
     bf2:	be a1       	ldd	r27, Y+38	; 0x26
     bf4:	2b a5       	ldd	r18, Y+43	; 0x2b
     bf6:	3c a5       	ldd	r19, Y+44	; 0x2c
     bf8:	4d a5       	ldd	r20, Y+45	; 0x2d
     bfa:	5e a5       	ldd	r21, Y+46	; 0x2e
     bfc:	82 1b       	sub	r24, r18
     bfe:	93 0b       	sbc	r25, r19
     c00:	a4 0b       	sbc	r26, r20
     c02:	b5 0b       	sbc	r27, r21
     c04:	8b a3       	std	Y+35, r24	; 0x23
     c06:	9c a3       	std	Y+36, r25	; 0x24
     c08:	ad a3       	std	Y+37, r26	; 0x25
     c0a:	be a3       	std	Y+38, r27	; 0x26
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     c0c:	2b a1       	ldd	r18, Y+35	; 0x23
     c0e:	3c a1       	ldd	r19, Y+36	; 0x24
     c10:	4d a1       	ldd	r20, Y+37	; 0x25
     c12:	5e a1       	ldd	r21, Y+38	; 0x26
     c14:	8b a5       	ldd	r24, Y+43	; 0x2b
     c16:	9c a5       	ldd	r25, Y+44	; 0x2c
     c18:	ad a5       	ldd	r26, Y+45	; 0x2d
     c1a:	be a5       	ldd	r27, Y+46	; 0x2e
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	18 f3       	brcs	.-58     	; 0xbec <BPM_to_TMR+0x190>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     c26:	8b a1       	ldd	r24, Y+35	; 0x23
     c28:	9c a1       	ldd	r25, Y+36	; 0x24
     c2a:	ad a1       	ldd	r26, Y+37	; 0x25
     c2c:	be a1       	ldd	r27, Y+38	; 0x26
     c2e:	e0 e0       	ldi	r30, 0x00	; 0
     c30:	f8 e0       	ldi	r31, 0x08	; 8
     c32:	80 a3       	std	Z+32, r24	; 0x20
     c34:	91 a3       	std	Z+33, r25	; 0x21
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <BPM_to_TMR+0x1e0>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     c38:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
     c3e:	9c a5       	ldd	r25, Y+44	; 0x2c
     c40:	ad a5       	ldd	r26, Y+45	; 0x2d
     c42:	be a5       	ldd	r27, Y+46	; 0x2e
     c44:	e0 e0       	ldi	r30, 0x00	; 0
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	80 a7       	std	Z+40, r24	; 0x28
     c4a:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     c4c:	8a a1       	ldd	r24, Y+34	; 0x22
     c4e:	80 83       	st	Z, r24

	return;
}
     c50:	ae 96       	adiw	r28, 0x2e	; 46
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	ae 97       	sbiw	r28, 0x2e	; 46
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
     c72:	de 01       	movw	r26, r28
     c74:	11 96       	adiw	r26, 0x01	; 1
     c76:	e7 e0       	ldi	r30, 0x07	; 7
     c78:	f0 e2       	ldi	r31, 0x20	; 32
     c7a:	20 e2       	ldi	r18, 0x20	; 32
     c7c:	01 90       	ld	r0, Z+
     c7e:	0d 92       	st	X+, r0
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	e1 f7       	brne	.-8      	; 0xc7c <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     c84:	20 91 00 08 	lds	r18, 0x0800
     c88:	2f 70       	andi	r18, 0x0F	; 15
     c8a:	29 a3       	std	Y+33, r18	; 0x21
	volatile uint8_t new_clock_divide_select = 1;
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	2a a3       	std	Y+34, r18	; 0x22
	volatile uint32_t adjusted_count = 0;
     c90:	1b a2       	std	Y+35, r1	; 0x23
     c92:	1c a2       	std	Y+36, r1	; 0x24
     c94:	1d a2       	std	Y+37, r1	; 0x25
     c96:	1e a2       	std	Y+38, r1	; 0x26
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
     c98:	9c 01       	movw	r18, r24
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	78 ea       	ldi	r23, 0xA8	; 168
     ca2:	84 ed       	ldi	r24, 0xD4	; 212
     ca4:	95 e5       	ldi	r25, 0x55	; 85
     ca6:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     caa:	2f a3       	std	Y+39, r18	; 0x27
     cac:	38 a7       	std	Y+40, r19	; 0x28
     cae:	49 a7       	std	Y+41, r20	; 0x29
     cb0:	5a a7       	std	Y+42, r21	; 0x2a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     cb2:	6f a1       	ldd	r22, Y+39	; 0x27
     cb4:	78 a5       	ldd	r23, Y+40	; 0x28
     cb6:	89 a5       	ldd	r24, Y+41	; 0x29
     cb8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cba:	ea a1       	ldd	r30, Y+34	; 0x22
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ec 0f       	add	r30, r28
     cc8:	fd 1f       	adc	r31, r29
     cca:	21 81       	ldd	r18, Z+1	; 0x01
     ccc:	32 81       	ldd	r19, Z+2	; 0x02
     cce:	43 81       	ldd	r20, Z+3	; 0x03
     cd0:	54 81       	ldd	r21, Z+4	; 0x04
     cd2:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     cd6:	2b a7       	std	Y+43, r18	; 0x2b
     cd8:	3c a7       	std	Y+44, r19	; 0x2c
     cda:	4d a7       	std	Y+45, r20	; 0x2d
     cdc:	5e a7       	std	Y+46, r21	; 0x2e
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     cde:	8b a5       	ldd	r24, Y+43	; 0x2b
     ce0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ce2:	ad a5       	ldd	r26, Y+45	; 0x2d
     ce4:	be a5       	ldd	r27, Y+46	; 0x2e
     ce6:	80 30       	cpi	r24, 0x00	; 0
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	92 07       	cpc	r25, r18
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	a2 07       	cpc	r26, r18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	b2 07       	cpc	r27, r18
     cf4:	98 f1       	brcs	.+102    	; 0xd5c <BPM_to_TMR2+0xfc>
		new_clock_divide_select++;             //try the next highest divider
     cf6:	8a a1       	ldd	r24, Y+34	; 0x22
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     cfc:	8a a1       	ldd	r24, Y+34	; 0x22
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	40 f0       	brcs	.+16     	; 0xd12 <BPM_to_TMR2+0xb2>
     d02:	b5 c0       	rjmp	.+362    	; 0xe6e <BPM_to_TMR2+0x20e>
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     d04:	8a a1       	ldd	r24, Y+34	; 0x22
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	8a a3       	std	Y+34, r24	; 0x22
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     d0a:	8a a1       	ldd	r24, Y+34	; 0x22
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	20 f0       	brcs	.+8      	; 0xd18 <BPM_to_TMR2+0xb8>
     d10:	ae c0       	rjmp	.+348    	; 0xe6e <BPM_to_TMR2+0x20e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     d12:	8e 01       	movw	r16, r28
     d14:	0f 5f       	subi	r16, 0xFF	; 255
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	6f a1       	ldd	r22, Y+39	; 0x27
     d1a:	78 a5       	ldd	r23, Y+40	; 0x28
     d1c:	89 a5       	ldd	r24, Y+41	; 0x29
     d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d20:	ea a1       	ldd	r30, Y+34	; 0x22
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e0 0f       	add	r30, r16
     d2e:	f1 1f       	adc	r31, r17
     d30:	20 81       	ld	r18, Z
     d32:	31 81       	ldd	r19, Z+1	; 0x01
     d34:	42 81       	ldd	r20, Z+2	; 0x02
     d36:	53 81       	ldd	r21, Z+3	; 0x03
     d38:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     d3c:	2b a7       	std	Y+43, r18	; 0x2b
     d3e:	3c a7       	std	Y+44, r19	; 0x2c
     d40:	4d a7       	std	Y+45, r20	; 0x2d
     d42:	5e a7       	std	Y+46, r21	; 0x2e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     d44:	8b a5       	ldd	r24, Y+43	; 0x2b
     d46:	9c a5       	ldd	r25, Y+44	; 0x2c
     d48:	ad a5       	ldd	r26, Y+45	; 0x2d
     d4a:	be a5       	ldd	r27, Y+46	; 0x2e
     d4c:	80 30       	cpi	r24, 0x00	; 0
     d4e:	e0 e0       	ldi	r30, 0x00	; 0
     d50:	9e 07       	cpc	r25, r30
     d52:	e1 e0       	ldi	r30, 0x01	; 1
     d54:	ae 07       	cpc	r26, r30
     d56:	e0 e0       	ldi	r30, 0x00	; 0
     d58:	be 07       	cpc	r27, r30
     d5a:	a0 f6       	brcc	.-88     	; 0xd04 <BPM_to_TMR2+0xa4>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     d5c:	80 91 00 08 	lds	r24, 0x0800
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <BPM_to_TMR2+0x106>
     d64:	6d c0       	rjmp	.+218    	; 0xe40 <BPM_to_TMR2+0x1e0>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     d66:	99 a1       	ldd	r25, Y+33	; 0x21
     d68:	8a a1       	ldd	r24, Y+34	; 0x22
     d6a:	98 17       	cp	r25, r24
     d6c:	09 f4       	brne	.+2      	; 0xd70 <BPM_to_TMR2+0x110>
     d6e:	66 c0       	rjmp	.+204    	; 0xe3c <BPM_to_TMR2+0x1dc>
			TCC0.CTRLA = 0x00;
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f8 e0       	ldi	r31, 0x08	; 8
     d74:	10 82       	st	Z, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     d76:	60 a1       	ldd	r22, Z+32	; 0x20
     d78:	71 a1       	ldd	r23, Z+33	; 0x21
     d7a:	ea a1       	ldd	r30, Y+34	; 0x22
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	8e 01       	movw	r16, r28
     d88:	0f 5f       	subi	r16, 0xFF	; 255
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	e0 0f       	add	r30, r16
     d8e:	f1 1f       	adc	r31, r17
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	42 81       	ldd	r20, Z+2	; 0x02
     d9a:	53 81       	ldd	r21, Z+3	; 0x03
     d9c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__mulsi3>
     da0:	6b a3       	std	Y+35, r22	; 0x23
     da2:	7c a3       	std	Y+36, r23	; 0x24
     da4:	8d a3       	std	Y+37, r24	; 0x25
     da6:	9e a3       	std	Y+38, r25	; 0x26
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     da8:	6b a1       	ldd	r22, Y+35	; 0x23
     daa:	7c a1       	ldd	r23, Y+36	; 0x24
     dac:	8d a1       	ldd	r24, Y+37	; 0x25
     dae:	9e a1       	ldd	r25, Y+38	; 0x26
     db0:	29 a1       	ldd	r18, Y+33	; 0x21
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	02 0f       	add	r16, r18
     dbe:	13 1f       	adc	r17, r19
     dc0:	f8 01       	movw	r30, r16
     dc2:	20 81       	ld	r18, Z
     dc4:	31 81       	ldd	r19, Z+1	; 0x01
     dc6:	42 81       	ldd	r20, Z+2	; 0x02
     dc8:	53 81       	ldd	r21, Z+3	; 0x03
     dca:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
     dce:	2b a3       	std	Y+35, r18	; 0x23
     dd0:	3c a3       	std	Y+36, r19	; 0x24
     dd2:	4d a3       	std	Y+37, r20	; 0x25
     dd4:	5e a3       	std	Y+38, r21	; 0x26
			while (adjusted_count > compare_value)
     dd6:	2b a1       	ldd	r18, Y+35	; 0x23
     dd8:	3c a1       	ldd	r19, Y+36	; 0x24
     dda:	4d a1       	ldd	r20, Y+37	; 0x25
     ddc:	5e a1       	ldd	r21, Y+38	; 0x26
     dde:	8b a5       	ldd	r24, Y+43	; 0x2b
     de0:	9c a5       	ldd	r25, Y+44	; 0x2c
     de2:	ad a5       	ldd	r26, Y+45	; 0x2d
     de4:	be a5       	ldd	r27, Y+46	; 0x2e
     de6:	82 17       	cp	r24, r18
     de8:	93 07       	cpc	r25, r19
     dea:	a4 07       	cpc	r26, r20
     dec:	b5 07       	cpc	r27, r21
     dee:	e8 f4       	brcc	.+58     	; 0xe2a <BPM_to_TMR2+0x1ca>
				adjusted_count = adjusted_count - compare_value;
     df0:	8b a1       	ldd	r24, Y+35	; 0x23
     df2:	9c a1       	ldd	r25, Y+36	; 0x24
     df4:	ad a1       	ldd	r26, Y+37	; 0x25
     df6:	be a1       	ldd	r27, Y+38	; 0x26
     df8:	2b a5       	ldd	r18, Y+43	; 0x2b
     dfa:	3c a5       	ldd	r19, Y+44	; 0x2c
     dfc:	4d a5       	ldd	r20, Y+45	; 0x2d
     dfe:	5e a5       	ldd	r21, Y+46	; 0x2e
     e00:	82 1b       	sub	r24, r18
     e02:	93 0b       	sbc	r25, r19
     e04:	a4 0b       	sbc	r26, r20
     e06:	b5 0b       	sbc	r27, r21
     e08:	8b a3       	std	Y+35, r24	; 0x23
     e0a:	9c a3       	std	Y+36, r25	; 0x24
     e0c:	ad a3       	std	Y+37, r26	; 0x25
     e0e:	be a3       	std	Y+38, r27	; 0x26
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     e10:	2b a1       	ldd	r18, Y+35	; 0x23
     e12:	3c a1       	ldd	r19, Y+36	; 0x24
     e14:	4d a1       	ldd	r20, Y+37	; 0x25
     e16:	5e a1       	ldd	r21, Y+38	; 0x26
     e18:	8b a5       	ldd	r24, Y+43	; 0x2b
     e1a:	9c a5       	ldd	r25, Y+44	; 0x2c
     e1c:	ad a5       	ldd	r26, Y+45	; 0x2d
     e1e:	be a5       	ldd	r27, Y+46	; 0x2e
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	a4 07       	cpc	r26, r20
     e26:	b5 07       	cpc	r27, r21
     e28:	18 f3       	brcs	.-58     	; 0xdf0 <BPM_to_TMR2+0x190>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     e2a:	8b a1       	ldd	r24, Y+35	; 0x23
     e2c:	9c a1       	ldd	r25, Y+36	; 0x24
     e2e:	ad a1       	ldd	r26, Y+37	; 0x25
     e30:	be a1       	ldd	r27, Y+38	; 0x26
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f8 e0       	ldi	r31, 0x08	; 8
     e36:	80 a3       	std	Z+32, r24	; 0x20
     e38:	91 a3       	std	Z+33, r25	; 0x21
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <BPM_to_TMR2+0x1e0>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     e3c:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
     e40:	8b a5       	ldd	r24, Y+43	; 0x2b
     e42:	9c a5       	ldd	r25, Y+44	; 0x2c
     e44:	ad a5       	ldd	r26, Y+45	; 0x2d
     e46:	be a5       	ldd	r27, Y+46	; 0x2e
     e48:	e0 e0       	ldi	r30, 0x00	; 0
     e4a:	f8 e0       	ldi	r31, 0x08	; 8
     e4c:	80 a7       	std	Z+40, r24	; 0x28
     e4e:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
     e50:	8b a5       	ldd	r24, Y+43	; 0x2b
     e52:	9c a5       	ldd	r25, Y+44	; 0x2c
     e54:	ad a5       	ldd	r26, Y+45	; 0x2d
     e56:	be a5       	ldd	r27, Y+46	; 0x2e
     e58:	68 e1       	ldi	r22, 0x18	; 24
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 16 14 	call	0x282c	; 0x282c <__udivmodhi4>
     e60:	66 a7       	std	Z+46, r22	; 0x2e
     e62:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
     e64:	81 81       	ldd	r24, Z+1	; 0x01
     e66:	80 69       	ori	r24, 0x90	; 144
     e68:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     e6a:	8a a1       	ldd	r24, Y+34	; 0x22
     e6c:	80 83       	st	Z, r24

	return;
}
     e6e:	ae 96       	adiw	r28, 0x2e	; 46
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <main>:
	
}
*/
int main(void) {

	initialize_hardware();
     e7e:	0e 94 44 02 	call	0x488	; 0x488 <initialize_hardware>
	serial_midi_init();
     e82:	0e 94 0d 09 	call	0x121a	; 0x121a <serial_midi_init>
	
	while(1){
		midi_device_process(serial_midi_device());
     e86:	0e 94 9c 07 	call	0xf38	; 0xf38 <serial_midi_device>
     e8a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <midi_device_process>
     e8e:	fb cf       	rjmp	.-10     	; 0xe86 <main+0x8>

00000e90 <serial_midi_send>:

uint8_t get_next_velocity(){
	
}

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     e90:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     e92:	e0 eb       	ldi	r30, 0xB0	; 176
     e94:	f9 e0       	ldi	r31, 0x09	; 9
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	85 ff       	sbrs	r24, 5
     e9a:	fd cf       	rjmp	.-6      	; 0xe96 <serial_midi_send+0x6>
	USARTD1.DATA = inByte0;
     e9c:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     ea0:	62 30       	cpi	r22, 0x02	; 2
     ea2:	38 f0       	brcs	.+14     	; 0xeb2 <serial_midi_send+0x22>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     ea4:	e0 eb       	ldi	r30, 0xB0	; 176
     ea6:	f9 e0       	ldi	r31, 0x09	; 9
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	85 ff       	sbrs	r24, 5
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <serial_midi_send+0x18>
      USARTD1.DATA = inByte1;
     eae:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     eb2:	63 30       	cpi	r22, 0x03	; 3
     eb4:	39 f4       	brne	.+14     	; 0xec4 <serial_midi_send+0x34>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     eb6:	e0 eb       	ldi	r30, 0xB0	; 176
     eb8:	f9 e0       	ldi	r31, 0x09	; 9
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	85 ff       	sbrs	r24, 5
     ebe:	fd cf       	rjmp	.-6      	; 0xeba <serial_midi_send+0x2a>
      USARTD1.DATA = inByte2;
     ec0:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <generic_callback>:
   return serial_midi_device();
}



void generic_callback(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     ec8:	0f 93       	push	r16
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	27 97       	sbiw	r28, 0x07	; 7
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	de bf       	out	0x3e, r29	; 62
    volatile uint8_t i = cnt;
     ed8:	6c 83       	std	Y+4, r22	; 0x04
     eda:	49 83       	std	Y+1, r20	; 0x01
     edc:	2a 83       	std	Y+2, r18	; 0x02
     ede:	0b 83       	std	Y+3, r16	; 0x03
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
     ee0:	de 01       	movw	r26, r28
     ee2:	15 96       	adiw	r26, 0x05	; 5
     ee4:	fe 01       	movw	r30, r28
     ee6:	31 96       	adiw	r30, 0x01	; 1
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	01 90       	ld	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	e1 f7       	brne	.-8      	; 0xeea <generic_callback+0x22>

     ef2:	27 96       	adiw	r28, 0x07	; 7
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <__vector_16>:
#define MIDI_CHAN 0

static MidiDevice midi_device;


ISR(TCC0_CCA_vect){
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
	TCC0.CNT = 0;      //reset beat clock
     f0e:	e0 e0       	ldi	r30, 0x00	; 0
     f10:	f8 e0       	ldi	r31, 0x08	; 8
     f12:	10 a2       	std	Z+32, r1	; 0x20
     f14:	11 a2       	std	Z+33, r1	; 0x21
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_19>:
ISR(TCC0_CCC_vect){
	midi_send_noteoff(serial_midi_device(), MIDI_CHAN, get_current_pitch(), get_current_velocity());
	TCC0.CTRLB &= ~0x40;  //disable CCC (note off)
}

ISR(TCC0_CCD_vect){
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
	//midi_send_clock(serial_midi_device());  //send clock tick
	//calculate time for next clock tick
}
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <serial_midi_device>:
   }
}

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
     f38:	8a ea       	ldi	r24, 0xAA	; 170
     f3a:	91 e2       	ldi	r25, 0x21	; 33
     f3c:	08 95       	ret

00000f3e <__vector_18>:
	
	TCC0.CTRLB |= 0x20;   //enable CCB (note on) interrupt
	TCC0.CTRLB |= 0x40;   //enable CCC (note off) interrupt
}

ISR(TCC0_CCC_vect){
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	2f 93       	push	r18
     f4a:	3f 93       	push	r19
     f4c:	4f 93       	push	r20
     f4e:	5f 93       	push	r21
     f50:	6f 93       	push	r22
     f52:	7f 93       	push	r23
     f54:	8f 93       	push	r24
     f56:	9f 93       	push	r25
     f58:	af 93       	push	r26
     f5a:	bf 93       	push	r27
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
	midi_send_noteoff(serial_midi_device(), MIDI_CHAN, get_current_pitch(), get_current_velocity());
     f60:	0e 94 9c 07 	call	0xf38	; 0xf38 <serial_midi_device>
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	0e 94 1f 0a 	call	0x143e	; 0x143e <midi_send_noteoff>
	TCC0.CTRLB &= ~0x40;  //disable CCC (note off)
     f6e:	e0 e0       	ldi	r30, 0x00	; 0
     f70:	f8 e0       	ldi	r31, 0x08	; 8
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	8f 7b       	andi	r24, 0xBF	; 191
     f76:	81 83       	std	Z+1, r24	; 0x01
}
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_17>:

ISR(TCC0_CCA_vect){
	TCC0.CNT = 0;      //reset beat clock
}

ISR(TCC0_CCB_vect){
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	6f 93       	push	r22
     fb6:	7f 93       	push	r23
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	ca 54       	subi	r28, 0x4A	; 74
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
	TCC0.CTRLB &= ~0x20;  //disable CCB and CCC interrupts
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f8 e0       	ldi	r31, 0x08	; 8
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLB &= ~0x40;
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	8f 7b       	andi	r24, 0xBF	; 191
     fe2:	81 83       	std	Z+1, r24	; 0x01
	
	midi_send_noteon(serial_midi_device(),MIDI_CHAN, get_next_pitch(), get_next_velocity());
     fe4:	0e 94 9c 07 	call	0xf38	; 0xf38 <serial_midi_device>
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	0e 94 0e 0a 	call	0x141c	; 0x141c <midi_send_noteon>
	
	configure_note_timing(get_pot_value(1,0,7), get_pot_value(0, 10, 0xFFFF));
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	47 e0       	ldi	r20, 0x07	; 7
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
    1002:	e8 2e       	mov	r14, r24
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	6a e0       	ldi	r22, 0x0A	; 10
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
    1014:	8c 01       	movw	r16, r24
	TCC0.INTCTRLB = 0x5B;  //enable CCA interrupt Hi-Level, CCB low, CCC mid, CCD low
    TCC0.CNT = 0;          //reset counter
}

static void configure_note_timing(note_division division, uint16_t duration){
	const uint32_t division_numerator[8]   = {1, 2, 3, 1, 1, 3, 1, 1};
    1016:	de 01       	movw	r26, r28
    1018:	1b 96       	adiw	r26, 0x0b	; 11
    101a:	e7 e6       	ldi	r30, 0x67	; 103
    101c:	f0 e2       	ldi	r31, 0x20	; 32
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	01 90       	ld	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	81 50       	subi	r24, 0x01	; 1
    1026:	e1 f7       	brne	.-8      	; 0x1020 <__vector_17+0x86>
	const uint32_t division_denominator[8] = {1, 3, 4, 2, 3, 8, 4, 6};
    1028:	de 01       	movw	r26, r28
    102a:	9b 96       	adiw	r26, 0x2b	; 43
    102c:	e7 e4       	ldi	r30, 0x47	; 71
    102e:	f0 e2       	ldi	r31, 0x20	; 32
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	01 90       	ld	r0, Z+
    1034:	0d 92       	st	X+, r0
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	e1 f7       	brne	.-8      	; 0x1032 <__vector_17+0x98>
//  b= d (3/2) / x (1) / t (2/3)
//  note length = a^-2 * 2/3^(b-1)   ... too complicated, just make a lookup table/array
	

	
	current_time = TCC0.CNT;    //log current time
    103a:	e0 e0       	ldi	r30, 0x00	; 0
    103c:	f8 e0       	ldi	r31, 0x08	; 8
    103e:	80 a1       	ldd	r24, Z+32	; 0x20
    1040:	91 a1       	ldd	r25, Z+33	; 0x21
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02

	next_note_on_time = TCC0.CCA * division_numerator[division];       //calculate the new length for Compare B (interrupt for new note)
    1046:	60 a5       	ldd	r22, Z+40	; 0x28
    1048:	71 a5       	ldd	r23, Z+41	; 0x29
    104a:	8e 2d       	mov	r24, r14
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	7e 01       	movw	r14, r28
    1058:	08 94       	sec
    105a:	e1 1c       	adc	r14, r1
    105c:	f1 1c       	adc	r15, r1
    105e:	e8 0e       	add	r14, r24
    1060:	f9 1e       	adc	r15, r25
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	f7 01       	movw	r30, r14
    1068:	22 85       	ldd	r18, Z+10	; 0x0a
    106a:	33 85       	ldd	r19, Z+11	; 0x0b
    106c:	44 85       	ldd	r20, Z+12	; 0x0c
    106e:	55 85       	ldd	r21, Z+13	; 0x0d
    1070:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__mulsi3>
    1074:	6b 83       	std	Y+3, r22	; 0x03
    1076:	7c 83       	std	Y+4, r23	; 0x04
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	9e 83       	std	Y+6, r25	; 0x06
	next_note_on_time = next_note_on_time / division_denominator[division];
    107c:	6b 81       	ldd	r22, Y+3	; 0x03
    107e:	7c 81       	ldd	r23, Y+4	; 0x04
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	f7 01       	movw	r30, r14
    1086:	22 a5       	ldd	r18, Z+42	; 0x2a
    1088:	33 a5       	ldd	r19, Z+43	; 0x2b
    108a:	44 a5       	ldd	r20, Z+44	; 0x2c
    108c:	55 a5       	ldd	r21, Z+45	; 0x2d
    108e:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
    1092:	2b 83       	std	Y+3, r18	; 0x03
    1094:	3c 83       	std	Y+4, r19	; 0x04
    1096:	4d 83       	std	Y+5, r20	; 0x05
    1098:	5e 83       	std	Y+6, r21	; 0x06
	
	next_cutoff_time = next_note_on_time * duration;                  //calculate the new length for Compare C (interrupt for note off)
    109a:	2b 81       	ldd	r18, Y+3	; 0x03
    109c:	3c 81       	ldd	r19, Y+4	; 0x04
    109e:	4d 81       	ldd	r20, Y+5	; 0x05
    10a0:	5e 81       	ldd	r21, Y+6	; 0x06
    10a2:	b8 01       	movw	r22, r16
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__mulsi3>
    10ac:	6f 83       	std	Y+7, r22	; 0x07
    10ae:	78 87       	std	Y+8, r23	; 0x08
    10b0:	89 87       	std	Y+9, r24	; 0x09
    10b2:	9a 87       	std	Y+10, r25	; 0x0a
	next_cutoff_time = next_cutoff_time / 0xFFFF;
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	2f ef       	ldi	r18, 0xFF	; 255
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 3d 14 	call	0x287a	; 0x287a <__udivmodsi4>
    10c8:	2f 83       	std	Y+7, r18	; 0x07
    10ca:	38 87       	std	Y+8, r19	; 0x08
    10cc:	49 87       	std	Y+9, r20	; 0x09
    10ce:	5a 87       	std	Y+10, r21	; 0x0a
	
	if (next_cutoff_time > next_note_on_time)                         //ensure the note cuts off before the next note
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	49 85       	ldd	r20, Y+9	; 0x09
    10d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	ad 81       	ldd	r26, Y+5	; 0x05
    10de:	be 81       	ldd	r27, Y+6	; 0x06
    10e0:	82 17       	cp	r24, r18
    10e2:	93 07       	cpc	r25, r19
    10e4:	a4 07       	cpc	r26, r20
    10e6:	b5 07       	cpc	r27, r21
    10e8:	58 f4       	brcc	.+22     	; 0x1100 <__vector_17+0x166>
		next_cutoff_time = next_note_on_time - 10;
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	ad 81       	ldd	r26, Y+5	; 0x05
    10f0:	be 81       	ldd	r27, Y+6	; 0x06
    10f2:	0a 97       	sbiw	r24, 0x0a	; 10
    10f4:	a1 09       	sbc	r26, r1
    10f6:	b1 09       	sbc	r27, r1
    10f8:	8f 83       	std	Y+7, r24	; 0x07
    10fa:	98 87       	std	Y+8, r25	; 0x08
    10fc:	a9 87       	std	Y+9, r26	; 0x09
    10fe:	ba 87       	std	Y+10, r27	; 0x0a
	
	next_cutoff_time += current_time;                                 //add current time to Compare C for final value, check for overflow
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	2f 81       	ldd	r18, Y+7	; 0x07
    1106:	38 85       	ldd	r19, Y+8	; 0x08
    1108:	49 85       	ldd	r20, Y+9	; 0x09
    110a:	5a 85       	ldd	r21, Y+10	; 0x0a
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	a4 1f       	adc	r26, r20
    1116:	b5 1f       	adc	r27, r21
    1118:	8f 83       	std	Y+7, r24	; 0x07
    111a:	98 87       	std	Y+8, r25	; 0x08
    111c:	a9 87       	std	Y+9, r26	; 0x09
    111e:	ba 87       	std	Y+10, r27	; 0x0a
	if (next_cutoff_time > TCC0.CCA)
    1120:	e0 e0       	ldi	r30, 0x00	; 0
    1122:	f8 e0       	ldi	r31, 0x08	; 8
    1124:	20 a5       	ldd	r18, Z+40	; 0x28
    1126:	31 a5       	ldd	r19, Z+41	; 0x29
    1128:	8f 81       	ldd	r24, Y+7	; 0x07
    112a:	98 85       	ldd	r25, Y+8	; 0x08
    112c:	a9 85       	ldd	r26, Y+9	; 0x09
    112e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	4a 07       	cpc	r20, r26
    113a:	5b 07       	cpc	r21, r27
    113c:	80 f4       	brcc	.+32     	; 0x115e <__vector_17+0x1c4>
		next_cutoff_time = next_cutoff_time - TCC0.CCA;
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	a9 85       	ldd	r26, Y+9	; 0x09
    1144:	ba 85       	ldd	r27, Y+10	; 0x0a
    1146:	20 a5       	ldd	r18, Z+40	; 0x28
    1148:	31 a5       	ldd	r19, Z+41	; 0x29
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	82 1b       	sub	r24, r18
    1150:	93 0b       	sbc	r25, r19
    1152:	a4 0b       	sbc	r26, r20
    1154:	b5 0b       	sbc	r27, r21
    1156:	8f 83       	std	Y+7, r24	; 0x07
    1158:	98 87       	std	Y+8, r25	; 0x08
    115a:	a9 87       	std	Y+9, r26	; 0x09
    115c:	ba 87       	std	Y+10, r27	; 0x0a
	
	next_note_on_time += current_time;                                //add current time to Compare C for final value, check for overflow
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	4d 81       	ldd	r20, Y+5	; 0x05
    1168:	5e 81       	ldd	r21, Y+6	; 0x06
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	a4 1f       	adc	r26, r20
    1174:	b5 1f       	adc	r27, r21
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	ad 83       	std	Y+5, r26	; 0x05
    117c:	be 83       	std	Y+6, r27	; 0x06
	if (next_note_on_time > TCC0.CCA)    //the counter will reset at CCA, so check for overflow
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f8 e0       	ldi	r31, 0x08	; 8
    1182:	20 a5       	ldd	r18, Z+40	; 0x28
    1184:	31 a5       	ldd	r19, Z+41	; 0x29
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	ad 81       	ldd	r26, Y+5	; 0x05
    118c:	be 81       	ldd	r27, Y+6	; 0x06
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	28 17       	cp	r18, r24
    1194:	39 07       	cpc	r19, r25
    1196:	4a 07       	cpc	r20, r26
    1198:	5b 07       	cpc	r21, r27
    119a:	80 f4       	brcc	.+32     	; 0x11bc <__vector_17+0x222>
		next_note_on_time = next_note_on_time - TCC0.CCA;
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	ad 81       	ldd	r26, Y+5	; 0x05
    11a2:	be 81       	ldd	r27, Y+6	; 0x06
    11a4:	20 a5       	ldd	r18, Z+40	; 0x28
    11a6:	31 a5       	ldd	r19, Z+41	; 0x29
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	82 1b       	sub	r24, r18
    11ae:	93 0b       	sbc	r25, r19
    11b0:	a4 0b       	sbc	r26, r20
    11b2:	b5 0b       	sbc	r27, r21
    11b4:	8b 83       	std	Y+3, r24	; 0x03
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	ad 83       	std	Y+5, r26	; 0x05
    11ba:	be 83       	std	Y+6, r27	; 0x06
		
	TCC0.CCB = (uint16_t) next_note_on_time;    //set compare B to new value
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	ad 81       	ldd	r26, Y+5	; 0x05
    11c2:	be 81       	ldd	r27, Y+6	; 0x06
    11c4:	e0 e0       	ldi	r30, 0x00	; 0
    11c6:	f8 e0       	ldi	r31, 0x08	; 8
    11c8:	82 a7       	std	Z+42, r24	; 0x2a
    11ca:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCC = (uint16_t) next_cutoff_time;     //set compare C to new value
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	98 85       	ldd	r25, Y+8	; 0x08
    11d0:	a9 85       	ldd	r26, Y+9	; 0x09
    11d2:	ba 85       	ldd	r27, Y+10	; 0x0a
    11d4:	84 a7       	std	Z+44, r24	; 0x2c
    11d6:	95 a7       	std	Z+45, r25	; 0x2d
	
	midi_send_noteon(serial_midi_device(),MIDI_CHAN, get_next_pitch(), get_next_velocity());
	
	configure_note_timing(get_pot_value(1,0,7), get_pot_value(0, 10, 0xFFFF));
	
	TCC0.CTRLB |= 0x20;   //enable CCB (note on) interrupt
    11d8:	81 81       	ldd	r24, Z+1	; 0x01
    11da:	80 62       	ori	r24, 0x20	; 32
    11dc:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLB |= 0x40;   //enable CCC (note off) interrupt
    11de:	81 81       	ldd	r24, Z+1	; 0x01
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	81 83       	std	Z+1, r24	; 0x01
}
    11e4:	c6 5b       	subi	r28, 0xB6	; 182
    11e6:	df 4f       	sbci	r29, 0xFF	; 255
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <serial_midi_init>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}

MidiDevice* serial_midi_init(){
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
    121e:	ca ea       	ldi	r28, 0xAA	; 170
    1220:	d1 e2       	ldi	r29, 0x21	; 33
    1222:	ce 01       	movw	r24, r28
    1224:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
    1228:	ce 01       	movw	r24, r28
    122a:	68 e4       	ldi	r22, 0x48	; 72
    122c:	77 e0       	ldi	r23, 0x07	; 7
    122e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <midi_device_set_send_func>
   midi_register_catchall_callback(&midi_device, generic_callback);
    1232:	ce 01       	movw	r24, r28
    1234:	64 e6       	ldi	r22, 0x64	; 100
    1236:	77 e0       	ldi	r23, 0x07	; 7
    1238:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <midi_register_catchall_callback>
	for (i = 0; i < 128; i++)
		midi_send_noteoff(serial_midi_device(),MIDI_CHAN,i, 0);
}

static void initialize_note_timer(){
	TCC0.CTRLA = 0x00;  //disable timer
    123c:	e0 e0       	ldi	r30, 0x00	; 0
    123e:	f8 e0       	ldi	r31, 0x08	; 8
    1240:	10 82       	st	Z, r1
	TCC0.CTRLB = 0x00;  //disable all compares
    1242:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLC = 0x00;
    1244:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
    1246:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTFLAGS = 0x00;  //clear interrupt flags
    1248:	14 86       	std	Z+12, r1	; 0x0c
	TCC0.INTCTRLA = 0x00;
    124a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x5B;  //enable CCA interrupt Hi-Level, CCB low, CCC mid, CCD low
    124c:	8b e5       	ldi	r24, 0x5B	; 91
    124e:	87 83       	std	Z+7, r24	; 0x07
    TCC0.CNT = 0;          //reset counter
    1250:	10 a2       	std	Z+32, r1	; 0x20
    1252:	11 a2       	std	Z+33, r1	; 0x21
   midi_register_catchall_callback(&midi_device, generic_callback);
   
   initialize_note_timer();
 //  send_all_notes_off();

   return serial_midi_device();
    1254:	0e 94 9c 07 	call	0xf38	; 0xf38 <serial_midi_device>
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    125e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1260:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1262:	63 83       	std	Z+3, r22	; 0x03
    1264:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    1266:	11 82       	std	Z+1, r1	; 0x01
    1268:	10 82       	st	Z, r1
}
    126a:	08 95       	ret

0000126c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
    1274:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1276:	0e 94 a6 09 	call	0x134c	; 0x134c <store_and_clear_interrupt>
    127a:	e8 2f       	mov	r30, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    127c:	f9 81       	ldd	r31, Y+1	; 0x01
    127e:	2f 2f       	mov	r18, r31
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	6a 81       	ldd	r22, Y+2	; 0x02
    1288:	c9 01       	movw	r24, r18
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    1290:	28 81       	ld	r18, Y
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	82 17       	cp	r24, r18
    1296:	93 07       	cpc	r25, r19
    1298:	29 f4       	brne	.+10     	; 0x12a4 <bytequeue_enqueue+0x38>
      restore_interrupt_setting(setting);
    129a:	8e 2f       	mov	r24, r30
    129c:	0e 94 a9 09 	call	0x1352	; 0x1352 <restore_interrupt_setting>
      return false;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	11 c0       	rjmp	.+34     	; 0x12c6 <bytequeue_enqueue+0x5a>
   } else {
      queue->data[queue->end] = item;
    12a4:	ab 81       	ldd	r26, Y+3	; 0x03
    12a6:	bc 81       	ldd	r27, Y+4	; 0x04
    12a8:	af 0f       	add	r26, r31
    12aa:	b1 1d       	adc	r27, r1
    12ac:	1c 93       	st	X, r17
      queue->end = (queue->end + 1) % queue->length;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	6a 81       	ldd	r22, Y+2	; 0x02
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    12bc:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    12be:	8e 2f       	mov	r24, r30
    12c0:	0e 94 a9 09 	call	0x1352	; 0x1352 <restore_interrupt_setting>
      return true;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	08 95       	ret

000012ce <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    12d6:	0e 94 a6 09 	call	0x134c	; 0x134c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    12da:	19 81       	ldd	r17, Y+1	; 0x01
    12dc:	98 81       	ld	r25, Y
    12de:	19 17       	cp	r17, r25
    12e0:	10 f0       	brcs	.+4      	; 0x12e6 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    12e2:	19 1b       	sub	r17, r25
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    12e6:	2a 81       	ldd	r18, Y+2	; 0x02
    12e8:	12 0f       	add	r17, r18
    12ea:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    12ec:	0e 94 a9 09 	call	0x1352	; 0x1352 <restore_interrupt_setting>
   return len;
}
    12f0:	81 2f       	mov	r24, r17
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	08 95       	ret

000012fa <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    12fa:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    12fc:	80 81       	ld	r24, Z
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	86 0f       	add	r24, r22
    1302:	91 1d       	adc	r25, r1
    1304:	62 81       	ldd	r22, Z+2	; 0x02
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    130c:	03 80       	ldd	r0, Z+3	; 0x03
    130e:	f4 81       	ldd	r31, Z+4	; 0x04
    1310:	e0 2d       	mov	r30, r0
    1312:	e8 0f       	add	r30, r24
    1314:	f9 1f       	adc	r31, r25
}
    1316:	80 81       	ld	r24, Z
    1318:	08 95       	ret

0000131a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1324:	0e 94 a6 09 	call	0x134c	; 0x134c <store_and_clear_interrupt>
    1328:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    132a:	28 81       	ld	r18, Y
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	21 0f       	add	r18, r17
    1330:	31 1d       	adc	r19, r1
    1332:	6a 81       	ldd	r22, Y+2	; 0x02
    1334:	c9 01       	movw	r24, r18
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    133c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    133e:	84 2f       	mov	r24, r20
    1340:	0e 94 a9 09 	call	0x1352	; 0x1352 <restore_interrupt_setting>
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	08 95       	ret

0000134c <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    134c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    134e:	f8 94       	cli
    return sreg;
}
    1350:	08 95       	ret

00001352 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    1352:	8f bf       	out	0x3f, r24	; 63
}
    1354:	08 95       	ret

00001356 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1356:	88 1f       	adc	r24, r24
    1358:	88 27       	eor	r24, r24
    135a:	88 1f       	adc	r24, r24
    135c:	08 95       	ret

0000135e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	88 3f       	cpi	r24, 0xF8	; 248
    1362:	08 f4       	brcc	.+2      	; 0x1366 <midi_is_realtime+0x8>
    1364:	90 e0       	ldi	r25, 0x00	; 0
}
    1366:	89 2f       	mov	r24, r25
    1368:	08 95       	ret

0000136a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	20 7f       	andi	r18, 0xF0	; 240
    1370:	30 70       	andi	r19, 0x00	; 0
    1372:	20 3c       	cpi	r18, 0xC0	; 192
    1374:	31 05       	cpc	r19, r1
    1376:	e9 f1       	breq	.+122    	; 0x13f2 <midi_packet_length+0x88>
    1378:	21 3c       	cpi	r18, 0xC1	; 193
    137a:	31 05       	cpc	r19, r1
    137c:	8c f4       	brge	.+34     	; 0x13a0 <midi_packet_length+0x36>
    137e:	20 39       	cpi	r18, 0x90	; 144
    1380:	31 05       	cpc	r19, r1
    1382:	e1 f0       	breq	.+56     	; 0x13bc <midi_packet_length+0x52>
    1384:	21 39       	cpi	r18, 0x91	; 145
    1386:	31 05       	cpc	r19, r1
    1388:	24 f4       	brge	.+8      	; 0x1392 <midi_packet_length+0x28>
    138a:	20 38       	cpi	r18, 0x80	; 128
    138c:	31 05       	cpc	r19, r1
    138e:	79 f5       	brne	.+94     	; 0x13ee <midi_packet_length+0x84>
    1390:	15 c0       	rjmp	.+42     	; 0x13bc <midi_packet_length+0x52>
    1392:	20 3a       	cpi	r18, 0xA0	; 160
    1394:	31 05       	cpc	r19, r1
    1396:	91 f0       	breq	.+36     	; 0x13bc <midi_packet_length+0x52>
    1398:	20 3b       	cpi	r18, 0xB0	; 176
    139a:	31 05       	cpc	r19, r1
    139c:	41 f5       	brne	.+80     	; 0x13ee <midi_packet_length+0x84>
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <midi_packet_length+0x52>
    13a0:	20 3e       	cpi	r18, 0xE0	; 224
    13a2:	31 05       	cpc	r19, r1
    13a4:	59 f0       	breq	.+22     	; 0x13bc <midi_packet_length+0x52>
    13a6:	21 3e       	cpi	r18, 0xE1	; 225
    13a8:	31 05       	cpc	r19, r1
    13aa:	24 f4       	brge	.+8      	; 0x13b4 <midi_packet_length+0x4a>
    13ac:	20 3d       	cpi	r18, 0xD0	; 208
    13ae:	31 05       	cpc	r19, r1
    13b0:	f1 f4       	brne	.+60     	; 0x13ee <midi_packet_length+0x84>
    13b2:	1f c0       	rjmp	.+62     	; 0x13f2 <midi_packet_length+0x88>
    13b4:	20 3f       	cpi	r18, 0xF0	; 240
    13b6:	31 05       	cpc	r19, r1
    13b8:	d1 f4       	brne	.+52     	; 0x13ee <midi_packet_length+0x84>
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
      case 0xF0:
         switch(status) {
    13c0:	86 3f       	cpi	r24, 0xF6	; 246
    13c2:	79 f0       	breq	.+30     	; 0x13e2 <midi_packet_length+0x78>
    13c4:	87 3f       	cpi	r24, 0xF7	; 247
    13c6:	38 f4       	brcc	.+14     	; 0x13d6 <midi_packet_length+0x6c>
    13c8:	82 3f       	cpi	r24, 0xF2	; 242
    13ca:	a9 f0       	breq	.+42     	; 0x13f6 <midi_packet_length+0x8c>
    13cc:	83 3f       	cpi	r24, 0xF3	; 243
    13ce:	59 f0       	breq	.+22     	; 0x13e6 <midi_packet_length+0x7c>
    13d0:	81 3f       	cpi	r24, 0xF1	; 241
    13d2:	59 f4       	brne	.+22     	; 0x13ea <midi_packet_length+0x80>
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <midi_packet_length+0x7c>
    13d6:	88 3f       	cpi	r24, 0xF8	; 248
    13d8:	40 f0       	brcs	.+16     	; 0x13ea <midi_packet_length+0x80>
    13da:	8d 3f       	cpi	r24, 0xFD	; 253
    13dc:	10 f0       	brcs	.+4      	; 0x13e2 <midi_packet_length+0x78>
    13de:	8e 3f       	cpi	r24, 0xFE	; 254
    13e0:	20 f0       	brcs	.+8      	; 0x13ea <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO;
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	08 95       	ret
         }
      default:
         return UNDEFINED;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
            case MIDI_SONGPOSITION:
               return THREE;
    13f6:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    13f8:	08 95       	ret

000013fa <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    13fa:	0f 93       	push	r16
    13fc:	34 2f       	mov	r19, r20
    13fe:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1400:	46 2f       	mov	r20, r22
    1402:	4f 70       	andi	r20, 0x0F	; 15
    1404:	40 6b       	ori	r20, 0xB0	; 176
    1406:	23 2f       	mov	r18, r19
    1408:	2f 77       	andi	r18, 0x7F	; 127
    140a:	0f 77       	andi	r16, 0x7F	; 127
    140c:	dc 01       	movw	r26, r24
    140e:	ed 91       	ld	r30, X+
    1410:	fc 91       	ld	r31, X
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    141c:	0f 93       	push	r16
    141e:	34 2f       	mov	r19, r20
    1420:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1422:	46 2f       	mov	r20, r22
    1424:	4f 70       	andi	r20, 0x0F	; 15
    1426:	40 69       	ori	r20, 0x90	; 144
    1428:	23 2f       	mov	r18, r19
    142a:	2f 77       	andi	r18, 0x7F	; 127
    142c:	0f 77       	andi	r16, 0x7F	; 127
    142e:	dc 01       	movw	r26, r24
    1430:	ed 91       	ld	r30, X+
    1432:	fc 91       	ld	r31, X
    1434:	63 e0       	ldi	r22, 0x03	; 3
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    143e:	0f 93       	push	r16
    1440:	34 2f       	mov	r19, r20
    1442:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1444:	46 2f       	mov	r20, r22
    1446:	4f 70       	andi	r20, 0x0F	; 15
    1448:	40 68       	ori	r20, 0x80	; 128
    144a:	23 2f       	mov	r18, r19
    144c:	2f 77       	andi	r18, 0x7F	; 127
    144e:	0f 77       	andi	r16, 0x7F	; 127
    1450:	dc 01       	movw	r26, r24
    1452:	ed 91       	ld	r30, X+
    1454:	fc 91       	ld	r31, X
    1456:	63 e0       	ldi	r22, 0x03	; 3
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1460:	0f 93       	push	r16
    1462:	34 2f       	mov	r19, r20
    1464:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1466:	46 2f       	mov	r20, r22
    1468:	4f 70       	andi	r20, 0x0F	; 15
    146a:	40 6a       	ori	r20, 0xA0	; 160
    146c:	23 2f       	mov	r18, r19
    146e:	2f 77       	andi	r18, 0x7F	; 127
    1470:	0f 77       	andi	r16, 0x7F	; 127
    1472:	dc 01       	movw	r26, r24
    1474:	ed 91       	ld	r30, X+
    1476:	fc 91       	ld	r31, X
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1486:	20 e2       	ldi	r18, 0x20	; 32
    1488:	40 30       	cpi	r20, 0x00	; 0
    148a:	52 07       	cpc	r21, r18
    148c:	44 f4       	brge	.+16     	; 0x149e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    148e:	a0 ee       	ldi	r26, 0xE0	; 224
    1490:	40 30       	cpi	r20, 0x00	; 0
    1492:	5a 07       	cpc	r21, r26
    1494:	3c f0       	brlt	.+14     	; 0x14a4 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1496:	8a 01       	movw	r16, r20
    1498:	00 50       	subi	r16, 0x00	; 0
    149a:	10 4e       	sbci	r17, 0xE0	; 224
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    149e:	0f ef       	ldi	r16, 0xFF	; 255
    14a0:	1f e3       	ldi	r17, 0x3F	; 63
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    14a8:	46 2f       	mov	r20, r22
    14aa:	4f 70       	andi	r20, 0x0F	; 15
    14ac:	40 6e       	ori	r20, 0xE0	; 224
    14ae:	20 2f       	mov	r18, r16
    14b0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    14b2:	00 0f       	add	r16, r16
    14b4:	01 2f       	mov	r16, r17
    14b6:	00 1f       	adc	r16, r16
    14b8:	11 0b       	sbc	r17, r17
    14ba:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    14bc:	0f 77       	andi	r16, 0x7F	; 127
    14be:	dc 01       	movw	r26, r24
    14c0:	ed 91       	ld	r30, X+
    14c2:	fc 91       	ld	r31, X
    14c4:	63 e0       	ldi	r22, 0x03	; 3
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    14d0:	0f 93       	push	r16
    14d2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    14d4:	46 2f       	mov	r20, r22
    14d6:	4f 70       	andi	r20, 0x0F	; 15
    14d8:	40 6c       	ori	r20, 0xC0	; 192
    14da:	2f 77       	andi	r18, 0x7F	; 127
    14dc:	dc 01       	movw	r26, r24
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	62 e0       	ldi	r22, 0x02	; 2
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    14ee:	0f 93       	push	r16
    14f0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    14f2:	46 2f       	mov	r20, r22
    14f4:	4f 70       	andi	r20, 0x0F	; 15
    14f6:	40 6d       	ori	r20, 0xD0	; 208
    14f8:	2f 77       	andi	r18, 0x7F	; 127
    14fa:	dc 01       	movw	r26, r24
    14fc:	ed 91       	ld	r30, X+
    14fe:	fc 91       	ld	r31, X
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    150c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    150e:	dc 01       	movw	r26, r24
    1510:	ed 91       	ld	r30, X+
    1512:	fc 91       	ld	r31, X
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	48 ef       	ldi	r20, 0xF8	; 248
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	09 95       	icall
}
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1524:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1526:	dc 01       	movw	r26, r24
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	49 ef       	ldi	r20, 0xF9	; 249
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	00 e0       	ldi	r16, 0x00	; 0
    1536:	09 95       	icall
}
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    153c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    153e:	dc 01       	movw	r26, r24
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	4a ef       	ldi	r20, 0xFA	; 250
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	00 e0       	ldi	r16, 0x00	; 0
    154e:	09 95       	icall
}
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1554:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1556:	dc 01       	movw	r26, r24
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	4b ef       	ldi	r20, 0xFB	; 251
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	09 95       	icall
}
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    156c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    156e:	dc 01       	movw	r26, r24
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	4c ef       	ldi	r20, 0xFC	; 252
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	00 e0       	ldi	r16, 0x00	; 0
    157e:	09 95       	icall
}
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1584:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1586:	dc 01       	movw	r26, r24
    1588:	ed 91       	ld	r30, X+
    158a:	fc 91       	ld	r31, X
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	4e ef       	ldi	r20, 0xFE	; 254
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	09 95       	icall
}
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    159c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    159e:	dc 01       	movw	r26, r24
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	4f ef       	ldi	r20, 0xFF	; 255
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	09 95       	icall
}
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    15b4:	0f 93       	push	r16
   device->send_func(device, 2,
    15b6:	26 2f       	mov	r18, r22
    15b8:	2f 77       	andi	r18, 0x7F	; 127
    15ba:	dc 01       	movw	r26, r24
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	41 ef       	ldi	r20, 0xF1	; 241
    15c6:	00 e0       	ldi	r16, 0x00	; 0
    15c8:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
   device->send_func(device, 3,
    15d2:	26 2f       	mov	r18, r22
    15d4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    15d6:	8b 01       	movw	r16, r22
    15d8:	00 0f       	add	r16, r16
    15da:	01 2f       	mov	r16, r17
    15dc:	00 1f       	adc	r16, r16
    15de:	11 0b       	sbc	r17, r17
    15e0:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    15e2:	0f 77       	andi	r16, 0x7F	; 127
    15e4:	dc 01       	movw	r26, r24
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	63 e0       	ldi	r22, 0x03	; 3
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	42 ef       	ldi	r20, 0xF2	; 242
    15f0:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    15f8:	0f 93       	push	r16
   device->send_func(device, 2,
    15fa:	26 2f       	mov	r18, r22
    15fc:	2f 77       	andi	r18, 0x7F	; 127
    15fe:	dc 01       	movw	r26, r24
    1600:	ed 91       	ld	r30, X+
    1602:	fc 91       	ld	r31, X
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	43 ef       	ldi	r20, 0xF3	; 243
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1612:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1614:	dc 01       	movw	r26, r24
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	46 ef       	ldi	r20, 0xF6	; 246
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	00 e0       	ldi	r16, 0x00	; 0
    1624:	09 95       	icall
}
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    162a:	0f 93       	push	r16
    162c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    162e:	dc 01       	movw	r26, r24
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	09 95       	icall
}
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1642:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1644:	dc 01       	movw	r26, r24
    1646:	ed 91       	ld	r30, X+
    1648:	fc 91       	ld	r31, X
    164a:	09 95       	icall
}
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1650:	fc 01       	movw	r30, r24
    1652:	62 83       	std	Z+2, r22	; 0x02
    1654:	73 83       	std	Z+3, r23	; 0x03
}
    1656:	08 95       	ret

00001658 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1658:	fc 01       	movw	r30, r24
    165a:	64 83       	std	Z+4, r22	; 0x04
    165c:	75 83       	std	Z+5, r23	; 0x05
}
    165e:	08 95       	ret

00001660 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1660:	fc 01       	movw	r30, r24
    1662:	66 83       	std	Z+6, r22	; 0x06
    1664:	77 83       	std	Z+7, r23	; 0x07
}
    1666:	08 95       	ret

00001668 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1668:	fc 01       	movw	r30, r24
    166a:	60 87       	std	Z+8, r22	; 0x08
    166c:	71 87       	std	Z+9, r23	; 0x09
}
    166e:	08 95       	ret

00001670 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1670:	fc 01       	movw	r30, r24
    1672:	62 87       	std	Z+10, r22	; 0x0a
    1674:	73 87       	std	Z+11, r23	; 0x0b
}
    1676:	08 95       	ret

00001678 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1678:	fc 01       	movw	r30, r24
    167a:	64 87       	std	Z+12, r22	; 0x0c
    167c:	75 87       	std	Z+13, r23	; 0x0d
}
    167e:	08 95       	ret

00001680 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1680:	fc 01       	movw	r30, r24
    1682:	66 87       	std	Z+14, r22	; 0x0e
    1684:	77 87       	std	Z+15, r23	; 0x0f
}
    1686:	08 95       	ret

00001688 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1688:	fc 01       	movw	r30, r24
    168a:	60 8b       	std	Z+16, r22	; 0x10
    168c:	71 8b       	std	Z+17, r23	; 0x11
}
    168e:	08 95       	ret

00001690 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1690:	fc 01       	movw	r30, r24
    1692:	62 8b       	std	Z+18, r22	; 0x12
    1694:	73 8b       	std	Z+19, r23	; 0x13
}
    1696:	08 95       	ret

00001698 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1698:	fc 01       	movw	r30, r24
    169a:	64 8b       	std	Z+20, r22	; 0x14
    169c:	75 8b       	std	Z+21, r23	; 0x15
}
    169e:	08 95       	ret

000016a0 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    16a0:	fc 01       	movw	r30, r24
    16a2:	66 8b       	std	Z+22, r22	; 0x16
    16a4:	77 8b       	std	Z+23, r23	; 0x17
}
    16a6:	08 95       	ret

000016a8 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    16a8:	fc 01       	movw	r30, r24
    16aa:	60 8f       	std	Z+24, r22	; 0x18
    16ac:	71 8f       	std	Z+25, r23	; 0x19
}
    16ae:	08 95       	ret

000016b0 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    16b0:	fc 01       	movw	r30, r24
    16b2:	62 8f       	std	Z+26, r22	; 0x1a
    16b4:	73 8f       	std	Z+27, r23	; 0x1b
}
    16b6:	08 95       	ret

000016b8 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    16b8:	fc 01       	movw	r30, r24
    16ba:	64 8f       	std	Z+28, r22	; 0x1c
    16bc:	75 8f       	std	Z+29, r23	; 0x1d
}
    16be:	08 95       	ret

000016c0 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    16c0:	fc 01       	movw	r30, r24
    16c2:	66 8f       	std	Z+30, r22	; 0x1e
    16c4:	77 8f       	std	Z+31, r23	; 0x1f
}
    16c6:	08 95       	ret

000016c8 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    16ce:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    16d0:	1e a2       	std	Y+38, r1	; 0x26
    16d2:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    16d4:	bc 01       	movw	r22, r24
    16d6:	68 5d       	subi	r22, 0xD8	; 216
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	88 51       	subi	r24, 0x18	; 24
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	40 ec       	ldi	r20, 0xC0	; 192
    16e0:	0e 94 2f 09 	call	0x125e	; 0x125e <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    16e8:	1c 82       	std	Y+4, r1	; 0x04
    16ea:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    16ec:	1e 82       	std	Y+6, r1	; 0x06
    16ee:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    16f0:	18 86       	std	Y+8, r1	; 0x08
    16f2:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    16f4:	1a 86       	std	Y+10, r1	; 0x0a
    16f6:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    16f8:	1c 86       	std	Y+12, r1	; 0x0c
    16fa:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    16fc:	1e 86       	std	Y+14, r1	; 0x0e
    16fe:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1700:	18 8a       	std	Y+16, r1	; 0x10
    1702:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1704:	1a 8a       	std	Y+18, r1	; 0x12
    1706:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1708:	1c 8a       	std	Y+20, r1	; 0x14
    170a:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    170c:	1e 8a       	std	Y+22, r1	; 0x16
    170e:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1710:	18 8e       	std	Y+24, r1	; 0x18
    1712:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1714:	1a 8e       	std	Y+26, r1	; 0x1a
    1716:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1718:	1c 8e       	std	Y+28, r1	; 0x1c
    171a:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    171c:	1e 8e       	std	Y+30, r1	; 0x1e
    171e:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1720:	18 a2       	std	Y+32, r1	; 0x20
    1722:	19 a2       	std	Y+33, r1	; 0x21
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	16 2f       	mov	r17, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1738:	66 23       	and	r22, r22
    173a:	a9 f0       	breq	.+42     	; 0x1766 <midi_device_input+0x3c>
    173c:	04 2f       	mov	r16, r20
    173e:	e4 2e       	mov	r14, r20
    1740:	e7 01       	movw	r28, r14
    1742:	7e 01       	movw	r14, r28
    1744:	f5 2e       	mov	r15, r21
    1746:	e7 01       	movw	r28, r14
      bytequeue_enqueue(&device->input_queue, input[i]);
    1748:	0f 2e       	mov	r0, r31
    174a:	f8 ee       	ldi	r31, 0xE8	; 232
    174c:	ef 2e       	mov	r14, r31
    174e:	ff 24       	eor	r15, r15
    1750:	f0 2d       	mov	r31, r0
    1752:	e8 0e       	add	r14, r24
    1754:	f9 1e       	adc	r15, r25
    1756:	69 91       	ld	r22, Y+
    1758:	c7 01       	movw	r24, r14
    175a:	0e 94 36 09 	call	0x126c	; 0x126c <bytequeue_enqueue>
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    175e:	ae 01       	movw	r20, r28
    1760:	40 1b       	sub	r20, r16
    1762:	41 17       	cp	r20, r17
    1764:	c0 f3       	brcs	.-16     	; 0x1756 <midi_device_input+0x2c>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	08 95       	ret

00001774 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1774:	fc 01       	movw	r30, r24
    1776:	60 83       	st	Z, r22
    1778:	71 83       	std	Z+1, r23	; 0x01
}
    177a:	08 95       	ret

0000177c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    177c:	fc 01       	movw	r30, r24
    177e:	60 a3       	std	Z+32, r22	; 0x20
    1780:	71 a3       	std	Z+33, r23	; 0x21
}
    1782:	08 95       	ret

00001784 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
    1796:	6b 01       	movw	r12, r22
    1798:	f4 2e       	mov	r15, r20
    179a:	e2 2e       	mov	r14, r18
    179c:	10 2f       	mov	r17, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    179e:	8d a1       	ldd	r24, Y+37	; 0x25
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	41 f4       	brne	.+16     	; 0x17b4 <midi_input_callbacks+0x30>
      if (device->input_sysex_callback) {
    17a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17a6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	09 f4       	brne	.+2      	; 0x17ae <midi_input_callbacks+0x2a>
    17ac:	99 c0       	rjmp	.+306    	; 0x18e0 <midi_input_callbacks+0x15c>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
    17ae:	ce 01       	movw	r24, r28
    17b0:	09 95       	icall
    17b2:	89 c0       	rjmp	.+274    	; 0x18c6 <midi_input_callbacks+0x142>
         called = true;
      }
   } else {
      switch (cnt) {
    17b4:	62 30       	cpi	r22, 0x02	; 2
    17b6:	71 05       	cpc	r23, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <midi_input_callbacks+0x38>
    17ba:	42 c0       	rjmp	.+132    	; 0x1840 <midi_input_callbacks+0xbc>
    17bc:	63 30       	cpi	r22, 0x03	; 3
    17be:	71 05       	cpc	r23, r1
    17c0:	29 f0       	breq	.+10     	; 0x17cc <midi_input_callbacks+0x48>
    17c2:	61 30       	cpi	r22, 0x01	; 1
    17c4:	71 05       	cpc	r23, r1
    17c6:	09 f0       	breq	.+2      	; 0x17ca <midi_input_callbacks+0x46>
    17c8:	74 c0       	rjmp	.+232    	; 0x18b2 <midi_input_callbacks+0x12e>
    17ca:	60 c0       	rjmp	.+192    	; 0x188c <midi_input_callbacks+0x108>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    17cc:	84 2f       	mov	r24, r20
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	80 7f       	andi	r24, 0xF0	; 240
    17d2:	90 70       	andi	r25, 0x00	; 0
    17d4:	80 3a       	cpi	r24, 0xA0	; 160
    17d6:	91 05       	cpc	r25, r1
    17d8:	e1 f0       	breq	.+56     	; 0x1812 <midi_input_callbacks+0x8e>
    17da:	81 3a       	cpi	r24, 0xA1	; 161
    17dc:	91 05       	cpc	r25, r1
    17de:	3c f4       	brge	.+14     	; 0x17ee <midi_input_callbacks+0x6a>
    17e0:	80 38       	cpi	r24, 0x80	; 128
    17e2:	91 05       	cpc	r25, r1
    17e4:	99 f0       	breq	.+38     	; 0x180c <midi_input_callbacks+0x88>
    17e6:	80 39       	cpi	r24, 0x90	; 144
    17e8:	91 05       	cpc	r25, r1
    17ea:	f9 f4       	brne	.+62     	; 0x182a <midi_input_callbacks+0xa6>
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <midi_input_callbacks+0x82>
    17ee:	80 3e       	cpi	r24, 0xE0	; 224
    17f0:	91 05       	cpc	r25, r1
    17f2:	91 f0       	breq	.+36     	; 0x1818 <midi_input_callbacks+0x94>
    17f4:	80 3f       	cpi	r24, 0xF0	; 240
    17f6:	91 05       	cpc	r25, r1
    17f8:	91 f0       	breq	.+36     	; 0x181e <midi_input_callbacks+0x9a>
    17fa:	80 3b       	cpi	r24, 0xB0	; 176
    17fc:	91 05       	cpc	r25, r1
    17fe:	a9 f4       	brne	.+42     	; 0x182a <midi_input_callbacks+0xa6>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1800:	ea 81       	ldd	r30, Y+2	; 0x02
    1802:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1804:	14 c0       	rjmp	.+40     	; 0x182e <midi_input_callbacks+0xaa>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1806:	ec 81       	ldd	r30, Y+4	; 0x04
    1808:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    180a:	11 c0       	rjmp	.+34     	; 0x182e <midi_input_callbacks+0xaa>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    180c:	ee 81       	ldd	r30, Y+6	; 0x06
    180e:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1810:	0e c0       	rjmp	.+28     	; 0x182e <midi_input_callbacks+0xaa>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1812:	e8 85       	ldd	r30, Y+8	; 0x08
    1814:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1816:	0b c0       	rjmp	.+22     	; 0x182e <midi_input_callbacks+0xaa>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1818:	ea 85       	ldd	r30, Y+10	; 0x0a
    181a:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    181c:	08 c0       	rjmp	.+16     	; 0x182e <midi_input_callbacks+0xaa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    181e:	42 3f       	cpi	r20, 0xF2	; 242
    1820:	09 f0       	breq	.+2      	; 0x1824 <midi_input_callbacks+0xa0>
    1822:	5e c0       	rjmp	.+188    	; 0x18e0 <midi_input_callbacks+0x15c>
                        func = device->input_songposition_callback;
    1824:	ec 85       	ldd	r30, Y+12	; 0x0c
    1826:	fd 85       	ldd	r31, Y+13	; 0x0d
    1828:	02 c0       	rjmp	.+4      	; 0x182e <midi_input_callbacks+0xaa>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    182a:	e0 e0       	ldi	r30, 0x00	; 0
    182c:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	09 f4       	brne	.+2      	; 0x1834 <midi_input_callbacks+0xb0>
    1832:	56 c0       	rjmp	.+172    	; 0x18e0 <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1, byte2);
    1834:	ce 01       	movw	r24, r28
    1836:	6f 2d       	mov	r22, r15
    1838:	4e 2d       	mov	r20, r14
    183a:	21 2f       	mov	r18, r17
    183c:	09 95       	icall
    183e:	43 c0       	rjmp	.+134    	; 0x18c6 <midi_input_callbacks+0x142>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1840:	84 2f       	mov	r24, r20
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	80 7f       	andi	r24, 0xF0	; 240
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	80 3d       	cpi	r24, 0xD0	; 208
    184a:	91 05       	cpc	r25, r1
    184c:	49 f0       	breq	.+18     	; 0x1860 <midi_input_callbacks+0xdc>
    184e:	80 3f       	cpi	r24, 0xF0	; 240
    1850:	91 05       	cpc	r25, r1
    1852:	49 f0       	breq	.+18     	; 0x1866 <midi_input_callbacks+0xe2>
    1854:	80 3c       	cpi	r24, 0xC0	; 192
    1856:	91 05       	cpc	r25, r1
    1858:	81 f4       	brne	.+32     	; 0x187a <midi_input_callbacks+0xf6>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    185a:	ee 85       	ldd	r30, Y+14	; 0x0e
    185c:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    185e:	0f c0       	rjmp	.+30     	; 0x187e <midi_input_callbacks+0xfa>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1860:	e8 89       	ldd	r30, Y+16	; 0x10
    1862:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1864:	0c c0       	rjmp	.+24     	; 0x187e <midi_input_callbacks+0xfa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1866:	43 3f       	cpi	r20, 0xF3	; 243
    1868:	19 f4       	brne	.+6      	; 0x1870 <midi_input_callbacks+0xec>
                        func = device->input_songselect_callback;
    186a:	ea 89       	ldd	r30, Y+18	; 0x12
    186c:	fb 89       	ldd	r31, Y+19	; 0x13
    186e:	07 c0       	rjmp	.+14     	; 0x187e <midi_input_callbacks+0xfa>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1870:	41 3f       	cpi	r20, 0xF1	; 241
    1872:	b1 f5       	brne	.+108    	; 0x18e0 <midi_input_callbacks+0x15c>
                        func = device->input_tc_quarterframe_callback;
    1874:	ec 89       	ldd	r30, Y+20	; 0x14
    1876:	fd 89       	ldd	r31, Y+21	; 0x15
    1878:	02 c0       	rjmp	.+4      	; 0x187e <midi_input_callbacks+0xfa>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    187a:	e0 e0       	ldi	r30, 0x00	; 0
    187c:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	79 f1       	breq	.+94     	; 0x18e0 <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1);
    1882:	ce 01       	movw	r24, r28
    1884:	6f 2d       	mov	r22, r15
    1886:	4e 2d       	mov	r20, r14
    1888:	09 95       	icall
    188a:	1d c0       	rjmp	.+58     	; 0x18c6 <midi_input_callbacks+0x142>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    188c:	84 2f       	mov	r24, r20
    188e:	0e 94 af 09 	call	0x135e	; 0x135e <midi_is_realtime>
    1892:	88 23       	and	r24, r24
    1894:	19 f0       	breq	.+6      	; 0x189c <midi_input_callbacks+0x118>
                  func = device->input_realtime_callback;
    1896:	ee 89       	ldd	r30, Y+22	; 0x16
    1898:	ff 89       	ldd	r31, Y+23	; 0x17
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <midi_input_callbacks+0x122>
               else if (byte0 == MIDI_TUNEREQUEST)
    189c:	8f 2d       	mov	r24, r15
    189e:	86 3f       	cpi	r24, 0xF6	; 246
    18a0:	f9 f4       	brne	.+62     	; 0x18e0 <midi_input_callbacks+0x15c>
                  func = device->input_tunerequest_callback;
    18a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    18a4:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    18a6:	30 97       	sbiw	r30, 0x00	; 0
    18a8:	d9 f0       	breq	.+54     	; 0x18e0 <midi_input_callbacks+0x15c>
                  func(device, byte0);
    18aa:	ce 01       	movw	r24, r28
    18ac:	6f 2d       	mov	r22, r15
    18ae:	09 95       	icall
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <midi_input_callbacks+0x142>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    18b2:	64 30       	cpi	r22, 0x04	; 4
    18b4:	71 05       	cpc	r23, r1
    18b6:	90 f4       	brcc	.+36     	; 0x18dc <midi_input_callbacks+0x158>
    18b8:	13 c0       	rjmp	.+38     	; 0x18e0 <midi_input_callbacks+0x15c>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    18ba:	ce 01       	movw	r24, r28
    18bc:	b6 01       	movw	r22, r12
    18be:	4f 2d       	mov	r20, r15
    18c0:	2e 2d       	mov	r18, r14
    18c2:	01 2f       	mov	r16, r17
    18c4:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    18c6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    18c8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	71 f0       	breq	.+28     	; 0x18ea <midi_input_callbacks+0x166>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    18ce:	ce 01       	movw	r24, r28
    18d0:	b6 01       	movw	r22, r12
    18d2:	4f 2d       	mov	r20, r15
    18d4:	2e 2d       	mov	r18, r14
    18d6:	01 2f       	mov	r16, r17
    18d8:	09 95       	icall
    18da:	07 c0       	rjmp	.+14     	; 0x18ea <midi_input_callbacks+0x166>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    18dc:	cc 24       	eor	r12, r12
    18de:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    18e0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    18e2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    18e4:	30 97       	sbiw	r30, 0x00	; 0
    18e6:	49 f7       	brne	.-46     	; 0x18ba <midi_input_callbacks+0x136>
    18e8:	ee cf       	rjmp	.-36     	; 0x18c6 <midi_input_callbacks+0x142>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	08 95       	ret

000018fc <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	06 2f       	mov	r16, r22
   if (midi_is_realtime(input)) {
    1908:	86 2f       	mov	r24, r22
    190a:	0e 94 af 09 	call	0x135e	; 0x135e <midi_is_realtime>
    190e:	88 23       	and	r24, r24
    1910:	69 f0       	breq	.+26     	; 0x192c <midi_process_byte+0x30>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1912:	1d a1       	ldd	r17, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1918:	ce 01       	movw	r24, r28
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	40 2f       	mov	r20, r16
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	00 e0       	ldi	r16, 0x00	; 0
    1924:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_input_callbacks>
      device->input_state = state;
    1928:	1d a3       	std	Y+37, r17	; 0x25
    192a:	95 c0       	rjmp	.+298    	; 0x1a56 <midi_process_byte+0x15a>
   } else if (midi_is_statusbyte(input)) {
    192c:	80 2f       	mov	r24, r16
    192e:	0e 94 ab 09 	call	0x1356	; 0x1356 <midi_is_statusbyte>
    1932:	88 23       	and	r24, r24
    1934:	09 f4       	brne	.+2      	; 0x1938 <midi_process_byte+0x3c>
    1936:	55 c0       	rjmp	.+170    	; 0x19e2 <midi_process_byte+0xe6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	29 f0       	breq	.+10     	; 0x1948 <midi_process_byte+0x4c>
         device->input_buffer[0] = input;
    193e:	0a a3       	std	Y+34, r16	; 0x22
         device->input_count = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	8e a3       	std	Y+38, r24	; 0x26
    1946:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1948:	80 2f       	mov	r24, r16
    194a:	0e 94 b5 09 	call	0x136a	; 0x136a <midi_packet_length>
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	39 f0       	breq	.+14     	; 0x1960 <midi_process_byte+0x64>
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	b8 f0       	brcs	.+46     	; 0x1984 <midi_process_byte+0x88>
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	79 f0       	breq	.+30     	; 0x1978 <midi_process_byte+0x7c>
    195a:	83 30       	cpi	r24, 0x03	; 3
    195c:	f1 f5       	brne	.+124    	; 0x19da <midi_process_byte+0xde>
    195e:	0f c0       	rjmp	.+30     	; 0x197e <midi_process_byte+0x82>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1964:	ce 01       	movw	r24, r28
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	40 2f       	mov	r20, r16
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_input_callbacks>
            device->input_state = IDLE;
    1974:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1976:	6f c0       	rjmp	.+222    	; 0x1a56 <midi_process_byte+0x15a>
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	8d a3       	std	Y+37, r24	; 0x25
            break;
    197c:	6c c0       	rjmp	.+216    	; 0x1a56 <midi_process_byte+0x15a>
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1982:	69 c0       	rjmp	.+210    	; 0x1a56 <midi_process_byte+0x15a>
         case UNDEFINED:
            switch(input) {
    1984:	00 3f       	cpi	r16, 0xF0	; 240
    1986:	19 f0       	breq	.+6      	; 0x198e <midi_process_byte+0x92>
    1988:	07 3f       	cpi	r16, 0xF7	; 247
    198a:	19 f5       	brne	.+70     	; 0x19d2 <midi_process_byte+0xd6>
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <midi_process_byte+0xa4>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    1990:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1992:	80 ef       	ldi	r24, 0xF0	; 240
    1994:	8a a3       	std	Y+34, r24	; 0x22
                  device->input_count = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	8e a3       	std	Y+38, r24	; 0x26
    199c:	9f a3       	std	Y+39, r25	; 0x27
                  break;
    199e:	5b c0       	rjmp	.+182    	; 0x1a56 <midi_process_byte+0x15a>
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    19a0:	2e a1       	ldd	r18, Y+38	; 0x26
    19a2:	3f a1       	ldd	r19, Y+39	; 0x27
    19a4:	c9 01       	movw	r24, r18
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	0e 94 16 14 	call	0x282c	; 0x282c <__udivmodhi4>
    19ae:	fe 01       	movw	r30, r28
    19b0:	e8 0f       	add	r30, r24
    19b2:	f9 1f       	adc	r31, r25
    19b4:	87 ef       	ldi	r24, 0xF7	; 247
    19b6:	82 a3       	std	Z+34, r24	; 0x22
                  device->input_count += 1;
    19b8:	b9 01       	movw	r22, r18
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	6e a3       	std	Y+38, r22	; 0x26
    19c0:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    19c2:	ce 01       	movw	r24, r28
    19c4:	4a a1       	ldd	r20, Y+34	; 0x22
    19c6:	2b a1       	ldd	r18, Y+35	; 0x23
    19c8:	0c a1       	ldd	r16, Y+36	; 0x24
    19ca:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    19ce:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    19d0:	42 c0       	rjmp	.+132    	; 0x1a56 <midi_process_byte+0x15a>
               default:
                  device->input_state = IDLE;
    19d2:	1d a2       	std	Y+37, r1	; 0x25
                  device->input_count = 0;
    19d4:	1e a2       	std	Y+38, r1	; 0x26
    19d6:	1f a2       	std	Y+39, r1	; 0x27
    19d8:	3e c0       	rjmp	.+124    	; 0x1a56 <midi_process_byte+0x15a>
            }

            break;
         default:
            device->input_state = IDLE;
    19da:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    19dc:	1e a2       	std	Y+38, r1	; 0x26
    19de:	1f a2       	std	Y+39, r1	; 0x27
            break;
    19e0:	3a c0       	rjmp	.+116    	; 0x1a56 <midi_process_byte+0x15a>
      }
   } else {
      if (device->input_state != IDLE) {
    19e2:	ed a1       	ldd	r30, Y+37	; 0x25
    19e4:	ee 23       	and	r30, r30
    19e6:	b9 f1       	breq	.+110    	; 0x1a56 <midi_process_byte+0x15a>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    19e8:	2e a1       	ldd	r18, Y+38	; 0x26
    19ea:	3f a1       	ldd	r19, Y+39	; 0x27
    19ec:	c9 01       	movw	r24, r18
    19ee:	63 e0       	ldi	r22, 0x03	; 3
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 16 14 	call	0x282c	; 0x282c <__udivmodhi4>
    19f6:	ac 01       	movw	r20, r24
    19f8:	8c 0f       	add	r24, r28
    19fa:	9d 1f       	adc	r25, r29
    19fc:	dc 01       	movw	r26, r24
    19fe:	92 96       	adiw	r26, 0x22	; 34
    1a00:	0c 93       	st	X, r16
    1a02:	92 97       	sbiw	r26, 0x22	; 34
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	2e a3       	std	Y+38, r18	; 0x26
    1a0a:	3f a3       	std	Y+39, r19	; 0x27

         switch(prev % 3) {
    1a0c:	41 30       	cpi	r20, 0x01	; 1
    1a0e:	51 05       	cpc	r21, r1
    1a10:	91 f0       	breq	.+36     	; 0x1a36 <midi_process_byte+0x13a>
    1a12:	42 30       	cpi	r20, 0x02	; 2
    1a14:	51 05       	cpc	r21, r1
    1a16:	f9 f4       	brne	.+62     	; 0x1a56 <midi_process_byte+0x15a>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1a18:	ce 01       	movw	r24, r28
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	4a a1       	ldd	r20, Y+34	; 0x22
    1a1e:	2b a1       	ldd	r18, Y+35	; 0x23
    1a20:	0c a1       	ldd	r16, Y+36	; 0x24
    1a22:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1a26:	8d a1       	ldd	r24, Y+37	; 0x25
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	a9 f0       	breq	.+42     	; 0x1a56 <midi_process_byte+0x15a>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	8e a3       	std	Y+38, r24	; 0x26
    1a32:	9f a3       	std	Y+39, r25	; 0x27
    1a34:	10 c0       	rjmp	.+32     	; 0x1a56 <midi_process_byte+0x15a>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1a36:	e2 30       	cpi	r30, 0x02	; 2
    1a38:	71 f4       	brne	.+28     	; 0x1a56 <midi_process_byte+0x15a>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	4a a1       	ldd	r20, Y+34	; 0x22
    1a40:	2b a1       	ldd	r18, Y+35	; 0x23
    1a42:	00 e0       	ldi	r16, 0x00	; 0
    1a44:	0e 94 c2 0b 	call	0x1784	; 0x1784 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1a48:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4a:	84 30       	cpi	r24, 0x04	; 4
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <midi_process_byte+0x15a>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	8e a3       	std	Y+38, r24	; 0x26
    1a54:	9f a3       	std	Y+39, r25	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1a60:	cf 92       	push	r12
    1a62:	df 92       	push	r13
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	7c 01       	movw	r14, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1a72:	dc 01       	movw	r26, r24
    1a74:	90 96       	adiw	r26, 0x20	; 32
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	91 97       	sbiw	r26, 0x21	; 33
    1a7c:	30 97       	sbiw	r30, 0x00	; 0
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <midi_device_process+0x22>
      device->pre_input_process_callback(device);
    1a80:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1a82:	87 01       	movw	r16, r14
    1a84:	08 51       	subi	r16, 0x18	; 24
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	c8 01       	movw	r24, r16
    1a8a:	0e 94 67 09 	call	0x12ce	; 0x12ce <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1a8e:	c8 2e       	mov	r12, r24
    1a90:	dd 24       	eor	r13, r13
    1a92:	c1 14       	cp	r12, r1
    1a94:	d1 04       	cpc	r13, r1
    1a96:	91 f0       	breq	.+36     	; 0x1abc <midi_device_process+0x5c>
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
    1a9a:	d0 e0       	ldi	r29, 0x00	; 0
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1a9c:	c8 01       	movw	r24, r16
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <bytequeue_get>
    1aa4:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1aac:	c8 01       	movw	r24, r16
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	0e 94 8d 09 	call	0x131a	; 0x131a <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1ab4:	21 96       	adiw	r28, 0x01	; 1
    1ab6:	cc 15       	cp	r28, r12
    1ab8:	dd 05       	cpc	r29, r13
    1aba:	80 f3       	brcs	.-32     	; 0x1a9c <midi_device_process+0x3c>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	08 95       	ret

00001ace <__fixunssfsi>:
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	8c 01       	movw	r16, r24
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	5f e4       	ldi	r21, 0x4F	; 79
    1ae2:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__gesf2>
    1ae6:	87 fd       	sbrc	r24, 7
    1ae8:	11 c0       	rjmp	.+34     	; 0x1b0c <__fixunssfsi+0x3e>
    1aea:	c8 01       	movw	r24, r16
    1aec:	b7 01       	movw	r22, r14
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	5f e4       	ldi	r21, 0x4F	; 79
    1af6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
    1afa:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixsfsi>
    1afe:	9b 01       	movw	r18, r22
    1b00:	ac 01       	movw	r20, r24
    1b02:	20 50       	subi	r18, 0x00	; 0
    1b04:	30 40       	sbci	r19, 0x00	; 0
    1b06:	40 40       	sbci	r20, 0x00	; 0
    1b08:	50 48       	sbci	r21, 0x80	; 128
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <__fixunssfsi+0x4a>
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	b7 01       	movw	r22, r14
    1b10:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixsfsi>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	b9 01       	movw	r22, r18
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <_fpadd_parts>:
    1b26:	a0 e0       	ldi	r26, 0x00	; 0
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__prologue_saves__+0x8>
    1b32:	fc 01       	movw	r30, r24
    1b34:	ea 01       	movw	r28, r20
    1b36:	80 81       	ld	r24, Z
    1b38:	82 30       	cpi	r24, 0x02	; 2
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <_fpadd_parts+0x18>
    1b3c:	38 c1       	rjmp	.+624    	; 0x1dae <_fpadd_parts+0x288>
    1b3e:	db 01       	movw	r26, r22
    1b40:	9c 91       	ld	r25, X
    1b42:	92 30       	cpi	r25, 0x02	; 2
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <_fpadd_parts+0x22>
    1b46:	30 c1       	rjmp	.+608    	; 0x1da8 <_fpadd_parts+0x282>
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	59 f4       	brne	.+22     	; 0x1b62 <_fpadd_parts+0x3c>
    1b4c:	94 30       	cpi	r25, 0x04	; 4
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <_fpadd_parts+0x2c>
    1b50:	2e c1       	rjmp	.+604    	; 0x1dae <_fpadd_parts+0x288>
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	8c 91       	ld	r24, X
    1b58:	11 97       	sbiw	r26, 0x01	; 1
    1b5a:	98 17       	cp	r25, r24
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <_fpadd_parts+0x3a>
    1b5e:	21 c1       	rjmp	.+578    	; 0x1da2 <_fpadd_parts+0x27c>
    1b60:	26 c1       	rjmp	.+588    	; 0x1dae <_fpadd_parts+0x288>
    1b62:	94 30       	cpi	r25, 0x04	; 4
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <_fpadd_parts+0x42>
    1b66:	20 c1       	rjmp	.+576    	; 0x1da8 <_fpadd_parts+0x282>
    1b68:	92 30       	cpi	r25, 0x02	; 2
    1b6a:	b1 f4       	brne	.+44     	; 0x1b98 <_fpadd_parts+0x72>
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <_fpadd_parts+0x4c>
    1b70:	1e c1       	rjmp	.+572    	; 0x1dae <_fpadd_parts+0x288>
    1b72:	ca 01       	movw	r24, r20
    1b74:	af 01       	movw	r20, r30
    1b76:	28 e0       	ldi	r18, 0x08	; 8
    1b78:	da 01       	movw	r26, r20
    1b7a:	0d 90       	ld	r0, X+
    1b7c:	ad 01       	movw	r20, r26
    1b7e:	dc 01       	movw	r26, r24
    1b80:	0d 92       	st	X+, r0
    1b82:	cd 01       	movw	r24, r26
    1b84:	21 50       	subi	r18, 0x01	; 1
    1b86:	c1 f7       	brne	.-16     	; 0x1b78 <_fpadd_parts+0x52>
    1b88:	db 01       	movw	r26, r22
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	8c 91       	ld	r24, X
    1b8e:	11 97       	sbiw	r26, 0x01	; 1
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	89 23       	and	r24, r25
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	0a c1       	rjmp	.+532    	; 0x1dac <_fpadd_parts+0x286>
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <_fpadd_parts+0x78>
    1b9c:	05 c1       	rjmp	.+522    	; 0x1da8 <_fpadd_parts+0x282>
    1b9e:	c2 80       	ldd	r12, Z+2	; 0x02
    1ba0:	d3 80       	ldd	r13, Z+3	; 0x03
    1ba2:	db 01       	movw	r26, r22
    1ba4:	12 96       	adiw	r26, 0x02	; 2
    1ba6:	6d 90       	ld	r6, X+
    1ba8:	7c 90       	ld	r7, X
    1baa:	13 97       	sbiw	r26, 0x03	; 3
    1bac:	24 81       	ldd	r18, Z+4	; 0x04
    1bae:	35 81       	ldd	r19, Z+5	; 0x05
    1bb0:	46 81       	ldd	r20, Z+6	; 0x06
    1bb2:	57 81       	ldd	r21, Z+7	; 0x07
    1bb4:	14 96       	adiw	r26, 0x04	; 4
    1bb6:	ed 90       	ld	r14, X+
    1bb8:	fd 90       	ld	r15, X+
    1bba:	0d 91       	ld	r16, X+
    1bbc:	1c 91       	ld	r17, X
    1bbe:	17 97       	sbiw	r26, 0x07	; 7
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	86 19       	sub	r24, r6
    1bc4:	97 09       	sbc	r25, r7
    1bc6:	5c 01       	movw	r10, r24
    1bc8:	97 ff       	sbrs	r25, 7
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <_fpadd_parts+0xae>
    1bcc:	aa 24       	eor	r10, r10
    1bce:	bb 24       	eor	r11, r11
    1bd0:	a8 1a       	sub	r10, r24
    1bd2:	b9 0a       	sbc	r11, r25
    1bd4:	b0 e2       	ldi	r27, 0x20	; 32
    1bd6:	ab 16       	cp	r10, r27
    1bd8:	b1 04       	cpc	r11, r1
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <_fpadd_parts+0xb8>
    1bdc:	61 c0       	rjmp	.+194    	; 0x1ca0 <_fpadd_parts+0x17a>
    1bde:	18 16       	cp	r1, r24
    1be0:	19 06       	cpc	r1, r25
    1be2:	6c f5       	brge	.+90     	; 0x1c3e <_fpadd_parts+0x118>
    1be4:	37 01       	movw	r6, r14
    1be6:	48 01       	movw	r8, r16
    1be8:	0a 2c       	mov	r0, r10
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <_fpadd_parts+0xce>
    1bec:	96 94       	lsr	r9
    1bee:	87 94       	ror	r8
    1bf0:	77 94       	ror	r7
    1bf2:	67 94       	ror	r6
    1bf4:	0a 94       	dec	r0
    1bf6:	d2 f7       	brpl	.-12     	; 0x1bec <_fpadd_parts+0xc6>
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	0a 2c       	mov	r0, r10
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <_fpadd_parts+0xe6>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	0a 94       	dec	r0
    1c0e:	d2 f7       	brpl	.-12     	; 0x1c04 <_fpadd_parts+0xde>
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	a1 09       	sbc	r26, r1
    1c14:	b1 09       	sbc	r27, r1
    1c16:	8e 21       	and	r24, r14
    1c18:	9f 21       	and	r25, r15
    1c1a:	a0 23       	and	r26, r16
    1c1c:	b1 23       	and	r27, r17
    1c1e:	ee 24       	eor	r14, r14
    1c20:	ff 24       	eor	r15, r15
    1c22:	87 01       	movw	r16, r14
    1c24:	e3 94       	inc	r14
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	a1 05       	cpc	r26, r1
    1c2a:	b1 05       	cpc	r27, r1
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <_fpadd_parts+0x10e>
    1c2e:	ee 24       	eor	r14, r14
    1c30:	ff 24       	eor	r15, r15
    1c32:	87 01       	movw	r16, r14
    1c34:	e6 28       	or	r14, r6
    1c36:	f7 28       	or	r15, r7
    1c38:	08 29       	or	r16, r8
    1c3a:	19 29       	or	r17, r9
    1c3c:	3c c0       	rjmp	.+120    	; 0x1cb6 <_fpadd_parts+0x190>
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	d1 f1       	breq	.+116    	; 0x1cb6 <_fpadd_parts+0x190>
    1c42:	ca 0c       	add	r12, r10
    1c44:	db 1c       	adc	r13, r11
    1c46:	39 01       	movw	r6, r18
    1c48:	4a 01       	movw	r8, r20
    1c4a:	0a 2c       	mov	r0, r10
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <_fpadd_parts+0x130>
    1c4e:	96 94       	lsr	r9
    1c50:	87 94       	ror	r8
    1c52:	77 94       	ror	r7
    1c54:	67 94       	ror	r6
    1c56:	0a 94       	dec	r0
    1c58:	d2 f7       	brpl	.-12     	; 0x1c4e <_fpadd_parts+0x128>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	0a 2c       	mov	r0, r10
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <_fpadd_parts+0x148>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	0a 94       	dec	r0
    1c70:	d2 f7       	brpl	.-12     	; 0x1c66 <_fpadd_parts+0x140>
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	a1 09       	sbc	r26, r1
    1c76:	b1 09       	sbc	r27, r1
    1c78:	82 23       	and	r24, r18
    1c7a:	93 23       	and	r25, r19
    1c7c:	a4 23       	and	r26, r20
    1c7e:	b5 23       	and	r27, r21
    1c80:	21 e0       	ldi	r18, 0x01	; 1
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	a1 05       	cpc	r26, r1
    1c8c:	b1 05       	cpc	r27, r1
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <_fpadd_parts+0x170>
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	26 29       	or	r18, r6
    1c98:	37 29       	or	r19, r7
    1c9a:	48 29       	or	r20, r8
    1c9c:	59 29       	or	r21, r9
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <_fpadd_parts+0x190>
    1ca0:	6c 14       	cp	r6, r12
    1ca2:	7d 04       	cpc	r7, r13
    1ca4:	24 f4       	brge	.+8      	; 0x1cae <_fpadd_parts+0x188>
    1ca6:	ee 24       	eor	r14, r14
    1ca8:	ff 24       	eor	r15, r15
    1caa:	87 01       	movw	r16, r14
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <_fpadd_parts+0x190>
    1cae:	63 01       	movw	r12, r6
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	81 81       	ldd	r24, Z+1	; 0x01
    1cb8:	fb 01       	movw	r30, r22
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	89 17       	cp	r24, r25
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <_fpadd_parts+0x19c>
    1cc0:	45 c0       	rjmp	.+138    	; 0x1d4c <_fpadd_parts+0x226>
    1cc2:	88 23       	and	r24, r24
    1cc4:	49 f0       	breq	.+18     	; 0x1cd8 <_fpadd_parts+0x1b2>
    1cc6:	d8 01       	movw	r26, r16
    1cc8:	c7 01       	movw	r24, r14
    1cca:	82 1b       	sub	r24, r18
    1ccc:	93 0b       	sbc	r25, r19
    1cce:	a4 0b       	sbc	r26, r20
    1cd0:	b5 0b       	sbc	r27, r21
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	ad 01       	movw	r20, r26
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <_fpadd_parts+0x1ba>
    1cd8:	2e 19       	sub	r18, r14
    1cda:	3f 09       	sbc	r19, r15
    1cdc:	40 0b       	sbc	r20, r16
    1cde:	51 0b       	sbc	r21, r17
    1ce0:	57 fd       	sbrc	r21, 7
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <_fpadd_parts+0x1c6>
    1ce4:	19 82       	std	Y+1, r1	; 0x01
    1ce6:	ca 82       	std	Y+2, r12	; 0x02
    1ce8:	db 82       	std	Y+3, r13	; 0x03
    1cea:	0b c0       	rjmp	.+22     	; 0x1d02 <_fpadd_parts+0x1dc>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	ca 82       	std	Y+2, r12	; 0x02
    1cf2:	db 82       	std	Y+3, r13	; 0x03
    1cf4:	50 95       	com	r21
    1cf6:	40 95       	com	r20
    1cf8:	30 95       	com	r19
    1cfa:	21 95       	neg	r18
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	2c 83       	std	Y+4, r18	; 0x04
    1d04:	3d 83       	std	Y+5, r19	; 0x05
    1d06:	4e 83       	std	Y+6, r20	; 0x06
    1d08:	5f 83       	std	Y+7, r21	; 0x07
    1d0a:	0d c0       	rjmp	.+26     	; 0x1d26 <_fpadd_parts+0x200>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	aa 1f       	adc	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	8c 83       	std	Y+4, r24	; 0x04
    1d16:	9d 83       	std	Y+5, r25	; 0x05
    1d18:	ae 83       	std	Y+6, r26	; 0x06
    1d1a:	bf 83       	std	Y+7, r27	; 0x07
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	9b 83       	std	Y+3, r25	; 0x03
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	ae 81       	ldd	r26, Y+6	; 0x06
    1d2c:	bf 81       	ldd	r27, Y+7	; 0x07
    1d2e:	9c 01       	movw	r18, r24
    1d30:	ad 01       	movw	r20, r26
    1d32:	21 50       	subi	r18, 0x01	; 1
    1d34:	30 40       	sbci	r19, 0x00	; 0
    1d36:	40 40       	sbci	r20, 0x00	; 0
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d3c:	ef ef       	ldi	r30, 0xFF	; 255
    1d3e:	3e 07       	cpc	r19, r30
    1d40:	ef ef       	ldi	r30, 0xFF	; 255
    1d42:	4e 07       	cpc	r20, r30
    1d44:	ef e3       	ldi	r30, 0x3F	; 63
    1d46:	5e 07       	cpc	r21, r30
    1d48:	08 f3       	brcs	.-62     	; 0x1d0c <_fpadd_parts+0x1e6>
    1d4a:	0b c0       	rjmp	.+22     	; 0x1d62 <_fpadd_parts+0x23c>
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	ca 82       	std	Y+2, r12	; 0x02
    1d50:	db 82       	std	Y+3, r13	; 0x03
    1d52:	2e 0d       	add	r18, r14
    1d54:	3f 1d       	adc	r19, r15
    1d56:	40 1f       	adc	r20, r16
    1d58:	51 1f       	adc	r21, r17
    1d5a:	2c 83       	std	Y+4, r18	; 0x04
    1d5c:	3d 83       	std	Y+5, r19	; 0x05
    1d5e:	4e 83       	std	Y+6, r20	; 0x06
    1d60:	5f 83       	std	Y+7, r21	; 0x07
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	88 83       	st	Y, r24
    1d66:	2c 81       	ldd	r18, Y+4	; 0x04
    1d68:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d6c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d6e:	57 ff       	sbrs	r21, 7
    1d70:	1d c0       	rjmp	.+58     	; 0x1dac <_fpadd_parts+0x286>
    1d72:	da 01       	movw	r26, r20
    1d74:	c9 01       	movw	r24, r18
    1d76:	81 70       	andi	r24, 0x01	; 1
    1d78:	90 70       	andi	r25, 0x00	; 0
    1d7a:	a0 70       	andi	r26, 0x00	; 0
    1d7c:	b0 70       	andi	r27, 0x00	; 0
    1d7e:	56 95       	lsr	r21
    1d80:	47 95       	ror	r20
    1d82:	37 95       	ror	r19
    1d84:	27 95       	ror	r18
    1d86:	82 2b       	or	r24, r18
    1d88:	93 2b       	or	r25, r19
    1d8a:	a4 2b       	or	r26, r20
    1d8c:	b5 2b       	or	r27, r21
    1d8e:	8c 83       	std	Y+4, r24	; 0x04
    1d90:	9d 83       	std	Y+5, r25	; 0x05
    1d92:	ae 83       	std	Y+6, r26	; 0x06
    1d94:	bf 83       	std	Y+7, r27	; 0x07
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	9b 83       	std	Y+3, r25	; 0x03
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <_fpadd_parts+0x286>
    1da2:	e7 e8       	ldi	r30, 0x87	; 135
    1da4:	f0 e2       	ldi	r31, 0x20	; 32
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <_fpadd_parts+0x288>
    1da8:	fb 01       	movw	r30, r22
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <_fpadd_parts+0x288>
    1dac:	fe 01       	movw	r30, r28
    1dae:	cf 01       	movw	r24, r30
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	ee e0       	ldi	r30, 0x0E	; 14
    1db6:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__epilogue_restores__+0x8>

00001dba <__addsf3>:
    1dba:	a0 e2       	ldi	r26, 0x20	; 32
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e3 ee       	ldi	r30, 0xE3	; 227
    1dc0:	fe e0       	ldi	r31, 0x0E	; 14
    1dc2:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__+0x18>
    1dc6:	69 83       	std	Y+1, r22	; 0x01
    1dc8:	7a 83       	std	Y+2, r23	; 0x02
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	2d 83       	std	Y+5, r18	; 0x05
    1dd0:	3e 83       	std	Y+6, r19	; 0x06
    1dd2:	4f 83       	std	Y+7, r20	; 0x07
    1dd4:	58 87       	std	Y+8, r21	; 0x08
    1dd6:	89 e0       	ldi	r24, 0x09	; 9
    1dd8:	e8 2e       	mov	r14, r24
    1dda:	f1 2c       	mov	r15, r1
    1ddc:	ec 0e       	add	r14, r28
    1dde:	fd 1e       	adc	r15, r29
    1de0:	ce 01       	movw	r24, r28
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	b7 01       	movw	r22, r14
    1de6:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1dea:	8e 01       	movw	r16, r28
    1dec:	0f 5e       	subi	r16, 0xEF	; 239
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	ce 01       	movw	r24, r28
    1df2:	05 96       	adiw	r24, 0x05	; 5
    1df4:	b8 01       	movw	r22, r16
    1df6:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	b8 01       	movw	r22, r16
    1dfe:	ae 01       	movw	r20, r28
    1e00:	47 5e       	subi	r20, 0xE7	; 231
    1e02:	5f 4f       	sbci	r21, 0xFF	; 255
    1e04:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_fpadd_parts>
    1e08:	0e 94 67 12 	call	0x24ce	; 0x24ce <__pack_f>
    1e0c:	a0 96       	adiw	r28, 0x20	; 32
    1e0e:	e6 e0       	ldi	r30, 0x06	; 6
    1e10:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

00001e14 <__subsf3>:
    1e14:	a0 e2       	ldi	r26, 0x20	; 32
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e1       	ldi	r30, 0x10	; 16
    1e1a:	ff e0       	ldi	r31, 0x0F	; 15
    1e1c:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__+0x18>
    1e20:	69 83       	std	Y+1, r22	; 0x01
    1e22:	7a 83       	std	Y+2, r23	; 0x02
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	2d 83       	std	Y+5, r18	; 0x05
    1e2a:	3e 83       	std	Y+6, r19	; 0x06
    1e2c:	4f 83       	std	Y+7, r20	; 0x07
    1e2e:	58 87       	std	Y+8, r21	; 0x08
    1e30:	8e 01       	movw	r16, r28
    1e32:	07 5f       	subi	r16, 0xF7	; 247
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	b8 01       	movw	r22, r16
    1e3c:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1e40:	91 e1       	ldi	r25, 0x11	; 17
    1e42:	e9 2e       	mov	r14, r25
    1e44:	f1 2c       	mov	r15, r1
    1e46:	ec 0e       	add	r14, r28
    1e48:	fd 1e       	adc	r15, r29
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	05 96       	adiw	r24, 0x05	; 5
    1e4e:	b7 01       	movw	r22, r14
    1e50:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1e54:	8a 89       	ldd	r24, Y+18	; 0x12
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	89 27       	eor	r24, r25
    1e5a:	8a 8b       	std	Y+18, r24	; 0x12
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	b7 01       	movw	r22, r14
    1e60:	ae 01       	movw	r20, r28
    1e62:	47 5e       	subi	r20, 0xE7	; 231
    1e64:	5f 4f       	sbci	r21, 0xFF	; 255
    1e66:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_fpadd_parts>
    1e6a:	0e 94 67 12 	call	0x24ce	; 0x24ce <__pack_f>
    1e6e:	a0 96       	adiw	r28, 0x20	; 32
    1e70:	e6 e0       	ldi	r30, 0x06	; 6
    1e72:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

00001e76 <__mulsf3>:
    1e76:	a0 e2       	ldi	r26, 0x20	; 32
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e1 e4       	ldi	r30, 0x41	; 65
    1e7c:	ff e0       	ldi	r31, 0x0F	; 15
    1e7e:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__prologue_saves__>
    1e82:	69 83       	std	Y+1, r22	; 0x01
    1e84:	7a 83       	std	Y+2, r23	; 0x02
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
    1e8c:	3e 83       	std	Y+6, r19	; 0x06
    1e8e:	4f 83       	std	Y+7, r20	; 0x07
    1e90:	58 87       	std	Y+8, r21	; 0x08
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	be 01       	movw	r22, r28
    1e98:	67 5f       	subi	r22, 0xF7	; 247
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	05 96       	adiw	r24, 0x05	; 5
    1ea4:	be 01       	movw	r22, r28
    1ea6:	6f 5e       	subi	r22, 0xEF	; 239
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    1eae:	99 85       	ldd	r25, Y+9	; 0x09
    1eb0:	92 30       	cpi	r25, 0x02	; 2
    1eb2:	78 f0       	brcs	.+30     	; 0x1ed2 <__mulsf3+0x5c>
    1eb4:	89 89       	ldd	r24, Y+17	; 0x11
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	c0 f0       	brcs	.+48     	; 0x1eea <__mulsf3+0x74>
    1eba:	94 30       	cpi	r25, 0x04	; 4
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <__mulsf3+0x4e>
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	41 f4       	brne	.+16     	; 0x1ed2 <__mulsf3+0x5c>
    1ec2:	cb c0       	rjmp	.+406    	; 0x205a <__mulsf3+0x1e4>
    1ec4:	84 30       	cpi	r24, 0x04	; 4
    1ec6:	19 f4       	brne	.+6      	; 0x1ece <__mulsf3+0x58>
    1ec8:	92 30       	cpi	r25, 0x02	; 2
    1eca:	79 f4       	brne	.+30     	; 0x1eea <__mulsf3+0x74>
    1ecc:	c6 c0       	rjmp	.+396    	; 0x205a <__mulsf3+0x1e4>
    1ece:	92 30       	cpi	r25, 0x02	; 2
    1ed0:	51 f4       	brne	.+20     	; 0x1ee6 <__mulsf3+0x70>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ed6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed8:	29 17       	cp	r18, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__mulsf3+0x68>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	8a 87       	std	Y+10, r24	; 0x0a
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	09 96       	adiw	r24, 0x09	; 9
    1ee4:	bc c0       	rjmp	.+376    	; 0x205e <__mulsf3+0x1e8>
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	51 f4       	brne	.+20     	; 0x1efe <__mulsf3+0x88>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	2a 85       	ldd	r18, Y+10	; 0x0a
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	29 17       	cp	r18, r25
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__mulsf3+0x80>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	8a 8b       	std	Y+18, r24	; 0x12
    1ef8:	ce 01       	movw	r24, r28
    1efa:	41 96       	adiw	r24, 0x11	; 17
    1efc:	b0 c0       	rjmp	.+352    	; 0x205e <__mulsf3+0x1e8>
    1efe:	6d 84       	ldd	r6, Y+13	; 0x0d
    1f00:	7e 84       	ldd	r7, Y+14	; 0x0e
    1f02:	8f 84       	ldd	r8, Y+15	; 0x0f
    1f04:	98 88       	ldd	r9, Y+16	; 0x10
    1f06:	ed 88       	ldd	r14, Y+21	; 0x15
    1f08:	fe 88       	ldd	r15, Y+22	; 0x16
    1f0a:	0f 89       	ldd	r16, Y+23	; 0x17
    1f0c:	18 8d       	ldd	r17, Y+24	; 0x18
    1f0e:	e0 e2       	ldi	r30, 0x20	; 32
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	dc 01       	movw	r26, r24
    1f18:	aa 24       	eor	r10, r10
    1f1a:	bb 24       	eor	r11, r11
    1f1c:	65 01       	movw	r12, r10
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	a9 01       	movw	r20, r18
    1f24:	b3 01       	movw	r22, r6
    1f26:	61 70       	andi	r22, 0x01	; 1
    1f28:	70 70       	andi	r23, 0x00	; 0
    1f2a:	61 15       	cp	r22, r1
    1f2c:	71 05       	cpc	r23, r1
    1f2e:	d1 f0       	breq	.+52     	; 0x1f64 <__mulsf3+0xee>
    1f30:	2e 0d       	add	r18, r14
    1f32:	3f 1d       	adc	r19, r15
    1f34:	40 1f       	adc	r20, r16
    1f36:	51 1f       	adc	r21, r17
    1f38:	15 01       	movw	r2, r10
    1f3a:	26 01       	movw	r4, r12
    1f3c:	28 0e       	add	r2, r24
    1f3e:	39 1e       	adc	r3, r25
    1f40:	4a 1e       	adc	r4, r26
    1f42:	5b 1e       	adc	r5, r27
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	2e 15       	cp	r18, r14
    1f4e:	3f 05       	cpc	r19, r15
    1f50:	40 07       	cpc	r20, r16
    1f52:	51 07       	cpc	r21, r17
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <__mulsf3+0xe6>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	82 0d       	add	r24, r2
    1f5e:	93 1d       	adc	r25, r3
    1f60:	a4 1d       	adc	r26, r4
    1f62:	b5 1d       	adc	r27, r5
    1f64:	aa 0c       	add	r10, r10
    1f66:	bb 1c       	adc	r11, r11
    1f68:	cc 1c       	adc	r12, r12
    1f6a:	dd 1c       	adc	r13, r13
    1f6c:	17 ff       	sbrs	r17, 7
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <__mulsf3+0x10c>
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	26 2e       	mov	r2, r22
    1f74:	31 2c       	mov	r3, r1
    1f76:	41 2c       	mov	r4, r1
    1f78:	51 2c       	mov	r5, r1
    1f7a:	a2 28       	or	r10, r2
    1f7c:	b3 28       	or	r11, r3
    1f7e:	c4 28       	or	r12, r4
    1f80:	d5 28       	or	r13, r5
    1f82:	31 97       	sbiw	r30, 0x01	; 1
    1f84:	49 f0       	breq	.+18     	; 0x1f98 <__mulsf3+0x122>
    1f86:	ee 0c       	add	r14, r14
    1f88:	ff 1c       	adc	r15, r15
    1f8a:	00 1f       	adc	r16, r16
    1f8c:	11 1f       	adc	r17, r17
    1f8e:	96 94       	lsr	r9
    1f90:	87 94       	ror	r8
    1f92:	77 94       	ror	r7
    1f94:	67 94       	ror	r6
    1f96:	c6 cf       	rjmp	.-116    	; 0x1f24 <__mulsf3+0xae>
    1f98:	6b 89       	ldd	r22, Y+19	; 0x13
    1f9a:	7c 89       	ldd	r23, Y+20	; 0x14
    1f9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fa0:	6e 0f       	add	r22, r30
    1fa2:	7f 1f       	adc	r23, r31
    1fa4:	6e 5f       	subi	r22, 0xFE	; 254
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	6b 8f       	std	Y+27, r22	; 0x1b
    1faa:	7c 8f       	std	Y+28, r23	; 0x1c
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	ea 85       	ldd	r30, Y+10	; 0x0a
    1fb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb2:	e7 17       	cp	r30, r23
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <__mulsf3+0x142>
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	6a 8f       	std	Y+26, r22	; 0x1a
    1fba:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1fbc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1fbe:	10 c0       	rjmp	.+32     	; 0x1fe0 <__mulsf3+0x16a>
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e1 70       	andi	r30, 0x01	; 1
    1fc4:	f0 70       	andi	r31, 0x00	; 0
    1fc6:	30 97       	sbiw	r30, 0x00	; 0
    1fc8:	29 f0       	breq	.+10     	; 0x1fd4 <__mulsf3+0x15e>
    1fca:	56 95       	lsr	r21
    1fcc:	47 95       	ror	r20
    1fce:	37 95       	ror	r19
    1fd0:	27 95       	ror	r18
    1fd2:	50 68       	ori	r21, 0x80	; 128
    1fd4:	b6 95       	lsr	r27
    1fd6:	a7 95       	ror	r26
    1fd8:	97 95       	ror	r25
    1fda:	87 95       	ror	r24
    1fdc:	6f 5f       	subi	r22, 0xFF	; 255
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	b7 fd       	sbrc	r27, 7
    1fe2:	ee cf       	rjmp	.-36     	; 0x1fc0 <__mulsf3+0x14a>
    1fe4:	0c c0       	rjmp	.+24     	; 0x1ffe <__mulsf3+0x188>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	aa 1f       	adc	r26, r26
    1fec:	bb 1f       	adc	r27, r27
    1fee:	57 fd       	sbrc	r21, 7
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	44 1f       	adc	r20, r20
    1ff8:	55 1f       	adc	r21, r21
    1ffa:	61 50       	subi	r22, 0x01	; 1
    1ffc:	70 40       	sbci	r23, 0x00	; 0
    1ffe:	80 30       	cpi	r24, 0x00	; 0
    2000:	e0 e0       	ldi	r30, 0x00	; 0
    2002:	9e 07       	cpc	r25, r30
    2004:	e0 e0       	ldi	r30, 0x00	; 0
    2006:	ae 07       	cpc	r26, r30
    2008:	e0 e4       	ldi	r30, 0x40	; 64
    200a:	be 07       	cpc	r27, r30
    200c:	60 f3       	brcs	.-40     	; 0x1fe6 <__mulsf3+0x170>
    200e:	6b 8f       	std	Y+27, r22	; 0x1b
    2010:	7c 8f       	std	Y+28, r23	; 0x1c
    2012:	6f e7       	ldi	r22, 0x7F	; 127
    2014:	e6 2e       	mov	r14, r22
    2016:	f1 2c       	mov	r15, r1
    2018:	01 2d       	mov	r16, r1
    201a:	11 2d       	mov	r17, r1
    201c:	e8 22       	and	r14, r24
    201e:	f9 22       	and	r15, r25
    2020:	0a 23       	and	r16, r26
    2022:	1b 23       	and	r17, r27
    2024:	60 e4       	ldi	r22, 0x40	; 64
    2026:	e6 16       	cp	r14, r22
    2028:	f1 04       	cpc	r15, r1
    202a:	01 05       	cpc	r16, r1
    202c:	11 05       	cpc	r17, r1
    202e:	61 f4       	brne	.+24     	; 0x2048 <__mulsf3+0x1d2>
    2030:	87 fd       	sbrc	r24, 7
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <__mulsf3+0x1d2>
    2034:	21 15       	cp	r18, r1
    2036:	31 05       	cpc	r19, r1
    2038:	41 05       	cpc	r20, r1
    203a:	51 05       	cpc	r21, r1
    203c:	29 f0       	breq	.+10     	; 0x2048 <__mulsf3+0x1d2>
    203e:	80 5c       	subi	r24, 0xC0	; 192
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	af 4f       	sbci	r26, 0xFF	; 255
    2044:	bf 4f       	sbci	r27, 0xFF	; 255
    2046:	80 78       	andi	r24, 0x80	; 128
    2048:	8d 8f       	std	Y+29, r24	; 0x1d
    204a:	9e 8f       	std	Y+30, r25	; 0x1e
    204c:	af 8f       	std	Y+31, r26	; 0x1f
    204e:	b8 a3       	std	Y+32, r27	; 0x20
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	89 8f       	std	Y+25, r24	; 0x19
    2054:	ce 01       	movw	r24, r28
    2056:	49 96       	adiw	r24, 0x19	; 25
    2058:	02 c0       	rjmp	.+4      	; 0x205e <__mulsf3+0x1e8>
    205a:	87 e8       	ldi	r24, 0x87	; 135
    205c:	90 e2       	ldi	r25, 0x20	; 32
    205e:	0e 94 67 12 	call	0x24ce	; 0x24ce <__pack_f>
    2062:	a0 96       	adiw	r28, 0x20	; 32
    2064:	e2 e1       	ldi	r30, 0x12	; 18
    2066:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__>

0000206a <__divsf3>:
    206a:	a8 e1       	ldi	r26, 0x18	; 24
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e3       	ldi	r30, 0x3B	; 59
    2070:	f0 e1       	ldi	r31, 0x10	; 16
    2072:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__prologue_saves__+0x10>
    2076:	69 83       	std	Y+1, r22	; 0x01
    2078:	7a 83       	std	Y+2, r23	; 0x02
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	2d 83       	std	Y+5, r18	; 0x05
    2080:	3e 83       	std	Y+6, r19	; 0x06
    2082:	4f 83       	std	Y+7, r20	; 0x07
    2084:	58 87       	std	Y+8, r21	; 0x08
    2086:	8e 01       	movw	r16, r28
    2088:	07 5f       	subi	r16, 0xF7	; 247
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	ce 01       	movw	r24, r28
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	b8 01       	movw	r22, r16
    2092:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    2096:	81 e1       	ldi	r24, 0x11	; 17
    2098:	e8 2e       	mov	r14, r24
    209a:	f1 2c       	mov	r15, r1
    209c:	ec 0e       	add	r14, r28
    209e:	fd 1e       	adc	r15, r29
    20a0:	ce 01       	movw	r24, r28
    20a2:	05 96       	adiw	r24, 0x05	; 5
    20a4:	b7 01       	movw	r22, r14
    20a6:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    20aa:	99 85       	ldd	r25, Y+9	; 0x09
    20ac:	92 30       	cpi	r25, 0x02	; 2
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <__divsf3+0x48>
    20b0:	83 c0       	rjmp	.+262    	; 0x21b8 <__divsf3+0x14e>
    20b2:	89 89       	ldd	r24, Y+17	; 0x11
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <__divsf3+0x50>
    20b8:	7b c0       	rjmp	.+246    	; 0x21b0 <__divsf3+0x146>
    20ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    20bc:	3a 89       	ldd	r19, Y+18	; 0x12
    20be:	23 27       	eor	r18, r19
    20c0:	2a 87       	std	Y+10, r18	; 0x0a
    20c2:	94 30       	cpi	r25, 0x04	; 4
    20c4:	11 f0       	breq	.+4      	; 0x20ca <__divsf3+0x60>
    20c6:	92 30       	cpi	r25, 0x02	; 2
    20c8:	21 f4       	brne	.+8      	; 0x20d2 <__divsf3+0x68>
    20ca:	98 17       	cp	r25, r24
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <__divsf3+0x66>
    20ce:	6c c0       	rjmp	.+216    	; 0x21a8 <__divsf3+0x13e>
    20d0:	71 c0       	rjmp	.+226    	; 0x21b4 <__divsf3+0x14a>
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <__divsf3+0x7a>
    20d6:	1d 86       	std	Y+13, r1	; 0x0d
    20d8:	1e 86       	std	Y+14, r1	; 0x0e
    20da:	1f 86       	std	Y+15, r1	; 0x0f
    20dc:	18 8a       	std	Y+16, r1	; 0x10
    20de:	1b 86       	std	Y+11, r1	; 0x0b
    20e0:	1c 86       	std	Y+12, r1	; 0x0c
    20e2:	6a c0       	rjmp	.+212    	; 0x21b8 <__divsf3+0x14e>
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	19 f4       	brne	.+6      	; 0x20ee <__divsf3+0x84>
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	89 87       	std	Y+9, r24	; 0x09
    20ec:	65 c0       	rjmp	.+202    	; 0x21b8 <__divsf3+0x14e>
    20ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    20f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f2:	2b 89       	ldd	r18, Y+19	; 0x13
    20f4:	3c 89       	ldd	r19, Y+20	; 0x14
    20f6:	82 1b       	sub	r24, r18
    20f8:	93 0b       	sbc	r25, r19
    20fa:	8b 87       	std	Y+11, r24	; 0x0b
    20fc:	9c 87       	std	Y+12, r25	; 0x0c
    20fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    2100:	3e 85       	ldd	r19, Y+14	; 0x0e
    2102:	4f 85       	ldd	r20, Y+15	; 0x0f
    2104:	58 89       	ldd	r21, Y+16	; 0x10
    2106:	ed 88       	ldd	r14, Y+21	; 0x15
    2108:	fe 88       	ldd	r15, Y+22	; 0x16
    210a:	0f 89       	ldd	r16, Y+23	; 0x17
    210c:	18 8d       	ldd	r17, Y+24	; 0x18
    210e:	2e 15       	cp	r18, r14
    2110:	3f 05       	cpc	r19, r15
    2112:	40 07       	cpc	r20, r16
    2114:	51 07       	cpc	r21, r17
    2116:	38 f4       	brcc	.+14     	; 0x2126 <__divsf3+0xbc>
    2118:	22 0f       	add	r18, r18
    211a:	33 1f       	adc	r19, r19
    211c:	44 1f       	adc	r20, r20
    211e:	55 1f       	adc	r21, r21
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	8b 87       	std	Y+11, r24	; 0x0b
    2124:	9c 87       	std	Y+12, r25	; 0x0c
    2126:	6f e1       	ldi	r22, 0x1F	; 31
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	a1 2c       	mov	r10, r1
    212c:	b1 2c       	mov	r11, r1
    212e:	c1 2c       	mov	r12, r1
    2130:	a0 e4       	ldi	r26, 0x40	; 64
    2132:	da 2e       	mov	r13, r26
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	dc 01       	movw	r26, r24
    213a:	2e 15       	cp	r18, r14
    213c:	3f 05       	cpc	r19, r15
    213e:	40 07       	cpc	r20, r16
    2140:	51 07       	cpc	r21, r17
    2142:	40 f0       	brcs	.+16     	; 0x2154 <__divsf3+0xea>
    2144:	8a 29       	or	r24, r10
    2146:	9b 29       	or	r25, r11
    2148:	ac 29       	or	r26, r12
    214a:	bd 29       	or	r27, r13
    214c:	2e 19       	sub	r18, r14
    214e:	3f 09       	sbc	r19, r15
    2150:	40 0b       	sbc	r20, r16
    2152:	51 0b       	sbc	r21, r17
    2154:	d6 94       	lsr	r13
    2156:	c7 94       	ror	r12
    2158:	b7 94       	ror	r11
    215a:	a7 94       	ror	r10
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	44 1f       	adc	r20, r20
    2162:	55 1f       	adc	r21, r21
    2164:	61 50       	subi	r22, 0x01	; 1
    2166:	70 40       	sbci	r23, 0x00	; 0
    2168:	41 f7       	brne	.-48     	; 0x213a <__divsf3+0xd0>
    216a:	6f e7       	ldi	r22, 0x7F	; 127
    216c:	e6 2e       	mov	r14, r22
    216e:	f1 2c       	mov	r15, r1
    2170:	01 2d       	mov	r16, r1
    2172:	11 2d       	mov	r17, r1
    2174:	e8 22       	and	r14, r24
    2176:	f9 22       	and	r15, r25
    2178:	0a 23       	and	r16, r26
    217a:	1b 23       	and	r17, r27
    217c:	60 e4       	ldi	r22, 0x40	; 64
    217e:	e6 16       	cp	r14, r22
    2180:	f1 04       	cpc	r15, r1
    2182:	01 05       	cpc	r16, r1
    2184:	11 05       	cpc	r17, r1
    2186:	61 f4       	brne	.+24     	; 0x21a0 <__divsf3+0x136>
    2188:	87 fd       	sbrc	r24, 7
    218a:	0a c0       	rjmp	.+20     	; 0x21a0 <__divsf3+0x136>
    218c:	21 15       	cp	r18, r1
    218e:	31 05       	cpc	r19, r1
    2190:	41 05       	cpc	r20, r1
    2192:	51 05       	cpc	r21, r1
    2194:	29 f0       	breq	.+10     	; 0x21a0 <__divsf3+0x136>
    2196:	80 5c       	subi	r24, 0xC0	; 192
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	af 4f       	sbci	r26, 0xFF	; 255
    219c:	bf 4f       	sbci	r27, 0xFF	; 255
    219e:	80 78       	andi	r24, 0x80	; 128
    21a0:	8d 87       	std	Y+13, r24	; 0x0d
    21a2:	9e 87       	std	Y+14, r25	; 0x0e
    21a4:	af 87       	std	Y+15, r26	; 0x0f
    21a6:	b8 8b       	std	Y+16, r27	; 0x10
    21a8:	8e 01       	movw	r16, r28
    21aa:	07 5f       	subi	r16, 0xF7	; 247
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <__divsf3+0x14e>
    21b0:	87 01       	movw	r16, r14
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <__divsf3+0x14e>
    21b4:	07 e8       	ldi	r16, 0x87	; 135
    21b6:	10 e2       	ldi	r17, 0x20	; 32
    21b8:	c8 01       	movw	r24, r16
    21ba:	0e 94 67 12 	call	0x24ce	; 0x24ce <__pack_f>
    21be:	68 96       	adiw	r28, 0x18	; 24
    21c0:	ea e0       	ldi	r30, 0x0A	; 10
    21c2:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x10>

000021c6 <__gesf2>:
    21c6:	a8 e1       	ldi	r26, 0x18	; 24
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e9 ee       	ldi	r30, 0xE9	; 233
    21cc:	f0 e1       	ldi	r31, 0x10	; 16
    21ce:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__+0x18>
    21d2:	69 83       	std	Y+1, r22	; 0x01
    21d4:	7a 83       	std	Y+2, r23	; 0x02
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	2d 83       	std	Y+5, r18	; 0x05
    21dc:	3e 83       	std	Y+6, r19	; 0x06
    21de:	4f 83       	std	Y+7, r20	; 0x07
    21e0:	58 87       	std	Y+8, r21	; 0x08
    21e2:	8e 01       	movw	r16, r28
    21e4:	07 5f       	subi	r16, 0xF7	; 247
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	ce 01       	movw	r24, r28
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	b8 01       	movw	r22, r16
    21ee:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    21f2:	81 e1       	ldi	r24, 0x11	; 17
    21f4:	e8 2e       	mov	r14, r24
    21f6:	f1 2c       	mov	r15, r1
    21f8:	ec 0e       	add	r14, r28
    21fa:	fd 1e       	adc	r15, r29
    21fc:	ce 01       	movw	r24, r28
    21fe:	05 96       	adiw	r24, 0x05	; 5
    2200:	b7 01       	movw	r22, r14
    2202:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	40 f0       	brcs	.+16     	; 0x221c <__gesf2+0x56>
    220c:	89 89       	ldd	r24, Y+17	; 0x11
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	28 f0       	brcs	.+10     	; 0x221c <__gesf2+0x56>
    2212:	c8 01       	movw	r24, r16
    2214:	b7 01       	movw	r22, r14
    2216:	0e 94 9e 13 	call	0x273c	; 0x273c <__fpcmp_parts_f>
    221a:	01 c0       	rjmp	.+2      	; 0x221e <__gesf2+0x58>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	68 96       	adiw	r28, 0x18	; 24
    2220:	e6 e0       	ldi	r30, 0x06	; 6
    2222:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

00002226 <__ltsf2>:
    2226:	a8 e1       	ldi	r26, 0x18	; 24
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 e1       	ldi	r30, 0x19	; 25
    222c:	f1 e1       	ldi	r31, 0x11	; 17
    222e:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__+0x18>
    2232:	69 83       	std	Y+1, r22	; 0x01
    2234:	7a 83       	std	Y+2, r23	; 0x02
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	2d 83       	std	Y+5, r18	; 0x05
    223c:	3e 83       	std	Y+6, r19	; 0x06
    223e:	4f 83       	std	Y+7, r20	; 0x07
    2240:	58 87       	std	Y+8, r21	; 0x08
    2242:	8e 01       	movw	r16, r28
    2244:	07 5f       	subi	r16, 0xF7	; 247
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	ce 01       	movw	r24, r28
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	b8 01       	movw	r22, r16
    224e:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    2252:	81 e1       	ldi	r24, 0x11	; 17
    2254:	e8 2e       	mov	r14, r24
    2256:	f1 2c       	mov	r15, r1
    2258:	ec 0e       	add	r14, r28
    225a:	fd 1e       	adc	r15, r29
    225c:	ce 01       	movw	r24, r28
    225e:	05 96       	adiw	r24, 0x05	; 5
    2260:	b7 01       	movw	r22, r14
    2262:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	40 f0       	brcs	.+16     	; 0x227c <__ltsf2+0x56>
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	28 f0       	brcs	.+10     	; 0x227c <__ltsf2+0x56>
    2272:	c8 01       	movw	r24, r16
    2274:	b7 01       	movw	r22, r14
    2276:	0e 94 9e 13 	call	0x273c	; 0x273c <__fpcmp_parts_f>
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__ltsf2+0x58>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	68 96       	adiw	r28, 0x18	; 24
    2280:	e6 e0       	ldi	r30, 0x06	; 6
    2282:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

00002286 <__fixsfsi>:
    2286:	ac e0       	ldi	r26, 0x0C	; 12
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 e4       	ldi	r30, 0x49	; 73
    228c:	f1 e1       	ldi	r31, 0x11	; 17
    228e:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__+0x20>
    2292:	69 83       	std	Y+1, r22	; 0x01
    2294:	7a 83       	std	Y+2, r23	; 0x02
    2296:	8b 83       	std	Y+3, r24	; 0x03
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	ce 01       	movw	r24, r28
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	be 01       	movw	r22, r28
    22a0:	6b 5f       	subi	r22, 0xFB	; 251
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	0e 94 35 13 	call	0x266a	; 0x266a <__unpack_f>
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	81 f1       	breq	.+96     	; 0x230e <__fixsfsi+0x88>
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	70 f1       	brcs	.+92     	; 0x230e <__fixsfsi+0x88>
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	21 f4       	brne	.+8      	; 0x22be <__fixsfsi+0x38>
    22b6:	8e 81       	ldd	r24, Y+6	; 0x06
    22b8:	88 23       	and	r24, r24
    22ba:	69 f1       	breq	.+90     	; 0x2316 <__fixsfsi+0x90>
    22bc:	0a c0       	rjmp	.+20     	; 0x22d2 <__fixsfsi+0x4c>
    22be:	2f 81       	ldd	r18, Y+7	; 0x07
    22c0:	38 85       	ldd	r19, Y+8	; 0x08
    22c2:	37 fd       	sbrc	r19, 7
    22c4:	24 c0       	rjmp	.+72     	; 0x230e <__fixsfsi+0x88>
    22c6:	6e 81       	ldd	r22, Y+6	; 0x06
    22c8:	2f 31       	cpi	r18, 0x1F	; 31
    22ca:	31 05       	cpc	r19, r1
    22cc:	3c f0       	brlt	.+14     	; 0x22dc <__fixsfsi+0x56>
    22ce:	66 23       	and	r22, r22
    22d0:	11 f1       	breq	.+68     	; 0x2316 <__fixsfsi+0x90>
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e8       	ldi	r21, 0x80	; 128
    22da:	21 c0       	rjmp	.+66     	; 0x231e <__fixsfsi+0x98>
    22dc:	8e e1       	ldi	r24, 0x1E	; 30
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	82 1b       	sub	r24, r18
    22e2:	93 0b       	sbc	r25, r19
    22e4:	29 85       	ldd	r18, Y+9	; 0x09
    22e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    22e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    22ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    22ec:	04 c0       	rjmp	.+8      	; 0x22f6 <__fixsfsi+0x70>
    22ee:	56 95       	lsr	r21
    22f0:	47 95       	ror	r20
    22f2:	37 95       	ror	r19
    22f4:	27 95       	ror	r18
    22f6:	8a 95       	dec	r24
    22f8:	d2 f7       	brpl	.-12     	; 0x22ee <__fixsfsi+0x68>
    22fa:	66 23       	and	r22, r22
    22fc:	81 f0       	breq	.+32     	; 0x231e <__fixsfsi+0x98>
    22fe:	50 95       	com	r21
    2300:	40 95       	com	r20
    2302:	30 95       	com	r19
    2304:	21 95       	neg	r18
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	4f 4f       	sbci	r20, 0xFF	; 255
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	08 c0       	rjmp	.+16     	; 0x231e <__fixsfsi+0x98>
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	a9 01       	movw	r20, r18
    2314:	04 c0       	rjmp	.+8      	; 0x231e <__fixsfsi+0x98>
    2316:	2f ef       	ldi	r18, 0xFF	; 255
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f ef       	ldi	r20, 0xFF	; 255
    231c:	5f e7       	ldi	r21, 0x7F	; 127
    231e:	b9 01       	movw	r22, r18
    2320:	ca 01       	movw	r24, r20
    2322:	2c 96       	adiw	r28, 0x0c	; 12
    2324:	e2 e0       	ldi	r30, 0x02	; 2
    2326:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x20>

0000232a <__floatunsisf>:
    232a:	a8 e0       	ldi	r26, 0x08	; 8
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	eb e9       	ldi	r30, 0x9B	; 155
    2330:	f1 e1       	ldi	r31, 0x11	; 17
    2332:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__prologue_saves__+0x14>
    2336:	7b 01       	movw	r14, r22
    2338:	8c 01       	movw	r16, r24
    233a:	1a 82       	std	Y+2, r1	; 0x02
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	81 05       	cpc	r24, r1
    2342:	91 05       	cpc	r25, r1
    2344:	19 f4       	brne	.+6      	; 0x234c <__floatunsisf+0x22>
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	5f c0       	rjmp	.+190    	; 0x240a <__floatunsisf+0xe0>
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	8e e1       	ldi	r24, 0x1E	; 30
    2352:	c8 2e       	mov	r12, r24
    2354:	d1 2c       	mov	r13, r1
    2356:	cb 82       	std	Y+3, r12	; 0x03
    2358:	dc 82       	std	Y+4, r13	; 0x04
    235a:	ed 82       	std	Y+5, r14	; 0x05
    235c:	fe 82       	std	Y+6, r15	; 0x06
    235e:	0f 83       	std	Y+7, r16	; 0x07
    2360:	18 87       	std	Y+8, r17	; 0x08
    2362:	c8 01       	movw	r24, r16
    2364:	b7 01       	movw	r22, r14
    2366:	0e 94 0d 12 	call	0x241a	; 0x241a <__clzsi2>
    236a:	fc 01       	movw	r30, r24
    236c:	31 97       	sbiw	r30, 0x01	; 1
    236e:	f7 ff       	sbrs	r31, 7
    2370:	3a c0       	rjmp	.+116    	; 0x23e6 <__floatunsisf+0xbc>
    2372:	aa 27       	eor	r26, r26
    2374:	bb 27       	eor	r27, r27
    2376:	ae 1b       	sub	r26, r30
    2378:	bf 0b       	sbc	r27, r31
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	0a 2e       	mov	r0, r26
    2384:	04 c0       	rjmp	.+8      	; 0x238e <__floatunsisf+0x64>
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	44 1f       	adc	r20, r20
    238c:	55 1f       	adc	r21, r21
    238e:	0a 94       	dec	r0
    2390:	d2 f7       	brpl	.-12     	; 0x2386 <__floatunsisf+0x5c>
    2392:	21 50       	subi	r18, 0x01	; 1
    2394:	30 40       	sbci	r19, 0x00	; 0
    2396:	40 40       	sbci	r20, 0x00	; 0
    2398:	50 40       	sbci	r21, 0x00	; 0
    239a:	2e 21       	and	r18, r14
    239c:	3f 21       	and	r19, r15
    239e:	40 23       	and	r20, r16
    23a0:	51 23       	and	r21, r17
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	21 15       	cp	r18, r1
    23ac:	31 05       	cpc	r19, r1
    23ae:	41 05       	cpc	r20, r1
    23b0:	51 05       	cpc	r21, r1
    23b2:	19 f4       	brne	.+6      	; 0x23ba <__floatunsisf+0x90>
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	cb 01       	movw	r24, r22
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <__floatunsisf+0x9a>
    23bc:	16 95       	lsr	r17
    23be:	07 95       	ror	r16
    23c0:	f7 94       	ror	r15
    23c2:	e7 94       	ror	r14
    23c4:	aa 95       	dec	r26
    23c6:	d2 f7       	brpl	.-12     	; 0x23bc <__floatunsisf+0x92>
    23c8:	e6 2a       	or	r14, r22
    23ca:	f7 2a       	or	r15, r23
    23cc:	08 2b       	or	r16, r24
    23ce:	19 2b       	or	r17, r25
    23d0:	ed 82       	std	Y+5, r14	; 0x05
    23d2:	fe 82       	std	Y+6, r15	; 0x06
    23d4:	0f 83       	std	Y+7, r16	; 0x07
    23d6:	18 87       	std	Y+8, r17	; 0x08
    23d8:	8e e1       	ldi	r24, 0x1E	; 30
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	8e 1b       	sub	r24, r30
    23de:	9f 0b       	sbc	r25, r31
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	12 c0       	rjmp	.+36     	; 0x240a <__floatunsisf+0xe0>
    23e6:	30 97       	sbiw	r30, 0x00	; 0
    23e8:	81 f0       	breq	.+32     	; 0x240a <__floatunsisf+0xe0>
    23ea:	0e 2e       	mov	r0, r30
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <__floatunsisf+0xcc>
    23ee:	ee 0c       	add	r14, r14
    23f0:	ff 1c       	adc	r15, r15
    23f2:	00 1f       	adc	r16, r16
    23f4:	11 1f       	adc	r17, r17
    23f6:	0a 94       	dec	r0
    23f8:	d2 f7       	brpl	.-12     	; 0x23ee <__floatunsisf+0xc4>
    23fa:	ed 82       	std	Y+5, r14	; 0x05
    23fc:	fe 82       	std	Y+6, r15	; 0x06
    23fe:	0f 83       	std	Y+7, r16	; 0x07
    2400:	18 87       	std	Y+8, r17	; 0x08
    2402:	ce 1a       	sub	r12, r30
    2404:	df 0a       	sbc	r13, r31
    2406:	cb 82       	std	Y+3, r12	; 0x03
    2408:	dc 82       	std	Y+4, r13	; 0x04
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	0e 94 67 12 	call	0x24ce	; 0x24ce <__pack_f>
    2412:	28 96       	adiw	r28, 0x08	; 8
    2414:	e8 e0       	ldi	r30, 0x08	; 8
    2416:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x14>

0000241a <__clzsi2>:
    241a:	af 92       	push	r10
    241c:	bf 92       	push	r11
    241e:	cf 92       	push	r12
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	7b 01       	movw	r14, r22
    242c:	8c 01       	movw	r16, r24
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	e8 16       	cp	r14, r24
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	f8 06       	cpc	r15, r24
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	08 07       	cpc	r16, r24
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	18 07       	cpc	r17, r24
    243e:	58 f4       	brcc	.+22     	; 0x2456 <__clzsi2+0x3c>
    2440:	ef ef       	ldi	r30, 0xFF	; 255
    2442:	ee 16       	cp	r14, r30
    2444:	f1 04       	cpc	r15, r1
    2446:	01 05       	cpc	r16, r1
    2448:	11 05       	cpc	r17, r1
    244a:	09 f0       	breq	.+2      	; 0x244e <__clzsi2+0x34>
    244c:	90 f4       	brcc	.+36     	; 0x2472 <__clzsi2+0x58>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	dc 01       	movw	r26, r24
    2454:	17 c0       	rjmp	.+46     	; 0x2484 <__clzsi2+0x6a>
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	ef 16       	cp	r14, r31
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	ff 06       	cpc	r15, r31
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	0f 07       	cpc	r16, r31
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	1f 07       	cpc	r17, r31
    2466:	50 f4       	brcc	.+20     	; 0x247c <__clzsi2+0x62>
    2468:	80 e1       	ldi	r24, 0x10	; 16
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	09 c0       	rjmp	.+18     	; 0x2484 <__clzsi2+0x6a>
    2472:	88 e0       	ldi	r24, 0x08	; 8
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e0       	ldi	r26, 0x00	; 0
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <__clzsi2+0x6a>
    247c:	88 e1       	ldi	r24, 0x18	; 24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	20 e2       	ldi	r18, 0x20	; 32
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	28 1b       	sub	r18, r24
    248e:	39 0b       	sbc	r19, r25
    2490:	4a 0b       	sbc	r20, r26
    2492:	5b 0b       	sbc	r21, r27
    2494:	57 01       	movw	r10, r14
    2496:	68 01       	movw	r12, r16
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <__clzsi2+0x88>
    249a:	d6 94       	lsr	r13
    249c:	c7 94       	ror	r12
    249e:	b7 94       	ror	r11
    24a0:	a7 94       	ror	r10
    24a2:	8a 95       	dec	r24
    24a4:	d2 f7       	brpl	.-12     	; 0x249a <__clzsi2+0x80>
    24a6:	d6 01       	movw	r26, r12
    24a8:	c5 01       	movw	r24, r10
    24aa:	81 57       	subi	r24, 0x71	; 113
    24ac:	9f 4d       	sbci	r25, 0xDF	; 223
    24ae:	fc 01       	movw	r30, r24
    24b0:	80 81       	ld	r24, Z
    24b2:	28 1b       	sub	r18, r24
    24b4:	31 09       	sbc	r19, r1
    24b6:	41 09       	sbc	r20, r1
    24b8:	51 09       	sbc	r21, r1
    24ba:	c9 01       	movw	r24, r18
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	ff 90       	pop	r15
    24c2:	ef 90       	pop	r14
    24c4:	df 90       	pop	r13
    24c6:	cf 90       	pop	r12
    24c8:	bf 90       	pop	r11
    24ca:	af 90       	pop	r10
    24cc:	08 95       	ret

000024ce <__pack_f>:
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	fc 01       	movw	r30, r24
    24dc:	24 81       	ldd	r18, Z+4	; 0x04
    24de:	35 81       	ldd	r19, Z+5	; 0x05
    24e0:	46 81       	ldd	r20, Z+6	; 0x06
    24e2:	57 81       	ldd	r21, Z+7	; 0x07
    24e4:	61 81       	ldd	r22, Z+1	; 0x01
    24e6:	80 81       	ld	r24, Z
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	20 f4       	brcc	.+8      	; 0x24f4 <__pack_f+0x26>
    24ec:	40 61       	ori	r20, 0x10	; 16
    24ee:	ef ef       	ldi	r30, 0xFF	; 255
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	a3 c0       	rjmp	.+326    	; 0x263a <__pack_f+0x16c>
    24f4:	84 30       	cpi	r24, 0x04	; 4
    24f6:	09 f4       	brne	.+2      	; 0x24fa <__pack_f+0x2c>
    24f8:	9b c0       	rjmp	.+310    	; 0x2630 <__pack_f+0x162>
    24fa:	82 30       	cpi	r24, 0x02	; 2
    24fc:	09 f4       	brne	.+2      	; 0x2500 <__pack_f+0x32>
    24fe:	92 c0       	rjmp	.+292    	; 0x2624 <__pack_f+0x156>
    2500:	21 15       	cp	r18, r1
    2502:	31 05       	cpc	r19, r1
    2504:	41 05       	cpc	r20, r1
    2506:	51 05       	cpc	r21, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <__pack_f+0x3e>
    250a:	8f c0       	rjmp	.+286    	; 0x262a <__pack_f+0x15c>
    250c:	02 80       	ldd	r0, Z+2	; 0x02
    250e:	f3 81       	ldd	r31, Z+3	; 0x03
    2510:	e0 2d       	mov	r30, r0
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	e2 38       	cpi	r30, 0x82	; 130
    2516:	f8 07       	cpc	r31, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <__pack_f+0x4e>
    251a:	5a c0       	rjmp	.+180    	; 0x25d0 <__pack_f+0x102>
    251c:	c2 e8       	ldi	r28, 0x82	; 130
    251e:	df ef       	ldi	r29, 0xFF	; 255
    2520:	ce 1b       	sub	r28, r30
    2522:	df 0b       	sbc	r29, r31
    2524:	ca 31       	cpi	r28, 0x1A	; 26
    2526:	d1 05       	cpc	r29, r1
    2528:	6c f5       	brge	.+90     	; 0x2584 <__pack_f+0xb6>
    252a:	79 01       	movw	r14, r18
    252c:	8a 01       	movw	r16, r20
    252e:	0c 2e       	mov	r0, r28
    2530:	04 c0       	rjmp	.+8      	; 0x253a <__pack_f+0x6c>
    2532:	16 95       	lsr	r17
    2534:	07 95       	ror	r16
    2536:	f7 94       	ror	r15
    2538:	e7 94       	ror	r14
    253a:	0a 94       	dec	r0
    253c:	d2 f7       	brpl	.-12     	; 0x2532 <__pack_f+0x64>
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a0 e0       	ldi	r26, 0x00	; 0
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	0c 2e       	mov	r0, r28
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <__pack_f+0x84>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	aa 1f       	adc	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	0a 94       	dec	r0
    2554:	d2 f7       	brpl	.-12     	; 0x254a <__pack_f+0x7c>
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	a1 09       	sbc	r26, r1
    255a:	b1 09       	sbc	r27, r1
    255c:	82 23       	and	r24, r18
    255e:	93 23       	and	r25, r19
    2560:	a4 23       	and	r26, r20
    2562:	b5 23       	and	r27, r21
    2564:	21 e0       	ldi	r18, 0x01	; 1
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	a1 05       	cpc	r26, r1
    2570:	b1 05       	cpc	r27, r1
    2572:	19 f4       	brne	.+6      	; 0x257a <__pack_f+0xac>
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	a9 01       	movw	r20, r18
    257a:	2e 29       	or	r18, r14
    257c:	3f 29       	or	r19, r15
    257e:	40 2b       	or	r20, r16
    2580:	51 2b       	or	r21, r17
    2582:	03 c0       	rjmp	.+6      	; 0x258a <__pack_f+0xbc>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	a9 01       	movw	r20, r18
    258a:	da 01       	movw	r26, r20
    258c:	c9 01       	movw	r24, r18
    258e:	8f 77       	andi	r24, 0x7F	; 127
    2590:	90 70       	andi	r25, 0x00	; 0
    2592:	a0 70       	andi	r26, 0x00	; 0
    2594:	b0 70       	andi	r27, 0x00	; 0
    2596:	80 34       	cpi	r24, 0x40	; 64
    2598:	91 05       	cpc	r25, r1
    259a:	a1 05       	cpc	r26, r1
    259c:	b1 05       	cpc	r27, r1
    259e:	39 f4       	brne	.+14     	; 0x25ae <__pack_f+0xe0>
    25a0:	27 ff       	sbrs	r18, 7
    25a2:	09 c0       	rjmp	.+18     	; 0x25b6 <__pack_f+0xe8>
    25a4:	20 5c       	subi	r18, 0xC0	; 192
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	4f 4f       	sbci	r20, 0xFF	; 255
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	04 c0       	rjmp	.+8      	; 0x25b6 <__pack_f+0xe8>
    25ae:	21 5c       	subi	r18, 0xC1	; 193
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
    25b2:	4f 4f       	sbci	r20, 0xFF	; 255
    25b4:	5f 4f       	sbci	r21, 0xFF	; 255
    25b6:	e1 e0       	ldi	r30, 0x01	; 1
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	20 30       	cpi	r18, 0x00	; 0
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	38 07       	cpc	r19, r24
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	48 07       	cpc	r20, r24
    25c4:	80 e4       	ldi	r24, 0x40	; 64
    25c6:	58 07       	cpc	r21, r24
    25c8:	28 f5       	brcc	.+74     	; 0x2614 <__pack_f+0x146>
    25ca:	e0 e0       	ldi	r30, 0x00	; 0
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	22 c0       	rjmp	.+68     	; 0x2614 <__pack_f+0x146>
    25d0:	e0 38       	cpi	r30, 0x80	; 128
    25d2:	f1 05       	cpc	r31, r1
    25d4:	6c f5       	brge	.+90     	; 0x2630 <__pack_f+0x162>
    25d6:	e1 58       	subi	r30, 0x81	; 129
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	da 01       	movw	r26, r20
    25dc:	c9 01       	movw	r24, r18
    25de:	8f 77       	andi	r24, 0x7F	; 127
    25e0:	90 70       	andi	r25, 0x00	; 0
    25e2:	a0 70       	andi	r26, 0x00	; 0
    25e4:	b0 70       	andi	r27, 0x00	; 0
    25e6:	80 34       	cpi	r24, 0x40	; 64
    25e8:	91 05       	cpc	r25, r1
    25ea:	a1 05       	cpc	r26, r1
    25ec:	b1 05       	cpc	r27, r1
    25ee:	39 f4       	brne	.+14     	; 0x25fe <__pack_f+0x130>
    25f0:	27 ff       	sbrs	r18, 7
    25f2:	09 c0       	rjmp	.+18     	; 0x2606 <__pack_f+0x138>
    25f4:	20 5c       	subi	r18, 0xC0	; 192
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	4f 4f       	sbci	r20, 0xFF	; 255
    25fa:	5f 4f       	sbci	r21, 0xFF	; 255
    25fc:	04 c0       	rjmp	.+8      	; 0x2606 <__pack_f+0x138>
    25fe:	21 5c       	subi	r18, 0xC1	; 193
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	4f 4f       	sbci	r20, 0xFF	; 255
    2604:	5f 4f       	sbci	r21, 0xFF	; 255
    2606:	57 ff       	sbrs	r21, 7
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <__pack_f+0x146>
    260a:	56 95       	lsr	r21
    260c:	47 95       	ror	r20
    260e:	37 95       	ror	r19
    2610:	27 95       	ror	r18
    2612:	31 96       	adiw	r30, 0x01	; 1
    2614:	87 e0       	ldi	r24, 0x07	; 7
    2616:	56 95       	lsr	r21
    2618:	47 95       	ror	r20
    261a:	37 95       	ror	r19
    261c:	27 95       	ror	r18
    261e:	8a 95       	dec	r24
    2620:	d1 f7       	brne	.-12     	; 0x2616 <__pack_f+0x148>
    2622:	0b c0       	rjmp	.+22     	; 0x263a <__pack_f+0x16c>
    2624:	e0 e0       	ldi	r30, 0x00	; 0
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	05 c0       	rjmp	.+10     	; 0x2634 <__pack_f+0x166>
    262a:	e0 e0       	ldi	r30, 0x00	; 0
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	05 c0       	rjmp	.+10     	; 0x263a <__pack_f+0x16c>
    2630:	ef ef       	ldi	r30, 0xFF	; 255
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	a9 01       	movw	r20, r18
    263a:	8e 2f       	mov	r24, r30
    263c:	87 95       	ror	r24
    263e:	88 27       	eor	r24, r24
    2640:	87 95       	ror	r24
    2642:	94 2f       	mov	r25, r20
    2644:	9f 77       	andi	r25, 0x7F	; 127
    2646:	67 95       	ror	r22
    2648:	66 27       	eor	r22, r22
    264a:	67 95       	ror	r22
    264c:	e6 95       	lsr	r30
    264e:	e2 2e       	mov	r14, r18
    2650:	a9 2f       	mov	r26, r25
    2652:	a8 2b       	or	r26, r24
    2654:	fe 2f       	mov	r31, r30
    2656:	f6 2b       	or	r31, r22
    2658:	62 2f       	mov	r22, r18
    265a:	73 2f       	mov	r23, r19
    265c:	8a 2f       	mov	r24, r26
    265e:	9f 2f       	mov	r25, r31
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	e6 e0       	ldi	r30, 0x06	; 6
    2666:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

0000266a <__unpack_f>:
    266a:	dc 01       	movw	r26, r24
    266c:	fb 01       	movw	r30, r22
    266e:	2c 91       	ld	r18, X
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	3c 91       	ld	r19, X
    2674:	11 97       	sbiw	r26, 0x01	; 1
    2676:	12 96       	adiw	r26, 0x02	; 2
    2678:	8c 91       	ld	r24, X
    267a:	12 97       	sbiw	r26, 0x02	; 2
    267c:	48 2f       	mov	r20, r24
    267e:	4f 77       	andi	r20, 0x7F	; 127
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	98 2f       	mov	r25, r24
    2684:	99 1f       	adc	r25, r25
    2686:	99 27       	eor	r25, r25
    2688:	99 1f       	adc	r25, r25
    268a:	13 96       	adiw	r26, 0x03	; 3
    268c:	6c 91       	ld	r22, X
    268e:	13 97       	sbiw	r26, 0x03	; 3
    2690:	86 2f       	mov	r24, r22
    2692:	88 0f       	add	r24, r24
    2694:	89 2b       	or	r24, r25
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	66 1f       	adc	r22, r22
    269a:	66 27       	eor	r22, r22
    269c:	66 1f       	adc	r22, r22
    269e:	61 83       	std	Z+1, r22	; 0x01
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	39 f5       	brne	.+78     	; 0x26f2 <__unpack_f+0x88>
    26a4:	21 15       	cp	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	41 05       	cpc	r20, r1
    26aa:	51 05       	cpc	r21, r1
    26ac:	11 f4       	brne	.+4      	; 0x26b2 <__unpack_f+0x48>
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	29 c0       	rjmp	.+82     	; 0x2704 <__unpack_f+0x9a>
    26b2:	82 e8       	ldi	r24, 0x82	; 130
    26b4:	9f ef       	ldi	r25, 0xFF	; 255
    26b6:	82 83       	std	Z+2, r24	; 0x02
    26b8:	93 83       	std	Z+3, r25	; 0x03
    26ba:	67 e0       	ldi	r22, 0x07	; 7
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	44 1f       	adc	r20, r20
    26c2:	55 1f       	adc	r21, r21
    26c4:	6a 95       	dec	r22
    26c6:	d1 f7       	brne	.-12     	; 0x26bc <__unpack_f+0x52>
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	80 83       	st	Z, r24
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <__unpack_f+0x76>
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	44 1f       	adc	r20, r20
    26d4:	55 1f       	adc	r21, r21
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	82 83       	std	Z+2, r24	; 0x02
    26de:	93 83       	std	Z+3, r25	; 0x03
    26e0:	20 30       	cpi	r18, 0x00	; 0
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	38 07       	cpc	r19, r24
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	48 07       	cpc	r20, r24
    26ea:	80 e4       	ldi	r24, 0x40	; 64
    26ec:	58 07       	cpc	r21, r24
    26ee:	78 f3       	brcs	.-34     	; 0x26ce <__unpack_f+0x64>
    26f0:	20 c0       	rjmp	.+64     	; 0x2732 <__unpack_f+0xc8>
    26f2:	8f 3f       	cpi	r24, 0xFF	; 255
    26f4:	91 05       	cpc	r25, r1
    26f6:	79 f4       	brne	.+30     	; 0x2716 <__unpack_f+0xac>
    26f8:	21 15       	cp	r18, r1
    26fa:	31 05       	cpc	r19, r1
    26fc:	41 05       	cpc	r20, r1
    26fe:	51 05       	cpc	r21, r1
    2700:	19 f4       	brne	.+6      	; 0x2708 <__unpack_f+0x9e>
    2702:	84 e0       	ldi	r24, 0x04	; 4
    2704:	80 83       	st	Z, r24
    2706:	08 95       	ret
    2708:	44 ff       	sbrs	r20, 4
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <__unpack_f+0xa8>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 83       	st	Z, r24
    2710:	10 c0       	rjmp	.+32     	; 0x2732 <__unpack_f+0xc8>
    2712:	10 82       	st	Z, r1
    2714:	0e c0       	rjmp	.+28     	; 0x2732 <__unpack_f+0xc8>
    2716:	8f 57       	subi	r24, 0x7F	; 127
    2718:	90 40       	sbci	r25, 0x00	; 0
    271a:	82 83       	std	Z+2, r24	; 0x02
    271c:	93 83       	std	Z+3, r25	; 0x03
    271e:	83 e0       	ldi	r24, 0x03	; 3
    2720:	80 83       	st	Z, r24
    2722:	87 e0       	ldi	r24, 0x07	; 7
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	44 1f       	adc	r20, r20
    272a:	55 1f       	adc	r21, r21
    272c:	8a 95       	dec	r24
    272e:	d1 f7       	brne	.-12     	; 0x2724 <__unpack_f+0xba>
    2730:	50 64       	ori	r21, 0x40	; 64
    2732:	24 83       	std	Z+4, r18	; 0x04
    2734:	35 83       	std	Z+5, r19	; 0x05
    2736:	46 83       	std	Z+6, r20	; 0x06
    2738:	57 83       	std	Z+7, r21	; 0x07
    273a:	08 95       	ret

0000273c <__fpcmp_parts_f>:
    273c:	fc 01       	movw	r30, r24
    273e:	db 01       	movw	r26, r22
    2740:	90 81       	ld	r25, Z
    2742:	92 30       	cpi	r25, 0x02	; 2
    2744:	08 f4       	brcc	.+2      	; 0x2748 <__fpcmp_parts_f+0xc>
    2746:	49 c0       	rjmp	.+146    	; 0x27da <__fpcmp_parts_f+0x9e>
    2748:	8c 91       	ld	r24, X
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	08 f4       	brcc	.+2      	; 0x2750 <__fpcmp_parts_f+0x14>
    274e:	45 c0       	rjmp	.+138    	; 0x27da <__fpcmp_parts_f+0x9e>
    2750:	94 30       	cpi	r25, 0x04	; 4
    2752:	51 f4       	brne	.+20     	; 0x2768 <__fpcmp_parts_f+0x2c>
    2754:	61 81       	ldd	r22, Z+1	; 0x01
    2756:	84 30       	cpi	r24, 0x04	; 4
    2758:	b1 f5       	brne	.+108    	; 0x27c6 <__fpcmp_parts_f+0x8a>
    275a:	11 96       	adiw	r26, 0x01	; 1
    275c:	2c 91       	ld	r18, X
    275e:	11 97       	sbiw	r26, 0x01	; 1
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	26 1b       	sub	r18, r22
    2764:	31 09       	sbc	r19, r1
    2766:	41 c0       	rjmp	.+130    	; 0x27ea <__fpcmp_parts_f+0xae>
    2768:	84 30       	cpi	r24, 0x04	; 4
    276a:	21 f0       	breq	.+8      	; 0x2774 <__fpcmp_parts_f+0x38>
    276c:	92 30       	cpi	r25, 0x02	; 2
    276e:	41 f4       	brne	.+16     	; 0x2780 <__fpcmp_parts_f+0x44>
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	b1 f1       	breq	.+108    	; 0x27e0 <__fpcmp_parts_f+0xa4>
    2774:	11 96       	adiw	r26, 0x01	; 1
    2776:	8c 91       	ld	r24, X
    2778:	11 97       	sbiw	r26, 0x01	; 1
    277a:	88 23       	and	r24, r24
    277c:	a1 f1       	breq	.+104    	; 0x27e6 <__fpcmp_parts_f+0xaa>
    277e:	2d c0       	rjmp	.+90     	; 0x27da <__fpcmp_parts_f+0x9e>
    2780:	61 81       	ldd	r22, Z+1	; 0x01
    2782:	82 30       	cpi	r24, 0x02	; 2
    2784:	01 f1       	breq	.+64     	; 0x27c6 <__fpcmp_parts_f+0x8a>
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	8c 91       	ld	r24, X
    278a:	11 97       	sbiw	r26, 0x01	; 1
    278c:	68 17       	cp	r22, r24
    278e:	d9 f4       	brne	.+54     	; 0x27c6 <__fpcmp_parts_f+0x8a>
    2790:	22 81       	ldd	r18, Z+2	; 0x02
    2792:	33 81       	ldd	r19, Z+3	; 0x03
    2794:	12 96       	adiw	r26, 0x02	; 2
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	13 97       	sbiw	r26, 0x03	; 3
    279c:	82 17       	cp	r24, r18
    279e:	93 07       	cpc	r25, r19
    27a0:	94 f0       	brlt	.+36     	; 0x27c6 <__fpcmp_parts_f+0x8a>
    27a2:	28 17       	cp	r18, r24
    27a4:	39 07       	cpc	r19, r25
    27a6:	bc f0       	brlt	.+46     	; 0x27d6 <__fpcmp_parts_f+0x9a>
    27a8:	24 81       	ldd	r18, Z+4	; 0x04
    27aa:	35 81       	ldd	r19, Z+5	; 0x05
    27ac:	46 81       	ldd	r20, Z+6	; 0x06
    27ae:	57 81       	ldd	r21, Z+7	; 0x07
    27b0:	14 96       	adiw	r26, 0x04	; 4
    27b2:	8d 91       	ld	r24, X+
    27b4:	9d 91       	ld	r25, X+
    27b6:	0d 90       	ld	r0, X+
    27b8:	bc 91       	ld	r27, X
    27ba:	a0 2d       	mov	r26, r0
    27bc:	82 17       	cp	r24, r18
    27be:	93 07       	cpc	r25, r19
    27c0:	a4 07       	cpc	r26, r20
    27c2:	b5 07       	cpc	r27, r21
    27c4:	18 f4       	brcc	.+6      	; 0x27cc <__fpcmp_parts_f+0x90>
    27c6:	66 23       	and	r22, r22
    27c8:	41 f0       	breq	.+16     	; 0x27da <__fpcmp_parts_f+0x9e>
    27ca:	0d c0       	rjmp	.+26     	; 0x27e6 <__fpcmp_parts_f+0xaa>
    27cc:	28 17       	cp	r18, r24
    27ce:	39 07       	cpc	r19, r25
    27d0:	4a 07       	cpc	r20, r26
    27d2:	5b 07       	cpc	r21, r27
    27d4:	28 f4       	brcc	.+10     	; 0x27e0 <__fpcmp_parts_f+0xa4>
    27d6:	66 23       	and	r22, r22
    27d8:	31 f0       	breq	.+12     	; 0x27e6 <__fpcmp_parts_f+0xaa>
    27da:	21 e0       	ldi	r18, 0x01	; 1
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <__fpcmp_parts_f+0xae>
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <__fpcmp_parts_f+0xae>
    27e6:	2f ef       	ldi	r18, 0xFF	; 255
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	c9 01       	movw	r24, r18
    27ec:	08 95       	ret

000027ee <__mulsi3>:
    27ee:	62 9f       	mul	r22, r18
    27f0:	d0 01       	movw	r26, r0
    27f2:	73 9f       	mul	r23, r19
    27f4:	f0 01       	movw	r30, r0
    27f6:	82 9f       	mul	r24, r18
    27f8:	e0 0d       	add	r30, r0
    27fa:	f1 1d       	adc	r31, r1
    27fc:	64 9f       	mul	r22, r20
    27fe:	e0 0d       	add	r30, r0
    2800:	f1 1d       	adc	r31, r1
    2802:	92 9f       	mul	r25, r18
    2804:	f0 0d       	add	r31, r0
    2806:	83 9f       	mul	r24, r19
    2808:	f0 0d       	add	r31, r0
    280a:	74 9f       	mul	r23, r20
    280c:	f0 0d       	add	r31, r0
    280e:	65 9f       	mul	r22, r21
    2810:	f0 0d       	add	r31, r0
    2812:	99 27       	eor	r25, r25
    2814:	72 9f       	mul	r23, r18
    2816:	b0 0d       	add	r27, r0
    2818:	e1 1d       	adc	r30, r1
    281a:	f9 1f       	adc	r31, r25
    281c:	63 9f       	mul	r22, r19
    281e:	b0 0d       	add	r27, r0
    2820:	e1 1d       	adc	r30, r1
    2822:	f9 1f       	adc	r31, r25
    2824:	bd 01       	movw	r22, r26
    2826:	cf 01       	movw	r24, r30
    2828:	11 24       	eor	r1, r1
    282a:	08 95       	ret

0000282c <__udivmodhi4>:
    282c:	aa 1b       	sub	r26, r26
    282e:	bb 1b       	sub	r27, r27
    2830:	51 e1       	ldi	r21, 0x11	; 17
    2832:	07 c0       	rjmp	.+14     	; 0x2842 <__udivmodhi4_ep>

00002834 <__udivmodhi4_loop>:
    2834:	aa 1f       	adc	r26, r26
    2836:	bb 1f       	adc	r27, r27
    2838:	a6 17       	cp	r26, r22
    283a:	b7 07       	cpc	r27, r23
    283c:	10 f0       	brcs	.+4      	; 0x2842 <__udivmodhi4_ep>
    283e:	a6 1b       	sub	r26, r22
    2840:	b7 0b       	sbc	r27, r23

00002842 <__udivmodhi4_ep>:
    2842:	88 1f       	adc	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	5a 95       	dec	r21
    2848:	a9 f7       	brne	.-22     	; 0x2834 <__udivmodhi4_loop>
    284a:	80 95       	com	r24
    284c:	90 95       	com	r25
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	08 95       	ret

00002854 <__divmodhi4>:
    2854:	97 fb       	bst	r25, 7
    2856:	09 2e       	mov	r0, r25
    2858:	07 26       	eor	r0, r23
    285a:	0a d0       	rcall	.+20     	; 0x2870 <__divmodhi4_neg1>
    285c:	77 fd       	sbrc	r23, 7
    285e:	04 d0       	rcall	.+8      	; 0x2868 <__divmodhi4_neg2>
    2860:	e5 df       	rcall	.-54     	; 0x282c <__udivmodhi4>
    2862:	06 d0       	rcall	.+12     	; 0x2870 <__divmodhi4_neg1>
    2864:	00 20       	and	r0, r0
    2866:	1a f4       	brpl	.+6      	; 0x286e <__divmodhi4_exit>

00002868 <__divmodhi4_neg2>:
    2868:	70 95       	com	r23
    286a:	61 95       	neg	r22
    286c:	7f 4f       	sbci	r23, 0xFF	; 255

0000286e <__divmodhi4_exit>:
    286e:	08 95       	ret

00002870 <__divmodhi4_neg1>:
    2870:	f6 f7       	brtc	.-4      	; 0x286e <__divmodhi4_exit>
    2872:	90 95       	com	r25
    2874:	81 95       	neg	r24
    2876:	9f 4f       	sbci	r25, 0xFF	; 255
    2878:	08 95       	ret

0000287a <__udivmodsi4>:
    287a:	a1 e2       	ldi	r26, 0x21	; 33
    287c:	1a 2e       	mov	r1, r26
    287e:	aa 1b       	sub	r26, r26
    2880:	bb 1b       	sub	r27, r27
    2882:	fd 01       	movw	r30, r26
    2884:	0d c0       	rjmp	.+26     	; 0x28a0 <__udivmodsi4_ep>

00002886 <__udivmodsi4_loop>:
    2886:	aa 1f       	adc	r26, r26
    2888:	bb 1f       	adc	r27, r27
    288a:	ee 1f       	adc	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	a2 17       	cp	r26, r18
    2890:	b3 07       	cpc	r27, r19
    2892:	e4 07       	cpc	r30, r20
    2894:	f5 07       	cpc	r31, r21
    2896:	20 f0       	brcs	.+8      	; 0x28a0 <__udivmodsi4_ep>
    2898:	a2 1b       	sub	r26, r18
    289a:	b3 0b       	sbc	r27, r19
    289c:	e4 0b       	sbc	r30, r20
    289e:	f5 0b       	sbc	r31, r21

000028a0 <__udivmodsi4_ep>:
    28a0:	66 1f       	adc	r22, r22
    28a2:	77 1f       	adc	r23, r23
    28a4:	88 1f       	adc	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	1a 94       	dec	r1
    28aa:	69 f7       	brne	.-38     	; 0x2886 <__udivmodsi4_loop>
    28ac:	60 95       	com	r22
    28ae:	70 95       	com	r23
    28b0:	80 95       	com	r24
    28b2:	90 95       	com	r25
    28b4:	9b 01       	movw	r18, r22
    28b6:	ac 01       	movw	r20, r24
    28b8:	bd 01       	movw	r22, r26
    28ba:	cf 01       	movw	r24, r30
    28bc:	08 95       	ret

000028be <__prologue_saves__>:
    28be:	2f 92       	push	r2
    28c0:	3f 92       	push	r3
    28c2:	4f 92       	push	r4
    28c4:	5f 92       	push	r5
    28c6:	6f 92       	push	r6
    28c8:	7f 92       	push	r7
    28ca:	8f 92       	push	r8
    28cc:	9f 92       	push	r9
    28ce:	af 92       	push	r10
    28d0:	bf 92       	push	r11
    28d2:	cf 92       	push	r12
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	0f 93       	push	r16
    28dc:	1f 93       	push	r17
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	ca 1b       	sub	r28, r26
    28e8:	db 0b       	sbc	r29, r27
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	09 94       	ijmp

000028f0 <__epilogue_restores__>:
    28f0:	2a 88       	ldd	r2, Y+18	; 0x12
    28f2:	39 88       	ldd	r3, Y+17	; 0x11
    28f4:	48 88       	ldd	r4, Y+16	; 0x10
    28f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2900:	aa 84       	ldd	r10, Y+10	; 0x0a
    2902:	b9 84       	ldd	r11, Y+9	; 0x09
    2904:	c8 84       	ldd	r12, Y+8	; 0x08
    2906:	df 80       	ldd	r13, Y+7	; 0x07
    2908:	ee 80       	ldd	r14, Y+6	; 0x06
    290a:	fd 80       	ldd	r15, Y+5	; 0x05
    290c:	0c 81       	ldd	r16, Y+4	; 0x04
    290e:	1b 81       	ldd	r17, Y+3	; 0x03
    2910:	aa 81       	ldd	r26, Y+2	; 0x02
    2912:	b9 81       	ldd	r27, Y+1	; 0x01
    2914:	ce 0f       	add	r28, r30
    2916:	d1 1d       	adc	r29, r1
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	ed 01       	movw	r28, r26
    291e:	08 95       	ret

00002920 <_exit>:
    2920:	f8 94       	cli

00002922 <__stop_program>:
    2922:	ff cf       	rjmp	.-2      	; 0x2922 <__stop_program>
