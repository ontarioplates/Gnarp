
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00802000  000023a2  00002436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000109  00802118  00802118  0000254e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00002ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a06  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000515e  00000000  00000000  000038e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019ca  00000000  00000000  00008a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003117  00000000  00000000  0000a40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  0000d528  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001646  00000000  00000000  0000dc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000220c  00000000  00000000  0000f24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000acf  00000000  00000000  0001145a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  00011f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 ea       	ldi	r30, 0xA2	; 162
     18c:	f3 e2       	ldi	r31, 0x23	; 35
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 31       	cpi	r26, 0x18	; 24
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e1       	ldi	r26, 0x18	; 24
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 32       	cpi	r26, 0x21	; 33
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 88 06 	call	0xd10	; 0xd10 <main>
     1ae:	0c 94 cf 11 	jmp	0x239e	; 0x239e <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 2e 21 	lds	r24, 0x212E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	18 2f       	mov	r17, r24
     1ce:	eb 01       	movw	r28, r22
     1d0:	ba 01       	movw	r22, r20
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
    temp = temp*(outmax - outmin) + outmin;
     1d2:	6c 1b       	sub	r22, r28
     1d4:	7d 0b       	sbc	r23, r29
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__floatunsisf>
     1de:	6b 01       	movw	r12, r22
     1e0:	7c 01       	movw	r14, r24
    //outmin: minimum value to output
    //outmax: maximum value to output
    
    float temp;
    
    temp = 1.0*pot_values[pot]/POTRANGE;
     1e2:	e1 2f       	mov	r30, r17
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	ee 0f       	add	r30, r30
     1e8:	ff 1f       	adc	r31, r31
     1ea:	ec 5d       	subi	r30, 0xDC	; 220
     1ec:	fe 4d       	sbci	r31, 0xDE	; 222
     1ee:	60 81       	ld	r22, Z
     1f0:	71 81       	ldd	r23, Z+1	; 0x01
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__floatunsisf>
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 ef       	ldi	r19, 0xF0	; 240
     1fe:	43 e7       	ldi	r20, 0x73	; 115
     200:	55 e4       	ldi	r21, 0x45	; 69
     202:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__divsf3>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
    temp = temp*(outmax - outmin) + outmin;
     20a:	c7 01       	movw	r24, r14
     20c:	b6 01       	movw	r22, r12
     20e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__mulsf3>
     212:	06 2f       	mov	r16, r22
     214:	17 2f       	mov	r17, r23
     216:	f8 2e       	mov	r15, r24
     218:	c9 2e       	mov	r12, r25
     21a:	be 01       	movw	r22, r28
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__floatunsisf>
     224:	9b 01       	movw	r18, r22
     226:	ac 01       	movw	r20, r24
     228:	60 2f       	mov	r22, r16
     22a:	71 2f       	mov	r23, r17
     22c:	8f 2d       	mov	r24, r15
     22e:	9c 2d       	mov	r25, r12
     230:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__addsf3>
    
    return (uint16_t) temp;
     234:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fixunssfsi>
}
     238:	86 2f       	mov	r24, r22
     23a:	97 2f       	mov	r25, r23
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	08 95       	ret

0000024e <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     24e:	80 91 1c 21 	lds	r24, 0x211C
     252:	08 95       	ret

00000254 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     254:	80 91 1d 21 	lds	r24, 0x211D
     258:	08 95       	ret

0000025a <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     25a:	80 91 1a 21 	lds	r24, 0x211A
     25e:	08 95       	ret

00000260 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     260:	80 91 1b 21 	lds	r24, 0x211B
     264:	08 95       	ret

00000266 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     266:	80 91 18 21 	lds	r24, 0x2118
     26a:	08 95       	ret

0000026c <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     26c:	80 91 19 21 	lds	r24, 0x2119
     270:	08 95       	ret

00000272 <startup_functions>:

void startup_functions(){
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     276:	80 91 40 00 	lds	r24, 0x0040
     27a:	84 30       	cpi	r24, 0x04	; 4
     27c:	01 f1       	breq	.+64     	; 0x2be <startup_functions+0x4c>
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     27e:	a0 e4       	ldi	r26, 0x40	; 64
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	71 e0       	ldi	r23, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     284:	94 e0       	ldi	r25, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     286:	e0 e5       	ldi	r30, 0x50	; 80
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	6b e8       	ldi	r22, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     28c:	58 e0       	ldi	r21, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     28e:	42 ec       	ldi	r20, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     290:	38 e1       	ldi	r19, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     292:	28 ed       	ldi	r18, 0xD8	; 216
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     294:	11 96       	adiw	r26, 0x01	; 1
     296:	7c 93       	st	X, r23
     298:	11 97       	sbiw	r26, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	9c 93       	st	X, r25
     29e:	13 97       	sbiw	r26, 0x03	; 3
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     2a0:	62 83       	std	Z+2, r22	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     2a2:	50 83       	st	Z, r21
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     2a4:	81 81       	ldd	r24, Z+1	; 0x01
     2a6:	83 ff       	sbrs	r24, 3
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <startup_functions+0x32>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     2aa:	45 83       	std	Z+5, r20	; 0x05
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     2ac:	30 83       	st	Z, r19
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	84 ff       	sbrs	r24, 4
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <startup_functions+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     2b4:	24 bf       	out	0x34, r18	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     2b6:	9c 93       	st	X, r25
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     2b8:	8c 91       	ld	r24, X
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	59 f7       	brne	.-42     	; 0x294 <startup_functions+0x22>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     2be:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     2c0:	a0 e6       	ldi	r26, 0x60	; 96
     2c2:	b6 e0       	ldi	r27, 0x06	; 6
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	15 96       	adiw	r26, 0x05	; 5
     2c8:	8c 93       	st	X, r24
     2ca:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     2cc:	90 e4       	ldi	r25, 0x40	; 64
     2ce:	12 96       	adiw	r26, 0x02	; 2
     2d0:	9c 93       	st	X, r25
     2d2:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	8c 93       	st	X, r24
     2d8:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     2da:	e0 eb       	ldi	r30, 0xB0	; 176
     2dc:	f9 e0       	ldi	r31, 0x09	; 9
     2de:	88 e1       	ldi	r24, 0x18	; 24
     2e0:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	83 83       	std	Z+3, r24	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     2e6:	33 e0       	ldi	r19, 0x03	; 3
     2e8:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     2ea:	9f e2       	ldi	r25, 0x2F	; 47
     2ec:	96 83       	std	Z+6, r25	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     2ee:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     2f0:	e0 ea       	ldi	r30, 0xA0	; 160
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	92 81       	ldd	r25, Z+2	; 0x02
     2f6:	97 68       	ori	r25, 0x87	; 135
     2f8:	92 83       	std	Z+2, r25	; 0x02
    sei();                     //enable global interrupts
     2fa:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d6 e0       	ldi	r29, 0x06	; 6
     300:	99 ef       	ldi	r25, 0xF9	; 249
     302:	9a 83       	std	Y+2, r25	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     304:	e0 e0       	ldi	r30, 0x00	; 0
     306:	f2 e0       	ldi	r31, 0x02	; 2
     308:	10 82       	st	Z, r1
    ADCA.CTRLB = 0x00;
     30a:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     30c:	82 83       	std	Z+2, r24	; 0x02
    ADCA.EVCTRL = 0x00;
     30e:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x00;
     310:	14 82       	std	Z+4, r1	; 0x04
    ADCA.INTFLAGS = 0x00;
     312:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     314:	80 81       	ld	r24, Z
     316:	81 60       	ori	r24, 0x01	; 1
     318:	80 83       	st	Z, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 a3       	std	Z+32, r24	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     31e:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     320:	12 a2       	std	Z+34, r1	; 0x22
        PORTC.OUTSET = 0x08;
    
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     322:	40 e2       	ldi	r20, 0x20	; 32
     324:	56 e0       	ldi	r21, 0x06	; 6
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	fa 01       	movw	r30, r20
     32a:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     32c:	28 e0       	ldi	r18, 0x08	; 8
     32e:	80 e8       	ldi	r24, 0x80	; 128
     330:	96 e0       	ldi	r25, 0x06	; 6
     332:	fc 01       	movw	r30, r24
     334:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     336:	fa 01       	movw	r30, r20
     338:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     33e:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     340:	e0 e4       	ldi	r30, 0x40	; 64
     342:	f6 e0       	ldi	r31, 0x06	; 6
     344:	88 ef       	ldi	r24, 0xF8	; 248
     346:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     348:	8f e3       	ldi	r24, 0x3F	; 63
     34a:	11 96       	adiw	r26, 0x01	; 1
     34c:	8c 93       	st	X, r24
     34e:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     350:	88 e3       	ldi	r24, 0x38	; 56
     352:	15 96       	adiw	r26, 0x05	; 5
     354:	8c 93       	st	X, r24
     356:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     358:	90 ef       	ldi	r25, 0xF0	; 240
     35a:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     35c:	16 96       	adiw	r26, 0x06	; 6
     35e:	8c 93       	st	X, r24
     360:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     362:	87 e0       	ldi	r24, 0x07	; 7
     364:	16 96       	adiw	r26, 0x06	; 6
     366:	8c 93       	st	X, r24
     368:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     36a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <preloop_functions>:

void preloop_functions(){
     372:	df 92       	push	r13
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     380:	e0 e8       	ldi	r30, 0x80	; 128
     382:	f6 e0       	ldi	r31, 0x06	; 6
     384:	30 85       	ldd	r19, Z+8	; 0x08
     386:	36 95       	lsr	r19
     388:	36 95       	lsr	r19
     38a:	36 95       	lsr	r19
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	09 f0       	breq	.+2      	; 0x392 <preloop_functions+0x20>
     390:	20 e0       	ldi	r18, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     392:	e0 e2       	ldi	r30, 0x20	; 32
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	30 85       	ldd	r19, Z+8	; 0x08
     398:	36 95       	lsr	r19
     39a:	36 95       	lsr	r19
     39c:	30 fd       	sbrc	r19, 0
     39e:	04 c0       	rjmp	.+8      	; 0x3a8 <preloop_functions+0x36>
     3a0:	dd 24       	eor	r13, r13
     3a2:	68 94       	set
     3a4:	d1 f8       	bld	r13, 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <preloop_functions+0x38>
     3a8:	dd 24       	eor	r13, r13
     3aa:	d2 2a       	or	r13, r18
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     3ac:	e0 e2       	ldi	r30, 0x20	; 32
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	20 85       	ldd	r18, Z+8	; 0x08
     3b2:	26 95       	lsr	r18
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	20 fd       	sbrc	r18, 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <preloop_functions+0x4e>
     3bc:	34 e0       	ldi	r19, 0x04	; 4
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <preloop_functions+0x50>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	d3 2a       	or	r13, r19
     3c4:	d0 92 23 21 	sts	0x2123, r13
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3c8:	20 91 22 21 	lds	r18, 0x2122
     3cc:	c2 2f       	mov	r28, r18
     3ce:	d0 e0       	ldi	r29, 0x00	; 0
     3d0:	e0 90 21 21 	lds	r14, 0x2121
     3d4:	ee e1       	ldi	r30, 0x1E	; 30
     3d6:	f1 e2       	ldi	r31, 0x21	; 33
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	ad 2d       	mov	r26, r13
     3de:	b0 e0       	ldi	r27, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     3e0:	01 e0       	ldi	r16, 0x01	; 1
     3e2:	10 e0       	ldi	r17, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     3e4:	bd 01       	movw	r22, r26
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <preloop_functions+0x7c>
     3ea:	75 95       	asr	r23
     3ec:	67 95       	ror	r22
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <preloop_functions+0x78>
     3f2:	ae 01       	movw	r20, r28
     3f4:	02 2e       	mov	r0, r18
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <preloop_functions+0x8a>
     3f8:	55 95       	asr	r21
     3fa:	47 95       	ror	r20
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <preloop_functions+0x86>
     400:	64 17       	cp	r22, r20
     402:	75 07       	cpc	r23, r21
     404:	31 f4       	brne	.+12     	; 0x412 <preloop_functions+0xa0>
            switch_history_counts[i]++;                            //increment count        
     406:	40 81       	ld	r20, Z
     408:	4f 5f       	subi	r20, 0xFF	; 255
     40a:	40 83       	st	Z, r20
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     40c:	49 30       	cpi	r20, 0x09	; 9
     40e:	18 f4       	brcc	.+6      	; 0x416 <preloop_functions+0xa4>
     410:	0f c0       	rjmp	.+30     	; 0x430 <preloop_functions+0xbe>
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
     412:	10 82       	st	Z, r1
     414:	0d c0       	rjmp	.+26     	; 0x430 <preloop_functions+0xbe>
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     416:	a8 01       	movw	r20, r16
     418:	02 2e       	mov	r0, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <preloop_functions+0xae>
     41c:	44 0f       	add	r20, r20
     41e:	55 1f       	adc	r21, r21
     420:	0a 94       	dec	r0
     422:	e2 f7       	brpl	.-8      	; 0x41c <preloop_functions+0xaa>
     424:	54 2f       	mov	r21, r20
     426:	50 95       	com	r21
     428:	e5 22       	and	r14, r21
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     42a:	4d 21       	and	r20, r13
     42c:	e4 2a       	or	r14, r20
            switch_history_counts[i] = 0;                          //and reset count
     42e:	10 82       	st	Z, r1
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     436:	23 30       	cpi	r18, 0x03	; 3
     438:	31 05       	cpc	r19, r1
     43a:	a1 f6       	brne	.-88     	; 0x3e4 <preloop_functions+0x72>
     43c:	e0 92 21 21 	sts	0x2121, r14
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     440:	d0 92 22 21 	sts	0x2122, r13
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     444:	e0 fe       	sbrs	r14, 0
     446:	0e c0       	rjmp	.+28     	; 0x464 <preloop_functions+0xf2>
        if (toggle_switch_state)                //if toggle WAS on
     448:	20 91 18 21 	lds	r18, 0x2118
     44c:	22 23       	and	r18, r18
     44e:	19 f0       	breq	.+6      	; 0x456 <preloop_functions+0xe4>
            toggle_switch_edge = EDGE_NONE;     //no edge
     450:	10 92 19 21 	sts	0x2119, r1
     454:	03 c0       	rjmp	.+6      	; 0x45c <preloop_functions+0xea>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	20 93 19 21 	sts	0x2119, r18
        toggle_switch_state = 1;                //set current value
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	20 93 18 21 	sts	0x2118, r18
     462:	0c c0       	rjmp	.+24     	; 0x47c <preloop_functions+0x10a>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     464:	20 91 18 21 	lds	r18, 0x2118
     468:	22 23       	and	r18, r18
     46a:	21 f0       	breq	.+8      	; 0x474 <preloop_functions+0x102>
            toggle_switch_edge = EDGE_FALL;     //new off
     46c:	22 e0       	ldi	r18, 0x02	; 2
     46e:	20 93 19 21 	sts	0x2119, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <preloop_functions+0x106>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     474:	10 92 19 21 	sts	0x2119, r1
        toggle_switch_state = 0;                //set current value
     478:	10 92 18 21 	sts	0x2118, r1
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     47c:	20 91 21 21 	lds	r18, 0x2121
     480:	21 ff       	sbrs	r18, 1
     482:	0e c0       	rjmp	.+28     	; 0x4a0 <preloop_functions+0x12e>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     484:	20 91 1a 21 	lds	r18, 0x211A
     488:	22 23       	and	r18, r18
     48a:	19 f0       	breq	.+6      	; 0x492 <preloop_functions+0x120>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     48c:	10 92 1b 21 	sts	0x211B, r1
     490:	03 c0       	rjmp	.+6      	; 0x498 <preloop_functions+0x126>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	20 93 1b 21 	sts	0x211B, r18
        pushbutton_switch_state = 1;                //set current value
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	20 93 1a 21 	sts	0x211A, r18
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <preloop_functions+0x146>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     4a0:	20 91 1a 21 	lds	r18, 0x211A
     4a4:	22 23       	and	r18, r18
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <preloop_functions+0x13e>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     4a8:	22 e0       	ldi	r18, 0x02	; 2
     4aa:	20 93 1b 21 	sts	0x211B, r18
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <preloop_functions+0x142>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     4b0:	10 92 1b 21 	sts	0x211B, r1
        pushbutton_switch_state = 0;                //set current value
     4b4:	10 92 1a 21 	sts	0x211A, r1
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     4b8:	20 91 21 21 	lds	r18, 0x2121
     4bc:	22 ff       	sbrs	r18, 2
     4be:	14 c0       	rjmp	.+40     	; 0x4e8 <preloop_functions+0x176>
        if (encoder_switch_state)                //if encoder WAS on
     4c0:	20 91 1c 21 	lds	r18, 0x211C
     4c4:	22 23       	and	r18, r18
     4c6:	19 f0       	breq	.+6      	; 0x4ce <preloop_functions+0x15c>
            encoder_switch_edge = EDGE_NONE;     //no edge
     4c8:	10 92 1d 21 	sts	0x211D, r1
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <preloop_functions+0x162>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	20 93 1d 21 	sts	0x211D, r18
        encoder_switch_state = 1;                //set current value
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	20 93 1c 21 	sts	0x211C, r18
     4da:	a4 e2       	ldi	r26, 0x24	; 36
     4dc:	b1 e2       	ldi	r27, 0x21	; 33
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     4de:	23 e0       	ldi	r18, 0x03	; 3
     4e0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0d c0       	rjmp	.+26     	; 0x502 <preloop_functions+0x190>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
        encoder_switch_state = 1;                //set current value
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     4e8:	20 91 1c 21 	lds	r18, 0x211C
     4ec:	22 23       	and	r18, r18
     4ee:	21 f0       	breq	.+8      	; 0x4f8 <preloop_functions+0x186>
            encoder_switch_edge = EDGE_FALL;     //new off
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	20 93 1d 21 	sts	0x211D, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <preloop_functions+0x18a>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     4f8:	10 92 1d 21 	sts	0x211D, r1
        encoder_switch_state = 0;                //set current value
     4fc:	10 92 1c 21 	sts	0x211C, r1
     500:	ec cf       	rjmp	.-40     	; 0x4da <preloop_functions+0x168>
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     502:	43 a1       	ldd	r20, Z+35	; 0x23
     504:	41 60       	ori	r20, 0x01	; 1
     506:	43 a3       	std	Z+35, r20	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     508:	41 a1       	ldd	r20, Z+33	; 0x21
     50a:	47 7c       	andi	r20, 0xC7	; 199
     50c:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     50e:	61 a1       	ldd	r22, Z+33	; 0x21
     510:	a9 01       	movw	r20, r18
     512:	44 0f       	add	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	44 0f       	add	r20, r20
     518:	55 1f       	adc	r21, r21
     51a:	44 0f       	add	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	46 2b       	or	r20, r22
     520:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     522:	40 a1       	ldd	r20, Z+32	; 0x20
     524:	40 68       	ori	r20, 0x80	; 128
     526:	40 a3       	std	Z+32, r20	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     528:	43 a1       	ldd	r20, Z+35	; 0x23
     52a:	40 ff       	sbrs	r20, 0
     52c:	fd cf       	rjmp	.-6      	; 0x528 <preloop_functions+0x1b6>
        
        pot_values[i] = ADCA.CH0.RESL;
     52e:	44 a1       	ldd	r20, Z+36	; 0x24
        pot_values[i] |= ADCA.CH0.RESH << 8;
     530:	55 a1       	ldd	r21, Z+37	; 0x25
     532:	95 2f       	mov	r25, r21
     534:	80 e0       	ldi	r24, 0x00	; 0
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
        ADCA.CH0.CTRL |=    0x80;            //start conversion
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
        
        pot_values[i] = ADCA.CH0.RESL;
     536:	50 e0       	ldi	r21, 0x00	; 0
        pot_values[i] |= ADCA.CH0.RESH << 8;
     538:	48 2b       	or	r20, r24
     53a:	59 2b       	or	r21, r25
     53c:	4d 93       	st	X+, r20
     53e:	5c 93       	st	X, r21
     540:	11 97       	sbiw	r26, 0x01	; 1
        
        if (pot_values[i] < POTMIN)
     542:	40 3c       	cpi	r20, 0xC0	; 192
     544:	51 05       	cpc	r21, r1
     546:	20 f4       	brcc	.+8      	; 0x550 <preloop_functions+0x1de>
            pot_values[i] = 0;
     548:	1d 92       	st	X+, r1
     54a:	1c 92       	st	X, r1
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <preloop_functions+0x1e8>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     550:	40 5c       	subi	r20, 0xC0	; 192
     552:	50 40       	sbci	r21, 0x00	; 0
     554:	4d 93       	st	X+, r20
     556:	5c 93       	st	X, r21
     558:	11 97       	sbiw	r26, 0x01	; 1
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	12 96       	adiw	r26, 0x02	; 2
static void read_pots(){
    uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     560:	28 30       	cpi	r18, 0x08	; 8
     562:	31 05       	cpc	r19, r1
     564:	71 f6       	brne	.-100    	; 0x502 <preloop_functions+0x190>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     566:	e0 e2       	ldi	r30, 0x20	; 32
     568:	f6 e0       	ldi	r31, 0x06	; 6
     56a:	80 85       	ldd	r24, Z+8	; 0x08
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	80 fd       	sbrc	r24, 0
     570:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     572:	e0 e2       	ldi	r30, 0x20	; 32
     574:	f6 e0       	ldi	r31, 0x06	; 6
     576:	50 85       	ldd	r21, Z+8	; 0x08
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     578:	24 2f       	mov	r18, r20
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	90 91 2f 21 	lds	r25, 0x212F
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	89 27       	eor	r24, r25
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 23       	and	r24, r18
     588:	93 23       	and	r25, r19
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	59 f0       	breq	.+22     	; 0x5a4 <preloop_functions+0x232>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     58e:	56 95       	lsr	r21
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     590:	50 fd       	sbrc	r21, 0
     592:	04 c0       	rjmp	.+8      	; 0x59c <preloop_functions+0x22a>
            encoder_state = TURN_CW;    //CW        
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 2e 21 	sts	0x212E, r24
     59a:	06 c0       	rjmp	.+12     	; 0x5a8 <preloop_functions+0x236>
        else
            encoder_state = TURN_CCW;    //CCW
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 2e 21 	sts	0x212E, r24
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <preloop_functions+0x236>
    }
    else
        encoder_state = TURN_NONE;   
     5a4:	10 92 2e 21 	sts	0x212E, r1
    last_a = current_a;
     5a8:	40 93 2f 21 	sts	0x212F, r20

void preloop_functions(){
    read_switches();
    read_pots();
    read_encoder();
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	08 95       	ret

000005bc <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <postloop_functions+0x26>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <postloop_functions+0x28>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	8c 83       	std	Y+4, r24	; 0x04
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

static void set_LEDs(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    //booleans and such convert to LED out
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
     5ea:	69 83       	std	Y+1, r22	; 0x01
     5ec:	4a 83       	std	Y+2, r20	; 0x02
     5ee:	2b 83       	std	Y+3, r18	; 0x03
     5f0:	6e 01       	movw	r12, r28
     5f2:	08 94       	sec
     5f4:	c1 1c       	adc	r12, r1
     5f6:	d1 1c       	adc	r13, r1
     5f8:	22 e0       	ldi	r18, 0x02	; 2
     5fa:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     5fc:	0f 2e       	mov	r0, r31
     5fe:	fa e0       	ldi	r31, 0x0A	; 10
     600:	ef 2e       	mov	r14, r31
     602:	ff 24       	eor	r15, r15
     604:	f0 2d       	mov	r31, r0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     606:	0f 2e       	mov	r0, r31
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	6f 2e       	mov	r6, r31
     60c:	77 24       	eor	r7, r7
     60e:	f0 2d       	mov	r31, r0
     610:	44 24       	eor	r4, r4
     612:	55 24       	eor	r5, r5
     614:	68 94       	set
     616:	43 f8       	bld	r4, 3
     618:	e0 e6       	ldi	r30, 0x60	; 96
     61a:	f6 e0       	ldi	r31, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     61c:	0f 2e       	mov	r0, r31
     61e:	f0 e4       	ldi	r31, 0x40	; 64
     620:	af 2e       	mov	r10, r31
     622:	f6 e0       	ldi	r31, 0x06	; 6
     624:	bf 2e       	mov	r11, r31
     626:	f0 2d       	mov	r31, r0
     628:	0f 2e       	mov	r0, r31
     62a:	f0 ef       	ldi	r31, 0xF0	; 240
     62c:	8f 2e       	mov	r8, r31
     62e:	f0 2d       	mov	r31, r0
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     630:	22 24       	eor	r2, r2
     632:	33 24       	eor	r3, r3
     634:	23 94       	inc	r2
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     636:	c8 01       	movw	r24, r16
     638:	b7 01       	movw	r22, r14
     63a:	0e 94 55 11 	call	0x22aa	; 0x22aa <__udivmodhi4>
     63e:	98 2e       	mov	r9, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     640:	01 15       	cp	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	31 f4       	brne	.+12     	; 0x652 <postloop_functions+0x96>
     646:	22 30       	cpi	r18, 0x02	; 2
     648:	21 f0       	breq	.+8      	; 0x652 <postloop_functions+0x96>
            digit = 10;
     64a:	0f 2e       	mov	r0, r31
     64c:	fa e0       	ldi	r31, 0x0A	; 10
     64e:	9f 2e       	mov	r9, r31
     650:	f0 2d       	mov	r31, r0
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     652:	c9 01       	movw	r24, r18
     654:	b3 01       	movw	r22, r6
     656:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__divmodhi4>
     65a:	a2 01       	movw	r20, r4
     65c:	08 2e       	mov	r0, r24
     65e:	02 c0       	rjmp	.+4      	; 0x664 <postloop_functions+0xa8>
     660:	44 0f       	add	r20, r20
     662:	55 1f       	adc	r21, r21
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <postloop_functions+0xa4>
     668:	46 83       	std	Z+6, r20	; 0x06
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     66a:	d5 01       	movw	r26, r10
     66c:	16 96       	adiw	r26, 0x06	; 6
     66e:	8c 92       	st	X, r8
     670:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     672:	99 0c       	add	r9, r9
     674:	99 0c       	add	r9, r9
     676:	99 0c       	add	r9, r9
     678:	99 0c       	add	r9, r9
     67a:	15 96       	adiw	r26, 0x05	; 5
     67c:	9c 92       	st	X, r9
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     67e:	b8 e3       	ldi	r27, 0x38	; 56
     680:	b5 83       	std	Z+5, r27	; 0x05
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
        
        if (decimal_points[i])                              //light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     682:	d6 01       	movw	r26, r12
     684:	9d 91       	ld	r25, X+
     686:	6d 01       	movw	r12, r26
     688:	99 23       	and	r25, r25
     68a:	41 f0       	breq	.+16     	; 0x69c <postloop_functions+0xe0>
            PORTD.OUTSET = 1 << (i+2)%3;
     68c:	a1 01       	movw	r20, r2
     68e:	02 c0       	rjmp	.+4      	; 0x694 <postloop_functions+0xd8>
     690:	44 0f       	add	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	8a 95       	dec	r24
     696:	e2 f7       	brpl	.-8      	; 0x690 <postloop_functions+0xd4>
     698:	45 83       	std	Z+5, r20	; 0x05
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <postloop_functions+0xee>
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
     69c:	d1 01       	movw	r26, r2
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <postloop_functions+0xe8>
     6a0:	aa 0f       	add	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	8a 95       	dec	r24
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <postloop_functions+0xe4>
     6a8:	a6 83       	std	Z+6, r26	; 0x06
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
    bool decimal_points[3] = {decimal_point_0, decimal_point_1, decimal_point_2};
    
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     6ae:	25 30       	cpi	r18, 0x05	; 5
     6b0:	31 05       	cpc	r19, r1
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <postloop_functions+0x104>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit
     6b4:	c8 01       	movw	r24, r16
     6b6:	b7 01       	movw	r22, r14
     6b8:	0e 94 55 11 	call	0x22aa	; 0x22aa <__udivmodhi4>
     6bc:	8b 01       	movw	r16, r22
     6be:	bb cf       	rjmp	.-138    	; 0x636 <postloop_functions+0x7a>
            PORTD.OUTSET = 1 << (i+2)%3;
        else
            PORTD.OUTCLR = 1 << (i+2)%3;
    }
    
    if (status_LED)                                //light STATLED if necessary
     6c0:	bc 81       	ldd	r27, Y+4	; 0x04
     6c2:	bb 23       	and	r27, r27
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <postloop_functions+0x114>
        PORTC.OUTCLR = 0x08;
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	e0 e4       	ldi	r30, 0x40	; 64
     6ca:	f6 e0       	ldi	r31, 0x06	; 6
     6cc:	86 83       	std	Z+6, r24	; 0x06
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <postloop_functions+0x11c>
    else
        PORTC.OUTSET = 0x08;
     6d0:	88 e0       	ldi	r24, 0x08	; 8
     6d2:	e0 e4       	ldi	r30, 0x40	; 64
     6d4:	f6 e0       	ldi	r31, 0x06	; 6
     6d6:	85 83       	std	Z+5, r24	; 0x05
    read_encoder();
}

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     6d8:	24 96       	adiw	r28, 0x04	; 4
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	3f 90       	pop	r3
     700:	2f 90       	pop	r2
     702:	08 95       	ret

00000704 <__vector_16>:
#define MIDI_CHAN 0

uint16_t tick_count = 0;
uint16_t LED_count = 0;

ISR(TCC0_CCA_vect){
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
	TCC0.CNT = 0x0000;	//reset counter
     716:	e0 e0       	ldi	r30, 0x00	; 0
     718:	f8 e0       	ldi	r31, 0x08	; 8
     71a:	10 a2       	std	Z+32, r1	; 0x20
     71c:	11 a2       	std	Z+33, r1	; 0x21
	tick_count++;
     71e:	80 91 30 21 	lds	r24, 0x2130
     722:	90 91 31 21 	lds	r25, 0x2131
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	80 93 30 21 	sts	0x2130, r24
     72c:	90 93 31 21 	sts	0x2131, r25
}
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_91>:

ISR(USARTD1_RXC_vect){
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     764:	0e 94 a9 06 	call	0xd52	; 0xd52 <serial_midi_device>
     768:	40 91 b0 09 	lds	r20, 0x09B0
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 23 09 	call	0x1246	; 0x1246 <midi_device_input>
}
     774:	ff 91       	pop	r31
     776:	ef 91       	pop	r30
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	7f 91       	pop	r23
     782:	6f 91       	pop	r22
     784:	5f 91       	pop	r21
     786:	4f 91       	pop	r20
     788:	3f 91       	pop	r19
     78a:	2f 91       	pop	r18
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <test_pots>:

void test_pots(){
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     7a0:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	uint8_t selPOT = 0;
     7a4:	ff 24       	eor	r15, r15
	
	while(1){
		preloop_functions();
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7a6:	c4 e6       	ldi	r28, 0x64	; 100
     7a8:	d0 e0       	ldi	r29, 0x00	; 0
	startup_functions();
	
	uint8_t selPOT = 0;
	
	while(1){
		preloop_functions();
     7aa:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
	
		seven_segment_value = 100*(selPOT+1) + get_pot_value(selPOT, 1, 99);
     7ae:	8f 2d       	mov	r24, r15
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	43 e6       	ldi	r20, 0x63	; 99
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     7bc:	2f 2d       	mov	r18, r15
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	2c 9f       	mul	r18, r28
     7c6:	80 01       	movw	r16, r0
     7c8:	2d 9f       	mul	r18, r29
     7ca:	10 0d       	add	r17, r0
     7cc:	3c 9f       	mul	r19, r28
     7ce:	10 0d       	add	r17, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	08 0f       	add	r16, r24
     7d4:	19 1f       	adc	r17, r25
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     7d6:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <test_pots+0x52>
			selPOT++;
     7de:	f3 94       	inc	r15
			if (selPOT>4)
     7e0:	8f 2d       	mov	r24, r15
     7e2:	85 30       	cpi	r24, 0x05	; 5
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <test_pots+0x52>
				selPOT = 0;
     7e6:	ff 24       	eor	r15, r15
		}
	
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	
	}	
     7f4:	da cf       	rjmp	.-76     	; 0x7aa <test_pots+0x14>

000007f6 <test_switches>:
	
	
}
*/

void test_switches(){
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	startup_functions();
     7fa:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	while(1){
		preloop_functions();
     7fe:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     802:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     806:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     808:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     80c:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     80e:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     812:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	60 2f       	mov	r22, r16
     818:	41 2f       	mov	r20, r17
     81a:	00 e0       	ldi	r16, 0x00	; 0
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
     822:	ed cf       	rjmp	.-38     	; 0x7fe <test_switches+0x8>

00000824 <test_seven_segment>:
	}
}


void test_seven_segment(){
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	startup_functions();
     832:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     836:	c0 e0       	ldi	r28, 0x00	; 0
     838:	d0 e0       	ldi	r29, 0x00	; 0
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     83a:	0f 2e       	mov	r0, r31
     83c:	f7 ee       	ldi	r31, 0xE7	; 231
     83e:	cf 2e       	mov	r12, r31
     840:	f3 e0       	ldi	r31, 0x03	; 3
     842:	df 2e       	mov	r13, r31
     844:	f0 2d       	mov	r31, r0
	uint16_t i = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     846:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     84a:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     84e:	08 2f       	mov	r16, r24
		decimal_point1 = get_pushbutton_switch_state();
     850:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     854:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     856:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     85a:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     85c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	31 f4       	brne	.+12     	; 0x870 <test_seven_segment+0x4c>
			if (i == 999)
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	c7 3e       	cpi	r28, 0xE7	; 231
     868:	d8 07       	cpc	r29, r24
     86a:	51 f0       	breq	.+20     	; 0x880 <test_seven_segment+0x5c>
				i = 0;
			else
				i++;
     86c:	21 96       	adiw	r28, 0x01	; 1
     86e:	0c c0       	rjmp	.+24     	; 0x888 <test_seven_segment+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     870:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	41 f4       	brne	.+16     	; 0x888 <test_seven_segment+0x64>
			if (i == 0)
     878:	20 97       	sbiw	r28, 0x00	; 0
     87a:	29 f0       	breq	.+10     	; 0x886 <test_seven_segment+0x62>
				i = 999;
			else
				i += -1;
     87c:	21 97       	sbiw	r28, 0x01	; 1
     87e:	04 c0       	rjmp	.+8      	; 0x888 <test_seven_segment+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     880:	c0 e0       	ldi	r28, 0x00	; 0
     882:	d0 e0       	ldi	r29, 0x00	; 0
     884:	01 c0       	rjmp	.+2      	; 0x888 <test_seven_segment+0x64>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     886:	e6 01       	movw	r28, r12
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	60 2f       	mov	r22, r16
     88c:	41 2f       	mov	r20, r17
     88e:	2f 2d       	mov	r18, r15
     890:	8e 01       	movw	r16, r28
     892:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     896:	d7 cf       	rjmp	.-82     	; 0x846 <test_seven_segment+0x22>

00000898 <test_ADC>:
}

void test_ADC(){
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	startup_functions();
     8a8:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     8ac:	c0 e0       	ldi	r28, 0x00	; 0
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f4 e6       	ldi	r31, 0x64	; 100
     8b4:	cf 2e       	mov	r12, r31
     8b6:	dd 24       	eor	r13, r13
     8b8:	f0 2d       	mov	r31, r0
	uint16_t pot_select = 0;
	
	startup_functions();
	
	while(1){
		preloop_functions();
     8ba:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		decimal_point0 = get_encoder_switch_state();
     8be:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     8c2:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     8c4:	0e 94 2d 01 	call	0x25a	; 0x25a <get_pushbutton_switch_state>
     8c8:	18 2f       	mov	r17, r24
		decimal_point2 = get_toggle_switch_state();
     8ca:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     8ce:	e8 2e       	mov	r14, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     8d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <test_ADC+0x4a>
			if (pot_select == 4)
     8d8:	c4 30       	cpi	r28, 0x04	; 4
     8da:	d1 05       	cpc	r29, r1
     8dc:	51 f0       	breq	.+20     	; 0x8f2 <test_ADC+0x5a>
				pot_select = 0;
			else
				pot_select++;
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	0d c0       	rjmp	.+26     	; 0x8fc <test_ADC+0x64>
		}			
		else if (get_encoder()==TURN_CCW){
     8e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	49 f4       	brne	.+18     	; 0x8fc <test_ADC+0x64>
			if (pot_select == 0)
     8ea:	20 97       	sbiw	r28, 0x00	; 0
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <test_ADC+0x60>
				pot_select = 4;
			else
				pot_select += -1;
     8ee:	21 97       	sbiw	r28, 0x01	; 1
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <test_ADC+0x64>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     8f2:	c0 e0       	ldi	r28, 0x00	; 0
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <test_ADC+0x64>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     8f8:	c4 e0       	ldi	r28, 0x04	; 4
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     8fc:	8c 2f       	mov	r24, r28
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	43 e6       	ldi	r20, 0x63	; 99
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     90a:	cc 9d       	mul	r28, r12
     90c:	f0 01       	movw	r30, r0
     90e:	cd 9d       	mul	r28, r13
     910:	f0 0d       	add	r31, r0
     912:	dc 9d       	mul	r29, r12
     914:	f0 0d       	add	r31, r0
     916:	11 24       	eor	r1, r1
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	6f 2d       	mov	r22, r15
     920:	41 2f       	mov	r20, r17
     922:	2e 2d       	mov	r18, r14
     924:	8f 01       	movw	r16, r30
     926:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     92a:	c7 cf       	rjmp	.-114    	; 0x8ba <test_ADC+0x22>

0000092c <test_xnor_out>:
}

void test_xnor_out(){
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     93c:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	serial_midi_init();
     940:	0e 94 ac 06 	call	0xd58	; 0xd58 <serial_midi_init>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     944:	c4 e6       	ldi	r28, 0x64	; 100
     946:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     948:	cc 24       	eor	r12, r12
     94a:	dd 24       	eor	r13, r13
     94c:	68 94       	set
     94e:	c6 f8       	bld	r12, 6
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     950:	0f 2e       	mov	r0, r31
     952:	f8 e9       	ldi	r31, 0x98	; 152
     954:	ef 2e       	mov	r14, r31
     956:	ff 24       	eor	r15, r15
     958:	f0 2d       	mov	r31, r0
	
	startup_functions();
	serial_midi_init();
	
	while(1){
		preloop_functions();
     95a:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     95e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	29 f4       	brne	.+10     	; 0x970 <test_xnor_out+0x44>
			if (note <= 64)
     966:	c1 34       	cpi	r28, 0x41	; 65
     968:	d1 05       	cpc	r29, r1
     96a:	58 f0       	brcs	.+22     	; 0x982 <test_xnor_out+0x56>
				note = 152;
			else
				note += -1;
     96c:	21 97       	sbiw	r28, 0x01	; 1
     96e:	0c c0       	rjmp	.+24     	; 0x988 <test_xnor_out+0x5c>
		}
		else if (get_encoder() == TURN_CW){
     970:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	41 f4       	brne	.+16     	; 0x988 <test_xnor_out+0x5c>
			if (note >= 152)
     978:	c8 39       	cpi	r28, 0x98	; 152
     97a:	d1 05       	cpc	r29, r1
     97c:	20 f4       	brcc	.+8      	; 0x986 <test_xnor_out+0x5a>
				note = 64;
			else
				note++;
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	03 c0       	rjmp	.+6      	; 0x988 <test_xnor_out+0x5c>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     982:	e7 01       	movw	r28, r14
     984:	01 c0       	rjmp	.+2      	; 0x988 <test_xnor_out+0x5c>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     986:	e6 01       	movw	r28, r12
			else
				note++;
		}				
					
		if (get_encoder_switch_edge() == EDGE_RISE)
     988:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	41 f4       	brne	.+16     	; 0x9a0 <test_xnor_out+0x74>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
     990:	0e 94 a9 06 	call	0xd52	; 0xd52 <serial_midi_device>
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	4c 2f       	mov	r20, r28
     998:	28 e7       	ldi	r18, 0x78	; 120
     99a:	0e 94 9c 07 	call	0xf38	; 0xf38 <midi_send_noteon>
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <test_xnor_out+0x8a>
		else if (get_encoder_switch_edge() == EDGE_FALL)
     9a0:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <test_xnor_out+0x8a>
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
     9a8:	0e 94 a9 06 	call	0xd52	; 0xd52 <serial_midi_device>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	4c 2f       	mov	r20, r28
     9b0:	28 e7       	ldi	r18, 0x78	; 120
     9b2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <midi_send_noteoff>
			
		status_LED = get_encoder_switch_state();
     9b6:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     9ba:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     9bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     9c0:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     9c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
			
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	01 30       	cpi	r16, 0x01	; 1
     9ca:	09 f0       	breq	.+2      	; 0x9ce <test_xnor_out+0xa2>
     9cc:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <test_xnor_out+0xaa>
     9d4:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9d6:	81 2f       	mov	r24, r17
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	8e 01       	movw	r16, r28
     9dc:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     9e0:	bc cf       	rjmp	.-136    	; 0x95a <test_xnor_out+0x2e>

000009e2 <test_xnor_in>:
	
}

void test_xnor_in(){
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	startup_functions();
     9f2:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
     9f6:	c4 e6       	ldi	r28, 0x64	; 100
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     9fa:	cc 24       	eor	r12, r12
     9fc:	dd 24       	eor	r13, r13
     9fe:	68 94       	set
     a00:	c6 f8       	bld	r12, 6
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     a02:	0f 2e       	mov	r0, r31
     a04:	f8 e9       	ldi	r31, 0x98	; 152
     a06:	ef 2e       	mov	r14, r31
     a08:	ff 24       	eor	r15, r15
     a0a:	f0 2d       	mov	r31, r0
	
	startup_functions();
//	serial_midi_init();
	
	while(1){
		preloop_functions();
     a0c:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		if (get_encoder() == TURN_CCW){
     a10:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	29 f4       	brne	.+10     	; 0xa22 <test_xnor_in+0x40>
			if (note <= 64)
     a18:	c1 34       	cpi	r28, 0x41	; 65
     a1a:	d1 05       	cpc	r29, r1
     a1c:	58 f0       	brcs	.+22     	; 0xa34 <test_xnor_in+0x52>
				note = 152;
			else
				note += -1;
     a1e:	21 97       	sbiw	r28, 0x01	; 1
     a20:	0c c0       	rjmp	.+24     	; 0xa3a <test_xnor_in+0x58>
		}
		else if (get_encoder() == TURN_CW){
     a22:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	41 f4       	brne	.+16     	; 0xa3a <test_xnor_in+0x58>
			if (note >= 152)
     a2a:	c8 39       	cpi	r28, 0x98	; 152
     a2c:	d1 05       	cpc	r29, r1
     a2e:	20 f4       	brcc	.+8      	; 0xa38 <test_xnor_in+0x56>
				note = 64;
			else
				note++;
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <test_xnor_in+0x58>
	while(1){
		preloop_functions();
		
		if (get_encoder() == TURN_CCW){
			if (note <= 64)
				note = 152;
     a34:	e7 01       	movw	r28, r14
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <test_xnor_in+0x58>
			else
				note += -1;
		}
		else if (get_encoder() == TURN_CW){
			if (note >= 152)
				note = 64;
     a38:	e6 01       	movw	r28, r12
/*		if (get_encoder_switch_edge() == EDGE_RISE)
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
     a3a:	0e 94 27 01 	call	0x24e	; 0x24e <get_encoder_switch_state>
     a3e:	18 2f       	mov	r17, r24
		decimal_point0 = (get_encoder() == TURN_CW);
     a40:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     a44:	08 2f       	mov	r16, r24
		decimal_point1 = (get_encoder() == TURN_CCW);
     a46:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
		    midi_send_noteon(serial_midi_device(),MIDI_CHAN,note,120);
		else if (get_encoder_switch_edge() == EDGE_FALL)
			midi_send_noteoff(serial_midi_device(),MIDI_CHAN,note,120);
	*/		
		status_LED = get_encoder_switch_state();
		decimal_point0 = (get_encoder() == TURN_CW);
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	01 30       	cpi	r16, 0x01	; 1
     a4e:	09 f0       	breq	.+2      	; 0xa52 <test_xnor_in+0x70>
     a50:	60 e0       	ldi	r22, 0x00	; 0
		decimal_point1 = (get_encoder() == TURN_CCW);
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	09 f0       	breq	.+2      	; 0xa5a <test_xnor_in+0x78>
     a58:	40 e0       	ldi	r20, 0x00	; 0
		seven_segment_value = note;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a5a:	81 2f       	mov	r24, r17
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	8e 01       	movw	r16, r28
     a60:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     a64:	d3 cf       	rjmp	.-90     	; 0xa0c <test_xnor_in+0x2a>

00000a66 <test_blank>:
	
}

void test_blank(){
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a6a:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	
	while(1){
		preloop_functions();
     a6e:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
     a82:	f5 cf       	rjmp	.-22     	; 0xa6e <test_blank+0x8>

00000a84 <test_timer>:
	}
	
}

void test_timer(){
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	startup_functions();
     a90:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	TCC0.CTRLA = 0x00;  //disable timer
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f8 e0       	ldi	r31, 0x08	; 8
     a98:	10 82       	st	Z, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     a9a:	80 e1       	ldi	r24, 0x10	; 16
     a9c:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     a9e:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     aa0:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     aa2:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CCA = 23437;	//compare to 46875 (12MHz / 256)
     aa8:	8d e8       	ldi	r24, 0x8D	; 141
     aaa:	9b e5       	ldi	r25, 0x5B	; 91
     aac:	80 a7       	std	Z+40, r24	; 0x28
     aae:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CNT = 0x0000;	//reset counter
     ab0:	10 a2       	std	Z+32, r1	; 0x20
     ab2:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	80 83       	st	Z, r24
			else
				LED_count++;
		}		
		else if (get_encoder() == TURN_CCW){
			if (LED_count == 0)
				LED_count = 999;
     ab8:	0f 2e       	mov	r0, r31
     aba:	f7 ee       	ldi	r31, 0xE7	; 231
     abc:	ef 2e       	mov	r14, r31
     abe:	f3 e0       	ldi	r31, 0x03	; 3
     ac0:	ff 2e       	mov	r15, r31
     ac2:	f0 2d       	mov	r31, r0
				LED_count+= -1;
		}				
		
		if (get_encoder_switch_edge() == EDGE_RISE){
			LED_count = 0;
			TCC0_CNT = 0;
     ac4:	c0 e2       	ldi	r28, 0x20	; 32
     ac6:	d8 e0       	ldi	r29, 0x08	; 8
	TCC0.CTRLA = 0x07;  //enable timer = clk/1024
	
	
	
	while(1){
		preloop_functions();
     ac8:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>
		
		if (get_encoder() == TURN_CW){
     acc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	99 f4       	brne	.+38     	; 0xafa <test_timer+0x76>
			if (LED_count == 999)
     ad4:	80 91 32 21 	lds	r24, 0x2132
     ad8:	90 91 33 21 	lds	r25, 0x2133
     adc:	23 e0       	ldi	r18, 0x03	; 3
     ade:	87 3e       	cpi	r24, 0xE7	; 231
     ae0:	92 07       	cpc	r25, r18
     ae2:	29 f4       	brne	.+10     	; 0xaee <test_timer+0x6a>
				LED_count = 0;
     ae4:	10 92 32 21 	sts	0x2132, r1
     ae8:	10 92 33 21 	sts	0x2133, r1
     aec:	1a c0       	rjmp	.+52     	; 0xb22 <test_timer+0x9e>
			else
				LED_count++;
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	80 93 32 21 	sts	0x2132, r24
     af4:	90 93 33 21 	sts	0x2133, r25
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <test_timer+0x9e>
		}		
		else if (get_encoder() == TURN_CCW){
     afa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	81 f4       	brne	.+32     	; 0xb22 <test_timer+0x9e>
			if (LED_count == 0)
     b02:	80 91 32 21 	lds	r24, 0x2132
     b06:	90 91 33 21 	lds	r25, 0x2133
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	29 f4       	brne	.+10     	; 0xb18 <test_timer+0x94>
				LED_count = 999;
     b0e:	e0 92 32 21 	sts	0x2132, r14
     b12:	f0 92 33 21 	sts	0x2133, r15
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <test_timer+0x9e>
			else
				LED_count+= -1;
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	80 93 32 21 	sts	0x2132, r24
     b1e:	90 93 33 21 	sts	0x2133, r25
		}				
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     b22:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	31 f4       	brne	.+12     	; 0xb36 <test_timer+0xb2>
			LED_count = 0;
     b2a:	10 92 32 21 	sts	0x2132, r1
     b2e:	10 92 33 21 	sts	0x2133, r1
			TCC0_CNT = 0;
     b32:	18 82       	st	Y, r1
     b34:	19 82       	std	Y+1, r1	; 0x01
		}			
			
		seven_segment_value = LED_count;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     b36:	00 91 32 21 	lds	r16, 0x2132
     b3a:	10 91 33 21 	lds	r17, 0x2133
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     b4a:	be cf       	rjmp	.-132    	; 0xac8 <test_timer+0x44>

00000b4c <BPM_to_TMR>:
	
}

void BPM_to_TMR(uint16_t BPM){
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	60 97       	sbiw	r28, 0x10	; 16
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	de bf       	out	0x3e, r29	; 62
	uint32_t numerator = 30000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
	uint16_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     b68:	de 01       	movw	r26, r28
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
     b6e:	f0 e2       	ldi	r31, 0x20	; 32
     b70:	20 e1       	ldi	r18, 0x10	; 16
     b72:	01 90       	ld	r0, Z+
     b74:	0d 92       	st	X+, r0
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	e1 f7       	brne	.-8      	; 0xb72 <BPM_to_TMR+0x26>
	
	uint32_t adjusted_count = 0;
	
	uint32_t cycle_per_MIDItick = numerator/(uint32_t)BPM;   //compare value for no divider
     b7a:	9c 01       	movw	r18, r24
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	60 e8       	ldi	r22, 0x80	; 128
     b82:	73 ec       	ldi	r23, 0xC3	; 195
     b84:	89 ec       	ldi	r24, 0xC9	; 201
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodsi4>
     b8c:	59 01       	movw	r10, r18
     b8e:	6a 01       	movw	r12, r20
	uint8_t clock_divide_select = 1;
	
	uint32_t compare_value = cycle_per_MIDItick/(uint32_t)clock_divide[clock_divide_select];
     b90:	2b 81       	ldd	r18, Y+3	; 0x03
     b92:	3c 81       	ldd	r19, Y+4	; 0x04
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	c6 01       	movw	r24, r12
     b9a:	b5 01       	movw	r22, r10
     b9c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodsi4>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	38 07       	cpc	r19, r24
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	48 07       	cpc	r20, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	58 07       	cpc	r21, r24
     bae:	f0 f0       	brcs	.+60     	; 0xbec <BPM_to_TMR+0xa0>
     bb0:	8e 01       	movw	r16, r28
     bb2:	0b 5f       	subi	r16, 0xFB	; 251
     bb4:	1f 4f       	sbci	r17, 0xFF	; 255
		clock_divide_select++;             //try the next highest divider
     bb6:	ff 24       	eor	r15, r15
     bb8:	68 94       	set
     bba:	f1 f8       	bld	r15, 1
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <BPM_to_TMR+0x7a>
     bbe:	f3 94       	inc	r15
		
		if (clock_divide_select > 7)       //unless you've explored all of them
     bc0:	ef 2d       	mov	r30, r15
     bc2:	e8 30       	cpi	r30, 0x08	; 8
     bc4:	e9 f0       	breq	.+58     	; 0xc00 <BPM_to_TMR+0xb4>
			return;
		
		compare_value = cycle_per_MIDItick/(uint32_t)clock_divide[clock_divide_select];
     bc6:	f8 01       	movw	r30, r16
     bc8:	21 91       	ld	r18, Z+
     bca:	31 91       	ld	r19, Z+
     bcc:	8f 01       	movw	r16, r30
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	c6 01       	movw	r24, r12
     bd4:	b5 01       	movw	r22, r10
     bd6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodsi4>
	uint32_t cycle_per_MIDItick = numerator/(uint32_t)BPM;   //compare value for no divider
	uint8_t clock_divide_select = 1;
	
	uint32_t compare_value = cycle_per_MIDItick/(uint32_t)clock_divide[clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     bda:	20 30       	cpi	r18, 0x00	; 0
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	3f 07       	cpc	r19, r31
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	4f 07       	cpc	r20, r31
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	5f 07       	cpc	r21, r31
     be8:	50 f7       	brcc	.-44     	; 0xbbe <BPM_to_TMR+0x72>
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <BPM_to_TMR+0xa4>
	uint16_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
	
	uint32_t adjusted_count = 0;
	
	uint32_t cycle_per_MIDItick = numerator/(uint32_t)BPM;   //compare value for no divider
	uint8_t clock_divide_select = 1;
     bec:	ff 24       	eor	r15, r15
     bee:	f3 94       	inc	r15
			return;
		
		compare_value = cycle_per_MIDItick/(uint32_t)clock_divide[clock_divide_select];
	}
	
	TCC0.CTRLA = 0x00;  //stop the timer
     bf0:	e0 e0       	ldi	r30, 0x00	; 0
     bf2:	f8 e0       	ldi	r31, 0x08	; 8
     bf4:	10 82       	st	Z, r1
		if (adjusted_count > 0xFFFF)
			adjusted_count = 0xFFFF;
		TCC0.CNT = (uint16_t) adjusted_count;
	}
		
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     bf6:	20 a7       	std	Z+40, r18	; 0x28
     bf8:	31 a7       	std	Z+41, r19	; 0x29
	TCC0.CTRLA = clock_divide_select & 0x0F;   //set the new clock divider and start the clock
     bfa:	8f 2d       	mov	r24, r15
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	80 83       	st	Z, r24

	return;
}
     c00:	60 96       	adiw	r28, 0x10	; 16
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	08 95       	ret

00000c1a <test_BPM>:

void test_BPM(){
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
	uint16_t BPM = 120;
	uint8_t beat_count = 0;
	uint8_t measure_count = 0;
	
	
	startup_functions();
     c28:	0e 94 39 01 	call	0x272	; 0x272 <startup_functions>
	TCC0.CTRLA = 0x00;  //disable timer
     c2c:	e0 e0       	ldi	r30, 0x00	; 0
     c2e:	f8 e0       	ldi	r31, 0x08	; 8
     c30:	10 82       	st	Z, r1
	TCC0.CTRLB = 0x10;  //enable compare/capture A
     c32:	80 e1       	ldi	r24, 0x10	; 16
     c34:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLC = 0x00;
     c36:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0x00;
     c38:	13 82       	std	Z+3, r1	; 0x03
	TCC0.INTCTRLA = 0x00;
     c3a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = 0x03;  //enable CCA interrupt Hi-Level
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	87 83       	std	Z+7, r24	; 0x07
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
     c40:	88 e7       	ldi	r24, 0x78	; 120
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 a6 05 	call	0xb4c	; 0xb4c <BPM_to_TMR>
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t BPM = 120;
	uint8_t beat_count = 0;
	uint8_t measure_count = 0;
     c48:	dd 24       	eor	r13, r13
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t BPM = 120;
	uint8_t beat_count = 0;
     c4a:	ff 24       	eor	r15, r15
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t BPM = 120;
     c4c:	c8 e7       	ldi	r28, 0x78	; 120
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
	BPM_to_TMR(BPM);	//compare to 46875 (12MHz / 256)
//	TCC0.CNT = 0x0000;	//reset counter
	//TCC0.CTRLA = 0x01;  //enable timer = clk
	
	while(1){
		preloop_functions();
     c50:	0e 94 b9 01 	call	0x372	; 0x372 <preloop_functions>

		if (get_encoder() == TURN_CW){
     c54:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	49 f4       	brne	.+18     	; 0xc6e <test_BPM+0x54>
			if (BPM < 400)
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	c0 39       	cpi	r28, 0x90	; 144
     c60:	d8 07       	cpc	r29, r24
     c62:	08 f4       	brcc	.+2      	; 0xc66 <test_BPM+0x4c>
				BPM++;
     c64:	21 96       	adiw	r28, 0x01	; 1
				BPM_to_TMR(BPM);
     c66:	ce 01       	movw	r24, r28
     c68:	0e 94 a6 05 	call	0xb4c	; 0xb4c <BPM_to_TMR>
     c6c:	0b c0       	rjmp	.+22     	; 0xc84 <test_BPM+0x6a>
		}
		else if (get_encoder() == TURN_CCW){
     c6e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	39 f4       	brne	.+14     	; 0xc84 <test_BPM+0x6a>
			if (BPM > 50){
     c76:	c3 33       	cpi	r28, 0x33	; 51
     c78:	d1 05       	cpc	r29, r1
     c7a:	20 f0       	brcs	.+8      	; 0xc84 <test_BPM+0x6a>
				BPM += -1;
     c7c:	21 97       	sbiw	r28, 0x01	; 1
				BPM_to_TMR(BPM);
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 a6 05 	call	0xb4c	; 0xb4c <BPM_to_TMR>
			}				
		}
		

		if (tick_count >= 24){
     c84:	80 91 30 21 	lds	r24, 0x2130
     c88:	90 91 31 21 	lds	r25, 0x2131
     c8c:	88 31       	cpi	r24, 0x18	; 24
     c8e:	91 05       	cpc	r25, r1
     c90:	88 f0       	brcs	.+34     	; 0xcb4 <test_BPM+0x9a>
			tick_count = tick_count - 24;
     c92:	48 97       	sbiw	r24, 0x18	; 24
     c94:	80 93 30 21 	sts	0x2130, r24
     c98:	90 93 31 21 	sts	0x2131, r25
			beat_count++;
     c9c:	f3 94       	inc	r15
				if (beat_count > 3){
     c9e:	9f 2d       	mov	r25, r15
     ca0:	94 30       	cpi	r25, 0x04	; 4
     ca2:	40 f0       	brcs	.+16     	; 0xcb4 <test_BPM+0x9a>
					beat_count = 0;
					measure_count++;
     ca4:	d3 94       	inc	r13
					if (measure_count > 99){
     ca6:	8d 2d       	mov	r24, r13
     ca8:	84 36       	cpi	r24, 0x64	; 100
     caa:	10 f4       	brcc	.+4      	; 0xcb0 <test_BPM+0x96>

		if (tick_count >= 24){
			tick_count = tick_count - 24;
			beat_count++;
				if (beat_count > 3){
					beat_count = 0;
     cac:	ff 24       	eor	r15, r15
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <test_BPM+0x9a>
					measure_count++;
					if (measure_count > 99){
						measure_count = 0;
     cb0:	dd 24       	eor	r13, r13

		if (tick_count >= 24){
			tick_count = tick_count - 24;
			beat_count++;
				if (beat_count > 3){
					beat_count = 0;
     cb2:	ff 24       	eor	r15, r15
	TCC0.CTRLA = clock_divide_select & 0x0F;   //set the new clock divider and start the clock

	return;
}

void test_BPM(){
     cb4:	ee 24       	eor	r14, r14
     cb6:	e3 94       	inc	r14
     cb8:	80 91 30 21 	lds	r24, 0x2130
     cbc:	90 91 31 21 	lds	r25, 0x2131
     cc0:	8c 30       	cpi	r24, 0x0C	; 12
     cc2:	91 05       	cpc	r25, r1
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <test_BPM+0xae>
     cc6:	ee 24       	eor	r14, r14
     cc8:	11 e0       	ldi	r17, 0x01	; 1
     cca:	9f 2d       	mov	r25, r15
     ccc:	92 30       	cpi	r25, 0x02	; 2
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <test_BPM+0xb8>
     cd0:	10 e0       	ldi	r17, 0x00	; 0
		if (tick_count < 12)
			decimal_point0 = 1;
		if (beat_count < 2)
			decimal_point1 = 1;
		
		if (get_encoder_switch_edge() == EDGE_RISE){
     cd2:	0e 94 2a 01 	call	0x254	; 0x254 <get_encoder_switch_edge>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	31 f4       	brne	.+12     	; 0xce6 <test_BPM+0xcc>
			beat_count = 0;
			measure_count = 0;
			tick_count = 0;
     cda:	10 92 30 21 	sts	0x2130, r1
     cde:	10 92 31 21 	sts	0x2131, r1
		if (beat_count < 2)
			decimal_point1 = 1;
		
		if (get_encoder_switch_edge() == EDGE_RISE){
			beat_count = 0;
			measure_count = 0;
     ce2:	dd 24       	eor	r13, r13
			decimal_point0 = 1;
		if (beat_count < 2)
			decimal_point1 = 1;
		
		if (get_encoder_switch_edge() == EDGE_RISE){
			beat_count = 0;
     ce4:	ff 24       	eor	r15, r15
			measure_count = 0;
			tick_count = 0;
		}			
		
		if (get_toggle_switch_state())
     ce6:	0e 94 33 01 	call	0x266	; 0x266 <get_toggle_switch_state>
     cea:	88 23       	and	r24, r24
     cec:	41 f0       	breq	.+16     	; 0xcfe <test_BPM+0xe4>
			seven_segment_value = beat_count + 10*measure_count;
     cee:	8d 2d       	mov	r24, r13
     cf0:	9a e0       	ldi	r25, 0x0A	; 10
     cf2:	89 9f       	mul	r24, r25
     cf4:	f0 01       	movw	r30, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	ef 0d       	add	r30, r15
     cfa:	f1 1d       	adc	r31, r1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <test_BPM+0xe6>
		else
			seven_segment_value = BPM;
     cfe:	fe 01       	movw	r30, r28
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	6e 2d       	mov	r22, r14
     d04:	41 2f       	mov	r20, r17
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	8f 01       	movw	r16, r30
     d0a:	0e 94 de 02 	call	0x5bc	; 0x5bc <postloop_functions>
	}
     d0e:	a0 cf       	rjmp	.-192    	; 0xc50 <test_BPM+0x36>

00000d10 <main>:
	
}

int main(void) {

	test_BPM();
     d10:	0e 94 0d 06 	call	0xc1a	; 0xc1a <test_BPM>

	return 0;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret

00000d1a <serial_midi_send>:
#include <avr/interrupt.h>
#include "stdlib.h"

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     d1a:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     d1c:	e0 eb       	ldi	r30, 0xB0	; 176
     d1e:	f9 e0       	ldi	r31, 0x09	; 9
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	85 ff       	sbrs	r24, 5
     d24:	fd cf       	rjmp	.-6      	; 0xd20 <serial_midi_send+0x6>
	USARTD1.DATA = inByte0;
     d26:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     d2a:	62 30       	cpi	r22, 0x02	; 2
     d2c:	38 f0       	brcs	.+14     	; 0xd3c <serial_midi_send+0x22>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     d2e:	e0 eb       	ldi	r30, 0xB0	; 176
     d30:	f9 e0       	ldi	r31, 0x09	; 9
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	85 ff       	sbrs	r24, 5
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <serial_midi_send+0x18>
      USARTD1.DATA = inByte1;
     d38:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     d3c:	63 30       	cpi	r22, 0x03	; 3
     d3e:	39 f4       	brne	.+14     	; 0xd4e <serial_midi_send+0x34>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     d40:	e0 eb       	ldi	r30, 0xB0	; 176
     d42:	f9 e0       	ldi	r31, 0x09	; 9
     d44:	81 81       	ldd	r24, Z+1	; 0x01
     d46:	85 ff       	sbrs	r24, 5
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <serial_midi_send+0x2a>
      USARTD1.DATA = inByte2;
     d4a:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <serial_midi_device>:

MidiDevice * serial_midi_device(void) {
   return &midi_device;
}
     d52:	84 e3       	ldi	r24, 0x34	; 52
     d54:	91 e2       	ldi	r25, 0x21	; 33
     d56:	08 95       	ret

00000d58 <serial_midi_init>:

MidiDevice* serial_midi_init(){
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
     d5c:	c4 e3       	ldi	r28, 0x34	; 52
     d5e:	d1 e2       	ldi	r29, 0x21	; 33
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <midi_device_init>
   midi_device_set_send_func(&midi_device, serial_midi_send);
     d66:	ce 01       	movw	r24, r28
     d68:	6d e8       	ldi	r22, 0x8D	; 141
     d6a:	76 e0       	ldi	r23, 0x06	; 6
     d6c:	0e 94 48 09 	call	0x1290	; 0x1290 <midi_device_set_send_func>

   return serial_midi_device();
     d70:	0e 94 a9 06 	call	0xd52	; 0xd52 <serial_midi_device>
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     d7a:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     d7c:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     d7e:	63 83       	std	Z+3, r22	; 0x03
     d80:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	10 82       	st	Z, r1
}
     d86:	08 95       	ret

00000d88 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     d92:	0e 94 34 07 	call	0xe68	; 0xe68 <store_and_clear_interrupt>
     d96:	e8 2f       	mov	r30, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     d98:	f9 81       	ldd	r31, Y+1	; 0x01
     d9a:	2f 2f       	mov	r18, r31
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	6a 81       	ldd	r22, Y+2	; 0x02
     da4:	c9 01       	movw	r24, r18
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__divmodhi4>
     dac:	28 81       	ld	r18, Y
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	29 f4       	brne	.+10     	; 0xdc0 <bytequeue_enqueue+0x38>
      restore_interrupt_setting(setting);
     db6:	8e 2f       	mov	r24, r30
     db8:	0e 94 37 07 	call	0xe6e	; 0xe6e <restore_interrupt_setting>
      return false;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	11 c0       	rjmp	.+34     	; 0xde2 <bytequeue_enqueue+0x5a>
   } else {
      queue->data[queue->end] = item;
     dc0:	ab 81       	ldd	r26, Y+3	; 0x03
     dc2:	bc 81       	ldd	r27, Y+4	; 0x04
     dc4:	af 0f       	add	r26, r31
     dc6:	b1 1d       	adc	r27, r1
     dc8:	1c 93       	st	X, r17
      queue->end = (queue->end + 1) % queue->length;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	6a 81       	ldd	r22, Y+2	; 0x02
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__divmodhi4>
     dd8:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     dda:	8e 2f       	mov	r24, r30
     ddc:	0e 94 37 07 	call	0xe6e	; 0xe6e <restore_interrupt_setting>
      return true;
     de0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	08 95       	ret

00000dea <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     df2:	0e 94 34 07 	call	0xe68	; 0xe68 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     df6:	19 81       	ldd	r17, Y+1	; 0x01
     df8:	98 81       	ld	r25, Y
     dfa:	19 17       	cp	r17, r25
     dfc:	10 f0       	brcs	.+4      	; 0xe02 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     dfe:	19 1b       	sub	r17, r25
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     e02:	2a 81       	ldd	r18, Y+2	; 0x02
     e04:	12 0f       	add	r17, r18
     e06:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
     e08:	0e 94 37 07 	call	0xe6e	; 0xe6e <restore_interrupt_setting>
   return len;
}
     e0c:	81 2f       	mov	r24, r17
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     e16:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     e18:	80 81       	ld	r24, Z
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	86 0f       	add	r24, r22
     e1e:	91 1d       	adc	r25, r1
     e20:	62 81       	ldd	r22, Z+2	; 0x02
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__divmodhi4>
     e28:	03 80       	ldd	r0, Z+3	; 0x03
     e2a:	f4 81       	ldd	r31, Z+4	; 0x04
     e2c:	e0 2d       	mov	r30, r0
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
}
     e32:	80 81       	ld	r24, Z
     e34:	08 95       	ret

00000e36 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	ec 01       	movw	r28, r24
     e3e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     e40:	0e 94 34 07 	call	0xe68	; 0xe68 <store_and_clear_interrupt>
     e44:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     e46:	28 81       	ld	r18, Y
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	21 0f       	add	r18, r17
     e4c:	31 1d       	adc	r19, r1
     e4e:	6a 81       	ldd	r22, Y+2	; 0x02
     e50:	c9 01       	movw	r24, r18
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__divmodhi4>
     e58:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     e5a:	84 2f       	mov	r24, r20
     e5c:	0e 94 37 07 	call	0xe6e	; 0xe6e <restore_interrupt_setting>
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	08 95       	ret

00000e68 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
     e68:	8f b7       	in	r24, 0x3f	; 63
    cli();
     e6a:	f8 94       	cli
    return sreg;
}
     e6c:	08 95       	ret

00000e6e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
     e6e:	8f bf       	out	0x3f, r24	; 63
}
     e70:	08 95       	ret

00000e72 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     e72:	88 1f       	adc	r24, r24
     e74:	88 27       	eor	r24, r24
     e76:	88 1f       	adc	r24, r24
     e78:	08 95       	ret

00000e7a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	88 3f       	cpi	r24, 0xF8	; 248
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <midi_is_realtime+0x8>
     e80:	90 e0       	ldi	r25, 0x00	; 0
}
     e82:	89 2f       	mov	r24, r25
     e84:	08 95       	ret

00000e86 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	20 7f       	andi	r18, 0xF0	; 240
     e8c:	30 70       	andi	r19, 0x00	; 0
     e8e:	20 3c       	cpi	r18, 0xC0	; 192
     e90:	31 05       	cpc	r19, r1
     e92:	e9 f1       	breq	.+122    	; 0xf0e <midi_packet_length+0x88>
     e94:	21 3c       	cpi	r18, 0xC1	; 193
     e96:	31 05       	cpc	r19, r1
     e98:	8c f4       	brge	.+34     	; 0xebc <midi_packet_length+0x36>
     e9a:	20 39       	cpi	r18, 0x90	; 144
     e9c:	31 05       	cpc	r19, r1
     e9e:	e1 f0       	breq	.+56     	; 0xed8 <midi_packet_length+0x52>
     ea0:	21 39       	cpi	r18, 0x91	; 145
     ea2:	31 05       	cpc	r19, r1
     ea4:	24 f4       	brge	.+8      	; 0xeae <midi_packet_length+0x28>
     ea6:	20 38       	cpi	r18, 0x80	; 128
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f5       	brne	.+94     	; 0xf0a <midi_packet_length+0x84>
     eac:	15 c0       	rjmp	.+42     	; 0xed8 <midi_packet_length+0x52>
     eae:	20 3a       	cpi	r18, 0xA0	; 160
     eb0:	31 05       	cpc	r19, r1
     eb2:	91 f0       	breq	.+36     	; 0xed8 <midi_packet_length+0x52>
     eb4:	20 3b       	cpi	r18, 0xB0	; 176
     eb6:	31 05       	cpc	r19, r1
     eb8:	41 f5       	brne	.+80     	; 0xf0a <midi_packet_length+0x84>
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <midi_packet_length+0x52>
     ebc:	20 3e       	cpi	r18, 0xE0	; 224
     ebe:	31 05       	cpc	r19, r1
     ec0:	59 f0       	breq	.+22     	; 0xed8 <midi_packet_length+0x52>
     ec2:	21 3e       	cpi	r18, 0xE1	; 225
     ec4:	31 05       	cpc	r19, r1
     ec6:	24 f4       	brge	.+8      	; 0xed0 <midi_packet_length+0x4a>
     ec8:	20 3d       	cpi	r18, 0xD0	; 208
     eca:	31 05       	cpc	r19, r1
     ecc:	f1 f4       	brne	.+60     	; 0xf0a <midi_packet_length+0x84>
     ece:	1f c0       	rjmp	.+62     	; 0xf0e <midi_packet_length+0x88>
     ed0:	20 3f       	cpi	r18, 0xF0	; 240
     ed2:	31 05       	cpc	r19, r1
     ed4:	d1 f4       	brne	.+52     	; 0xf0a <midi_packet_length+0x84>
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
      case 0xF0:
         switch(status) {
     edc:	86 3f       	cpi	r24, 0xF6	; 246
     ede:	79 f0       	breq	.+30     	; 0xefe <midi_packet_length+0x78>
     ee0:	87 3f       	cpi	r24, 0xF7	; 247
     ee2:	38 f4       	brcc	.+14     	; 0xef2 <midi_packet_length+0x6c>
     ee4:	82 3f       	cpi	r24, 0xF2	; 242
     ee6:	a9 f0       	breq	.+42     	; 0xf12 <midi_packet_length+0x8c>
     ee8:	83 3f       	cpi	r24, 0xF3	; 243
     eea:	59 f0       	breq	.+22     	; 0xf02 <midi_packet_length+0x7c>
     eec:	81 3f       	cpi	r24, 0xF1	; 241
     eee:	59 f4       	brne	.+22     	; 0xf06 <midi_packet_length+0x80>
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <midi_packet_length+0x7c>
     ef2:	88 3f       	cpi	r24, 0xF8	; 248
     ef4:	40 f0       	brcs	.+16     	; 0xf06 <midi_packet_length+0x80>
     ef6:	8d 3f       	cpi	r24, 0xFD	; 253
     ef8:	10 f0       	brcs	.+4      	; 0xefe <midi_packet_length+0x78>
     efa:	8e 3f       	cpi	r24, 0xFE	; 254
     efc:	20 f0       	brcs	.+8      	; 0xf06 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO;
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
         }
      default:
         return UNDEFINED;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE;
            case MIDI_SONGPOSITION:
               return THREE;
     f12:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     f14:	08 95       	ret

00000f16 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     f16:	0f 93       	push	r16
     f18:	34 2f       	mov	r19, r20
     f1a:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     f1c:	46 2f       	mov	r20, r22
     f1e:	4f 70       	andi	r20, 0x0F	; 15
     f20:	40 6b       	ori	r20, 0xB0	; 176
     f22:	23 2f       	mov	r18, r19
     f24:	2f 77       	andi	r18, 0x7F	; 127
     f26:	0f 77       	andi	r16, 0x7F	; 127
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	63 e0       	ldi	r22, 0x03	; 3
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     f34:	0f 91       	pop	r16
     f36:	08 95       	ret

00000f38 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     f38:	0f 93       	push	r16
     f3a:	34 2f       	mov	r19, r20
     f3c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     f3e:	46 2f       	mov	r20, r22
     f40:	4f 70       	andi	r20, 0x0F	; 15
     f42:	40 69       	ori	r20, 0x90	; 144
     f44:	23 2f       	mov	r18, r19
     f46:	2f 77       	andi	r18, 0x7F	; 127
     f48:	0f 77       	andi	r16, 0x7F	; 127
     f4a:	dc 01       	movw	r26, r24
     f4c:	ed 91       	ld	r30, X+
     f4e:	fc 91       	ld	r31, X
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     f5a:	0f 93       	push	r16
     f5c:	34 2f       	mov	r19, r20
     f5e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     f60:	46 2f       	mov	r20, r22
     f62:	4f 70       	andi	r20, 0x0F	; 15
     f64:	40 68       	ori	r20, 0x80	; 128
     f66:	23 2f       	mov	r18, r19
     f68:	2f 77       	andi	r18, 0x7F	; 127
     f6a:	0f 77       	andi	r16, 0x7F	; 127
     f6c:	dc 01       	movw	r26, r24
     f6e:	ed 91       	ld	r30, X+
     f70:	fc 91       	ld	r31, X
     f72:	63 e0       	ldi	r22, 0x03	; 3
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     f78:	0f 91       	pop	r16
     f7a:	08 95       	ret

00000f7c <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     f7c:	0f 93       	push	r16
     f7e:	34 2f       	mov	r19, r20
     f80:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     f82:	46 2f       	mov	r20, r22
     f84:	4f 70       	andi	r20, 0x0F	; 15
     f86:	40 6a       	ori	r20, 0xA0	; 160
     f88:	23 2f       	mov	r18, r19
     f8a:	2f 77       	andi	r18, 0x7F	; 127
     f8c:	0f 77       	andi	r16, 0x7F	; 127
     f8e:	dc 01       	movw	r26, r24
     f90:	ed 91       	ld	r30, X+
     f92:	fc 91       	ld	r31, X
     f94:	63 e0       	ldi	r22, 0x03	; 3
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     fa2:	20 e2       	ldi	r18, 0x20	; 32
     fa4:	40 30       	cpi	r20, 0x00	; 0
     fa6:	52 07       	cpc	r21, r18
     fa8:	44 f4       	brge	.+16     	; 0xfba <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     faa:	a0 ee       	ldi	r26, 0xE0	; 224
     fac:	40 30       	cpi	r20, 0x00	; 0
     fae:	5a 07       	cpc	r21, r26
     fb0:	3c f0       	brlt	.+14     	; 0xfc0 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     fb2:	8a 01       	movw	r16, r20
     fb4:	00 50       	subi	r16, 0x00	; 0
     fb6:	10 4e       	sbci	r17, 0xE0	; 224
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     fba:	0f ef       	ldi	r16, 0xFF	; 255
     fbc:	1f e3       	ldi	r17, 0x3F	; 63
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     fc4:	46 2f       	mov	r20, r22
     fc6:	4f 70       	andi	r20, 0x0F	; 15
     fc8:	40 6e       	ori	r20, 0xE0	; 224
     fca:	20 2f       	mov	r18, r16
     fcc:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     fce:	00 0f       	add	r16, r16
     fd0:	01 2f       	mov	r16, r17
     fd2:	00 1f       	adc	r16, r16
     fd4:	11 0b       	sbc	r17, r17
     fd6:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     fd8:	0f 77       	andi	r16, 0x7F	; 127
     fda:	dc 01       	movw	r26, r24
     fdc:	ed 91       	ld	r30, X+
     fde:	fc 91       	ld	r31, X
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     fec:	0f 93       	push	r16
     fee:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     ff0:	46 2f       	mov	r20, r22
     ff2:	4f 70       	andi	r20, 0x0F	; 15
     ff4:	40 6c       	ori	r20, 0xC0	; 192
     ff6:	2f 77       	andi	r18, 0x7F	; 127
     ff8:	dc 01       	movw	r26, r24
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    100a:	0f 93       	push	r16
    100c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    100e:	46 2f       	mov	r20, r22
    1010:	4f 70       	andi	r20, 0x0F	; 15
    1012:	40 6d       	ori	r20, 0xD0	; 208
    1014:	2f 77       	andi	r18, 0x7F	; 127
    1016:	dc 01       	movw	r26, r24
    1018:	ed 91       	ld	r30, X+
    101a:	fc 91       	ld	r31, X
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	00 e0       	ldi	r16, 0x00	; 0
    1022:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1028:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	48 ef       	ldi	r20, 0xF8	; 248
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	00 e0       	ldi	r16, 0x00	; 0
    103a:	09 95       	icall
}
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1040:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1042:	dc 01       	movw	r26, r24
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	49 ef       	ldi	r20, 0xF9	; 249
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	09 95       	icall
}
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1058:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    105a:	dc 01       	movw	r26, r24
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	4a ef       	ldi	r20, 0xFA	; 250
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	00 e0       	ldi	r16, 0x00	; 0
    106a:	09 95       	icall
}
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1070:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1072:	dc 01       	movw	r26, r24
    1074:	ed 91       	ld	r30, X+
    1076:	fc 91       	ld	r31, X
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	4b ef       	ldi	r20, 0xFB	; 251
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	00 e0       	ldi	r16, 0x00	; 0
    1082:	09 95       	icall
}
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1088:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    108a:	dc 01       	movw	r26, r24
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	4c ef       	ldi	r20, 0xFC	; 252
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	00 e0       	ldi	r16, 0x00	; 0
    109a:	09 95       	icall
}
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    10a0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    10a2:	dc 01       	movw	r26, r24
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	4e ef       	ldi	r20, 0xFE	; 254
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	00 e0       	ldi	r16, 0x00	; 0
    10b2:	09 95       	icall
}
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    10b8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    10ba:	dc 01       	movw	r26, r24
    10bc:	ed 91       	ld	r30, X+
    10be:	fc 91       	ld	r31, X
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	4f ef       	ldi	r20, 0xFF	; 255
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	00 e0       	ldi	r16, 0x00	; 0
    10ca:	09 95       	icall
}
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    10d0:	0f 93       	push	r16
   device->send_func(device, 2,
    10d2:	26 2f       	mov	r18, r22
    10d4:	2f 77       	andi	r18, 0x7F	; 127
    10d6:	dc 01       	movw	r26, r24
    10d8:	ed 91       	ld	r30, X+
    10da:	fc 91       	ld	r31, X
    10dc:	62 e0       	ldi	r22, 0x02	; 2
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	41 ef       	ldi	r20, 0xF1	; 241
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
   device->send_func(device, 3,
    10ee:	26 2f       	mov	r18, r22
    10f0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    10f2:	8b 01       	movw	r16, r22
    10f4:	00 0f       	add	r16, r16
    10f6:	01 2f       	mov	r16, r17
    10f8:	00 1f       	adc	r16, r16
    10fa:	11 0b       	sbc	r17, r17
    10fc:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    10fe:	0f 77       	andi	r16, 0x7F	; 127
    1100:	dc 01       	movw	r26, r24
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	42 ef       	ldi	r20, 0xF2	; 242
    110c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1114:	0f 93       	push	r16
   device->send_func(device, 2,
    1116:	26 2f       	mov	r18, r22
    1118:	2f 77       	andi	r18, 0x7F	; 127
    111a:	dc 01       	movw	r26, r24
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	62 e0       	ldi	r22, 0x02	; 2
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	43 ef       	ldi	r20, 0xF3	; 243
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    112e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1130:	dc 01       	movw	r26, r24
    1132:	ed 91       	ld	r30, X+
    1134:	fc 91       	ld	r31, X
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	46 ef       	ldi	r20, 0xF6	; 246
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	09 95       	icall
}
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1146:	0f 93       	push	r16
    1148:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    114a:	dc 01       	movw	r26, r24
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	00 e0       	ldi	r16, 0x00	; 0
    1158:	09 95       	icall
}
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    115e:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1160:	dc 01       	movw	r26, r24
    1162:	ed 91       	ld	r30, X+
    1164:	fc 91       	ld	r31, X
    1166:	09 95       	icall
}
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    116c:	fc 01       	movw	r30, r24
    116e:	62 83       	std	Z+2, r22	; 0x02
    1170:	73 83       	std	Z+3, r23	; 0x03
}
    1172:	08 95       	ret

00001174 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1174:	fc 01       	movw	r30, r24
    1176:	64 83       	std	Z+4, r22	; 0x04
    1178:	75 83       	std	Z+5, r23	; 0x05
}
    117a:	08 95       	ret

0000117c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    117c:	fc 01       	movw	r30, r24
    117e:	66 83       	std	Z+6, r22	; 0x06
    1180:	77 83       	std	Z+7, r23	; 0x07
}
    1182:	08 95       	ret

00001184 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1184:	fc 01       	movw	r30, r24
    1186:	60 87       	std	Z+8, r22	; 0x08
    1188:	71 87       	std	Z+9, r23	; 0x09
}
    118a:	08 95       	ret

0000118c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    118c:	fc 01       	movw	r30, r24
    118e:	62 87       	std	Z+10, r22	; 0x0a
    1190:	73 87       	std	Z+11, r23	; 0x0b
}
    1192:	08 95       	ret

00001194 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1194:	fc 01       	movw	r30, r24
    1196:	64 87       	std	Z+12, r22	; 0x0c
    1198:	75 87       	std	Z+13, r23	; 0x0d
}
    119a:	08 95       	ret

0000119c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    119c:	fc 01       	movw	r30, r24
    119e:	66 87       	std	Z+14, r22	; 0x0e
    11a0:	77 87       	std	Z+15, r23	; 0x0f
}
    11a2:	08 95       	ret

000011a4 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    11a4:	fc 01       	movw	r30, r24
    11a6:	60 8b       	std	Z+16, r22	; 0x10
    11a8:	71 8b       	std	Z+17, r23	; 0x11
}
    11aa:	08 95       	ret

000011ac <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    11ac:	fc 01       	movw	r30, r24
    11ae:	62 8b       	std	Z+18, r22	; 0x12
    11b0:	73 8b       	std	Z+19, r23	; 0x13
}
    11b2:	08 95       	ret

000011b4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    11b4:	fc 01       	movw	r30, r24
    11b6:	64 8b       	std	Z+20, r22	; 0x14
    11b8:	75 8b       	std	Z+21, r23	; 0x15
}
    11ba:	08 95       	ret

000011bc <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    11bc:	fc 01       	movw	r30, r24
    11be:	66 8b       	std	Z+22, r22	; 0x16
    11c0:	77 8b       	std	Z+23, r23	; 0x17
}
    11c2:	08 95       	ret

000011c4 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    11c4:	fc 01       	movw	r30, r24
    11c6:	60 8f       	std	Z+24, r22	; 0x18
    11c8:	71 8f       	std	Z+25, r23	; 0x19
}
    11ca:	08 95       	ret

000011cc <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    11cc:	fc 01       	movw	r30, r24
    11ce:	62 8f       	std	Z+26, r22	; 0x1a
    11d0:	73 8f       	std	Z+27, r23	; 0x1b
}
    11d2:	08 95       	ret

000011d4 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    11d4:	fc 01       	movw	r30, r24
    11d6:	64 8f       	std	Z+28, r22	; 0x1c
    11d8:	75 8f       	std	Z+29, r23	; 0x1d
}
    11da:	08 95       	ret

000011dc <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    11dc:	fc 01       	movw	r30, r24
    11de:	66 8f       	std	Z+30, r22	; 0x1e
    11e0:	77 8f       	std	Z+31, r23	; 0x1f
}
    11e2:	08 95       	ret

000011e4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    11ea:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    11ec:	1e a2       	std	Y+38, r1	; 0x26
    11ee:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    11f0:	bc 01       	movw	r22, r24
    11f2:	68 5d       	subi	r22, 0xD8	; 216
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	88 51       	subi	r24, 0x18	; 24
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	40 ec       	ldi	r20, 0xC0	; 192
    11fc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1200:	1a 82       	std	Y+2, r1	; 0x02
    1202:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1204:	1c 82       	std	Y+4, r1	; 0x04
    1206:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1208:	1e 82       	std	Y+6, r1	; 0x06
    120a:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    120c:	18 86       	std	Y+8, r1	; 0x08
    120e:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1210:	1a 86       	std	Y+10, r1	; 0x0a
    1212:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1214:	1c 86       	std	Y+12, r1	; 0x0c
    1216:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1218:	1e 86       	std	Y+14, r1	; 0x0e
    121a:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    121c:	18 8a       	std	Y+16, r1	; 0x10
    121e:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1220:	1a 8a       	std	Y+18, r1	; 0x12
    1222:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1224:	1c 8a       	std	Y+20, r1	; 0x14
    1226:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1228:	1e 8a       	std	Y+22, r1	; 0x16
    122a:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    122c:	18 8e       	std	Y+24, r1	; 0x18
    122e:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1230:	1a 8e       	std	Y+26, r1	; 0x1a
    1232:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1234:	1c 8e       	std	Y+28, r1	; 0x1c
    1236:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1238:	1e 8e       	std	Y+30, r1	; 0x1e
    123a:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    123c:	18 a2       	std	Y+32, r1	; 0x20
    123e:	19 a2       	std	Y+33, r1	; 0x21
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	16 2f       	mov	r17, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1254:	66 23       	and	r22, r22
    1256:	a9 f0       	breq	.+42     	; 0x1282 <midi_device_input+0x3c>
    1258:	04 2f       	mov	r16, r20
    125a:	e4 2e       	mov	r14, r20
    125c:	e7 01       	movw	r28, r14
    125e:	7e 01       	movw	r14, r28
    1260:	f5 2e       	mov	r15, r21
    1262:	e7 01       	movw	r28, r14
      bytequeue_enqueue(&device->input_queue, input[i]);
    1264:	0f 2e       	mov	r0, r31
    1266:	f8 ee       	ldi	r31, 0xE8	; 232
    1268:	ef 2e       	mov	r14, r31
    126a:	ff 24       	eor	r15, r15
    126c:	f0 2d       	mov	r31, r0
    126e:	e8 0e       	add	r14, r24
    1270:	f9 1e       	adc	r15, r25
    1272:	69 91       	ld	r22, Y+
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 c4 06 	call	0xd88	; 0xd88 <bytequeue_enqueue>
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    127a:	ae 01       	movw	r20, r28
    127c:	40 1b       	sub	r20, r16
    127e:	41 17       	cp	r20, r17
    1280:	c0 f3       	brcs	.-16     	; 0x1272 <midi_device_input+0x2c>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	08 95       	ret

00001290 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1290:	fc 01       	movw	r30, r24
    1292:	60 83       	st	Z, r22
    1294:	71 83       	std	Z+1, r23	; 0x01
}
    1296:	08 95       	ret

00001298 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1298:	fc 01       	movw	r30, r24
    129a:	60 a3       	std	Z+32, r22	; 0x20
    129c:	71 a3       	std	Z+33, r23	; 0x21
}
    129e:	08 95       	ret

000012a0 <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
    12b2:	6b 01       	movw	r12, r22
    12b4:	f4 2e       	mov	r15, r20
    12b6:	e2 2e       	mov	r14, r18
    12b8:	10 2f       	mov	r17, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    12ba:	8d a1       	ldd	r24, Y+37	; 0x25
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	41 f4       	brne	.+16     	; 0x12d0 <midi_input_callbacks+0x30>
      if (device->input_sysex_callback) {
    12c0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12c2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    12c4:	30 97       	sbiw	r30, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <midi_input_callbacks+0x2a>
    12c8:	99 c0       	rjmp	.+306    	; 0x13fc <midi_input_callbacks+0x15c>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
    12ca:	ce 01       	movw	r24, r28
    12cc:	09 95       	icall
    12ce:	89 c0       	rjmp	.+274    	; 0x13e2 <midi_input_callbacks+0x142>
         called = true;
      }
   } else {
      switch (cnt) {
    12d0:	62 30       	cpi	r22, 0x02	; 2
    12d2:	71 05       	cpc	r23, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <midi_input_callbacks+0x38>
    12d6:	42 c0       	rjmp	.+132    	; 0x135c <midi_input_callbacks+0xbc>
    12d8:	63 30       	cpi	r22, 0x03	; 3
    12da:	71 05       	cpc	r23, r1
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <midi_input_callbacks+0x48>
    12de:	61 30       	cpi	r22, 0x01	; 1
    12e0:	71 05       	cpc	r23, r1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <midi_input_callbacks+0x46>
    12e4:	74 c0       	rjmp	.+232    	; 0x13ce <midi_input_callbacks+0x12e>
    12e6:	60 c0       	rjmp	.+192    	; 0x13a8 <midi_input_callbacks+0x108>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    12e8:	84 2f       	mov	r24, r20
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	80 7f       	andi	r24, 0xF0	; 240
    12ee:	90 70       	andi	r25, 0x00	; 0
    12f0:	80 3a       	cpi	r24, 0xA0	; 160
    12f2:	91 05       	cpc	r25, r1
    12f4:	e1 f0       	breq	.+56     	; 0x132e <midi_input_callbacks+0x8e>
    12f6:	81 3a       	cpi	r24, 0xA1	; 161
    12f8:	91 05       	cpc	r25, r1
    12fa:	3c f4       	brge	.+14     	; 0x130a <midi_input_callbacks+0x6a>
    12fc:	80 38       	cpi	r24, 0x80	; 128
    12fe:	91 05       	cpc	r25, r1
    1300:	99 f0       	breq	.+38     	; 0x1328 <midi_input_callbacks+0x88>
    1302:	80 39       	cpi	r24, 0x90	; 144
    1304:	91 05       	cpc	r25, r1
    1306:	f9 f4       	brne	.+62     	; 0x1346 <midi_input_callbacks+0xa6>
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <midi_input_callbacks+0x82>
    130a:	80 3e       	cpi	r24, 0xE0	; 224
    130c:	91 05       	cpc	r25, r1
    130e:	91 f0       	breq	.+36     	; 0x1334 <midi_input_callbacks+0x94>
    1310:	80 3f       	cpi	r24, 0xF0	; 240
    1312:	91 05       	cpc	r25, r1
    1314:	91 f0       	breq	.+36     	; 0x133a <midi_input_callbacks+0x9a>
    1316:	80 3b       	cpi	r24, 0xB0	; 176
    1318:	91 05       	cpc	r25, r1
    131a:	a9 f4       	brne	.+42     	; 0x1346 <midi_input_callbacks+0xa6>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    131c:	ea 81       	ldd	r30, Y+2	; 0x02
    131e:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1320:	14 c0       	rjmp	.+40     	; 0x134a <midi_input_callbacks+0xaa>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1322:	ec 81       	ldd	r30, Y+4	; 0x04
    1324:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1326:	11 c0       	rjmp	.+34     	; 0x134a <midi_input_callbacks+0xaa>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1328:	ee 81       	ldd	r30, Y+6	; 0x06
    132a:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    132c:	0e c0       	rjmp	.+28     	; 0x134a <midi_input_callbacks+0xaa>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    132e:	e8 85       	ldd	r30, Y+8	; 0x08
    1330:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1332:	0b c0       	rjmp	.+22     	; 0x134a <midi_input_callbacks+0xaa>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1334:	ea 85       	ldd	r30, Y+10	; 0x0a
    1336:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1338:	08 c0       	rjmp	.+16     	; 0x134a <midi_input_callbacks+0xaa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    133a:	42 3f       	cpi	r20, 0xF2	; 242
    133c:	09 f0       	breq	.+2      	; 0x1340 <midi_input_callbacks+0xa0>
    133e:	5e c0       	rjmp	.+188    	; 0x13fc <midi_input_callbacks+0x15c>
                        func = device->input_songposition_callback;
    1340:	ec 85       	ldd	r30, Y+12	; 0x0c
    1342:	fd 85       	ldd	r31, Y+13	; 0x0d
    1344:	02 c0       	rjmp	.+4      	; 0x134a <midi_input_callbacks+0xaa>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f4       	brne	.+2      	; 0x1350 <midi_input_callbacks+0xb0>
    134e:	56 c0       	rjmp	.+172    	; 0x13fc <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1, byte2);
    1350:	ce 01       	movw	r24, r28
    1352:	6f 2d       	mov	r22, r15
    1354:	4e 2d       	mov	r20, r14
    1356:	21 2f       	mov	r18, r17
    1358:	09 95       	icall
    135a:	43 c0       	rjmp	.+134    	; 0x13e2 <midi_input_callbacks+0x142>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    135c:	84 2f       	mov	r24, r20
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	80 7f       	andi	r24, 0xF0	; 240
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	80 3d       	cpi	r24, 0xD0	; 208
    1366:	91 05       	cpc	r25, r1
    1368:	49 f0       	breq	.+18     	; 0x137c <midi_input_callbacks+0xdc>
    136a:	80 3f       	cpi	r24, 0xF0	; 240
    136c:	91 05       	cpc	r25, r1
    136e:	49 f0       	breq	.+18     	; 0x1382 <midi_input_callbacks+0xe2>
    1370:	80 3c       	cpi	r24, 0xC0	; 192
    1372:	91 05       	cpc	r25, r1
    1374:	81 f4       	brne	.+32     	; 0x1396 <midi_input_callbacks+0xf6>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1376:	ee 85       	ldd	r30, Y+14	; 0x0e
    1378:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    137a:	0f c0       	rjmp	.+30     	; 0x139a <midi_input_callbacks+0xfa>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    137c:	e8 89       	ldd	r30, Y+16	; 0x10
    137e:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1380:	0c c0       	rjmp	.+24     	; 0x139a <midi_input_callbacks+0xfa>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1382:	43 3f       	cpi	r20, 0xF3	; 243
    1384:	19 f4       	brne	.+6      	; 0x138c <midi_input_callbacks+0xec>
                        func = device->input_songselect_callback;
    1386:	ea 89       	ldd	r30, Y+18	; 0x12
    1388:	fb 89       	ldd	r31, Y+19	; 0x13
    138a:	07 c0       	rjmp	.+14     	; 0x139a <midi_input_callbacks+0xfa>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    138c:	41 3f       	cpi	r20, 0xF1	; 241
    138e:	b1 f5       	brne	.+108    	; 0x13fc <midi_input_callbacks+0x15c>
                        func = device->input_tc_quarterframe_callback;
    1390:	ec 89       	ldd	r30, Y+20	; 0x14
    1392:	fd 89       	ldd	r31, Y+21	; 0x15
    1394:	02 c0       	rjmp	.+4      	; 0x139a <midi_input_callbacks+0xfa>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1396:	e0 e0       	ldi	r30, 0x00	; 0
    1398:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    139a:	30 97       	sbiw	r30, 0x00	; 0
    139c:	79 f1       	breq	.+94     	; 0x13fc <midi_input_callbacks+0x15c>
                  func(device, byte0, byte1);
    139e:	ce 01       	movw	r24, r28
    13a0:	6f 2d       	mov	r22, r15
    13a2:	4e 2d       	mov	r20, r14
    13a4:	09 95       	icall
    13a6:	1d c0       	rjmp	.+58     	; 0x13e2 <midi_input_callbacks+0x142>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    13a8:	84 2f       	mov	r24, r20
    13aa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <midi_is_realtime>
    13ae:	88 23       	and	r24, r24
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <midi_input_callbacks+0x118>
                  func = device->input_realtime_callback;
    13b2:	ee 89       	ldd	r30, Y+22	; 0x16
    13b4:	ff 89       	ldd	r31, Y+23	; 0x17
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <midi_input_callbacks+0x122>
               else if (byte0 == MIDI_TUNEREQUEST)
    13b8:	8f 2d       	mov	r24, r15
    13ba:	86 3f       	cpi	r24, 0xF6	; 246
    13bc:	f9 f4       	brne	.+62     	; 0x13fc <midi_input_callbacks+0x15c>
                  func = device->input_tunerequest_callback;
    13be:	e8 8d       	ldd	r30, Y+24	; 0x18
    13c0:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	d9 f0       	breq	.+54     	; 0x13fc <midi_input_callbacks+0x15c>
                  func(device, byte0);
    13c6:	ce 01       	movw	r24, r28
    13c8:	6f 2d       	mov	r22, r15
    13ca:	09 95       	icall
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <midi_input_callbacks+0x142>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    13ce:	64 30       	cpi	r22, 0x04	; 4
    13d0:	71 05       	cpc	r23, r1
    13d2:	90 f4       	brcc	.+36     	; 0x13f8 <midi_input_callbacks+0x158>
    13d4:	13 c0       	rjmp	.+38     	; 0x13fc <midi_input_callbacks+0x15c>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    13d6:	ce 01       	movw	r24, r28
    13d8:	b6 01       	movw	r22, r12
    13da:	4f 2d       	mov	r20, r15
    13dc:	2e 2d       	mov	r18, r14
    13de:	01 2f       	mov	r16, r17
    13e0:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    13e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    13e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    13e6:	30 97       	sbiw	r30, 0x00	; 0
    13e8:	71 f0       	breq	.+28     	; 0x1406 <midi_input_callbacks+0x166>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    13ea:	ce 01       	movw	r24, r28
    13ec:	b6 01       	movw	r22, r12
    13ee:	4f 2d       	mov	r20, r15
    13f0:	2e 2d       	mov	r18, r14
    13f2:	01 2f       	mov	r16, r17
    13f4:	09 95       	icall
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <midi_input_callbacks+0x166>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    13f8:	cc 24       	eor	r12, r12
    13fa:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    13fc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    13fe:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1400:	30 97       	sbiw	r30, 0x00	; 0
    1402:	49 f7       	brne	.-46     	; 0x13d6 <midi_input_callbacks+0x136>
    1404:	ee cf       	rjmp	.-36     	; 0x13e2 <midi_input_callbacks+0x142>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	08 95       	ret

00001418 <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	06 2f       	mov	r16, r22
   if (midi_is_realtime(input)) {
    1424:	86 2f       	mov	r24, r22
    1426:	0e 94 3d 07 	call	0xe7a	; 0xe7a <midi_is_realtime>
    142a:	88 23       	and	r24, r24
    142c:	69 f0       	breq	.+26     	; 0x1448 <midi_process_byte+0x30>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    142e:	1d a1       	ldd	r17, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1434:	ce 01       	movw	r24, r28
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	40 2f       	mov	r20, r16
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	0e 94 50 09 	call	0x12a0	; 0x12a0 <midi_input_callbacks>
      device->input_state = state;
    1444:	1d a3       	std	Y+37, r17	; 0x25
    1446:	95 c0       	rjmp	.+298    	; 0x1572 <midi_process_byte+0x15a>
   } else if (midi_is_statusbyte(input)) {
    1448:	80 2f       	mov	r24, r16
    144a:	0e 94 39 07 	call	0xe72	; 0xe72 <midi_is_statusbyte>
    144e:	88 23       	and	r24, r24
    1450:	09 f4       	brne	.+2      	; 0x1454 <midi_process_byte+0x3c>
    1452:	55 c0       	rjmp	.+170    	; 0x14fe <midi_process_byte+0xe6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1454:	8d a1       	ldd	r24, Y+37	; 0x25
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	29 f0       	breq	.+10     	; 0x1464 <midi_process_byte+0x4c>
         device->input_buffer[0] = input;
    145a:	0a a3       	std	Y+34, r16	; 0x22
         device->input_count = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	8e a3       	std	Y+38, r24	; 0x26
    1462:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1464:	80 2f       	mov	r24, r16
    1466:	0e 94 43 07 	call	0xe86	; 0xe86 <midi_packet_length>
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	39 f0       	breq	.+14     	; 0x147c <midi_process_byte+0x64>
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	b8 f0       	brcs	.+46     	; 0x14a0 <midi_process_byte+0x88>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	79 f0       	breq	.+30     	; 0x1494 <midi_process_byte+0x7c>
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	f1 f5       	brne	.+124    	; 0x14f6 <midi_process_byte+0xde>
    147a:	0f c0       	rjmp	.+30     	; 0x149a <midi_process_byte+0x82>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1480:	ce 01       	movw	r24, r28
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	40 2f       	mov	r20, r16
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <midi_input_callbacks>
            device->input_state = IDLE;
    1490:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1492:	6f c0       	rjmp	.+222    	; 0x1572 <midi_process_byte+0x15a>
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1498:	6c c0       	rjmp	.+216    	; 0x1572 <midi_process_byte+0x15a>
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	8d a3       	std	Y+37, r24	; 0x25
            break;
    149e:	69 c0       	rjmp	.+210    	; 0x1572 <midi_process_byte+0x15a>
         case UNDEFINED:
            switch(input) {
    14a0:	00 3f       	cpi	r16, 0xF0	; 240
    14a2:	19 f0       	breq	.+6      	; 0x14aa <midi_process_byte+0x92>
    14a4:	07 3f       	cpi	r16, 0xF7	; 247
    14a6:	19 f5       	brne	.+70     	; 0x14ee <midi_process_byte+0xd6>
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <midi_process_byte+0xa4>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    14ae:	80 ef       	ldi	r24, 0xF0	; 240
    14b0:	8a a3       	std	Y+34, r24	; 0x22
                  device->input_count = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	8e a3       	std	Y+38, r24	; 0x26
    14b8:	9f a3       	std	Y+39, r25	; 0x27
                  break;
    14ba:	5b c0       	rjmp	.+182    	; 0x1572 <midi_process_byte+0x15a>
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    14bc:	2e a1       	ldd	r18, Y+38	; 0x26
    14be:	3f a1       	ldd	r19, Y+39	; 0x27
    14c0:	c9 01       	movw	r24, r18
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0e 94 55 11 	call	0x22aa	; 0x22aa <__udivmodhi4>
    14ca:	fe 01       	movw	r30, r28
    14cc:	e8 0f       	add	r30, r24
    14ce:	f9 1f       	adc	r31, r25
    14d0:	87 ef       	ldi	r24, 0xF7	; 247
    14d2:	82 a3       	std	Z+34, r24	; 0x22
                  device->input_count += 1;
    14d4:	b9 01       	movw	r22, r18
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	6e a3       	std	Y+38, r22	; 0x26
    14dc:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    14de:	ce 01       	movw	r24, r28
    14e0:	4a a1       	ldd	r20, Y+34	; 0x22
    14e2:	2b a1       	ldd	r18, Y+35	; 0x23
    14e4:	0c a1       	ldd	r16, Y+36	; 0x24
    14e6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    14ea:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    14ec:	42 c0       	rjmp	.+132    	; 0x1572 <midi_process_byte+0x15a>
               default:
                  device->input_state = IDLE;
    14ee:	1d a2       	std	Y+37, r1	; 0x25
                  device->input_count = 0;
    14f0:	1e a2       	std	Y+38, r1	; 0x26
    14f2:	1f a2       	std	Y+39, r1	; 0x27
    14f4:	3e c0       	rjmp	.+124    	; 0x1572 <midi_process_byte+0x15a>
            }

            break;
         default:
            device->input_state = IDLE;
    14f6:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    14f8:	1e a2       	std	Y+38, r1	; 0x26
    14fa:	1f a2       	std	Y+39, r1	; 0x27
            break;
    14fc:	3a c0       	rjmp	.+116    	; 0x1572 <midi_process_byte+0x15a>
      }
   } else {
      if (device->input_state != IDLE) {
    14fe:	ed a1       	ldd	r30, Y+37	; 0x25
    1500:	ee 23       	and	r30, r30
    1502:	b9 f1       	breq	.+110    	; 0x1572 <midi_process_byte+0x15a>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1504:	2e a1       	ldd	r18, Y+38	; 0x26
    1506:	3f a1       	ldd	r19, Y+39	; 0x27
    1508:	c9 01       	movw	r24, r18
    150a:	63 e0       	ldi	r22, 0x03	; 3
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	0e 94 55 11 	call	0x22aa	; 0x22aa <__udivmodhi4>
    1512:	ac 01       	movw	r20, r24
    1514:	8c 0f       	add	r24, r28
    1516:	9d 1f       	adc	r25, r29
    1518:	dc 01       	movw	r26, r24
    151a:	92 96       	adiw	r26, 0x22	; 34
    151c:	0c 93       	st	X, r16
    151e:	92 97       	sbiw	r26, 0x22	; 34
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	2e a3       	std	Y+38, r18	; 0x26
    1526:	3f a3       	std	Y+39, r19	; 0x27

         switch(prev % 3) {
    1528:	41 30       	cpi	r20, 0x01	; 1
    152a:	51 05       	cpc	r21, r1
    152c:	91 f0       	breq	.+36     	; 0x1552 <midi_process_byte+0x13a>
    152e:	42 30       	cpi	r20, 0x02	; 2
    1530:	51 05       	cpc	r21, r1
    1532:	f9 f4       	brne	.+62     	; 0x1572 <midi_process_byte+0x15a>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1534:	ce 01       	movw	r24, r28
    1536:	b9 01       	movw	r22, r18
    1538:	4a a1       	ldd	r20, Y+34	; 0x22
    153a:	2b a1       	ldd	r18, Y+35	; 0x23
    153c:	0c a1       	ldd	r16, Y+36	; 0x24
    153e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1542:	8d a1       	ldd	r24, Y+37	; 0x25
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	a9 f0       	breq	.+42     	; 0x1572 <midi_process_byte+0x15a>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	8e a3       	std	Y+38, r24	; 0x26
    154e:	9f a3       	std	Y+39, r25	; 0x27
    1550:	10 c0       	rjmp	.+32     	; 0x1572 <midi_process_byte+0x15a>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1552:	e2 30       	cpi	r30, 0x02	; 2
    1554:	71 f4       	brne	.+28     	; 0x1572 <midi_process_byte+0x15a>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1556:	ce 01       	movw	r24, r28
    1558:	b9 01       	movw	r22, r18
    155a:	4a a1       	ldd	r20, Y+34	; 0x22
    155c:	2b a1       	ldd	r18, Y+35	; 0x23
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	0e 94 50 09 	call	0x12a0	; 0x12a0 <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1564:	8d a1       	ldd	r24, Y+37	; 0x25
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f0       	breq	.+8      	; 0x1572 <midi_process_byte+0x15a>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	8e a3       	std	Y+38, r24	; 0x26
    1570:	9f a3       	std	Y+39, r25	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	7c 01       	movw	r14, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    158e:	dc 01       	movw	r26, r24
    1590:	90 96       	adiw	r26, 0x20	; 32
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	91 97       	sbiw	r26, 0x21	; 33
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	09 f0       	breq	.+2      	; 0x159e <midi_device_process+0x22>
      device->pre_input_process_callback(device);
    159c:	09 95       	icall

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    159e:	87 01       	movw	r16, r14
    15a0:	08 51       	subi	r16, 0x18	; 24
    15a2:	1f 4f       	sbci	r17, 0xFF	; 255
    15a4:	c8 01       	movw	r24, r16
    15a6:	0e 94 f5 06 	call	0xdea	; 0xdea <bytequeue_length>
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    15aa:	c8 2e       	mov	r12, r24
    15ac:	dd 24       	eor	r13, r13
    15ae:	c1 14       	cp	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	91 f0       	breq	.+36     	; 0x15d8 <midi_device_process+0x5c>
    15b4:	c0 e0       	ldi	r28, 0x00	; 0
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    15b8:	c8 01       	movw	r24, r16
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 0b 07 	call	0xe16	; 0xe16 <bytequeue_get>
    15c0:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    15c2:	c7 01       	movw	r24, r14
    15c4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    15c8:	c8 01       	movw	r24, r16
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 1b 07 	call	0xe36	; 0xe36 <bytequeue_remove>

   //pull stuff off the queue and process
   byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    15d0:	21 96       	adiw	r28, 0x01	; 1
    15d2:	cc 15       	cp	r28, r12
    15d4:	dd 05       	cpc	r29, r13
    15d6:	80 f3       	brcs	.-32     	; 0x15b8 <midi_device_process+0x3c>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	08 95       	ret

000015ea <__fixunssfsi>:
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	7b 01       	movw	r14, r22
    15f4:	8c 01       	movw	r16, r24
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	5f e4       	ldi	r21, 0x4F	; 79
    15fe:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gesf2>
    1602:	87 fd       	sbrc	r24, 7
    1604:	11 c0       	rjmp	.+34     	; 0x1628 <__fixunssfsi+0x3e>
    1606:	c8 01       	movw	r24, r16
    1608:	b7 01       	movw	r22, r14
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	5f e4       	ldi	r21, 0x4F	; 79
    1612:	0e 94 98 0c 	call	0x1930	; 0x1930 <__subsf3>
    1616:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fixsfsi>
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	20 50       	subi	r18, 0x00	; 0
    1620:	30 40       	sbci	r19, 0x00	; 0
    1622:	40 40       	sbci	r20, 0x00	; 0
    1624:	50 48       	sbci	r21, 0x80	; 128
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <__fixunssfsi+0x4a>
    1628:	c8 01       	movw	r24, r16
    162a:	b7 01       	movw	r22, r14
    162c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fixsfsi>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	b9 01       	movw	r22, r18
    1636:	ca 01       	movw	r24, r20
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	08 95       	ret

00001642 <_fpadd_parts>:
    1642:	a0 e0       	ldi	r26, 0x00	; 0
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e7 e2       	ldi	r30, 0x27	; 39
    1648:	fb e0       	ldi	r31, 0x0B	; 11
    164a:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__+0x8>
    164e:	fc 01       	movw	r30, r24
    1650:	ea 01       	movw	r28, r20
    1652:	80 81       	ld	r24, Z
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	08 f4       	brcc	.+2      	; 0x165a <_fpadd_parts+0x18>
    1658:	38 c1       	rjmp	.+624    	; 0x18ca <_fpadd_parts+0x288>
    165a:	db 01       	movw	r26, r22
    165c:	9c 91       	ld	r25, X
    165e:	92 30       	cpi	r25, 0x02	; 2
    1660:	08 f4       	brcc	.+2      	; 0x1664 <_fpadd_parts+0x22>
    1662:	30 c1       	rjmp	.+608    	; 0x18c4 <_fpadd_parts+0x282>
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	59 f4       	brne	.+22     	; 0x167e <_fpadd_parts+0x3c>
    1668:	94 30       	cpi	r25, 0x04	; 4
    166a:	09 f0       	breq	.+2      	; 0x166e <_fpadd_parts+0x2c>
    166c:	2e c1       	rjmp	.+604    	; 0x18ca <_fpadd_parts+0x288>
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	8c 91       	ld	r24, X
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	98 17       	cp	r25, r24
    1678:	09 f0       	breq	.+2      	; 0x167c <_fpadd_parts+0x3a>
    167a:	21 c1       	rjmp	.+578    	; 0x18be <_fpadd_parts+0x27c>
    167c:	26 c1       	rjmp	.+588    	; 0x18ca <_fpadd_parts+0x288>
    167e:	94 30       	cpi	r25, 0x04	; 4
    1680:	09 f4       	brne	.+2      	; 0x1684 <_fpadd_parts+0x42>
    1682:	20 c1       	rjmp	.+576    	; 0x18c4 <_fpadd_parts+0x282>
    1684:	92 30       	cpi	r25, 0x02	; 2
    1686:	b1 f4       	brne	.+44     	; 0x16b4 <_fpadd_parts+0x72>
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	09 f0       	breq	.+2      	; 0x168e <_fpadd_parts+0x4c>
    168c:	1e c1       	rjmp	.+572    	; 0x18ca <_fpadd_parts+0x288>
    168e:	ca 01       	movw	r24, r20
    1690:	af 01       	movw	r20, r30
    1692:	28 e0       	ldi	r18, 0x08	; 8
    1694:	da 01       	movw	r26, r20
    1696:	0d 90       	ld	r0, X+
    1698:	ad 01       	movw	r20, r26
    169a:	dc 01       	movw	r26, r24
    169c:	0d 92       	st	X+, r0
    169e:	cd 01       	movw	r24, r26
    16a0:	21 50       	subi	r18, 0x01	; 1
    16a2:	c1 f7       	brne	.-16     	; 0x1694 <_fpadd_parts+0x52>
    16a4:	db 01       	movw	r26, r22
    16a6:	11 96       	adiw	r26, 0x01	; 1
    16a8:	8c 91       	ld	r24, X
    16aa:	11 97       	sbiw	r26, 0x01	; 1
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	89 23       	and	r24, r25
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	0a c1       	rjmp	.+532    	; 0x18c8 <_fpadd_parts+0x286>
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	09 f4       	brne	.+2      	; 0x16ba <_fpadd_parts+0x78>
    16b8:	05 c1       	rjmp	.+522    	; 0x18c4 <_fpadd_parts+0x282>
    16ba:	c2 80       	ldd	r12, Z+2	; 0x02
    16bc:	d3 80       	ldd	r13, Z+3	; 0x03
    16be:	db 01       	movw	r26, r22
    16c0:	12 96       	adiw	r26, 0x02	; 2
    16c2:	6d 90       	ld	r6, X+
    16c4:	7c 90       	ld	r7, X
    16c6:	13 97       	sbiw	r26, 0x03	; 3
    16c8:	24 81       	ldd	r18, Z+4	; 0x04
    16ca:	35 81       	ldd	r19, Z+5	; 0x05
    16cc:	46 81       	ldd	r20, Z+6	; 0x06
    16ce:	57 81       	ldd	r21, Z+7	; 0x07
    16d0:	14 96       	adiw	r26, 0x04	; 4
    16d2:	ed 90       	ld	r14, X+
    16d4:	fd 90       	ld	r15, X+
    16d6:	0d 91       	ld	r16, X+
    16d8:	1c 91       	ld	r17, X
    16da:	17 97       	sbiw	r26, 0x07	; 7
    16dc:	c6 01       	movw	r24, r12
    16de:	86 19       	sub	r24, r6
    16e0:	97 09       	sbc	r25, r7
    16e2:	5c 01       	movw	r10, r24
    16e4:	97 ff       	sbrs	r25, 7
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <_fpadd_parts+0xae>
    16e8:	aa 24       	eor	r10, r10
    16ea:	bb 24       	eor	r11, r11
    16ec:	a8 1a       	sub	r10, r24
    16ee:	b9 0a       	sbc	r11, r25
    16f0:	b0 e2       	ldi	r27, 0x20	; 32
    16f2:	ab 16       	cp	r10, r27
    16f4:	b1 04       	cpc	r11, r1
    16f6:	0c f0       	brlt	.+2      	; 0x16fa <_fpadd_parts+0xb8>
    16f8:	61 c0       	rjmp	.+194    	; 0x17bc <_fpadd_parts+0x17a>
    16fa:	18 16       	cp	r1, r24
    16fc:	19 06       	cpc	r1, r25
    16fe:	6c f5       	brge	.+90     	; 0x175a <_fpadd_parts+0x118>
    1700:	37 01       	movw	r6, r14
    1702:	48 01       	movw	r8, r16
    1704:	0a 2c       	mov	r0, r10
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <_fpadd_parts+0xce>
    1708:	96 94       	lsr	r9
    170a:	87 94       	ror	r8
    170c:	77 94       	ror	r7
    170e:	67 94       	ror	r6
    1710:	0a 94       	dec	r0
    1712:	d2 f7       	brpl	.-12     	; 0x1708 <_fpadd_parts+0xc6>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	0a 2c       	mov	r0, r10
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <_fpadd_parts+0xe6>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	aa 1f       	adc	r26, r26
    1726:	bb 1f       	adc	r27, r27
    1728:	0a 94       	dec	r0
    172a:	d2 f7       	brpl	.-12     	; 0x1720 <_fpadd_parts+0xde>
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	a1 09       	sbc	r26, r1
    1730:	b1 09       	sbc	r27, r1
    1732:	8e 21       	and	r24, r14
    1734:	9f 21       	and	r25, r15
    1736:	a0 23       	and	r26, r16
    1738:	b1 23       	and	r27, r17
    173a:	ee 24       	eor	r14, r14
    173c:	ff 24       	eor	r15, r15
    173e:	87 01       	movw	r16, r14
    1740:	e3 94       	inc	r14
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	a1 05       	cpc	r26, r1
    1746:	b1 05       	cpc	r27, r1
    1748:	19 f4       	brne	.+6      	; 0x1750 <_fpadd_parts+0x10e>
    174a:	ee 24       	eor	r14, r14
    174c:	ff 24       	eor	r15, r15
    174e:	87 01       	movw	r16, r14
    1750:	e6 28       	or	r14, r6
    1752:	f7 28       	or	r15, r7
    1754:	08 29       	or	r16, r8
    1756:	19 29       	or	r17, r9
    1758:	3c c0       	rjmp	.+120    	; 0x17d2 <_fpadd_parts+0x190>
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	d1 f1       	breq	.+116    	; 0x17d2 <_fpadd_parts+0x190>
    175e:	ca 0c       	add	r12, r10
    1760:	db 1c       	adc	r13, r11
    1762:	39 01       	movw	r6, r18
    1764:	4a 01       	movw	r8, r20
    1766:	0a 2c       	mov	r0, r10
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <_fpadd_parts+0x130>
    176a:	96 94       	lsr	r9
    176c:	87 94       	ror	r8
    176e:	77 94       	ror	r7
    1770:	67 94       	ror	r6
    1772:	0a 94       	dec	r0
    1774:	d2 f7       	brpl	.-12     	; 0x176a <_fpadd_parts+0x128>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	0a 2c       	mov	r0, r10
    1780:	04 c0       	rjmp	.+8      	; 0x178a <_fpadd_parts+0x148>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	aa 1f       	adc	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	0a 94       	dec	r0
    178c:	d2 f7       	brpl	.-12     	; 0x1782 <_fpadd_parts+0x140>
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	a1 09       	sbc	r26, r1
    1792:	b1 09       	sbc	r27, r1
    1794:	82 23       	and	r24, r18
    1796:	93 23       	and	r25, r19
    1798:	a4 23       	and	r26, r20
    179a:	b5 23       	and	r27, r21
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	a1 05       	cpc	r26, r1
    17a8:	b1 05       	cpc	r27, r1
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <_fpadd_parts+0x170>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	26 29       	or	r18, r6
    17b4:	37 29       	or	r19, r7
    17b6:	48 29       	or	r20, r8
    17b8:	59 29       	or	r21, r9
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <_fpadd_parts+0x190>
    17bc:	6c 14       	cp	r6, r12
    17be:	7d 04       	cpc	r7, r13
    17c0:	24 f4       	brge	.+8      	; 0x17ca <_fpadd_parts+0x188>
    17c2:	ee 24       	eor	r14, r14
    17c4:	ff 24       	eor	r15, r15
    17c6:	87 01       	movw	r16, r14
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <_fpadd_parts+0x190>
    17ca:	63 01       	movw	r12, r6
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	81 81       	ldd	r24, Z+1	; 0x01
    17d4:	fb 01       	movw	r30, r22
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	89 17       	cp	r24, r25
    17da:	09 f4       	brne	.+2      	; 0x17de <_fpadd_parts+0x19c>
    17dc:	45 c0       	rjmp	.+138    	; 0x1868 <_fpadd_parts+0x226>
    17de:	88 23       	and	r24, r24
    17e0:	49 f0       	breq	.+18     	; 0x17f4 <_fpadd_parts+0x1b2>
    17e2:	d8 01       	movw	r26, r16
    17e4:	c7 01       	movw	r24, r14
    17e6:	82 1b       	sub	r24, r18
    17e8:	93 0b       	sbc	r25, r19
    17ea:	a4 0b       	sbc	r26, r20
    17ec:	b5 0b       	sbc	r27, r21
    17ee:	9c 01       	movw	r18, r24
    17f0:	ad 01       	movw	r20, r26
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <_fpadd_parts+0x1ba>
    17f4:	2e 19       	sub	r18, r14
    17f6:	3f 09       	sbc	r19, r15
    17f8:	40 0b       	sbc	r20, r16
    17fa:	51 0b       	sbc	r21, r17
    17fc:	57 fd       	sbrc	r21, 7
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <_fpadd_parts+0x1c6>
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	ca 82       	std	Y+2, r12	; 0x02
    1804:	db 82       	std	Y+3, r13	; 0x03
    1806:	0b c0       	rjmp	.+22     	; 0x181e <_fpadd_parts+0x1dc>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	ca 82       	std	Y+2, r12	; 0x02
    180e:	db 82       	std	Y+3, r13	; 0x03
    1810:	50 95       	com	r21
    1812:	40 95       	com	r20
    1814:	30 95       	com	r19
    1816:	21 95       	neg	r18
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	4f 4f       	sbci	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	2c 83       	std	Y+4, r18	; 0x04
    1820:	3d 83       	std	Y+5, r19	; 0x05
    1822:	4e 83       	std	Y+6, r20	; 0x06
    1824:	5f 83       	std	Y+7, r21	; 0x07
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <_fpadd_parts+0x200>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	aa 1f       	adc	r26, r26
    182e:	bb 1f       	adc	r27, r27
    1830:	8c 83       	std	Y+4, r24	; 0x04
    1832:	9d 83       	std	Y+5, r25	; 0x05
    1834:	ae 83       	std	Y+6, r26	; 0x06
    1836:	bf 83       	std	Y+7, r27	; 0x07
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	9b 83       	std	Y+3, r25	; 0x03
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	ae 81       	ldd	r26, Y+6	; 0x06
    1848:	bf 81       	ldd	r27, Y+7	; 0x07
    184a:	9c 01       	movw	r18, r24
    184c:	ad 01       	movw	r20, r26
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	40 40       	sbci	r20, 0x00	; 0
    1854:	50 40       	sbci	r21, 0x00	; 0
    1856:	2f 3f       	cpi	r18, 0xFF	; 255
    1858:	ef ef       	ldi	r30, 0xFF	; 255
    185a:	3e 07       	cpc	r19, r30
    185c:	ef ef       	ldi	r30, 0xFF	; 255
    185e:	4e 07       	cpc	r20, r30
    1860:	ef e3       	ldi	r30, 0x3F	; 63
    1862:	5e 07       	cpc	r21, r30
    1864:	08 f3       	brcs	.-62     	; 0x1828 <_fpadd_parts+0x1e6>
    1866:	0b c0       	rjmp	.+22     	; 0x187e <_fpadd_parts+0x23c>
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	ca 82       	std	Y+2, r12	; 0x02
    186c:	db 82       	std	Y+3, r13	; 0x03
    186e:	2e 0d       	add	r18, r14
    1870:	3f 1d       	adc	r19, r15
    1872:	40 1f       	adc	r20, r16
    1874:	51 1f       	adc	r21, r17
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	3d 83       	std	Y+5, r19	; 0x05
    187a:	4e 83       	std	Y+6, r20	; 0x06
    187c:	5f 83       	std	Y+7, r21	; 0x07
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	88 83       	st	Y, r24
    1882:	2c 81       	ldd	r18, Y+4	; 0x04
    1884:	3d 81       	ldd	r19, Y+5	; 0x05
    1886:	4e 81       	ldd	r20, Y+6	; 0x06
    1888:	5f 81       	ldd	r21, Y+7	; 0x07
    188a:	57 ff       	sbrs	r21, 7
    188c:	1d c0       	rjmp	.+58     	; 0x18c8 <_fpadd_parts+0x286>
    188e:	da 01       	movw	r26, r20
    1890:	c9 01       	movw	r24, r18
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	a0 70       	andi	r26, 0x00	; 0
    1898:	b0 70       	andi	r27, 0x00	; 0
    189a:	56 95       	lsr	r21
    189c:	47 95       	ror	r20
    189e:	37 95       	ror	r19
    18a0:	27 95       	ror	r18
    18a2:	82 2b       	or	r24, r18
    18a4:	93 2b       	or	r25, r19
    18a6:	a4 2b       	or	r26, r20
    18a8:	b5 2b       	or	r27, r21
    18aa:	8c 83       	std	Y+4, r24	; 0x04
    18ac:	9d 83       	std	Y+5, r25	; 0x05
    18ae:	ae 83       	std	Y+6, r26	; 0x06
    18b0:	bf 83       	std	Y+7, r27	; 0x07
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <_fpadd_parts+0x286>
    18be:	e0 e1       	ldi	r30, 0x10	; 16
    18c0:	f0 e2       	ldi	r31, 0x20	; 32
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <_fpadd_parts+0x288>
    18c4:	fb 01       	movw	r30, r22
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <_fpadd_parts+0x288>
    18c8:	fe 01       	movw	r30, r28
    18ca:	cf 01       	movw	r24, r30
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	ee e0       	ldi	r30, 0x0E	; 14
    18d2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__+0x8>

000018d6 <__addsf3>:
    18d6:	a0 e2       	ldi	r26, 0x20	; 32
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e7       	ldi	r30, 0x71	; 113
    18dc:	fc e0       	ldi	r31, 0x0C	; 12
    18de:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x18>
    18e2:	69 83       	std	Y+1, r22	; 0x01
    18e4:	7a 83       	std	Y+2, r23	; 0x02
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	2d 83       	std	Y+5, r18	; 0x05
    18ec:	3e 83       	std	Y+6, r19	; 0x06
    18ee:	4f 83       	std	Y+7, r20	; 0x07
    18f0:	58 87       	std	Y+8, r21	; 0x08
    18f2:	89 e0       	ldi	r24, 0x09	; 9
    18f4:	e8 2e       	mov	r14, r24
    18f6:	f1 2c       	mov	r15, r1
    18f8:	ec 0e       	add	r14, r28
    18fa:	fd 1e       	adc	r15, r29
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	b7 01       	movw	r22, r14
    1902:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1906:	8e 01       	movw	r16, r28
    1908:	0f 5e       	subi	r16, 0xEF	; 239
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	ce 01       	movw	r24, r28
    190e:	05 96       	adiw	r24, 0x05	; 5
    1910:	b8 01       	movw	r22, r16
    1912:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1916:	c7 01       	movw	r24, r14
    1918:	b8 01       	movw	r22, r16
    191a:	ae 01       	movw	r20, r28
    191c:	47 5e       	subi	r20, 0xE7	; 231
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	0e 94 21 0b 	call	0x1642	; 0x1642 <_fpadd_parts>
    1924:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__pack_f>
    1928:	a0 96       	adiw	r28, 0x20	; 32
    192a:	e6 e0       	ldi	r30, 0x06	; 6
    192c:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x18>

00001930 <__subsf3>:
    1930:	a0 e2       	ldi	r26, 0x20	; 32
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e9       	ldi	r30, 0x9E	; 158
    1936:	fc e0       	ldi	r31, 0x0C	; 12
    1938:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x18>
    193c:	69 83       	std	Y+1, r22	; 0x01
    193e:	7a 83       	std	Y+2, r23	; 0x02
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	2d 83       	std	Y+5, r18	; 0x05
    1946:	3e 83       	std	Y+6, r19	; 0x06
    1948:	4f 83       	std	Y+7, r20	; 0x07
    194a:	58 87       	std	Y+8, r21	; 0x08
    194c:	8e 01       	movw	r16, r28
    194e:	07 5f       	subi	r16, 0xF7	; 247
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	b8 01       	movw	r22, r16
    1958:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    195c:	91 e1       	ldi	r25, 0x11	; 17
    195e:	e9 2e       	mov	r14, r25
    1960:	f1 2c       	mov	r15, r1
    1962:	ec 0e       	add	r14, r28
    1964:	fd 1e       	adc	r15, r29
    1966:	ce 01       	movw	r24, r28
    1968:	05 96       	adiw	r24, 0x05	; 5
    196a:	b7 01       	movw	r22, r14
    196c:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	89 27       	eor	r24, r25
    1976:	8a 8b       	std	Y+18, r24	; 0x12
    1978:	c8 01       	movw	r24, r16
    197a:	b7 01       	movw	r22, r14
    197c:	ae 01       	movw	r20, r28
    197e:	47 5e       	subi	r20, 0xE7	; 231
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	0e 94 21 0b 	call	0x1642	; 0x1642 <_fpadd_parts>
    1986:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__pack_f>
    198a:	a0 96       	adiw	r28, 0x20	; 32
    198c:	e6 e0       	ldi	r30, 0x06	; 6
    198e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x18>

00001992 <__mulsf3>:
    1992:	a0 e2       	ldi	r26, 0x20	; 32
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef ec       	ldi	r30, 0xCF	; 207
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	3e 83       	std	Y+6, r19	; 0x06
    19aa:	4f 83       	std	Y+7, r20	; 0x07
    19ac:	58 87       	std	Y+8, r21	; 0x08
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	be 01       	movw	r22, r28
    19b4:	67 5f       	subi	r22, 0xF7	; 247
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    19bc:	ce 01       	movw	r24, r28
    19be:	05 96       	adiw	r24, 0x05	; 5
    19c0:	be 01       	movw	r22, r28
    19c2:	6f 5e       	subi	r22, 0xEF	; 239
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255
    19c6:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    19ca:	99 85       	ldd	r25, Y+9	; 0x09
    19cc:	92 30       	cpi	r25, 0x02	; 2
    19ce:	78 f0       	brcs	.+30     	; 0x19ee <__mulsf3+0x5c>
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	c0 f0       	brcs	.+48     	; 0x1a06 <__mulsf3+0x74>
    19d6:	94 30       	cpi	r25, 0x04	; 4
    19d8:	19 f4       	brne	.+6      	; 0x19e0 <__mulsf3+0x4e>
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	41 f4       	brne	.+16     	; 0x19ee <__mulsf3+0x5c>
    19de:	cb c0       	rjmp	.+406    	; 0x1b76 <__mulsf3+0x1e4>
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	19 f4       	brne	.+6      	; 0x19ea <__mulsf3+0x58>
    19e4:	92 30       	cpi	r25, 0x02	; 2
    19e6:	79 f4       	brne	.+30     	; 0x1a06 <__mulsf3+0x74>
    19e8:	c6 c0       	rjmp	.+396    	; 0x1b76 <__mulsf3+0x1e4>
    19ea:	92 30       	cpi	r25, 0x02	; 2
    19ec:	51 f4       	brne	.+20     	; 0x1a02 <__mulsf3+0x70>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    19f2:	9a 89       	ldd	r25, Y+18	; 0x12
    19f4:	29 17       	cp	r18, r25
    19f6:	09 f4       	brne	.+2      	; 0x19fa <__mulsf3+0x68>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	8a 87       	std	Y+10, r24	; 0x0a
    19fc:	ce 01       	movw	r24, r28
    19fe:	09 96       	adiw	r24, 0x09	; 9
    1a00:	bc c0       	rjmp	.+376    	; 0x1b7a <__mulsf3+0x1e8>
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	51 f4       	brne	.+20     	; 0x1a1a <__mulsf3+0x88>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0c:	29 17       	cp	r18, r25
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <__mulsf3+0x80>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	8a 8b       	std	Y+18, r24	; 0x12
    1a14:	ce 01       	movw	r24, r28
    1a16:	41 96       	adiw	r24, 0x11	; 17
    1a18:	b0 c0       	rjmp	.+352    	; 0x1b7a <__mulsf3+0x1e8>
    1a1a:	6d 84       	ldd	r6, Y+13	; 0x0d
    1a1c:	7e 84       	ldd	r7, Y+14	; 0x0e
    1a1e:	8f 84       	ldd	r8, Y+15	; 0x0f
    1a20:	98 88       	ldd	r9, Y+16	; 0x10
    1a22:	ed 88       	ldd	r14, Y+21	; 0x15
    1a24:	fe 88       	ldd	r15, Y+22	; 0x16
    1a26:	0f 89       	ldd	r16, Y+23	; 0x17
    1a28:	18 8d       	ldd	r17, Y+24	; 0x18
    1a2a:	e0 e2       	ldi	r30, 0x20	; 32
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	dc 01       	movw	r26, r24
    1a34:	aa 24       	eor	r10, r10
    1a36:	bb 24       	eor	r11, r11
    1a38:	65 01       	movw	r12, r10
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	b3 01       	movw	r22, r6
    1a42:	61 70       	andi	r22, 0x01	; 1
    1a44:	70 70       	andi	r23, 0x00	; 0
    1a46:	61 15       	cp	r22, r1
    1a48:	71 05       	cpc	r23, r1
    1a4a:	d1 f0       	breq	.+52     	; 0x1a80 <__mulsf3+0xee>
    1a4c:	2e 0d       	add	r18, r14
    1a4e:	3f 1d       	adc	r19, r15
    1a50:	40 1f       	adc	r20, r16
    1a52:	51 1f       	adc	r21, r17
    1a54:	15 01       	movw	r2, r10
    1a56:	26 01       	movw	r4, r12
    1a58:	28 0e       	add	r2, r24
    1a5a:	39 1e       	adc	r3, r25
    1a5c:	4a 1e       	adc	r4, r26
    1a5e:	5b 1e       	adc	r5, r27
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	2e 15       	cp	r18, r14
    1a6a:	3f 05       	cpc	r19, r15
    1a6c:	40 07       	cpc	r20, r16
    1a6e:	51 07       	cpc	r21, r17
    1a70:	18 f0       	brcs	.+6      	; 0x1a78 <__mulsf3+0xe6>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	dc 01       	movw	r26, r24
    1a78:	82 0d       	add	r24, r2
    1a7a:	93 1d       	adc	r25, r3
    1a7c:	a4 1d       	adc	r26, r4
    1a7e:	b5 1d       	adc	r27, r5
    1a80:	aa 0c       	add	r10, r10
    1a82:	bb 1c       	adc	r11, r11
    1a84:	cc 1c       	adc	r12, r12
    1a86:	dd 1c       	adc	r13, r13
    1a88:	17 ff       	sbrs	r17, 7
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <__mulsf3+0x10c>
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	26 2e       	mov	r2, r22
    1a90:	31 2c       	mov	r3, r1
    1a92:	41 2c       	mov	r4, r1
    1a94:	51 2c       	mov	r5, r1
    1a96:	a2 28       	or	r10, r2
    1a98:	b3 28       	or	r11, r3
    1a9a:	c4 28       	or	r12, r4
    1a9c:	d5 28       	or	r13, r5
    1a9e:	31 97       	sbiw	r30, 0x01	; 1
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <__mulsf3+0x122>
    1aa2:	ee 0c       	add	r14, r14
    1aa4:	ff 1c       	adc	r15, r15
    1aa6:	00 1f       	adc	r16, r16
    1aa8:	11 1f       	adc	r17, r17
    1aaa:	96 94       	lsr	r9
    1aac:	87 94       	ror	r8
    1aae:	77 94       	ror	r7
    1ab0:	67 94       	ror	r6
    1ab2:	c6 cf       	rjmp	.-116    	; 0x1a40 <__mulsf3+0xae>
    1ab4:	6b 89       	ldd	r22, Y+19	; 0x13
    1ab6:	7c 89       	ldd	r23, Y+20	; 0x14
    1ab8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aba:	fc 85       	ldd	r31, Y+12	; 0x0c
    1abc:	6e 0f       	add	r22, r30
    1abe:	7f 1f       	adc	r23, r31
    1ac0:	6e 5f       	subi	r22, 0xFE	; 254
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	6b 8f       	std	Y+27, r22	; 0x1b
    1ac6:	7c 8f       	std	Y+28, r23	; 0x1c
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	ea 85       	ldd	r30, Y+10	; 0x0a
    1acc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ace:	e7 17       	cp	r30, r23
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <__mulsf3+0x142>
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	6a 8f       	std	Y+26, r22	; 0x1a
    1ad6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1ad8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1ada:	10 c0       	rjmp	.+32     	; 0x1afc <__mulsf3+0x16a>
    1adc:	fc 01       	movw	r30, r24
    1ade:	e1 70       	andi	r30, 0x01	; 1
    1ae0:	f0 70       	andi	r31, 0x00	; 0
    1ae2:	30 97       	sbiw	r30, 0x00	; 0
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <__mulsf3+0x15e>
    1ae6:	56 95       	lsr	r21
    1ae8:	47 95       	ror	r20
    1aea:	37 95       	ror	r19
    1aec:	27 95       	ror	r18
    1aee:	50 68       	ori	r21, 0x80	; 128
    1af0:	b6 95       	lsr	r27
    1af2:	a7 95       	ror	r26
    1af4:	97 95       	ror	r25
    1af6:	87 95       	ror	r24
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	b7 fd       	sbrc	r27, 7
    1afe:	ee cf       	rjmp	.-36     	; 0x1adc <__mulsf3+0x14a>
    1b00:	0c c0       	rjmp	.+24     	; 0x1b1a <__mulsf3+0x188>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	aa 1f       	adc	r26, r26
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	57 fd       	sbrc	r21, 7
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	22 0f       	add	r18, r18
    1b10:	33 1f       	adc	r19, r19
    1b12:	44 1f       	adc	r20, r20
    1b14:	55 1f       	adc	r21, r21
    1b16:	61 50       	subi	r22, 0x01	; 1
    1b18:	70 40       	sbci	r23, 0x00	; 0
    1b1a:	80 30       	cpi	r24, 0x00	; 0
    1b1c:	e0 e0       	ldi	r30, 0x00	; 0
    1b1e:	9e 07       	cpc	r25, r30
    1b20:	e0 e0       	ldi	r30, 0x00	; 0
    1b22:	ae 07       	cpc	r26, r30
    1b24:	e0 e4       	ldi	r30, 0x40	; 64
    1b26:	be 07       	cpc	r27, r30
    1b28:	60 f3       	brcs	.-40     	; 0x1b02 <__mulsf3+0x170>
    1b2a:	6b 8f       	std	Y+27, r22	; 0x1b
    1b2c:	7c 8f       	std	Y+28, r23	; 0x1c
    1b2e:	6f e7       	ldi	r22, 0x7F	; 127
    1b30:	e6 2e       	mov	r14, r22
    1b32:	f1 2c       	mov	r15, r1
    1b34:	01 2d       	mov	r16, r1
    1b36:	11 2d       	mov	r17, r1
    1b38:	e8 22       	and	r14, r24
    1b3a:	f9 22       	and	r15, r25
    1b3c:	0a 23       	and	r16, r26
    1b3e:	1b 23       	and	r17, r27
    1b40:	60 e4       	ldi	r22, 0x40	; 64
    1b42:	e6 16       	cp	r14, r22
    1b44:	f1 04       	cpc	r15, r1
    1b46:	01 05       	cpc	r16, r1
    1b48:	11 05       	cpc	r17, r1
    1b4a:	61 f4       	brne	.+24     	; 0x1b64 <__mulsf3+0x1d2>
    1b4c:	87 fd       	sbrc	r24, 7
    1b4e:	0a c0       	rjmp	.+20     	; 0x1b64 <__mulsf3+0x1d2>
    1b50:	21 15       	cp	r18, r1
    1b52:	31 05       	cpc	r19, r1
    1b54:	41 05       	cpc	r20, r1
    1b56:	51 05       	cpc	r21, r1
    1b58:	29 f0       	breq	.+10     	; 0x1b64 <__mulsf3+0x1d2>
    1b5a:	80 5c       	subi	r24, 0xC0	; 192
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	af 4f       	sbci	r26, 0xFF	; 255
    1b60:	bf 4f       	sbci	r27, 0xFF	; 255
    1b62:	80 78       	andi	r24, 0x80	; 128
    1b64:	8d 8f       	std	Y+29, r24	; 0x1d
    1b66:	9e 8f       	std	Y+30, r25	; 0x1e
    1b68:	af 8f       	std	Y+31, r26	; 0x1f
    1b6a:	b8 a3       	std	Y+32, r27	; 0x20
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	89 8f       	std	Y+25, r24	; 0x19
    1b70:	ce 01       	movw	r24, r28
    1b72:	49 96       	adiw	r24, 0x19	; 25
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <__mulsf3+0x1e8>
    1b76:	80 e1       	ldi	r24, 0x10	; 16
    1b78:	90 e2       	ldi	r25, 0x20	; 32
    1b7a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__pack_f>
    1b7e:	a0 96       	adiw	r28, 0x20	; 32
    1b80:	e2 e1       	ldi	r30, 0x12	; 18
    1b82:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__epilogue_restores__>

00001b86 <__divsf3>:
    1b86:	a8 e1       	ldi	r26, 0x18	; 24
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1b8c:	fd e0       	ldi	r31, 0x0D	; 13
    1b8e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__+0x10>
    1b92:	69 83       	std	Y+1, r22	; 0x01
    1b94:	7a 83       	std	Y+2, r23	; 0x02
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	2d 83       	std	Y+5, r18	; 0x05
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	4f 83       	std	Y+7, r20	; 0x07
    1ba0:	58 87       	std	Y+8, r21	; 0x08
    1ba2:	8e 01       	movw	r16, r28
    1ba4:	07 5f       	subi	r16, 0xF7	; 247
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	b8 01       	movw	r22, r16
    1bae:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1bb2:	81 e1       	ldi	r24, 0x11	; 17
    1bb4:	e8 2e       	mov	r14, r24
    1bb6:	f1 2c       	mov	r15, r1
    1bb8:	ec 0e       	add	r14, r28
    1bba:	fd 1e       	adc	r15, r29
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	05 96       	adiw	r24, 0x05	; 5
    1bc0:	b7 01       	movw	r22, r14
    1bc2:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1bc6:	99 85       	ldd	r25, Y+9	; 0x09
    1bc8:	92 30       	cpi	r25, 0x02	; 2
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <__divsf3+0x48>
    1bcc:	83 c0       	rjmp	.+262    	; 0x1cd4 <__divsf3+0x14e>
    1bce:	89 89       	ldd	r24, Y+17	; 0x11
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <__divsf3+0x50>
    1bd4:	7b c0       	rjmp	.+246    	; 0x1ccc <__divsf3+0x146>
    1bd6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bd8:	3a 89       	ldd	r19, Y+18	; 0x12
    1bda:	23 27       	eor	r18, r19
    1bdc:	2a 87       	std	Y+10, r18	; 0x0a
    1bde:	94 30       	cpi	r25, 0x04	; 4
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <__divsf3+0x60>
    1be2:	92 30       	cpi	r25, 0x02	; 2
    1be4:	21 f4       	brne	.+8      	; 0x1bee <__divsf3+0x68>
    1be6:	98 17       	cp	r25, r24
    1be8:	09 f0       	breq	.+2      	; 0x1bec <__divsf3+0x66>
    1bea:	6c c0       	rjmp	.+216    	; 0x1cc4 <__divsf3+0x13e>
    1bec:	71 c0       	rjmp	.+226    	; 0x1cd0 <__divsf3+0x14a>
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	39 f4       	brne	.+14     	; 0x1c00 <__divsf3+0x7a>
    1bf2:	1d 86       	std	Y+13, r1	; 0x0d
    1bf4:	1e 86       	std	Y+14, r1	; 0x0e
    1bf6:	1f 86       	std	Y+15, r1	; 0x0f
    1bf8:	18 8a       	std	Y+16, r1	; 0x10
    1bfa:	1b 86       	std	Y+11, r1	; 0x0b
    1bfc:	1c 86       	std	Y+12, r1	; 0x0c
    1bfe:	6a c0       	rjmp	.+212    	; 0x1cd4 <__divsf3+0x14e>
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <__divsf3+0x84>
    1c04:	84 e0       	ldi	r24, 0x04	; 4
    1c06:	89 87       	std	Y+9, r24	; 0x09
    1c08:	65 c0       	rjmp	.+202    	; 0x1cd4 <__divsf3+0x14e>
    1c0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c0e:	2b 89       	ldd	r18, Y+19	; 0x13
    1c10:	3c 89       	ldd	r19, Y+20	; 0x14
    1c12:	82 1b       	sub	r24, r18
    1c14:	93 0b       	sbc	r25, r19
    1c16:	8b 87       	std	Y+11, r24	; 0x0b
    1c18:	9c 87       	std	Y+12, r25	; 0x0c
    1c1a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c1c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c1e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c20:	58 89       	ldd	r21, Y+16	; 0x10
    1c22:	ed 88       	ldd	r14, Y+21	; 0x15
    1c24:	fe 88       	ldd	r15, Y+22	; 0x16
    1c26:	0f 89       	ldd	r16, Y+23	; 0x17
    1c28:	18 8d       	ldd	r17, Y+24	; 0x18
    1c2a:	2e 15       	cp	r18, r14
    1c2c:	3f 05       	cpc	r19, r15
    1c2e:	40 07       	cpc	r20, r16
    1c30:	51 07       	cpc	r21, r17
    1c32:	38 f4       	brcc	.+14     	; 0x1c42 <__divsf3+0xbc>
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	44 1f       	adc	r20, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	6f e1       	ldi	r22, 0x1F	; 31
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	a1 2c       	mov	r10, r1
    1c48:	b1 2c       	mov	r11, r1
    1c4a:	c1 2c       	mov	r12, r1
    1c4c:	a0 e4       	ldi	r26, 0x40	; 64
    1c4e:	da 2e       	mov	r13, r26
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	dc 01       	movw	r26, r24
    1c56:	2e 15       	cp	r18, r14
    1c58:	3f 05       	cpc	r19, r15
    1c5a:	40 07       	cpc	r20, r16
    1c5c:	51 07       	cpc	r21, r17
    1c5e:	40 f0       	brcs	.+16     	; 0x1c70 <__divsf3+0xea>
    1c60:	8a 29       	or	r24, r10
    1c62:	9b 29       	or	r25, r11
    1c64:	ac 29       	or	r26, r12
    1c66:	bd 29       	or	r27, r13
    1c68:	2e 19       	sub	r18, r14
    1c6a:	3f 09       	sbc	r19, r15
    1c6c:	40 0b       	sbc	r20, r16
    1c6e:	51 0b       	sbc	r21, r17
    1c70:	d6 94       	lsr	r13
    1c72:	c7 94       	ror	r12
    1c74:	b7 94       	ror	r11
    1c76:	a7 94       	ror	r10
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	44 1f       	adc	r20, r20
    1c7e:	55 1f       	adc	r21, r21
    1c80:	61 50       	subi	r22, 0x01	; 1
    1c82:	70 40       	sbci	r23, 0x00	; 0
    1c84:	41 f7       	brne	.-48     	; 0x1c56 <__divsf3+0xd0>
    1c86:	6f e7       	ldi	r22, 0x7F	; 127
    1c88:	e6 2e       	mov	r14, r22
    1c8a:	f1 2c       	mov	r15, r1
    1c8c:	01 2d       	mov	r16, r1
    1c8e:	11 2d       	mov	r17, r1
    1c90:	e8 22       	and	r14, r24
    1c92:	f9 22       	and	r15, r25
    1c94:	0a 23       	and	r16, r26
    1c96:	1b 23       	and	r17, r27
    1c98:	60 e4       	ldi	r22, 0x40	; 64
    1c9a:	e6 16       	cp	r14, r22
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	01 05       	cpc	r16, r1
    1ca0:	11 05       	cpc	r17, r1
    1ca2:	61 f4       	brne	.+24     	; 0x1cbc <__divsf3+0x136>
    1ca4:	87 fd       	sbrc	r24, 7
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <__divsf3+0x136>
    1ca8:	21 15       	cp	r18, r1
    1caa:	31 05       	cpc	r19, r1
    1cac:	41 05       	cpc	r20, r1
    1cae:	51 05       	cpc	r21, r1
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__divsf3+0x136>
    1cb2:	80 5c       	subi	r24, 0xC0	; 192
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	af 4f       	sbci	r26, 0xFF	; 255
    1cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cba:	80 78       	andi	r24, 0x80	; 128
    1cbc:	8d 87       	std	Y+13, r24	; 0x0d
    1cbe:	9e 87       	std	Y+14, r25	; 0x0e
    1cc0:	af 87       	std	Y+15, r26	; 0x0f
    1cc2:	b8 8b       	std	Y+16, r27	; 0x10
    1cc4:	8e 01       	movw	r16, r28
    1cc6:	07 5f       	subi	r16, 0xF7	; 247
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <__divsf3+0x14e>
    1ccc:	87 01       	movw	r16, r14
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <__divsf3+0x14e>
    1cd0:	00 e1       	ldi	r16, 0x10	; 16
    1cd2:	10 e2       	ldi	r17, 0x20	; 32
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__pack_f>
    1cda:	68 96       	adiw	r28, 0x18	; 24
    1cdc:	ea e0       	ldi	r30, 0x0A	; 10
    1cde:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__epilogue_restores__+0x10>

00001ce2 <__gesf2>:
    1ce2:	a8 e1       	ldi	r26, 0x18	; 24
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e7       	ldi	r30, 0x77	; 119
    1ce8:	fe e0       	ldi	r31, 0x0E	; 14
    1cea:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x18>
    1cee:	69 83       	std	Y+1, r22	; 0x01
    1cf0:	7a 83       	std	Y+2, r23	; 0x02
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	2d 83       	std	Y+5, r18	; 0x05
    1cf8:	3e 83       	std	Y+6, r19	; 0x06
    1cfa:	4f 83       	std	Y+7, r20	; 0x07
    1cfc:	58 87       	std	Y+8, r21	; 0x08
    1cfe:	8e 01       	movw	r16, r28
    1d00:	07 5f       	subi	r16, 0xF7	; 247
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	b8 01       	movw	r22, r16
    1d0a:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1d0e:	81 e1       	ldi	r24, 0x11	; 17
    1d10:	e8 2e       	mov	r14, r24
    1d12:	f1 2c       	mov	r15, r1
    1d14:	ec 0e       	add	r14, r28
    1d16:	fd 1e       	adc	r15, r29
    1d18:	ce 01       	movw	r24, r28
    1d1a:	05 96       	adiw	r24, 0x05	; 5
    1d1c:	b7 01       	movw	r22, r14
    1d1e:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	40 f0       	brcs	.+16     	; 0x1d38 <__gesf2+0x56>
    1d28:	89 89       	ldd	r24, Y+17	; 0x11
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	28 f0       	brcs	.+10     	; 0x1d38 <__gesf2+0x56>
    1d2e:	c8 01       	movw	r24, r16
    1d30:	b7 01       	movw	r22, r14
    1d32:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__fpcmp_parts_f>
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <__gesf2+0x58>
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	68 96       	adiw	r28, 0x18	; 24
    1d3c:	e6 e0       	ldi	r30, 0x06	; 6
    1d3e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x18>

00001d42 <__fixsfsi>:
    1d42:	ac e0       	ldi	r26, 0x0C	; 12
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e7 ea       	ldi	r30, 0xA7	; 167
    1d48:	fe e0       	ldi	r31, 0x0E	; 14
    1d4a:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x20>
    1d4e:	69 83       	std	Y+1, r22	; 0x01
    1d50:	7a 83       	std	Y+2, r23	; 0x02
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	ce 01       	movw	r24, r28
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	be 01       	movw	r22, r28
    1d5c:	6b 5f       	subi	r22, 0xFB	; 251
    1d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d60:	0e 94 93 10 	call	0x2126	; 0x2126 <__unpack_f>
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	81 f1       	breq	.+96     	; 0x1dca <__fixsfsi+0x88>
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	70 f1       	brcs	.+92     	; 0x1dca <__fixsfsi+0x88>
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	21 f4       	brne	.+8      	; 0x1d7a <__fixsfsi+0x38>
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	88 23       	and	r24, r24
    1d76:	69 f1       	breq	.+90     	; 0x1dd2 <__fixsfsi+0x90>
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <__fixsfsi+0x4c>
    1d7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d7c:	38 85       	ldd	r19, Y+8	; 0x08
    1d7e:	37 fd       	sbrc	r19, 7
    1d80:	24 c0       	rjmp	.+72     	; 0x1dca <__fixsfsi+0x88>
    1d82:	6e 81       	ldd	r22, Y+6	; 0x06
    1d84:	2f 31       	cpi	r18, 0x1F	; 31
    1d86:	31 05       	cpc	r19, r1
    1d88:	3c f0       	brlt	.+14     	; 0x1d98 <__fixsfsi+0x56>
    1d8a:	66 23       	and	r22, r22
    1d8c:	11 f1       	breq	.+68     	; 0x1dd2 <__fixsfsi+0x90>
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e8       	ldi	r21, 0x80	; 128
    1d96:	21 c0       	rjmp	.+66     	; 0x1dda <__fixsfsi+0x98>
    1d98:	8e e1       	ldi	r24, 0x1E	; 30
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	82 1b       	sub	r24, r18
    1d9e:	93 0b       	sbc	r25, r19
    1da0:	29 85       	ldd	r18, Y+9	; 0x09
    1da2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1da4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1da6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <__fixsfsi+0x70>
    1daa:	56 95       	lsr	r21
    1dac:	47 95       	ror	r20
    1dae:	37 95       	ror	r19
    1db0:	27 95       	ror	r18
    1db2:	8a 95       	dec	r24
    1db4:	d2 f7       	brpl	.-12     	; 0x1daa <__fixsfsi+0x68>
    1db6:	66 23       	and	r22, r22
    1db8:	81 f0       	breq	.+32     	; 0x1dda <__fixsfsi+0x98>
    1dba:	50 95       	com	r21
    1dbc:	40 95       	com	r20
    1dbe:	30 95       	com	r19
    1dc0:	21 95       	neg	r18
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <__fixsfsi+0x98>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <__fixsfsi+0x98>
    1dd2:	2f ef       	ldi	r18, 0xFF	; 255
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f ef       	ldi	r20, 0xFF	; 255
    1dd8:	5f e7       	ldi	r21, 0x7F	; 127
    1dda:	b9 01       	movw	r22, r18
    1ddc:	ca 01       	movw	r24, r20
    1dde:	2c 96       	adiw	r28, 0x0c	; 12
    1de0:	e2 e0       	ldi	r30, 0x02	; 2
    1de2:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x20>

00001de6 <__floatunsisf>:
    1de6:	a8 e0       	ldi	r26, 0x08	; 8
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 ef       	ldi	r30, 0xF9	; 249
    1dec:	fe e0       	ldi	r31, 0x0E	; 14
    1dee:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__prologue_saves__+0x14>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	1a 82       	std	Y+2, r1	; 0x02
    1df8:	61 15       	cp	r22, r1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	81 05       	cpc	r24, r1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	19 f4       	brne	.+6      	; 0x1e08 <__floatunsisf+0x22>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	5f c0       	rjmp	.+190    	; 0x1ec6 <__floatunsisf+0xe0>
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	8e e1       	ldi	r24, 0x1E	; 30
    1e0e:	c8 2e       	mov	r12, r24
    1e10:	d1 2c       	mov	r13, r1
    1e12:	cb 82       	std	Y+3, r12	; 0x03
    1e14:	dc 82       	std	Y+4, r13	; 0x04
    1e16:	ed 82       	std	Y+5, r14	; 0x05
    1e18:	fe 82       	std	Y+6, r15	; 0x06
    1e1a:	0f 83       	std	Y+7, r16	; 0x07
    1e1c:	18 87       	std	Y+8, r17	; 0x08
    1e1e:	c8 01       	movw	r24, r16
    1e20:	b7 01       	movw	r22, r14
    1e22:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__clzsi2>
    1e26:	fc 01       	movw	r30, r24
    1e28:	31 97       	sbiw	r30, 0x01	; 1
    1e2a:	f7 ff       	sbrs	r31, 7
    1e2c:	3a c0       	rjmp	.+116    	; 0x1ea2 <__floatunsisf+0xbc>
    1e2e:	aa 27       	eor	r26, r26
    1e30:	bb 27       	eor	r27, r27
    1e32:	ae 1b       	sub	r26, r30
    1e34:	bf 0b       	sbc	r27, r31
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0a 2e       	mov	r0, r26
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <__floatunsisf+0x64>
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	0a 94       	dec	r0
    1e4c:	d2 f7       	brpl	.-12     	; 0x1e42 <__floatunsisf+0x5c>
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	30 40       	sbci	r19, 0x00	; 0
    1e52:	40 40       	sbci	r20, 0x00	; 0
    1e54:	50 40       	sbci	r21, 0x00	; 0
    1e56:	2e 21       	and	r18, r14
    1e58:	3f 21       	and	r19, r15
    1e5a:	40 23       	and	r20, r16
    1e5c:	51 23       	and	r21, r17
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	41 05       	cpc	r20, r1
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	19 f4       	brne	.+6      	; 0x1e76 <__floatunsisf+0x90>
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	cb 01       	movw	r24, r22
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <__floatunsisf+0x9a>
    1e78:	16 95       	lsr	r17
    1e7a:	07 95       	ror	r16
    1e7c:	f7 94       	ror	r15
    1e7e:	e7 94       	ror	r14
    1e80:	aa 95       	dec	r26
    1e82:	d2 f7       	brpl	.-12     	; 0x1e78 <__floatunsisf+0x92>
    1e84:	e6 2a       	or	r14, r22
    1e86:	f7 2a       	or	r15, r23
    1e88:	08 2b       	or	r16, r24
    1e8a:	19 2b       	or	r17, r25
    1e8c:	ed 82       	std	Y+5, r14	; 0x05
    1e8e:	fe 82       	std	Y+6, r15	; 0x06
    1e90:	0f 83       	std	Y+7, r16	; 0x07
    1e92:	18 87       	std	Y+8, r17	; 0x08
    1e94:	8e e1       	ldi	r24, 0x1E	; 30
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	8e 1b       	sub	r24, r30
    1e9a:	9f 0b       	sbc	r25, r31
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	9c 83       	std	Y+4, r25	; 0x04
    1ea0:	12 c0       	rjmp	.+36     	; 0x1ec6 <__floatunsisf+0xe0>
    1ea2:	30 97       	sbiw	r30, 0x00	; 0
    1ea4:	81 f0       	breq	.+32     	; 0x1ec6 <__floatunsisf+0xe0>
    1ea6:	0e 2e       	mov	r0, r30
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <__floatunsisf+0xcc>
    1eaa:	ee 0c       	add	r14, r14
    1eac:	ff 1c       	adc	r15, r15
    1eae:	00 1f       	adc	r16, r16
    1eb0:	11 1f       	adc	r17, r17
    1eb2:	0a 94       	dec	r0
    1eb4:	d2 f7       	brpl	.-12     	; 0x1eaa <__floatunsisf+0xc4>
    1eb6:	ed 82       	std	Y+5, r14	; 0x05
    1eb8:	fe 82       	std	Y+6, r15	; 0x06
    1eba:	0f 83       	std	Y+7, r16	; 0x07
    1ebc:	18 87       	std	Y+8, r17	; 0x08
    1ebe:	ce 1a       	sub	r12, r30
    1ec0:	df 0a       	sbc	r13, r31
    1ec2:	cb 82       	std	Y+3, r12	; 0x03
    1ec4:	dc 82       	std	Y+4, r13	; 0x04
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__pack_f>
    1ece:	28 96       	adiw	r28, 0x08	; 8
    1ed0:	e8 e0       	ldi	r30, 0x08	; 8
    1ed2:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__epilogue_restores__+0x14>

00001ed6 <__clzsi2>:
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	7b 01       	movw	r14, r22
    1ee8:	8c 01       	movw	r16, r24
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	e8 16       	cp	r14, r24
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	f8 06       	cpc	r15, r24
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	08 07       	cpc	r16, r24
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	18 07       	cpc	r17, r24
    1efa:	58 f4       	brcc	.+22     	; 0x1f12 <__clzsi2+0x3c>
    1efc:	ef ef       	ldi	r30, 0xFF	; 255
    1efe:	ee 16       	cp	r14, r30
    1f00:	f1 04       	cpc	r15, r1
    1f02:	01 05       	cpc	r16, r1
    1f04:	11 05       	cpc	r17, r1
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <__clzsi2+0x34>
    1f08:	90 f4       	brcc	.+36     	; 0x1f2e <__clzsi2+0x58>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	dc 01       	movw	r26, r24
    1f10:	17 c0       	rjmp	.+46     	; 0x1f40 <__clzsi2+0x6a>
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	ef 16       	cp	r14, r31
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	ff 06       	cpc	r15, r31
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	0f 07       	cpc	r16, r31
    1f1e:	f1 e0       	ldi	r31, 0x01	; 1
    1f20:	1f 07       	cpc	r17, r31
    1f22:	50 f4       	brcc	.+20     	; 0x1f38 <__clzsi2+0x62>
    1f24:	80 e1       	ldi	r24, 0x10	; 16
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	09 c0       	rjmp	.+18     	; 0x1f40 <__clzsi2+0x6a>
    1f2e:	88 e0       	ldi	r24, 0x08	; 8
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <__clzsi2+0x6a>
    1f38:	88 e1       	ldi	r24, 0x18	; 24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e0       	ldi	r26, 0x00	; 0
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	20 e2       	ldi	r18, 0x20	; 32
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	28 1b       	sub	r18, r24
    1f4a:	39 0b       	sbc	r19, r25
    1f4c:	4a 0b       	sbc	r20, r26
    1f4e:	5b 0b       	sbc	r21, r27
    1f50:	57 01       	movw	r10, r14
    1f52:	68 01       	movw	r12, r16
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <__clzsi2+0x88>
    1f56:	d6 94       	lsr	r13
    1f58:	c7 94       	ror	r12
    1f5a:	b7 94       	ror	r11
    1f5c:	a7 94       	ror	r10
    1f5e:	8a 95       	dec	r24
    1f60:	d2 f7       	brpl	.-12     	; 0x1f56 <__clzsi2+0x80>
    1f62:	d6 01       	movw	r26, r12
    1f64:	c5 01       	movw	r24, r10
    1f66:	88 5e       	subi	r24, 0xE8	; 232
    1f68:	9f 4d       	sbci	r25, 0xDF	; 223
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	80 81       	ld	r24, Z
    1f6e:	28 1b       	sub	r18, r24
    1f70:	31 09       	sbc	r19, r1
    1f72:	41 09       	sbc	r20, r1
    1f74:	51 09       	sbc	r21, r1
    1f76:	c9 01       	movw	r24, r18
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	08 95       	ret

00001f8a <__pack_f>:
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	fc 01       	movw	r30, r24
    1f98:	24 81       	ldd	r18, Z+4	; 0x04
    1f9a:	35 81       	ldd	r19, Z+5	; 0x05
    1f9c:	46 81       	ldd	r20, Z+6	; 0x06
    1f9e:	57 81       	ldd	r21, Z+7	; 0x07
    1fa0:	61 81       	ldd	r22, Z+1	; 0x01
    1fa2:	80 81       	ld	r24, Z
    1fa4:	82 30       	cpi	r24, 0x02	; 2
    1fa6:	20 f4       	brcc	.+8      	; 0x1fb0 <__pack_f+0x26>
    1fa8:	40 61       	ori	r20, 0x10	; 16
    1faa:	ef ef       	ldi	r30, 0xFF	; 255
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	a3 c0       	rjmp	.+326    	; 0x20f6 <__pack_f+0x16c>
    1fb0:	84 30       	cpi	r24, 0x04	; 4
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <__pack_f+0x2c>
    1fb4:	9b c0       	rjmp	.+310    	; 0x20ec <__pack_f+0x162>
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <__pack_f+0x32>
    1fba:	92 c0       	rjmp	.+292    	; 0x20e0 <__pack_f+0x156>
    1fbc:	21 15       	cp	r18, r1
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	41 05       	cpc	r20, r1
    1fc2:	51 05       	cpc	r21, r1
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <__pack_f+0x3e>
    1fc6:	8f c0       	rjmp	.+286    	; 0x20e6 <__pack_f+0x15c>
    1fc8:	02 80       	ldd	r0, Z+2	; 0x02
    1fca:	f3 81       	ldd	r31, Z+3	; 0x03
    1fcc:	e0 2d       	mov	r30, r0
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	e2 38       	cpi	r30, 0x82	; 130
    1fd2:	f8 07       	cpc	r31, r24
    1fd4:	0c f0       	brlt	.+2      	; 0x1fd8 <__pack_f+0x4e>
    1fd6:	5a c0       	rjmp	.+180    	; 0x208c <__pack_f+0x102>
    1fd8:	c2 e8       	ldi	r28, 0x82	; 130
    1fda:	df ef       	ldi	r29, 0xFF	; 255
    1fdc:	ce 1b       	sub	r28, r30
    1fde:	df 0b       	sbc	r29, r31
    1fe0:	ca 31       	cpi	r28, 0x1A	; 26
    1fe2:	d1 05       	cpc	r29, r1
    1fe4:	6c f5       	brge	.+90     	; 0x2040 <__pack_f+0xb6>
    1fe6:	79 01       	movw	r14, r18
    1fe8:	8a 01       	movw	r16, r20
    1fea:	0c 2e       	mov	r0, r28
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <__pack_f+0x6c>
    1fee:	16 95       	lsr	r17
    1ff0:	07 95       	ror	r16
    1ff2:	f7 94       	ror	r15
    1ff4:	e7 94       	ror	r14
    1ff6:	0a 94       	dec	r0
    1ff8:	d2 f7       	brpl	.-12     	; 0x1fee <__pack_f+0x64>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	0c 2e       	mov	r0, r28
    2004:	04 c0       	rjmp	.+8      	; 0x200e <__pack_f+0x84>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	aa 1f       	adc	r26, r26
    200c:	bb 1f       	adc	r27, r27
    200e:	0a 94       	dec	r0
    2010:	d2 f7       	brpl	.-12     	; 0x2006 <__pack_f+0x7c>
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	a1 09       	sbc	r26, r1
    2016:	b1 09       	sbc	r27, r1
    2018:	82 23       	and	r24, r18
    201a:	93 23       	and	r25, r19
    201c:	a4 23       	and	r26, r20
    201e:	b5 23       	and	r27, r21
    2020:	21 e0       	ldi	r18, 0x01	; 1
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	a1 05       	cpc	r26, r1
    202c:	b1 05       	cpc	r27, r1
    202e:	19 f4       	brne	.+6      	; 0x2036 <__pack_f+0xac>
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	a9 01       	movw	r20, r18
    2036:	2e 29       	or	r18, r14
    2038:	3f 29       	or	r19, r15
    203a:	40 2b       	or	r20, r16
    203c:	51 2b       	or	r21, r17
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <__pack_f+0xbc>
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	a9 01       	movw	r20, r18
    2046:	da 01       	movw	r26, r20
    2048:	c9 01       	movw	r24, r18
    204a:	8f 77       	andi	r24, 0x7F	; 127
    204c:	90 70       	andi	r25, 0x00	; 0
    204e:	a0 70       	andi	r26, 0x00	; 0
    2050:	b0 70       	andi	r27, 0x00	; 0
    2052:	80 34       	cpi	r24, 0x40	; 64
    2054:	91 05       	cpc	r25, r1
    2056:	a1 05       	cpc	r26, r1
    2058:	b1 05       	cpc	r27, r1
    205a:	39 f4       	brne	.+14     	; 0x206a <__pack_f+0xe0>
    205c:	27 ff       	sbrs	r18, 7
    205e:	09 c0       	rjmp	.+18     	; 0x2072 <__pack_f+0xe8>
    2060:	20 5c       	subi	r18, 0xC0	; 192
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	4f 4f       	sbci	r20, 0xFF	; 255
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <__pack_f+0xe8>
    206a:	21 5c       	subi	r18, 0xC1	; 193
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	4f 4f       	sbci	r20, 0xFF	; 255
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	e1 e0       	ldi	r30, 0x01	; 1
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	20 30       	cpi	r18, 0x00	; 0
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	38 07       	cpc	r19, r24
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	48 07       	cpc	r20, r24
    2080:	80 e4       	ldi	r24, 0x40	; 64
    2082:	58 07       	cpc	r21, r24
    2084:	28 f5       	brcc	.+74     	; 0x20d0 <__pack_f+0x146>
    2086:	e0 e0       	ldi	r30, 0x00	; 0
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	22 c0       	rjmp	.+68     	; 0x20d0 <__pack_f+0x146>
    208c:	e0 38       	cpi	r30, 0x80	; 128
    208e:	f1 05       	cpc	r31, r1
    2090:	6c f5       	brge	.+90     	; 0x20ec <__pack_f+0x162>
    2092:	e1 58       	subi	r30, 0x81	; 129
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	da 01       	movw	r26, r20
    2098:	c9 01       	movw	r24, r18
    209a:	8f 77       	andi	r24, 0x7F	; 127
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	a0 70       	andi	r26, 0x00	; 0
    20a0:	b0 70       	andi	r27, 0x00	; 0
    20a2:	80 34       	cpi	r24, 0x40	; 64
    20a4:	91 05       	cpc	r25, r1
    20a6:	a1 05       	cpc	r26, r1
    20a8:	b1 05       	cpc	r27, r1
    20aa:	39 f4       	brne	.+14     	; 0x20ba <__pack_f+0x130>
    20ac:	27 ff       	sbrs	r18, 7
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <__pack_f+0x138>
    20b0:	20 5c       	subi	r18, 0xC0	; 192
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	4f 4f       	sbci	r20, 0xFF	; 255
    20b6:	5f 4f       	sbci	r21, 0xFF	; 255
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <__pack_f+0x138>
    20ba:	21 5c       	subi	r18, 0xC1	; 193
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	4f 4f       	sbci	r20, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	57 ff       	sbrs	r21, 7
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <__pack_f+0x146>
    20c6:	56 95       	lsr	r21
    20c8:	47 95       	ror	r20
    20ca:	37 95       	ror	r19
    20cc:	27 95       	ror	r18
    20ce:	31 96       	adiw	r30, 0x01	; 1
    20d0:	87 e0       	ldi	r24, 0x07	; 7
    20d2:	56 95       	lsr	r21
    20d4:	47 95       	ror	r20
    20d6:	37 95       	ror	r19
    20d8:	27 95       	ror	r18
    20da:	8a 95       	dec	r24
    20dc:	d1 f7       	brne	.-12     	; 0x20d2 <__pack_f+0x148>
    20de:	0b c0       	rjmp	.+22     	; 0x20f6 <__pack_f+0x16c>
    20e0:	e0 e0       	ldi	r30, 0x00	; 0
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <__pack_f+0x166>
    20e6:	e0 e0       	ldi	r30, 0x00	; 0
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <__pack_f+0x16c>
    20ec:	ef ef       	ldi	r30, 0xFF	; 255
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	8e 2f       	mov	r24, r30
    20f8:	87 95       	ror	r24
    20fa:	88 27       	eor	r24, r24
    20fc:	87 95       	ror	r24
    20fe:	94 2f       	mov	r25, r20
    2100:	9f 77       	andi	r25, 0x7F	; 127
    2102:	67 95       	ror	r22
    2104:	66 27       	eor	r22, r22
    2106:	67 95       	ror	r22
    2108:	e6 95       	lsr	r30
    210a:	e2 2e       	mov	r14, r18
    210c:	a9 2f       	mov	r26, r25
    210e:	a8 2b       	or	r26, r24
    2110:	fe 2f       	mov	r31, r30
    2112:	f6 2b       	or	r31, r22
    2114:	62 2f       	mov	r22, r18
    2116:	73 2f       	mov	r23, r19
    2118:	8a 2f       	mov	r24, r26
    211a:	9f 2f       	mov	r25, r31
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	e6 e0       	ldi	r30, 0x06	; 6
    2122:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x18>

00002126 <__unpack_f>:
    2126:	dc 01       	movw	r26, r24
    2128:	fb 01       	movw	r30, r22
    212a:	2c 91       	ld	r18, X
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	3c 91       	ld	r19, X
    2130:	11 97       	sbiw	r26, 0x01	; 1
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	8c 91       	ld	r24, X
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	48 2f       	mov	r20, r24
    213a:	4f 77       	andi	r20, 0x7F	; 127
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	98 2f       	mov	r25, r24
    2140:	99 1f       	adc	r25, r25
    2142:	99 27       	eor	r25, r25
    2144:	99 1f       	adc	r25, r25
    2146:	13 96       	adiw	r26, 0x03	; 3
    2148:	6c 91       	ld	r22, X
    214a:	13 97       	sbiw	r26, 0x03	; 3
    214c:	86 2f       	mov	r24, r22
    214e:	88 0f       	add	r24, r24
    2150:	89 2b       	or	r24, r25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	66 1f       	adc	r22, r22
    2156:	66 27       	eor	r22, r22
    2158:	66 1f       	adc	r22, r22
    215a:	61 83       	std	Z+1, r22	; 0x01
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	39 f5       	brne	.+78     	; 0x21ae <__unpack_f+0x88>
    2160:	21 15       	cp	r18, r1
    2162:	31 05       	cpc	r19, r1
    2164:	41 05       	cpc	r20, r1
    2166:	51 05       	cpc	r21, r1
    2168:	11 f4       	brne	.+4      	; 0x216e <__unpack_f+0x48>
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	29 c0       	rjmp	.+82     	; 0x21c0 <__unpack_f+0x9a>
    216e:	82 e8       	ldi	r24, 0x82	; 130
    2170:	9f ef       	ldi	r25, 0xFF	; 255
    2172:	82 83       	std	Z+2, r24	; 0x02
    2174:	93 83       	std	Z+3, r25	; 0x03
    2176:	67 e0       	ldi	r22, 0x07	; 7
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	44 1f       	adc	r20, r20
    217e:	55 1f       	adc	r21, r21
    2180:	6a 95       	dec	r22
    2182:	d1 f7       	brne	.-12     	; 0x2178 <__unpack_f+0x52>
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	80 83       	st	Z, r24
    2188:	09 c0       	rjmp	.+18     	; 0x219c <__unpack_f+0x76>
    218a:	22 0f       	add	r18, r18
    218c:	33 1f       	adc	r19, r19
    218e:	44 1f       	adc	r20, r20
    2190:	55 1f       	adc	r21, r21
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	82 83       	std	Z+2, r24	; 0x02
    219a:	93 83       	std	Z+3, r25	; 0x03
    219c:	20 30       	cpi	r18, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	38 07       	cpc	r19, r24
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	48 07       	cpc	r20, r24
    21a6:	80 e4       	ldi	r24, 0x40	; 64
    21a8:	58 07       	cpc	r21, r24
    21aa:	78 f3       	brcs	.-34     	; 0x218a <__unpack_f+0x64>
    21ac:	20 c0       	rjmp	.+64     	; 0x21ee <__unpack_f+0xc8>
    21ae:	8f 3f       	cpi	r24, 0xFF	; 255
    21b0:	91 05       	cpc	r25, r1
    21b2:	79 f4       	brne	.+30     	; 0x21d2 <__unpack_f+0xac>
    21b4:	21 15       	cp	r18, r1
    21b6:	31 05       	cpc	r19, r1
    21b8:	41 05       	cpc	r20, r1
    21ba:	51 05       	cpc	r21, r1
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <__unpack_f+0x9e>
    21be:	84 e0       	ldi	r24, 0x04	; 4
    21c0:	80 83       	st	Z, r24
    21c2:	08 95       	ret
    21c4:	44 ff       	sbrs	r20, 4
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <__unpack_f+0xa8>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 83       	st	Z, r24
    21cc:	10 c0       	rjmp	.+32     	; 0x21ee <__unpack_f+0xc8>
    21ce:	10 82       	st	Z, r1
    21d0:	0e c0       	rjmp	.+28     	; 0x21ee <__unpack_f+0xc8>
    21d2:	8f 57       	subi	r24, 0x7F	; 127
    21d4:	90 40       	sbci	r25, 0x00	; 0
    21d6:	82 83       	std	Z+2, r24	; 0x02
    21d8:	93 83       	std	Z+3, r25	; 0x03
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	80 83       	st	Z, r24
    21de:	87 e0       	ldi	r24, 0x07	; 7
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	44 1f       	adc	r20, r20
    21e6:	55 1f       	adc	r21, r21
    21e8:	8a 95       	dec	r24
    21ea:	d1 f7       	brne	.-12     	; 0x21e0 <__unpack_f+0xba>
    21ec:	50 64       	ori	r21, 0x40	; 64
    21ee:	24 83       	std	Z+4, r18	; 0x04
    21f0:	35 83       	std	Z+5, r19	; 0x05
    21f2:	46 83       	std	Z+6, r20	; 0x06
    21f4:	57 83       	std	Z+7, r21	; 0x07
    21f6:	08 95       	ret

000021f8 <__fpcmp_parts_f>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	db 01       	movw	r26, r22
    21fc:	90 81       	ld	r25, Z
    21fe:	92 30       	cpi	r25, 0x02	; 2
    2200:	08 f4       	brcc	.+2      	; 0x2204 <__fpcmp_parts_f+0xc>
    2202:	49 c0       	rjmp	.+146    	; 0x2296 <__fpcmp_parts_f+0x9e>
    2204:	8c 91       	ld	r24, X
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	08 f4       	brcc	.+2      	; 0x220c <__fpcmp_parts_f+0x14>
    220a:	45 c0       	rjmp	.+138    	; 0x2296 <__fpcmp_parts_f+0x9e>
    220c:	94 30       	cpi	r25, 0x04	; 4
    220e:	51 f4       	brne	.+20     	; 0x2224 <__fpcmp_parts_f+0x2c>
    2210:	61 81       	ldd	r22, Z+1	; 0x01
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	b1 f5       	brne	.+108    	; 0x2282 <__fpcmp_parts_f+0x8a>
    2216:	11 96       	adiw	r26, 0x01	; 1
    2218:	2c 91       	ld	r18, X
    221a:	11 97       	sbiw	r26, 0x01	; 1
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	26 1b       	sub	r18, r22
    2220:	31 09       	sbc	r19, r1
    2222:	41 c0       	rjmp	.+130    	; 0x22a6 <__fpcmp_parts_f+0xae>
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	21 f0       	breq	.+8      	; 0x2230 <__fpcmp_parts_f+0x38>
    2228:	92 30       	cpi	r25, 0x02	; 2
    222a:	41 f4       	brne	.+16     	; 0x223c <__fpcmp_parts_f+0x44>
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	b1 f1       	breq	.+108    	; 0x229c <__fpcmp_parts_f+0xa4>
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	8c 91       	ld	r24, X
    2234:	11 97       	sbiw	r26, 0x01	; 1
    2236:	88 23       	and	r24, r24
    2238:	a1 f1       	breq	.+104    	; 0x22a2 <__fpcmp_parts_f+0xaa>
    223a:	2d c0       	rjmp	.+90     	; 0x2296 <__fpcmp_parts_f+0x9e>
    223c:	61 81       	ldd	r22, Z+1	; 0x01
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	01 f1       	breq	.+64     	; 0x2282 <__fpcmp_parts_f+0x8a>
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	8c 91       	ld	r24, X
    2246:	11 97       	sbiw	r26, 0x01	; 1
    2248:	68 17       	cp	r22, r24
    224a:	d9 f4       	brne	.+54     	; 0x2282 <__fpcmp_parts_f+0x8a>
    224c:	22 81       	ldd	r18, Z+2	; 0x02
    224e:	33 81       	ldd	r19, Z+3	; 0x03
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	8d 91       	ld	r24, X+
    2254:	9c 91       	ld	r25, X
    2256:	13 97       	sbiw	r26, 0x03	; 3
    2258:	82 17       	cp	r24, r18
    225a:	93 07       	cpc	r25, r19
    225c:	94 f0       	brlt	.+36     	; 0x2282 <__fpcmp_parts_f+0x8a>
    225e:	28 17       	cp	r18, r24
    2260:	39 07       	cpc	r19, r25
    2262:	bc f0       	brlt	.+46     	; 0x2292 <__fpcmp_parts_f+0x9a>
    2264:	24 81       	ldd	r18, Z+4	; 0x04
    2266:	35 81       	ldd	r19, Z+5	; 0x05
    2268:	46 81       	ldd	r20, Z+6	; 0x06
    226a:	57 81       	ldd	r21, Z+7	; 0x07
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	8d 91       	ld	r24, X+
    2270:	9d 91       	ld	r25, X+
    2272:	0d 90       	ld	r0, X+
    2274:	bc 91       	ld	r27, X
    2276:	a0 2d       	mov	r26, r0
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	a4 07       	cpc	r26, r20
    227e:	b5 07       	cpc	r27, r21
    2280:	18 f4       	brcc	.+6      	; 0x2288 <__fpcmp_parts_f+0x90>
    2282:	66 23       	and	r22, r22
    2284:	41 f0       	breq	.+16     	; 0x2296 <__fpcmp_parts_f+0x9e>
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <__fpcmp_parts_f+0xaa>
    2288:	28 17       	cp	r18, r24
    228a:	39 07       	cpc	r19, r25
    228c:	4a 07       	cpc	r20, r26
    228e:	5b 07       	cpc	r21, r27
    2290:	28 f4       	brcc	.+10     	; 0x229c <__fpcmp_parts_f+0xa4>
    2292:	66 23       	and	r22, r22
    2294:	31 f0       	breq	.+12     	; 0x22a2 <__fpcmp_parts_f+0xaa>
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	05 c0       	rjmp	.+10     	; 0x22a6 <__fpcmp_parts_f+0xae>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <__fpcmp_parts_f+0xae>
    22a2:	2f ef       	ldi	r18, 0xFF	; 255
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	c9 01       	movw	r24, r18
    22a8:	08 95       	ret

000022aa <__udivmodhi4>:
    22aa:	aa 1b       	sub	r26, r26
    22ac:	bb 1b       	sub	r27, r27
    22ae:	51 e1       	ldi	r21, 0x11	; 17
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <__udivmodhi4_ep>

000022b2 <__udivmodhi4_loop>:
    22b2:	aa 1f       	adc	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	a6 17       	cp	r26, r22
    22b8:	b7 07       	cpc	r27, r23
    22ba:	10 f0       	brcs	.+4      	; 0x22c0 <__udivmodhi4_ep>
    22bc:	a6 1b       	sub	r26, r22
    22be:	b7 0b       	sbc	r27, r23

000022c0 <__udivmodhi4_ep>:
    22c0:	88 1f       	adc	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	5a 95       	dec	r21
    22c6:	a9 f7       	brne	.-22     	; 0x22b2 <__udivmodhi4_loop>
    22c8:	80 95       	com	r24
    22ca:	90 95       	com	r25
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	08 95       	ret

000022d2 <__divmodhi4>:
    22d2:	97 fb       	bst	r25, 7
    22d4:	09 2e       	mov	r0, r25
    22d6:	07 26       	eor	r0, r23
    22d8:	0a d0       	rcall	.+20     	; 0x22ee <__divmodhi4_neg1>
    22da:	77 fd       	sbrc	r23, 7
    22dc:	04 d0       	rcall	.+8      	; 0x22e6 <__divmodhi4_neg2>
    22de:	e5 df       	rcall	.-54     	; 0x22aa <__udivmodhi4>
    22e0:	06 d0       	rcall	.+12     	; 0x22ee <__divmodhi4_neg1>
    22e2:	00 20       	and	r0, r0
    22e4:	1a f4       	brpl	.+6      	; 0x22ec <__divmodhi4_exit>

000022e6 <__divmodhi4_neg2>:
    22e6:	70 95       	com	r23
    22e8:	61 95       	neg	r22
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255

000022ec <__divmodhi4_exit>:
    22ec:	08 95       	ret

000022ee <__divmodhi4_neg1>:
    22ee:	f6 f7       	brtc	.-4      	; 0x22ec <__divmodhi4_exit>
    22f0:	90 95       	com	r25
    22f2:	81 95       	neg	r24
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	08 95       	ret

000022f8 <__udivmodsi4>:
    22f8:	a1 e2       	ldi	r26, 0x21	; 33
    22fa:	1a 2e       	mov	r1, r26
    22fc:	aa 1b       	sub	r26, r26
    22fe:	bb 1b       	sub	r27, r27
    2300:	fd 01       	movw	r30, r26
    2302:	0d c0       	rjmp	.+26     	; 0x231e <__udivmodsi4_ep>

00002304 <__udivmodsi4_loop>:
    2304:	aa 1f       	adc	r26, r26
    2306:	bb 1f       	adc	r27, r27
    2308:	ee 1f       	adc	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	a2 17       	cp	r26, r18
    230e:	b3 07       	cpc	r27, r19
    2310:	e4 07       	cpc	r30, r20
    2312:	f5 07       	cpc	r31, r21
    2314:	20 f0       	brcs	.+8      	; 0x231e <__udivmodsi4_ep>
    2316:	a2 1b       	sub	r26, r18
    2318:	b3 0b       	sbc	r27, r19
    231a:	e4 0b       	sbc	r30, r20
    231c:	f5 0b       	sbc	r31, r21

0000231e <__udivmodsi4_ep>:
    231e:	66 1f       	adc	r22, r22
    2320:	77 1f       	adc	r23, r23
    2322:	88 1f       	adc	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	1a 94       	dec	r1
    2328:	69 f7       	brne	.-38     	; 0x2304 <__udivmodsi4_loop>
    232a:	60 95       	com	r22
    232c:	70 95       	com	r23
    232e:	80 95       	com	r24
    2330:	90 95       	com	r25
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	bd 01       	movw	r22, r26
    2338:	cf 01       	movw	r24, r30
    233a:	08 95       	ret

0000233c <__prologue_saves__>:
    233c:	2f 92       	push	r2
    233e:	3f 92       	push	r3
    2340:	4f 92       	push	r4
    2342:	5f 92       	push	r5
    2344:	6f 92       	push	r6
    2346:	7f 92       	push	r7
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	ca 1b       	sub	r28, r26
    2366:	db 0b       	sbc	r29, r27
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	09 94       	ijmp

0000236e <__epilogue_restores__>:
    236e:	2a 88       	ldd	r2, Y+18	; 0x12
    2370:	39 88       	ldd	r3, Y+17	; 0x11
    2372:	48 88       	ldd	r4, Y+16	; 0x10
    2374:	5f 84       	ldd	r5, Y+15	; 0x0f
    2376:	6e 84       	ldd	r6, Y+14	; 0x0e
    2378:	7d 84       	ldd	r7, Y+13	; 0x0d
    237a:	8c 84       	ldd	r8, Y+12	; 0x0c
    237c:	9b 84       	ldd	r9, Y+11	; 0x0b
    237e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2380:	b9 84       	ldd	r11, Y+9	; 0x09
    2382:	c8 84       	ldd	r12, Y+8	; 0x08
    2384:	df 80       	ldd	r13, Y+7	; 0x07
    2386:	ee 80       	ldd	r14, Y+6	; 0x06
    2388:	fd 80       	ldd	r15, Y+5	; 0x05
    238a:	0c 81       	ldd	r16, Y+4	; 0x04
    238c:	1b 81       	ldd	r17, Y+3	; 0x03
    238e:	aa 81       	ldd	r26, Y+2	; 0x02
    2390:	b9 81       	ldd	r27, Y+1	; 0x01
    2392:	ce 0f       	add	r28, r30
    2394:	d1 1d       	adc	r29, r1
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	ed 01       	movw	r28, r26
    239c:	08 95       	ret

0000239e <_exit>:
    239e:	f8 94       	cli

000023a0 <__stop_program>:
    23a0:	ff cf       	rjmp	.-2      	; 0x23a0 <__stop_program>
