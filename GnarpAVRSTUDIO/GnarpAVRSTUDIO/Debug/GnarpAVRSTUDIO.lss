
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00802000  00002e90  00002f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000225  0080215c  0080215c  00003080  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f8  00000000  00000000  000037d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c30  00000000  00000000  00003ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006912  00000000  00000000  000046f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020bd  00000000  00000000  0000b00b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d52  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a0  00000000  00000000  00010e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001adf  00000000  00000000  000116bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002888  00000000  00000000  0001319b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000d10  00000000  00000000  00015a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000108  00000000  00000000  00016733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e0 e9       	ldi	r30, 0x90	; 144
     18c:	fe e2       	ldi	r31, 0x2E	; 46
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ac 35       	cpi	r26, 0x5C	; 92
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	13 e2       	ldi	r17, 0x23	; 35
     19c:	ac e5       	ldi	r26, 0x5C	; 92
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 38       	cpi	r26, 0x81	; 129
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <main>
     1ae:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_play_list>:
*/
PlayList* get_play_list(){
	//return global play list pointer for use with all functions
	
	return &global_play_list;
}
     1b6:	8c e5       	ldi	r24, 0x5C	; 92
     1b8:	91 e2       	ldi	r25, 0x21	; 33
     1ba:	08 95       	ret

000001bc <get_note_from_play_list>:

Note* get_note_from_play_list(PlayList* play_list){
     1bc:	dc 01       	movw	r26, r24
	//set play status
	//return note to play
	
	if (play_list->count >= MAX_PLAY_NOTES)
     1be:	8c 91       	ld	r24, X
     1c0:	80 33       	cpi	r24, 0x30	; 48
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <get_note_from_play_list+0xa>
	    play_list->count = 0;
     1c4:	1c 92       	st	X, r1
	
	play_list->play_status = 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	12 96       	adiw	r26, 0x02	; 2
     1ca:	8c 93       	st	X, r24
     1cc:	12 97       	sbiw	r26, 0x02	; 2
	
	return play_list->notes[play_list->play_index];
     1ce:	11 96       	adiw	r26, 0x01	; 1
     1d0:	ec 91       	ld	r30, X
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	ee 0f       	add	r30, r30
     1d8:	ff 1f       	adc	r31, r31
     1da:	ea 0f       	add	r30, r26
     1dc:	fb 1f       	adc	r31, r27
}
     1de:	83 81       	ldd	r24, Z+3	; 0x03
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	08 95       	ret

000001e4 <initialize_play_list>:

void initialize_play_list(PlayList* play_list){
     1e4:	fc 01       	movw	r30, r24
     1e6:	dc 01       	movw	r26, r24
     1e8:	13 96       	adiw	r26, 0x03	; 3
     1ea:	80 e3       	ldi	r24, 0x30	; 48
	//reset the play list note pointers, counters, and flags
	
	uint8_t i;
	for (i = 0; i < MAX_PLAY_NOTES; i++)
	    play_list->notes[i] = NULL;
     1ec:	1d 92       	st	X+, r1
     1ee:	1d 92       	st	X+, r1
     1f0:	81 50       	subi	r24, 0x01	; 1

void initialize_play_list(PlayList* play_list){
	//reset the play list note pointers, counters, and flags
	
	uint8_t i;
	for (i = 0; i < MAX_PLAY_NOTES; i++)
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <initialize_play_list+0x8>
	    play_list->notes[i] = NULL;
	play_list->count = 0;
     1f4:	10 82       	st	Z, r1
	play_list->play_index = 0;
     1f6:	11 82       	std	Z+1, r1	; 0x01
	play_list->play_status = 0;
     1f8:	12 82       	std	Z+2, r1	; 0x02
}
     1fa:	08 95       	ret

000001fc <build_play_list>:
	
    initialize_note_list();
	initialize_play_list(get_play_list());
}

void build_play_list(PlayList* play_list, NoteList* note_list){
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	8c 01       	movw	r16, r24
     210:	eb 01       	movw	r28, r22
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
    Note* current_note;
	
	uint8_t note_list_size = note_list->count;
     212:	b8 80       	ld	r11, Y
	
    uint8_t i;
    uint8_t mirror = 0;


    switch(get_pot_value(0, 0, 4)){
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	44 e0       	ldi	r20, 0x04	; 4
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_pot_value>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	91 05       	cpc	r25, r1
     226:	d9 f1       	breq	.+118    	; 0x29e <build_play_list+0xa2>
     228:	83 30       	cpi	r24, 0x03	; 3
     22a:	91 05       	cpc	r25, r1
     22c:	38 f4       	brcc	.+14     	; 0x23c <build_play_list+0x40>
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	71 f0       	breq	.+28     	; 0x24e <build_play_list+0x52>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	91 05       	cpc	r25, r1
     236:	09 f0       	breq	.+2      	; 0x23a <build_play_list+0x3e>
     238:	7c c0       	rjmp	.+248    	; 0x332 <build_play_list+0x136>
     23a:	1d c0       	rjmp	.+58     	; 0x276 <build_play_list+0x7a>
     23c:	83 30       	cpi	r24, 0x03	; 3
     23e:	91 05       	cpc	r25, r1
     240:	09 f4       	brne	.+2      	; 0x244 <build_play_list+0x48>
     242:	41 c0       	rjmp	.+130    	; 0x2c6 <build_play_list+0xca>
     244:	84 30       	cpi	r24, 0x04	; 4
     246:	91 05       	cpc	r25, r1
     248:	09 f0       	breq	.+2      	; 0x24c <build_play_list+0x50>
     24a:	73 c0       	rjmp	.+230    	; 0x332 <build_play_list+0x136>
     24c:	50 c0       	rjmp	.+160    	; 0x2ee <build_play_list+0xf2>
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     24e:	aa 81       	ldd	r26, Y+2	; 0x02
     250:	bb 81       	ldd	r27, Y+3	; 0x03

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     252:	80 e0       	ldi	r24, 0x00	; 0


    switch(get_pot_value(0, 0, 4)){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     254:	0d c0       	rjmp	.+26     	; 0x270 <build_play_list+0x74>
				play_list->notes[play_list_index++] = current_note;
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	e0 0f       	add	r30, r16
     260:	f1 1f       	adc	r31, r17
     262:	a3 83       	std	Z+3, r26	; 0x03
     264:	b4 83       	std	Z+4, r27	; 0x04
     266:	8f 5f       	subi	r24, 0xFF	; 255


    switch(get_pot_value(0, 0, 4)){
        //Asc pitch
        case 0:
            for(current_note = note_list->head_pitch; current_note; current_note=current_note->next_note_by_pitch)
     268:	13 96       	adiw	r26, 0x03	; 3
     26a:	0d 90       	ld	r0, X+
     26c:	bc 91       	ld	r27, X
     26e:	a0 2d       	mov	r26, r0
     270:	10 97       	sbiw	r26, 0x00	; 0
     272:	89 f7       	brne	.-30     	; 0x256 <build_play_list+0x5a>
     274:	5f c0       	rjmp	.+190    	; 0x334 <build_play_list+0x138>
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     276:	ac 81       	ldd	r26, Y+4	; 0x04
     278:	bd 81       	ldd	r27, Y+5	; 0x05

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     27a:	80 e0       	ldi	r24, 0x00	; 0
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     27c:	0d c0       	rjmp	.+26     	; 0x298 <build_play_list+0x9c>
                play_list->notes[play_list_index++] = current_note;
     27e:	e8 2f       	mov	r30, r24
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e0 0f       	add	r30, r16
     288:	f1 1f       	adc	r31, r17
     28a:	a3 83       	std	Z+3, r26	; 0x03
     28c:	b4 83       	std	Z+4, r27	; 0x04
     28e:	8f 5f       	subi	r24, 0xFF	; 255
				play_list->notes[play_list_index++] = current_note;
            break;

        //Desc pitch
        case 1:
            for(current_note = note_list->tail_pitch; current_note; current_note=current_note->previous_note_by_pitch)
     290:	15 96       	adiw	r26, 0x05	; 5
     292:	0d 90       	ld	r0, X+
     294:	bc 91       	ld	r27, X
     296:	a0 2d       	mov	r26, r0
     298:	10 97       	sbiw	r26, 0x00	; 0
     29a:	89 f7       	brne	.-30     	; 0x27e <build_play_list+0x82>
     29c:	4b c0       	rjmp	.+150    	; 0x334 <build_play_list+0x138>
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     29e:	ae 81       	ldd	r26, Y+6	; 0x06
     2a0:	bf 81       	ldd	r27, Y+7	; 0x07

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <build_play_list+0xc4>
                play_list->notes[play_list_index++] = current_note;
     2a6:	e8 2f       	mov	r30, r24
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	e0 0f       	add	r30, r16
     2b0:	f1 1f       	adc	r31, r17
     2b2:	a3 83       	std	Z+3, r26	; 0x03
     2b4:	b4 83       	std	Z+4, r27	; 0x04
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
                play_list->notes[play_list_index++] = current_note;
            break;

        //Asc trigger
        case 2:
            for(current_note = note_list->head_trigger; current_note; current_note=current_note->next_note_by_trigger)
     2b8:	17 96       	adiw	r26, 0x07	; 7
     2ba:	0d 90       	ld	r0, X+
     2bc:	bc 91       	ld	r27, X
     2be:	a0 2d       	mov	r26, r0
     2c0:	10 97       	sbiw	r26, 0x00	; 0
     2c2:	89 f7       	brne	.-30     	; 0x2a6 <build_play_list+0xaa>
     2c4:	37 c0       	rjmp	.+110    	; 0x334 <build_play_list+0x138>
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     2c6:	a8 85       	ldd	r26, Y+8	; 0x08
     2c8:	b9 85       	ldd	r27, Y+9	; 0x09

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <build_play_list+0xec>
                play_list->notes[play_list_index++] = current_note;
     2ce:	e8 2f       	mov	r30, r24
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	e0 0f       	add	r30, r16
     2d8:	f1 1f       	adc	r31, r17
     2da:	a3 83       	std	Z+3, r26	; 0x03
     2dc:	b4 83       	std	Z+4, r27	; 0x04
     2de:	8f 5f       	subi	r24, 0xFF	; 255
                play_list->notes[play_list_index++] = current_note;
            break;

        //Desc trigger
        case 3:
            for(current_note = note_list->tail_trigger; current_note; current_note=current_note->previous_note_by_trigger)
     2e0:	19 96       	adiw	r26, 0x09	; 9
     2e2:	0d 90       	ld	r0, X+
     2e4:	bc 91       	ld	r27, X
     2e6:	a0 2d       	mov	r26, r0
     2e8:	10 97       	sbiw	r26, 0x00	; 0
     2ea:	89 f7       	brne	.-30     	; 0x2ce <build_play_list+0xd2>
     2ec:	23 c0       	rjmp	.+70     	; 0x334 <build_play_list+0x138>
     2ee:	78 01       	movw	r14, r16
	
    uint8_t i;
    uint8_t mirror = 0;


    switch(get_pot_value(0, 0, 4)){
     2f0:	94 e0       	ldi	r25, 0x04	; 4
     2f2:	d9 2e       	mov	r13, r25
            break;

        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
                random_list_depth = rand() % note_list_size;
     2f4:	cc 24       	eor	r12, r12
     2f6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <rand>
     2fa:	6b 2d       	mov	r22, r11
     2fc:	7c 2d       	mov	r23, r12
     2fe:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
                current_note = note_list->head_pitch;
     302:	ea 81       	ldd	r30, Y+2	; 0x02
     304:	fb 81       	ldd	r31, Y+3	; 0x03
                for(i = 0; i < random_list_depth; i++)
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	04 c0       	rjmp	.+8      	; 0x312 <build_play_list+0x116>
                    current_note = current_note->next_note_by_pitch;
     30a:	03 80       	ldd	r0, Z+3	; 0x03
     30c:	f4 81       	ldd	r31, Z+4	; 0x04
     30e:	e0 2d       	mov	r30, r0
        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
                random_list_depth = rand() % note_list_size;
                current_note = note_list->head_pitch;
                for(i = 0; i < random_list_depth; i++)
     310:	9f 5f       	subi	r25, 0xFF	; 255
     312:	98 17       	cp	r25, r24
     314:	d0 f3       	brcs	.-12     	; 0x30a <build_play_list+0x10e>
                    current_note = current_note->next_note_by_pitch;
                play_list->notes[play_list_index++] = current_note;
     316:	d7 01       	movw	r26, r14
     318:	13 96       	adiw	r26, 0x03	; 3
     31a:	ed 93       	st	X+, r30
     31c:	fc 93       	st	X, r31
     31e:	14 97       	sbiw	r26, 0x04	; 4
     320:	da 94       	dec	r13
     322:	e4 e0       	ldi	r30, 0x04	; 4
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ee 0e       	add	r14, r30
     328:	ff 1e       	adc	r15, r31
                play_list->notes[play_list_index++] = current_note;
            break;

        //random
        case 4:
            for(; play_list_index < RAND_BUFF; play_list_index++){
     32a:	dd 20       	and	r13, r13
     32c:	21 f7       	brne	.-56     	; 0x2f6 <build_play_list+0xfa>
     32e:	88 e0       	ldi	r24, 0x08	; 8
     330:	01 c0       	rjmp	.+2      	; 0x334 <build_play_list+0x138>

void build_play_list(PlayList* play_list, NoteList* note_list){
	
	//builds the play list according to pattern selection (pot0)
	
	uint8_t play_list_index = 0;
     332:	80 e0       	ldi	r24, 0x00	; 0
            }
            play_list_index = mirrored_length;
        }
    }

    play_list->count = play_list_index;     //set play list count appropriately
     334:	d8 01       	movw	r26, r16
     336:	8c 93       	st	X, r24

    return;
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	08 95       	ret

0000034c <input_note_on>:


void input_note_on(PlayList* play_list, uint8_t pitch, uint8_t velocity){
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	00 d0       	rcall	.+0      	; 0x356 <input_note_on+0xa>
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	//adds the new note to the note list (if it's not a duplicate)
	//rebuilds play list and starts playing if it's the first note in the list
	
	bool first_note = 0;
	
	if (get_note_list()->count == 0)        //check for empty note list
     35a:	4a 83       	std	Y+2, r20	; 0x02
     35c:	69 83       	std	Y+1, r22	; 0x01
     35e:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
     362:	fc 01       	movw	r30, r24
     364:	00 81       	ld	r16, Z
     366:	11 81       	ldd	r17, Z+1	; 0x01
	    first_note = 1;
	
	add_note_in_full_order(get_note_list(),pitch,velocity);     //add note into note list
     368:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
     36c:	69 81       	ldd	r22, Y+1	; 0x01
     36e:	4a 81       	ldd	r20, Y+2	; 0x02
     370:	0e 94 16 05 	call	0xa2c	; 0xa2c <add_note_in_full_order>
	
	if (first_note){         //if it's the first note in the note list, build the play list and start playing by setting the play interrupt flag
     374:	01 15       	cp	r16, r1
     376:	11 05       	cpc	r17, r1
     378:	69 f4       	brne	.+26     	; 0x394 <input_note_on+0x48>
	    build_play_list(get_play_list(),get_note_list());
     37a:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
     37e:	bc 01       	movw	r22, r24
     380:	8c e5       	ldi	r24, 0x5C	; 92
     382:	91 e2       	ldi	r25, 0x21	; 33
     384:	0e 94 fe 00 	call	0x1fc	; 0x1fc <build_play_list>
		TCC0.INTFLAGS &= 0x20;
     388:	80 91 0c 08 	lds	r24, 0x080C
     38c:	80 72       	andi	r24, 0x20	; 32
     38e:	e0 e0       	ldi	r30, 0x00	; 0
     390:	f8 e0       	ldi	r31, 0x08	; 8
     392:	84 87       	std	Z+12, r24	; 0x0c
	}		
}
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

000003a2 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     3a2:	80 91 d5 21 	lds	r24, 0x21D5
     3a6:	08 95       	ret

000003a8 <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     3a8:	2f 92       	push	r2
     3aa:	3f 92       	push	r3
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <get_pot_value+0x26>
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	6b 01       	movw	r12, r22
     3d4:	2a 01       	movw	r4, r20
    //outmax: maximum value to output
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
     3d6:	e8 2f       	mov	r30, r24
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e5 53       	subi	r30, 0x35	; 53
     3e0:	fe 4d       	sbci	r31, 0xDE	; 222
     3e2:	60 81       	ld	r22, Z
     3e4:	71 81       	ldd	r23, Z+1	; 0x01
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__floatunsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	42 e7       	ldi	r20, 0x72	; 114
     3f4:	55 e4       	ldi	r21, 0x45	; 69
     3f6:	0e 94 4c 12 	call	0x2498	; 0x2498 <__divsf3>
     3fa:	7b 01       	movw	r14, r22
     3fc:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin + 1) + outmin;
     3fe:	b2 01       	movw	r22, r4
     400:	6c 19       	sub	r22, r12
     402:	7d 09       	sbc	r23, r13
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__floatunsisf>
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	c8 01       	movw	r24, r16
     416:	b7 01       	movw	r22, r14
     418:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__mulsf3>
     41c:	7b 01       	movw	r14, r22
     41e:	8c 01       	movw	r16, r24
     420:	b6 01       	movw	r22, r12
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__floatunsisf>
     42a:	d6 2e       	mov	r13, r22
     42c:	c7 2e       	mov	r12, r23
     42e:	b8 2e       	mov	r11, r24
     430:	a9 2e       	mov	r10, r25
     432:	16 01       	movw	r2, r12
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	6e 2d       	mov	r22, r14
     43a:	7f 2d       	mov	r23, r15
     43c:	80 2f       	mov	r24, r16
     43e:	91 2f       	mov	r25, r17
     440:	d6 01       	movw	r26, r12
     442:	f5 01       	movw	r30, r10
     444:	2b 2f       	mov	r18, r27
     446:	3a 2f       	mov	r19, r26
     448:	4f 2f       	mov	r20, r31
     44a:	5e 2f       	mov	r21, r30
     44c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__addsf3>
     450:	96 2e       	mov	r9, r22
     452:	87 2e       	mov	r8, r23
     454:	78 2e       	mov	r7, r24
     456:	69 2e       	mov	r6, r25
	
	if (temp > outmax)
     458:	b2 01       	movw	r22, r4
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__floatunsisf>
     462:	f6 2e       	mov	r15, r22
     464:	07 2f       	mov	r16, r23
     466:	18 2f       	mov	r17, r24
     468:	e9 2e       	mov	r14, r25
     46a:	a4 01       	movw	r20, r8
     46c:	93 01       	movw	r18, r6
     46e:	65 2f       	mov	r22, r21
     470:	74 2f       	mov	r23, r20
     472:	83 2f       	mov	r24, r19
     474:	92 2f       	mov	r25, r18
     476:	2f 2d       	mov	r18, r15
     478:	30 2f       	mov	r19, r16
     47a:	41 2f       	mov	r20, r17
     47c:	5e 2d       	mov	r21, r14
     47e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__gtsf2>
     482:	18 16       	cp	r1, r24
     484:	24 f0       	brlt	.+8      	; 0x48e <get_pot_value+0xe6>
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin + 1) + outmin;
     486:	f9 2c       	mov	r15, r9
     488:	08 2d       	mov	r16, r8
     48a:	17 2d       	mov	r17, r7
     48c:	e6 2c       	mov	r14, r6
	
	if (temp > outmax)
		temp = outmax;
		
	if (temp < outmin)
     48e:	6f 2d       	mov	r22, r15
     490:	70 2f       	mov	r23, r16
     492:	81 2f       	mov	r24, r17
     494:	9e 2d       	mov	r25, r14
     496:	d6 01       	movw	r26, r12
     498:	f5 01       	movw	r30, r10
     49a:	2b 2f       	mov	r18, r27
     49c:	3c 2d       	mov	r19, r12
     49e:	4f 2f       	mov	r20, r31
     4a0:	5a 2d       	mov	r21, r10
     4a2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__ltsf2>
     4a6:	87 fd       	sbrc	r24, 7
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <get_pot_value+0x10a>
     4aa:	3f 2c       	mov	r3, r15
     4ac:	20 2e       	mov	r2, r16
     4ae:	19 83       	std	Y+1, r17	; 0x01
     4b0:	ea 82       	std	Y+2, r14	; 0x02
		temp = outmin;
    
    return (uint16_t) temp;
     4b2:	a1 01       	movw	r20, r2
     4b4:	39 81       	ldd	r19, Y+1	; 0x01
     4b6:	2a 81       	ldd	r18, Y+2	; 0x02
     4b8:	65 2f       	mov	r22, r21
     4ba:	72 2d       	mov	r23, r2
     4bc:	83 2f       	mov	r24, r19
     4be:	92 2f       	mov	r25, r18
     4c0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fixunssfsi>
}
     4c4:	cb 01       	movw	r24, r22
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	7f 90       	pop	r7
     4e4:	6f 90       	pop	r6
     4e6:	5f 90       	pop	r5
     4e8:	4f 90       	pop	r4
     4ea:	3f 90       	pop	r3
     4ec:	2f 90       	pop	r2
     4ee:	08 95       	ret

000004f0 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	fc 01       	movw	r30, r24
     50a:	22 e0       	ldi	r18, 0x02	; 2
     50c:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     50e:	ca e0       	ldi	r28, 0x0A	; 10
     510:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     512:	73 e0       	ldi	r23, 0x03	; 3
     514:	c7 2e       	mov	r12, r23
     516:	d1 2c       	mov	r13, r1
     518:	68 e0       	ldi	r22, 0x08	; 8
     51a:	a6 2e       	mov	r10, r22
     51c:	b1 2c       	mov	r11, r1
     51e:	00 e6       	ldi	r16, 0x60	; 96
     520:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     522:	50 e4       	ldi	r21, 0x40	; 64
     524:	e5 2e       	mov	r14, r21
     526:	56 e0       	ldi	r21, 0x06	; 6
     528:	f5 2e       	mov	r15, r21
     52a:	40 ef       	ldi	r20, 0xF0	; 240
     52c:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     52e:	98 e3       	ldi	r25, 0x38	; 56
     530:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     532:	cf 01       	movw	r24, r30
     534:	be 01       	movw	r22, r28
     536:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
     53a:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     53c:	30 97       	sbiw	r30, 0x00	; 0
     53e:	19 f4       	brne	.+6      	; 0x546 <set_seven_segment_LEDs+0x56>
     540:	22 30       	cpi	r18, 0x02	; 2
     542:	09 f0       	breq	.+2      	; 0x546 <set_seven_segment_LEDs+0x56>
            digit = 10;
     544:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     546:	c9 01       	movw	r24, r18
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
     54e:	b5 01       	movw	r22, r10
     550:	02 c0       	rjmp	.+4      	; 0x556 <set_seven_segment_LEDs+0x66>
     552:	66 0f       	add	r22, r22
     554:	77 1f       	adc	r23, r23
     556:	8a 95       	dec	r24
     558:	e2 f7       	brpl	.-8      	; 0x552 <set_seven_segment_LEDs+0x62>
     55a:	d8 01       	movw	r26, r16
     55c:	16 96       	adiw	r26, 0x06	; 6
     55e:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     560:	d7 01       	movw	r26, r14
     562:	16 96       	adiw	r26, 0x06	; 6
     564:	9c 92       	st	X, r9
     566:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     568:	42 95       	swap	r20
     56a:	40 7f       	andi	r20, 0xF0	; 240
     56c:	15 96       	adiw	r26, 0x05	; 5
     56e:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     570:	d8 01       	movw	r26, r16
     572:	15 96       	adiw	r26, 0x05	; 5
     574:	8c 92       	st	X, r8
     576:	15 97       	sbiw	r26, 0x05	; 5
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     57c:	25 30       	cpi	r18, 0x05	; 5
     57e:	31 05       	cpc	r19, r1
     580:	31 f0       	breq	.+12     	; 0x58e <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     582:	cf 01       	movw	r24, r30
     584:	be 01       	movw	r22, r28
     586:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
     58a:	fb 01       	movw	r30, r22
     58c:	d2 cf       	rjmp	.-92     	; 0x532 <set_seven_segment_LEDs+0x42>
    }
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	bf 90       	pop	r11
     5a0:	af 90       	pop	r10
     5a2:	9f 90       	pop	r9
     5a4:	8f 90       	pop	r8
     5a6:	08 95       	ret

000005a8 <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     5a8:	88 23       	and	r24, r24
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <set_LEDs_on+0xc>
		PORTC.OUTCLR = 0x08;
     5ac:	88 e0       	ldi	r24, 0x08	; 8
     5ae:	e0 e4       	ldi	r30, 0x40	; 64
     5b0:	f6 e0       	ldi	r31, 0x06	; 6
     5b2:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_0)
     5b4:	66 23       	and	r22, r22
     5b6:	21 f0       	breq	.+8      	; 0x5c0 <set_LEDs_on+0x18>
		PORTD.OUTSET = 0x04;
     5b8:	84 e0       	ldi	r24, 0x04	; 4
     5ba:	e0 e6       	ldi	r30, 0x60	; 96
     5bc:	f6 e0       	ldi	r31, 0x06	; 6
     5be:	85 83       	std	Z+5, r24	; 0x05
		
	if (decimal_point_1)
     5c0:	44 23       	and	r20, r20
     5c2:	21 f0       	breq	.+8      	; 0x5cc <set_LEDs_on+0x24>
		PORTD.OUTSET = 0x01;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	e0 e6       	ldi	r30, 0x60	; 96
     5c8:	f6 e0       	ldi	r31, 0x06	; 6
     5ca:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_2)
     5cc:	22 23       	and	r18, r18
     5ce:	21 f0       	breq	.+8      	; 0x5d8 <set_LEDs_on+0x30>
		PORTD.OUTSET = 0x02;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	e0 e6       	ldi	r30, 0x60	; 96
     5d4:	f6 e0       	ldi	r31, 0x06	; 6
     5d6:	85 83       	std	Z+5, r24	; 0x05
     5d8:	08 95       	ret

000005da <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     5da:	88 23       	and	r24, r24
     5dc:	21 f0       	breq	.+8      	; 0x5e6 <set_LEDs_off+0xc>
		PORTC.OUTSET = 0x08;
     5de:	88 e0       	ldi	r24, 0x08	; 8
     5e0:	e0 e4       	ldi	r30, 0x40	; 64
     5e2:	f6 e0       	ldi	r31, 0x06	; 6
     5e4:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_0)
     5e6:	66 23       	and	r22, r22
     5e8:	21 f0       	breq	.+8      	; 0x5f2 <set_LEDs_off+0x18>
		PORTD.OUTCLR = 0x04;
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	e0 e6       	ldi	r30, 0x60	; 96
     5ee:	f6 e0       	ldi	r31, 0x06	; 6
     5f0:	86 83       	std	Z+6, r24	; 0x06
		
	if (decimal_point_1)
     5f2:	44 23       	and	r20, r20
     5f4:	21 f0       	breq	.+8      	; 0x5fe <set_LEDs_off+0x24>
		PORTD.OUTCLR = 0x01;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	e0 e6       	ldi	r30, 0x60	; 96
     5fa:	f6 e0       	ldi	r31, 0x06	; 6
     5fc:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_2)
     5fe:	22 23       	and	r18, r18
     600:	21 f0       	breq	.+8      	; 0x60a <set_LEDs_off+0x30>
		PORTD.OUTCLR = 0x02;
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	e0 e6       	ldi	r30, 0x60	; 96
     606:	f6 e0       	ldi	r31, 0x06	; 6
     608:	86 83       	std	Z+6, r24	; 0x06
     60a:	08 95       	ret

0000060c <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     60c:	80 91 c3 21 	lds	r24, 0x21C3
     610:	08 95       	ret

00000612 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     612:	80 91 c4 21 	lds	r24, 0x21C4
     616:	08 95       	ret

00000618 <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     618:	80 91 c1 21 	lds	r24, 0x21C1
     61c:	08 95       	ret

0000061e <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     61e:	80 91 c2 21 	lds	r24, 0x21C2
     622:	08 95       	ret

00000624 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     624:	80 91 bf 21 	lds	r24, 0x21BF
     628:	08 95       	ret

0000062a <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     62a:	80 91 c0 21 	lds	r24, 0x21C0
     62e:	08 95       	ret

00000630 <initialize_hardware>:

void initialize_hardware(){
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     634:	e0 e4       	ldi	r30, 0x40	; 64
     636:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     638:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     63a:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     63c:	c0 e5       	ldi	r28, 0x50	; 80
     63e:	d0 e0       	ldi	r29, 0x00	; 0
     640:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     642:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     644:	a0 e5       	ldi	r26, 0x50	; 80
     646:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     648:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     64a:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     64c:	98 ed       	ldi	r25, 0xD8	; 216
     64e:	15 c0       	rjmp	.+42     	; 0x67a <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     650:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     652:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     654:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     656:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     65a:	70 91 51 00 	lds	r23, 0x0051
     65e:	73 ff       	sbrs	r23, 3
     660:	fc cf       	rjmp	.-8      	; 0x65a <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     662:	15 96       	adiw	r26, 0x05	; 5
     664:	3c 93       	st	X, r19
     666:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     668:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     66c:	70 91 51 00 	lds	r23, 0x0051
     670:	74 ff       	sbrs	r23, 4
     672:	fc cf       	rjmp	.-8      	; 0x66c <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     674:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     676:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     67a:	70 91 40 00 	lds	r23, 0x0040
     67e:	74 30       	cpi	r23, 0x04	; 4
     680:	39 f7       	brne	.-50     	; 0x650 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     682:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     684:	a0 e6       	ldi	r26, 0x60	; 96
     686:	b6 e0       	ldi	r27, 0x06	; 6
     688:	80 e8       	ldi	r24, 0x80	; 128
     68a:	15 96       	adiw	r26, 0x05	; 5
     68c:	8c 93       	st	X, r24
     68e:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     690:	90 e4       	ldi	r25, 0x40	; 64
     692:	12 96       	adiw	r26, 0x02	; 2
     694:	9c 93       	st	X, r25
     696:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	8c 93       	st	X, r24
     69c:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     69e:	e0 eb       	ldi	r30, 0xB0	; 176
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	88 e1       	ldi	r24, 0x18	; 24
     6a4:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     6a6:	90 e2       	ldi	r25, 0x20	; 32
     6a8:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     6aa:	33 e0       	ldi	r19, 0x03	; 3
     6ac:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     6ae:	8f e2       	ldi	r24, 0x2F	; 47
     6b0:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     6b2:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     6b4:	80 91 a2 00 	lds	r24, 0x00A2
     6b8:	87 68       	ori	r24, 0x87	; 135
     6ba:	e0 ea       	ldi	r30, 0xA0	; 160
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     6c0:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d6 e0       	ldi	r29, 0x06	; 6
     6c6:	89 ef       	ldi	r24, 0xF9	; 249
     6c8:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     6ca:	e0 e0       	ldi	r30, 0x00	; 0
     6cc:	f2 e0       	ldi	r31, 0x02	; 2
     6ce:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     6d2:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     6d4:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     6d6:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     6dc:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     6de:	80 91 00 02 	lds	r24, 0x0200
     6e2:	81 60       	ori	r24, 0x01	; 1
     6e4:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     6e8:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     6ea:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     6ec:	12 a2       	std	Z+34, r1	; 0x22
	if (decimal_point_2)
		PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     6ee:	40 e2       	ldi	r20, 0x20	; 32
     6f0:	56 e0       	ldi	r21, 0x06	; 6
     6f2:	8c e0       	ldi	r24, 0x0C	; 12
     6f4:	fa 01       	movw	r30, r20
     6f6:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     6f8:	28 e0       	ldi	r18, 0x08	; 8
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	96 e0       	ldi	r25, 0x06	; 6
     6fe:	fc 01       	movw	r30, r24
     700:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     702:	fa 01       	movw	r30, r20
     704:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     706:	86 e0       	ldi	r24, 0x06	; 6
     708:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     70a:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     70c:	e0 e4       	ldi	r30, 0x40	; 64
     70e:	f6 e0       	ldi	r31, 0x06	; 6
     710:	88 ef       	ldi	r24, 0xF8	; 248
     712:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     714:	8f e3       	ldi	r24, 0x3F	; 63
     716:	11 96       	adiw	r26, 0x01	; 1
     718:	8c 93       	st	X, r24
     71a:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     71c:	88 e3       	ldi	r24, 0x38	; 56
     71e:	15 96       	adiw	r26, 0x05	; 5
     720:	8c 93       	st	X, r24
     722:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     724:	90 ef       	ldi	r25, 0xF0	; 240
     726:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     728:	16 96       	adiw	r26, 0x06	; 6
     72a:	8c 93       	st	X, r24
     72c:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     72e:	87 e0       	ldi	r24, 0x07	; 7
     730:	16 96       	adiw	r26, 0x06	; 6
     732:	8c 93       	st	X, r24
     734:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     736:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <read_hardware>:

void read_hardware(){
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	0f 92       	push	r0
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     756:	80 91 88 06 	lds	r24, 0x0688
     75a:	86 95       	lsr	r24
     75c:	86 95       	lsr	r24
     75e:	86 95       	lsr	r24
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	09 f0       	breq	.+2      	; 0x766 <read_hardware+0x28>
     764:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     766:	80 91 28 06 	lds	r24, 0x0628
     76a:	86 95       	lsr	r24
     76c:	86 95       	lsr	r24
     76e:	80 fd       	sbrc	r24, 0
     770:	02 c0       	rjmp	.+4      	; 0x776 <read_hardware+0x38>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	01 c0       	rjmp	.+2      	; 0x778 <read_hardware+0x3a>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	c8 2e       	mov	r12, r24
     77a:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     77c:	80 91 28 06 	lds	r24, 0x0628
     780:	86 95       	lsr	r24
     782:	86 95       	lsr	r24
     784:	86 95       	lsr	r24
     786:	80 fd       	sbrc	r24, 0
     788:	02 c0       	rjmp	.+4      	; 0x78e <read_hardware+0x50>
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	01 c0       	rjmp	.+2      	; 0x790 <read_hardware+0x52>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	c8 2a       	or	r12, r24
     792:	c0 92 ca 21 	sts	0x21CA, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     796:	60 91 c9 21 	lds	r22, 0x21C9
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	d0 90 c8 21 	lds	r13, 0x21C8
     7a0:	e5 ec       	ldi	r30, 0xC5	; 197
     7a2:	f1 e2       	ldi	r31, 0x21	; 33
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	4c 2d       	mov	r20, r12
     7aa:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     7b0:	b8 2e       	mov	r11, r24
     7b2:	8a 01       	movw	r16, r20
     7b4:	08 2e       	mov	r0, r24
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <read_hardware+0x7e>
     7b8:	15 95       	asr	r17
     7ba:	07 95       	ror	r16
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <read_hardware+0x7a>
     7c0:	db 01       	movw	r26, r22
     7c2:	08 2e       	mov	r0, r24
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <read_hardware+0x8c>
     7c6:	b5 95       	asr	r27
     7c8:	a7 95       	ror	r26
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <read_hardware+0x88>
     7ce:	0a 17       	cp	r16, r26
     7d0:	1b 07       	cpc	r17, r27
     7d2:	21 f4       	brne	.+8      	; 0x7dc <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     7d4:	a0 81       	ld	r26, Z
     7d6:	af 5f       	subi	r26, 0xFF	; 255
     7d8:	a0 83       	st	Z, r26
     7da:	01 c0       	rjmp	.+2      	; 0x7de <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     7dc:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     7de:	a0 81       	ld	r26, Z
     7e0:	a9 30       	cpi	r26, 0x09	; 9
     7e2:	60 f0       	brcs	.+24     	; 0x7fc <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     7e4:	d9 01       	movw	r26, r18
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <read_hardware+0xae>
     7e8:	aa 0f       	add	r26, r26
     7ea:	bb 1f       	adc	r27, r27
     7ec:	ba 94       	dec	r11
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <read_hardware+0xaa>
     7f0:	ba 2f       	mov	r27, r26
     7f2:	b0 95       	com	r27
     7f4:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     7f6:	ac 21       	and	r26, r12
     7f8:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     7fa:	10 82       	st	Z, r1
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     800:	83 30       	cpi	r24, 0x03	; 3
     802:	91 05       	cpc	r25, r1
     804:	a9 f6       	brne	.-86     	; 0x7b0 <read_hardware+0x72>
     806:	d0 92 c8 21 	sts	0x21C8, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     80a:	c0 92 c9 21 	sts	0x21C9, r12
     80e:	80 91 bf 21 	lds	r24, 0x21BF
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     812:	d0 fe       	sbrs	r13, 0
     814:	0c c0       	rjmp	.+24     	; 0x82e <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     816:	88 23       	and	r24, r24
     818:	19 f0       	breq	.+6      	; 0x820 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     81a:	10 92 c0 21 	sts	0x21C0, r1
     81e:	03 c0       	rjmp	.+6      	; 0x826 <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 c0 21 	sts	0x21C0, r24
        toggle_switch_state = 1;                //set current value
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 bf 21 	sts	0x21BF, r24
     82c:	0a c0       	rjmp	.+20     	; 0x842 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     82e:	88 23       	and	r24, r24
     830:	21 f0       	breq	.+8      	; 0x83a <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	80 93 c0 21 	sts	0x21C0, r24
     838:	02 c0       	rjmp	.+4      	; 0x83e <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     83a:	10 92 c0 21 	sts	0x21C0, r1
        toggle_switch_state = 0;                //set current value
     83e:	10 92 bf 21 	sts	0x21BF, r1
     842:	80 91 c1 21 	lds	r24, 0x21C1
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     846:	d1 fe       	sbrs	r13, 1
     848:	0c c0       	rjmp	.+24     	; 0x862 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     84a:	88 23       	and	r24, r24
     84c:	19 f0       	breq	.+6      	; 0x854 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     84e:	10 92 c2 21 	sts	0x21C2, r1
     852:	03 c0       	rjmp	.+6      	; 0x85a <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 c2 21 	sts	0x21C2, r24
        pushbutton_switch_state = 1;                //set current value
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 c1 21 	sts	0x21C1, r24
     860:	0a c0       	rjmp	.+20     	; 0x876 <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     862:	88 23       	and	r24, r24
     864:	21 f0       	breq	.+8      	; 0x86e <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	80 93 c2 21 	sts	0x21C2, r24
     86c:	02 c0       	rjmp	.+4      	; 0x872 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     86e:	10 92 c2 21 	sts	0x21C2, r1
        pushbutton_switch_state = 0;                //set current value
     872:	10 92 c1 21 	sts	0x21C1, r1
     876:	80 91 c3 21 	lds	r24, 0x21C3
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     87a:	d2 fe       	sbrs	r13, 2
     87c:	0c c0       	rjmp	.+24     	; 0x896 <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     87e:	88 23       	and	r24, r24
     880:	19 f0       	breq	.+6      	; 0x888 <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     882:	10 92 c4 21 	sts	0x21C4, r1
     886:	03 c0       	rjmp	.+6      	; 0x88e <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 c4 21 	sts	0x21C4, r24
        encoder_switch_state = 1;                //set current value
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 c3 21 	sts	0x21C3, r24
     894:	0a c0       	rjmp	.+20     	; 0x8aa <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     896:	88 23       	and	r24, r24
     898:	21 f0       	breq	.+8      	; 0x8a2 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	80 93 c4 21 	sts	0x21C4, r24
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     8a2:	10 92 c4 21 	sts	0x21C4, r1
        encoder_switch_state = 0;                //set current value
     8a6:	10 92 c3 21 	sts	0x21C3, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     8aa:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	62 c0       	rjmp	.+196    	; 0x976 <read_hardware+0x238>
     8b2:	20 91 23 02 	lds	r18, 0x0223
     8b6:	21 60       	ori	r18, 0x01	; 1
     8b8:	fc 01       	movw	r30, r24
     8ba:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     8bc:	20 91 21 02 	lds	r18, 0x0221
     8c0:	27 7c       	andi	r18, 0xC7	; 199
     8c2:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     8c4:	40 91 21 02 	lds	r20, 0x0221
     8c8:	29 81       	ldd	r18, Y+1	; 0x01
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	2d 5f       	subi	r18, 0xFD	; 253
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	63 e0       	ldi	r22, 0x03	; 3
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	6a 95       	dec	r22
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <read_hardware+0x194>
     8da:	42 2b       	or	r20, r18
     8dc:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     8de:	20 91 20 02 	lds	r18, 0x0220
     8e2:	20 68       	ori	r18, 0x80	; 128
     8e4:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     8e6:	20 91 23 02 	lds	r18, 0x0223
     8ea:	20 ff       	sbrs	r18, 0
     8ec:	fc cf       	rjmp	.-8      	; 0x8e6 <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     8ee:	e9 81       	ldd	r30, Y+1	; 0x01
     8f0:	20 91 24 02 	lds	r18, 0x0224
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e5 53       	subi	r30, 0x35	; 53
     8fc:	fe 4d       	sbci	r31, 0xDE	; 222
     8fe:	20 83       	st	Z, r18
     900:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     902:	e9 81       	ldd	r30, Y+1	; 0x01
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	20 91 25 02 	lds	r18, 0x0225
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	e5 53       	subi	r30, 0x35	; 53
     910:	fe 4d       	sbci	r31, 0xDE	; 222
     912:	f2 2e       	mov	r15, r18
     914:	ee 24       	eor	r14, r14
     916:	20 81       	ld	r18, Z
     918:	31 81       	ldd	r19, Z+1	; 0x01
     91a:	2e 29       	or	r18, r14
     91c:	3f 29       	or	r19, r15
     91e:	20 83       	st	Z, r18
     920:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POTMIN)
     922:	e9 81       	ldd	r30, Y+1	; 0x01
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e5 53       	subi	r30, 0x35	; 53
     92c:	fe 4d       	sbci	r31, 0xDE	; 222
     92e:	20 81       	ld	r18, Z
     930:	31 81       	ldd	r19, Z+1	; 0x01
     932:	20 3e       	cpi	r18, 0xE0	; 224
     934:	31 05       	cpc	r19, r1
     936:	48 f4       	brcc	.+18     	; 0x94a <read_hardware+0x20c>
            pot_values[i] = 0;
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e5 53       	subi	r30, 0x35	; 53
     942:	fe 4d       	sbci	r31, 0xDE	; 222
     944:	10 82       	st	Z, r1
     946:	11 82       	std	Z+1, r1	; 0x01
     948:	13 c0       	rjmp	.+38     	; 0x970 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     94a:	e9 81       	ldd	r30, Y+1	; 0x01
     94c:	a9 81       	ldd	r26, Y+1	; 0x01
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	e5 53       	subi	r30, 0x35	; 53
     956:	fe 4d       	sbci	r31, 0xDE	; 222
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	aa 0f       	add	r26, r26
     95c:	bb 1f       	adc	r27, r27
     95e:	a5 53       	subi	r26, 0x35	; 53
     960:	be 4d       	sbci	r27, 0xDE	; 222
     962:	2d 91       	ld	r18, X+
     964:	3c 91       	ld	r19, X
     966:	11 97       	sbiw	r26, 0x01	; 1
     968:	20 5e       	subi	r18, 0xE0	; 224
     96a:	30 40       	sbci	r19, 0x00	; 0
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     970:	29 81       	ldd	r18, Y+1	; 0x01
     972:	2f 5f       	subi	r18, 0xFF	; 255
     974:	29 83       	std	Y+1, r18	; 0x01
     976:	29 81       	ldd	r18, Y+1	; 0x01
     978:	25 30       	cpi	r18, 0x05	; 5
     97a:	08 f4       	brcc	.+2      	; 0x97e <read_hardware+0x240>
     97c:	9a cf       	rjmp	.-204    	; 0x8b2 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     97e:	80 91 28 06 	lds	r24, 0x0628
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	80 fd       	sbrc	r24, 0
     986:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     988:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     98c:	84 2f       	mov	r24, r20
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	20 91 d6 21 	lds	r18, 0x21D6
     994:	51 e0       	ldi	r21, 0x01	; 1
     996:	25 27       	eor	r18, r21
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	82 23       	and	r24, r18
     99c:	93 23       	and	r25, r19
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	59 f0       	breq	.+22     	; 0x9b8 <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     9a2:	86 2f       	mov	r24, r22
     9a4:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     9a6:	80 fd       	sbrc	r24, 0
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     9aa:	50 93 d5 21 	sts	0x21D5, r21
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	80 93 d5 21 	sts	0x21D5, r24
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     9b8:	10 92 d5 21 	sts	0x21D5, r1
    last_a = current_a;
     9bc:	40 93 d6 21 	sts	0x21D6, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     9c0:	0f 90       	pop	r0
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	08 95       	ret

000009d6 <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
	
	//set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     9d6:	08 95       	ret

000009d8 <initialize_note_list>:
    //Create new list, reset count and heads/tails
    //Call from main()

//    NoteList *new_note_list = malloc(sizeof(NoteList));
    NoteList* new_note_list = &global_note_list;
    new_note_list->count = 0;
     9d8:	10 92 d7 21 	sts	0x21D7, r1
     9dc:	10 92 d8 21 	sts	0x21D8, r1
    new_note_list->head_pitch = NULL;
     9e0:	10 92 d9 21 	sts	0x21D9, r1
     9e4:	10 92 da 21 	sts	0x21DA, r1
    new_note_list->tail_pitch = NULL;
     9e8:	10 92 db 21 	sts	0x21DB, r1
     9ec:	10 92 dc 21 	sts	0x21DC, r1
    new_note_list->head_trigger = NULL;
     9f0:	10 92 dd 21 	sts	0x21DD, r1
     9f4:	10 92 de 21 	sts	0x21DE, r1
    new_note_list->tail_trigger = NULL;
     9f8:	10 92 df 21 	sts	0x21DF, r1
     9fc:	10 92 e0 21 	sts	0x21E0, r1
     a00:	e1 ee       	ldi	r30, 0xE1	; 225
     a02:	f1 e2       	ldi	r31, 0x21	; 33
#include "linkedlist.h"

static NoteList global_note_list;

static void free_note(Note* note){
    note->pitch = 0;
     a04:	10 82       	st	Z, r1
    note->velocity = 0;
     a06:	11 82       	std	Z+1, r1	; 0x01
    note->status = 0;
     a08:	12 82       	std	Z+2, r1	; 0x02
    note->next_note_by_pitch = NULL;
     a0a:	13 82       	std	Z+3, r1	; 0x03
     a0c:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     a0e:	15 82       	std	Z+5, r1	; 0x05
     a10:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     a12:	17 82       	std	Z+7, r1	; 0x07
     a14:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     a16:	11 86       	std	Z+9, r1	; 0x09
     a18:	12 86       	std	Z+10, r1	; 0x0a
     a1a:	3b 96       	adiw	r30, 0x0b	; 11
    new_note_list->tail_pitch = NULL;
    new_note_list->head_trigger = NULL;
    new_note_list->tail_trigger = NULL;

    uint8_t i;
    for(i = 0; i<MAX_LIST_NOTES; i++)
     a1c:	82 e2       	ldi	r24, 0x22	; 34
     a1e:	e1 39       	cpi	r30, 0x91	; 145
     a20:	f8 07       	cpc	r31, r24
     a22:	81 f7       	brne	.-32     	; 0xa04 <initialize_note_list+0x2c>
        free_note(&(new_note_list->note_bank[i]));

}
     a24:	08 95       	ret

00000a26 <get_note_list>:

NoteList* get_note_list(){
	return &global_note_list;
}
     a26:	87 ed       	ldi	r24, 0xD7	; 215
     a28:	91 e2       	ldi	r25, 0x21	; 33
     a2a:	08 95       	ret

00000a2c <add_note_in_full_order>:
        note_list->head_trigger = NULL;
        note_list->tail_trigger = NULL;
    }    
}

bool add_note_in_full_order(NoteList *note_list, uint8_t pitch, uint8_t velocity){
     a2c:	6f 92       	push	r6
     a2e:	7f 92       	push	r7
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	0f 92       	push	r0
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	3c 01       	movw	r6, r24
	//Find note's position by pitch
    //If note is found, update velocity and trigger order
    //if note not found, add note in pitch order and at end of trigger order
    //return 1 if successful, return 0 if failed
	
	volatile uint8_t check_count = note_list->count;
     a50:	fc 01       	movw	r30, r24
     a52:	a0 80       	ld	r10, Z
     a54:	b1 80       	ldd	r11, Z+1	; 0x01
     a56:	a9 82       	std	Y+1, r10	; 0x01
	note_list->head_trigger = NULL;
	note_list->tail_trigger = NULL;
	note_list->count = 0;

	return;
}
     a58:	82 80       	ldd	r8, Z+2	; 0x02
     a5a:	93 80       	ldd	r9, Z+3	; 0x03
	//If found, return pointer to note
	//If not found, return pointer to next note
	//if target_pitch is after the tail, return NULL
	//if list is empty, return NULL
	
	Note* current_note = note_list->head_pitch;
     a5c:	d4 01       	movw	r26, r8
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <add_note_in_full_order+0x42>
	
	while(current_note != NULL){
		if (target_pitch <= current_note->pitch)
     a60:	8c 91       	ld	r24, X
     a62:	86 17       	cp	r24, r22
     a64:	30 f4       	brcc	.+12     	; 0xa72 <add_note_in_full_order+0x46>
		    break;
		
		current_note = current_note->next_note_by_pitch;
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	0d 90       	ld	r0, X+
     a6a:	bc 91       	ld	r27, X
     a6c:	a0 2d       	mov	r26, r0
	//if target_pitch is after the tail, return NULL
	//if list is empty, return NULL
	
	Note* current_note = note_list->head_pitch;
	
	while(current_note != NULL){
     a6e:	10 97       	sbiw	r26, 0x00	; 0
     a70:	b9 f7       	brne	.-18     	; 0xa60 <add_note_in_full_order+0x34>
	
	Note* new_note;
	
	Note* target_note = find_note_by_pitch(note_list, pitch);       //search for note placement
	
	if (pitch == target_note->pitch){       //if the note was found, update the velocity and move trigger to the end
     a72:	8c 91       	ld	r24, X
     a74:	68 17       	cp	r22, r24
     a76:	09 f0       	breq	.+2      	; 0xa7a <add_note_in_full_order+0x4e>
     a78:	4a c0       	rjmp	.+148    	; 0xb0e <add_note_in_full_order+0xe2>
	return new_note;
}

static Note* change_velocity(Note* note, uint8_t new_velocity){
	//Update velocity of an existing note
	note->velocity = new_velocity;
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	4c 93       	st	X, r20
     a7e:	11 97       	sbiw	r26, 0x01	; 1
static void move_note_to_tail_trigger(NoteList* note_list, Note* note){
	//Move note out of existing trigger order
	//Place note at the end of the trigger order
	//If the note is the only member of the note_list, assign it to the head
	
	if (note_list->tail_trigger == note)    //note is already at trigger, so nothing needs to be done
     a80:	f3 01       	movw	r30, r6
     a82:	80 85       	ldd	r24, Z+8	; 0x08
     a84:	91 85       	ldd	r25, Z+9	; 0x09
     a86:	8a 17       	cp	r24, r26
     a88:	9b 07       	cpc	r25, r27
     a8a:	09 f4       	brne	.+2      	; 0xa8e <add_note_in_full_order+0x62>
     a8c:	01 c1       	rjmp	.+514    	; 0xc90 <add_note_in_full_order+0x264>
	    return;
	else if (note_list->count == 1){        //note is the only member of note_list, set it as the head and tail
     a8e:	20 81       	ld	r18, Z
     a90:	31 81       	ldd	r19, Z+1	; 0x01
     a92:	21 30       	cpi	r18, 0x01	; 1
     a94:	31 05       	cpc	r19, r1
     a96:	69 f4       	brne	.+26     	; 0xab2 <add_note_in_full_order+0x86>
		note_list->tail_trigger = note;
     a98:	a0 87       	std	Z+8, r26	; 0x08
     a9a:	b1 87       	std	Z+9, r27	; 0x09
		note_list->head_trigger = note;
     a9c:	a6 83       	std	Z+6, r26	; 0x06
     a9e:	b7 83       	std	Z+7, r27	; 0x07
		note->next_note_by_trigger = NULL;
     aa0:	17 96       	adiw	r26, 0x07	; 7
     aa2:	1d 92       	st	X+, r1
     aa4:	1c 92       	st	X, r1
     aa6:	18 97       	sbiw	r26, 0x08	; 8
		note->previous_note_by_trigger = NULL;
     aa8:	19 96       	adiw	r26, 0x09	; 9
     aaa:	1d 92       	st	X+, r1
     aac:	1c 92       	st	X, r1
     aae:	1a 97       	sbiw	r26, 0x0a	; 10
     ab0:	ef c0       	rjmp	.+478    	; 0xc90 <add_note_in_full_order+0x264>
		return;
	}
	else if (note_list->head_trigger == note){  //note is the head of note_list, update the head, and set note as the tail
     ab2:	f3 01       	movw	r30, r6
     ab4:	26 81       	ldd	r18, Z+6	; 0x06
     ab6:	37 81       	ldd	r19, Z+7	; 0x07
     ab8:	2a 17       	cp	r18, r26
     aba:	3b 07       	cpc	r19, r27
     abc:	59 f4       	brne	.+22     	; 0xad4 <add_note_in_full_order+0xa8>
		note->next_note_by_trigger->previous_note_by_trigger = NULL;
     abe:	17 96       	adiw	r26, 0x07	; 7
     ac0:	2d 91       	ld	r18, X+
     ac2:	3c 91       	ld	r19, X
     ac4:	18 97       	sbiw	r26, 0x08	; 8
     ac6:	f9 01       	movw	r30, r18
     ac8:	11 86       	std	Z+9, r1	; 0x09
     aca:	12 86       	std	Z+10, r1	; 0x0a
		note_list->head_trigger = note->next_note_by_trigger;
     acc:	f3 01       	movw	r30, r6
     ace:	26 83       	std	Z+6, r18	; 0x06
     ad0:	37 83       	std	Z+7, r19	; 0x07
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <add_note_in_full_order+0xcc>
		note->previous_note_by_trigger->next_note_by_trigger = note;
		note_list->tail_trigger = note;
		return;
	}
	else{       //note was in the middle of the list, update the surrounding trigger pointers and move it to the tail
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
     ad4:	17 96       	adiw	r26, 0x07	; 7
     ad6:	2d 91       	ld	r18, X+
     ad8:	3c 91       	ld	r19, X
     ada:	18 97       	sbiw	r26, 0x08	; 8
     adc:	19 96       	adiw	r26, 0x09	; 9
     ade:	4d 91       	ld	r20, X+
     ae0:	5c 91       	ld	r21, X
     ae2:	1a 97       	sbiw	r26, 0x0a	; 10
     ae4:	f9 01       	movw	r30, r18
     ae6:	41 87       	std	Z+9, r20	; 0x09
     ae8:	52 87       	std	Z+10, r21	; 0x0a
		note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
     aea:	19 96       	adiw	r26, 0x09	; 9
     aec:	4d 91       	ld	r20, X+
     aee:	5c 91       	ld	r21, X
     af0:	1a 97       	sbiw	r26, 0x0a	; 10
     af2:	fa 01       	movw	r30, r20
     af4:	27 83       	std	Z+7, r18	; 0x07
     af6:	30 87       	std	Z+8, r19	; 0x08
				
	    note->previous_note_by_trigger = note_list->tail_trigger;
     af8:	19 96       	adiw	r26, 0x09	; 9
     afa:	8d 93       	st	X+, r24
     afc:	9c 93       	st	X, r25
     afe:	1a 97       	sbiw	r26, 0x0a	; 10
		note->previous_note_by_trigger->next_note_by_trigger = note;
     b00:	fc 01       	movw	r30, r24
     b02:	a7 83       	std	Z+7, r26	; 0x07
     b04:	b0 87       	std	Z+8, r27	; 0x08
		note_list->tail_trigger = note;
     b06:	f3 01       	movw	r30, r6
     b08:	a0 87       	std	Z+8, r26	; 0x08
     b0a:	b1 87       	std	Z+9, r27	; 0x09
     b0c:	c1 c0       	rjmp	.+386    	; 0xc90 <add_note_in_full_order+0x264>
     b0e:	93 01       	movw	r18, r6
	
	Note* new_note;
	
	Note* target_note = find_note_by_pitch(note_list, pitch);       //search for note placement
	
	if (pitch == target_note->pitch){       //if the note was found, update the velocity and move trigger to the end
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
        note->next_note_by_trigger->previous_note_by_trigger = note->previous_note_by_trigger;
		note->previous_note_by_trigger->next_note_by_trigger = note->next_note_by_trigger;
				
	    note->previous_note_by_trigger = note_list->tail_trigger;
		note->previous_note_by_trigger->next_note_by_trigger = note;
		note_list->tail_trigger = note;
     b14:	08 2f       	mov	r16, r24
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
        if(note_list->note_bank[i].status == 0){
     b16:	f9 01       	movw	r30, r18
     b18:	54 85       	ldd	r21, Z+12	; 0x0c
     b1a:	55 23       	and	r21, r21
     b1c:	f1 f4       	brne	.+60     	; 0xb5a <add_note_in_full_order+0x12e>
            note_list->note_bank[i].status = 1;
     b1e:	2b e0       	ldi	r18, 0x0B	; 11
     b20:	c2 2e       	mov	r12, r18
     b22:	d1 2c       	mov	r13, r1
     b24:	8c 9d       	mul	r24, r12
     b26:	90 01       	movw	r18, r0
     b28:	8d 9d       	mul	r24, r13
     b2a:	30 0d       	add	r19, r0
     b2c:	9c 9d       	mul	r25, r12
     b2e:	30 0d       	add	r19, r0
     b30:	11 24       	eor	r1, r1
     b32:	26 0d       	add	r18, r6
     b34:	37 1d       	adc	r19, r7
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	f9 01       	movw	r30, r18
     b3a:	84 87       	std	Z+12, r24	; 0x0c
            return &(note_list->note_bank[i]);
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	0c 9d       	mul	r16, r12
     b40:	90 01       	movw	r18, r0
     b42:	0d 9d       	mul	r16, r13
     b44:	30 0d       	add	r19, r0
     b46:	1c 9d       	mul	r17, r12
     b48:	30 0d       	add	r19, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	c9 01       	movw	r24, r18
     b4e:	0a 96       	adiw	r24, 0x0a	; 10
     b50:	86 0d       	add	r24, r6
     b52:	97 1d       	adc	r25, r7
	//if all note banks are used up, return NULL
	//increment note count if successful

	Note* new_note = allocate_note(note_list);  //get a note pointer from the note bank

	if (new_note == NULL)       //return null if there are none available
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	41 f4       	brne	.+16     	; 0xb68 <add_note_in_full_order+0x13c>
     b58:	a0 c0       	rjmp	.+320    	; 0xc9a <add_note_in_full_order+0x26e>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	25 5f       	subi	r18, 0xF5	; 245
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    note->previous_note_by_trigger = NULL;
}

static Note* allocate_note(NoteList* note_list){
    uint8_t i;
    for(i = 0; i < MAX_LIST_NOTES; i++){
     b60:	80 31       	cpi	r24, 0x10	; 16
     b62:	91 05       	cpc	r25, r1
     b64:	b9 f6       	brne	.-82     	; 0xb14 <add_note_in_full_order+0xe8>
     b66:	99 c0       	rjmp	.+306    	; 0xc9a <add_note_in_full_order+0x26e>

	if (new_note == NULL)       //return null if there are none available
        return NULL;

    //fill in pitch and velocity values, initialize trigger pointers
	new_note->pitch = new_pitch;
     b68:	26 0d       	add	r18, r6
     b6a:	37 1d       	adc	r19, r7
     b6c:	f9 01       	movw	r30, r18
     b6e:	62 87       	std	Z+10, r22	; 0x0a
	new_note->velocity = new_velocity;
     b70:	78 01       	movw	r14, r16
     b72:	08 94       	sec
     b74:	e1 1c       	adc	r14, r1
     b76:	f1 1c       	adc	r15, r1
     b78:	ec 9c       	mul	r14, r12
     b7a:	b0 01       	movw	r22, r0
     b7c:	ed 9c       	mul	r14, r13
     b7e:	70 0d       	add	r23, r0
     b80:	fc 9c       	mul	r15, r12
     b82:	70 0d       	add	r23, r0
     b84:	11 24       	eor	r1, r1
     b86:	66 0d       	add	r22, r6
     b88:	77 1d       	adc	r23, r7
     b8a:	fb 01       	movw	r30, r22
     b8c:	40 83       	st	Z, r20
	new_note->next_note_by_trigger = NULL;
     b8e:	f9 01       	movw	r30, r18
     b90:	11 8a       	std	Z+17, r1	; 0x11
     b92:	12 8a       	std	Z+18, r1	; 0x12
	new_note->previous_note_by_trigger = NULL;
     b94:	13 8a       	std	Z+19, r1	; 0x13
     b96:	14 8a       	std	Z+20, r1	; 0x14
	
	if (note_list->count == 0){                         //list was previously empty
     b98:	a1 14       	cp	r10, r1
     b9a:	b1 04       	cpc	r11, r1
     b9c:	59 f4       	brne	.+22     	; 0xbb4 <add_note_in_full_order+0x188>
	    note_list->head_pitch = new_note;
     b9e:	f3 01       	movw	r30, r6
     ba0:	82 83       	std	Z+2, r24	; 0x02
     ba2:	93 83       	std	Z+3, r25	; 0x03
		note_list->tail_pitch = new_note;
     ba4:	84 83       	std	Z+4, r24	; 0x04
     ba6:	95 83       	std	Z+5, r25	; 0x05
		new_note->next_note_by_pitch = NULL;
     ba8:	f9 01       	movw	r30, r18
     baa:	15 86       	std	Z+13, r1	; 0x0d
     bac:	16 86       	std	Z+14, r1	; 0x0e
		new_note->previous_note_by_pitch = NULL;		
     bae:	17 86       	std	Z+15, r1	; 0x0f
     bb0:	10 8a       	std	Z+16, r1	; 0x10
     bb2:	35 c0       	rjmp	.+106    	; 0xc1e <add_note_in_full_order+0x1f2>
	}
	else if (target_note == NULL){                      //list was not empty... insert at tail
     bb4:	10 97       	sbiw	r26, 0x00	; 0
     bb6:	81 f4       	brne	.+32     	; 0xbd8 <add_note_in_full_order+0x1ac>
		new_note->previous_note_by_pitch = note_list->tail_pitch;
     bb8:	f3 01       	movw	r30, r6
     bba:	a4 81       	ldd	r26, Z+4	; 0x04
     bbc:	b5 81       	ldd	r27, Z+5	; 0x05
     bbe:	f9 01       	movw	r30, r18
     bc0:	a7 87       	std	Z+15, r26	; 0x0f
     bc2:	b0 8b       	std	Z+16, r27	; 0x10
		new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	8d 93       	st	X+, r24
     bc8:	9c 93       	st	X, r25
     bca:	14 97       	sbiw	r26, 0x04	; 4
		new_note->next_note_by_pitch = NULL;
     bcc:	15 86       	std	Z+13, r1	; 0x0d
     bce:	16 86       	std	Z+14, r1	; 0x0e
	    note_list->tail_pitch = new_note;
     bd0:	f3 01       	movw	r30, r6
     bd2:	84 83       	std	Z+4, r24	; 0x04
     bd4:	95 83       	std	Z+5, r25	; 0x05
     bd6:	23 c0       	rjmp	.+70     	; 0xc1e <add_note_in_full_order+0x1f2>
	}
	else if (target_note == note_list->head_pitch){     //list was not empty, insert at head
     bd8:	a8 15       	cp	r26, r8
     bda:	b9 05       	cpc	r27, r9
     bdc:	69 f4       	brne	.+26     	; 0xbf8 <add_note_in_full_order+0x1cc>
	    new_note->next_note_by_pitch = note_list->head_pitch;
     bde:	f9 01       	movw	r30, r18
     be0:	a5 87       	std	Z+13, r26	; 0x0d
     be2:	b6 87       	std	Z+14, r27	; 0x0e
		new_note->next_note_by_pitch->previous_note_by_pitch = new_note;
     be4:	15 96       	adiw	r26, 0x05	; 5
     be6:	8d 93       	st	X+, r24
     be8:	9c 93       	st	X, r25
     bea:	16 97       	sbiw	r26, 0x06	; 6
		new_note->previous_note_by_pitch = NULL;
     bec:	17 86       	std	Z+15, r1	; 0x0f
     bee:	10 8a       	std	Z+16, r1	; 0x10
	    note_list->head_pitch = new_note;
     bf0:	f3 01       	movw	r30, r6
     bf2:	82 83       	std	Z+2, r24	; 0x02
     bf4:	93 83       	std	Z+3, r25	; 0x03
     bf6:	13 c0       	rjmp	.+38     	; 0xc1e <add_note_in_full_order+0x1f2>
	}
	else{                                               //list was not empty, insert within the list
		new_note->next_note_by_pitch = target_note;
     bf8:	f9 01       	movw	r30, r18
     bfa:	a5 87       	std	Z+13, r26	; 0x0d
     bfc:	b6 87       	std	Z+14, r27	; 0x0e
	    new_note->previous_note_by_pitch = target_note->previous_note_by_pitch;
     bfe:	15 96       	adiw	r26, 0x05	; 5
     c00:	4d 91       	ld	r20, X+
     c02:	5c 91       	ld	r21, X
     c04:	16 97       	sbiw	r26, 0x06	; 6
     c06:	47 87       	std	Z+15, r20	; 0x0f
     c08:	50 8b       	std	Z+16, r21	; 0x10
	    new_note->next_note_by_pitch->previous_note_by_pitch = new_note;
     c0a:	15 96       	adiw	r26, 0x05	; 5
     c0c:	8d 93       	st	X+, r24
     c0e:	9c 93       	st	X, r25
     c10:	16 97       	sbiw	r26, 0x06	; 6
	    new_note->previous_note_by_pitch->next_note_by_pitch = new_note;
     c12:	a7 85       	ldd	r26, Z+15	; 0x0f
     c14:	b0 89       	ldd	r27, Z+16	; 0x10
     c16:	13 96       	adiw	r26, 0x03	; 3
     c18:	8d 93       	st	X+, r24
     c1a:	9c 93       	st	X, r25
     c1c:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	note_list->count = note_list->count + 1;    //increment note count
     c1e:	08 94       	sec
     c20:	a1 1c       	adc	r10, r1
     c22:	b1 1c       	adc	r11, r1
     c24:	f3 01       	movw	r30, r6
     c26:	a0 82       	st	Z, r10
     c28:	b1 82       	std	Z+1, r11	; 0x01

static void insert_note_at_tail_trigger(NoteList* note_list, Note* new_note){
	//Place note at the end of the trigger order
	//If the note is the only member of the note_list, assign it to the head
	
	if (note_list->count == 1){
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	af 16       	cp	r10, r31
     c2e:	b1 04       	cpc	r11, r1
     c30:	b9 f4       	brne	.+46     	; 0xc60 <add_note_in_full_order+0x234>
		note_list->head_trigger = new_note;
     c32:	f3 01       	movw	r30, r6
     c34:	86 83       	std	Z+6, r24	; 0x06
     c36:	97 83       	std	Z+7, r25	; 0x07
		new_note->next_note_by_trigger = NULL;
     c38:	2b e0       	ldi	r18, 0x0B	; 11
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	02 9f       	mul	r16, r18
     c3e:	d0 01       	movw	r26, r0
     c40:	03 9f       	mul	r16, r19
     c42:	b0 0d       	add	r27, r0
     c44:	12 9f       	mul	r17, r18
     c46:	b0 0d       	add	r27, r0
     c48:	11 24       	eor	r1, r1
     c4a:	a6 0d       	add	r26, r6
     c4c:	b7 1d       	adc	r27, r7
     c4e:	51 96       	adiw	r26, 0x11	; 17
     c50:	1d 92       	st	X+, r1
     c52:	1c 92       	st	X, r1
     c54:	52 97       	sbiw	r26, 0x12	; 18
		new_note->previous_note_by_trigger = NULL;
     c56:	53 96       	adiw	r26, 0x13	; 19
     c58:	1d 92       	st	X+, r1
     c5a:	1c 92       	st	X, r1
     c5c:	54 97       	sbiw	r26, 0x14	; 20
     c5e:	15 c0       	rjmp	.+42     	; 0xc8a <add_note_in_full_order+0x25e>
	}
	else{
		note_list->tail_trigger->next_note_by_trigger = new_note;
     c60:	f3 01       	movw	r30, r6
     c62:	20 85       	ldd	r18, Z+8	; 0x08
     c64:	31 85       	ldd	r19, Z+9	; 0x09
     c66:	f9 01       	movw	r30, r18
     c68:	87 83       	std	Z+7, r24	; 0x07
     c6a:	90 87       	std	Z+8, r25	; 0x08
	    new_note->previous_note_by_trigger = note_list->tail_trigger;	
     c6c:	4b e0       	ldi	r20, 0x0B	; 11
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	04 9f       	mul	r16, r20
     c72:	d0 01       	movw	r26, r0
     c74:	05 9f       	mul	r16, r21
     c76:	b0 0d       	add	r27, r0
     c78:	14 9f       	mul	r17, r20
     c7a:	b0 0d       	add	r27, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	a6 0d       	add	r26, r6
     c80:	b7 1d       	adc	r27, r7
     c82:	53 96       	adiw	r26, 0x13	; 19
     c84:	2d 93       	st	X+, r18
     c86:	3c 93       	st	X, r19
     c88:	54 97       	sbiw	r26, 0x14	; 20
	}		
		
	note_list->tail_trigger = new_note;
     c8a:	f3 01       	movw	r30, r6
     c8c:	80 87       	std	Z+8, r24	; 0x08
     c8e:	91 87       	std	Z+9, r25	; 0x09
		    return 0;
		insert_note_at_tail_trigger(note_list, new_note);
	}
	
 
    check_count = note_list->count;
     c90:	f3 01       	movw	r30, r6
     c92:	80 81       	ld	r24, Z
     c94:	89 83       	std	Y+1, r24	; 0x01
	
    return 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <add_note_in_full_order+0x270>
		move_note_to_tail_trigger(note_list, new_note);
	}
	else{       //if the note was not found, add the note and place into trigger order
		new_note = add_note_at_previous_pitch(note_list, target_note, pitch, velocity);
		if (new_note == NULL)
		    return 0;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
	
 
    check_count = note_list->count;
	
    return 1;
}
     c9c:	0f 90       	pop	r0
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	8f 90       	pop	r8
     cb6:	7f 90       	pop	r7
     cb8:	6f 90       	pop	r6
     cba:	08 95       	ret

00000cbc <remove_all_notes>:

void remove_all_notes(NoteList *note_list){
     cbc:	dc 01       	movw	r26, r24
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	ed 91       	ld	r30, X+
     cc2:	fc 91       	ld	r31, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
	Note* temp_node;
	while (target_note){
     cc6:	10 c0       	rjmp	.+32     	; 0xce8 <remove_all_notes+0x2c>
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
     cc8:	33 81       	ldd	r19, Z+3	; 0x03
     cca:	24 81       	ldd	r18, Z+4	; 0x04
#include "linkedlist.h"

static NoteList global_note_list;

static void free_note(Note* note){
    note->pitch = 0;
     ccc:	10 82       	st	Z, r1
    note->velocity = 0;
     cce:	11 82       	std	Z+1, r1	; 0x01
    note->status = 0;
     cd0:	12 82       	std	Z+2, r1	; 0x02
    note->next_note_by_pitch = NULL;
     cd2:	13 82       	std	Z+3, r1	; 0x03
     cd4:	14 82       	std	Z+4, r1	; 0x04
    note->previous_note_by_pitch = NULL;
     cd6:	15 82       	std	Z+5, r1	; 0x05
     cd8:	16 82       	std	Z+6, r1	; 0x06
    note->next_note_by_trigger = NULL;
     cda:	17 82       	std	Z+7, r1	; 0x07
     cdc:	10 86       	std	Z+8, r1	; 0x08
    note->previous_note_by_trigger = NULL;
     cde:	11 86       	std	Z+9, r1	; 0x09
     ce0:	12 86       	std	Z+10, r1	; 0x0a
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
	Note* temp_node;
	while (target_note){
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
     ce2:	c9 01       	movw	r24, r18
     ce4:	e9 2f       	mov	r30, r25
     ce6:	f8 2f       	mov	r31, r24

void remove_all_notes(NoteList *note_list){
	//Iterate through pitch order and delete all nodes.  Set all heads/tails to NULL.  Reset Count
	Note* target_note = note_list->head_pitch;
	Note* temp_node;
	while (target_note){
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	71 f7       	brne	.-36     	; 0xcc8 <remove_all_notes+0xc>
		temp_node = target_note;
		target_note = target_note->next_note_by_pitch;
		free_note(temp_node);
	}

	note_list->head_pitch = NULL;
     cec:	12 96       	adiw	r26, 0x02	; 2
     cee:	1d 92       	st	X+, r1
     cf0:	1c 92       	st	X, r1
     cf2:	13 97       	sbiw	r26, 0x03	; 3
	note_list->tail_pitch = NULL;
     cf4:	14 96       	adiw	r26, 0x04	; 4
     cf6:	1d 92       	st	X+, r1
     cf8:	1c 92       	st	X, r1
     cfa:	15 97       	sbiw	r26, 0x05	; 5
	note_list->head_trigger = NULL;
     cfc:	16 96       	adiw	r26, 0x06	; 6
     cfe:	1d 92       	st	X+, r1
     d00:	1c 92       	st	X, r1
     d02:	17 97       	sbiw	r26, 0x07	; 7
	note_list->tail_trigger = NULL;
     d04:	18 96       	adiw	r26, 0x08	; 8
     d06:	1d 92       	st	X+, r1
     d08:	1c 92       	st	X, r1
     d0a:	19 97       	sbiw	r26, 0x09	; 9
	note_list->count = 0;
     d0c:	1d 92       	st	X+, r1
     d0e:	1c 92       	st	X, r1
     d10:	11 97       	sbiw	r26, 0x01	; 1

	return;
}
     d12:	08 95       	ret

00000d14 <__vector_91>:
uint16_t next_duration;
	
const uint8_t pitch_array[7] = {50, 55, 53, 60, 59, 65, 40};
uint8_t pitch_array_select = 0;
*/
ISR(USARTD1_RXC_vect){
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
//	static uint8_t new_byte[1];
//	new_byte[0] = USARTD1.DATA;
	midi_device_input(serial_midi_device(),1,&(USARTD1.DATA));
     d36:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	40 eb       	ldi	r20, 0xB0	; 176
     d3e:	59 e0       	ldi	r21, 0x09	; 9
     d40:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <midi_device_input>
	midi_device_process(serial_midi_device());
     d44:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     d48:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <midi_device_process>
}
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <test_pots>:

void test_pots(){
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     d74:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	
	uint8_t selPOT = 0;
     d78:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		read_hardware();
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     d7a:	c4 e6       	ldi	r28, 0x64	; 100
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <test_pots+0x14>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
			selPOT++;
			if (selPOT>4)
				selPOT = 0;
     d80:	10 e0       	ldi	r17, 0x00	; 0
	initialize_hardware();
	
	uint8_t selPOT = 0;
	
	while(1){
		read_hardware();
     d82:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     d86:	81 2f       	mov	r24, r17
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	43 e6       	ldi	r20, 0x63	; 99
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_pot_value>
     d94:	21 2f       	mov	r18, r17
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	2c 9f       	mul	r18, r28
     d9e:	a0 01       	movw	r20, r0
     da0:	2d 9f       	mul	r18, r29
     da2:	50 0d       	add	r21, r0
     da4:	3c 9f       	mul	r19, r28
     da6:	50 0d       	add	r21, r0
     da8:	11 24       	eor	r1, r1
     daa:	84 0f       	add	r24, r20
     dac:	95 1f       	adc	r25, r21
     dae:	0e 94 78 02 	call	0x4f0	; 0x4f0 <set_seven_segment_LEDs>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     db2:	0e 94 09 03 	call	0x612	; 0x612 <get_encoder_switch_edge>
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	21 f7       	brne	.-56     	; 0xd82 <test_pots+0x14>
			selPOT++;
     dba:	1f 5f       	subi	r17, 0xFF	; 255
			if (selPOT>4)
     dbc:	15 30       	cpi	r17, 0x05	; 5
     dbe:	00 f7       	brcc	.-64     	; 0xd80 <test_pots+0x12>
     dc0:	e0 cf       	rjmp	.-64     	; 0xd82 <test_pots+0x14>

00000dc2 <test_switches>:
	
	
}
*/

void test_switches(){
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <test_switches+0xa>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     dd0:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	
	while(1){
		read_hardware();
     dd4:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     dd8:	0e 94 06 03 	call	0x60c	; 0x60c <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     ddc:	8a 83       	std	Y+2, r24	; 0x02
     dde:	0e 94 0c 03 	call	0x618	; 0x618 <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	0e 94 12 03 	call	0x624	; 0x624 <get_toggle_switch_state>
     de8:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	6a 81       	ldd	r22, Y+2	; 0x02
     dee:	49 81       	ldd	r20, Y+1	; 0x01
     df0:	00 e0       	ldi	r16, 0x00	; 0
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <postloop_functions>
     df8:	ed cf       	rjmp	.-38     	; 0xdd4 <test_switches+0x12>

00000dfa <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	initialize_hardware();
     e04:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     e08:	c0 e0       	ldi	r28, 0x00	; 0
     e0a:	d0 e0       	ldi	r29, 0x00	; 0
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     e0c:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     e10:	0e 94 06 03 	call	0x60c	; 0x60c <get_encoder_switch_state>
     e14:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     e16:	0e 94 0c 03 	call	0x618	; 0x618 <get_pushbutton_switch_state>
     e1a:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     e1c:	0e 94 12 03 	call	0x624	; 0x624 <get_toggle_switch_state>
     e20:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     e22:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	31 f4       	brne	.+12     	; 0xe36 <test_seven_segment+0x3c>
			if (i == 999)
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	c7 3e       	cpi	r28, 0xE7	; 231
     e2e:	d8 07       	cpc	r29, r24
     e30:	51 f0       	breq	.+20     	; 0xe46 <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     e32:	21 96       	adiw	r28, 0x01	; 1
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     e36:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	49 f4       	brne	.+18     	; 0xe50 <test_seven_segment+0x56>
			if (i == 0)
     e3e:	20 97       	sbiw	r28, 0x00	; 0
     e40:	29 f0       	breq	.+10     	; 0xe4c <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     e42:	21 97       	sbiw	r28, 0x01	; 1
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     e46:	c0 e0       	ldi	r28, 0x00	; 0
     e48:	d0 e0       	ldi	r29, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     e4c:	c7 ee       	ldi	r28, 0xE7	; 231
     e4e:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	6f 2d       	mov	r22, r15
     e54:	40 2f       	mov	r20, r16
     e56:	21 2f       	mov	r18, r17
     e58:	8e 01       	movw	r16, r28
     e5a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <postloop_functions>
	}
     e5e:	d6 cf       	rjmp	.-84     	; 0xe0c <test_seven_segment+0x12>

00000e60 <test_ADC>:
}

void test_ADC(){
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	initialize_hardware();
     e72:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     e76:	c0 e0       	ldi	r28, 0x00	; 0
     e78:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     e7a:	84 e6       	ldi	r24, 0x64	; 100
     e7c:	a8 2e       	mov	r10, r24
     e7e:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     e80:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     e84:	0e 94 06 03 	call	0x60c	; 0x60c <get_encoder_switch_state>
     e88:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     e8a:	0e 94 0c 03 	call	0x618	; 0x618 <get_pushbutton_switch_state>
     e8e:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     e90:	0e 94 12 03 	call	0x624	; 0x624 <get_toggle_switch_state>
     e94:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     e96:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	29 f4       	brne	.+10     	; 0xea8 <test_ADC+0x48>
			if (pot_select == 4)
     e9e:	c4 30       	cpi	r28, 0x04	; 4
     ea0:	d1 05       	cpc	r29, r1
     ea2:	51 f0       	breq	.+20     	; 0xeb8 <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     ea4:	21 96       	adiw	r28, 0x01	; 1
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     ea8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	49 f4       	brne	.+18     	; 0xec2 <test_ADC+0x62>
			if (pot_select == 0)
     eb0:	20 97       	sbiw	r28, 0x00	; 0
     eb2:	29 f0       	breq	.+10     	; 0xebe <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     eb4:	21 97       	sbiw	r28, 0x01	; 1
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     eb8:	c0 e0       	ldi	r28, 0x00	; 0
     eba:	d0 e0       	ldi	r29, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     ebe:	c4 e0       	ldi	r28, 0x04	; 4
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     ec2:	8c 2f       	mov	r24, r28
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	43 e6       	ldi	r20, 0x63	; 99
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_pot_value>
     ed0:	ca 9d       	mul	r28, r10
     ed2:	80 01       	movw	r16, r0
     ed4:	cb 9d       	mul	r28, r11
     ed6:	10 0d       	add	r17, r0
     ed8:	da 9d       	mul	r29, r10
     eda:	10 0d       	add	r17, r0
     edc:	11 24       	eor	r1, r1
     ede:	08 0f       	add	r16, r24
     ee0:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	6d 2d       	mov	r22, r13
     ee6:	4e 2d       	mov	r20, r14
     ee8:	2f 2d       	mov	r18, r15
     eea:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <postloop_functions>
	}
     eee:	c8 cf       	rjmp	.-112    	; 0xe80 <test_ADC+0x20>

00000ef0 <test_xnor_in>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}
*/
void test_xnor_in(){
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
	static uint8_t new_byte;

	initialize_hardware();
     ef6:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	serial_midi_init();
     efa:	0e 94 3e 0b 	call	0x167c	; 0x167c <serial_midi_init>
	
	while(1){
		read_hardware();
		
		if (get_encoder_switch_edge()){
			new_byte = 0x90;
     efe:	90 e9       	ldi	r25, 0x90	; 144
     f00:	f9 2e       	mov	r15, r25
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x3D;
     f02:	0d e3       	ldi	r16, 0x3D	; 61
			midi_device_input(serial_midi_device(),1,&new_byte);
			midi_device_process(serial_midi_device());
			
			new_byte = 0x64;
     f04:	14 e6       	ldi	r17, 0x64	; 100

	initialize_hardware();
	serial_midi_init();
	
	while(1){
		read_hardware();
     f06:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
		
		if (get_encoder_switch_edge()){
     f0a:	0e 94 09 03 	call	0x612	; 0x612 <get_encoder_switch_edge>
     f0e:	88 23       	and	r24, r24
     f10:	d1 f3       	breq	.-12     	; 0xf06 <test_xnor_in+0x16>
			new_byte = 0x90;
     f12:	f0 92 91 22 	sts	0x2291, r15
			midi_device_input(serial_midi_device(),1,&new_byte);
     f16:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	41 e9       	ldi	r20, 0x91	; 145
     f1e:	52 e2       	ldi	r21, 0x22	; 34
     f20:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <midi_device_input>
			midi_device_process(serial_midi_device());
     f24:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f28:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <midi_device_process>
			
			new_byte = 0x3D;
     f2c:	00 93 91 22 	sts	0x2291, r16
			midi_device_input(serial_midi_device(),1,&new_byte);
     f30:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	41 e9       	ldi	r20, 0x91	; 145
     f38:	52 e2       	ldi	r21, 0x22	; 34
     f3a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <midi_device_input>
			midi_device_process(serial_midi_device());
     f3e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f42:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <midi_device_process>
			
			new_byte = 0x64;
     f46:	10 93 91 22 	sts	0x2291, r17
			midi_device_input(serial_midi_device(),1,&new_byte);
     f4a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	41 e9       	ldi	r20, 0x91	; 145
     f52:	52 e2       	ldi	r21, 0x22	; 34
     f54:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <midi_device_input>
			midi_device_process(serial_midi_device());
     f58:	0e 94 3b 0b 	call	0x1676	; 0x1676 <serial_midi_device>
     f5c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <midi_device_process>
     f60:	d2 cf       	rjmp	.-92     	; 0xf06 <test_xnor_in+0x16>

00000f62 <test_blank>:
		
	}
	
}

void test_blank(){
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	initialize_hardware();
     f66:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	
	while(1){
		read_hardware();
     f6a:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <postloop_functions>
     f7e:	f5 cf       	rjmp	.-22     	; 0xf6a <test_blank+0x8>

00000f80 <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	ae 97       	sbiw	r28, 0x2e	; 46
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     f92:	de 01       	movw	r26, r28
     f94:	1f 96       	adiw	r26, 0x0f	; 15
     f96:	e0 e2       	ldi	r30, 0x20	; 32
     f98:	f0 e2       	ldi	r31, 0x20	; 32
     f9a:	20 e2       	ldi	r18, 0x20	; 32
     f9c:	01 90       	ld	r0, Z+
     f9e:	0d 92       	st	X+, r0
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     fa4:	20 91 00 08 	lds	r18, 0x0800
     fa8:	2f 70       	andi	r18, 0x0F	; 15
     faa:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     fac:	21 e0       	ldi	r18, 0x01	; 1
     fae:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     fb0:	1b 82       	std	Y+3, r1	; 0x03
     fb2:	1c 82       	std	Y+4, r1	; 0x04
     fb4:	1d 82       	std	Y+5, r1	; 0x05
     fb6:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     fb8:	9c 01       	movw	r18, r24
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	77 e8       	ldi	r23, 0x87	; 135
     fc2:	83 e9       	ldi	r24, 0x93	; 147
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
     fca:	2f 83       	std	Y+7, r18	; 0x07
     fcc:	38 87       	std	Y+8, r19	; 0x08
     fce:	49 87       	std	Y+9, r20	; 0x09
     fd0:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	ea 81       	ldd	r30, Y+2	; 0x02
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	11 c0       	rjmp	.+34     	; 0x1010 <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	88 30       	cpi	r24, 0x08	; 8
     ff8:	08 f0       	brcs	.+2      	; 0xffc <BPM_to_TMR+0x7c>
     ffa:	93 c0       	rjmp	.+294    	; 0x1122 <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	ea 81       	ldd	r30, Y+2	; 0x02
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    1014:	26 85       	ldd	r18, Z+14	; 0x0e
    1016:	37 85       	ldd	r19, Z+15	; 0x0f
    1018:	40 89       	ldd	r20, Z+16	; 0x10
    101a:	51 89       	ldd	r21, Z+17	; 0x11
    101c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    1020:	2b 87       	std	Y+11, r18	; 0x0b
    1022:	3c 87       	std	Y+12, r19	; 0x0c
    1024:	4d 87       	std	Y+13, r20	; 0x0d
    1026:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    1028:	8b 85       	ldd	r24, Y+11	; 0x0b
    102a:	9c 85       	ldd	r25, Y+12	; 0x0c
    102c:	ad 85       	ldd	r26, Y+13	; 0x0d
    102e:	be 85       	ldd	r27, Y+14	; 0x0e
    1030:	80 30       	cpi	r24, 0x00	; 0
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	92 07       	cpc	r25, r18
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	a2 07       	cpc	r26, r18
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	b2 07       	cpc	r27, r18
    103e:	b8 f6       	brcc	.-82     	; 0xfee <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
    1040:	80 91 00 08 	lds	r24, 0x0800
    1044:	88 23       	and	r24, r24
    1046:	09 f4       	brne	.+2      	; 0x104a <BPM_to_TMR+0xca>
    1048:	61 c0       	rjmp	.+194    	; 0x110c <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
    104a:	99 81       	ldd	r25, Y+1	; 0x01
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	98 17       	cp	r25, r24
    1050:	09 f4       	brne	.+2      	; 0x1054 <BPM_to_TMR+0xd4>
    1052:	5a c0       	rjmp	.+180    	; 0x1108 <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
    1054:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
    1058:	60 91 20 08 	lds	r22, 0x0820
    105c:	70 91 21 08 	lds	r23, 0x0821
    1060:	ea 81       	ldd	r30, Y+2	; 0x02
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	8e 01       	movw	r16, r28
    106e:	0f 5f       	subi	r16, 0xFF	; 255
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	e0 0f       	add	r30, r16
    1074:	f1 1f       	adc	r31, r17
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	26 85       	ldd	r18, Z+14	; 0x0e
    107c:	37 85       	ldd	r19, Z+15	; 0x0f
    107e:	40 89       	ldd	r20, Z+16	; 0x10
    1080:	51 89       	ldd	r21, Z+17	; 0x11
    1082:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    1086:	6b 83       	std	Y+3, r22	; 0x03
    1088:	7c 83       	std	Y+4, r23	; 0x04
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
    108e:	6b 81       	ldd	r22, Y+3	; 0x03
    1090:	7c 81       	ldd	r23, Y+4	; 0x04
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	e0 0f       	add	r30, r16
    10a4:	f1 1f       	adc	r31, r17
    10a6:	26 85       	ldd	r18, Z+14	; 0x0e
    10a8:	37 85       	ldd	r19, Z+15	; 0x0f
    10aa:	40 89       	ldd	r20, Z+16	; 0x10
    10ac:	51 89       	ldd	r21, Z+17	; 0x11
    10ae:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    10b2:	2b 83       	std	Y+3, r18	; 0x03
    10b4:	3c 83       	std	Y+4, r19	; 0x04
    10b6:	4d 83       	std	Y+5, r20	; 0x05
    10b8:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	ad 81       	ldd	r26, Y+5	; 0x05
    10c2:	be 81       	ldd	r27, Y+6	; 0x06
    10c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    10c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    10c8:	4d 85       	ldd	r20, Y+13	; 0x0d
    10ca:	5e 85       	ldd	r21, Y+14	; 0x0e
    10cc:	82 1b       	sub	r24, r18
    10ce:	93 0b       	sbc	r25, r19
    10d0:	a4 0b       	sbc	r26, r20
    10d2:	b5 0b       	sbc	r27, r21
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	ad 83       	std	Y+5, r26	; 0x05
    10da:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	4d 81       	ldd	r20, Y+5	; 0x05
    10e2:	5e 81       	ldd	r21, Y+6	; 0x06
    10e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e8:	ad 85       	ldd	r26, Y+13	; 0x0d
    10ea:	be 85       	ldd	r27, Y+14	; 0x0e
    10ec:	82 17       	cp	r24, r18
    10ee:	93 07       	cpc	r25, r19
    10f0:	a4 07       	cpc	r26, r20
    10f2:	b5 07       	cpc	r27, r21
    10f4:	18 f3       	brcs	.-58     	; 0x10bc <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	ad 81       	ldd	r26, Y+5	; 0x05
    10fc:	be 81       	ldd	r27, Y+6	; 0x06
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f8 e0       	ldi	r31, 0x08	; 8
    1102:	80 a3       	std	Z+32, r24	; 0x20
    1104:	91 a3       	std	Z+33, r25	; 0x21
    1106:	02 c0       	rjmp	.+4      	; 0x110c <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
    1108:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
    110e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1110:	ad 85       	ldd	r26, Y+13	; 0x0d
    1112:	be 85       	ldd	r27, Y+14	; 0x0e
    1114:	e0 e0       	ldi	r30, 0x00	; 0
    1116:	f8 e0       	ldi	r31, 0x08	; 8
    1118:	80 a7       	std	Z+40, r24	; 0x28
    111a:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 93 00 08 	sts	0x0800, r24

	return;
}
    1122:	ae 96       	adiw	r28, 0x2e	; 46
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	ae 97       	sbiw	r28, 0x2e	; 46
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
    1144:	de 01       	movw	r26, r28
    1146:	1f 96       	adiw	r26, 0x0f	; 15
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f0 e2       	ldi	r31, 0x20	; 32
    114c:	20 e2       	ldi	r18, 0x20	; 32
    114e:	01 90       	ld	r0, Z+
    1150:	0d 92       	st	X+, r0
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	e1 f7       	brne	.-8      	; 0x114e <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
    1156:	20 91 00 08 	lds	r18, 0x0800
    115a:	2f 70       	andi	r18, 0x0F	; 15
    115c:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
    1162:	1b 82       	std	Y+3, r1	; 0x03
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
    116a:	9c 01       	movw	r18, r24
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	78 ea       	ldi	r23, 0xA8	; 168
    1174:	84 ed       	ldi	r24, 0xD4	; 212
    1176:	95 e5       	ldi	r25, 0x55	; 85
    1178:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    117c:	2f 83       	std	Y+7, r18	; 0x07
    117e:	38 87       	std	Y+8, r19	; 0x08
    1180:	49 87       	std	Y+9, r20	; 0x09
    1182:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	78 85       	ldd	r23, Y+8	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	ea 81       	ldd	r30, Y+2	; 0x02
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	8e 01       	movw	r16, r28
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <BPM_to_TMR2+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <BPM_to_TMR2+0x7c>
    11ac:	a1 c0       	rjmp	.+322    	; 0x12f0 <BPM_to_TMR2+0x1be>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	ea 81       	ldd	r30, Y+2	; 0x02
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e0 0f       	add	r30, r16
    11c4:	f1 1f       	adc	r31, r17
    11c6:	26 85       	ldd	r18, Z+14	; 0x0e
    11c8:	37 85       	ldd	r19, Z+15	; 0x0f
    11ca:	40 89       	ldd	r20, Z+16	; 0x10
    11cc:	51 89       	ldd	r21, Z+17	; 0x11
    11ce:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    11d2:	2b 87       	std	Y+11, r18	; 0x0b
    11d4:	3c 87       	std	Y+12, r19	; 0x0c
    11d6:	4d 87       	std	Y+13, r20	; 0x0d
    11d8:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
    11da:	8b 85       	ldd	r24, Y+11	; 0x0b
    11dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11de:	ad 85       	ldd	r26, Y+13	; 0x0d
    11e0:	be 85       	ldd	r27, Y+14	; 0x0e
    11e2:	80 30       	cpi	r24, 0x00	; 0
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	92 07       	cpc	r25, r18
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	a2 07       	cpc	r26, r18
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	b2 07       	cpc	r27, r18
    11f0:	b8 f6       	brcc	.-82     	; 0x11a0 <BPM_to_TMR2+0x6e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
    11f2:	80 91 00 08 	lds	r24, 0x0800
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <BPM_to_TMR2+0xca>
    11fa:	61 c0       	rjmp	.+194    	; 0x12be <BPM_to_TMR2+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
    11fc:	99 81       	ldd	r25, Y+1	; 0x01
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	98 17       	cp	r25, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <BPM_to_TMR2+0xd4>
    1204:	5a c0       	rjmp	.+180    	; 0x12ba <BPM_to_TMR2+0x188>
			TCC0.CTRLA = 0x00;
    1206:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
    120a:	60 91 20 08 	lds	r22, 0x0820
    120e:	70 91 21 08 	lds	r23, 0x0821
    1212:	ea 81       	ldd	r30, Y+2	; 0x02
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	8e 01       	movw	r16, r28
    1220:	0f 5f       	subi	r16, 0xFF	; 255
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	e0 0f       	add	r30, r16
    1226:	f1 1f       	adc	r31, r17
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	26 85       	ldd	r18, Z+14	; 0x0e
    122e:	37 85       	ldd	r19, Z+15	; 0x0f
    1230:	40 89       	ldd	r20, Z+16	; 0x10
    1232:	51 89       	ldd	r21, Z+17	; 0x11
    1234:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    1238:	6b 83       	std	Y+3, r22	; 0x03
    123a:	7c 83       	std	Y+4, r23	; 0x04
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
    1240:	6b 81       	ldd	r22, Y+3	; 0x03
    1242:	7c 81       	ldd	r23, Y+4	; 0x04
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e0 0f       	add	r30, r16
    1256:	f1 1f       	adc	r31, r17
    1258:	26 85       	ldd	r18, Z+14	; 0x0e
    125a:	37 85       	ldd	r19, Z+15	; 0x0f
    125c:	40 89       	ldd	r20, Z+16	; 0x10
    125e:	51 89       	ldd	r21, Z+17	; 0x11
    1260:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    1264:	2b 83       	std	Y+3, r18	; 0x03
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	4d 83       	std	Y+5, r20	; 0x05
    126a:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
    126c:	10 c0       	rjmp	.+32     	; 0x128e <BPM_to_TMR2+0x15c>
				adjusted_count = adjusted_count - compare_value;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	ad 81       	ldd	r26, Y+5	; 0x05
    1274:	be 81       	ldd	r27, Y+6	; 0x06
    1276:	2b 85       	ldd	r18, Y+11	; 0x0b
    1278:	3c 85       	ldd	r19, Y+12	; 0x0c
    127a:	4d 85       	ldd	r20, Y+13	; 0x0d
    127c:	5e 85       	ldd	r21, Y+14	; 0x0e
    127e:	82 1b       	sub	r24, r18
    1280:	93 0b       	sbc	r25, r19
    1282:	a4 0b       	sbc	r26, r20
    1284:	b5 0b       	sbc	r27, r21
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	ad 83       	std	Y+5, r26	; 0x05
    128c:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
    128e:	2b 81       	ldd	r18, Y+3	; 0x03
    1290:	3c 81       	ldd	r19, Y+4	; 0x04
    1292:	4d 81       	ldd	r20, Y+5	; 0x05
    1294:	5e 81       	ldd	r21, Y+6	; 0x06
    1296:	8b 85       	ldd	r24, Y+11	; 0x0b
    1298:	9c 85       	ldd	r25, Y+12	; 0x0c
    129a:	ad 85       	ldd	r26, Y+13	; 0x0d
    129c:	be 85       	ldd	r27, Y+14	; 0x0e
    129e:	82 17       	cp	r24, r18
    12a0:	93 07       	cpc	r25, r19
    12a2:	a4 07       	cpc	r26, r20
    12a4:	b5 07       	cpc	r27, r21
    12a6:	18 f3       	brcs	.-58     	; 0x126e <BPM_to_TMR2+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	ad 81       	ldd	r26, Y+5	; 0x05
    12ae:	be 81       	ldd	r27, Y+6	; 0x06
    12b0:	e0 e0       	ldi	r30, 0x00	; 0
    12b2:	f8 e0       	ldi	r31, 0x08	; 8
    12b4:	80 a3       	std	Z+32, r24	; 0x20
    12b6:	91 a3       	std	Z+33, r25	; 0x21
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <BPM_to_TMR2+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
    12ba:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
    12be:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12c2:	ad 85       	ldd	r26, Y+13	; 0x0d
    12c4:	be 85       	ldd	r27, Y+14	; 0x0e
    12c6:	e0 e0       	ldi	r30, 0x00	; 0
    12c8:	f8 e0       	ldi	r31, 0x08	; 8
    12ca:	80 a7       	std	Z+40, r24	; 0x28
    12cc:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
    12ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d2:	ad 85       	ldd	r26, Y+13	; 0x0d
    12d4:	be 85       	ldd	r27, Y+14	; 0x0e
    12d6:	68 e1       	ldi	r22, 0x18	; 24
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    12de:	66 a7       	std	Z+46, r22	; 0x2e
    12e0:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
    12e2:	80 91 01 08 	lds	r24, 0x0801
    12e6:	80 69       	ori	r24, 0x90	; 144
    12e8:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 93 00 08 	sts	0x0800, r24

	return;
}
    12f0:	ae 96       	adiw	r28, 0x2e	; 46
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <test_pot_banks>:
	}
	
}
*/

void test_pot_banks(){
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
	initialize_hardware();
    130c:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	
	uint16_t pot_out_max = 10;
	uint16_t pot_out_min = 0;
    1310:	c0 e0       	ldi	r28, 0x00	; 0
    1312:	d0 e0       	ldi	r29, 0x00	; 0
*/

void test_pot_banks(){
	initialize_hardware();
	
	uint16_t pot_out_max = 10;
    1314:	0a e0       	ldi	r16, 0x0A	; 10
    1316:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t pot_out_min = 0;
	uint16_t pot_out_value = 0;
	
	while(1){
		read_hardware();
    1318:	0e 94 9f 03 	call	0x73e	; 0x73e <read_hardware>
		
		if (get_encoder() == TURN_CW){
    131c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 f4       	brne	.+36     	; 0x1348 <test_pot_banks+0x48>
			if (get_encoder_switch_state()){
    1324:	0e 94 06 03 	call	0x60c	; 0x60c <get_encoder_switch_state>
    1328:	88 23       	and	r24, r24
    132a:	39 f0       	breq	.+14     	; 0x133a <test_pot_banks+0x3a>
				if (pot_out_min < (pot_out_max - 1))
    132c:	c8 01       	movw	r24, r16
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	c8 17       	cp	r28, r24
    1332:	d9 07       	cpc	r29, r25
    1334:	e0 f4       	brcc	.+56     	; 0x136e <test_pot_banks+0x6e>
					pot_out_min++;
    1336:	21 96       	adiw	r28, 0x01	; 1
    1338:	1a c0       	rjmp	.+52     	; 0x136e <test_pot_banks+0x6e>
			}					
			else if (pot_out_max < 999)
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	07 3e       	cpi	r16, 0xE7	; 231
    133e:	18 07       	cpc	r17, r24
    1340:	b0 f4       	brcc	.+44     	; 0x136e <test_pot_banks+0x6e>
				pot_out_max++;
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	13 c0       	rjmp	.+38     	; 0x136e <test_pot_banks+0x6e>
		}
		else if (get_encoder() == TURN_CCW){
    1348:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_encoder>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	79 f4       	brne	.+30     	; 0x136e <test_pot_banks+0x6e>
			if (get_encoder_switch_state()){
    1350:	0e 94 06 03 	call	0x60c	; 0x60c <get_encoder_switch_state>
    1354:	88 23       	and	r24, r24
    1356:	21 f0       	breq	.+8      	; 0x1360 <test_pot_banks+0x60>
				if (pot_out_min > 0)
    1358:	20 97       	sbiw	r28, 0x00	; 0
    135a:	49 f0       	breq	.+18     	; 0x136e <test_pot_banks+0x6e>
					pot_out_min += -1;
    135c:	21 97       	sbiw	r28, 0x01	; 1
    135e:	07 c0       	rjmp	.+14     	; 0x136e <test_pot_banks+0x6e>
			}					
			else if (pot_out_max > (pot_out_min + 1))
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	80 17       	cp	r24, r16
    1366:	91 07       	cpc	r25, r17
    1368:	10 f4       	brcc	.+4      	; 0x136e <test_pot_banks+0x6e>
				pot_out_max += -1;
    136a:	01 50       	subi	r16, 0x01	; 1
    136c:	10 40       	sbci	r17, 0x00	; 0
		}
		
		pot_out_value = get_pot_value(2, pot_out_min, pot_out_max);
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	be 01       	movw	r22, r28
    1372:	a8 01       	movw	r20, r16
    1374:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_pot_value>
    1378:	7c 01       	movw	r14, r24
		
		if (get_toggle_switch_state())
    137a:	0e 94 12 03 	call	0x624	; 0x624 <get_toggle_switch_state>
    137e:	88 23       	and	r24, r24
    1380:	11 f0       	breq	.+4      	; 0x1386 <test_pot_banks+0x86>
			set_seven_segment_LEDs(pot_out_value);
    1382:	c7 01       	movw	r24, r14
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <test_pot_banks+0x94>
		else if (get_pushbutton_switch_state())
    1386:	0e 94 0c 03 	call	0x618	; 0x618 <get_pushbutton_switch_state>
    138a:	88 23       	and	r24, r24
    138c:	11 f0       	breq	.+4      	; 0x1392 <test_pot_banks+0x92>
			set_seven_segment_LEDs(pot_out_min);
    138e:	ce 01       	movw	r24, r28
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <test_pot_banks+0x94>
		else
			set_seven_segment_LEDs(pot_out_max);
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 78 02 	call	0x4f0	; 0x4f0 <set_seven_segment_LEDs>
    1398:	bf cf       	rjmp	.-130    	; 0x1318 <test_pot_banks+0x18>

0000139a <check_note_list_head_pitch_f>:
		
	}
}

void check_note_list_head_pitch_f(NoteList* note_list, uint8_t* pitch_list){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <check_note_list_head_pitch_f+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	fc 01       	movw	r30, r24
	
	volatile uint8_t list_count = note_list->count;
    13a6:	80 81       	ld	r24, Z
    13a8:	89 83       	std	Y+1, r24	; 0x01
	
	if (list_count == 0)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	88 23       	and	r24, r24
    13ae:	a9 f0       	breq	.+42     	; 0x13da <check_note_list_head_pitch_f+0x40>
	    return;
	

	volatile uint8_t i = 0;
    13b0:	1a 82       	std	Y+2, r1	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->head_pitch;
    13b2:	02 80       	ldd	r0, Z+2	; 0x02
    13b4:	f3 81       	ldd	r31, Z+3	; 0x03
    13b6:	e0 2d       	mov	r30, r0
	
	i=0;
    13b8:	1a 82       	std	Y+2, r1	; 0x02
	while (current_note != NULL){
    13ba:	0c c0       	rjmp	.+24     	; 0x13d4 <check_note_list_head_pitch_f+0x3a>
		pitch_list[i] = current_note->pitch;
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	80 81       	ld	r24, Z
    13c0:	db 01       	movw	r26, r22
    13c2:	a9 0f       	add	r26, r25
    13c4:	b1 1d       	adc	r27, r1
    13c6:	8c 93       	st	X, r24
		
		current_note = current_note->next_note_by_pitch;
    13c8:	03 80       	ldd	r0, Z+3	; 0x03
    13ca:	f4 81       	ldd	r31, Z+4	; 0x04
    13cc:	e0 2d       	mov	r30, r0
		i++;
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	8a 83       	std	Y+2, r24	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->head_pitch;
	
	i=0;
	while (current_note != NULL){
    13d4:	30 97       	sbiw	r30, 0x00	; 0
    13d6:	91 f7       	brne	.-28     	; 0x13bc <check_note_list_head_pitch_f+0x22>
		
		current_note = current_note->next_note_by_pitch;
		i++;
	}
	
	i = 0;
    13d8:	1a 82       	std	Y+2, r1	; 0x02
	
	return;
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <check_note_list_head_pitch_b>:

void check_note_list_head_pitch_b(NoteList* note_list, uint8_t* pitch_list){
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <check_note_list_head_pitch_b+0x6>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	fc 01       	movw	r30, r24
	
	volatile uint8_t list_count = note_list->count;
    13f0:	80 81       	ld	r24, Z
    13f2:	89 83       	std	Y+1, r24	; 0x01
	
	if (list_count == 0)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	a9 f0       	breq	.+42     	; 0x1424 <check_note_list_head_pitch_b+0x40>
	    return;
	

	volatile uint8_t i = 0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->tail_pitch;
    13fc:	04 80       	ldd	r0, Z+4	; 0x04
    13fe:	f5 81       	ldd	r31, Z+5	; 0x05
    1400:	e0 2d       	mov	r30, r0
	
	i=0;
    1402:	1a 82       	std	Y+2, r1	; 0x02
	while (current_note != NULL){
    1404:	0c c0       	rjmp	.+24     	; 0x141e <check_note_list_head_pitch_b+0x3a>
		pitch_list[i] = current_note->pitch;
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	80 81       	ld	r24, Z
    140a:	db 01       	movw	r26, r22
    140c:	a9 0f       	add	r26, r25
    140e:	b1 1d       	adc	r27, r1
    1410:	8c 93       	st	X, r24
		
		current_note = current_note->previous_note_by_pitch;
    1412:	05 80       	ldd	r0, Z+5	; 0x05
    1414:	f6 81       	ldd	r31, Z+6	; 0x06
    1416:	e0 2d       	mov	r30, r0
		i++;
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	8a 83       	std	Y+2, r24	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->tail_pitch;
	
	i=0;
	while (current_note != NULL){
    141e:	30 97       	sbiw	r30, 0x00	; 0
    1420:	91 f7       	brne	.-28     	; 0x1406 <check_note_list_head_pitch_b+0x22>
		
		current_note = current_note->previous_note_by_pitch;
		i++;
	}
	
	i = 0;
    1422:	1a 82       	std	Y+2, r1	; 0x02
	
	return;
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <check_note_list_head_trigger_f>:

void check_note_list_head_trigger_f(NoteList* note_list, uint8_t* pitch_list){
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <check_note_list_head_trigger_f+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	fc 01       	movw	r30, r24
	
	volatile uint8_t list_count = note_list->count;
    143a:	80 81       	ld	r24, Z
    143c:	89 83       	std	Y+1, r24	; 0x01
	
	if (list_count == 0)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	88 23       	and	r24, r24
    1442:	a9 f0       	breq	.+42     	; 0x146e <check_note_list_head_trigger_f+0x40>
	    return;
	

	volatile uint8_t i = 0;
    1444:	1a 82       	std	Y+2, r1	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->head_trigger;
    1446:	06 80       	ldd	r0, Z+6	; 0x06
    1448:	f7 81       	ldd	r31, Z+7	; 0x07
    144a:	e0 2d       	mov	r30, r0
	
	i=0;
    144c:	1a 82       	std	Y+2, r1	; 0x02
	while (current_note != NULL){
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <check_note_list_head_trigger_f+0x3a>
		pitch_list[i] = current_note->pitch;
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	80 81       	ld	r24, Z
    1454:	db 01       	movw	r26, r22
    1456:	a9 0f       	add	r26, r25
    1458:	b1 1d       	adc	r27, r1
    145a:	8c 93       	st	X, r24
		
		current_note = current_note->next_note_by_trigger;
    145c:	07 80       	ldd	r0, Z+7	; 0x07
    145e:	f0 85       	ldd	r31, Z+8	; 0x08
    1460:	e0 2d       	mov	r30, r0
		i++;
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	8a 83       	std	Y+2, r24	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->head_trigger;
	
	i=0;
	while (current_note != NULL){
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	91 f7       	brne	.-28     	; 0x1450 <check_note_list_head_trigger_f+0x22>
		
		current_note = current_note->next_note_by_trigger;
		i++;
	}
	
	i = 0;
    146c:	1a 82       	std	Y+2, r1	; 0x02
	
	return;
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <check_note_list_head_trigger_b>:

void check_note_list_head_trigger_b(NoteList* note_list, uint8_t* pitch_list){
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <check_note_list_head_trigger_b+0x6>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	fc 01       	movw	r30, r24
	
	volatile uint8_t list_count = note_list->count;
    1484:	80 81       	ld	r24, Z
    1486:	89 83       	std	Y+1, r24	; 0x01
	
	if (list_count == 0)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 23       	and	r24, r24
    148c:	a9 f0       	breq	.+42     	; 0x14b8 <check_note_list_head_trigger_b+0x40>
	    return;
	

	volatile uint8_t i = 0;
    148e:	1a 82       	std	Y+2, r1	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->tail_trigger;
    1490:	00 84       	ldd	r0, Z+8	; 0x08
    1492:	f1 85       	ldd	r31, Z+9	; 0x09
    1494:	e0 2d       	mov	r30, r0
	
	i=0;
    1496:	1a 82       	std	Y+2, r1	; 0x02
	while (current_note != NULL){
    1498:	0c c0       	rjmp	.+24     	; 0x14b2 <check_note_list_head_trigger_b+0x3a>
		pitch_list[i] = current_note->pitch;
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	80 81       	ld	r24, Z
    149e:	db 01       	movw	r26, r22
    14a0:	a9 0f       	add	r26, r25
    14a2:	b1 1d       	adc	r27, r1
    14a4:	8c 93       	st	X, r24
		
		current_note = current_note->previous_note_by_trigger;
    14a6:	01 84       	ldd	r0, Z+9	; 0x09
    14a8:	f2 85       	ldd	r31, Z+10	; 0x0a
    14aa:	e0 2d       	mov	r30, r0
		i++;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	volatile Note* current_note;
	
	current_note = note_list->tail_trigger;
	
	i=0;
	while (current_note != NULL){
    14b2:	30 97       	sbiw	r30, 0x00	; 0
    14b4:	91 f7       	brne	.-28     	; 0x149a <check_note_list_head_trigger_b+0x22>
		
		current_note = current_note->previous_note_by_trigger;
		i++;
	}
	
	i = 0;
    14b6:	1a 82       	std	Y+2, r1	; 0x02
	
	return;
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <test_list>:

void test_list(){
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	c1 55       	subi	r28, 0x51	; 81
    14d8:	d0 40       	sbci	r29, 0x00	; 0
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	de bf       	out	0x3e, r29	; 62
	volatile uint8_t check_pitch_f[MAX_LIST_NOTES];
	volatile uint8_t check_pitch_b[MAX_LIST_NOTES];
	volatile uint8_t check_trigger_f[MAX_LIST_NOTES];
	volatile uint8_t check_trigger_b[MAX_LIST_NOTES];
	
	initialize_hardware();
    14de:	0e 94 18 03 	call	0x630	; 0x630 <initialize_hardware>
	initialize_note_list();
    14e2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <initialize_note_list>
	
	for (i=0; i< MAX_LIST_NOTES; i++)
    14e6:	19 82       	std	Y+1, r1	; 0x01
	    note_stream[i] = rand() % 100 + 100;
    14e8:	54 e6       	ldi	r21, 0x64	; 100
    14ea:	e5 2e       	mov	r14, r21
    14ec:	f1 2c       	mov	r15, r1
    14ee:	42 e0       	ldi	r20, 0x02	; 2
    14f0:	c4 2e       	mov	r12, r20
    14f2:	d1 2c       	mov	r13, r1
    14f4:	cc 0e       	add	r12, r28
    14f6:	dd 1e       	adc	r13, r29
	volatile uint8_t check_trigger_b[MAX_LIST_NOTES];
	
	initialize_hardware();
	initialize_note_list();
	
	for (i=0; i< MAX_LIST_NOTES; i++)
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <test_list+0x56>
	    note_stream[i] = rand() % 100 + 100;
    14fa:	09 81       	ldd	r16, Y+1	; 0x01
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <rand>
    1502:	b7 01       	movw	r22, r14
    1504:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
    1508:	8c 59       	subi	r24, 0x9C	; 156
    150a:	f6 01       	movw	r30, r12
    150c:	e0 0f       	add	r30, r16
    150e:	f1 1f       	adc	r31, r17
    1510:	80 83       	st	Z, r24
	volatile uint8_t check_trigger_b[MAX_LIST_NOTES];
	
	initialize_hardware();
	initialize_note_list();
	
	for (i=0; i< MAX_LIST_NOTES; i++)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	80 31       	cpi	r24, 0x10	; 16
    151c:	70 f3       	brcs	.-36     	; 0x14fa <test_list+0x38>
	    note_stream[i] = rand() % 100 + 100;
		
	for (i=0; i<MAX_LIST_NOTES; i++){
    151e:	19 82       	std	Y+1, r1	; 0x01
	    add_note_in_full_order(get_note_list(), note_stream[i], note_stream[i]);
    1520:	8e 01       	movw	r16, r28
    1522:	0e 5f       	subi	r16, 0xFE	; 254
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
	initialize_note_list();
	
	for (i=0; i< MAX_LIST_NOTES; i++)
	    note_stream[i] = rand() % 100 + 100;
		
	for (i=0; i<MAX_LIST_NOTES; i++){
    1526:	11 c0       	rjmp	.+34     	; 0x154a <test_list+0x88>
	    add_note_in_full_order(get_note_list(), note_stream[i], note_stream[i]);
    1528:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
    152c:	29 81       	ldd	r18, Y+1	; 0x01
    152e:	f8 01       	movw	r30, r16
    1530:	e2 0f       	add	r30, r18
    1532:	f1 1d       	adc	r31, r1
    1534:	60 81       	ld	r22, Z
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	f8 01       	movw	r30, r16
    153a:	e2 0f       	add	r30, r18
    153c:	f1 1d       	adc	r31, r1
    153e:	40 81       	ld	r20, Z
    1540:	0e 94 16 05 	call	0xa2c	; 0xa2c <add_note_in_full_order>
	initialize_note_list();
	
	for (i=0; i< MAX_LIST_NOTES; i++)
	    note_stream[i] = rand() % 100 + 100;
		
	for (i=0; i<MAX_LIST_NOTES; i++){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	80 31       	cpi	r24, 0x10	; 16
    154e:	60 f3       	brcs	.-40     	; 0x1528 <test_list+0x66>
	    add_note_in_full_order(get_note_list(), note_stream[i], note_stream[i]);
	}		
	
		
    check_note_list_head_pitch_f(get_note_list(), check_pitch_f);
    1550:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
    1554:	be 01       	movw	r22, r28
    1556:	6e 5e       	subi	r22, 0xEE	; 238
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	0e 94 cd 09 	call	0x139a	; 0x139a <check_note_list_head_pitch_f>
	check_note_list_head_pitch_b(get_note_list(), check_pitch_b);
    155e:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
    1562:	be 01       	movw	r22, r28
    1564:	6e 5d       	subi	r22, 0xDE	; 222
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <check_note_list_head_pitch_b>
    check_note_list_head_trigger_f(get_note_list(), check_trigger_f);
    156c:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
    1570:	be 01       	movw	r22, r28
    1572:	6e 5c       	subi	r22, 0xCE	; 206
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	0e 94 17 0a 	call	0x142e	; 0x142e <check_note_list_head_trigger_f>
	check_note_list_head_trigger_b(get_note_list(), check_trigger_b);
    157a:	0e 94 13 05 	call	0xa26	; 0xa26 <get_note_list>
    157e:	be 01       	movw	r22, r28
    1580:	6e 5b       	subi	r22, 0xBE	; 190
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	0e 94 3c 0a 	call	0x1478	; 0x1478 <check_note_list_head_trigger_b>
	
	return;

}
    1588:	cf 5a       	subi	r28, 0xAF	; 175
    158a:	df 4f       	sbci	r29, 0xFF	; 255
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	08 95       	ret

000015a2 <main>:

int main(void) {


	test_list();
    15a2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <test_list>
   
	return 0;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	08 95       	ret

000015ac <generic_noteon_callback>:
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}

void generic_noteon_callback(MidiDevice * device, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	26 97       	sbiw	r28, 0x06	; 6
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	6c 83       	std	Y+4, r22	; 0x04
    15bc:	4d 83       	std	Y+5, r20	; 0x05
    15be:	2e 83       	std	Y+6, r18	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
    15c0:	de 01       	movw	r26, r28
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	fe 01       	movw	r30, r28
    15c6:	34 96       	adiw	r30, 0x04	; 4
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	01 90       	ld	r0, Z+
    15cc:	0d 92       	st	X+, r0
    15ce:	81 50       	subi	r24, 0x01	; 1
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <generic_noteon_callback+0x1e>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
    15d2:	80 91 93 22 	lds	r24, 0x2293
    15d6:	8f 3f       	cpi	r24, 0xFF	; 255
    15d8:	31 f0       	breq	.+12     	; 0x15e6 <generic_noteon_callback+0x3a>
		j++;
    15da:	80 91 93 22 	lds	r24, 0x2293
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	80 93 93 22 	sts	0x2293, r24
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <generic_noteon_callback+0x3e>
	else
		j = 0;
    15e6:	10 92 93 22 	sts	0x2293, r1
	

}
    15ea:	26 96       	adiw	r28, 0x06	; 6
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <generic_catchall_callback>:

void generic_catchall_callback(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    15f6:	0f 93       	push	r16
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	26 97       	sbiw	r28, 0x06	; 6
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	4c 83       	std	Y+4, r20	; 0x04
    1608:	2d 83       	std	Y+5, r18	; 0x05
    160a:	0e 83       	std	Y+6, r16	; 0x06
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
    160c:	de 01       	movw	r26, r28
    160e:	11 96       	adiw	r26, 0x01	; 1
    1610:	fe 01       	movw	r30, r28
    1612:	34 96       	adiw	r30, 0x04	; 4
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	01 90       	ld	r0, Z+
    1618:	0d 92       	st	X+, r0
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	e1 f7       	brne	.-8      	; 0x1616 <generic_catchall_callback+0x20>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
    161e:	80 91 92 22 	lds	r24, 0x2292
    1622:	8f 3f       	cpi	r24, 0xFF	; 255
    1624:	31 f0       	breq	.+12     	; 0x1632 <generic_catchall_callback+0x3c>
		j++;
    1626:	80 91 92 22 	lds	r24, 0x2292
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	80 93 92 22 	sts	0x2292, r24
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <generic_catchall_callback+0x40>
	else
		j = 0;
    1632:	10 92 92 22 	sts	0x2292, r1
	

    1636:	26 96       	adiw	r28, 0x06	; 6
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <serial_midi_send>:

#define MIDI_CHAN 0

static MidiDevice midi_device;

void serial_midi_send(MidiDevice* device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
    1644:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1646:	80 91 b1 09 	lds	r24, 0x09B1
    164a:	85 ff       	sbrs	r24, 5
    164c:	fc cf       	rjmp	.-8      	; 0x1646 <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
    164e:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
    1652:	62 30       	cpi	r22, 0x02	; 2
    1654:	70 f0       	brcs	.+28     	; 0x1672 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1656:	80 91 b1 09 	lds	r24, 0x09B1
    165a:	85 ff       	sbrs	r24, 5
    165c:	fc cf       	rjmp	.-8      	; 0x1656 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
    165e:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
    1662:	63 30       	cpi	r22, 0x03	; 3
    1664:	31 f4       	brne	.+12     	; 0x1672 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
    1666:	80 91 b1 09 	lds	r24, 0x09B1
    166a:	85 ff       	sbrs	r24, 5
    166c:	fc cf       	rjmp	.-8      	; 0x1666 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
    166e:	00 93 b0 09 	sts	0x09B0, r16
   }
}
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <serial_midi_device>:

MidiDevice * serial_midi_device() {
   return &midi_device;
}
    1676:	84 e9       	ldi	r24, 0x94	; 148
    1678:	92 e2       	ldi	r25, 0x22	; 34
    167a:	08 95       	ret

0000167c <serial_midi_init>:

void serial_midi_init(){
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
    1680:	c4 e9       	ldi	r28, 0x94	; 148
    1682:	d2 e2       	ldi	r29, 0x22	; 34
    1684:	ce 01       	movw	r24, r28
    1686:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <midi_device_init>
   midi_register_noteon_callback(&midi_device, generic_noteon_callback);
    168a:	ce 01       	movw	r24, r28
    168c:	66 ed       	ldi	r22, 0xD6	; 214
    168e:	7a e0       	ldi	r23, 0x0A	; 10
    1690:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <midi_register_noteon_callback>
   midi_register_catchall_callback(&midi_device, generic_catchall_callback);
    1694:	ce 01       	movw	r24, r28
    1696:	6b ef       	ldi	r22, 0xFB	; 251
    1698:	7a e0       	ldi	r23, 0x0A	; 10
    169a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <midi_register_catchall_callback>
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    16a4:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    16a6:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    16a8:	63 83       	std	Z+3, r22	; 0x03
    16aa:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
    16ac:	11 82       	std	Z+1, r1	; 0x01
    16ae:	10 82       	st	Z, r1
}
    16b0:	08 95       	ret

000016b2 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
    16bc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    16be:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <store_and_clear_interrupt>
    16c2:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    16c4:	29 81       	ldd	r18, Y+1	; 0x01
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	c9 01       	movw	r24, r18
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	6a 81       	ldd	r22, Y+2	; 0x02
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
    16d4:	48 81       	ld	r20, Y
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	84 17       	cp	r24, r20
    16da:	95 07       	cpc	r25, r21
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
    16de:	80 2f       	mov	r24, r16
    16e0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
      return false;
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	13 c0       	rjmp	.+38     	; 0x170e <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
    16e8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ea:	fc 81       	ldd	r31, Y+4	; 0x04
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    16f2:	29 81       	ldd	r18, Y+1	; 0x01
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	6a 81       	ldd	r22, Y+2	; 0x02
    16fc:	c9 01       	movw	r24, r18
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
    1704:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1706:	80 2f       	mov	r24, r16
    1708:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
      return true;
    170c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1720:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	98 81       	ld	r25, Y
    1728:	29 17       	cp	r18, r25
    172a:	10 f0       	brcs	.+4      	; 0x1730 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    172c:	12 2f       	mov	r17, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
    1730:	1a 81       	ldd	r17, Y+2	; 0x02
    1732:	12 0f       	add	r17, r18
    1734:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
    1736:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
   return len;
}
    173a:	81 2f       	mov	r24, r17
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	08 95       	ret

00001744 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1744:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1746:	80 81       	ld	r24, Z
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	86 0f       	add	r24, r22
    174c:	91 1d       	adc	r25, r1
    174e:	62 81       	ldd	r22, Z+2	; 0x02
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
    1756:	03 80       	ldd	r0, Z+3	; 0x03
    1758:	f4 81       	ldd	r31, Z+4	; 0x04
    175a:	e0 2d       	mov	r30, r0
    175c:	e8 0f       	add	r30, r24
    175e:	f9 1f       	adc	r31, r25
}
    1760:	80 81       	ld	r24, Z
    1762:	08 95       	ret

00001764 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
    1774:	69 83       	std	Y+1, r22	; 0x01
    1776:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <store_and_clear_interrupt>
    177a:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    177c:	f8 01       	movw	r30, r16
    177e:	20 81       	ld	r18, Z
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	69 81       	ldd	r22, Y+1	; 0x01
    1784:	26 0f       	add	r18, r22
    1786:	31 1d       	adc	r19, r1
    1788:	62 81       	ldd	r22, Z+2	; 0x02
    178a:	c9 01       	movw	r24, r18
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodhi4>
    1792:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
    1794:	84 2f       	mov	r24, r20
    1796:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <restore_interrupt_setting>
}
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
    17a6:	8f b7       	in	r24, 0x3f	; 63
    cli();
    17a8:	f8 94       	cli
    return sreg;
}
    17aa:	08 95       	ret

000017ac <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
    17ac:	8f bf       	out	0x3f, r24	; 63
}
    17ae:	08 95       	ret

000017b0 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    17b0:	88 1f       	adc	r24, r24
    17b2:	88 27       	eor	r24, r24
    17b4:	88 1f       	adc	r24, r24
    17b6:	08 95       	ret

000017b8 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	88 3f       	cpi	r24, 0xF8	; 248
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <midi_is_realtime+0x8>
    17be:	90 e0       	ldi	r25, 0x00	; 0
}
    17c0:	89 2f       	mov	r24, r25
    17c2:	08 95       	ret

000017c4 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	20 7f       	andi	r18, 0xF0	; 240
    17ca:	30 70       	andi	r19, 0x00	; 0
    17cc:	20 3b       	cpi	r18, 0xB0	; 176
    17ce:	31 05       	cpc	r19, r1
    17d0:	f1 f0       	breq	.+60     	; 0x180e <midi_packet_length+0x4a>
    17d2:	21 3b       	cpi	r18, 0xB1	; 177
    17d4:	31 05       	cpc	r19, r1
    17d6:	54 f4       	brge	.+20     	; 0x17ec <midi_packet_length+0x28>
    17d8:	20 39       	cpi	r18, 0x90	; 144
    17da:	31 05       	cpc	r19, r1
    17dc:	c1 f0       	breq	.+48     	; 0x180e <midi_packet_length+0x4a>
    17de:	20 3a       	cpi	r18, 0xA0	; 160
    17e0:	31 05       	cpc	r19, r1
    17e2:	a9 f0       	breq	.+42     	; 0x180e <midi_packet_length+0x4a>
    17e4:	20 38       	cpi	r18, 0x80	; 128
    17e6:	31 05       	cpc	r19, r1
    17e8:	e9 f4       	brne	.+58     	; 0x1824 <midi_packet_length+0x60>
    17ea:	11 c0       	rjmp	.+34     	; 0x180e <midi_packet_length+0x4a>
    17ec:	20 3d       	cpi	r18, 0xD0	; 208
    17ee:	31 05       	cpc	r19, r1
    17f0:	d9 f0       	breq	.+54     	; 0x1828 <midi_packet_length+0x64>
    17f2:	21 3d       	cpi	r18, 0xD1	; 209
    17f4:	31 05       	cpc	r19, r1
    17f6:	24 f4       	brge	.+8      	; 0x1800 <midi_packet_length+0x3c>
    17f8:	20 3c       	cpi	r18, 0xC0	; 192
    17fa:	31 05       	cpc	r19, r1
    17fc:	99 f4       	brne	.+38     	; 0x1824 <midi_packet_length+0x60>
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <midi_packet_length+0x64>
    1800:	20 3e       	cpi	r18, 0xE0	; 224
    1802:	31 05       	cpc	r19, r1
    1804:	21 f0       	breq	.+8      	; 0x180e <midi_packet_length+0x4a>
    1806:	20 3f       	cpi	r18, 0xF0	; 240
    1808:	31 05       	cpc	r19, r1
    180a:	61 f4       	brne	.+24     	; 0x1824 <midi_packet_length+0x60>
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1812:	e8 2f       	mov	r30, r24
    1814:	e1 5f       	subi	r30, 0xF1	; 241
    1816:	ef 30       	cpi	r30, 0x0F	; 15
    1818:	48 f4       	brcc	.+18     	; 0x182c <midi_packet_length+0x68>
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	e0 5c       	subi	r30, 0xC0	; 192
    181e:	ff 4d       	sbci	r31, 0xDF	; 223
    1820:	80 81       	ld	r24, Z
    1822:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	08 95       	ret
    182c:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    182e:	08 95       	ret

00001830 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1830:	0f 93       	push	r16
    1832:	36 2f       	mov	r19, r22
    1834:	54 2f       	mov	r21, r20
    1836:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1838:	3f 70       	andi	r19, 0x0F	; 15
    183a:	30 6b       	ori	r19, 0xB0	; 176
    183c:	5f 77       	andi	r21, 0x7F	; 127
    183e:	0f 77       	andi	r16, 0x7F	; 127
    1840:	dc 01       	movw	r26, r24
    1842:	ed 91       	ld	r30, X+
    1844:	fc 91       	ld	r31, X
    1846:	63 e0       	ldi	r22, 0x03	; 3
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	43 2f       	mov	r20, r19
    184c:	25 2f       	mov	r18, r21
    184e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1850:	0f 91       	pop	r16
    1852:	08 95       	ret

00001854 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1854:	0f 93       	push	r16
    1856:	36 2f       	mov	r19, r22
    1858:	54 2f       	mov	r21, r20
    185a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    185c:	3f 70       	andi	r19, 0x0F	; 15
    185e:	30 69       	ori	r19, 0x90	; 144
    1860:	5f 77       	andi	r21, 0x7F	; 127
    1862:	0f 77       	andi	r16, 0x7F	; 127
    1864:	dc 01       	movw	r26, r24
    1866:	ed 91       	ld	r30, X+
    1868:	fc 91       	ld	r31, X
    186a:	63 e0       	ldi	r22, 0x03	; 3
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	43 2f       	mov	r20, r19
    1870:	25 2f       	mov	r18, r21
    1872:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1878:	0f 93       	push	r16
    187a:	36 2f       	mov	r19, r22
    187c:	54 2f       	mov	r21, r20
    187e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1880:	3f 70       	andi	r19, 0x0F	; 15
    1882:	30 68       	ori	r19, 0x80	; 128
    1884:	5f 77       	andi	r21, 0x7F	; 127
    1886:	0f 77       	andi	r16, 0x7F	; 127
    1888:	dc 01       	movw	r26, r24
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	63 e0       	ldi	r22, 0x03	; 3
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	43 2f       	mov	r20, r19
    1894:	25 2f       	mov	r18, r21
    1896:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    189c:	0f 93       	push	r16
    189e:	36 2f       	mov	r19, r22
    18a0:	54 2f       	mov	r21, r20
    18a2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    18a4:	3f 70       	andi	r19, 0x0F	; 15
    18a6:	30 6a       	ori	r19, 0xA0	; 160
    18a8:	5f 77       	andi	r21, 0x7F	; 127
    18aa:	0f 77       	andi	r16, 0x7F	; 127
    18ac:	dc 01       	movw	r26, r24
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	63 e0       	ldi	r22, 0x03	; 3
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	43 2f       	mov	r20, r19
    18b8:	25 2f       	mov	r18, r21
    18ba:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    18c6:	20 e2       	ldi	r18, 0x20	; 32
    18c8:	40 30       	cpi	r20, 0x00	; 0
    18ca:	52 07       	cpc	r21, r18
    18cc:	3c f4       	brge	.+14     	; 0x18dc <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    18ce:	a0 ee       	ldi	r26, 0xE0	; 224
    18d0:	40 30       	cpi	r20, 0x00	; 0
    18d2:	5a 07       	cpc	r21, r26
    18d4:	34 f0       	brlt	.+12     	; 0x18e2 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    18d6:	00 50       	subi	r16, 0x00	; 0
    18d8:	10 4e       	sbci	r17, 0xE0	; 224
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    18dc:	0f ef       	ldi	r16, 0xFF	; 255
    18de:	1f e3       	ldi	r17, 0x3F	; 63
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    18e6:	46 2f       	mov	r20, r22
    18e8:	4f 70       	andi	r20, 0x0F	; 15
    18ea:	40 6e       	ori	r20, 0xE0	; 224
    18ec:	20 2f       	mov	r18, r16
    18ee:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    18f0:	00 0f       	add	r16, r16
    18f2:	01 2f       	mov	r16, r17
    18f4:	00 1f       	adc	r16, r16
    18f6:	11 0b       	sbc	r17, r17
    18f8:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    18fa:	0f 77       	andi	r16, 0x7F	; 127
    18fc:	dc 01       	movw	r26, r24
    18fe:	ed 91       	ld	r30, X+
    1900:	fc 91       	ld	r31, X
    1902:	63 e0       	ldi	r22, 0x03	; 3
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    190e:	0f 93       	push	r16
    1910:	36 2f       	mov	r19, r22
    1912:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1914:	3f 70       	andi	r19, 0x0F	; 15
    1916:	30 6c       	ori	r19, 0xC0	; 192
    1918:	2f 77       	andi	r18, 0x7F	; 127
    191a:	dc 01       	movw	r26, r24
    191c:	ed 91       	ld	r30, X+
    191e:	fc 91       	ld	r31, X
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	43 2f       	mov	r20, r19
    1926:	00 e0       	ldi	r16, 0x00	; 0
    1928:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    192e:	0f 93       	push	r16
    1930:	36 2f       	mov	r19, r22
    1932:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1934:	3f 70       	andi	r19, 0x0F	; 15
    1936:	30 6d       	ori	r19, 0xD0	; 208
    1938:	2f 77       	andi	r18, 0x7F	; 127
    193a:	dc 01       	movw	r26, r24
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	43 2f       	mov	r20, r19
    1946:	00 e0       	ldi	r16, 0x00	; 0
    1948:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    194e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1950:	dc 01       	movw	r26, r24
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	48 ef       	ldi	r20, 0xF8	; 248
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	00 e0       	ldi	r16, 0x00	; 0
    1960:	09 95       	icall
}
    1962:	0f 91       	pop	r16
    1964:	08 95       	ret

00001966 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1966:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1968:	dc 01       	movw	r26, r24
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	49 ef       	ldi	r20, 0xF9	; 249
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	09 95       	icall
}
    197a:	0f 91       	pop	r16
    197c:	08 95       	ret

0000197e <midi_send_start>:

void midi_send_start(MidiDevice * device){
    197e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1980:	dc 01       	movw	r26, r24
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	09 95       	icall
}
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1996:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1998:	dc 01       	movw	r26, r24
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	4b ef       	ldi	r20, 0xFB	; 251
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	00 e0       	ldi	r16, 0x00	; 0
    19a8:	09 95       	icall
}
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    19ae:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    19b0:	dc 01       	movw	r26, r24
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	4c ef       	ldi	r20, 0xFC	; 252
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	00 e0       	ldi	r16, 0x00	; 0
    19c0:	09 95       	icall
}
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    19c6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    19c8:	dc 01       	movw	r26, r24
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	4e ef       	ldi	r20, 0xFE	; 254
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	00 e0       	ldi	r16, 0x00	; 0
    19d8:	09 95       	icall
}
    19da:	0f 91       	pop	r16
    19dc:	08 95       	ret

000019de <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    19de:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    19e0:	dc 01       	movw	r26, r24
    19e2:	ed 91       	ld	r30, X+
    19e4:	fc 91       	ld	r31, X
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	4f ef       	ldi	r20, 0xFF	; 255
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	09 95       	icall
}
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    19f6:	0f 93       	push	r16
    19f8:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    19fa:	2f 77       	andi	r18, 0x7F	; 127
    19fc:	dc 01       	movw	r26, r24
    19fe:	ed 91       	ld	r30, X+
    1a00:	fc 91       	ld	r31, X
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	41 ef       	ldi	r20, 0xF1	; 241
    1a08:	00 e0       	ldi	r16, 0x00	; 0
    1a0a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
   device->send_func(device, 3,
    1a14:	26 2f       	mov	r18, r22
    1a16:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1a18:	8b 01       	movw	r16, r22
    1a1a:	00 0f       	add	r16, r16
    1a1c:	01 2f       	mov	r16, r17
    1a1e:	00 1f       	adc	r16, r16
    1a20:	11 0b       	sbc	r17, r17
    1a22:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1a24:	0f 77       	andi	r16, 0x7F	; 127
    1a26:	dc 01       	movw	r26, r24
    1a28:	ed 91       	ld	r30, X+
    1a2a:	fc 91       	ld	r31, X
    1a2c:	63 e0       	ldi	r22, 0x03	; 3
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	42 ef       	ldi	r20, 0xF2	; 242
    1a32:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1a3a:	0f 93       	push	r16
    1a3c:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    1a3e:	2f 77       	andi	r18, 0x7F	; 127
    1a40:	dc 01       	movw	r26, r24
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	43 ef       	ldi	r20, 0xF3	; 243
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1a54:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1a56:	dc 01       	movw	r26, r24
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	46 ef       	ldi	r20, 0xF6	; 246
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	00 e0       	ldi	r16, 0x00	; 0
    1a66:	09 95       	icall
}
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1a6c:	0f 93       	push	r16
    1a6e:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1a70:	dc 01       	movw	r26, r24
    1a72:	ed 91       	ld	r30, X+
    1a74:	fc 91       	ld	r31, X
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	09 95       	icall
}
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1a84:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1a86:	dc 01       	movw	r26, r24
    1a88:	ed 91       	ld	r30, X+
    1a8a:	fc 91       	ld	r31, X
    1a8c:	09 95       	icall
}
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1a92:	fc 01       	movw	r30, r24
    1a94:	62 83       	std	Z+2, r22	; 0x02
    1a96:	73 83       	std	Z+3, r23	; 0x03
}
    1a98:	08 95       	ret

00001a9a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	64 83       	std	Z+4, r22	; 0x04
    1a9e:	75 83       	std	Z+5, r23	; 0x05
}
    1aa0:	08 95       	ret

00001aa2 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	66 83       	std	Z+6, r22	; 0x06
    1aa6:	77 83       	std	Z+7, r23	; 0x07
}
    1aa8:	08 95       	ret

00001aaa <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	60 87       	std	Z+8, r22	; 0x08
    1aae:	71 87       	std	Z+9, r23	; 0x09
}
    1ab0:	08 95       	ret

00001ab2 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	62 87       	std	Z+10, r22	; 0x0a
    1ab6:	73 87       	std	Z+11, r23	; 0x0b
}
    1ab8:	08 95       	ret

00001aba <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1aba:	fc 01       	movw	r30, r24
    1abc:	64 87       	std	Z+12, r22	; 0x0c
    1abe:	75 87       	std	Z+13, r23	; 0x0d
}
    1ac0:	08 95       	ret

00001ac2 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	66 87       	std	Z+14, r22	; 0x0e
    1ac6:	77 87       	std	Z+15, r23	; 0x0f
}
    1ac8:	08 95       	ret

00001aca <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1aca:	fc 01       	movw	r30, r24
    1acc:	60 8b       	std	Z+16, r22	; 0x10
    1ace:	71 8b       	std	Z+17, r23	; 0x11
}
    1ad0:	08 95       	ret

00001ad2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	62 8b       	std	Z+18, r22	; 0x12
    1ad6:	73 8b       	std	Z+19, r23	; 0x13
}
    1ad8:	08 95       	ret

00001ada <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1ada:	fc 01       	movw	r30, r24
    1adc:	64 8b       	std	Z+20, r22	; 0x14
    1ade:	75 8b       	std	Z+21, r23	; 0x15
}
    1ae0:	08 95       	ret

00001ae2 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	66 8b       	std	Z+22, r22	; 0x16
    1ae6:	77 8b       	std	Z+23, r23	; 0x17
}
    1ae8:	08 95       	ret

00001aea <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1aea:	fc 01       	movw	r30, r24
    1aec:	60 8f       	std	Z+24, r22	; 0x18
    1aee:	71 8f       	std	Z+25, r23	; 0x19
}
    1af0:	08 95       	ret

00001af2 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1af2:	fc 01       	movw	r30, r24
    1af4:	62 8f       	std	Z+26, r22	; 0x1a
    1af6:	73 8f       	std	Z+27, r23	; 0x1b
}
    1af8:	08 95       	ret

00001afa <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1afa:	fc 01       	movw	r30, r24
    1afc:	64 8f       	std	Z+28, r22	; 0x1c
    1afe:	75 8f       	std	Z+29, r23	; 0x1d
}
    1b00:	08 95       	ret

00001b02 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1b02:	fc 01       	movw	r30, r24
    1b04:	66 8f       	std	Z+30, r22	; 0x1e
    1b06:	77 8f       	std	Z+31, r23	; 0x1f
}
    1b08:	08 95       	ret

00001b0a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1b10:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1b12:	1e a2       	std	Y+38, r1	; 0x26
    1b14:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1b16:	bc 01       	movw	r22, r24
    1b18:	68 5d       	subi	r22, 0xD8	; 216
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	88 51       	subi	r24, 0x18	; 24
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	40 ec       	ldi	r20, 0xC0	; 192
    1b22:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1b26:	1a 82       	std	Y+2, r1	; 0x02
    1b28:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    1b2a:	1c 82       	std	Y+4, r1	; 0x04
    1b2c:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    1b2e:	1e 82       	std	Y+6, r1	; 0x06
    1b30:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1b32:	18 86       	std	Y+8, r1	; 0x08
    1b34:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1b36:	1a 86       	std	Y+10, r1	; 0x0a
    1b38:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    1b3a:	1c 86       	std	Y+12, r1	; 0x0c
    1b3c:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    1b3e:	1e 86       	std	Y+14, r1	; 0x0e
    1b40:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1b42:	18 8a       	std	Y+16, r1	; 0x10
    1b44:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1b46:	1a 8a       	std	Y+18, r1	; 0x12
    1b48:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    1b4a:	1c 8a       	std	Y+20, r1	; 0x14
    1b4c:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    1b4e:	1e 8a       	std	Y+22, r1	; 0x16
    1b50:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1b52:	18 8e       	std	Y+24, r1	; 0x18
    1b54:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1b56:	1a 8e       	std	Y+26, r1	; 0x1a
    1b58:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    1b5a:	1c 8e       	std	Y+28, r1	; 0x1c
    1b5c:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    1b5e:	1e 8e       	std	Y+30, r1	; 0x1e
    1b60:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    1b62:	18 a2       	std	Y+32, r1	; 0x20
    1b64:	19 a2       	std	Y+33, r1	; 0x21
}
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	08 95       	ret

00001b6c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1b82:	e4 2f       	mov	r30, r20
    1b84:	f5 2f       	mov	r31, r21
    1b86:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    1b88:	8c 01       	movw	r16, r24
    1b8a:	08 51       	subi	r16, 0x18	; 24
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1b8e:	08 c0       	rjmp	.+16     	; 0x1ba0 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    1b90:	f6 01       	movw	r30, r12
    1b92:	61 91       	ld	r22, Z+
    1b94:	6f 01       	movw	r12, r30
    1b96:	c8 01       	movw	r24, r16
    1b98:	49 83       	std	Y+1, r20	; 0x01
    1b9a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <bytequeue_enqueue>
    1b9e:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    1ba0:	8c 2d       	mov	r24, r12
    1ba2:	84 1b       	sub	r24, r20
    1ba4:	8f 15       	cp	r24, r15
    1ba6:	a0 f3       	brcs	.-24     	; 0x1b90 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    1bba:	fc 01       	movw	r30, r24
    1bbc:	60 83       	st	Z, r22
    1bbe:	71 83       	std	Z+1, r23	; 0x01
}
    1bc0:	08 95       	ret

00001bc2 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	60 a3       	std	Z+32, r22	; 0x20
    1bc6:	71 a3       	std	Z+33, r23	; 0x21
}
    1bc8:	08 95       	ret

00001bca <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
    1bdc:	6b 01       	movw	r12, r22
    1bde:	14 2f       	mov	r17, r20
    1be0:	e2 2e       	mov	r14, r18
    1be2:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1be4:	8d a1       	ldd	r24, Y+37	; 0x25
    1be6:	84 30       	cpi	r24, 0x04	; 4
    1be8:	31 f4       	brne	.+12     	; 0x1bf6 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    1bea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bec:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bee:	30 97       	sbiw	r30, 0x00	; 0
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <midi_input_callbacks+0x2a>
    1bf2:	83 c0       	rjmp	.+262    	; 0x1cfa <midi_input_callbacks+0x130>
    1bf4:	95 c0       	rjmp	.+298    	; 0x1d20 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1bf6:	62 30       	cpi	r22, 0x02	; 2
    1bf8:	71 05       	cpc	r23, r1
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <midi_input_callbacks+0x34>
    1bfc:	42 c0       	rjmp	.+132    	; 0x1c82 <midi_input_callbacks+0xb8>
    1bfe:	63 30       	cpi	r22, 0x03	; 3
    1c00:	71 05       	cpc	r23, r1
    1c02:	29 f0       	breq	.+10     	; 0x1c0e <midi_input_callbacks+0x44>
    1c04:	61 30       	cpi	r22, 0x01	; 1
    1c06:	71 05       	cpc	r23, r1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <midi_input_callbacks+0x42>
    1c0a:	73 c0       	rjmp	.+230    	; 0x1cf2 <midi_input_callbacks+0x128>
    1c0c:	60 c0       	rjmp	.+192    	; 0x1cce <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1c0e:	84 2f       	mov	r24, r20
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	80 7f       	andi	r24, 0xF0	; 240
    1c14:	90 70       	andi	r25, 0x00	; 0
    1c16:	80 3a       	cpi	r24, 0xA0	; 160
    1c18:	91 05       	cpc	r25, r1
    1c1a:	e1 f0       	breq	.+56     	; 0x1c54 <midi_input_callbacks+0x8a>
    1c1c:	81 3a       	cpi	r24, 0xA1	; 161
    1c1e:	91 05       	cpc	r25, r1
    1c20:	3c f4       	brge	.+14     	; 0x1c30 <midi_input_callbacks+0x66>
    1c22:	80 38       	cpi	r24, 0x80	; 128
    1c24:	91 05       	cpc	r25, r1
    1c26:	99 f0       	breq	.+38     	; 0x1c4e <midi_input_callbacks+0x84>
    1c28:	80 39       	cpi	r24, 0x90	; 144
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	f9 f4       	brne	.+62     	; 0x1c6c <midi_input_callbacks+0xa2>
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <midi_input_callbacks+0x7e>
    1c30:	80 3e       	cpi	r24, 0xE0	; 224
    1c32:	91 05       	cpc	r25, r1
    1c34:	91 f0       	breq	.+36     	; 0x1c5a <midi_input_callbacks+0x90>
    1c36:	80 3f       	cpi	r24, 0xF0	; 240
    1c38:	91 05       	cpc	r25, r1
    1c3a:	91 f0       	breq	.+36     	; 0x1c60 <midi_input_callbacks+0x96>
    1c3c:	80 3b       	cpi	r24, 0xB0	; 176
    1c3e:	91 05       	cpc	r25, r1
    1c40:	a9 f4       	brne	.+42     	; 0x1c6c <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1c42:	ea 81       	ldd	r30, Y+2	; 0x02
    1c44:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1c48:	ec 81       	ldd	r30, Y+4	; 0x04
    1c4a:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    1c4c:	11 c0       	rjmp	.+34     	; 0x1c70 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    1c4e:	ee 81       	ldd	r30, Y+6	; 0x06
    1c50:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1c52:	0e c0       	rjmp	.+28     	; 0x1c70 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1c54:	e8 85       	ldd	r30, Y+8	; 0x08
    1c56:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1c58:	0b c0       	rjmp	.+22     	; 0x1c70 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    1c5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c5c:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    1c60:	42 3f       	cpi	r20, 0xF2	; 242
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <midi_input_callbacks+0x9c>
    1c64:	5d c0       	rjmp	.+186    	; 0x1d20 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    1c66:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c68:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    1c6c:	e0 e0       	ldi	r30, 0x00	; 0
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <midi_input_callbacks+0xac>
    1c74:	55 c0       	rjmp	.+170    	; 0x1d20 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    1c76:	ce 01       	movw	r24, r28
    1c78:	61 2f       	mov	r22, r17
    1c7a:	4e 2d       	mov	r20, r14
    1c7c:	2f 2d       	mov	r18, r15
    1c7e:	09 95       	icall
    1c80:	42 c0       	rjmp	.+132    	; 0x1d06 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    1c82:	84 2f       	mov	r24, r20
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	80 7f       	andi	r24, 0xF0	; 240
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	80 3d       	cpi	r24, 0xD0	; 208
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	49 f0       	breq	.+18     	; 0x1ca2 <midi_input_callbacks+0xd8>
    1c90:	80 3f       	cpi	r24, 0xF0	; 240
    1c92:	91 05       	cpc	r25, r1
    1c94:	49 f0       	breq	.+18     	; 0x1ca8 <midi_input_callbacks+0xde>
    1c96:	80 3c       	cpi	r24, 0xC0	; 192
    1c98:	91 05       	cpc	r25, r1
    1c9a:	81 f4       	brne	.+32     	; 0x1cbc <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    1c9c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c9e:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    1ca2:	e8 89       	ldd	r30, Y+16	; 0x10
    1ca4:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    1ca6:	0c c0       	rjmp	.+24     	; 0x1cc0 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    1ca8:	43 3f       	cpi	r20, 0xF3	; 243
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    1cac:	ea 89       	ldd	r30, Y+18	; 0x12
    1cae:	fb 89       	ldd	r31, Y+19	; 0x13
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    1cb2:	41 3f       	cpi	r20, 0xF1	; 241
    1cb4:	a9 f5       	brne	.+106    	; 0x1d20 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    1cb6:	ec 89       	ldd	r30, Y+20	; 0x14
    1cb8:	fd 89       	ldd	r31, Y+21	; 0x15
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    1cbc:	e0 e0       	ldi	r30, 0x00	; 0
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1cc0:	30 97       	sbiw	r30, 0x00	; 0
    1cc2:	71 f1       	breq	.+92     	; 0x1d20 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	61 2f       	mov	r22, r17
    1cc8:	4e 2d       	mov	r20, r14
    1cca:	09 95       	icall
    1ccc:	1c c0       	rjmp	.+56     	; 0x1d06 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    1cce:	84 2f       	mov	r24, r20
    1cd0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <midi_is_realtime>
    1cd4:	88 23       	and	r24, r24
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1cd8:	ee 89       	ldd	r30, Y+22	; 0x16
    1cda:	ff 89       	ldd	r31, Y+23	; 0x17
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    1cde:	16 3f       	cpi	r17, 0xF6	; 246
    1ce0:	f9 f4       	brne	.+62     	; 0x1d20 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1ce2:	e8 8d       	ldd	r30, Y+24	; 0x18
    1ce4:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1ce6:	30 97       	sbiw	r30, 0x00	; 0
    1ce8:	d9 f0       	breq	.+54     	; 0x1d20 <midi_input_callbacks+0x156>
                  func(device, byte0);
    1cea:	ce 01       	movw	r24, r28
    1cec:	61 2f       	mov	r22, r17
    1cee:	09 95       	icall
    1cf0:	0a c0       	rjmp	.+20     	; 0x1d06 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1cf2:	64 30       	cpi	r22, 0x04	; 4
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	90 f4       	brcc	.+36     	; 0x1d1c <midi_input_callbacks+0x152>
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	41 2f       	mov	r20, r17
    1d00:	2e 2d       	mov	r18, r14
    1d02:	0f 2d       	mov	r16, r15
    1d04:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1d06:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d08:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	71 f0       	breq	.+28     	; 0x1d2a <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1d0e:	ce 01       	movw	r24, r28
    1d10:	b6 01       	movw	r22, r12
    1d12:	41 2f       	mov	r20, r17
    1d14:	2e 2d       	mov	r18, r14
    1d16:	0f 2d       	mov	r16, r15
    1d18:	09 95       	icall
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    1d1c:	cc 24       	eor	r12, r12
    1d1e:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1d20:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d22:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	49 f7       	brne	.-46     	; 0x1cfa <midi_input_callbacks+0x130>
    1d28:	ee cf       	rjmp	.-36     	; 0x1d06 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	08 95       	ret

00001d3c <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
    1d4a:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    1d4c:	86 2f       	mov	r24, r22
    1d4e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <midi_is_realtime>
    1d52:	88 23       	and	r24, r24
    1d54:	69 f0       	breq	.+26     	; 0x1d70 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1d56:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	41 2f       	mov	r20, r17
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	00 e0       	ldi	r16, 0x00	; 0
    1d68:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <midi_input_callbacks>
      device->input_state = state;
    1d6c:	ed a2       	std	Y+37, r14	; 0x25
    1d6e:	7e c0       	rjmp	.+252    	; 0x1e6c <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    1d70:	81 2f       	mov	r24, r17
    1d72:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <midi_is_statusbyte>
    1d76:	4d a1       	ldd	r20, Y+37	; 0x25
    1d78:	88 23       	and	r24, r24
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <midi_process_byte+0x42>
    1d7c:	42 c0       	rjmp	.+132    	; 0x1e02 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    1d7e:	44 30       	cpi	r20, 0x04	; 4
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    1d82:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	8e a3       	std	Y+38, r24	; 0x26
    1d8a:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <midi_packet_length>
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <midi_process_byte+0x68>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	78 f0       	brcs	.+30     	; 0x1db8 <midi_process_byte+0x7c>
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	59 f0       	breq	.+22     	; 0x1db4 <midi_process_byte+0x78>
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	61 f5       	brne	.+88     	; 0x1dfa <midi_process_byte+0xbe>
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    1da4:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    1da6:	ce 01       	movw	r24, r28
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	41 2f       	mov	r20, r17
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	00 e0       	ldi	r16, 0x00	; 0
    1db2:	1f c0       	rjmp	.+62     	; 0x1df2 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    1db4:	8d a3       	std	Y+37, r24	; 0x25
            break;
    1db6:	5a c0       	rjmp	.+180    	; 0x1e6c <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    1db8:	10 3f       	cpi	r17, 0xF0	; 240
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <midi_process_byte+0x86>
    1dbc:	17 3f       	cpi	r17, 0xF7	; 247
    1dbe:	e9 f4       	brne	.+58     	; 0x1dfa <midi_process_byte+0xbe>
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1dc2:	84 e0       	ldi	r24, 0x04	; 4
    1dc4:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1dc6:	1a a3       	std	Y+34, r17	; 0x22
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    1dca:	2e a1       	ldd	r18, Y+38	; 0x26
    1dcc:	3f a1       	ldd	r19, Y+39	; 0x27
    1dce:	c9 01       	movw	r24, r18
    1dd0:	63 e0       	ldi	r22, 0x03	; 3
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    1dd8:	8c 0f       	add	r24, r28
    1dda:	9d 1f       	adc	r25, r29
    1ddc:	fc 01       	movw	r30, r24
    1dde:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1de0:	b9 01       	movw	r22, r18
    1de2:	6f 5f       	subi	r22, 0xFF	; 255
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	6e a3       	std	Y+38, r22	; 0x26
    1de8:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    1dea:	ce 01       	movw	r24, r28
    1dec:	4a a1       	ldd	r20, Y+34	; 0x22
    1dee:	2b a1       	ldd	r18, Y+35	; 0x23
    1df0:	0c a1       	ldd	r16, Y+36	; 0x24
    1df2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1df6:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1df8:	39 c0       	rjmp	.+114    	; 0x1e6c <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    1dfa:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1dfc:	1e a2       	std	Y+38, r1	; 0x26
    1dfe:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1e00:	35 c0       	rjmp	.+106    	; 0x1e6c <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1e02:	44 23       	and	r20, r20
    1e04:	99 f1       	breq	.+102    	; 0x1e6c <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1e06:	2e a1       	ldd	r18, Y+38	; 0x26
    1e08:	3f a1       	ldd	r19, Y+39	; 0x27
    1e0a:	c9 01       	movw	r24, r18
    1e0c:	63 e0       	ldi	r22, 0x03	; 3
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    1e14:	7c 01       	movw	r14, r24
    1e16:	fe 01       	movw	r30, r28
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f9 1f       	adc	r31, r25
    1e1c:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    1e1e:	b9 01       	movw	r22, r18
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	6e a3       	std	Y+38, r22	; 0x26
    1e26:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	91 f0       	breq	.+36     	; 0x1e52 <midi_process_byte+0x116>
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	e8 16       	cp	r14, r24
    1e32:	f1 04       	cpc	r15, r1
    1e34:	d9 f4       	brne	.+54     	; 0x1e6c <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1e36:	ce 01       	movw	r24, r28
    1e38:	4a a1       	ldd	r20, Y+34	; 0x22
    1e3a:	2b a1       	ldd	r18, Y+35	; 0x23
    1e3c:	0c a1       	ldd	r16, Y+36	; 0x24
    1e3e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1e42:	8d a1       	ldd	r24, Y+37	; 0x25
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	91 f0       	breq	.+36     	; 0x1e6c <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	8e a3       	std	Y+38, r24	; 0x26
    1e4e:	9f a3       	std	Y+39, r25	; 0x27
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1e52:	42 30       	cpi	r20, 0x02	; 2
    1e54:	59 f4       	brne	.+22     	; 0x1e6c <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1e56:	ce 01       	movw	r24, r28
    1e58:	4a a1       	ldd	r20, Y+34	; 0x22
    1e5a:	2b a1       	ldd	r18, Y+35	; 0x23
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    1e5e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    1e62:	8d a1       	ldd	r24, Y+37	; 0x25
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    1e68:	ee a2       	std	Y+38, r14	; 0x26
    1e6a:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	08 95       	ret

00001e7a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <midi_device_process+0xe>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	8c 01       	movw	r16, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    1e90:	dc 01       	movw	r26, r24
    1e92:	90 96       	adiw	r26, 0x20	; 32
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	91 97       	sbiw	r26, 0x21	; 33
    1e9a:	30 97       	sbiw	r30, 0x00	; 0
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <midi_device_process+0x26>
      device->pre_input_process_callback(device);
    1e9e:	09 95       	icall

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1ea0:	88 ee       	ldi	r24, 0xE8	; 232
    1ea2:	e8 2e       	mov	r14, r24
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	e0 0e       	add	r14, r16
    1ea8:	f1 1e       	adc	r15, r17
    1eaa:	c7 01       	movw	r24, r14
    1eac:	0e 94 8c 0b 	call	0x1718	; 0x1718 <bytequeue_length>
    1eb0:	89 83       	std	Y+1, r24	; 0x01
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1eb2:	1a 82       	std	Y+2, r1	; 0x02
    1eb4:	1b 82       	std	Y+3, r1	; 0x03
    1eb6:	11 c0       	rjmp	.+34     	; 0x1eda <midi_device_process+0x60>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    1eb8:	c7 01       	movw	r24, r14
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <bytequeue_get>
    1ec0:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1ec8:	c7 01       	movw	r24, r14
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <bytequeue_remove>

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	9b 83       	std	Y+3, r25	; 0x03
    1eda:	2a 81       	ldd	r18, Y+2	; 0x02
    1edc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	28 17       	cp	r18, r24
    1ee4:	39 07       	cpc	r19, r25
    1ee6:	40 f3       	brcs	.-48     	; 0x1eb8 <midi_device_process+0x3e>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1ee8:	23 96       	adiw	r28, 0x03	; 3
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	08 95       	ret

00001efc <__fixunssfsi>:
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	7b 01       	movw	r14, r22
    1f06:	8c 01       	movw	r16, r24
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	5f e4       	ldi	r21, 0x4F	; 79
    1f10:	0e 94 2a 13 	call	0x2654	; 0x2654 <__gesf2>
    1f14:	87 fd       	sbrc	r24, 7
    1f16:	11 c0       	rjmp	.+34     	; 0x1f3a <__fixunssfsi+0x3e>
    1f18:	c8 01       	movw	r24, r16
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	5f e4       	ldi	r21, 0x4F	; 79
    1f24:	0e 94 21 11 	call	0x2242	; 0x2242 <__subsf3>
    1f28:	0e 94 8a 13 	call	0x2714	; 0x2714 <__fixsfsi>
    1f2c:	9b 01       	movw	r18, r22
    1f2e:	ac 01       	movw	r20, r24
    1f30:	20 50       	subi	r18, 0x00	; 0
    1f32:	30 40       	sbci	r19, 0x00	; 0
    1f34:	40 40       	sbci	r20, 0x00	; 0
    1f36:	50 48       	sbci	r21, 0x80	; 128
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <__fixunssfsi+0x4a>
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__fixsfsi>
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	b9 01       	movw	r22, r18
    1f48:	ca 01       	movw	r24, r20
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	08 95       	ret

00001f54 <_fpadd_parts>:
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x8>
    1f60:	fc 01       	movw	r30, r24
    1f62:	ea 01       	movw	r28, r20
    1f64:	80 81       	ld	r24, Z
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	08 f4       	brcc	.+2      	; 0x1f6c <_fpadd_parts+0x18>
    1f6a:	38 c1       	rjmp	.+624    	; 0x21dc <_fpadd_parts+0x288>
    1f6c:	db 01       	movw	r26, r22
    1f6e:	9c 91       	ld	r25, X
    1f70:	92 30       	cpi	r25, 0x02	; 2
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <_fpadd_parts+0x22>
    1f74:	30 c1       	rjmp	.+608    	; 0x21d6 <_fpadd_parts+0x282>
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	59 f4       	brne	.+22     	; 0x1f90 <_fpadd_parts+0x3c>
    1f7a:	94 30       	cpi	r25, 0x04	; 4
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <_fpadd_parts+0x2c>
    1f7e:	2e c1       	rjmp	.+604    	; 0x21dc <_fpadd_parts+0x288>
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	11 96       	adiw	r26, 0x01	; 1
    1f84:	8c 91       	ld	r24, X
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	98 17       	cp	r25, r24
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <_fpadd_parts+0x3a>
    1f8c:	21 c1       	rjmp	.+578    	; 0x21d0 <_fpadd_parts+0x27c>
    1f8e:	26 c1       	rjmp	.+588    	; 0x21dc <_fpadd_parts+0x288>
    1f90:	94 30       	cpi	r25, 0x04	; 4
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <_fpadd_parts+0x42>
    1f94:	20 c1       	rjmp	.+576    	; 0x21d6 <_fpadd_parts+0x282>
    1f96:	92 30       	cpi	r25, 0x02	; 2
    1f98:	b1 f4       	brne	.+44     	; 0x1fc6 <_fpadd_parts+0x72>
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <_fpadd_parts+0x4c>
    1f9e:	1e c1       	rjmp	.+572    	; 0x21dc <_fpadd_parts+0x288>
    1fa0:	ca 01       	movw	r24, r20
    1fa2:	af 01       	movw	r20, r30
    1fa4:	28 e0       	ldi	r18, 0x08	; 8
    1fa6:	da 01       	movw	r26, r20
    1fa8:	0d 90       	ld	r0, X+
    1faa:	ad 01       	movw	r20, r26
    1fac:	dc 01       	movw	r26, r24
    1fae:	0d 92       	st	X+, r0
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	21 50       	subi	r18, 0x01	; 1
    1fb4:	c1 f7       	brne	.-16     	; 0x1fa6 <_fpadd_parts+0x52>
    1fb6:	db 01       	movw	r26, r22
    1fb8:	11 96       	adiw	r26, 0x01	; 1
    1fba:	8c 91       	ld	r24, X
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	89 23       	and	r24, r25
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	0a c1       	rjmp	.+532    	; 0x21da <_fpadd_parts+0x286>
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_fpadd_parts+0x78>
    1fca:	05 c1       	rjmp	.+522    	; 0x21d6 <_fpadd_parts+0x282>
    1fcc:	c2 80       	ldd	r12, Z+2	; 0x02
    1fce:	d3 80       	ldd	r13, Z+3	; 0x03
    1fd0:	db 01       	movw	r26, r22
    1fd2:	12 96       	adiw	r26, 0x02	; 2
    1fd4:	6d 90       	ld	r6, X+
    1fd6:	7c 90       	ld	r7, X
    1fd8:	13 97       	sbiw	r26, 0x03	; 3
    1fda:	24 81       	ldd	r18, Z+4	; 0x04
    1fdc:	35 81       	ldd	r19, Z+5	; 0x05
    1fde:	46 81       	ldd	r20, Z+6	; 0x06
    1fe0:	57 81       	ldd	r21, Z+7	; 0x07
    1fe2:	14 96       	adiw	r26, 0x04	; 4
    1fe4:	ed 90       	ld	r14, X+
    1fe6:	fd 90       	ld	r15, X+
    1fe8:	0d 91       	ld	r16, X+
    1fea:	1c 91       	ld	r17, X
    1fec:	17 97       	sbiw	r26, 0x07	; 7
    1fee:	c6 01       	movw	r24, r12
    1ff0:	86 19       	sub	r24, r6
    1ff2:	97 09       	sbc	r25, r7
    1ff4:	5c 01       	movw	r10, r24
    1ff6:	97 ff       	sbrs	r25, 7
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <_fpadd_parts+0xae>
    1ffa:	aa 24       	eor	r10, r10
    1ffc:	bb 24       	eor	r11, r11
    1ffe:	a8 1a       	sub	r10, r24
    2000:	b9 0a       	sbc	r11, r25
    2002:	b0 e2       	ldi	r27, 0x20	; 32
    2004:	ab 16       	cp	r10, r27
    2006:	b1 04       	cpc	r11, r1
    2008:	0c f0       	brlt	.+2      	; 0x200c <_fpadd_parts+0xb8>
    200a:	61 c0       	rjmp	.+194    	; 0x20ce <_fpadd_parts+0x17a>
    200c:	18 16       	cp	r1, r24
    200e:	19 06       	cpc	r1, r25
    2010:	6c f5       	brge	.+90     	; 0x206c <_fpadd_parts+0x118>
    2012:	37 01       	movw	r6, r14
    2014:	48 01       	movw	r8, r16
    2016:	0a 2c       	mov	r0, r10
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <_fpadd_parts+0xce>
    201a:	96 94       	lsr	r9
    201c:	87 94       	ror	r8
    201e:	77 94       	ror	r7
    2020:	67 94       	ror	r6
    2022:	0a 94       	dec	r0
    2024:	d2 f7       	brpl	.-12     	; 0x201a <_fpadd_parts+0xc6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	0a 2c       	mov	r0, r10
    2030:	04 c0       	rjmp	.+8      	; 0x203a <_fpadd_parts+0xe6>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	aa 1f       	adc	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	0a 94       	dec	r0
    203c:	d2 f7       	brpl	.-12     	; 0x2032 <_fpadd_parts+0xde>
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	a1 09       	sbc	r26, r1
    2042:	b1 09       	sbc	r27, r1
    2044:	8e 21       	and	r24, r14
    2046:	9f 21       	and	r25, r15
    2048:	a0 23       	and	r26, r16
    204a:	b1 23       	and	r27, r17
    204c:	ee 24       	eor	r14, r14
    204e:	ff 24       	eor	r15, r15
    2050:	87 01       	movw	r16, r14
    2052:	e3 94       	inc	r14
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	a1 05       	cpc	r26, r1
    2058:	b1 05       	cpc	r27, r1
    205a:	19 f4       	brne	.+6      	; 0x2062 <_fpadd_parts+0x10e>
    205c:	ee 24       	eor	r14, r14
    205e:	ff 24       	eor	r15, r15
    2060:	87 01       	movw	r16, r14
    2062:	e6 28       	or	r14, r6
    2064:	f7 28       	or	r15, r7
    2066:	08 29       	or	r16, r8
    2068:	19 29       	or	r17, r9
    206a:	3c c0       	rjmp	.+120    	; 0x20e4 <_fpadd_parts+0x190>
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	d1 f1       	breq	.+116    	; 0x20e4 <_fpadd_parts+0x190>
    2070:	ca 0c       	add	r12, r10
    2072:	db 1c       	adc	r13, r11
    2074:	39 01       	movw	r6, r18
    2076:	4a 01       	movw	r8, r20
    2078:	0a 2c       	mov	r0, r10
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <_fpadd_parts+0x130>
    207c:	96 94       	lsr	r9
    207e:	87 94       	ror	r8
    2080:	77 94       	ror	r7
    2082:	67 94       	ror	r6
    2084:	0a 94       	dec	r0
    2086:	d2 f7       	brpl	.-12     	; 0x207c <_fpadd_parts+0x128>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	0a 2c       	mov	r0, r10
    2092:	04 c0       	rjmp	.+8      	; 0x209c <_fpadd_parts+0x148>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	aa 1f       	adc	r26, r26
    209a:	bb 1f       	adc	r27, r27
    209c:	0a 94       	dec	r0
    209e:	d2 f7       	brpl	.-12     	; 0x2094 <_fpadd_parts+0x140>
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	a1 09       	sbc	r26, r1
    20a4:	b1 09       	sbc	r27, r1
    20a6:	82 23       	and	r24, r18
    20a8:	93 23       	and	r25, r19
    20aa:	a4 23       	and	r26, r20
    20ac:	b5 23       	and	r27, r21
    20ae:	21 e0       	ldi	r18, 0x01	; 1
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	a1 05       	cpc	r26, r1
    20ba:	b1 05       	cpc	r27, r1
    20bc:	19 f4       	brne	.+6      	; 0x20c4 <_fpadd_parts+0x170>
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	26 29       	or	r18, r6
    20c6:	37 29       	or	r19, r7
    20c8:	48 29       	or	r20, r8
    20ca:	59 29       	or	r21, r9
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <_fpadd_parts+0x190>
    20ce:	6c 14       	cp	r6, r12
    20d0:	7d 04       	cpc	r7, r13
    20d2:	24 f4       	brge	.+8      	; 0x20dc <_fpadd_parts+0x188>
    20d4:	ee 24       	eor	r14, r14
    20d6:	ff 24       	eor	r15, r15
    20d8:	87 01       	movw	r16, r14
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <_fpadd_parts+0x190>
    20dc:	63 01       	movw	r12, r6
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a9 01       	movw	r20, r18
    20e4:	81 81       	ldd	r24, Z+1	; 0x01
    20e6:	fb 01       	movw	r30, r22
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	89 17       	cp	r24, r25
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <_fpadd_parts+0x19c>
    20ee:	45 c0       	rjmp	.+138    	; 0x217a <_fpadd_parts+0x226>
    20f0:	88 23       	and	r24, r24
    20f2:	49 f0       	breq	.+18     	; 0x2106 <_fpadd_parts+0x1b2>
    20f4:	d8 01       	movw	r26, r16
    20f6:	c7 01       	movw	r24, r14
    20f8:	82 1b       	sub	r24, r18
    20fa:	93 0b       	sbc	r25, r19
    20fc:	a4 0b       	sbc	r26, r20
    20fe:	b5 0b       	sbc	r27, r21
    2100:	9c 01       	movw	r18, r24
    2102:	ad 01       	movw	r20, r26
    2104:	04 c0       	rjmp	.+8      	; 0x210e <_fpadd_parts+0x1ba>
    2106:	2e 19       	sub	r18, r14
    2108:	3f 09       	sbc	r19, r15
    210a:	40 0b       	sbc	r20, r16
    210c:	51 0b       	sbc	r21, r17
    210e:	57 fd       	sbrc	r21, 7
    2110:	04 c0       	rjmp	.+8      	; 0x211a <_fpadd_parts+0x1c6>
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	ca 82       	std	Y+2, r12	; 0x02
    2116:	db 82       	std	Y+3, r13	; 0x03
    2118:	0b c0       	rjmp	.+22     	; 0x2130 <_fpadd_parts+0x1dc>
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	ca 82       	std	Y+2, r12	; 0x02
    2120:	db 82       	std	Y+3, r13	; 0x03
    2122:	50 95       	com	r21
    2124:	40 95       	com	r20
    2126:	30 95       	com	r19
    2128:	21 95       	neg	r18
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	4f 4f       	sbci	r20, 0xFF	; 255
    212e:	5f 4f       	sbci	r21, 0xFF	; 255
    2130:	2c 83       	std	Y+4, r18	; 0x04
    2132:	3d 83       	std	Y+5, r19	; 0x05
    2134:	4e 83       	std	Y+6, r20	; 0x06
    2136:	5f 83       	std	Y+7, r21	; 0x07
    2138:	0d c0       	rjmp	.+26     	; 0x2154 <_fpadd_parts+0x200>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	aa 1f       	adc	r26, r26
    2140:	bb 1f       	adc	r27, r27
    2142:	8c 83       	std	Y+4, r24	; 0x04
    2144:	9d 83       	std	Y+5, r25	; 0x05
    2146:	ae 83       	std	Y+6, r26	; 0x06
    2148:	bf 83       	std	Y+7, r27	; 0x07
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	9b 83       	std	Y+3, r25	; 0x03
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	ae 81       	ldd	r26, Y+6	; 0x06
    215a:	bf 81       	ldd	r27, Y+7	; 0x07
    215c:	9c 01       	movw	r18, r24
    215e:	ad 01       	movw	r20, r26
    2160:	21 50       	subi	r18, 0x01	; 1
    2162:	30 40       	sbci	r19, 0x00	; 0
    2164:	40 40       	sbci	r20, 0x00	; 0
    2166:	50 40       	sbci	r21, 0x00	; 0
    2168:	2f 3f       	cpi	r18, 0xFF	; 255
    216a:	ef ef       	ldi	r30, 0xFF	; 255
    216c:	3e 07       	cpc	r19, r30
    216e:	ef ef       	ldi	r30, 0xFF	; 255
    2170:	4e 07       	cpc	r20, r30
    2172:	ef e3       	ldi	r30, 0x3F	; 63
    2174:	5e 07       	cpc	r21, r30
    2176:	08 f3       	brcs	.-62     	; 0x213a <_fpadd_parts+0x1e6>
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <_fpadd_parts+0x23c>
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	ca 82       	std	Y+2, r12	; 0x02
    217e:	db 82       	std	Y+3, r13	; 0x03
    2180:	2e 0d       	add	r18, r14
    2182:	3f 1d       	adc	r19, r15
    2184:	40 1f       	adc	r20, r16
    2186:	51 1f       	adc	r21, r17
    2188:	2c 83       	std	Y+4, r18	; 0x04
    218a:	3d 83       	std	Y+5, r19	; 0x05
    218c:	4e 83       	std	Y+6, r20	; 0x06
    218e:	5f 83       	std	Y+7, r21	; 0x07
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	88 83       	st	Y, r24
    2194:	2c 81       	ldd	r18, Y+4	; 0x04
    2196:	3d 81       	ldd	r19, Y+5	; 0x05
    2198:	4e 81       	ldd	r20, Y+6	; 0x06
    219a:	5f 81       	ldd	r21, Y+7	; 0x07
    219c:	57 ff       	sbrs	r21, 7
    219e:	1d c0       	rjmp	.+58     	; 0x21da <_fpadd_parts+0x286>
    21a0:	da 01       	movw	r26, r20
    21a2:	c9 01       	movw	r24, r18
    21a4:	81 70       	andi	r24, 0x01	; 1
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	a0 70       	andi	r26, 0x00	; 0
    21aa:	b0 70       	andi	r27, 0x00	; 0
    21ac:	56 95       	lsr	r21
    21ae:	47 95       	ror	r20
    21b0:	37 95       	ror	r19
    21b2:	27 95       	ror	r18
    21b4:	82 2b       	or	r24, r18
    21b6:	93 2b       	or	r25, r19
    21b8:	a4 2b       	or	r26, r20
    21ba:	b5 2b       	or	r27, r21
    21bc:	8c 83       	std	Y+4, r24	; 0x04
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	ae 83       	std	Y+6, r26	; 0x06
    21c2:	bf 83       	std	Y+7, r27	; 0x07
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	9b 83       	std	Y+3, r25	; 0x03
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <_fpadd_parts+0x286>
    21d0:	ef e4       	ldi	r30, 0x4F	; 79
    21d2:	f0 e2       	ldi	r31, 0x20	; 32
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <_fpadd_parts+0x288>
    21d6:	fb 01       	movw	r30, r22
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <_fpadd_parts+0x288>
    21da:	fe 01       	movw	r30, r28
    21dc:	cf 01       	movw	r24, r30
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	ee e0       	ldi	r30, 0x0E	; 14
    21e4:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__+0x8>

000021e8 <__addsf3>:
    21e8:	a0 e2       	ldi	r26, 0x20	; 32
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ea ef       	ldi	r30, 0xFA	; 250
    21ee:	f0 e1       	ldi	r31, 0x10	; 16
    21f0:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
    21f4:	69 83       	std	Y+1, r22	; 0x01
    21f6:	7a 83       	std	Y+2, r23	; 0x02
    21f8:	8b 83       	std	Y+3, r24	; 0x03
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	2d 83       	std	Y+5, r18	; 0x05
    21fe:	3e 83       	std	Y+6, r19	; 0x06
    2200:	4f 83       	std	Y+7, r20	; 0x07
    2202:	58 87       	std	Y+8, r21	; 0x08
    2204:	89 e0       	ldi	r24, 0x09	; 9
    2206:	e8 2e       	mov	r14, r24
    2208:	f1 2c       	mov	r15, r1
    220a:	ec 0e       	add	r14, r28
    220c:	fd 1e       	adc	r15, r29
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	b7 01       	movw	r22, r14
    2214:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2218:	8e 01       	movw	r16, r28
    221a:	0f 5e       	subi	r16, 0xEF	; 239
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	ce 01       	movw	r24, r28
    2220:	05 96       	adiw	r24, 0x05	; 5
    2222:	b8 01       	movw	r22, r16
    2224:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2228:	c7 01       	movw	r24, r14
    222a:	b8 01       	movw	r22, r16
    222c:	ae 01       	movw	r20, r28
    222e:	47 5e       	subi	r20, 0xE7	; 231
    2230:	5f 4f       	sbci	r21, 0xFF	; 255
    2232:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_fpadd_parts>
    2236:	0e 94 ae 14 	call	0x295c	; 0x295c <__pack_f>
    223a:	a0 96       	adiw	r28, 0x20	; 32
    223c:	e6 e0       	ldi	r30, 0x06	; 6
    223e:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

00002242 <__subsf3>:
    2242:	a0 e2       	ldi	r26, 0x20	; 32
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e7 e2       	ldi	r30, 0x27	; 39
    2248:	f1 e1       	ldi	r31, 0x11	; 17
    224a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
    224e:	69 83       	std	Y+1, r22	; 0x01
    2250:	7a 83       	std	Y+2, r23	; 0x02
    2252:	8b 83       	std	Y+3, r24	; 0x03
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	2d 83       	std	Y+5, r18	; 0x05
    2258:	3e 83       	std	Y+6, r19	; 0x06
    225a:	4f 83       	std	Y+7, r20	; 0x07
    225c:	58 87       	std	Y+8, r21	; 0x08
    225e:	8e 01       	movw	r16, r28
    2260:	07 5f       	subi	r16, 0xF7	; 247
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	ce 01       	movw	r24, r28
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	b8 01       	movw	r22, r16
    226a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    226e:	91 e1       	ldi	r25, 0x11	; 17
    2270:	e9 2e       	mov	r14, r25
    2272:	f1 2c       	mov	r15, r1
    2274:	ec 0e       	add	r14, r28
    2276:	fd 1e       	adc	r15, r29
    2278:	ce 01       	movw	r24, r28
    227a:	05 96       	adiw	r24, 0x05	; 5
    227c:	b7 01       	movw	r22, r14
    227e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2282:	8a 89       	ldd	r24, Y+18	; 0x12
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	89 27       	eor	r24, r25
    2288:	8a 8b       	std	Y+18, r24	; 0x12
    228a:	c8 01       	movw	r24, r16
    228c:	b7 01       	movw	r22, r14
    228e:	ae 01       	movw	r20, r28
    2290:	47 5e       	subi	r20, 0xE7	; 231
    2292:	5f 4f       	sbci	r21, 0xFF	; 255
    2294:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_fpadd_parts>
    2298:	0e 94 ae 14 	call	0x295c	; 0x295c <__pack_f>
    229c:	a0 96       	adiw	r28, 0x20	; 32
    229e:	e6 e0       	ldi	r30, 0x06	; 6
    22a0:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

000022a4 <__mulsf3>:
    22a4:	a0 e2       	ldi	r26, 0x20	; 32
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e5       	ldi	r30, 0x58	; 88
    22aa:	f1 e1       	ldi	r31, 0x11	; 17
    22ac:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	2d 83       	std	Y+5, r18	; 0x05
    22ba:	3e 83       	std	Y+6, r19	; 0x06
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	be 01       	movw	r22, r28
    22c6:	67 5f       	subi	r22, 0xF7	; 247
    22c8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ca:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    22ce:	ce 01       	movw	r24, r28
    22d0:	05 96       	adiw	r24, 0x05	; 5
    22d2:	be 01       	movw	r22, r28
    22d4:	6f 5e       	subi	r22, 0xEF	; 239
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    22dc:	99 85       	ldd	r25, Y+9	; 0x09
    22de:	92 30       	cpi	r25, 0x02	; 2
    22e0:	78 f0       	brcs	.+30     	; 0x2300 <__mulsf3+0x5c>
    22e2:	89 89       	ldd	r24, Y+17	; 0x11
    22e4:	82 30       	cpi	r24, 0x02	; 2
    22e6:	c0 f0       	brcs	.+48     	; 0x2318 <__mulsf3+0x74>
    22e8:	94 30       	cpi	r25, 0x04	; 4
    22ea:	19 f4       	brne	.+6      	; 0x22f2 <__mulsf3+0x4e>
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	41 f4       	brne	.+16     	; 0x2300 <__mulsf3+0x5c>
    22f0:	cb c0       	rjmp	.+406    	; 0x2488 <__mulsf3+0x1e4>
    22f2:	84 30       	cpi	r24, 0x04	; 4
    22f4:	19 f4       	brne	.+6      	; 0x22fc <__mulsf3+0x58>
    22f6:	92 30       	cpi	r25, 0x02	; 2
    22f8:	79 f4       	brne	.+30     	; 0x2318 <__mulsf3+0x74>
    22fa:	c6 c0       	rjmp	.+396    	; 0x2488 <__mulsf3+0x1e4>
    22fc:	92 30       	cpi	r25, 0x02	; 2
    22fe:	51 f4       	brne	.+20     	; 0x2314 <__mulsf3+0x70>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	2a 85       	ldd	r18, Y+10	; 0x0a
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	29 17       	cp	r18, r25
    2308:	09 f4       	brne	.+2      	; 0x230c <__mulsf3+0x68>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	8a 87       	std	Y+10, r24	; 0x0a
    230e:	ce 01       	movw	r24, r28
    2310:	09 96       	adiw	r24, 0x09	; 9
    2312:	bc c0       	rjmp	.+376    	; 0x248c <__mulsf3+0x1e8>
    2314:	82 30       	cpi	r24, 0x02	; 2
    2316:	51 f4       	brne	.+20     	; 0x232c <__mulsf3+0x88>
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	2a 85       	ldd	r18, Y+10	; 0x0a
    231c:	9a 89       	ldd	r25, Y+18	; 0x12
    231e:	29 17       	cp	r18, r25
    2320:	09 f4       	brne	.+2      	; 0x2324 <__mulsf3+0x80>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	8a 8b       	std	Y+18, r24	; 0x12
    2326:	ce 01       	movw	r24, r28
    2328:	41 96       	adiw	r24, 0x11	; 17
    232a:	b0 c0       	rjmp	.+352    	; 0x248c <__mulsf3+0x1e8>
    232c:	6d 84       	ldd	r6, Y+13	; 0x0d
    232e:	7e 84       	ldd	r7, Y+14	; 0x0e
    2330:	8f 84       	ldd	r8, Y+15	; 0x0f
    2332:	98 88       	ldd	r9, Y+16	; 0x10
    2334:	ed 88       	ldd	r14, Y+21	; 0x15
    2336:	fe 88       	ldd	r15, Y+22	; 0x16
    2338:	0f 89       	ldd	r16, Y+23	; 0x17
    233a:	18 8d       	ldd	r17, Y+24	; 0x18
    233c:	e0 e2       	ldi	r30, 0x20	; 32
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	dc 01       	movw	r26, r24
    2346:	aa 24       	eor	r10, r10
    2348:	bb 24       	eor	r11, r11
    234a:	65 01       	movw	r12, r10
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	a9 01       	movw	r20, r18
    2352:	b3 01       	movw	r22, r6
    2354:	61 70       	andi	r22, 0x01	; 1
    2356:	70 70       	andi	r23, 0x00	; 0
    2358:	61 15       	cp	r22, r1
    235a:	71 05       	cpc	r23, r1
    235c:	d1 f0       	breq	.+52     	; 0x2392 <__mulsf3+0xee>
    235e:	2e 0d       	add	r18, r14
    2360:	3f 1d       	adc	r19, r15
    2362:	40 1f       	adc	r20, r16
    2364:	51 1f       	adc	r21, r17
    2366:	15 01       	movw	r2, r10
    2368:	26 01       	movw	r4, r12
    236a:	28 0e       	add	r2, r24
    236c:	39 1e       	adc	r3, r25
    236e:	4a 1e       	adc	r4, r26
    2370:	5b 1e       	adc	r5, r27
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	2e 15       	cp	r18, r14
    237c:	3f 05       	cpc	r19, r15
    237e:	40 07       	cpc	r20, r16
    2380:	51 07       	cpc	r21, r17
    2382:	18 f0       	brcs	.+6      	; 0x238a <__mulsf3+0xe6>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	dc 01       	movw	r26, r24
    238a:	82 0d       	add	r24, r2
    238c:	93 1d       	adc	r25, r3
    238e:	a4 1d       	adc	r26, r4
    2390:	b5 1d       	adc	r27, r5
    2392:	aa 0c       	add	r10, r10
    2394:	bb 1c       	adc	r11, r11
    2396:	cc 1c       	adc	r12, r12
    2398:	dd 1c       	adc	r13, r13
    239a:	17 ff       	sbrs	r17, 7
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <__mulsf3+0x10c>
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	26 2e       	mov	r2, r22
    23a2:	31 2c       	mov	r3, r1
    23a4:	41 2c       	mov	r4, r1
    23a6:	51 2c       	mov	r5, r1
    23a8:	a2 28       	or	r10, r2
    23aa:	b3 28       	or	r11, r3
    23ac:	c4 28       	or	r12, r4
    23ae:	d5 28       	or	r13, r5
    23b0:	31 97       	sbiw	r30, 0x01	; 1
    23b2:	49 f0       	breq	.+18     	; 0x23c6 <__mulsf3+0x122>
    23b4:	ee 0c       	add	r14, r14
    23b6:	ff 1c       	adc	r15, r15
    23b8:	00 1f       	adc	r16, r16
    23ba:	11 1f       	adc	r17, r17
    23bc:	96 94       	lsr	r9
    23be:	87 94       	ror	r8
    23c0:	77 94       	ror	r7
    23c2:	67 94       	ror	r6
    23c4:	c6 cf       	rjmp	.-116    	; 0x2352 <__mulsf3+0xae>
    23c6:	6b 89       	ldd	r22, Y+19	; 0x13
    23c8:	7c 89       	ldd	r23, Y+20	; 0x14
    23ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    23cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    23ce:	6e 0f       	add	r22, r30
    23d0:	7f 1f       	adc	r23, r31
    23d2:	6e 5f       	subi	r22, 0xFE	; 254
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	6b 8f       	std	Y+27, r22	; 0x1b
    23d8:	7c 8f       	std	Y+28, r23	; 0x1c
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    23de:	7a 89       	ldd	r23, Y+18	; 0x12
    23e0:	e7 17       	cp	r30, r23
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <__mulsf3+0x142>
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	6a 8f       	std	Y+26, r22	; 0x1a
    23e8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23ea:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23ec:	10 c0       	rjmp	.+32     	; 0x240e <__mulsf3+0x16a>
    23ee:	fc 01       	movw	r30, r24
    23f0:	e1 70       	andi	r30, 0x01	; 1
    23f2:	f0 70       	andi	r31, 0x00	; 0
    23f4:	30 97       	sbiw	r30, 0x00	; 0
    23f6:	29 f0       	breq	.+10     	; 0x2402 <__mulsf3+0x15e>
    23f8:	56 95       	lsr	r21
    23fa:	47 95       	ror	r20
    23fc:	37 95       	ror	r19
    23fe:	27 95       	ror	r18
    2400:	50 68       	ori	r21, 0x80	; 128
    2402:	b6 95       	lsr	r27
    2404:	a7 95       	ror	r26
    2406:	97 95       	ror	r25
    2408:	87 95       	ror	r24
    240a:	6f 5f       	subi	r22, 0xFF	; 255
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	b7 fd       	sbrc	r27, 7
    2410:	ee cf       	rjmp	.-36     	; 0x23ee <__mulsf3+0x14a>
    2412:	0c c0       	rjmp	.+24     	; 0x242c <__mulsf3+0x188>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	aa 1f       	adc	r26, r26
    241a:	bb 1f       	adc	r27, r27
    241c:	57 fd       	sbrc	r21, 7
    241e:	81 60       	ori	r24, 0x01	; 1
    2420:	22 0f       	add	r18, r18
    2422:	33 1f       	adc	r19, r19
    2424:	44 1f       	adc	r20, r20
    2426:	55 1f       	adc	r21, r21
    2428:	61 50       	subi	r22, 0x01	; 1
    242a:	70 40       	sbci	r23, 0x00	; 0
    242c:	80 30       	cpi	r24, 0x00	; 0
    242e:	e0 e0       	ldi	r30, 0x00	; 0
    2430:	9e 07       	cpc	r25, r30
    2432:	e0 e0       	ldi	r30, 0x00	; 0
    2434:	ae 07       	cpc	r26, r30
    2436:	e0 e4       	ldi	r30, 0x40	; 64
    2438:	be 07       	cpc	r27, r30
    243a:	60 f3       	brcs	.-40     	; 0x2414 <__mulsf3+0x170>
    243c:	6b 8f       	std	Y+27, r22	; 0x1b
    243e:	7c 8f       	std	Y+28, r23	; 0x1c
    2440:	6f e7       	ldi	r22, 0x7F	; 127
    2442:	e6 2e       	mov	r14, r22
    2444:	f1 2c       	mov	r15, r1
    2446:	01 2d       	mov	r16, r1
    2448:	11 2d       	mov	r17, r1
    244a:	e8 22       	and	r14, r24
    244c:	f9 22       	and	r15, r25
    244e:	0a 23       	and	r16, r26
    2450:	1b 23       	and	r17, r27
    2452:	60 e4       	ldi	r22, 0x40	; 64
    2454:	e6 16       	cp	r14, r22
    2456:	f1 04       	cpc	r15, r1
    2458:	01 05       	cpc	r16, r1
    245a:	11 05       	cpc	r17, r1
    245c:	61 f4       	brne	.+24     	; 0x2476 <__mulsf3+0x1d2>
    245e:	87 fd       	sbrc	r24, 7
    2460:	0a c0       	rjmp	.+20     	; 0x2476 <__mulsf3+0x1d2>
    2462:	21 15       	cp	r18, r1
    2464:	31 05       	cpc	r19, r1
    2466:	41 05       	cpc	r20, r1
    2468:	51 05       	cpc	r21, r1
    246a:	29 f0       	breq	.+10     	; 0x2476 <__mulsf3+0x1d2>
    246c:	80 5c       	subi	r24, 0xC0	; 192
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	af 4f       	sbci	r26, 0xFF	; 255
    2472:	bf 4f       	sbci	r27, 0xFF	; 255
    2474:	80 78       	andi	r24, 0x80	; 128
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	9e 8f       	std	Y+30, r25	; 0x1e
    247a:	af 8f       	std	Y+31, r26	; 0x1f
    247c:	b8 a3       	std	Y+32, r27	; 0x20
    247e:	83 e0       	ldi	r24, 0x03	; 3
    2480:	89 8f       	std	Y+25, r24	; 0x19
    2482:	ce 01       	movw	r24, r28
    2484:	49 96       	adiw	r24, 0x19	; 25
    2486:	02 c0       	rjmp	.+4      	; 0x248c <__mulsf3+0x1e8>
    2488:	8f e4       	ldi	r24, 0x4F	; 79
    248a:	90 e2       	ldi	r25, 0x20	; 32
    248c:	0e 94 ae 14 	call	0x295c	; 0x295c <__pack_f>
    2490:	a0 96       	adiw	r28, 0x20	; 32
    2492:	e2 e1       	ldi	r30, 0x12	; 18
    2494:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__>

00002498 <__divsf3>:
    2498:	a8 e1       	ldi	r26, 0x18	; 24
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e2 e5       	ldi	r30, 0x52	; 82
    249e:	f2 e1       	ldi	r31, 0x12	; 18
    24a0:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x10>
    24a4:	69 83       	std	Y+1, r22	; 0x01
    24a6:	7a 83       	std	Y+2, r23	; 0x02
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	2d 83       	std	Y+5, r18	; 0x05
    24ae:	3e 83       	std	Y+6, r19	; 0x06
    24b0:	4f 83       	std	Y+7, r20	; 0x07
    24b2:	58 87       	std	Y+8, r21	; 0x08
    24b4:	8e 01       	movw	r16, r28
    24b6:	07 5f       	subi	r16, 0xF7	; 247
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	b8 01       	movw	r22, r16
    24c0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    24c4:	81 e1       	ldi	r24, 0x11	; 17
    24c6:	e8 2e       	mov	r14, r24
    24c8:	f1 2c       	mov	r15, r1
    24ca:	ec 0e       	add	r14, r28
    24cc:	fd 1e       	adc	r15, r29
    24ce:	ce 01       	movw	r24, r28
    24d0:	05 96       	adiw	r24, 0x05	; 5
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    24d8:	99 85       	ldd	r25, Y+9	; 0x09
    24da:	92 30       	cpi	r25, 0x02	; 2
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__divsf3+0x48>
    24de:	83 c0       	rjmp	.+262    	; 0x25e6 <__divsf3+0x14e>
    24e0:	89 89       	ldd	r24, Y+17	; 0x11
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <__divsf3+0x50>
    24e6:	7b c0       	rjmp	.+246    	; 0x25de <__divsf3+0x146>
    24e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ea:	3a 89       	ldd	r19, Y+18	; 0x12
    24ec:	23 27       	eor	r18, r19
    24ee:	2a 87       	std	Y+10, r18	; 0x0a
    24f0:	94 30       	cpi	r25, 0x04	; 4
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <__divsf3+0x60>
    24f4:	92 30       	cpi	r25, 0x02	; 2
    24f6:	21 f4       	brne	.+8      	; 0x2500 <__divsf3+0x68>
    24f8:	98 17       	cp	r25, r24
    24fa:	09 f0       	breq	.+2      	; 0x24fe <__divsf3+0x66>
    24fc:	6c c0       	rjmp	.+216    	; 0x25d6 <__divsf3+0x13e>
    24fe:	71 c0       	rjmp	.+226    	; 0x25e2 <__divsf3+0x14a>
    2500:	84 30       	cpi	r24, 0x04	; 4
    2502:	39 f4       	brne	.+14     	; 0x2512 <__divsf3+0x7a>
    2504:	1d 86       	std	Y+13, r1	; 0x0d
    2506:	1e 86       	std	Y+14, r1	; 0x0e
    2508:	1f 86       	std	Y+15, r1	; 0x0f
    250a:	18 8a       	std	Y+16, r1	; 0x10
    250c:	1b 86       	std	Y+11, r1	; 0x0b
    250e:	1c 86       	std	Y+12, r1	; 0x0c
    2510:	6a c0       	rjmp	.+212    	; 0x25e6 <__divsf3+0x14e>
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	19 f4       	brne	.+6      	; 0x251c <__divsf3+0x84>
    2516:	84 e0       	ldi	r24, 0x04	; 4
    2518:	89 87       	std	Y+9, r24	; 0x09
    251a:	65 c0       	rjmp	.+202    	; 0x25e6 <__divsf3+0x14e>
    251c:	8b 85       	ldd	r24, Y+11	; 0x0b
    251e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2520:	2b 89       	ldd	r18, Y+19	; 0x13
    2522:	3c 89       	ldd	r19, Y+20	; 0x14
    2524:	82 1b       	sub	r24, r18
    2526:	93 0b       	sbc	r25, r19
    2528:	8b 87       	std	Y+11, r24	; 0x0b
    252a:	9c 87       	std	Y+12, r25	; 0x0c
    252c:	2d 85       	ldd	r18, Y+13	; 0x0d
    252e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2530:	4f 85       	ldd	r20, Y+15	; 0x0f
    2532:	58 89       	ldd	r21, Y+16	; 0x10
    2534:	ed 88       	ldd	r14, Y+21	; 0x15
    2536:	fe 88       	ldd	r15, Y+22	; 0x16
    2538:	0f 89       	ldd	r16, Y+23	; 0x17
    253a:	18 8d       	ldd	r17, Y+24	; 0x18
    253c:	2e 15       	cp	r18, r14
    253e:	3f 05       	cpc	r19, r15
    2540:	40 07       	cpc	r20, r16
    2542:	51 07       	cpc	r21, r17
    2544:	38 f4       	brcc	.+14     	; 0x2554 <__divsf3+0xbc>
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	44 1f       	adc	r20, r20
    254c:	55 1f       	adc	r21, r21
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	8b 87       	std	Y+11, r24	; 0x0b
    2552:	9c 87       	std	Y+12, r25	; 0x0c
    2554:	6f e1       	ldi	r22, 0x1F	; 31
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	a1 2c       	mov	r10, r1
    255a:	b1 2c       	mov	r11, r1
    255c:	c1 2c       	mov	r12, r1
    255e:	a0 e4       	ldi	r26, 0x40	; 64
    2560:	da 2e       	mov	r13, r26
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	dc 01       	movw	r26, r24
    2568:	2e 15       	cp	r18, r14
    256a:	3f 05       	cpc	r19, r15
    256c:	40 07       	cpc	r20, r16
    256e:	51 07       	cpc	r21, r17
    2570:	40 f0       	brcs	.+16     	; 0x2582 <__divsf3+0xea>
    2572:	8a 29       	or	r24, r10
    2574:	9b 29       	or	r25, r11
    2576:	ac 29       	or	r26, r12
    2578:	bd 29       	or	r27, r13
    257a:	2e 19       	sub	r18, r14
    257c:	3f 09       	sbc	r19, r15
    257e:	40 0b       	sbc	r20, r16
    2580:	51 0b       	sbc	r21, r17
    2582:	d6 94       	lsr	r13
    2584:	c7 94       	ror	r12
    2586:	b7 94       	ror	r11
    2588:	a7 94       	ror	r10
    258a:	22 0f       	add	r18, r18
    258c:	33 1f       	adc	r19, r19
    258e:	44 1f       	adc	r20, r20
    2590:	55 1f       	adc	r21, r21
    2592:	61 50       	subi	r22, 0x01	; 1
    2594:	70 40       	sbci	r23, 0x00	; 0
    2596:	41 f7       	brne	.-48     	; 0x2568 <__divsf3+0xd0>
    2598:	6f e7       	ldi	r22, 0x7F	; 127
    259a:	e6 2e       	mov	r14, r22
    259c:	f1 2c       	mov	r15, r1
    259e:	01 2d       	mov	r16, r1
    25a0:	11 2d       	mov	r17, r1
    25a2:	e8 22       	and	r14, r24
    25a4:	f9 22       	and	r15, r25
    25a6:	0a 23       	and	r16, r26
    25a8:	1b 23       	and	r17, r27
    25aa:	60 e4       	ldi	r22, 0x40	; 64
    25ac:	e6 16       	cp	r14, r22
    25ae:	f1 04       	cpc	r15, r1
    25b0:	01 05       	cpc	r16, r1
    25b2:	11 05       	cpc	r17, r1
    25b4:	61 f4       	brne	.+24     	; 0x25ce <__divsf3+0x136>
    25b6:	87 fd       	sbrc	r24, 7
    25b8:	0a c0       	rjmp	.+20     	; 0x25ce <__divsf3+0x136>
    25ba:	21 15       	cp	r18, r1
    25bc:	31 05       	cpc	r19, r1
    25be:	41 05       	cpc	r20, r1
    25c0:	51 05       	cpc	r21, r1
    25c2:	29 f0       	breq	.+10     	; 0x25ce <__divsf3+0x136>
    25c4:	80 5c       	subi	r24, 0xC0	; 192
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	af 4f       	sbci	r26, 0xFF	; 255
    25ca:	bf 4f       	sbci	r27, 0xFF	; 255
    25cc:	80 78       	andi	r24, 0x80	; 128
    25ce:	8d 87       	std	Y+13, r24	; 0x0d
    25d0:	9e 87       	std	Y+14, r25	; 0x0e
    25d2:	af 87       	std	Y+15, r26	; 0x0f
    25d4:	b8 8b       	std	Y+16, r27	; 0x10
    25d6:	8e 01       	movw	r16, r28
    25d8:	07 5f       	subi	r16, 0xF7	; 247
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <__divsf3+0x14e>
    25de:	87 01       	movw	r16, r14
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <__divsf3+0x14e>
    25e2:	0f e4       	ldi	r16, 0x4F	; 79
    25e4:	10 e2       	ldi	r17, 0x20	; 32
    25e6:	c8 01       	movw	r24, r16
    25e8:	0e 94 ae 14 	call	0x295c	; 0x295c <__pack_f>
    25ec:	68 96       	adiw	r28, 0x18	; 24
    25ee:	ea e0       	ldi	r30, 0x0A	; 10
    25f0:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x10>

000025f4 <__gtsf2>:
    25f4:	a8 e1       	ldi	r26, 0x18	; 24
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e0 e0       	ldi	r30, 0x00	; 0
    25fa:	f3 e1       	ldi	r31, 0x13	; 19
    25fc:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
    2600:	69 83       	std	Y+1, r22	; 0x01
    2602:	7a 83       	std	Y+2, r23	; 0x02
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	2d 83       	std	Y+5, r18	; 0x05
    260a:	3e 83       	std	Y+6, r19	; 0x06
    260c:	4f 83       	std	Y+7, r20	; 0x07
    260e:	58 87       	std	Y+8, r21	; 0x08
    2610:	8e 01       	movw	r16, r28
    2612:	07 5f       	subi	r16, 0xF7	; 247
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	b8 01       	movw	r22, r16
    261c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2620:	81 e1       	ldi	r24, 0x11	; 17
    2622:	e8 2e       	mov	r14, r24
    2624:	f1 2c       	mov	r15, r1
    2626:	ec 0e       	add	r14, r28
    2628:	fd 1e       	adc	r15, r29
    262a:	ce 01       	movw	r24, r28
    262c:	05 96       	adiw	r24, 0x05	; 5
    262e:	b7 01       	movw	r22, r14
    2630:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	40 f0       	brcs	.+16     	; 0x264a <__gtsf2+0x56>
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	28 f0       	brcs	.+10     	; 0x264a <__gtsf2+0x56>
    2640:	c8 01       	movw	r24, r16
    2642:	b7 01       	movw	r22, r14
    2644:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__fpcmp_parts_f>
    2648:	01 c0       	rjmp	.+2      	; 0x264c <__gtsf2+0x58>
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	68 96       	adiw	r28, 0x18	; 24
    264e:	e6 e0       	ldi	r30, 0x06	; 6
    2650:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

00002654 <__gesf2>:
    2654:	a8 e1       	ldi	r26, 0x18	; 24
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e0 e3       	ldi	r30, 0x30	; 48
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
    2660:	69 83       	std	Y+1, r22	; 0x01
    2662:	7a 83       	std	Y+2, r23	; 0x02
    2664:	8b 83       	std	Y+3, r24	; 0x03
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	2d 83       	std	Y+5, r18	; 0x05
    266a:	3e 83       	std	Y+6, r19	; 0x06
    266c:	4f 83       	std	Y+7, r20	; 0x07
    266e:	58 87       	std	Y+8, r21	; 0x08
    2670:	8e 01       	movw	r16, r28
    2672:	07 5f       	subi	r16, 0xF7	; 247
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	ce 01       	movw	r24, r28
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	b8 01       	movw	r22, r16
    267c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2680:	81 e1       	ldi	r24, 0x11	; 17
    2682:	e8 2e       	mov	r14, r24
    2684:	f1 2c       	mov	r15, r1
    2686:	ec 0e       	add	r14, r28
    2688:	fd 1e       	adc	r15, r29
    268a:	ce 01       	movw	r24, r28
    268c:	05 96       	adiw	r24, 0x05	; 5
    268e:	b7 01       	movw	r22, r14
    2690:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	40 f0       	brcs	.+16     	; 0x26aa <__gesf2+0x56>
    269a:	89 89       	ldd	r24, Y+17	; 0x11
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	28 f0       	brcs	.+10     	; 0x26aa <__gesf2+0x56>
    26a0:	c8 01       	movw	r24, r16
    26a2:	b7 01       	movw	r22, r14
    26a4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__fpcmp_parts_f>
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <__gesf2+0x58>
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	68 96       	adiw	r28, 0x18	; 24
    26ae:	e6 e0       	ldi	r30, 0x06	; 6
    26b0:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

000026b4 <__ltsf2>:
    26b4:	a8 e1       	ldi	r26, 0x18	; 24
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e0 e6       	ldi	r30, 0x60	; 96
    26ba:	f3 e1       	ldi	r31, 0x13	; 19
    26bc:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
    26c0:	69 83       	std	Y+1, r22	; 0x01
    26c2:	7a 83       	std	Y+2, r23	; 0x02
    26c4:	8b 83       	std	Y+3, r24	; 0x03
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	2d 83       	std	Y+5, r18	; 0x05
    26ca:	3e 83       	std	Y+6, r19	; 0x06
    26cc:	4f 83       	std	Y+7, r20	; 0x07
    26ce:	58 87       	std	Y+8, r21	; 0x08
    26d0:	8e 01       	movw	r16, r28
    26d2:	07 5f       	subi	r16, 0xF7	; 247
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	b8 01       	movw	r22, r16
    26dc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    26e0:	81 e1       	ldi	r24, 0x11	; 17
    26e2:	e8 2e       	mov	r14, r24
    26e4:	f1 2c       	mov	r15, r1
    26e6:	ec 0e       	add	r14, r28
    26e8:	fd 1e       	adc	r15, r29
    26ea:	ce 01       	movw	r24, r28
    26ec:	05 96       	adiw	r24, 0x05	; 5
    26ee:	b7 01       	movw	r22, r14
    26f0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	40 f0       	brcs	.+16     	; 0x270a <__ltsf2+0x56>
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	28 f0       	brcs	.+10     	; 0x270a <__ltsf2+0x56>
    2700:	c8 01       	movw	r24, r16
    2702:	b7 01       	movw	r22, r14
    2704:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__fpcmp_parts_f>
    2708:	01 c0       	rjmp	.+2      	; 0x270c <__ltsf2+0x58>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	68 96       	adiw	r28, 0x18	; 24
    270e:	e6 e0       	ldi	r30, 0x06	; 6
    2710:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

00002714 <__fixsfsi>:
    2714:	ac e0       	ldi	r26, 0x0C	; 12
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e0 e9       	ldi	r30, 0x90	; 144
    271a:	f3 e1       	ldi	r31, 0x13	; 19
    271c:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x20>
    2720:	69 83       	std	Y+1, r22	; 0x01
    2722:	7a 83       	std	Y+2, r23	; 0x02
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	9c 83       	std	Y+4, r25	; 0x04
    2728:	ce 01       	movw	r24, r28
    272a:	01 96       	adiw	r24, 0x01	; 1
    272c:	be 01       	movw	r22, r28
    272e:	6b 5f       	subi	r22, 0xFB	; 251
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__unpack_f>
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	81 f1       	breq	.+96     	; 0x279c <__fixsfsi+0x88>
    273c:	82 30       	cpi	r24, 0x02	; 2
    273e:	70 f1       	brcs	.+92     	; 0x279c <__fixsfsi+0x88>
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	21 f4       	brne	.+8      	; 0x274c <__fixsfsi+0x38>
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	88 23       	and	r24, r24
    2748:	69 f1       	breq	.+90     	; 0x27a4 <__fixsfsi+0x90>
    274a:	0a c0       	rjmp	.+20     	; 0x2760 <__fixsfsi+0x4c>
    274c:	2f 81       	ldd	r18, Y+7	; 0x07
    274e:	38 85       	ldd	r19, Y+8	; 0x08
    2750:	37 fd       	sbrc	r19, 7
    2752:	24 c0       	rjmp	.+72     	; 0x279c <__fixsfsi+0x88>
    2754:	6e 81       	ldd	r22, Y+6	; 0x06
    2756:	2f 31       	cpi	r18, 0x1F	; 31
    2758:	31 05       	cpc	r19, r1
    275a:	3c f0       	brlt	.+14     	; 0x276a <__fixsfsi+0x56>
    275c:	66 23       	and	r22, r22
    275e:	11 f1       	breq	.+68     	; 0x27a4 <__fixsfsi+0x90>
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e8       	ldi	r21, 0x80	; 128
    2768:	21 c0       	rjmp	.+66     	; 0x27ac <__fixsfsi+0x98>
    276a:	8e e1       	ldi	r24, 0x1E	; 30
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	82 1b       	sub	r24, r18
    2770:	93 0b       	sbc	r25, r19
    2772:	29 85       	ldd	r18, Y+9	; 0x09
    2774:	3a 85       	ldd	r19, Y+10	; 0x0a
    2776:	4b 85       	ldd	r20, Y+11	; 0x0b
    2778:	5c 85       	ldd	r21, Y+12	; 0x0c
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <__fixsfsi+0x70>
    277c:	56 95       	lsr	r21
    277e:	47 95       	ror	r20
    2780:	37 95       	ror	r19
    2782:	27 95       	ror	r18
    2784:	8a 95       	dec	r24
    2786:	d2 f7       	brpl	.-12     	; 0x277c <__fixsfsi+0x68>
    2788:	66 23       	and	r22, r22
    278a:	81 f0       	breq	.+32     	; 0x27ac <__fixsfsi+0x98>
    278c:	50 95       	com	r21
    278e:	40 95       	com	r20
    2790:	30 95       	com	r19
    2792:	21 95       	neg	r18
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	4f 4f       	sbci	r20, 0xFF	; 255
    2798:	5f 4f       	sbci	r21, 0xFF	; 255
    279a:	08 c0       	rjmp	.+16     	; 0x27ac <__fixsfsi+0x98>
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	a9 01       	movw	r20, r18
    27a2:	04 c0       	rjmp	.+8      	; 0x27ac <__fixsfsi+0x98>
    27a4:	2f ef       	ldi	r18, 0xFF	; 255
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f ef       	ldi	r20, 0xFF	; 255
    27aa:	5f e7       	ldi	r21, 0x7F	; 127
    27ac:	b9 01       	movw	r22, r18
    27ae:	ca 01       	movw	r24, r20
    27b0:	2c 96       	adiw	r28, 0x0c	; 12
    27b2:	e2 e0       	ldi	r30, 0x02	; 2
    27b4:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x20>

000027b8 <__floatunsisf>:
    27b8:	a8 e0       	ldi	r26, 0x08	; 8
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e2 ee       	ldi	r30, 0xE2	; 226
    27be:	f3 e1       	ldi	r31, 0x13	; 19
    27c0:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x14>
    27c4:	7b 01       	movw	r14, r22
    27c6:	8c 01       	movw	r16, r24
    27c8:	1a 82       	std	Y+2, r1	; 0x02
    27ca:	61 15       	cp	r22, r1
    27cc:	71 05       	cpc	r23, r1
    27ce:	81 05       	cpc	r24, r1
    27d0:	91 05       	cpc	r25, r1
    27d2:	19 f4       	brne	.+6      	; 0x27da <__floatunsisf+0x22>
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	5f c0       	rjmp	.+190    	; 0x2898 <__stack+0x99>
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	8e e1       	ldi	r24, 0x1E	; 30
    27e0:	c8 2e       	mov	r12, r24
    27e2:	d1 2c       	mov	r13, r1
    27e4:	cb 82       	std	Y+3, r12	; 0x03
    27e6:	dc 82       	std	Y+4, r13	; 0x04
    27e8:	ed 82       	std	Y+5, r14	; 0x05
    27ea:	fe 82       	std	Y+6, r15	; 0x06
    27ec:	0f 83       	std	Y+7, r16	; 0x07
    27ee:	18 87       	std	Y+8, r17	; 0x08
    27f0:	c8 01       	movw	r24, r16
    27f2:	b7 01       	movw	r22, r14
    27f4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__clzsi2>
    27f8:	fc 01       	movw	r30, r24
    27fa:	31 97       	sbiw	r30, 0x01	; 1
    27fc:	f7 ff       	sbrs	r31, 7
    27fe:	3a c0       	rjmp	.+116    	; 0x2874 <__stack+0x75>
    2800:	aa 27       	eor	r26, r26
    2802:	bb 27       	eor	r27, r27
    2804:	ae 1b       	sub	r26, r30
    2806:	bf 0b       	sbc	r27, r31
    2808:	21 e0       	ldi	r18, 0x01	; 1
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	0a 2e       	mov	r0, r26
    2812:	04 c0       	rjmp	.+8      	; 0x281c <__stack+0x1d>
    2814:	22 0f       	add	r18, r18
    2816:	33 1f       	adc	r19, r19
    2818:	44 1f       	adc	r20, r20
    281a:	55 1f       	adc	r21, r21
    281c:	0a 94       	dec	r0
    281e:	d2 f7       	brpl	.-12     	; 0x2814 <__stack+0x15>
    2820:	21 50       	subi	r18, 0x01	; 1
    2822:	30 40       	sbci	r19, 0x00	; 0
    2824:	40 40       	sbci	r20, 0x00	; 0
    2826:	50 40       	sbci	r21, 0x00	; 0
    2828:	2e 21       	and	r18, r14
    282a:	3f 21       	and	r19, r15
    282c:	40 23       	and	r20, r16
    282e:	51 23       	and	r21, r17
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	21 15       	cp	r18, r1
    283a:	31 05       	cpc	r19, r1
    283c:	41 05       	cpc	r20, r1
    283e:	51 05       	cpc	r21, r1
    2840:	19 f4       	brne	.+6      	; 0x2848 <__stack+0x49>
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	cb 01       	movw	r24, r22
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <__stack+0x53>
    284a:	16 95       	lsr	r17
    284c:	07 95       	ror	r16
    284e:	f7 94       	ror	r15
    2850:	e7 94       	ror	r14
    2852:	aa 95       	dec	r26
    2854:	d2 f7       	brpl	.-12     	; 0x284a <__stack+0x4b>
    2856:	e6 2a       	or	r14, r22
    2858:	f7 2a       	or	r15, r23
    285a:	08 2b       	or	r16, r24
    285c:	19 2b       	or	r17, r25
    285e:	ed 82       	std	Y+5, r14	; 0x05
    2860:	fe 82       	std	Y+6, r15	; 0x06
    2862:	0f 83       	std	Y+7, r16	; 0x07
    2864:	18 87       	std	Y+8, r17	; 0x08
    2866:	8e e1       	ldi	r24, 0x1E	; 30
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	8e 1b       	sub	r24, r30
    286c:	9f 0b       	sbc	r25, r31
    286e:	8b 83       	std	Y+3, r24	; 0x03
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	12 c0       	rjmp	.+36     	; 0x2898 <__stack+0x99>
    2874:	30 97       	sbiw	r30, 0x00	; 0
    2876:	81 f0       	breq	.+32     	; 0x2898 <__stack+0x99>
    2878:	0e 2e       	mov	r0, r30
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__stack+0x85>
    287c:	ee 0c       	add	r14, r14
    287e:	ff 1c       	adc	r15, r15
    2880:	00 1f       	adc	r16, r16
    2882:	11 1f       	adc	r17, r17
    2884:	0a 94       	dec	r0
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__stack+0x7d>
    2888:	ed 82       	std	Y+5, r14	; 0x05
    288a:	fe 82       	std	Y+6, r15	; 0x06
    288c:	0f 83       	std	Y+7, r16	; 0x07
    288e:	18 87       	std	Y+8, r17	; 0x08
    2890:	ce 1a       	sub	r12, r30
    2892:	df 0a       	sbc	r13, r31
    2894:	cb 82       	std	Y+3, r12	; 0x03
    2896:	dc 82       	std	Y+4, r13	; 0x04
    2898:	ce 01       	movw	r24, r28
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	0e 94 ae 14 	call	0x295c	; 0x295c <__pack_f>
    28a0:	28 96       	adiw	r28, 0x08	; 8
    28a2:	e8 e0       	ldi	r30, 0x08	; 8
    28a4:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x14>

000028a8 <__clzsi2>:
    28a8:	af 92       	push	r10
    28aa:	bf 92       	push	r11
    28ac:	cf 92       	push	r12
    28ae:	df 92       	push	r13
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	7b 01       	movw	r14, r22
    28ba:	8c 01       	movw	r16, r24
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	e8 16       	cp	r14, r24
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	f8 06       	cpc	r15, r24
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	08 07       	cpc	r16, r24
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	18 07       	cpc	r17, r24
    28cc:	58 f4       	brcc	.+22     	; 0x28e4 <__clzsi2+0x3c>
    28ce:	ef ef       	ldi	r30, 0xFF	; 255
    28d0:	ee 16       	cp	r14, r30
    28d2:	f1 04       	cpc	r15, r1
    28d4:	01 05       	cpc	r16, r1
    28d6:	11 05       	cpc	r17, r1
    28d8:	09 f0       	breq	.+2      	; 0x28dc <__clzsi2+0x34>
    28da:	90 f4       	brcc	.+36     	; 0x2900 <__clzsi2+0x58>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	dc 01       	movw	r26, r24
    28e2:	17 c0       	rjmp	.+46     	; 0x2912 <__clzsi2+0x6a>
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	ef 16       	cp	r14, r31
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	ff 06       	cpc	r15, r31
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	0f 07       	cpc	r16, r31
    28f0:	f1 e0       	ldi	r31, 0x01	; 1
    28f2:	1f 07       	cpc	r17, r31
    28f4:	50 f4       	brcc	.+20     	; 0x290a <__clzsi2+0x62>
    28f6:	80 e1       	ldi	r24, 0x10	; 16
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a0 e0       	ldi	r26, 0x00	; 0
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <__clzsi2+0x6a>
    2900:	88 e0       	ldi	r24, 0x08	; 8
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e0       	ldi	r26, 0x00	; 0
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <__clzsi2+0x6a>
    290a:	88 e1       	ldi	r24, 0x18	; 24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	20 e2       	ldi	r18, 0x20	; 32
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	28 1b       	sub	r18, r24
    291c:	39 0b       	sbc	r19, r25
    291e:	4a 0b       	sbc	r20, r26
    2920:	5b 0b       	sbc	r21, r27
    2922:	57 01       	movw	r10, r14
    2924:	68 01       	movw	r12, r16
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <__clzsi2+0x88>
    2928:	d6 94       	lsr	r13
    292a:	c7 94       	ror	r12
    292c:	b7 94       	ror	r11
    292e:	a7 94       	ror	r10
    2930:	8a 95       	dec	r24
    2932:	d2 f7       	brpl	.-12     	; 0x2928 <__clzsi2+0x80>
    2934:	d6 01       	movw	r26, r12
    2936:	c5 01       	movw	r24, r10
    2938:	89 5a       	subi	r24, 0xA9	; 169
    293a:	9f 4d       	sbci	r25, 0xDF	; 223
    293c:	fc 01       	movw	r30, r24
    293e:	80 81       	ld	r24, Z
    2940:	28 1b       	sub	r18, r24
    2942:	31 09       	sbc	r19, r1
    2944:	41 09       	sbc	r20, r1
    2946:	51 09       	sbc	r21, r1
    2948:	c9 01       	movw	r24, r18
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	ff 90       	pop	r15
    2950:	ef 90       	pop	r14
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	bf 90       	pop	r11
    2958:	af 90       	pop	r10
    295a:	08 95       	ret

0000295c <__pack_f>:
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	fc 01       	movw	r30, r24
    296a:	24 81       	ldd	r18, Z+4	; 0x04
    296c:	35 81       	ldd	r19, Z+5	; 0x05
    296e:	46 81       	ldd	r20, Z+6	; 0x06
    2970:	57 81       	ldd	r21, Z+7	; 0x07
    2972:	61 81       	ldd	r22, Z+1	; 0x01
    2974:	80 81       	ld	r24, Z
    2976:	82 30       	cpi	r24, 0x02	; 2
    2978:	20 f4       	brcc	.+8      	; 0x2982 <__pack_f+0x26>
    297a:	40 61       	ori	r20, 0x10	; 16
    297c:	ef ef       	ldi	r30, 0xFF	; 255
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	a3 c0       	rjmp	.+326    	; 0x2ac8 <__pack_f+0x16c>
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	09 f4       	brne	.+2      	; 0x2988 <__pack_f+0x2c>
    2986:	9b c0       	rjmp	.+310    	; 0x2abe <__pack_f+0x162>
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	09 f4       	brne	.+2      	; 0x298e <__pack_f+0x32>
    298c:	92 c0       	rjmp	.+292    	; 0x2ab2 <__pack_f+0x156>
    298e:	21 15       	cp	r18, r1
    2990:	31 05       	cpc	r19, r1
    2992:	41 05       	cpc	r20, r1
    2994:	51 05       	cpc	r21, r1
    2996:	09 f4       	brne	.+2      	; 0x299a <__pack_f+0x3e>
    2998:	8f c0       	rjmp	.+286    	; 0x2ab8 <__pack_f+0x15c>
    299a:	02 80       	ldd	r0, Z+2	; 0x02
    299c:	f3 81       	ldd	r31, Z+3	; 0x03
    299e:	e0 2d       	mov	r30, r0
    29a0:	8f ef       	ldi	r24, 0xFF	; 255
    29a2:	e2 38       	cpi	r30, 0x82	; 130
    29a4:	f8 07       	cpc	r31, r24
    29a6:	0c f0       	brlt	.+2      	; 0x29aa <__pack_f+0x4e>
    29a8:	5a c0       	rjmp	.+180    	; 0x2a5e <__pack_f+0x102>
    29aa:	c2 e8       	ldi	r28, 0x82	; 130
    29ac:	df ef       	ldi	r29, 0xFF	; 255
    29ae:	ce 1b       	sub	r28, r30
    29b0:	df 0b       	sbc	r29, r31
    29b2:	ca 31       	cpi	r28, 0x1A	; 26
    29b4:	d1 05       	cpc	r29, r1
    29b6:	6c f5       	brge	.+90     	; 0x2a12 <__pack_f+0xb6>
    29b8:	79 01       	movw	r14, r18
    29ba:	8a 01       	movw	r16, r20
    29bc:	0c 2e       	mov	r0, r28
    29be:	04 c0       	rjmp	.+8      	; 0x29c8 <__pack_f+0x6c>
    29c0:	16 95       	lsr	r17
    29c2:	07 95       	ror	r16
    29c4:	f7 94       	ror	r15
    29c6:	e7 94       	ror	r14
    29c8:	0a 94       	dec	r0
    29ca:	d2 f7       	brpl	.-12     	; 0x29c0 <__pack_f+0x64>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e0       	ldi	r26, 0x00	; 0
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	0c 2e       	mov	r0, r28
    29d6:	04 c0       	rjmp	.+8      	; 0x29e0 <__pack_f+0x84>
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	0a 94       	dec	r0
    29e2:	d2 f7       	brpl	.-12     	; 0x29d8 <__pack_f+0x7c>
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	a1 09       	sbc	r26, r1
    29e8:	b1 09       	sbc	r27, r1
    29ea:	82 23       	and	r24, r18
    29ec:	93 23       	and	r25, r19
    29ee:	a4 23       	and	r26, r20
    29f0:	b5 23       	and	r27, r21
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	a1 05       	cpc	r26, r1
    29fe:	b1 05       	cpc	r27, r1
    2a00:	19 f4       	brne	.+6      	; 0x2a08 <__pack_f+0xac>
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	a9 01       	movw	r20, r18
    2a08:	2e 29       	or	r18, r14
    2a0a:	3f 29       	or	r19, r15
    2a0c:	40 2b       	or	r20, r16
    2a0e:	51 2b       	or	r21, r17
    2a10:	03 c0       	rjmp	.+6      	; 0x2a18 <__pack_f+0xbc>
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	a9 01       	movw	r20, r18
    2a18:	da 01       	movw	r26, r20
    2a1a:	c9 01       	movw	r24, r18
    2a1c:	8f 77       	andi	r24, 0x7F	; 127
    2a1e:	90 70       	andi	r25, 0x00	; 0
    2a20:	a0 70       	andi	r26, 0x00	; 0
    2a22:	b0 70       	andi	r27, 0x00	; 0
    2a24:	80 34       	cpi	r24, 0x40	; 64
    2a26:	91 05       	cpc	r25, r1
    2a28:	a1 05       	cpc	r26, r1
    2a2a:	b1 05       	cpc	r27, r1
    2a2c:	39 f4       	brne	.+14     	; 0x2a3c <__pack_f+0xe0>
    2a2e:	27 ff       	sbrs	r18, 7
    2a30:	09 c0       	rjmp	.+18     	; 0x2a44 <__pack_f+0xe8>
    2a32:	20 5c       	subi	r18, 0xC0	; 192
    2a34:	3f 4f       	sbci	r19, 0xFF	; 255
    2a36:	4f 4f       	sbci	r20, 0xFF	; 255
    2a38:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <__pack_f+0xe8>
    2a3c:	21 5c       	subi	r18, 0xC1	; 193
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	4f 4f       	sbci	r20, 0xFF	; 255
    2a42:	5f 4f       	sbci	r21, 0xFF	; 255
    2a44:	e1 e0       	ldi	r30, 0x01	; 1
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	20 30       	cpi	r18, 0x00	; 0
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	38 07       	cpc	r19, r24
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	48 07       	cpc	r20, r24
    2a52:	80 e4       	ldi	r24, 0x40	; 64
    2a54:	58 07       	cpc	r21, r24
    2a56:	28 f5       	brcc	.+74     	; 0x2aa2 <__pack_f+0x146>
    2a58:	e0 e0       	ldi	r30, 0x00	; 0
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	22 c0       	rjmp	.+68     	; 0x2aa2 <__pack_f+0x146>
    2a5e:	e0 38       	cpi	r30, 0x80	; 128
    2a60:	f1 05       	cpc	r31, r1
    2a62:	6c f5       	brge	.+90     	; 0x2abe <__pack_f+0x162>
    2a64:	e1 58       	subi	r30, 0x81	; 129
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	da 01       	movw	r26, r20
    2a6a:	c9 01       	movw	r24, r18
    2a6c:	8f 77       	andi	r24, 0x7F	; 127
    2a6e:	90 70       	andi	r25, 0x00	; 0
    2a70:	a0 70       	andi	r26, 0x00	; 0
    2a72:	b0 70       	andi	r27, 0x00	; 0
    2a74:	80 34       	cpi	r24, 0x40	; 64
    2a76:	91 05       	cpc	r25, r1
    2a78:	a1 05       	cpc	r26, r1
    2a7a:	b1 05       	cpc	r27, r1
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <__pack_f+0x130>
    2a7e:	27 ff       	sbrs	r18, 7
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <__pack_f+0x138>
    2a82:	20 5c       	subi	r18, 0xC0	; 192
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	4f 4f       	sbci	r20, 0xFF	; 255
    2a88:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <__pack_f+0x138>
    2a8c:	21 5c       	subi	r18, 0xC1	; 193
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	4f 4f       	sbci	r20, 0xFF	; 255
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	57 ff       	sbrs	r21, 7
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <__pack_f+0x146>
    2a98:	56 95       	lsr	r21
    2a9a:	47 95       	ror	r20
    2a9c:	37 95       	ror	r19
    2a9e:	27 95       	ror	r18
    2aa0:	31 96       	adiw	r30, 0x01	; 1
    2aa2:	87 e0       	ldi	r24, 0x07	; 7
    2aa4:	56 95       	lsr	r21
    2aa6:	47 95       	ror	r20
    2aa8:	37 95       	ror	r19
    2aaa:	27 95       	ror	r18
    2aac:	8a 95       	dec	r24
    2aae:	d1 f7       	brne	.-12     	; 0x2aa4 <__pack_f+0x148>
    2ab0:	0b c0       	rjmp	.+22     	; 0x2ac8 <__pack_f+0x16c>
    2ab2:	e0 e0       	ldi	r30, 0x00	; 0
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	05 c0       	rjmp	.+10     	; 0x2ac2 <__pack_f+0x166>
    2ab8:	e0 e0       	ldi	r30, 0x00	; 0
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <__pack_f+0x16c>
    2abe:	ef ef       	ldi	r30, 0xFF	; 255
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	a9 01       	movw	r20, r18
    2ac8:	8e 2f       	mov	r24, r30
    2aca:	87 95       	ror	r24
    2acc:	88 27       	eor	r24, r24
    2ace:	87 95       	ror	r24
    2ad0:	94 2f       	mov	r25, r20
    2ad2:	9f 77       	andi	r25, 0x7F	; 127
    2ad4:	67 95       	ror	r22
    2ad6:	66 27       	eor	r22, r22
    2ad8:	67 95       	ror	r22
    2ada:	e6 95       	lsr	r30
    2adc:	e2 2e       	mov	r14, r18
    2ade:	a9 2f       	mov	r26, r25
    2ae0:	a8 2b       	or	r26, r24
    2ae2:	fe 2f       	mov	r31, r30
    2ae4:	f6 2b       	or	r31, r22
    2ae6:	62 2f       	mov	r22, r18
    2ae8:	73 2f       	mov	r23, r19
    2aea:	8a 2f       	mov	r24, r26
    2aec:	9f 2f       	mov	r25, r31
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	e6 e0       	ldi	r30, 0x06	; 6
    2af4:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x18>

00002af8 <__unpack_f>:
    2af8:	dc 01       	movw	r26, r24
    2afa:	fb 01       	movw	r30, r22
    2afc:	2c 91       	ld	r18, X
    2afe:	11 96       	adiw	r26, 0x01	; 1
    2b00:	3c 91       	ld	r19, X
    2b02:	11 97       	sbiw	r26, 0x01	; 1
    2b04:	12 96       	adiw	r26, 0x02	; 2
    2b06:	8c 91       	ld	r24, X
    2b08:	12 97       	sbiw	r26, 0x02	; 2
    2b0a:	48 2f       	mov	r20, r24
    2b0c:	4f 77       	andi	r20, 0x7F	; 127
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	98 2f       	mov	r25, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	99 27       	eor	r25, r25
    2b16:	99 1f       	adc	r25, r25
    2b18:	13 96       	adiw	r26, 0x03	; 3
    2b1a:	6c 91       	ld	r22, X
    2b1c:	13 97       	sbiw	r26, 0x03	; 3
    2b1e:	86 2f       	mov	r24, r22
    2b20:	88 0f       	add	r24, r24
    2b22:	89 2b       	or	r24, r25
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	66 1f       	adc	r22, r22
    2b28:	66 27       	eor	r22, r22
    2b2a:	66 1f       	adc	r22, r22
    2b2c:	61 83       	std	Z+1, r22	; 0x01
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	39 f5       	brne	.+78     	; 0x2b80 <__unpack_f+0x88>
    2b32:	21 15       	cp	r18, r1
    2b34:	31 05       	cpc	r19, r1
    2b36:	41 05       	cpc	r20, r1
    2b38:	51 05       	cpc	r21, r1
    2b3a:	11 f4       	brne	.+4      	; 0x2b40 <__unpack_f+0x48>
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	29 c0       	rjmp	.+82     	; 0x2b92 <__unpack_f+0x9a>
    2b40:	82 e8       	ldi	r24, 0x82	; 130
    2b42:	9f ef       	ldi	r25, 0xFF	; 255
    2b44:	82 83       	std	Z+2, r24	; 0x02
    2b46:	93 83       	std	Z+3, r25	; 0x03
    2b48:	67 e0       	ldi	r22, 0x07	; 7
    2b4a:	22 0f       	add	r18, r18
    2b4c:	33 1f       	adc	r19, r19
    2b4e:	44 1f       	adc	r20, r20
    2b50:	55 1f       	adc	r21, r21
    2b52:	6a 95       	dec	r22
    2b54:	d1 f7       	brne	.-12     	; 0x2b4a <__unpack_f+0x52>
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	80 83       	st	Z, r24
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <__unpack_f+0x76>
    2b5c:	22 0f       	add	r18, r18
    2b5e:	33 1f       	adc	r19, r19
    2b60:	44 1f       	adc	r20, r20
    2b62:	55 1f       	adc	r21, r21
    2b64:	82 81       	ldd	r24, Z+2	; 0x02
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	82 83       	std	Z+2, r24	; 0x02
    2b6c:	93 83       	std	Z+3, r25	; 0x03
    2b6e:	20 30       	cpi	r18, 0x00	; 0
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	38 07       	cpc	r19, r24
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	48 07       	cpc	r20, r24
    2b78:	80 e4       	ldi	r24, 0x40	; 64
    2b7a:	58 07       	cpc	r21, r24
    2b7c:	78 f3       	brcs	.-34     	; 0x2b5c <__unpack_f+0x64>
    2b7e:	20 c0       	rjmp	.+64     	; 0x2bc0 <__unpack_f+0xc8>
    2b80:	8f 3f       	cpi	r24, 0xFF	; 255
    2b82:	91 05       	cpc	r25, r1
    2b84:	79 f4       	brne	.+30     	; 0x2ba4 <__unpack_f+0xac>
    2b86:	21 15       	cp	r18, r1
    2b88:	31 05       	cpc	r19, r1
    2b8a:	41 05       	cpc	r20, r1
    2b8c:	51 05       	cpc	r21, r1
    2b8e:	19 f4       	brne	.+6      	; 0x2b96 <__unpack_f+0x9e>
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	80 83       	st	Z, r24
    2b94:	08 95       	ret
    2b96:	44 ff       	sbrs	r20, 4
    2b98:	03 c0       	rjmp	.+6      	; 0x2ba0 <__unpack_f+0xa8>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	80 83       	st	Z, r24
    2b9e:	10 c0       	rjmp	.+32     	; 0x2bc0 <__unpack_f+0xc8>
    2ba0:	10 82       	st	Z, r1
    2ba2:	0e c0       	rjmp	.+28     	; 0x2bc0 <__unpack_f+0xc8>
    2ba4:	8f 57       	subi	r24, 0x7F	; 127
    2ba6:	90 40       	sbci	r25, 0x00	; 0
    2ba8:	82 83       	std	Z+2, r24	; 0x02
    2baa:	93 83       	std	Z+3, r25	; 0x03
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	80 83       	st	Z, r24
    2bb0:	87 e0       	ldi	r24, 0x07	; 7
    2bb2:	22 0f       	add	r18, r18
    2bb4:	33 1f       	adc	r19, r19
    2bb6:	44 1f       	adc	r20, r20
    2bb8:	55 1f       	adc	r21, r21
    2bba:	8a 95       	dec	r24
    2bbc:	d1 f7       	brne	.-12     	; 0x2bb2 <__unpack_f+0xba>
    2bbe:	50 64       	ori	r21, 0x40	; 64
    2bc0:	24 83       	std	Z+4, r18	; 0x04
    2bc2:	35 83       	std	Z+5, r19	; 0x05
    2bc4:	46 83       	std	Z+6, r20	; 0x06
    2bc6:	57 83       	std	Z+7, r21	; 0x07
    2bc8:	08 95       	ret

00002bca <__fpcmp_parts_f>:
    2bca:	fc 01       	movw	r30, r24
    2bcc:	db 01       	movw	r26, r22
    2bce:	90 81       	ld	r25, Z
    2bd0:	92 30       	cpi	r25, 0x02	; 2
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <__fpcmp_parts_f+0xc>
    2bd4:	49 c0       	rjmp	.+146    	; 0x2c68 <__fpcmp_parts_f+0x9e>
    2bd6:	8c 91       	ld	r24, X
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <__fpcmp_parts_f+0x14>
    2bdc:	45 c0       	rjmp	.+138    	; 0x2c68 <__fpcmp_parts_f+0x9e>
    2bde:	94 30       	cpi	r25, 0x04	; 4
    2be0:	51 f4       	brne	.+20     	; 0x2bf6 <__fpcmp_parts_f+0x2c>
    2be2:	61 81       	ldd	r22, Z+1	; 0x01
    2be4:	84 30       	cpi	r24, 0x04	; 4
    2be6:	b1 f5       	brne	.+108    	; 0x2c54 <__fpcmp_parts_f+0x8a>
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	2c 91       	ld	r18, X
    2bec:	11 97       	sbiw	r26, 0x01	; 1
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	26 1b       	sub	r18, r22
    2bf2:	31 09       	sbc	r19, r1
    2bf4:	41 c0       	rjmp	.+130    	; 0x2c78 <__fpcmp_parts_f+0xae>
    2bf6:	84 30       	cpi	r24, 0x04	; 4
    2bf8:	21 f0       	breq	.+8      	; 0x2c02 <__fpcmp_parts_f+0x38>
    2bfa:	92 30       	cpi	r25, 0x02	; 2
    2bfc:	41 f4       	brne	.+16     	; 0x2c0e <__fpcmp_parts_f+0x44>
    2bfe:	82 30       	cpi	r24, 0x02	; 2
    2c00:	b1 f1       	breq	.+108    	; 0x2c6e <__fpcmp_parts_f+0xa4>
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	8c 91       	ld	r24, X
    2c06:	11 97       	sbiw	r26, 0x01	; 1
    2c08:	88 23       	and	r24, r24
    2c0a:	a1 f1       	breq	.+104    	; 0x2c74 <__fpcmp_parts_f+0xaa>
    2c0c:	2d c0       	rjmp	.+90     	; 0x2c68 <__fpcmp_parts_f+0x9e>
    2c0e:	61 81       	ldd	r22, Z+1	; 0x01
    2c10:	82 30       	cpi	r24, 0x02	; 2
    2c12:	01 f1       	breq	.+64     	; 0x2c54 <__fpcmp_parts_f+0x8a>
    2c14:	11 96       	adiw	r26, 0x01	; 1
    2c16:	8c 91       	ld	r24, X
    2c18:	11 97       	sbiw	r26, 0x01	; 1
    2c1a:	68 17       	cp	r22, r24
    2c1c:	d9 f4       	brne	.+54     	; 0x2c54 <__fpcmp_parts_f+0x8a>
    2c1e:	22 81       	ldd	r18, Z+2	; 0x02
    2c20:	33 81       	ldd	r19, Z+3	; 0x03
    2c22:	12 96       	adiw	r26, 0x02	; 2
    2c24:	8d 91       	ld	r24, X+
    2c26:	9c 91       	ld	r25, X
    2c28:	13 97       	sbiw	r26, 0x03	; 3
    2c2a:	82 17       	cp	r24, r18
    2c2c:	93 07       	cpc	r25, r19
    2c2e:	94 f0       	brlt	.+36     	; 0x2c54 <__fpcmp_parts_f+0x8a>
    2c30:	28 17       	cp	r18, r24
    2c32:	39 07       	cpc	r19, r25
    2c34:	bc f0       	brlt	.+46     	; 0x2c64 <__fpcmp_parts_f+0x9a>
    2c36:	24 81       	ldd	r18, Z+4	; 0x04
    2c38:	35 81       	ldd	r19, Z+5	; 0x05
    2c3a:	46 81       	ldd	r20, Z+6	; 0x06
    2c3c:	57 81       	ldd	r21, Z+7	; 0x07
    2c3e:	14 96       	adiw	r26, 0x04	; 4
    2c40:	8d 91       	ld	r24, X+
    2c42:	9d 91       	ld	r25, X+
    2c44:	0d 90       	ld	r0, X+
    2c46:	bc 91       	ld	r27, X
    2c48:	a0 2d       	mov	r26, r0
    2c4a:	82 17       	cp	r24, r18
    2c4c:	93 07       	cpc	r25, r19
    2c4e:	a4 07       	cpc	r26, r20
    2c50:	b5 07       	cpc	r27, r21
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <__fpcmp_parts_f+0x90>
    2c54:	66 23       	and	r22, r22
    2c56:	41 f0       	breq	.+16     	; 0x2c68 <__fpcmp_parts_f+0x9e>
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <__fpcmp_parts_f+0xaa>
    2c5a:	28 17       	cp	r18, r24
    2c5c:	39 07       	cpc	r19, r25
    2c5e:	4a 07       	cpc	r20, r26
    2c60:	5b 07       	cpc	r21, r27
    2c62:	28 f4       	brcc	.+10     	; 0x2c6e <__fpcmp_parts_f+0xa4>
    2c64:	66 23       	and	r22, r22
    2c66:	31 f0       	breq	.+12     	; 0x2c74 <__fpcmp_parts_f+0xaa>
    2c68:	21 e0       	ldi	r18, 0x01	; 1
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <__fpcmp_parts_f+0xae>
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <__fpcmp_parts_f+0xae>
    2c74:	2f ef       	ldi	r18, 0xFF	; 255
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	c9 01       	movw	r24, r18
    2c7a:	08 95       	ret

00002c7c <__mulsi3>:
    2c7c:	62 9f       	mul	r22, r18
    2c7e:	d0 01       	movw	r26, r0
    2c80:	73 9f       	mul	r23, r19
    2c82:	f0 01       	movw	r30, r0
    2c84:	82 9f       	mul	r24, r18
    2c86:	e0 0d       	add	r30, r0
    2c88:	f1 1d       	adc	r31, r1
    2c8a:	64 9f       	mul	r22, r20
    2c8c:	e0 0d       	add	r30, r0
    2c8e:	f1 1d       	adc	r31, r1
    2c90:	92 9f       	mul	r25, r18
    2c92:	f0 0d       	add	r31, r0
    2c94:	83 9f       	mul	r24, r19
    2c96:	f0 0d       	add	r31, r0
    2c98:	74 9f       	mul	r23, r20
    2c9a:	f0 0d       	add	r31, r0
    2c9c:	65 9f       	mul	r22, r21
    2c9e:	f0 0d       	add	r31, r0
    2ca0:	99 27       	eor	r25, r25
    2ca2:	72 9f       	mul	r23, r18
    2ca4:	b0 0d       	add	r27, r0
    2ca6:	e1 1d       	adc	r30, r1
    2ca8:	f9 1f       	adc	r31, r25
    2caa:	63 9f       	mul	r22, r19
    2cac:	b0 0d       	add	r27, r0
    2cae:	e1 1d       	adc	r30, r1
    2cb0:	f9 1f       	adc	r31, r25
    2cb2:	bd 01       	movw	r22, r26
    2cb4:	cf 01       	movw	r24, r30
    2cb6:	11 24       	eor	r1, r1
    2cb8:	08 95       	ret

00002cba <__udivmodhi4>:
    2cba:	aa 1b       	sub	r26, r26
    2cbc:	bb 1b       	sub	r27, r27
    2cbe:	51 e1       	ldi	r21, 0x11	; 17
    2cc0:	07 c0       	rjmp	.+14     	; 0x2cd0 <__udivmodhi4_ep>

00002cc2 <__udivmodhi4_loop>:
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	a6 17       	cp	r26, r22
    2cc8:	b7 07       	cpc	r27, r23
    2cca:	10 f0       	brcs	.+4      	; 0x2cd0 <__udivmodhi4_ep>
    2ccc:	a6 1b       	sub	r26, r22
    2cce:	b7 0b       	sbc	r27, r23

00002cd0 <__udivmodhi4_ep>:
    2cd0:	88 1f       	adc	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	5a 95       	dec	r21
    2cd6:	a9 f7       	brne	.-22     	; 0x2cc2 <__udivmodhi4_loop>
    2cd8:	80 95       	com	r24
    2cda:	90 95       	com	r25
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	08 95       	ret

00002ce2 <__divmodhi4>:
    2ce2:	97 fb       	bst	r25, 7
    2ce4:	09 2e       	mov	r0, r25
    2ce6:	07 26       	eor	r0, r23
    2ce8:	0a d0       	rcall	.+20     	; 0x2cfe <__divmodhi4_neg1>
    2cea:	77 fd       	sbrc	r23, 7
    2cec:	04 d0       	rcall	.+8      	; 0x2cf6 <__divmodhi4_neg2>
    2cee:	e5 df       	rcall	.-54     	; 0x2cba <__udivmodhi4>
    2cf0:	06 d0       	rcall	.+12     	; 0x2cfe <__divmodhi4_neg1>
    2cf2:	00 20       	and	r0, r0
    2cf4:	1a f4       	brpl	.+6      	; 0x2cfc <__divmodhi4_exit>

00002cf6 <__divmodhi4_neg2>:
    2cf6:	70 95       	com	r23
    2cf8:	61 95       	neg	r22
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255

00002cfc <__divmodhi4_exit>:
    2cfc:	08 95       	ret

00002cfe <__divmodhi4_neg1>:
    2cfe:	f6 f7       	brtc	.-4      	; 0x2cfc <__divmodhi4_exit>
    2d00:	90 95       	com	r25
    2d02:	81 95       	neg	r24
    2d04:	9f 4f       	sbci	r25, 0xFF	; 255
    2d06:	08 95       	ret

00002d08 <__udivmodsi4>:
    2d08:	a1 e2       	ldi	r26, 0x21	; 33
    2d0a:	1a 2e       	mov	r1, r26
    2d0c:	aa 1b       	sub	r26, r26
    2d0e:	bb 1b       	sub	r27, r27
    2d10:	fd 01       	movw	r30, r26
    2d12:	0d c0       	rjmp	.+26     	; 0x2d2e <__udivmodsi4_ep>

00002d14 <__udivmodsi4_loop>:
    2d14:	aa 1f       	adc	r26, r26
    2d16:	bb 1f       	adc	r27, r27
    2d18:	ee 1f       	adc	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	a2 17       	cp	r26, r18
    2d1e:	b3 07       	cpc	r27, r19
    2d20:	e4 07       	cpc	r30, r20
    2d22:	f5 07       	cpc	r31, r21
    2d24:	20 f0       	brcs	.+8      	; 0x2d2e <__udivmodsi4_ep>
    2d26:	a2 1b       	sub	r26, r18
    2d28:	b3 0b       	sbc	r27, r19
    2d2a:	e4 0b       	sbc	r30, r20
    2d2c:	f5 0b       	sbc	r31, r21

00002d2e <__udivmodsi4_ep>:
    2d2e:	66 1f       	adc	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	88 1f       	adc	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	1a 94       	dec	r1
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <__udivmodsi4_loop>
    2d3a:	60 95       	com	r22
    2d3c:	70 95       	com	r23
    2d3e:	80 95       	com	r24
    2d40:	90 95       	com	r25
    2d42:	9b 01       	movw	r18, r22
    2d44:	ac 01       	movw	r20, r24
    2d46:	bd 01       	movw	r22, r26
    2d48:	cf 01       	movw	r24, r30
    2d4a:	08 95       	ret

00002d4c <__prologue_saves__>:
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	ca 1b       	sub	r28, r26
    2d76:	db 0b       	sbc	r29, r27
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	09 94       	ijmp

00002d7e <__epilogue_restores__>:
    2d7e:	2a 88       	ldd	r2, Y+18	; 0x12
    2d80:	39 88       	ldd	r3, Y+17	; 0x11
    2d82:	48 88       	ldd	r4, Y+16	; 0x10
    2d84:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d86:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d88:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d90:	b9 84       	ldd	r11, Y+9	; 0x09
    2d92:	c8 84       	ldd	r12, Y+8	; 0x08
    2d94:	df 80       	ldd	r13, Y+7	; 0x07
    2d96:	ee 80       	ldd	r14, Y+6	; 0x06
    2d98:	fd 80       	ldd	r15, Y+5	; 0x05
    2d9a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d9c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2da0:	b9 81       	ldd	r27, Y+1	; 0x01
    2da2:	ce 0f       	add	r28, r30
    2da4:	d1 1d       	adc	r29, r1
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	ed 01       	movw	r28, r26
    2dac:	08 95       	ret

00002dae <do_rand>:
    2dae:	a0 e0       	ldi	r26, 0x00	; 0
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ed ed       	ldi	r30, 0xDD	; 221
    2db4:	f6 e1       	ldi	r31, 0x16	; 22
    2db6:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x10>
    2dba:	ec 01       	movw	r28, r24
    2dbc:	68 81       	ld	r22, Y
    2dbe:	79 81       	ldd	r23, Y+1	; 0x01
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	61 15       	cp	r22, r1
    2dc6:	71 05       	cpc	r23, r1
    2dc8:	81 05       	cpc	r24, r1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <do_rand+0x28>
    2dce:	64 e2       	ldi	r22, 0x24	; 36
    2dd0:	79 ed       	ldi	r23, 0xD9	; 217
    2dd2:	8b e5       	ldi	r24, 0x5B	; 91
    2dd4:	97 e0       	ldi	r25, 0x07	; 7
    2dd6:	2d e1       	ldi	r18, 0x1D	; 29
    2dd8:	33 ef       	ldi	r19, 0xF3	; 243
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__divmodsi4>
    2de2:	79 01       	movw	r14, r18
    2de4:	8a 01       	movw	r16, r20
    2de6:	27 ea       	ldi	r18, 0xA7	; 167
    2de8:	31 e4       	ldi	r19, 0x41	; 65
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    2df2:	5b 01       	movw	r10, r22
    2df4:	6c 01       	movw	r12, r24
    2df6:	c8 01       	movw	r24, r16
    2df8:	b7 01       	movw	r22, r14
    2dfa:	2c ee       	ldi	r18, 0xEC	; 236
    2dfc:	34 ef       	ldi	r19, 0xF4	; 244
    2dfe:	4f ef       	ldi	r20, 0xFF	; 255
    2e00:	5f ef       	ldi	r21, 0xFF	; 255
    2e02:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    2e06:	6a 0d       	add	r22, r10
    2e08:	7b 1d       	adc	r23, r11
    2e0a:	8c 1d       	adc	r24, r12
    2e0c:	9d 1d       	adc	r25, r13
    2e0e:	97 ff       	sbrs	r25, 7
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <do_rand+0x6c>
    2e12:	61 50       	subi	r22, 0x01	; 1
    2e14:	70 40       	sbci	r23, 0x00	; 0
    2e16:	80 40       	sbci	r24, 0x00	; 0
    2e18:	90 48       	sbci	r25, 0x80	; 128
    2e1a:	68 83       	st	Y, r22
    2e1c:	79 83       	std	Y+1, r23	; 0x01
    2e1e:	8a 83       	std	Y+2, r24	; 0x02
    2e20:	9b 83       	std	Y+3, r25	; 0x03
    2e22:	7f 77       	andi	r23, 0x7F	; 127
    2e24:	cb 01       	movw	r24, r22
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	ea e0       	ldi	r30, 0x0A	; 10
    2e2c:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x10>

00002e30 <rand_r>:
    2e30:	0e 94 d7 16 	call	0x2dae	; 0x2dae <do_rand>
    2e34:	08 95       	ret

00002e36 <rand>:
    2e36:	87 e5       	ldi	r24, 0x57	; 87
    2e38:	91 e2       	ldi	r25, 0x21	; 33
    2e3a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <do_rand>
    2e3e:	08 95       	ret

00002e40 <srand>:
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	80 93 57 21 	sts	0x2157, r24
    2e48:	90 93 58 21 	sts	0x2158, r25
    2e4c:	a0 93 59 21 	sts	0x2159, r26
    2e50:	b0 93 5a 21 	sts	0x215A, r27
    2e54:	08 95       	ret

00002e56 <__divmodsi4>:
    2e56:	97 fb       	bst	r25, 7
    2e58:	09 2e       	mov	r0, r25
    2e5a:	05 26       	eor	r0, r21
    2e5c:	0e d0       	rcall	.+28     	; 0x2e7a <__divmodsi4_neg1>
    2e5e:	57 fd       	sbrc	r21, 7
    2e60:	04 d0       	rcall	.+8      	; 0x2e6a <__divmodsi4_neg2>
    2e62:	52 df       	rcall	.-348    	; 0x2d08 <__udivmodsi4>
    2e64:	0a d0       	rcall	.+20     	; 0x2e7a <__divmodsi4_neg1>
    2e66:	00 1c       	adc	r0, r0
    2e68:	38 f4       	brcc	.+14     	; 0x2e78 <__divmodsi4_exit>

00002e6a <__divmodsi4_neg2>:
    2e6a:	50 95       	com	r21
    2e6c:	40 95       	com	r20
    2e6e:	30 95       	com	r19
    2e70:	21 95       	neg	r18
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	4f 4f       	sbci	r20, 0xFF	; 255
    2e76:	5f 4f       	sbci	r21, 0xFF	; 255

00002e78 <__divmodsi4_exit>:
    2e78:	08 95       	ret

00002e7a <__divmodsi4_neg1>:
    2e7a:	f6 f7       	brtc	.-4      	; 0x2e78 <__divmodsi4_exit>
    2e7c:	90 95       	com	r25
    2e7e:	80 95       	com	r24
    2e80:	70 95       	com	r23
    2e82:	61 95       	neg	r22
    2e84:	7f 4f       	sbci	r23, 0xFF	; 255
    2e86:	8f 4f       	sbci	r24, 0xFF	; 255
    2e88:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8a:	08 95       	ret

00002e8c <_exit>:
    2e8c:	f8 94       	cli

00002e8e <__stop_program>:
    2e8e:	ff cf       	rjmp	.-2      	; 0x2e8e <__stop_program>
