
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00802000  000025f2  00002686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000107  00802158  00802158  000027de  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a6f  00000000  00000000  000031b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000564f  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c3f  00000000  00000000  0000926f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000031b9  00000000  00000000  0000aeae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000750  00000000  00000000  0000e068  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016b3  00000000  00000000  0000e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e6d  00000000  00000000  0000fe6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000bf1  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  000128c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_91>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e2 ef       	ldi	r30, 0xF2	; 242
     18c:	f5 e2       	ldi	r31, 0x25	; 37
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 35       	cpi	r26, 0x58	; 88
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a8 e5       	ldi	r26, 0x58	; 88
     19e:	b1 e2       	ldi	r27, 0x21	; 33
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	af 35       	cpi	r26, 0x5F	; 95
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 08 07 	call	0xe10	; 0xe10 <main>
     1ae:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <get_encoder>:
    last_a = current_a;
}

turn_state get_encoder(){
    return encoder_state;
}
     1b6:	80 91 6e 21 	lds	r24, 0x216E
     1ba:	08 95       	ret

000001bc <get_pot_value>:
            pot_values[i] = pot_values[i] - POTMIN;
    }
    
}

uint16_t get_pot_value(uint8_t pot, uint16_t outmin, uint16_t outmax){
     1bc:	2f 92       	push	r2
     1be:	3f 92       	push	r3
     1c0:	4f 92       	push	r4
     1c2:	5f 92       	push	r5
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <get_pot_value+0x26>
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	6b 01       	movw	r12, r22
     1e8:	2a 01       	movw	r4, r20
    //outmax: maximum value to output
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	ec 59       	subi	r30, 0x9C	; 156
     1f4:	fe 4d       	sbci	r31, 0xDE	; 222
     1f6:	60 81       	ld	r22, Z
     1f8:	71 81       	ldd	r23, Z+1	; 0x01
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatunsisf>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	42 e7       	ldi	r20, 0x72	; 114
     208:	55 e4       	ldi	r21, 0x45	; 69
     20a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
     20e:	7b 01       	movw	r14, r22
     210:	8c 01       	movw	r16, r24
    temp = temp*(outmax - outmin + 1) + outmin;
     212:	b2 01       	movw	r22, r4
     214:	6c 19       	sub	r22, r12
     216:	7d 09       	sbc	r23, r13
     218:	6f 5f       	subi	r22, 0xFF	; 255
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatunsisf>
     224:	9b 01       	movw	r18, r22
     226:	ac 01       	movw	r20, r24
     228:	c8 01       	movw	r24, r16
     22a:	b7 01       	movw	r22, r14
     22c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__mulsf3>
     230:	7b 01       	movw	r14, r22
     232:	8c 01       	movw	r16, r24
     234:	b6 01       	movw	r22, r12
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatunsisf>
     23e:	d6 2e       	mov	r13, r22
     240:	c7 2e       	mov	r12, r23
     242:	b8 2e       	mov	r11, r24
     244:	a9 2e       	mov	r10, r25
     246:	16 01       	movw	r2, r12
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	6e 2d       	mov	r22, r14
     24e:	7f 2d       	mov	r23, r15
     250:	80 2f       	mov	r24, r16
     252:	91 2f       	mov	r25, r17
     254:	d6 01       	movw	r26, r12
     256:	f5 01       	movw	r30, r10
     258:	2b 2f       	mov	r18, r27
     25a:	3a 2f       	mov	r19, r26
     25c:	4f 2f       	mov	r20, r31
     25e:	5e 2f       	mov	r21, r30
     260:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__addsf3>
     264:	96 2e       	mov	r9, r22
     266:	87 2e       	mov	r8, r23
     268:	78 2e       	mov	r7, r24
     26a:	69 2e       	mov	r6, r25
	
	if (temp > outmax)
     26c:	b2 01       	movw	r22, r4
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatunsisf>
     276:	f6 2e       	mov	r15, r22
     278:	07 2f       	mov	r16, r23
     27a:	18 2f       	mov	r17, r24
     27c:	e9 2e       	mov	r14, r25
     27e:	a4 01       	movw	r20, r8
     280:	93 01       	movw	r18, r6
     282:	65 2f       	mov	r22, r21
     284:	74 2f       	mov	r23, r20
     286:	83 2f       	mov	r24, r19
     288:	92 2f       	mov	r25, r18
     28a:	2f 2d       	mov	r18, r15
     28c:	30 2f       	mov	r19, r16
     28e:	41 2f       	mov	r20, r17
     290:	5e 2d       	mov	r21, r14
     292:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__gtsf2>
     296:	18 16       	cp	r1, r24
     298:	24 f0       	brlt	.+8      	; 0x2a2 <get_pot_value+0xe6>
    
	const uint16_t pot_range = POTMAX - POTMIN + 1; 
    float temp;
    
    temp = 1.0*pot_values[pot]/pot_range;
    temp = temp*(outmax - outmin + 1) + outmin;
     29a:	f9 2c       	mov	r15, r9
     29c:	08 2d       	mov	r16, r8
     29e:	17 2d       	mov	r17, r7
     2a0:	e6 2c       	mov	r14, r6
	
	if (temp > outmax)
		temp = outmax;
		
	if (temp < outmin)
     2a2:	6f 2d       	mov	r22, r15
     2a4:	70 2f       	mov	r23, r16
     2a6:	81 2f       	mov	r24, r17
     2a8:	9e 2d       	mov	r25, r14
     2aa:	d6 01       	movw	r26, r12
     2ac:	f5 01       	movw	r30, r10
     2ae:	2b 2f       	mov	r18, r27
     2b0:	3c 2d       	mov	r19, r12
     2b2:	4f 2f       	mov	r20, r31
     2b4:	5a 2d       	mov	r21, r10
     2b6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__ltsf2>
     2ba:	87 fd       	sbrc	r24, 7
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <get_pot_value+0x10a>
     2be:	3f 2c       	mov	r3, r15
     2c0:	20 2e       	mov	r2, r16
     2c2:	19 83       	std	Y+1, r17	; 0x01
     2c4:	ea 82       	std	Y+2, r14	; 0x02
		temp = outmin;
    
    return (uint16_t) temp;
     2c6:	a1 01       	movw	r20, r2
     2c8:	39 81       	ldd	r19, Y+1	; 0x01
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	65 2f       	mov	r22, r21
     2ce:	72 2d       	mov	r23, r2
     2d0:	83 2f       	mov	r24, r19
     2d2:	92 2f       	mov	r25, r18
     2d4:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fixunssfsi>
}
     2d8:	cb 01       	movw	r24, r22
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	7f 90       	pop	r7
     2f8:	6f 90       	pop	r6
     2fa:	5f 90       	pop	r5
     2fc:	4f 90       	pop	r4
     2fe:	3f 90       	pop	r3
     300:	2f 90       	pop	r2
     302:	08 95       	ret

00000304 <set_seven_segment_LEDs>:
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
}

void set_seven_segment_LEDs(uint16_t seven_segment_value){
     304:	8f 92       	push	r8
     306:	9f 92       	push	r9
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	fc 01       	movw	r30, r24
     31e:	22 e0       	ldi	r18, 0x02	; 2
     320:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     322:	ca e0       	ldi	r28, 0x0A	; 10
     324:	d0 e0       	ldi	r29, 0x00	; 0
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
            digit = 10;
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     326:	73 e0       	ldi	r23, 0x03	; 3
     328:	c7 2e       	mov	r12, r23
     32a:	d1 2c       	mov	r13, r1
     32c:	68 e0       	ldi	r22, 0x08	; 8
     32e:	a6 2e       	mov	r10, r22
     330:	b1 2c       	mov	r11, r1
     332:	00 e6       	ldi	r16, 0x60	; 96
     334:	16 e0       	ldi	r17, 0x06	; 6
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     336:	50 e4       	ldi	r21, 0x40	; 64
     338:	e5 2e       	mov	r14, r21
     33a:	56 e0       	ldi	r21, 0x06	; 6
     33c:	f5 2e       	mov	r15, r21
     33e:	40 ef       	ldi	r20, 0xF0	; 240
     340:	94 2e       	mov	r9, r20
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     342:	98 e3       	ldi	r25, 0x38	; 56
     344:	89 2e       	mov	r8, r25
void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
        digit = seven_segment_value%10;                 //extract lowest current digit of 7seg
     346:	cf 01       	movw	r24, r30
     348:	be 01       	movw	r22, r28
     34a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__udivmodhi4>
     34e:	48 2f       	mov	r20, r24
        if (seven_segment_value==0 && (i>0))            //if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     350:	30 97       	sbiw	r30, 0x00	; 0
     352:	19 f4       	brne	.+6      	; 0x35a <set_seven_segment_LEDs+0x56>
     354:	22 30       	cpi	r18, 0x02	; 2
     356:	09 f0       	breq	.+2      	; 0x35a <set_seven_segment_LEDs+0x56>
            digit = 10;
     358:	4a e0       	ldi	r20, 0x0A	; 10
            
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
     35a:	c9 01       	movw	r24, r18
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 91 12 	call	0x2522	; 0x2522 <__divmodhi4>
     362:	b5 01       	movw	r22, r10
     364:	02 c0       	rjmp	.+4      	; 0x36a <set_seven_segment_LEDs+0x66>
     366:	66 0f       	add	r22, r22
     368:	77 1f       	adc	r23, r23
     36a:	8a 95       	dec	r24
     36c:	e2 f7       	brpl	.-8      	; 0x366 <set_seven_segment_LEDs+0x62>
     36e:	d8 01       	movw	r26, r16
     370:	16 96       	adiw	r26, 0x06	; 6
     372:	6c 93       	st	X, r22
        PORTC.OUTCLR = 0xF0;                    //clear digit select
     374:	d7 01       	movw	r26, r14
     376:	16 96       	adiw	r26, 0x06	; 6
     378:	9c 92       	st	X, r9
     37a:	16 97       	sbiw	r26, 0x06	; 6
        PORTC.OUTSET = digit << 4;              //set digit select #
     37c:	42 95       	swap	r20
     37e:	40 7f       	andi	r20, 0xF0	; 240
     380:	15 96       	adiw	r26, 0x05	; 5
     382:	4c 93       	st	X, r20
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
     384:	d8 01       	movw	r26, r16
     386:	15 96       	adiw	r26, 0x05	; 5
     388:	8c 92       	st	X, r8
     38a:	15 97       	sbiw	r26, 0x05	; 5
     38c:	2f 5f       	subi	r18, 0xFF	; 255
     38e:	3f 4f       	sbci	r19, 0xFF	; 255

void set_seven_segment_LEDs(uint16_t seven_segment_value){
    uint8_t i;
    uint8_t digit;
    
    for (i=0 ; i<3 ; i++){
     390:	25 30       	cpi	r18, 0x05	; 5
     392:	31 05       	cpc	r19, r1
     394:	31 f0       	breq	.+12     	; 0x3a2 <set_seven_segment_LEDs+0x9e>
        PORTD.OUTCLR = 0x08 << (i+2)%3;         //arm appropriate 7 segment        (CHANGE INDEX SCALING FOR NEXT REVISION)
        PORTC.OUTCLR = 0xF0;                    //clear digit select
        PORTC.OUTSET = digit << 4;              //set digit select #
        PORTD.OUTSET = 0x38;                    //disarm all 7 segments
        
        seven_segment_value = seven_segment_value/10;           //shift 7seg number down to next digit 
     396:	cf 01       	movw	r24, r30
     398:	be 01       	movw	r22, r28
     39a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__udivmodhi4>
     39e:	fb 01       	movw	r30, r22
     3a0:	d2 cf       	rjmp	.-92     	; 0x346 <set_seven_segment_LEDs+0x42>
    }
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	08 95       	ret

000003bc <set_LEDs_on>:

void set_LEDs_on(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     3bc:	88 23       	and	r24, r24
     3be:	21 f0       	breq	.+8      	; 0x3c8 <set_LEDs_on+0xc>
		PORTC.OUTCLR = 0x08;
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f6 e0       	ldi	r31, 0x06	; 6
     3c6:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_0)
     3c8:	66 23       	and	r22, r22
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <set_LEDs_on+0x18>
		PORTD.OUTSET = 0x04;
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	e0 e6       	ldi	r30, 0x60	; 96
     3d0:	f6 e0       	ldi	r31, 0x06	; 6
     3d2:	85 83       	std	Z+5, r24	; 0x05
		
	if (decimal_point_1)
     3d4:	44 23       	and	r20, r20
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <set_LEDs_on+0x24>
		PORTD.OUTSET = 0x01;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	e0 e6       	ldi	r30, 0x60	; 96
     3dc:	f6 e0       	ldi	r31, 0x06	; 6
     3de:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_2)
     3e0:	22 23       	and	r18, r18
     3e2:	21 f0       	breq	.+8      	; 0x3ec <set_LEDs_on+0x30>
		PORTD.OUTSET = 0x02;
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	e0 e6       	ldi	r30, 0x60	; 96
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	85 83       	std	Z+5, r24	; 0x05
     3ec:	08 95       	ret

000003ee <set_LEDs_off>:
}

void set_LEDs_off(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2){
    //booleans and such convert to LED out
	if (status_LED)
     3ee:	88 23       	and	r24, r24
     3f0:	21 f0       	breq	.+8      	; 0x3fa <set_LEDs_off+0xc>
		PORTC.OUTSET = 0x08;
     3f2:	88 e0       	ldi	r24, 0x08	; 8
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f6 e0       	ldi	r31, 0x06	; 6
     3f8:	85 83       	std	Z+5, r24	; 0x05
	
	if (decimal_point_0)
     3fa:	66 23       	and	r22, r22
     3fc:	21 f0       	breq	.+8      	; 0x406 <set_LEDs_off+0x18>
		PORTD.OUTCLR = 0x04;
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	e0 e6       	ldi	r30, 0x60	; 96
     402:	f6 e0       	ldi	r31, 0x06	; 6
     404:	86 83       	std	Z+6, r24	; 0x06
		
	if (decimal_point_1)
     406:	44 23       	and	r20, r20
     408:	21 f0       	breq	.+8      	; 0x412 <set_LEDs_off+0x24>
		PORTD.OUTCLR = 0x01;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	e0 e6       	ldi	r30, 0x60	; 96
     40e:	f6 e0       	ldi	r31, 0x06	; 6
     410:	86 83       	std	Z+6, r24	; 0x06
	
	if (decimal_point_2)
     412:	22 23       	and	r18, r18
     414:	21 f0       	breq	.+8      	; 0x41e <set_LEDs_off+0x30>
		PORTD.OUTCLR = 0x02;
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	e0 e6       	ldi	r30, 0x60	; 96
     41a:	f6 e0       	ldi	r31, 0x06	; 6
     41c:	86 83       	std	Z+6, r24	; 0x06
     41e:	08 95       	ret

00000420 <get_encoder_switch_state>:
  
}

bool get_encoder_switch_state(){
    return encoder_switch_state;
}
     420:	80 91 5c 21 	lds	r24, 0x215C
     424:	08 95       	ret

00000426 <get_encoder_switch_edge>:

switch_edge get_encoder_switch_edge(){
    return encoder_switch_edge;
}
     426:	80 91 5d 21 	lds	r24, 0x215D
     42a:	08 95       	ret

0000042c <get_pushbutton_switch_state>:

bool get_pushbutton_switch_state(){
    return pushbutton_switch_state;
}
     42c:	80 91 5a 21 	lds	r24, 0x215A
     430:	08 95       	ret

00000432 <get_pushbutton_switch_edge>:

switch_edge get_pushbutton_switch_edge(){
    return pushbutton_switch_edge;
}
     432:	80 91 5b 21 	lds	r24, 0x215B
     436:	08 95       	ret

00000438 <get_toggle_switch_state>:

bool get_toggle_switch_state(){
    return toggle_switch_state;
}
     438:	80 91 58 21 	lds	r24, 0x2158
     43c:	08 95       	ret

0000043e <get_toggle_switch_edge>:

switch_edge get_toggle_switch_edge(){
    return toggle_switch_edge;
}
     43e:	80 91 59 21 	lds	r24, 0x2159
     442:	08 95       	ret

00000444 <initialize_hardware>:

void initialize_hardware(){
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     448:	e0 e4       	ldi	r30, 0x40	; 64
     44a:	f0 e0       	ldi	r31, 0x00	; 0
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     44c:	61 e0       	ldi	r22, 0x01	; 1
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     44e:	84 e0       	ldi	r24, 0x04	; 4
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     450:	c0 e5       	ldi	r28, 0x50	; 80
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	5b e8       	ldi	r21, 0x8B	; 139
        OSC.CTRL = 0x08;                //enable external clock 
     456:	48 e0       	ldi	r20, 0x08	; 8
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     458:	a0 e5       	ldi	r26, 0x50	; 80
     45a:	b0 e0       	ldi	r27, 0x00	; 0
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     45c:	32 ec       	ldi	r19, 0xC2	; 194
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     45e:	28 e1       	ldi	r18, 0x18	; 24
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     460:	98 ed       	ldi	r25, 0xD8	; 216
     462:	15 c0       	rjmp	.+42     	; 0x48e <initialize_hardware+0x4a>
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
        CLK.PSCTRL = 0x01;               //Set Prescaler to 1.
     464:	61 83       	std	Z+1, r22	; 0x01
        CLK.RTCCTRL = 0x04;              //Set Real Time Clock Control to internal RCOSC but do not enable.      
     466:	83 83       	std	Z+3, r24	; 0x03
        OSC.XOSCCTRL = 0x8B;            //prepare for external clock (8-12 MHz)
     468:	5a 83       	std	Y+2, r21	; 0x02
        OSC.CTRL = 0x08;                //enable external clock 
     46a:	40 93 50 00 	sts	0x0050, r20
        while (!(OSC.STATUS & 0x08)){}  //wait for External Oscillator to become stable and ready
     46e:	70 91 51 00 	lds	r23, 0x0051
     472:	73 ff       	sbrs	r23, 3
     474:	fc cf       	rjmp	.-8      	; 0x46e <initialize_hardware+0x2a>
        OSC.PLLCTRL = 0xC2;             //Set the PLL to use the external crystal and set multiplication factor to 2.
     476:	15 96       	adiw	r26, 0x05	; 5
     478:	3c 93       	st	X, r19
     47a:	15 97       	sbiw	r26, 0x05	; 5
        OSC.CTRL = 0x18;                //Enable the PLL, disable the External Clock.
     47c:	20 93 50 00 	sts	0x0050, r18
        while (!(OSC.STATUS & 0x10)){}  //wait for PLL to become stable and ready
     480:	70 91 51 00 	lds	r23, 0x0051
     484:	74 ff       	sbrs	r23, 4
     486:	fc cf       	rjmp	.-8      	; 0x480 <initialize_hardware+0x3c>
        CCP = 0xD8;                     //Configuration Change Protection, write signature to change Clock to PLL.
     488:	94 bf       	out	0x34, r25	; 52
        CLK.CTRL = 0x04;                //Set the Clock to PLL
     48a:	80 93 40 00 	sts	0x0040, r24
static bool encoder_switch_state = 0;
static uint16_t pot_values[5] = {0,0,0,0,0};
    
static void initialize_clock(){
    //CLOCK AND PLL SETUP
    while (CLK.CTRL != 0x04){
     48e:	70 91 40 00 	lds	r23, 0x0040
     492:	74 30       	cpi	r23, 0x04	; 4
     494:	39 f7       	brne	.-50     	; 0x464 <initialize_hardware+0x20>
        CLK.CTRL = 0x04;                //Set the Clock to PLL
    }        
}

static void initialize_MIDI(){
    cli();                     //disable global interrupts
     496:	f8 94       	cli
	PORTD.OUTSET = 0x80;       //set TxD high for initialization
     498:	a0 e6       	ldi	r26, 0x60	; 96
     49a:	b6 e0       	ldi	r27, 0x06	; 6
     49c:	80 e8       	ldi	r24, 0x80	; 128
     49e:	15 96       	adiw	r26, 0x05	; 5
     4a0:	8c 93       	st	X, r24
     4a2:	15 97       	sbiw	r26, 0x05	; 5
    PORTD.DIRCLR = 0x40;       //USARTRX as input
     4a4:	90 e4       	ldi	r25, 0x40	; 64
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	9c 93       	st	X, r25
     4aa:	12 97       	sbiw	r26, 0x02	; 2
    PORTD.DIRSET = 0x80;       //USARTTX as output
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	8c 93       	st	X, r24
     4b0:	11 97       	sbiw	r26, 0x01	; 1
    USARTD1.CTRLB = 0x18;      //set RXEN and TXEN in CTRLB Register to enable USART receiver and transmitter
     4b2:	e0 eb       	ldi	r30, 0xB0	; 176
     4b4:	f9 e0       	ldi	r31, 0x09	; 9
     4b6:	88 e1       	ldi	r24, 0x18	; 24
     4b8:	84 83       	std	Z+4, r24	; 0x04
    USARTD1.CTRLA = 0x20;      //enable RX interrupt as Mid Level
     4ba:	90 e2       	ldi	r25, 0x20	; 32
     4bc:	93 83       	std	Z+3, r25	; 0x03
    USARTD1.CTRLC = 0x03;      //Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     4be:	33 e0       	ldi	r19, 0x03	; 3
     4c0:	35 83       	std	Z+5, r19	; 0x05
    USARTD1.BAUDCTRLA = 0x2F;  //BSEL = 47
     4c2:	8f e2       	ldi	r24, 0x2F	; 47
     4c4:	86 83       	std	Z+6, r24	; 0x06
    USARTD1.BAUDCTRLB = 0x00;  //BSCALE = 0
     4c6:	17 82       	std	Z+7, r1	; 0x07
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
     4c8:	80 91 a2 00 	lds	r24, 0x00A2
     4cc:	87 68       	ori	r24, 0x87	; 135
     4ce:	e0 ea       	ldi	r30, 0xA0	; 160
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	82 83       	std	Z+2, r24	; 0x02
    sei();                     //enable global interrupts
     4d4:	78 94       	sei
turn_state get_encoder(){
    return encoder_state;
}

static void initialize_pots(){
    PORTA.DIRCLR = 0xF9;        //ADC3:7 and VREF input
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d6 e0       	ldi	r29, 0x06	; 6
     4da:	89 ef       	ldi	r24, 0xF9	; 249
     4dc:	8a 83       	std	Y+2, r24	; 0x02
    ADCA.CTRLA = 0x00;          //disable ADC
     4de:	e0 e0       	ldi	r30, 0x00	; 0
     4e0:	f2 e0       	ldi	r31, 0x02	; 2
     4e2:	10 92 00 02 	sts	0x0200, r1
    ADCA.CTRLB = 0x00;
     4e6:	11 82       	std	Z+1, r1	; 0x01
    ADCA.REFCTRL = 0x20;        //set PORTA reference voltage
     4e8:	92 83       	std	Z+2, r25	; 0x02
    ADCA.EVCTRL = 0x00;
     4ea:	13 82       	std	Z+3, r1	; 0x03
    ADCA.PRESCALER = 0x01;     //set prescaler to clk/8 for accuracy
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	94 83       	std	Z+4, r25	; 0x04
    ADCA.INTFLAGS = 0x00;
     4f0:	16 82       	std	Z+6, r1	; 0x06
    ADCA.CTRLA |= 0x01;         //enable ADC
     4f2:	80 91 00 02 	lds	r24, 0x0200
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 93 00 02 	sts	0x0200, r24
    ADCA.CH0.CTRL = 0x01;       //select external single-ended input
     4fc:	90 a3       	std	Z+32, r25	; 0x20
    ADCA.CH0.MUXCTRL = 0x00;
     4fe:	11 a2       	std	Z+33, r1	; 0x21
    ADCA.CH0.INTCTRL = 0x00;
     500:	12 a2       	std	Z+34, r1	; 0x22
	if (decimal_point_2)
		PORTD.OUTCLR = 0x02;
}

static void initialize_switches(){
    PORTB.DIRCLR = 0x0C;                //SW8(push) and Encoder pushbutton input
     502:	40 e2       	ldi	r20, 0x20	; 32
     504:	56 e0       	ldi	r21, 0x06	; 6
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	fa 01       	movw	r30, r20
     50a:	82 83       	std	Z+2, r24	; 0x02
    PORTE.DIRCLR = 0x08;                //SW7(toggle) input
     50c:	28 e0       	ldi	r18, 0x08	; 8
     50e:	80 e8       	ldi	r24, 0x80	; 128
     510:	96 e0       	ldi	r25, 0x06	; 6
     512:	fc 01       	movw	r30, r24
     514:	22 83       	std	Z+2, r18	; 0x02
    PMIC.CTRL |= 0x87;         //enable all levels on interrupts
    sei();                     //enable global interrupts
}

static void initialize_encoder(){
    PORTB.DIRCLR = 0x03;       //Encoder A and B input
     516:	fa 01       	movw	r30, r20
     518:	32 83       	std	Z+2, r19	; 0x02
}

static void initialize_LEDs(){
    //initialize all LED outputs, set all as blank
    
    PORTA.DIRSET = 0x06;    //~LT and ~BL output
     51a:	86 e0       	ldi	r24, 0x06	; 6
     51c:	89 83       	std	Y+1, r24	; 0x01
    PORTA.OUTSET = 0x06;    //~LT and ~BL high
     51e:	8d 83       	std	Y+5, r24	; 0x05
    
    PORTC.DIRSET = 0xF8;    //STATLED and LED0:3 output
     520:	e0 e4       	ldi	r30, 0x40	; 64
     522:	f6 e0       	ldi	r31, 0x06	; 6
     524:	88 ef       	ldi	r24, 0xF8	; 248
     526:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRSET = 0x3F;    //DSEL0:2 and decimal_points0:2 output
     528:	8f e3       	ldi	r24, 0x3F	; 63
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	8c 93       	st	X, r24
     52e:	11 97       	sbiw	r26, 0x01	; 1
    
    
    //All LEDs off
    PORTD.OUTSET = 0x38;    //DSEL0:2 high (arm all 7 segments)
     530:	88 e3       	ldi	r24, 0x38	; 56
     532:	15 96       	adiw	r26, 0x05	; 5
     534:	8c 93       	st	X, r24
     536:	15 97       	sbiw	r26, 0x05	; 5
    PORTC.OUTSET = 0xF0;    //LED0:3 high (blank all 7 segments)
     538:	90 ef       	ldi	r25, 0xF0	; 240
     53a:	95 83       	std	Z+5, r25	; 0x05
    PORTD.OUTCLR = 0x38;    //DSEL0: low (disarm all 7 segments)
     53c:	16 96       	adiw	r26, 0x06	; 6
     53e:	8c 93       	st	X, r24
     540:	16 97       	sbiw	r26, 0x06	; 6
    
    PORTD.OUTCLR = 0x07;    //decimal_points0:2 low (blank all decimal_pointss)
     542:	87 e0       	ldi	r24, 0x07	; 7
     544:	16 96       	adiw	r26, 0x06	; 6
     546:	8c 93       	st	X, r24
     548:	16 97       	sbiw	r26, 0x06	; 6
    PORTC.OUTSET = 0x08;    //STATLED high (blank statled)
     54a:	25 83       	std	Z+5, r18	; 0x05
    initialize_MIDI();
    initialize_pots();
    initialize_switches();
    initialize_encoder();
    initialize_LEDs();
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <read_hardware>:

void read_hardware(){
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
    
    uint8_t i;
    
    //read current physical switch states
    current_switch_states = 0x00;
    current_switch_states |= !(PORTE.IN >> 3) & 0x01;
     56a:	80 91 88 06 	lds	r24, 0x0688
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	86 95       	lsr	r24
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	09 f0       	breq	.+2      	; 0x57a <read_hardware+0x28>
     578:	90 e0       	ldi	r25, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
     57a:	80 91 28 06 	lds	r24, 0x0628
     57e:	86 95       	lsr	r24
     580:	86 95       	lsr	r24
     582:	80 fd       	sbrc	r24, 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <read_hardware+0x38>
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	01 c0       	rjmp	.+2      	; 0x58c <read_hardware+0x3a>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	c8 2e       	mov	r12, r24
     58e:	c9 2a       	or	r12, r25
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
     590:	80 91 28 06 	lds	r24, 0x0628
     594:	86 95       	lsr	r24
     596:	86 95       	lsr	r24
     598:	86 95       	lsr	r24
     59a:	80 fd       	sbrc	r24, 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <read_hardware+0x50>
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <read_hardware+0x52>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	c8 2a       	or	r12, r24
     5a6:	c0 92 63 21 	sts	0x2163, r12
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     5aa:	60 91 62 21 	lds	r22, 0x2162
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	d0 90 61 21 	lds	r13, 0x2161
     5b4:	ee e5       	ldi	r30, 0x5E	; 94
     5b6:	f1 e2       	ldi	r31, 0x21	; 33
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	4c 2d       	mov	r20, r12
     5be:	50 e0       	ldi	r21, 0x00	; 0
            switch_history_counts[i]++;                            //increment count        
        else
            switch_history_counts[i] = 0;                          //else reset count            
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
            final_switch_states &= ~(1 << i);
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
        if (current_switch_states >> i == last_switch_states >> i) //if switch didn't change
     5c4:	b8 2e       	mov	r11, r24
     5c6:	8a 01       	movw	r16, r20
     5c8:	08 2e       	mov	r0, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <read_hardware+0x7e>
     5cc:	15 95       	asr	r17
     5ce:	07 95       	ror	r16
     5d0:	0a 94       	dec	r0
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <read_hardware+0x7a>
     5d4:	db 01       	movw	r26, r22
     5d6:	08 2e       	mov	r0, r24
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <read_hardware+0x8c>
     5da:	b5 95       	asr	r27
     5dc:	a7 95       	ror	r26
     5de:	0a 94       	dec	r0
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <read_hardware+0x88>
     5e2:	0a 17       	cp	r16, r26
     5e4:	1b 07       	cpc	r17, r27
     5e6:	21 f4       	brne	.+8      	; 0x5f0 <read_hardware+0x9e>
            switch_history_counts[i]++;                            //increment count        
     5e8:	a0 81       	ld	r26, Z
     5ea:	af 5f       	subi	r26, 0xFF	; 255
     5ec:	a0 83       	st	Z, r26
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <read_hardware+0xa0>
        else
            switch_history_counts[i] = 0;                          //else reset count            
     5f0:	10 82       	st	Z, r1
        if (switch_history_counts[i] > DEBOUNCE){                  //if count is over debounce value
     5f2:	a0 81       	ld	r26, Z
     5f4:	a9 30       	cpi	r26, 0x09	; 9
     5f6:	60 f0       	brcs	.+24     	; 0x610 <read_hardware+0xbe>
            final_switch_states &= ~(1 << i);
     5f8:	d9 01       	movw	r26, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <read_hardware+0xae>
     5fc:	aa 0f       	add	r26, r26
     5fe:	bb 1f       	adc	r27, r27
     600:	ba 94       	dec	r11
     602:	e2 f7       	brpl	.-8      	; 0x5fc <read_hardware+0xaa>
     604:	ba 2f       	mov	r27, r26
     606:	b0 95       	com	r27
     608:	db 22       	and	r13, r27
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
     60a:	ac 21       	and	r26, r12
     60c:	da 2a       	or	r13, r26
            switch_history_counts[i] = 0;                          //and reset count
     60e:	10 82       	st	Z, r1
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	31 96       	adiw	r30, 0x01	; 1
    current_switch_states |= !((PORTB.IN >> 2) & 0x01) << 1;
    current_switch_states |= !((PORTB.IN >> 3) & 0x01) << 2;
    
    //compare current switch states with the history
    //set the final switch value appropriately if history is large enough
    for (i = 0; i < 3; i++){
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	91 05       	cpc	r25, r1
     618:	a9 f6       	brne	.-86     	; 0x5c4 <read_hardware+0x72>
     61a:	d0 92 61 21 	sts	0x2161, r13
            final_switch_states |= current_switch_states & (1 << i);             //set final switch to current position
            switch_history_counts[i] = 0;                          //and reset count
        }
    }    
    
    last_switch_states = current_switch_states;                    //set last switch position to current switch position
     61e:	c0 92 62 21 	sts	0x2162, r12
     622:	80 91 58 21 	lds	r24, 0x2158
    
    //detect rising and falling edges
    //set switch booleans for state and edges appropriately
    
    if (final_switch_states & 0x01){            //if toggle IS on
     626:	d0 fe       	sbrs	r13, 0
     628:	0c c0       	rjmp	.+24     	; 0x642 <read_hardware+0xf0>
        if (toggle_switch_state)                //if toggle WAS on
     62a:	88 23       	and	r24, r24
     62c:	19 f0       	breq	.+6      	; 0x634 <read_hardware+0xe2>
            toggle_switch_edge = EDGE_NONE;     //no edge
     62e:	10 92 59 21 	sts	0x2159, r1
     632:	03 c0       	rjmp	.+6      	; 0x63a <read_hardware+0xe8>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_RISE;     //new on
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	80 93 59 21 	sts	0x2159, r24
        toggle_switch_state = 1;                //set current value
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 58 21 	sts	0x2158, r24
     640:	0a c0       	rjmp	.+20     	; 0x656 <read_hardware+0x104>
    }        
    else{                                       //if toggle IS off
        if (toggle_switch_state)                //if toggle WAS on
     642:	88 23       	and	r24, r24
     644:	21 f0       	breq	.+8      	; 0x64e <read_hardware+0xfc>
            toggle_switch_edge = EDGE_FALL;     //new off
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	80 93 59 21 	sts	0x2159, r24
     64c:	02 c0       	rjmp	.+4      	; 0x652 <read_hardware+0x100>
        else                                    //else (toggle WAS off)
            toggle_switch_edge = EDGE_NONE;     //no edge
     64e:	10 92 59 21 	sts	0x2159, r1
        toggle_switch_state = 0;                //set current value
     652:	10 92 58 21 	sts	0x2158, r1
     656:	80 91 5a 21 	lds	r24, 0x215A
    }        
    
    if (final_switch_states & 0x02){                //if pushbutton IS on
     65a:	d1 fe       	sbrs	r13, 1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <read_hardware+0x124>
        if (pushbutton_switch_state)                //if pushbutton WAS on
     65e:	88 23       	and	r24, r24
     660:	19 f0       	breq	.+6      	; 0x668 <read_hardware+0x116>
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     662:	10 92 5b 21 	sts	0x215B, r1
     666:	03 c0       	rjmp	.+6      	; 0x66e <read_hardware+0x11c>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_RISE;     //new on
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 5b 21 	sts	0x215B, r24
        pushbutton_switch_state = 1;                //set current value
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 5a 21 	sts	0x215A, r24
     674:	0a c0       	rjmp	.+20     	; 0x68a <read_hardware+0x138>
    }        
    else{                                           //if pushbutton IS off
        if (pushbutton_switch_state)                //if pushbutton WAS on
     676:	88 23       	and	r24, r24
     678:	21 f0       	breq	.+8      	; 0x682 <read_hardware+0x130>
            pushbutton_switch_edge = EDGE_FALL;     //new off
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	80 93 5b 21 	sts	0x215B, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <read_hardware+0x134>
        else                                        //else (pushbutton WAS off)
            pushbutton_switch_edge = EDGE_NONE;     //no edge
     682:	10 92 5b 21 	sts	0x215B, r1
        pushbutton_switch_state = 0;                //set current value
     686:	10 92 5a 21 	sts	0x215A, r1
     68a:	80 91 5c 21 	lds	r24, 0x215C
    }        
    
    if (final_switch_states & 0x04){             //if encoder IS on
     68e:	d2 fe       	sbrs	r13, 2
     690:	0c c0       	rjmp	.+24     	; 0x6aa <read_hardware+0x158>
        if (encoder_switch_state)                //if encoder WAS on
     692:	88 23       	and	r24, r24
     694:	19 f0       	breq	.+6      	; 0x69c <read_hardware+0x14a>
            encoder_switch_edge = EDGE_NONE;     //no edge
     696:	10 92 5d 21 	sts	0x215D, r1
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <read_hardware+0x150>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_RISE;     //new on
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 5d 21 	sts	0x215D, r24
        encoder_switch_state = 1;                //set current value
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 5c 21 	sts	0x215C, r24
     6a8:	0a c0       	rjmp	.+20     	; 0x6be <read_hardware+0x16c>
    }        
    else{                                        //if encoder IS off
        if (encoder_switch_state)                //if encoder WAS on
     6aa:	88 23       	and	r24, r24
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <read_hardware+0x164>
            encoder_switch_edge = EDGE_FALL;     //new off
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	80 93 5d 21 	sts	0x215D, r24
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <read_hardware+0x168>
        else                                     //else (encoder WAS off)
            encoder_switch_edge = EDGE_NONE;     //no edge
     6b6:	10 92 5d 21 	sts	0x215D, r1
        encoder_switch_state = 0;                //set current value
     6ba:	10 92 5c 21 	sts	0x215C, r1
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     6be:	19 82       	std	Y+1, r1	; 0x01
        ADCA.CH0.INTFLAGS |= 0x01;           //clear interrupt flag
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	62 c0       	rjmp	.+196    	; 0x78a <read_hardware+0x238>
     6c6:	20 91 23 02 	lds	r18, 0x0223
     6ca:	21 60       	ori	r18, 0x01	; 1
     6cc:	fc 01       	movw	r30, r24
     6ce:	23 a3       	std	Z+35, r18	; 0x23
        ADCA.CH0.MUXCTRL &= ~(0x07 << 3);    //clear pin select
     6d0:	20 91 21 02 	lds	r18, 0x0221
     6d4:	27 7c       	andi	r18, 0xC7	; 199
     6d6:	21 a3       	std	Z+33, r18	; 0x21
        ADCA.CH0.MUXCTRL |= ((i+3) << 3);    //set pin select to current input
     6d8:	40 91 21 02 	lds	r20, 0x0221
     6dc:	29 81       	ldd	r18, Y+1	; 0x01
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	2d 5f       	subi	r18, 0xFD	; 253
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	6a 95       	dec	r22
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <read_hardware+0x194>
     6ee:	42 2b       	or	r20, r18
     6f0:	41 a3       	std	Z+33, r20	; 0x21
        ADCA.CH0.CTRL |=    0x80;            //start conversion
     6f2:	20 91 20 02 	lds	r18, 0x0220
     6f6:	20 68       	ori	r18, 0x80	; 128
     6f8:	20 a3       	std	Z+32, r18	; 0x20
        
        while(!(ADCA.CH0.INTFLAGS & 0x01)){} //wait for read to complete
     6fa:	20 91 23 02 	lds	r18, 0x0223
     6fe:	20 ff       	sbrs	r18, 0
     700:	fc cf       	rjmp	.-8      	; 0x6fa <read_hardware+0x1a8>

        
        pot_values[i] = ADCA.CH0.RESL;
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	20 91 24 02 	lds	r18, 0x0224
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ec 59       	subi	r30, 0x9C	; 156
     710:	fe 4d       	sbci	r31, 0xDE	; 222
     712:	20 83       	st	Z, r18
     714:	11 82       	std	Z+1, r1	; 0x01
        pot_values[i] |= ADCA.CH0.RESH << 8;
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	20 91 25 02 	lds	r18, 0x0225
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ec 59       	subi	r30, 0x9C	; 156
     724:	fe 4d       	sbci	r31, 0xDE	; 222
     726:	f2 2e       	mov	r15, r18
     728:	ee 24       	eor	r14, r14
     72a:	20 81       	ld	r18, Z
     72c:	31 81       	ldd	r19, Z+1	; 0x01
     72e:	2e 29       	or	r18, r14
     730:	3f 29       	or	r19, r15
     732:	20 83       	st	Z, r18
     734:	31 83       	std	Z+1, r19	; 0x01
        
        if (pot_values[i] < POTMIN)
     736:	e9 81       	ldd	r30, Y+1	; 0x01
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	ec 59       	subi	r30, 0x9C	; 156
     740:	fe 4d       	sbci	r31, 0xDE	; 222
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	20 3e       	cpi	r18, 0xE0	; 224
     748:	31 05       	cpc	r19, r1
     74a:	48 f4       	brcc	.+18     	; 0x75e <read_hardware+0x20c>
            pot_values[i] = 0;
     74c:	e9 81       	ldd	r30, Y+1	; 0x01
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ec 59       	subi	r30, 0x9C	; 156
     756:	fe 4d       	sbci	r31, 0xDE	; 222
     758:	10 82       	st	Z, r1
     75a:	11 82       	std	Z+1, r1	; 0x01
     75c:	13 c0       	rjmp	.+38     	; 0x784 <read_hardware+0x232>
        else
            pot_values[i] = pot_values[i] - POTMIN;
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	a9 81       	ldd	r26, Y+1	; 0x01
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ec 59       	subi	r30, 0x9C	; 156
     76a:	fe 4d       	sbci	r31, 0xDE	; 222
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	aa 0f       	add	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	ac 59       	subi	r26, 0x9C	; 156
     774:	be 4d       	sbci	r27, 0xDE	; 222
     776:	2d 91       	ld	r18, X+
     778:	3c 91       	ld	r19, X
     77a:	11 97       	sbiw	r26, 0x01	; 1
     77c:	20 5e       	subi	r18, 0xE0	; 224
     77e:	30 40       	sbci	r19, 0x00	; 0
     780:	20 83       	st	Z, r18
     782:	31 83       	std	Z+1, r19	; 0x01
static void read_pots(){
    volatile uint8_t i;
    
    //cycle through each ADC input and read the values
    //and set the variables appropriately
    for(i = 0; i < 5; i++){
     784:	29 81       	ldd	r18, Y+1	; 0x01
     786:	2f 5f       	subi	r18, 0xFF	; 255
     788:	29 83       	std	Y+1, r18	; 0x01
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	25 30       	cpi	r18, 0x05	; 5
     78e:	08 f4       	brcc	.+2      	; 0x792 <read_hardware+0x240>
     790:	9a cf       	rjmp	.-204    	; 0x6c6 <read_hardware+0x174>
    static bool last_a = 0;
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
     792:	80 91 28 06 	lds	r24, 0x0628
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	80 fd       	sbrc	r24, 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
    current_b = !((PORTB.IN >> 1) & 0x01);
     79c:	60 91 28 06 	lds	r22, 0x0628
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
     7a0:	84 2f       	mov	r24, r20
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	20 91 6f 21 	lds	r18, 0x216F
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	25 27       	eor	r18, r21
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	82 23       	and	r24, r18
     7b0:	93 23       	and	r25, r19
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	59 f0       	breq	.+22     	; 0x7cc <read_hardware+0x27a>
    bool current_a;
    bool current_b;
    
    //read current pin states
    current_a = !(PORTB.IN & 0x01);
    current_b = !((PORTB.IN >> 1) & 0x01);
     7b6:	86 2f       	mov	r24, r22
     7b8:	86 95       	lsr	r24
    
    //determine movement of encoder from edge of A and state of B
    //and set encoder_state appropriately
    if (!last_a & current_a)
    {
        if (current_b)
     7ba:	80 fd       	sbrc	r24, 0
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <read_hardware+0x272>
            encoder_state = TURN_CW;    //CW        
     7be:	50 93 6e 21 	sts	0x216E, r21
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <read_hardware+0x27e>
        else
            encoder_state = TURN_CCW;    //CCW
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	80 93 6e 21 	sts	0x216E, r24
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <read_hardware+0x27e>
    }
    else
        encoder_state = TURN_NONE;   
     7cc:	10 92 6e 21 	sts	0x216E, r1
    last_a = current_a;
     7d0:	40 93 6f 21 	sts	0x216F, r20

void read_hardware(){
    read_switches();
    read_pots();
    read_encoder();
}
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	08 95       	ret

000007ea <postloop_functions>:

void postloop_functions(bool status_LED, bool decimal_point_0, bool decimal_point_1, bool decimal_point_2, uint16_t seven_segment_value){
    
	
	//set_LEDs(status_LED, decimal_point_0, decimal_point_1, decimal_point_2, seven_segment_value);
     7ea:	08 95       	ret

000007ec <__vector_91>:
uint16_t next_duration;
	
const uint8_t pitch_array[7] = {50, 55, 53, 60, 59, 65, 40};
uint8_t pitch_array_select = 0;
*/
ISR(USARTD1_RXC_vect){
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
	midi_device_input(serial_midi_device(),1,USARTD1.DATA);
     80e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <serial_midi_device>
     812:	40 91 b0 09 	lds	r20, 0x09B0
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <midi_device_input>
	midi_device_process(serial_midi_device());
     81e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <serial_midi_device>
     822:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <midi_device_process>
}
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <test_pots>:

void test_pots(){
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     84e:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	uint8_t selPOT = 0;
     852:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		read_hardware();
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     854:	c4 e6       	ldi	r28, 0x64	; 100
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	01 c0       	rjmp	.+2      	; 0x85c <test_pots+0x14>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
			selPOT++;
			if (selPOT>4)
				selPOT = 0;
     85a:	10 e0       	ldi	r17, 0x00	; 0
	initialize_hardware();
	
	uint8_t selPOT = 0;
	
	while(1){
		read_hardware();
     85c:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
	
		set_seven_segment_LEDs(100*(selPOT+1) + get_pot_value(selPOT, 1, 99));
     860:	81 2f       	mov	r24, r17
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	43 e6       	ldi	r20, 0x63	; 99
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     86e:	21 2f       	mov	r18, r17
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	2f 5f       	subi	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	2c 9f       	mul	r18, r28
     878:	a0 01       	movw	r20, r0
     87a:	2d 9f       	mul	r18, r29
     87c:	50 0d       	add	r21, r0
     87e:	3c 9f       	mul	r19, r28
     880:	50 0d       	add	r21, r0
     882:	11 24       	eor	r1, r1
     884:	84 0f       	add	r24, r20
     886:	95 1f       	adc	r25, r21
     888:	0e 94 82 01 	call	0x304	; 0x304 <set_seven_segment_LEDs>
			
		if(get_encoder_switch_edge()==EDGE_RISE){
     88c:	0e 94 13 02 	call	0x426	; 0x426 <get_encoder_switch_edge>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	21 f7       	brne	.-56     	; 0x85c <test_pots+0x14>
			selPOT++;
     894:	1f 5f       	subi	r17, 0xFF	; 255
			if (selPOT>4)
     896:	15 30       	cpi	r17, 0x05	; 5
     898:	00 f7       	brcc	.-64     	; 0x85a <test_pots+0x12>
     89a:	e0 cf       	rjmp	.-64     	; 0x85c <test_pots+0x14>

0000089c <test_switches>:
	
	
}
*/

void test_switches(){
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <test_switches+0xa>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	
	initialize_hardware();
     8aa:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	while(1){
		read_hardware();
     8ae:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     8b2:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
		decimal_point1 = get_pushbutton_switch_state();
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
		decimal_point2 = get_toggle_switch_state();
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     8c2:	28 2f       	mov	r18, r24
		status_LED = 0;
		seven_segment_value = 0;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	6a 81       	ldd	r22, Y+2	; 0x02
     8c8:	49 81       	ldd	r20, Y+1	; 0x01
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
     8d2:	ed cf       	rjmp	.-38     	; 0x8ae <test_switches+0x12>

000008d4 <test_seven_segment>:
	}
}


volatile void test_seven_segment(){
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
	
	initialize_hardware();
     8de:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t i = 0;
     8e2:	c0 e0       	ldi	r28, 0x00	; 0
     8e4:	d0 e0       	ldi	r29, 0x00	; 0
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     8e6:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     8ea:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     8ee:	f8 2e       	mov	r15, r24
		decimal_point1 = get_pushbutton_switch_state();
     8f0:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     8f4:	08 2f       	mov	r16, r24
		decimal_point2 = get_toggle_switch_state();
     8f6:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     8fa:	18 2f       	mov	r17, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     8fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	31 f4       	brne	.+12     	; 0x910 <test_seven_segment+0x3c>
			if (i == 999)
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	c7 3e       	cpi	r28, 0xE7	; 231
     908:	d8 07       	cpc	r29, r24
     90a:	51 f0       	breq	.+20     	; 0x920 <test_seven_segment+0x4c>
				i = 0;
			else
				i++;
     90c:	21 96       	adiw	r28, 0x01	; 1
     90e:	0d c0       	rjmp	.+26     	; 0x92a <test_seven_segment+0x56>
		}			
		else if (get_encoder()==TURN_CCW){
     910:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	49 f4       	brne	.+18     	; 0x92a <test_seven_segment+0x56>
			if (i == 0)
     918:	20 97       	sbiw	r28, 0x00	; 0
     91a:	29 f0       	breq	.+10     	; 0x926 <test_seven_segment+0x52>
				i = 999;
			else
				i += -1;
     91c:	21 97       	sbiw	r28, 0x01	; 1
     91e:	05 c0       	rjmp	.+10     	; 0x92a <test_seven_segment+0x56>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (i == 999)
				i = 0;
     920:	c0 e0       	ldi	r28, 0x00	; 0
     922:	d0 e0       	ldi	r29, 0x00	; 0
     924:	02 c0       	rjmp	.+4      	; 0x92a <test_seven_segment+0x56>
			else
				i++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (i == 0)
				i = 999;
     926:	c7 ee       	ldi	r28, 0xE7	; 231
     928:	d3 e0       	ldi	r29, 0x03	; 3
				i += -1;
		}
		
		seven_segment_value = i;
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	6f 2d       	mov	r22, r15
     92e:	40 2f       	mov	r20, r16
     930:	21 2f       	mov	r18, r17
     932:	8e 01       	movw	r16, r28
     934:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
	}
     938:	d6 cf       	rjmp	.-84     	; 0x8e6 <test_seven_segment+0x12>

0000093a <test_ADC>:
}

void test_ADC(){
     93a:	af 92       	push	r10
     93c:	bf 92       	push	r11
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
	
	initialize_hardware();
     94c:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	bool decimal_point0 = 0;
	bool decimal_point1 = 0;
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t pot_select = 0;
     950:	c0 e0       	ldi	r28, 0x00	; 0
     952:	d0 e0       	ldi	r29, 0x00	; 0
				pot_select = 4;
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     954:	84 e6       	ldi	r24, 0x64	; 100
     956:	a8 2e       	mov	r10, r24
     958:	b1 2c       	mov	r11, r1
	uint16_t pot_select = 0;
	
	initialize_hardware();
	
	while(1){
		read_hardware();
     95a:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		decimal_point0 = get_encoder_switch_state();
     95e:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     962:	d8 2e       	mov	r13, r24
		decimal_point1 = get_pushbutton_switch_state();
     964:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     968:	e8 2e       	mov	r14, r24
		decimal_point2 = get_toggle_switch_state();
     96a:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     96e:	f8 2e       	mov	r15, r24
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
     970:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	29 f4       	brne	.+10     	; 0x982 <test_ADC+0x48>
			if (pot_select == 4)
     978:	c4 30       	cpi	r28, 0x04	; 4
     97a:	d1 05       	cpc	r29, r1
     97c:	51 f0       	breq	.+20     	; 0x992 <test_ADC+0x58>
				pot_select = 0;
			else
				pot_select++;
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	0d c0       	rjmp	.+26     	; 0x99c <test_ADC+0x62>
		}			
		else if (get_encoder()==TURN_CCW){
     982:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	49 f4       	brne	.+18     	; 0x99c <test_ADC+0x62>
			if (pot_select == 0)
     98a:	20 97       	sbiw	r28, 0x00	; 0
     98c:	29 f0       	breq	.+10     	; 0x998 <test_ADC+0x5e>
				pot_select = 4;
			else
				pot_select += -1;
     98e:	21 97       	sbiw	r28, 0x01	; 1
     990:	05 c0       	rjmp	.+10     	; 0x99c <test_ADC+0x62>
		decimal_point2 = get_toggle_switch_state();
		status_LED = 0;
		
		if (get_encoder() == TURN_CW){
			if (pot_select == 4)
				pot_select = 0;
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <test_ADC+0x62>
			else
				pot_select++;
		}			
		else if (get_encoder()==TURN_CCW){
			if (pot_select == 0)
				pot_select = 4;
     998:	c4 e0       	ldi	r28, 0x04	; 4
     99a:	d0 e0       	ldi	r29, 0x00	; 0
			else
				pot_select += -1;
		}
		
		seven_segment_value = pot_select*100 + get_pot_value(pot_select,0,99);
     99c:	8c 2f       	mov	r24, r28
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	43 e6       	ldi	r20, 0x63	; 99
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     9aa:	ca 9d       	mul	r28, r10
     9ac:	80 01       	movw	r16, r0
     9ae:	cb 9d       	mul	r28, r11
     9b0:	10 0d       	add	r17, r0
     9b2:	da 9d       	mul	r29, r10
     9b4:	10 0d       	add	r17, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	08 0f       	add	r16, r24
     9ba:	19 1f       	adc	r17, r25
		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	6d 2d       	mov	r22, r13
     9c0:	4e 2d       	mov	r20, r14
     9c2:	2f 2d       	mov	r18, r15
     9c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
	}
     9c8:	c8 cf       	rjmp	.-112    	; 0x95a <test_ADC+0x20>

000009ca <test_xnor_in>:
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;
	uint16_t note = 100;
	
	initialize_hardware();
     9ca:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	serial_midi_init();
     9ce:	0e 94 5e 07 	call	0xebc	; 0xebc <serial_midi_init>
	
	while(1){
		read_hardware();
     9d2:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <test_xnor_in+0x8>

000009d8 <test_blank>:
	}
	
}

void test_blank(){
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
	bool decimal_point2 = 0;
	bool status_LED = 0;
	uint16_t seven_segment_value = 0;

	
	initialize_hardware();
     9dc:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	while(1){
		read_hardware();
     9e0:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>

		
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	00 e0       	ldi	r16, 0x00	; 0
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <postloop_functions>
     9f4:	f5 cf       	rjmp	.-22     	; 0x9e0 <test_blank+0x8>

000009f6 <BPM_to_TMR>:
		postloop_functions(status_LED,decimal_point0,decimal_point1,decimal_point2,seven_segment_value);
	}
	
}*/

void BPM_to_TMR(uint16_t BPM){
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	df 93       	push	r29
     9fc:	cf 93       	push	r28
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	ae 97       	sbiw	r28, 0x2e	; 46
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 60000000;                                 //clk = 12MHz, cyc/MIDItick = 30M/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to scaler value for TCxx.CTRLA
     a08:	de 01       	movw	r26, r28
     a0a:	1f 96       	adiw	r26, 0x0f	; 15
     a0c:	e0 e2       	ldi	r30, 0x20	; 32
     a0e:	f0 e2       	ldi	r31, 0x20	; 32
     a10:	20 e2       	ldi	r18, 0x20	; 32
     a12:	01 90       	ld	r0, Z+
     a14:	0d 92       	st	X+, r0
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	e1 f7       	brne	.-8      	; 0xa12 <BPM_to_TMR+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     a1a:	20 91 00 08 	lds	r18, 0x0800
     a1e:	2f 70       	andi	r18, 0x0F	; 15
     a20:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     a22:	21 e0       	ldi	r18, 0x01	; 1
     a24:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     a26:	1b 82       	std	Y+3, r1	; 0x03
     a28:	1c 82       	std	Y+4, r1	; 0x04
     a2a:	1d 82       	std	Y+5, r1	; 0x05
     a2c:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
     a2e:	9c 01       	movw	r18, r24
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	77 e8       	ldi	r23, 0x87	; 135
     a38:	83 e9       	ldi	r24, 0x93	; 147
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     a40:	2f 83       	std	Y+7, r18	; 0x07
     a42:	38 87       	std	Y+8, r19	; 0x08
     a44:	49 87       	std	Y+9, r20	; 0x09
     a46:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     a48:	6f 81       	ldd	r22, Y+7	; 0x07
     a4a:	78 85       	ldd	r23, Y+8	; 0x08
     a4c:	89 85       	ldd	r24, Y+9	; 0x09
     a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a50:	ea 81       	ldd	r30, Y+2	; 0x02
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	11 c0       	rjmp	.+34     	; 0xa86 <BPM_to_TMR+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     a6a:	8a 81       	ldd	r24, Y+2	; 0x02
     a6c:	88 30       	cpi	r24, 0x08	; 8
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <BPM_to_TMR+0x7c>
     a70:	93 c0       	rjmp	.+294    	; 0xb98 <BPM_to_TMR+0x1a2>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
     a72:	6f 81       	ldd	r22, Y+7	; 0x07
     a74:	78 85       	ldd	r23, Y+8	; 0x08
     a76:	89 85       	ldd	r24, Y+9	; 0x09
     a78:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7a:	ea 81       	ldd	r30, Y+2	; 0x02
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	e0 0f       	add	r30, r16
     a88:	f1 1f       	adc	r31, r17
     a8a:	26 85       	ldd	r18, Z+14	; 0x0e
     a8c:	37 85       	ldd	r19, Z+15	; 0x0f
     a8e:	40 89       	ldd	r20, Z+16	; 0x10
     a90:	51 89       	ldd	r21, Z+17	; 0x11
     a92:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     a96:	2b 87       	std	Y+11, r18	; 0x0b
     a98:	3c 87       	std	Y+12, r19	; 0x0c
     a9a:	4d 87       	std	Y+13, r20	; 0x0d
     a9c:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_MIDItick = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa2:	ad 85       	ldd	r26, Y+13	; 0x0d
     aa4:	be 85       	ldd	r27, Y+14	; 0x0e
     aa6:	80 30       	cpi	r24, 0x00	; 0
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	92 07       	cpc	r25, r18
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	a2 07       	cpc	r26, r18
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	b2 07       	cpc	r27, r18
     ab4:	b8 f6       	brcc	.-82     	; 0xa64 <BPM_to_TMR+0x6e>
			return;
		
		compare_value = cycle_per_MIDItick/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     ab6:	80 91 00 08 	lds	r24, 0x0800
     aba:	88 23       	and	r24, r24
     abc:	09 f4       	brne	.+2      	; 0xac0 <BPM_to_TMR+0xca>
     abe:	61 c0       	rjmp	.+194    	; 0xb82 <BPM_to_TMR+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     ac0:	99 81       	ldd	r25, Y+1	; 0x01
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	98 17       	cp	r25, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <BPM_to_TMR+0xd4>
     ac8:	5a c0       	rjmp	.+180    	; 0xb7e <BPM_to_TMR+0x188>
			TCC0.CTRLA = 0x00;
     aca:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     ace:	60 91 20 08 	lds	r22, 0x0820
     ad2:	70 91 21 08 	lds	r23, 0x0821
     ad6:	ea 81       	ldd	r30, Y+2	; 0x02
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	8e 01       	movw	r16, r28
     ae4:	0f 5f       	subi	r16, 0xFF	; 255
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	e0 0f       	add	r30, r16
     aea:	f1 1f       	adc	r31, r17
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	26 85       	ldd	r18, Z+14	; 0x0e
     af2:	37 85       	ldd	r19, Z+15	; 0x0f
     af4:	40 89       	ldd	r20, Z+16	; 0x10
     af6:	51 89       	ldd	r21, Z+17	; 0x11
     af8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__mulsi3>
     afc:	6b 83       	std	Y+3, r22	; 0x03
     afe:	7c 83       	std	Y+4, r23	; 0x04
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     b04:	6b 81       	ldd	r22, Y+3	; 0x03
     b06:	7c 81       	ldd	r23, Y+4	; 0x04
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	e9 81       	ldd	r30, Y+1	; 0x01
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	e0 0f       	add	r30, r16
     b1a:	f1 1f       	adc	r31, r17
     b1c:	26 85       	ldd	r18, Z+14	; 0x0e
     b1e:	37 85       	ldd	r19, Z+15	; 0x0f
     b20:	40 89       	ldd	r20, Z+16	; 0x10
     b22:	51 89       	ldd	r21, Z+17	; 0x11
     b24:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     b28:	2b 83       	std	Y+3, r18	; 0x03
     b2a:	3c 83       	std	Y+4, r19	; 0x04
     b2c:	4d 83       	std	Y+5, r20	; 0x05
     b2e:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     b30:	10 c0       	rjmp	.+32     	; 0xb52 <BPM_to_TMR+0x15c>
				adjusted_count = adjusted_count - compare_value;
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	9c 81       	ldd	r25, Y+4	; 0x04
     b36:	ad 81       	ldd	r26, Y+5	; 0x05
     b38:	be 81       	ldd	r27, Y+6	; 0x06
     b3a:	2b 85       	ldd	r18, Y+11	; 0x0b
     b3c:	3c 85       	ldd	r19, Y+12	; 0x0c
     b3e:	4d 85       	ldd	r20, Y+13	; 0x0d
     b40:	5e 85       	ldd	r21, Y+14	; 0x0e
     b42:	82 1b       	sub	r24, r18
     b44:	93 0b       	sbc	r25, r19
     b46:	a4 0b       	sbc	r26, r20
     b48:	b5 0b       	sbc	r27, r21
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	ad 83       	std	Y+5, r26	; 0x05
     b50:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     b52:	2b 81       	ldd	r18, Y+3	; 0x03
     b54:	3c 81       	ldd	r19, Y+4	; 0x04
     b56:	4d 81       	ldd	r20, Y+5	; 0x05
     b58:	5e 81       	ldd	r21, Y+6	; 0x06
     b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b5e:	ad 85       	ldd	r26, Y+13	; 0x0d
     b60:	be 85       	ldd	r27, Y+14	; 0x0e
     b62:	82 17       	cp	r24, r18
     b64:	93 07       	cpc	r25, r19
     b66:	a4 07       	cpc	r26, r20
     b68:	b5 07       	cpc	r27, r21
     b6a:	18 f3       	brcs	.-58     	; 0xb32 <BPM_to_TMR+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	ad 81       	ldd	r26, Y+5	; 0x05
     b72:	be 81       	ldd	r27, Y+6	; 0x06
     b74:	e0 e0       	ldi	r30, 0x00	; 0
     b76:	f8 e0       	ldi	r31, 0x08	; 8
     b78:	80 a3       	std	Z+32, r24	; 0x20
     b7a:	91 a3       	std	Z+33, r25	; 0x21
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <BPM_to_TMR+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     b7e:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value
     b82:	8b 85       	ldd	r24, Y+11	; 0x0b
     b84:	9c 85       	ldd	r25, Y+12	; 0x0c
     b86:	ad 85       	ldd	r26, Y+13	; 0x0d
     b88:	be 85       	ldd	r27, Y+14	; 0x0e
     b8a:	e0 e0       	ldi	r30, 0x00	; 0
     b8c:	f8 e0       	ldi	r31, 0x08	; 8
     b8e:	80 a7       	std	Z+40, r24	; 0x28
     b90:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 93 00 08 	sts	0x0800, r24

	return;
}
     b98:	ae 96       	adiw	r28, 0x2e	; 46
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <BPM_to_TMR2>:

void BPM_to_TMR2(uint16_t BPM){
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	ae 97       	sbiw	r28, 0x2e	; 46
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	de bf       	out	0x3e, r29	; 62
    const uint32_t numerator = 1440000000;                                 //clk = 24MHz, cyc/beat = 1.44Trillion/BPM
    const uint32_t clock_divide[8] = {0, 1, 2, 4, 8, 64, 256, 1024};     //corresponds to division value for TCxx.CTRLA
     bba:	de 01       	movw	r26, r28
     bbc:	1f 96       	adiw	r26, 0x0f	; 15
     bbe:	e0 e0       	ldi	r30, 0x00	; 0
     bc0:	f0 e2       	ldi	r31, 0x20	; 32
     bc2:	20 e2       	ldi	r18, 0x20	; 32
     bc4:	01 90       	ld	r0, Z+
     bc6:	0d 92       	st	X+, r0
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <BPM_to_TMR2+0x1c>
	
	volatile uint8_t current_clock_divide_select = (TCC0.CTRLA & 0x0F);
     bcc:	20 91 00 08 	lds	r18, 0x0800
     bd0:	2f 70       	andi	r18, 0x0F	; 15
     bd2:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t new_clock_divide_select = 1;
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint32_t adjusted_count = 0;
     bd8:	1b 82       	std	Y+3, r1	; 0x03
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	1d 82       	std	Y+5, r1	; 0x05
     bde:	1e 82       	std	Y+6, r1	; 0x06
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
     be0:	9c 01       	movw	r18, r24
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	78 ea       	ldi	r23, 0xA8	; 168
     bea:	84 ed       	ldi	r24, 0xD4	; 212
     bec:	95 e5       	ldi	r25, 0x55	; 85
     bee:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     bf2:	2f 83       	std	Y+7, r18	; 0x07
     bf4:	38 87       	std	Y+8, r19	; 0x08
     bf6:	49 87       	std	Y+9, r20	; 0x09
     bf8:	5a 87       	std	Y+10, r21	; 0x0a
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     bfa:	6f 81       	ldd	r22, Y+7	; 0x07
     bfc:	78 85       	ldd	r23, Y+8	; 0x08
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	ea 81       	ldd	r30, Y+2	; 0x02
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	8e 01       	movw	r16, r28
     c10:	0f 5f       	subi	r16, 0xFF	; 255
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <BPM_to_TMR2+0x90>
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
		new_clock_divide_select++;             //try the next highest divider
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	8a 83       	std	Y+2, r24	; 0x02
		
		if (new_clock_divide_select > 7)       //unless you've explored all of them
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	88 30       	cpi	r24, 0x08	; 8
     c20:	08 f0       	brcs	.+2      	; 0xc24 <BPM_to_TMR2+0x7c>
     c22:	a1 c0       	rjmp	.+322    	; 0xd66 <BPM_to_TMR2+0x1be>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	ea 81       	ldd	r30, Y+2	; 0x02
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e0 0f       	add	r30, r16
     c3a:	f1 1f       	adc	r31, r17
     c3c:	26 85       	ldd	r18, Z+14	; 0x0e
     c3e:	37 85       	ldd	r19, Z+15	; 0x0f
     c40:	40 89       	ldd	r20, Z+16	; 0x10
     c42:	51 89       	ldd	r21, Z+17	; 0x11
     c44:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     c48:	2b 87       	std	Y+11, r18	; 0x0b
     c4a:	3c 87       	std	Y+12, r19	; 0x0c
     c4c:	4d 87       	std	Y+13, r20	; 0x0d
     c4e:	5e 87       	std	Y+14, r21	; 0x0e
	
	volatile uint32_t cycle_per_beat = numerator/BPM;   //compare value for no divider
	
	volatile uint32_t compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	
	while (compare_value > 0xFFFF){        //run loop until compare_value is a 16 bit number
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	9c 85       	ldd	r25, Y+12	; 0x0c
     c54:	ad 85       	ldd	r26, Y+13	; 0x0d
     c56:	be 85       	ldd	r27, Y+14	; 0x0e
     c58:	80 30       	cpi	r24, 0x00	; 0
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	92 07       	cpc	r25, r18
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	a2 07       	cpc	r26, r18
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	b2 07       	cpc	r27, r18
     c66:	b8 f6       	brcc	.-82     	; 0xc16 <BPM_to_TMR2+0x6e>
			return;
		
		compare_value = cycle_per_beat/clock_divide[new_clock_divide_select];
	}
	
	if (TCC0.CTRLA){
     c68:	80 91 00 08 	lds	r24, 0x0800
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <BPM_to_TMR2+0xca>
     c70:	61 c0       	rjmp	.+194    	; 0xd34 <BPM_to_TMR2+0x18c>
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
     c72:	99 81       	ldd	r25, Y+1	; 0x01
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	98 17       	cp	r25, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <BPM_to_TMR2+0xd4>
     c7a:	5a c0       	rjmp	.+180    	; 0xd30 <BPM_to_TMR2+0x188>
			TCC0.CTRLA = 0x00;
     c7c:	10 92 00 08 	sts	0x0800, r1
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
     c80:	60 91 20 08 	lds	r22, 0x0820
     c84:	70 91 21 08 	lds	r23, 0x0821
     c88:	ea 81       	ldd	r30, Y+2	; 0x02
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	8e 01       	movw	r16, r28
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	e0 0f       	add	r30, r16
     c9c:	f1 1f       	adc	r31, r17
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	26 85       	ldd	r18, Z+14	; 0x0e
     ca4:	37 85       	ldd	r19, Z+15	; 0x0f
     ca6:	40 89       	ldd	r20, Z+16	; 0x10
     ca8:	51 89       	ldd	r21, Z+17	; 0x11
     caa:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__mulsi3>
     cae:	6b 83       	std	Y+3, r22	; 0x03
     cb0:	7c 83       	std	Y+4, r23	; 0x04
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	9e 83       	std	Y+6, r25	; 0x06
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
     cb6:	6b 81       	ldd	r22, Y+3	; 0x03
     cb8:	7c 81       	ldd	r23, Y+4	; 0x04
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e0 0f       	add	r30, r16
     ccc:	f1 1f       	adc	r31, r17
     cce:	26 85       	ldd	r18, Z+14	; 0x0e
     cd0:	37 85       	ldd	r19, Z+15	; 0x0f
     cd2:	40 89       	ldd	r20, Z+16	; 0x10
     cd4:	51 89       	ldd	r21, Z+17	; 0x11
     cd6:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodsi4>
     cda:	2b 83       	std	Y+3, r18	; 0x03
     cdc:	3c 83       	std	Y+4, r19	; 0x04
     cde:	4d 83       	std	Y+5, r20	; 0x05
     ce0:	5e 83       	std	Y+6, r21	; 0x06
			while (adjusted_count > compare_value)
     ce2:	10 c0       	rjmp	.+32     	; 0xd04 <BPM_to_TMR2+0x15c>
				adjusted_count = adjusted_count - compare_value;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	ad 81       	ldd	r26, Y+5	; 0x05
     cea:	be 81       	ldd	r27, Y+6	; 0x06
     cec:	2b 85       	ldd	r18, Y+11	; 0x0b
     cee:	3c 85       	ldd	r19, Y+12	; 0x0c
     cf0:	4d 85       	ldd	r20, Y+13	; 0x0d
     cf2:	5e 85       	ldd	r21, Y+14	; 0x0e
     cf4:	82 1b       	sub	r24, r18
     cf6:	93 0b       	sbc	r25, r19
     cf8:	a4 0b       	sbc	r26, r20
     cfa:	b5 0b       	sbc	r27, r21
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	ad 83       	std	Y+5, r26	; 0x05
     d02:	be 83       	std	Y+6, r27	; 0x06
	if (TCC0.CTRLA){
		if (!(current_clock_divide_select == new_clock_divide_select)){           //stop and scale the timer count if the divider must change
			TCC0.CTRLA = 0x00;
			adjusted_count = TCC0.CNT * clock_divide[new_clock_divide_select];
			adjusted_count = adjusted_count / clock_divide[current_clock_divide_select];
			while (adjusted_count > compare_value)
     d04:	2b 81       	ldd	r18, Y+3	; 0x03
     d06:	3c 81       	ldd	r19, Y+4	; 0x04
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d10:	ad 85       	ldd	r26, Y+13	; 0x0d
     d12:	be 85       	ldd	r27, Y+14	; 0x0e
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	18 f3       	brcs	.-58     	; 0xce4 <BPM_to_TMR2+0x13c>
				adjusted_count = adjusted_count - compare_value;
			TCC0.CNT = (uint16_t) adjusted_count;
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	ad 81       	ldd	r26, Y+5	; 0x05
     d24:	be 81       	ldd	r27, Y+6	; 0x06
     d26:	e0 e0       	ldi	r30, 0x00	; 0
     d28:	f8 e0       	ldi	r31, 0x08	; 8
     d2a:	80 a3       	std	Z+32, r24	; 0x20
     d2c:	91 a3       	std	Z+33, r25	; 0x21
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <BPM_to_TMR2+0x18c>
		}
		else
			TCC0.CTRLA = 0x00;  //otherwise, just stop the timer 
     d30:	10 92 00 08 	sts	0x0800, r1
	}			
	
	
	TCC0.CCA = (uint16_t) compare_value;    //set the new compare value for beat
     d34:	8b 85       	ldd	r24, Y+11	; 0x0b
     d36:	9c 85       	ldd	r25, Y+12	; 0x0c
     d38:	ad 85       	ldd	r26, Y+13	; 0x0d
     d3a:	be 85       	ldd	r27, Y+14	; 0x0e
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	f8 e0       	ldi	r31, 0x08	; 8
     d40:	80 a7       	std	Z+40, r24	; 0x28
     d42:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCD = (uint16_t) compare_value/24; //set the new compare value for midi-clock ticks
     d44:	8b 85       	ldd	r24, Y+11	; 0x0b
     d46:	9c 85       	ldd	r25, Y+12	; 0x0c
     d48:	ad 85       	ldd	r26, Y+13	; 0x0d
     d4a:	be 85       	ldd	r27, Y+14	; 0x0e
     d4c:	68 e1       	ldi	r22, 0x18	; 24
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__udivmodhi4>
     d54:	66 a7       	std	Z+46, r22	; 0x2e
     d56:	77 a7       	std	Z+47, r23	; 0x2f
	
	TCC0.CTRLB |= 0x90;   //enable CCA (beat count) and CCD (tick count)
     d58:	80 91 01 08 	lds	r24, 0x0801
     d5c:	80 69       	ori	r24, 0x90	; 144
     d5e:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.CTRLA = new_clock_divide_select;   //set the new clock divider and start the clock
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	80 93 00 08 	sts	0x0800, r24

	return;
}
     d66:	ae 96       	adiw	r28, 0x2e	; 46
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <test_pot_banks>:
	}
	
}
*/

void test_pot_banks(){
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
	initialize_hardware();
     d82:	0e 94 22 02 	call	0x444	; 0x444 <initialize_hardware>
	
	uint16_t pot_out_max = 10;
	uint16_t pot_out_min = 0;
     d86:	c0 e0       	ldi	r28, 0x00	; 0
     d88:	d0 e0       	ldi	r29, 0x00	; 0
*/

void test_pot_banks(){
	initialize_hardware();
	
	uint16_t pot_out_max = 10;
     d8a:	0a e0       	ldi	r16, 0x0A	; 10
     d8c:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t pot_out_min = 0;
	uint16_t pot_out_value = 0;
	
	while(1){
		read_hardware();
     d8e:	0e 94 a9 02 	call	0x552	; 0x552 <read_hardware>
		
		if (get_encoder() == TURN_CW){
     d92:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	91 f4       	brne	.+36     	; 0xdbe <test_pot_banks+0x48>
			if (get_encoder_switch_state()){
     d9a:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     d9e:	88 23       	and	r24, r24
     da0:	39 f0       	breq	.+14     	; 0xdb0 <test_pot_banks+0x3a>
				if (pot_out_min < (pot_out_max - 1))
     da2:	c8 01       	movw	r24, r16
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	c8 17       	cp	r28, r24
     da8:	d9 07       	cpc	r29, r25
     daa:	e0 f4       	brcc	.+56     	; 0xde4 <test_pot_banks+0x6e>
					pot_out_min++;
     dac:	21 96       	adiw	r28, 0x01	; 1
     dae:	1a c0       	rjmp	.+52     	; 0xde4 <test_pot_banks+0x6e>
			}					
			else if (pot_out_max < 999)
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	07 3e       	cpi	r16, 0xE7	; 231
     db4:	18 07       	cpc	r17, r24
     db6:	b0 f4       	brcc	.+44     	; 0xde4 <test_pot_banks+0x6e>
				pot_out_max++;
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	13 c0       	rjmp	.+38     	; 0xde4 <test_pot_banks+0x6e>
		}
		else if (get_encoder() == TURN_CCW){
     dbe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <get_encoder>
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	79 f4       	brne	.+30     	; 0xde4 <test_pot_banks+0x6e>
			if (get_encoder_switch_state()){
     dc6:	0e 94 10 02 	call	0x420	; 0x420 <get_encoder_switch_state>
     dca:	88 23       	and	r24, r24
     dcc:	21 f0       	breq	.+8      	; 0xdd6 <test_pot_banks+0x60>
				if (pot_out_min > 0)
     dce:	20 97       	sbiw	r28, 0x00	; 0
     dd0:	49 f0       	breq	.+18     	; 0xde4 <test_pot_banks+0x6e>
					pot_out_min += -1;
     dd2:	21 97       	sbiw	r28, 0x01	; 1
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <test_pot_banks+0x6e>
			}					
			else if (pot_out_max > (pot_out_min + 1))
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	80 17       	cp	r24, r16
     ddc:	91 07       	cpc	r25, r17
     dde:	10 f4       	brcc	.+4      	; 0xde4 <test_pot_banks+0x6e>
				pot_out_max += -1;
     de0:	01 50       	subi	r16, 0x01	; 1
     de2:	10 40       	sbci	r17, 0x00	; 0
		}
		
		pot_out_value = get_pot_value(2, pot_out_min, pot_out_max);
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	be 01       	movw	r22, r28
     de8:	a8 01       	movw	r20, r16
     dea:	0e 94 de 00 	call	0x1bc	; 0x1bc <get_pot_value>
     dee:	7c 01       	movw	r14, r24
		
		if (get_toggle_switch_state())
     df0:	0e 94 1c 02 	call	0x438	; 0x438 <get_toggle_switch_state>
     df4:	88 23       	and	r24, r24
     df6:	11 f0       	breq	.+4      	; 0xdfc <test_pot_banks+0x86>
			set_seven_segment_LEDs(pot_out_value);
     df8:	c7 01       	movw	r24, r14
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <test_pot_banks+0x94>
		else if (get_pushbutton_switch_state())
     dfc:	0e 94 16 02 	call	0x42c	; 0x42c <get_pushbutton_switch_state>
     e00:	88 23       	and	r24, r24
     e02:	11 f0       	breq	.+4      	; 0xe08 <test_pot_banks+0x92>
			set_seven_segment_LEDs(pot_out_min);
     e04:	ce 01       	movw	r24, r28
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <test_pot_banks+0x94>
		else
			set_seven_segment_LEDs(pot_out_max);
     e08:	c8 01       	movw	r24, r16
     e0a:	0e 94 82 01 	call	0x304	; 0x304 <set_seven_segment_LEDs>
     e0e:	bf cf       	rjmp	.-130    	; 0xd8e <test_pot_banks+0x18>

00000e10 <main>:
	}
}

int main(void) {

	test_pot_banks();
     e10:	0e 94 bb 06 	call	0xd76	; 0xd76 <test_pot_banks>
   
	return 0;
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	08 95       	ret

00000e1a <pre_input_process>:
}

void pre_input_process(){
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
     e1a:	80 91 71 21 	lds	r24, 0x2171
     e1e:	8f 3f       	cpi	r24, 0xFF	; 255
     e20:	31 f0       	breq	.+12     	; 0xe2e <pre_input_process+0x14>
		j++;
     e22:	80 91 71 21 	lds	r24, 0x2171
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 71 21 	sts	0x2171, r24
     e2c:	08 95       	ret
	else
		j = 0;
     e2e:	10 92 71 21 	sts	0x2171, r1
     e32:	08 95       	ret

00000e34 <generic_callback>:
}

void generic_callback(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     e34:	0f 93       	push	r16
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	27 97       	sbiw	r28, 0x07	; 7
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	de bf       	out	0x3e, r29	; 62
    volatile uint8_t i = cnt;
     e44:	69 83       	std	Y+1, r22	; 0x01
     e46:	4d 83       	std	Y+5, r20	; 0x05
     e48:	2e 83       	std	Y+6, r18	; 0x06
     e4a:	0f 83       	std	Y+7, r16	; 0x07
    volatile uint8_t bytes[3] = {inByte0, inByte1, inByte2};
     e4c:	de 01       	movw	r26, r28
     e4e:	12 96       	adiw	r26, 0x02	; 2
     e50:	fe 01       	movw	r30, r28
     e52:	35 96       	adiw	r30, 0x05	; 5
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <generic_callback+0x22>
		
	volatile static uint8_t j = 0;
	
	if (j < 0xFF)
     e5e:	80 91 70 21 	lds	r24, 0x2170
     e62:	8f 3f       	cpi	r24, 0xFF	; 255
     e64:	31 f0       	breq	.+12     	; 0xe72 <generic_callback+0x3e>
		j++;
     e66:	80 91 70 21 	lds	r24, 0x2170
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	80 93 70 21 	sts	0x2170, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <generic_callback+0x42>
	else
		j = 0;
     e72:	10 92 70 21 	sts	0x2170, r1
	

     e76:	27 96       	adiw	r28, 0x07	; 7
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <serial_midi_send>:

#define MIDI_CHAN 0

static MidiDevice midi_device;

void serial_midi_send(MidiDevice * device, uint8_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2){
     e84:	0f 93       	push	r16
   //we always send the first byte
	while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     e86:	80 91 b1 09 	lds	r24, 0x09B1
     e8a:	85 ff       	sbrs	r24, 5
     e8c:	fc cf       	rjmp	.-8      	; 0xe86 <serial_midi_send+0x2>
	USARTD1.DATA = inByte0;
     e8e:	40 93 b0 09 	sts	0x09B0, r20
   //if cnt == 2 or 3 we send the send byte
   if(cnt > 1) {
     e92:	62 30       	cpi	r22, 0x02	; 2
     e94:	70 f0       	brcs	.+28     	; 0xeb2 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     e96:	80 91 b1 09 	lds	r24, 0x09B1
     e9a:	85 ff       	sbrs	r24, 5
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <serial_midi_send+0x12>
      USARTD1.DATA = inByte1;
     e9e:	20 93 b0 09 	sts	0x09B0, r18
   }
   //if cnt == 3 we send the third byte
   if(cnt == 3) {
     ea2:	63 30       	cpi	r22, 0x03	; 3
     ea4:	31 f4       	brne	.+12     	; 0xeb2 <serial_midi_send+0x2e>
      while (!(USARTD1.STATUS & 0x20)){}; // Wait for empty transmit buffer
     ea6:	80 91 b1 09 	lds	r24, 0x09B1
     eaa:	85 ff       	sbrs	r24, 5
     eac:	fc cf       	rjmp	.-8      	; 0xea6 <serial_midi_send+0x22>
      USARTD1.DATA = inByte2;
     eae:	00 93 b0 09 	sts	0x09B0, r16
   }
}
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <serial_midi_device>:

MidiDevice * serial_midi_device() {
   return &midi_device;
}
     eb6:	82 e7       	ldi	r24, 0x72	; 114
     eb8:	91 e2       	ldi	r25, 0x21	; 33
     eba:	08 95       	ret

00000ebc <serial_midi_init>:

void serial_midi_init(){
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
   //send up the device
   midi_device_init(&midi_device);
     ec0:	c2 e7       	ldi	r28, 0x72	; 114
     ec2:	d1 e2       	ldi	r29, 0x21	; 33
     ec4:	ce 01       	movw	r24, r28
     ec6:	0e 94 a5 09 	call	0x134a	; 0x134a <midi_device_init>
   midi_device_set_pre_input_process_func(&midi_device, pre_input_process);
     eca:	ce 01       	movw	r24, r28
     ecc:	6d e0       	ldi	r22, 0x0D	; 13
     ece:	77 e0       	ldi	r23, 0x07	; 7
     ed0:	0e 94 01 0a 	call	0x1402	; 0x1402 <midi_device_set_pre_input_process_func>
   midi_register_catchall_callback(&midi_device, generic_callback);
     ed4:	ce 01       	movw	r24, r28
     ed6:	6a e1       	ldi	r22, 0x1A	; 26
     ed8:	77 e0       	ldi	r23, 0x07	; 7
     eda:	0e 94 a1 09 	call	0x1342	; 0x1342 <midi_register_catchall_callback>
   
 //  initialize_note_timer();
 //  send_all_notes_off();
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     ee4:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     ee6:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     ee8:	63 83       	std	Z+3, r22	; 0x03
     eea:	74 83       	std	Z+4, r23	; 0x04
   queue->start = queue->end = 0;
     eec:	11 82       	std	Z+1, r1	; 0x01
     eee:	10 82       	st	Z, r1
}
     ef0:	08 95       	ret

00000ef2 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     efe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <store_and_clear_interrupt>
     f02:	08 2f       	mov	r16, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     f04:	29 81       	ldd	r18, Y+1	; 0x01
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	c9 01       	movw	r24, r18
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	6a 81       	ldd	r22, Y+2	; 0x02
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 91 12 	call	0x2522	; 0x2522 <__divmodhi4>
     f14:	48 81       	ld	r20, Y
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	84 17       	cp	r24, r20
     f1a:	95 07       	cpc	r25, r21
     f1c:	29 f4       	brne	.+10     	; 0xf28 <bytequeue_enqueue+0x36>
      restore_interrupt_setting(setting);
     f1e:	80 2f       	mov	r24, r16
     f20:	0e 94 f6 07 	call	0xfec	; 0xfec <restore_interrupt_setting>
      return false;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	13 c0       	rjmp	.+38     	; 0xf4e <bytequeue_enqueue+0x5c>
   } else {
      queue->data[queue->end] = item;
     f28:	eb 81       	ldd	r30, Y+3	; 0x03
     f2a:	fc 81       	ldd	r31, Y+4	; 0x04
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	2f 5f       	subi	r18, 0xFF	; 255
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	6a 81       	ldd	r22, Y+2	; 0x02
     f3c:	c9 01       	movw	r24, r18
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	0e 94 91 12 	call	0x2522	; 0x2522 <__divmodhi4>
     f44:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     f46:	80 2f       	mov	r24, r16
     f48:	0e 94 f6 07 	call	0xfec	; 0xfec <restore_interrupt_setting>
      return true;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     f60:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	98 81       	ld	r25, Y
     f68:	29 17       	cp	r18, r25
     f6a:	10 f0       	brcs	.+4      	; 0xf70 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     f6c:	12 2f       	mov	r17, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <bytequeue_length+0x1c>
   else
      len = (queue->length - queue->start) + queue->end;
     f70:	1a 81       	ldd	r17, Y+2	; 0x02
     f72:	12 0f       	add	r17, r18
     f74:	19 1b       	sub	r17, r25
   restore_interrupt_setting(setting);
     f76:	0e 94 f6 07 	call	0xfec	; 0xfec <restore_interrupt_setting>
   return len;
}
     f7a:	81 2f       	mov	r24, r17
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	08 95       	ret

00000f84 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     f84:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     f86:	80 81       	ld	r24, Z
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	86 0f       	add	r24, r22
     f8c:	91 1d       	adc	r25, r1
     f8e:	62 81       	ldd	r22, Z+2	; 0x02
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0e 94 91 12 	call	0x2522	; 0x2522 <__divmodhi4>
     f96:	03 80       	ldd	r0, Z+3	; 0x03
     f98:	f4 81       	ldd	r31, Z+4	; 0x04
     f9a:	e0 2d       	mov	r30, r0
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
}
     fa0:	80 81       	ld	r24, Z
     fa2:	08 95       	ret

00000fa4 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8c 01       	movw	r16, r24
   interrupt_setting_t setting = store_and_clear_interrupt();
     fb4:	69 83       	std	Y+1, r22	; 0x01
     fb6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <store_and_clear_interrupt>
     fba:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     fbc:	f8 01       	movw	r30, r16
     fbe:	20 81       	ld	r18, Z
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	69 81       	ldd	r22, Y+1	; 0x01
     fc4:	26 0f       	add	r18, r22
     fc6:	31 1d       	adc	r19, r1
     fc8:	62 81       	ldd	r22, Z+2	; 0x02
     fca:	c9 01       	movw	r24, r18
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 91 12 	call	0x2522	; 0x2522 <__divmodhi4>
     fd2:	80 83       	st	Z, r24
   restore_interrupt_setting(setting);
     fd4:	84 2f       	mov	r24, r20
     fd6:	0e 94 f6 07 	call	0xfec	; 0xfec <restore_interrupt_setting>
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <store_and_clear_interrupt>:
#include "interrupt_setting.h"
#include <avr/interrupt.h>


interrupt_setting_t store_and_clear_interrupt(void) {
	uint8_t sreg = SREG;
     fe6:	8f b7       	in	r24, 0x3f	; 63
    cli();
     fe8:	f8 94       	cli
    return sreg;
}
     fea:	08 95       	ret

00000fec <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
	SREG = setting;
     fec:	8f bf       	out	0x3f, r24	; 63
}
     fee:	08 95       	ret

00000ff0 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     ff0:	88 1f       	adc	r24, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	88 1f       	adc	r24, r24
     ff6:	08 95       	ret

00000ff8 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	88 3f       	cpi	r24, 0xF8	; 248
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <midi_is_realtime+0x8>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
}
    1000:	89 2f       	mov	r24, r25
    1002:	08 95       	ret

00001004 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	20 7f       	andi	r18, 0xF0	; 240
    100a:	30 70       	andi	r19, 0x00	; 0
    100c:	20 3b       	cpi	r18, 0xB0	; 176
    100e:	31 05       	cpc	r19, r1
    1010:	f1 f0       	breq	.+60     	; 0x104e <midi_packet_length+0x4a>
    1012:	21 3b       	cpi	r18, 0xB1	; 177
    1014:	31 05       	cpc	r19, r1
    1016:	54 f4       	brge	.+20     	; 0x102c <midi_packet_length+0x28>
    1018:	20 39       	cpi	r18, 0x90	; 144
    101a:	31 05       	cpc	r19, r1
    101c:	c1 f0       	breq	.+48     	; 0x104e <midi_packet_length+0x4a>
    101e:	20 3a       	cpi	r18, 0xA0	; 160
    1020:	31 05       	cpc	r19, r1
    1022:	a9 f0       	breq	.+42     	; 0x104e <midi_packet_length+0x4a>
    1024:	20 38       	cpi	r18, 0x80	; 128
    1026:	31 05       	cpc	r19, r1
    1028:	e9 f4       	brne	.+58     	; 0x1064 <midi_packet_length+0x60>
    102a:	11 c0       	rjmp	.+34     	; 0x104e <midi_packet_length+0x4a>
    102c:	20 3d       	cpi	r18, 0xD0	; 208
    102e:	31 05       	cpc	r19, r1
    1030:	d9 f0       	breq	.+54     	; 0x1068 <midi_packet_length+0x64>
    1032:	21 3d       	cpi	r18, 0xD1	; 209
    1034:	31 05       	cpc	r19, r1
    1036:	24 f4       	brge	.+8      	; 0x1040 <midi_packet_length+0x3c>
    1038:	20 3c       	cpi	r18, 0xC0	; 192
    103a:	31 05       	cpc	r19, r1
    103c:	99 f4       	brne	.+38     	; 0x1064 <midi_packet_length+0x60>
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <midi_packet_length+0x64>
    1040:	20 3e       	cpi	r18, 0xE0	; 224
    1042:	31 05       	cpc	r19, r1
    1044:	21 f0       	breq	.+8      	; 0x104e <midi_packet_length+0x4a>
    1046:	20 3f       	cpi	r18, 0xF0	; 240
    1048:	31 05       	cpc	r19, r1
    104a:	61 f4       	brne	.+24     	; 0x1064 <midi_packet_length+0x60>
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <midi_packet_length+0x4e>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE;
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	08 95       	ret
bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
}

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1052:	e8 2f       	mov	r30, r24
    1054:	e1 5f       	subi	r30, 0xF1	; 241
    1056:	ef 30       	cpi	r30, 0x0F	; 15
    1058:	48 f4       	brcc	.+18     	; 0x106c <midi_packet_length+0x68>
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e0 5c       	subi	r30, 0xC0	; 192
    105e:	ff 4d       	sbci	r31, 0xDF	; 223
    1060:	80 81       	ld	r24, Z
    1062:	08 95       	ret
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO;
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	08 95       	ret
    106c:	80 e0       	ldi	r24, 0x00	; 0
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    106e:	08 95       	ret

00001070 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1070:	0f 93       	push	r16
    1072:	36 2f       	mov	r19, r22
    1074:	54 2f       	mov	r21, r20
    1076:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1078:	3f 70       	andi	r19, 0x0F	; 15
    107a:	30 6b       	ori	r19, 0xB0	; 176
    107c:	5f 77       	andi	r21, 0x7F	; 127
    107e:	0f 77       	andi	r16, 0x7F	; 127
    1080:	dc 01       	movw	r26, r24
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	63 e0       	ldi	r22, 0x03	; 3
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	43 2f       	mov	r20, r19
    108c:	25 2f       	mov	r18, r21
    108e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret

00001094 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1094:	0f 93       	push	r16
    1096:	36 2f       	mov	r19, r22
    1098:	54 2f       	mov	r21, r20
    109a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    109c:	3f 70       	andi	r19, 0x0F	; 15
    109e:	30 69       	ori	r19, 0x90	; 144
    10a0:	5f 77       	andi	r21, 0x7F	; 127
    10a2:	0f 77       	andi	r16, 0x7F	; 127
    10a4:	dc 01       	movw	r26, r24
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	63 e0       	ldi	r22, 0x03	; 3
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	43 2f       	mov	r20, r19
    10b0:	25 2f       	mov	r18, r21
    10b2:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    10b8:	0f 93       	push	r16
    10ba:	36 2f       	mov	r19, r22
    10bc:	54 2f       	mov	r21, r20
    10be:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    10c0:	3f 70       	andi	r19, 0x0F	; 15
    10c2:	30 68       	ori	r19, 0x80	; 128
    10c4:	5f 77       	andi	r21, 0x7F	; 127
    10c6:	0f 77       	andi	r16, 0x7F	; 127
    10c8:	dc 01       	movw	r26, r24
    10ca:	ed 91       	ld	r30, X+
    10cc:	fc 91       	ld	r31, X
    10ce:	63 e0       	ldi	r22, 0x03	; 3
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	43 2f       	mov	r20, r19
    10d4:	25 2f       	mov	r18, r21
    10d6:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    10d8:	0f 91       	pop	r16
    10da:	08 95       	ret

000010dc <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    10dc:	0f 93       	push	r16
    10de:	36 2f       	mov	r19, r22
    10e0:	54 2f       	mov	r21, r20
    10e2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    10e4:	3f 70       	andi	r19, 0x0F	; 15
    10e6:	30 6a       	ori	r19, 0xA0	; 160
    10e8:	5f 77       	andi	r21, 0x7F	; 127
    10ea:	0f 77       	andi	r16, 0x7F	; 127
    10ec:	dc 01       	movw	r26, r24
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	63 e0       	ldi	r22, 0x03	; 3
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	43 2f       	mov	r20, r19
    10f8:	25 2f       	mov	r18, r21
    10fa:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

00001100 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	8a 01       	movw	r16, r20
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1106:	20 e2       	ldi	r18, 0x20	; 32
    1108:	40 30       	cpi	r20, 0x00	; 0
    110a:	52 07       	cpc	r21, r18
    110c:	3c f4       	brge	.+14     	; 0x111c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    110e:	a0 ee       	ldi	r26, 0xE0	; 224
    1110:	40 30       	cpi	r20, 0x00	; 0
    1112:	5a 07       	cpc	r21, r26
    1114:	34 f0       	brlt	.+12     	; 0x1122 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1116:	00 50       	subi	r16, 0x00	; 0
    1118:	10 4e       	sbci	r17, 0xE0	; 224
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    111c:	0f ef       	ldi	r16, 0xFF	; 255
    111e:	1f e3       	ldi	r17, 0x3F	; 63
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1126:	46 2f       	mov	r20, r22
    1128:	4f 70       	andi	r20, 0x0F	; 15
    112a:	40 6e       	ori	r20, 0xE0	; 224
    112c:	20 2f       	mov	r18, r16
    112e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1130:	00 0f       	add	r16, r16
    1132:	01 2f       	mov	r16, r17
    1134:	00 1f       	adc	r16, r16
    1136:	11 0b       	sbc	r17, r17
    1138:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    113a:	0f 77       	andi	r16, 0x7F	; 127
    113c:	dc 01       	movw	r26, r24
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    114e:	0f 93       	push	r16
    1150:	36 2f       	mov	r19, r22
    1152:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1154:	3f 70       	andi	r19, 0x0F	; 15
    1156:	30 6c       	ori	r19, 0xC0	; 192
    1158:	2f 77       	andi	r18, 0x7F	; 127
    115a:	dc 01       	movw	r26, r24
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	62 e0       	ldi	r22, 0x02	; 2
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	43 2f       	mov	r20, r19
    1166:	00 e0       	ldi	r16, 0x00	; 0
    1168:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    116e:	0f 93       	push	r16
    1170:	36 2f       	mov	r19, r22
    1172:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1174:	3f 70       	andi	r19, 0x0F	; 15
    1176:	30 6d       	ori	r19, 0xD0	; 208
    1178:	2f 77       	andi	r18, 0x7F	; 127
    117a:	dc 01       	movw	r26, r24
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	62 e0       	ldi	r22, 0x02	; 2
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	43 2f       	mov	r20, r19
    1186:	00 e0       	ldi	r16, 0x00	; 0
    1188:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    118e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1190:	dc 01       	movw	r26, r24
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	48 ef       	ldi	r20, 0xF8	; 248
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	09 95       	icall
}
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    11a6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    11a8:	dc 01       	movw	r26, r24
    11aa:	ed 91       	ld	r30, X+
    11ac:	fc 91       	ld	r31, X
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	49 ef       	ldi	r20, 0xF9	; 249
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	00 e0       	ldi	r16, 0x00	; 0
    11b8:	09 95       	icall
}
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <midi_send_start>:

void midi_send_start(MidiDevice * device){
    11be:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    11c0:	dc 01       	movw	r26, r24
    11c2:	ed 91       	ld	r30, X+
    11c4:	fc 91       	ld	r31, X
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	00 e0       	ldi	r16, 0x00	; 0
    11d0:	09 95       	icall
}
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    11d6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    11d8:	dc 01       	movw	r26, r24
    11da:	ed 91       	ld	r30, X+
    11dc:	fc 91       	ld	r31, X
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	4b ef       	ldi	r20, 0xFB	; 251
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	09 95       	icall
}
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    11ee:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    11f0:	dc 01       	movw	r26, r24
    11f2:	ed 91       	ld	r30, X+
    11f4:	fc 91       	ld	r31, X
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	4c ef       	ldi	r20, 0xFC	; 252
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	00 e0       	ldi	r16, 0x00	; 0
    1200:	09 95       	icall
}
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1206:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1208:	dc 01       	movw	r26, r24
    120a:	ed 91       	ld	r30, X+
    120c:	fc 91       	ld	r31, X
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	4e ef       	ldi	r20, 0xFE	; 254
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	00 e0       	ldi	r16, 0x00	; 0
    1218:	09 95       	icall
}
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    121e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1220:	dc 01       	movw	r26, r24
    1222:	ed 91       	ld	r30, X+
    1224:	fc 91       	ld	r31, X
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	4f ef       	ldi	r20, 0xFF	; 255
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	00 e0       	ldi	r16, 0x00	; 0
    1230:	09 95       	icall
}
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1236:	0f 93       	push	r16
    1238:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    123a:	2f 77       	andi	r18, 0x7F	; 127
    123c:	dc 01       	movw	r26, r24
    123e:	ed 91       	ld	r30, X+
    1240:	fc 91       	ld	r31, X
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	41 ef       	ldi	r20, 0xF1	; 241
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
   device->send_func(device, 3,
    1254:	26 2f       	mov	r18, r22
    1256:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1258:	8b 01       	movw	r16, r22
    125a:	00 0f       	add	r16, r16
    125c:	01 2f       	mov	r16, r17
    125e:	00 1f       	adc	r16, r16
    1260:	11 0b       	sbc	r17, r17
    1262:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1264:	0f 77       	andi	r16, 0x7F	; 127
    1266:	dc 01       	movw	r26, r24
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	63 e0       	ldi	r22, 0x03	; 3
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	42 ef       	ldi	r20, 0xF2	; 242
    1272:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	08 95       	ret

0000127a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    127a:	0f 93       	push	r16
    127c:	26 2f       	mov	r18, r22
   device->send_func(device, 2,
    127e:	2f 77       	andi	r18, 0x7F	; 127
    1280:	dc 01       	movw	r26, r24
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	43 ef       	ldi	r20, 0xF3	; 243
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1294:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1296:	dc 01       	movw	r26, r24
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	46 ef       	ldi	r20, 0xF6	; 246
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	00 e0       	ldi	r16, 0x00	; 0
    12a6:	09 95       	icall
}
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    12ac:	0f 93       	push	r16
    12ae:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    12b0:	dc 01       	movw	r26, r24
    12b2:	ed 91       	ld	r30, X+
    12b4:	fc 91       	ld	r31, X
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	09 95       	icall
}
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    12c4:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    12c6:	dc 01       	movw	r26, r24
    12c8:	ed 91       	ld	r30, X+
    12ca:	fc 91       	ld	r31, X
    12cc:	09 95       	icall
}
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    12d2:	fc 01       	movw	r30, r24
    12d4:	62 83       	std	Z+2, r22	; 0x02
    12d6:	73 83       	std	Z+3, r23	; 0x03
}
    12d8:	08 95       	ret

000012da <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    12da:	fc 01       	movw	r30, r24
    12dc:	64 83       	std	Z+4, r22	; 0x04
    12de:	75 83       	std	Z+5, r23	; 0x05
}
    12e0:	08 95       	ret

000012e2 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    12e2:	fc 01       	movw	r30, r24
    12e4:	66 83       	std	Z+6, r22	; 0x06
    12e6:	77 83       	std	Z+7, r23	; 0x07
}
    12e8:	08 95       	ret

000012ea <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    12ea:	fc 01       	movw	r30, r24
    12ec:	60 87       	std	Z+8, r22	; 0x08
    12ee:	71 87       	std	Z+9, r23	; 0x09
}
    12f0:	08 95       	ret

000012f2 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    12f2:	fc 01       	movw	r30, r24
    12f4:	62 87       	std	Z+10, r22	; 0x0a
    12f6:	73 87       	std	Z+11, r23	; 0x0b
}
    12f8:	08 95       	ret

000012fa <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    12fa:	fc 01       	movw	r30, r24
    12fc:	64 87       	std	Z+12, r22	; 0x0c
    12fe:	75 87       	std	Z+13, r23	; 0x0d
}
    1300:	08 95       	ret

00001302 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1302:	fc 01       	movw	r30, r24
    1304:	66 87       	std	Z+14, r22	; 0x0e
    1306:	77 87       	std	Z+15, r23	; 0x0f
}
    1308:	08 95       	ret

0000130a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    130a:	fc 01       	movw	r30, r24
    130c:	60 8b       	std	Z+16, r22	; 0x10
    130e:	71 8b       	std	Z+17, r23	; 0x11
}
    1310:	08 95       	ret

00001312 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1312:	fc 01       	movw	r30, r24
    1314:	62 8b       	std	Z+18, r22	; 0x12
    1316:	73 8b       	std	Z+19, r23	; 0x13
}
    1318:	08 95       	ret

0000131a <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    131a:	fc 01       	movw	r30, r24
    131c:	64 8b       	std	Z+20, r22	; 0x14
    131e:	75 8b       	std	Z+21, r23	; 0x15
}
    1320:	08 95       	ret

00001322 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1322:	fc 01       	movw	r30, r24
    1324:	66 8b       	std	Z+22, r22	; 0x16
    1326:	77 8b       	std	Z+23, r23	; 0x17
}
    1328:	08 95       	ret

0000132a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    132a:	fc 01       	movw	r30, r24
    132c:	60 8f       	std	Z+24, r22	; 0x18
    132e:	71 8f       	std	Z+25, r23	; 0x19
}
    1330:	08 95       	ret

00001332 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_sysex_callback = func;
    1332:	fc 01       	movw	r30, r24
    1334:	62 8f       	std	Z+26, r22	; 0x1a
    1336:	73 8f       	std	Z+27, r23	; 0x1b
}
    1338:	08 95       	ret

0000133a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    133a:	fc 01       	movw	r30, r24
    133c:	64 8f       	std	Z+28, r22	; 0x1c
    133e:	75 8f       	std	Z+29, r23	; 0x1d
}
    1340:	08 95       	ret

00001342 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1342:	fc 01       	movw	r30, r24
    1344:	66 8f       	std	Z+30, r22	; 0x1e
    1346:	77 8f       	std	Z+31, r23	; 0x1f
}
    1348:	08 95       	ret

0000134a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
   device->input_state = IDLE;
    1350:	1d a2       	std	Y+37, r1	; 0x25
   device->input_count = 0;
    1352:	1e a2       	std	Y+38, r1	; 0x26
    1354:	1f a2       	std	Y+39, r1	; 0x27
   bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1356:	bc 01       	movw	r22, r24
    1358:	68 5d       	subi	r22, 0xD8	; 216
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	88 51       	subi	r24, 0x18	; 24
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	40 ec       	ldi	r20, 0xC0	; 192
    1362:	0e 94 72 07 	call	0xee4	; 0xee4 <bytequeue_init>

   //three byte funcs
   device->input_cc_callback = NULL;
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	1b 82       	std	Y+3, r1	; 0x03
   device->input_noteon_callback = NULL;
    136a:	1c 82       	std	Y+4, r1	; 0x04
    136c:	1d 82       	std	Y+5, r1	; 0x05
   device->input_noteoff_callback = NULL;
    136e:	1e 82       	std	Y+6, r1	; 0x06
    1370:	1f 82       	std	Y+7, r1	; 0x07
   device->input_aftertouch_callback = NULL;
    1372:	18 86       	std	Y+8, r1	; 0x08
    1374:	19 86       	std	Y+9, r1	; 0x09
   device->input_pitchbend_callback = NULL;
    1376:	1a 86       	std	Y+10, r1	; 0x0a
    1378:	1b 86       	std	Y+11, r1	; 0x0b
   device->input_songposition_callback = NULL;
    137a:	1c 86       	std	Y+12, r1	; 0x0c
    137c:	1d 86       	std	Y+13, r1	; 0x0d

   //two byte funcs
   device->input_progchange_callback = NULL;
    137e:	1e 86       	std	Y+14, r1	; 0x0e
    1380:	1f 86       	std	Y+15, r1	; 0x0f
   device->input_chanpressure_callback = NULL;
    1382:	18 8a       	std	Y+16, r1	; 0x10
    1384:	19 8a       	std	Y+17, r1	; 0x11
   device->input_songselect_callback = NULL;
    1386:	1a 8a       	std	Y+18, r1	; 0x12
    1388:	1b 8a       	std	Y+19, r1	; 0x13
   device->input_tc_quarterframe_callback = NULL;
    138a:	1c 8a       	std	Y+20, r1	; 0x14
    138c:	1d 8a       	std	Y+21, r1	; 0x15

   //one byte funcs
   device->input_realtime_callback = NULL;
    138e:	1e 8a       	std	Y+22, r1	; 0x16
    1390:	1f 8a       	std	Y+23, r1	; 0x17
   device->input_tunerequest_callback = NULL;
    1392:	18 8e       	std	Y+24, r1	; 0x18
    1394:	19 8e       	std	Y+25, r1	; 0x19

   //var byte functions
   device->input_sysex_callback = NULL;
    1396:	1a 8e       	std	Y+26, r1	; 0x1a
    1398:	1b 8e       	std	Y+27, r1	; 0x1b
   device->input_fallthrough_callback = NULL;
    139a:	1c 8e       	std	Y+28, r1	; 0x1c
    139c:	1d 8e       	std	Y+29, r1	; 0x1d
   device->input_catchall_callback = NULL;
    139e:	1e 8e       	std	Y+30, r1	; 0x1e
    13a0:	1f 8e       	std	Y+31, r1	; 0x1f

   device->pre_input_process_callback = NULL;
    13a2:	18 a2       	std	Y+32, r1	; 0x20
    13a4:	19 a2       	std	Y+33, r1	; 0x21
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	f6 2e       	mov	r15, r22
   uint8_t i;
   for (i = 0; i < cnt; i++)
    13c2:	e4 2f       	mov	r30, r20
    13c4:	f5 2f       	mov	r31, r21
    13c6:	6f 01       	movw	r12, r30
      bytequeue_enqueue(&device->input_queue, input[i]);
    13c8:	8c 01       	movw	r16, r24
    13ca:	08 51       	subi	r16, 0x18	; 24
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <midi_device_input+0x34>
      bytequeue_enqueue(&device->input_queue, input[i]);
    13d0:	f6 01       	movw	r30, r12
    13d2:	61 91       	ld	r22, Z+
    13d4:	6f 01       	movw	r12, r30
    13d6:	c8 01       	movw	r24, r16
    13d8:	49 83       	std	Y+1, r20	; 0x01
    13da:	0e 94 79 07 	call	0xef2	; 0xef2 <bytequeue_enqueue>
    13de:	49 81       	ldd	r20, Y+1	; 0x01
   device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
   uint8_t i;
   for (i = 0; i < cnt; i++)
    13e0:	8c 2d       	mov	r24, r12
    13e2:	84 1b       	sub	r24, r20
    13e4:	8f 15       	cp	r24, r15
    13e6:	a0 f3       	brcs	.-24     	; 0x13d0 <midi_device_input+0x24>
      bytequeue_enqueue(&device->input_queue, input[i]);
}
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
   device->send_func = send_func;
    13fa:	fc 01       	movw	r30, r24
    13fc:	60 83       	st	Z, r22
    13fe:	71 83       	std	Z+1, r23	; 0x01
}
    1400:	08 95       	ret

00001402 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
    1402:	fc 01       	movw	r30, r24
    1404:	60 a3       	std	Z+32, r22	; 0x20
    1406:	71 a3       	std	Z+33, r23	; 0x21
}
    1408:	08 95       	ret

0000140a <midi_input_callbacks>:
         }
      }
   }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	ec 01       	movw	r28, r24
    141c:	6b 01       	movw	r12, r22
    141e:	14 2f       	mov	r17, r20
    1420:	e2 2e       	mov	r14, r18
    1422:	f0 2e       	mov	r15, r16
   //did we end up calling a callback?
   bool called = false;
   if (device->input_state == SYSEX_MESSAGE) {
    1424:	8d a1       	ldd	r24, Y+37	; 0x25
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	31 f4       	brne	.+12     	; 0x1436 <midi_input_callbacks+0x2c>
      if (device->input_sysex_callback) {
    142a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    142c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    142e:	30 97       	sbiw	r30, 0x00	; 0
    1430:	09 f0       	breq	.+2      	; 0x1434 <midi_input_callbacks+0x2a>
    1432:	83 c0       	rjmp	.+262    	; 0x153a <midi_input_callbacks+0x130>
    1434:	95 c0       	rjmp	.+298    	; 0x1560 <midi_input_callbacks+0x156>
         device->input_sysex_callback(device, cnt, byte0, byte1, byte2);
         called = true;
      }
   } else {
      switch (cnt) {
    1436:	62 30       	cpi	r22, 0x02	; 2
    1438:	71 05       	cpc	r23, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <midi_input_callbacks+0x34>
    143c:	42 c0       	rjmp	.+132    	; 0x14c2 <midi_input_callbacks+0xb8>
    143e:	63 30       	cpi	r22, 0x03	; 3
    1440:	71 05       	cpc	r23, r1
    1442:	29 f0       	breq	.+10     	; 0x144e <midi_input_callbacks+0x44>
    1444:	61 30       	cpi	r22, 0x01	; 1
    1446:	71 05       	cpc	r23, r1
    1448:	09 f0       	breq	.+2      	; 0x144c <midi_input_callbacks+0x42>
    144a:	73 c0       	rjmp	.+230    	; 0x1532 <midi_input_callbacks+0x128>
    144c:	60 c0       	rjmp	.+192    	; 0x150e <midi_input_callbacks+0x104>
         case 3:
            {
               midi_three_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    144e:	84 2f       	mov	r24, r20
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	80 7f       	andi	r24, 0xF0	; 240
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	80 3a       	cpi	r24, 0xA0	; 160
    1458:	91 05       	cpc	r25, r1
    145a:	e1 f0       	breq	.+56     	; 0x1494 <midi_input_callbacks+0x8a>
    145c:	81 3a       	cpi	r24, 0xA1	; 161
    145e:	91 05       	cpc	r25, r1
    1460:	3c f4       	brge	.+14     	; 0x1470 <midi_input_callbacks+0x66>
    1462:	80 38       	cpi	r24, 0x80	; 128
    1464:	91 05       	cpc	r25, r1
    1466:	99 f0       	breq	.+38     	; 0x148e <midi_input_callbacks+0x84>
    1468:	80 39       	cpi	r24, 0x90	; 144
    146a:	91 05       	cpc	r25, r1
    146c:	f9 f4       	brne	.+62     	; 0x14ac <midi_input_callbacks+0xa2>
    146e:	0c c0       	rjmp	.+24     	; 0x1488 <midi_input_callbacks+0x7e>
    1470:	80 3e       	cpi	r24, 0xE0	; 224
    1472:	91 05       	cpc	r25, r1
    1474:	91 f0       	breq	.+36     	; 0x149a <midi_input_callbacks+0x90>
    1476:	80 3f       	cpi	r24, 0xF0	; 240
    1478:	91 05       	cpc	r25, r1
    147a:	91 f0       	breq	.+36     	; 0x14a0 <midi_input_callbacks+0x96>
    147c:	80 3b       	cpi	r24, 0xB0	; 176
    147e:	91 05       	cpc	r25, r1
    1480:	a9 f4       	brne	.+42     	; 0x14ac <midi_input_callbacks+0xa2>
                  case MIDI_CC:
                     func = device->input_cc_callback;
    1482:	ea 81       	ldd	r30, Y+2	; 0x02
    1484:	fb 81       	ldd	r31, Y+3	; 0x03
                     break;
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEON:
                     func = device->input_noteon_callback;
    1488:	ec 81       	ldd	r30, Y+4	; 0x04
    148a:	fd 81       	ldd	r31, Y+5	; 0x05
                     break;
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <midi_input_callbacks+0xa6>
                  case MIDI_NOTEOFF:
                     func = device->input_noteoff_callback;
    148e:	ee 81       	ldd	r30, Y+6	; 0x06
    1490:	ff 81       	ldd	r31, Y+7	; 0x07
                     break;
    1492:	0e c0       	rjmp	.+28     	; 0x14b0 <midi_input_callbacks+0xa6>
                  case MIDI_AFTERTOUCH:
                     func = device->input_aftertouch_callback;
    1494:	e8 85       	ldd	r30, Y+8	; 0x08
    1496:	f9 85       	ldd	r31, Y+9	; 0x09
                     break;
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <midi_input_callbacks+0xa6>
                  case MIDI_PITCHBEND:
                     func = device->input_pitchbend_callback;
    149a:	ea 85       	ldd	r30, Y+10	; 0x0a
    149c:	fb 85       	ldd	r31, Y+11	; 0x0b
                     break;
    149e:	08 c0       	rjmp	.+16     	; 0x14b0 <midi_input_callbacks+0xa6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGPOSITION)
    14a0:	42 3f       	cpi	r20, 0xF2	; 242
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <midi_input_callbacks+0x9c>
    14a4:	5d c0       	rjmp	.+186    	; 0x1560 <midi_input_callbacks+0x156>
                        func = device->input_songposition_callback;
    14a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    14a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <midi_input_callbacks+0xa6>
      }
   } else {
      switch (cnt) {
         case 3:
            {
               midi_three_byte_func_t func = NULL;
    14ac:	e0 e0       	ldi	r30, 0x00	; 0
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_songposition_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <midi_input_callbacks+0xac>
    14b4:	55 c0       	rjmp	.+170    	; 0x1560 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1, byte2);
    14b6:	ce 01       	movw	r24, r28
    14b8:	61 2f       	mov	r22, r17
    14ba:	4e 2d       	mov	r20, r14
    14bc:	2f 2d       	mov	r18, r15
    14be:	09 95       	icall
    14c0:	42 c0       	rjmp	.+132    	; 0x1546 <midi_input_callbacks+0x13c>
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
               switch (byte0 & 0xF0) {
    14c2:	84 2f       	mov	r24, r20
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	90 70       	andi	r25, 0x00	; 0
    14ca:	80 3d       	cpi	r24, 0xD0	; 208
    14cc:	91 05       	cpc	r25, r1
    14ce:	49 f0       	breq	.+18     	; 0x14e2 <midi_input_callbacks+0xd8>
    14d0:	80 3f       	cpi	r24, 0xF0	; 240
    14d2:	91 05       	cpc	r25, r1
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <midi_input_callbacks+0xde>
    14d6:	80 3c       	cpi	r24, 0xC0	; 192
    14d8:	91 05       	cpc	r25, r1
    14da:	81 f4       	brne	.+32     	; 0x14fc <midi_input_callbacks+0xf2>
                  case MIDI_PROGCHANGE:
                     func = device->input_progchange_callback;
    14dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    14de:	ff 85       	ldd	r31, Y+15	; 0x0f
                     break;
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <midi_input_callbacks+0xf6>
                  case MIDI_CHANPRESSURE:
                     func = device->input_chanpressure_callback;
    14e2:	e8 89       	ldd	r30, Y+16	; 0x10
    14e4:	f9 89       	ldd	r31, Y+17	; 0x11
                     break;
    14e6:	0c c0       	rjmp	.+24     	; 0x1500 <midi_input_callbacks+0xf6>
                  case 0xF0:
                     if (byte0 == MIDI_SONGSELECT)
    14e8:	43 3f       	cpi	r20, 0xF3	; 243
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <midi_input_callbacks+0xe8>
                        func = device->input_songselect_callback;
    14ec:	ea 89       	ldd	r30, Y+18	; 0x12
    14ee:	fb 89       	ldd	r31, Y+19	; 0x13
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <midi_input_callbacks+0xf6>
                     else if (byte0 == MIDI_TC_QUARTERFRAME)
    14f2:	41 3f       	cpi	r20, 0xF1	; 241
    14f4:	a9 f5       	brne	.+106    	; 0x1560 <midi_input_callbacks+0x156>
                        func = device->input_tc_quarterframe_callback;
    14f6:	ec 89       	ldd	r30, Y+20	; 0x14
    14f8:	fd 89       	ldd	r31, Y+21	; 0x15
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <midi_input_callbacks+0xf6>
               }
            }
            break;
         case 2:
            {
               midi_two_byte_func_t func = NULL;
    14fc:	e0 e0       	ldi	r30, 0x00	; 0
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
                        func = device->input_tc_quarterframe_callback;
                     break;
                  default:
                     break;
               }
               if(func) {
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	71 f1       	breq	.+92     	; 0x1560 <midi_input_callbacks+0x156>
                  func(device, byte0, byte1);
    1504:	ce 01       	movw	r24, r28
    1506:	61 2f       	mov	r22, r17
    1508:	4e 2d       	mov	r20, r14
    150a:	09 95       	icall
    150c:	1c c0       	rjmp	.+56     	; 0x1546 <midi_input_callbacks+0x13c>
            }
            break;
         case 1:
            {
               midi_one_byte_func_t func = NULL;
               if (midi_is_realtime(byte0))
    150e:	84 2f       	mov	r24, r20
    1510:	0e 94 fc 07 	call	0xff8	; 0xff8 <midi_is_realtime>
    1514:	88 23       	and	r24, r24
    1516:	19 f0       	breq	.+6      	; 0x151e <midi_input_callbacks+0x114>
                  func = device->input_realtime_callback;
    1518:	ee 89       	ldd	r30, Y+22	; 0x16
    151a:	ff 89       	ldd	r31, Y+23	; 0x17
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <midi_input_callbacks+0x11c>
               else if (byte0 == MIDI_TUNEREQUEST)
    151e:	16 3f       	cpi	r17, 0xF6	; 246
    1520:	f9 f4       	brne	.+62     	; 0x1560 <midi_input_callbacks+0x156>
                  func = device->input_tunerequest_callback;
    1522:	e8 8d       	ldd	r30, Y+24	; 0x18
    1524:	f9 8d       	ldd	r31, Y+25	; 0x19
               if (func) {
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	d9 f0       	breq	.+54     	; 0x1560 <midi_input_callbacks+0x156>
                  func(device, byte0);
    152a:	ce 01       	movw	r24, r28
    152c:	61 2f       	mov	r22, r17
    152e:	09 95       	icall
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <midi_input_callbacks+0x13c>
               }
            }
            break;
         default:
            //just in case
            if (cnt > 3)
    1532:	64 30       	cpi	r22, 0x04	; 4
    1534:	71 05       	cpc	r23, r1
    1536:	90 f4       	brcc	.+36     	; 0x155c <midi_input_callbacks+0x152>
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <midi_input_callbacks+0x156>
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    153a:	ce 01       	movw	r24, r28
    153c:	b6 01       	movw	r22, r12
    153e:	41 2f       	mov	r20, r17
    1540:	2e 2d       	mov	r18, r14
    1542:	0f 2d       	mov	r16, r15
    1544:	09 95       	icall
   //always call the catch all if it exists
   if (device->input_catchall_callback)
    1546:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1548:	ff 8d       	ldd	r31, Y+31	; 0x1f
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	71 f0       	breq	.+28     	; 0x156a <midi_input_callbacks+0x160>
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    154e:	ce 01       	movw	r24, r28
    1550:	b6 01       	movw	r22, r12
    1552:	41 2f       	mov	r20, r17
    1554:	2e 2d       	mov	r18, r14
    1556:	0f 2d       	mov	r16, r15
    1558:	09 95       	icall
    155a:	07 c0       	rjmp	.+14     	; 0x156a <midi_input_callbacks+0x160>
            }
            break;
         default:
            //just in case
            if (cnt > 3)
               cnt = 0;
    155c:	cc 24       	eor	r12, r12
    155e:	dd 24       	eor	r13, r13
      }
   }

   //if there is fallthrough default callback and we haven't called a more specific one, 
   //call the fallthrough
   if (!called && device->input_fallthrough_callback)
    1560:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1562:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1564:	30 97       	sbiw	r30, 0x00	; 0
    1566:	49 f7       	brne	.-46     	; 0x153a <midi_input_callbacks+0x130>
    1568:	ee cf       	rjmp	.-36     	; 0x1546 <midi_input_callbacks+0x13c>
      device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
   //always call the catch all if it exists
   if (device->input_catchall_callback)
      device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	08 95       	ret

0000157c <midi_process_byte>:
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	16 2f       	mov	r17, r22
   if (midi_is_realtime(input)) {
    158c:	86 2f       	mov	r24, r22
    158e:	0e 94 fc 07 	call	0xff8	; 0xff8 <midi_is_realtime>
    1592:	88 23       	and	r24, r24
    1594:	69 f0       	breq	.+26     	; 0x15b0 <midi_process_byte+0x34>
      //call callback, store and restore state
      input_state_t state = device->input_state;
    1596:	ed a0       	ldd	r14, Y+37	; 0x25
      device->input_state = ONE_BYTE_MESSAGE;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	8d a3       	std	Y+37, r24	; 0x25
      midi_input_callbacks(device, 1, input, 0, 0);
    159c:	ce 01       	movw	r24, r28
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	41 2f       	mov	r20, r17
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	00 e0       	ldi	r16, 0x00	; 0
    15a8:	0e 94 05 0a 	call	0x140a	; 0x140a <midi_input_callbacks>
      device->input_state = state;
    15ac:	ed a2       	std	Y+37, r14	; 0x25
    15ae:	7e c0       	rjmp	.+252    	; 0x16ac <midi_process_byte+0x130>
   } else if (midi_is_statusbyte(input)) {
    15b0:	81 2f       	mov	r24, r17
    15b2:	0e 94 f8 07 	call	0xff0	; 0xff0 <midi_is_statusbyte>
    15b6:	4d a1       	ldd	r20, Y+37	; 0x25
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <midi_process_byte+0x42>
    15bc:	42 c0       	rjmp	.+132    	; 0x1642 <midi_process_byte+0xc6>
      //store the byte
      if (device->input_state != SYSEX_MESSAGE) {
    15be:	44 30       	cpi	r20, 0x04	; 4
    15c0:	29 f0       	breq	.+10     	; 0x15cc <midi_process_byte+0x50>
         device->input_buffer[0] = input;
    15c2:	1a a3       	std	Y+34, r17	; 0x22
         device->input_count = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	8e a3       	std	Y+38, r24	; 0x26
    15ca:	9f a3       	std	Y+39, r25	; 0x27
      }
      switch (midi_packet_length(input)) {
    15cc:	81 2f       	mov	r24, r17
    15ce:	0e 94 02 08 	call	0x1004	; 0x1004 <midi_packet_length>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <midi_process_byte+0x68>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	78 f0       	brcs	.+30     	; 0x15f8 <midi_process_byte+0x7c>
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	59 f0       	breq	.+22     	; 0x15f4 <midi_process_byte+0x78>
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	61 f5       	brne	.+88     	; 0x163a <midi_process_byte+0xbe>
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <midi_process_byte+0x78>
         case ONE:
            device->input_state = ONE_BYTE_MESSAGE;;
    15e4:	8d a3       	std	Y+37, r24	; 0x25
            midi_input_callbacks(device, 1, input, 0, 0);
    15e6:	ce 01       	movw	r24, r28
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	41 2f       	mov	r20, r17
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	1f c0       	rjmp	.+62     	; 0x1632 <midi_process_byte+0xb6>
            break;
         case TWO:
            device->input_state = TWO_BYTE_MESSAGE;
            break;
         case THREE:
            device->input_state = THREE_BYTE_MESSAGE;
    15f4:	8d a3       	std	Y+37, r24	; 0x25
            break;
    15f6:	5a c0       	rjmp	.+180    	; 0x16ac <midi_process_byte+0x130>
         case UNDEFINED:
            switch(input) {
    15f8:	10 3f       	cpi	r17, 0xF0	; 240
    15fa:	19 f0       	breq	.+6      	; 0x1602 <midi_process_byte+0x86>
    15fc:	17 3f       	cpi	r17, 0xF7	; 247
    15fe:	e9 f4       	brne	.+58     	; 0x163a <midi_process_byte+0xbe>
    1600:	04 c0       	rjmp	.+8      	; 0x160a <midi_process_byte+0x8e>
               case SYSEX_BEGIN:
                  device->input_state = SYSEX_MESSAGE;
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	8d a3       	std	Y+37, r24	; 0x25
                  device->input_buffer[0] = input;
    1606:	1a a3       	std	Y+34, r17	; 0x22
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <midi_process_byte+0x10c>
                  device->input_count = 1;
                  break;
               case SYSEX_END:
                  //send what is left in the input buffer, set idle
                  device->input_buffer[device->input_count % 3] = input;
    160a:	2e a1       	ldd	r18, Y+38	; 0x26
    160c:	3f a1       	ldd	r19, Y+39	; 0x27
    160e:	c9 01       	movw	r24, r18
    1610:	63 e0       	ldi	r22, 0x03	; 3
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__udivmodhi4>
    1618:	8c 0f       	add	r24, r28
    161a:	9d 1f       	adc	r25, r29
    161c:	fc 01       	movw	r30, r24
    161e:	12 a3       	std	Z+34, r17	; 0x22
                  device->input_count += 1;
    1620:	b9 01       	movw	r22, r18
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	6e a3       	std	Y+38, r22	; 0x26
    1628:	7f a3       	std	Y+39, r23	; 0x27
                  //call the callback
                  midi_input_callbacks(device, device->input_count, 
    162a:	ce 01       	movw	r24, r28
    162c:	4a a1       	ldd	r20, Y+34	; 0x22
    162e:	2b a1       	ldd	r18, Y+35	; 0x23
    1630:	0c a1       	ldd	r16, Y+36	; 0x24
    1632:	0e 94 05 0a 	call	0x140a	; 0x140a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
                  device->input_state = IDLE;
    1636:	1d a2       	std	Y+37, r1	; 0x25
                  break;
    1638:	39 c0       	rjmp	.+114    	; 0x16ac <midi_process_byte+0x130>
                  device->input_count = 0;
            }

            break;
         default:
            device->input_state = IDLE;
    163a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    163c:	1e a2       	std	Y+38, r1	; 0x26
    163e:	1f a2       	std	Y+39, r1	; 0x27
            break;
    1640:	35 c0       	rjmp	.+106    	; 0x16ac <midi_process_byte+0x130>
      }
   } else {
      if (device->input_state != IDLE) {
    1642:	44 23       	and	r20, r20
    1644:	99 f1       	breq	.+102    	; 0x16ac <midi_process_byte+0x130>
         //store the byte
         device->input_buffer[device->input_count % 3] = input;
    1646:	2e a1       	ldd	r18, Y+38	; 0x26
    1648:	3f a1       	ldd	r19, Y+39	; 0x27
    164a:	c9 01       	movw	r24, r18
    164c:	63 e0       	ldi	r22, 0x03	; 3
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__udivmodhi4>
    1654:	7c 01       	movw	r14, r24
    1656:	fe 01       	movw	r30, r28
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	12 a3       	std	Z+34, r17	; 0x22
         //increment count
         uint16_t prev = device->input_count;
         device->input_count += 1;
    165e:	b9 01       	movw	r22, r18
    1660:	6f 5f       	subi	r22, 0xFF	; 255
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	6e a3       	std	Y+38, r22	; 0x26
    1666:	7f a3       	std	Y+39, r23	; 0x27

         switch(prev % 3) {
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	91 f0       	breq	.+36     	; 0x1692 <midi_process_byte+0x116>
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	e8 16       	cp	r14, r24
    1672:	f1 04       	cpc	r15, r1
    1674:	d9 f4       	brne	.+54     	; 0x16ac <midi_process_byte+0x130>
            case 2:
               //call callback
               midi_input_callbacks(device, device->input_count,
    1676:	ce 01       	movw	r24, r28
    1678:	4a a1       	ldd	r20, Y+34	; 0x22
    167a:	2b a1       	ldd	r18, Y+35	; 0x23
    167c:	0c a1       	ldd	r16, Y+36	; 0x24
    167e:	0e 94 05 0a 	call	0x140a	; 0x140a <midi_input_callbacks>
                     device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
               if (device->input_state != SYSEX_MESSAGE) {
    1682:	8d a1       	ldd	r24, Y+37	; 0x25
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	91 f0       	breq	.+36     	; 0x16ac <midi_process_byte+0x130>
                  //set to 1, keeping status byte, allowing for running status
                  device->input_count = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	8e a3       	std	Y+38, r24	; 0x26
    168e:	9f a3       	std	Y+39, r25	; 0x27
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <midi_process_byte+0x130>
               }
               break;
            case 1:
               if (device->input_state == TWO_BYTE_MESSAGE) {
    1692:	42 30       	cpi	r20, 0x02	; 2
    1694:	59 f4       	brne	.+22     	; 0x16ac <midi_process_byte+0x130>
                  //call callback
                  midi_input_callbacks(device, device->input_count,
    1696:	ce 01       	movw	r24, r28
    1698:	4a a1       	ldd	r20, Y+34	; 0x22
    169a:	2b a1       	ldd	r18, Y+35	; 0x23
    169c:	00 e0       	ldi	r16, 0x00	; 0
    169e:	0e 94 05 0a 	call	0x140a	; 0x140a <midi_input_callbacks>
                        device->input_buffer[0], device->input_buffer[1], 0);
                  if (device->input_state != SYSEX_MESSAGE) {
    16a2:	8d a1       	ldd	r24, Y+37	; 0x25
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	11 f0       	breq	.+4      	; 0x16ac <midi_process_byte+0x130>
                     //set to 1, keeping status byte, allowing for running status
                     device->input_count = 1;
    16a8:	ee a2       	std	Y+38, r14	; 0x26
    16aa:	ff a2       	std	Y+39, r15	; 0x27
               //one byte messages are dealt with directly
               break;
         }
      }
   }
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	08 95       	ret

000016ba <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
   device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <midi_device_process+0xe>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8c 01       	movw	r16, r24
   //call the pre_input_process_callback if there is one
   if(device->pre_input_process_callback)
    16d0:	dc 01       	movw	r26, r24
    16d2:	90 96       	adiw	r26, 0x20	; 32
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	91 97       	sbiw	r26, 0x21	; 33
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <midi_device_process+0x26>
      device->pre_input_process_callback(device);
    16de:	09 95       	icall

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    16e0:	88 ee       	ldi	r24, 0xE8	; 232
    16e2:	e8 2e       	mov	r14, r24
    16e4:	f1 2c       	mov	r15, r1
    16e6:	e0 0e       	add	r14, r16
    16e8:	f1 1e       	adc	r15, r17
    16ea:	c7 01       	movw	r24, r14
    16ec:	0e 94 ac 07 	call	0xf58	; 0xf58 <bytequeue_length>
    16f0:	89 83       	std	Y+1, r24	; 0x01
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    16f2:	1a 82       	std	Y+2, r1	; 0x02
    16f4:	1b 82       	std	Y+3, r1	; 0x03
    16f6:	11 c0       	rjmp	.+34     	; 0x171a <midi_device_process+0x60>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
    16f8:	c7 01       	movw	r24, r14
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	0e 94 c2 07 	call	0xf84	; 0xf84 <bytequeue_get>
    1700:	68 2f       	mov	r22, r24
      midi_process_byte(device, val);
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 be 0a 	call	0x157c	; 0x157c <midi_process_byte>
      bytequeue_remove(&device->input_queue, 1);
    1708:	c7 01       	movw	r24, r14
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <bytequeue_remove>

   //pull stuff off the queue and process
   volatile byteQueueIndex_t len = bytequeue_length(&device->input_queue);
   volatile uint16_t i;
   //TODO limit number of bytes processed?
   for(i = 0; i < len; i++) {
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	9b 83       	std	Y+3, r25	; 0x03
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	28 17       	cp	r18, r24
    1724:	39 07       	cpc	r19, r25
    1726:	40 f3       	brcs	.-48     	; 0x16f8 <midi_device_process+0x3e>
      uint8_t val = bytequeue_get(&device->input_queue, 0);
      midi_process_byte(device, val);
      bytequeue_remove(&device->input_queue, 1);
   }
}
    1728:	23 96       	adiw	r28, 0x03	; 3
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	08 95       	ret

0000173c <__fixunssfsi>:
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	7b 01       	movw	r14, r22
    1746:	8c 01       	movw	r16, r24
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	5f e4       	ldi	r21, 0x4F	; 79
    1750:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__gesf2>
    1754:	87 fd       	sbrc	r24, 7
    1756:	11 c0       	rjmp	.+34     	; 0x177a <__fixunssfsi+0x3e>
    1758:	c8 01       	movw	r24, r16
    175a:	b7 01       	movw	r22, r14
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	5f e4       	ldi	r21, 0x4F	; 79
    1764:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__subsf3>
    1768:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__fixsfsi>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	20 50       	subi	r18, 0x00	; 0
    1772:	30 40       	sbci	r19, 0x00	; 0
    1774:	40 40       	sbci	r20, 0x00	; 0
    1776:	50 48       	sbci	r21, 0x80	; 128
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <__fixunssfsi+0x4a>
    177a:	c8 01       	movw	r24, r16
    177c:	b7 01       	movw	r22, r14
    177e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__fixsfsi>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	b9 01       	movw	r22, r18
    1788:	ca 01       	movw	r24, r20
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	08 95       	ret

00001794 <_fpadd_parts>:
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__+0x8>
    17a0:	fc 01       	movw	r30, r24
    17a2:	ea 01       	movw	r28, r20
    17a4:	80 81       	ld	r24, Z
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <_fpadd_parts+0x18>
    17aa:	38 c1       	rjmp	.+624    	; 0x1a1c <_fpadd_parts+0x288>
    17ac:	db 01       	movw	r26, r22
    17ae:	9c 91       	ld	r25, X
    17b0:	92 30       	cpi	r25, 0x02	; 2
    17b2:	08 f4       	brcc	.+2      	; 0x17b6 <_fpadd_parts+0x22>
    17b4:	30 c1       	rjmp	.+608    	; 0x1a16 <_fpadd_parts+0x282>
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	59 f4       	brne	.+22     	; 0x17d0 <_fpadd_parts+0x3c>
    17ba:	94 30       	cpi	r25, 0x04	; 4
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <_fpadd_parts+0x2c>
    17be:	2e c1       	rjmp	.+604    	; 0x1a1c <_fpadd_parts+0x288>
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	8c 91       	ld	r24, X
    17c6:	11 97       	sbiw	r26, 0x01	; 1
    17c8:	98 17       	cp	r25, r24
    17ca:	09 f0       	breq	.+2      	; 0x17ce <_fpadd_parts+0x3a>
    17cc:	21 c1       	rjmp	.+578    	; 0x1a10 <_fpadd_parts+0x27c>
    17ce:	26 c1       	rjmp	.+588    	; 0x1a1c <_fpadd_parts+0x288>
    17d0:	94 30       	cpi	r25, 0x04	; 4
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <_fpadd_parts+0x42>
    17d4:	20 c1       	rjmp	.+576    	; 0x1a16 <_fpadd_parts+0x282>
    17d6:	92 30       	cpi	r25, 0x02	; 2
    17d8:	b1 f4       	brne	.+44     	; 0x1806 <_fpadd_parts+0x72>
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <_fpadd_parts+0x4c>
    17de:	1e c1       	rjmp	.+572    	; 0x1a1c <_fpadd_parts+0x288>
    17e0:	ca 01       	movw	r24, r20
    17e2:	af 01       	movw	r20, r30
    17e4:	28 e0       	ldi	r18, 0x08	; 8
    17e6:	da 01       	movw	r26, r20
    17e8:	0d 90       	ld	r0, X+
    17ea:	ad 01       	movw	r20, r26
    17ec:	dc 01       	movw	r26, r24
    17ee:	0d 92       	st	X+, r0
    17f0:	cd 01       	movw	r24, r26
    17f2:	21 50       	subi	r18, 0x01	; 1
    17f4:	c1 f7       	brne	.-16     	; 0x17e6 <_fpadd_parts+0x52>
    17f6:	db 01       	movw	r26, r22
    17f8:	11 96       	adiw	r26, 0x01	; 1
    17fa:	8c 91       	ld	r24, X
    17fc:	11 97       	sbiw	r26, 0x01	; 1
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	89 23       	and	r24, r25
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	0a c1       	rjmp	.+532    	; 0x1a1a <_fpadd_parts+0x286>
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	09 f4       	brne	.+2      	; 0x180c <_fpadd_parts+0x78>
    180a:	05 c1       	rjmp	.+522    	; 0x1a16 <_fpadd_parts+0x282>
    180c:	c2 80       	ldd	r12, Z+2	; 0x02
    180e:	d3 80       	ldd	r13, Z+3	; 0x03
    1810:	db 01       	movw	r26, r22
    1812:	12 96       	adiw	r26, 0x02	; 2
    1814:	6d 90       	ld	r6, X+
    1816:	7c 90       	ld	r7, X
    1818:	13 97       	sbiw	r26, 0x03	; 3
    181a:	24 81       	ldd	r18, Z+4	; 0x04
    181c:	35 81       	ldd	r19, Z+5	; 0x05
    181e:	46 81       	ldd	r20, Z+6	; 0x06
    1820:	57 81       	ldd	r21, Z+7	; 0x07
    1822:	14 96       	adiw	r26, 0x04	; 4
    1824:	ed 90       	ld	r14, X+
    1826:	fd 90       	ld	r15, X+
    1828:	0d 91       	ld	r16, X+
    182a:	1c 91       	ld	r17, X
    182c:	17 97       	sbiw	r26, 0x07	; 7
    182e:	c6 01       	movw	r24, r12
    1830:	86 19       	sub	r24, r6
    1832:	97 09       	sbc	r25, r7
    1834:	5c 01       	movw	r10, r24
    1836:	97 ff       	sbrs	r25, 7
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <_fpadd_parts+0xae>
    183a:	aa 24       	eor	r10, r10
    183c:	bb 24       	eor	r11, r11
    183e:	a8 1a       	sub	r10, r24
    1840:	b9 0a       	sbc	r11, r25
    1842:	b0 e2       	ldi	r27, 0x20	; 32
    1844:	ab 16       	cp	r10, r27
    1846:	b1 04       	cpc	r11, r1
    1848:	0c f0       	brlt	.+2      	; 0x184c <_fpadd_parts+0xb8>
    184a:	61 c0       	rjmp	.+194    	; 0x190e <_fpadd_parts+0x17a>
    184c:	18 16       	cp	r1, r24
    184e:	19 06       	cpc	r1, r25
    1850:	6c f5       	brge	.+90     	; 0x18ac <_fpadd_parts+0x118>
    1852:	37 01       	movw	r6, r14
    1854:	48 01       	movw	r8, r16
    1856:	0a 2c       	mov	r0, r10
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <_fpadd_parts+0xce>
    185a:	96 94       	lsr	r9
    185c:	87 94       	ror	r8
    185e:	77 94       	ror	r7
    1860:	67 94       	ror	r6
    1862:	0a 94       	dec	r0
    1864:	d2 f7       	brpl	.-12     	; 0x185a <_fpadd_parts+0xc6>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e0       	ldi	r26, 0x00	; 0
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	0a 2c       	mov	r0, r10
    1870:	04 c0       	rjmp	.+8      	; 0x187a <_fpadd_parts+0xe6>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	aa 1f       	adc	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	0a 94       	dec	r0
    187c:	d2 f7       	brpl	.-12     	; 0x1872 <_fpadd_parts+0xde>
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	a1 09       	sbc	r26, r1
    1882:	b1 09       	sbc	r27, r1
    1884:	8e 21       	and	r24, r14
    1886:	9f 21       	and	r25, r15
    1888:	a0 23       	and	r26, r16
    188a:	b1 23       	and	r27, r17
    188c:	ee 24       	eor	r14, r14
    188e:	ff 24       	eor	r15, r15
    1890:	87 01       	movw	r16, r14
    1892:	e3 94       	inc	r14
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	a1 05       	cpc	r26, r1
    1898:	b1 05       	cpc	r27, r1
    189a:	19 f4       	brne	.+6      	; 0x18a2 <_fpadd_parts+0x10e>
    189c:	ee 24       	eor	r14, r14
    189e:	ff 24       	eor	r15, r15
    18a0:	87 01       	movw	r16, r14
    18a2:	e6 28       	or	r14, r6
    18a4:	f7 28       	or	r15, r7
    18a6:	08 29       	or	r16, r8
    18a8:	19 29       	or	r17, r9
    18aa:	3c c0       	rjmp	.+120    	; 0x1924 <_fpadd_parts+0x190>
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	d1 f1       	breq	.+116    	; 0x1924 <_fpadd_parts+0x190>
    18b0:	ca 0c       	add	r12, r10
    18b2:	db 1c       	adc	r13, r11
    18b4:	39 01       	movw	r6, r18
    18b6:	4a 01       	movw	r8, r20
    18b8:	0a 2c       	mov	r0, r10
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <_fpadd_parts+0x130>
    18bc:	96 94       	lsr	r9
    18be:	87 94       	ror	r8
    18c0:	77 94       	ror	r7
    18c2:	67 94       	ror	r6
    18c4:	0a 94       	dec	r0
    18c6:	d2 f7       	brpl	.-12     	; 0x18bc <_fpadd_parts+0x128>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	0a 2c       	mov	r0, r10
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <_fpadd_parts+0x148>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	aa 1f       	adc	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	0a 94       	dec	r0
    18de:	d2 f7       	brpl	.-12     	; 0x18d4 <_fpadd_parts+0x140>
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	a1 09       	sbc	r26, r1
    18e4:	b1 09       	sbc	r27, r1
    18e6:	82 23       	and	r24, r18
    18e8:	93 23       	and	r25, r19
    18ea:	a4 23       	and	r26, r20
    18ec:	b5 23       	and	r27, r21
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	a1 05       	cpc	r26, r1
    18fa:	b1 05       	cpc	r27, r1
    18fc:	19 f4       	brne	.+6      	; 0x1904 <_fpadd_parts+0x170>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	26 29       	or	r18, r6
    1906:	37 29       	or	r19, r7
    1908:	48 29       	or	r20, r8
    190a:	59 29       	or	r21, r9
    190c:	0b c0       	rjmp	.+22     	; 0x1924 <_fpadd_parts+0x190>
    190e:	6c 14       	cp	r6, r12
    1910:	7d 04       	cpc	r7, r13
    1912:	24 f4       	brge	.+8      	; 0x191c <_fpadd_parts+0x188>
    1914:	ee 24       	eor	r14, r14
    1916:	ff 24       	eor	r15, r15
    1918:	87 01       	movw	r16, r14
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <_fpadd_parts+0x190>
    191c:	63 01       	movw	r12, r6
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	81 81       	ldd	r24, Z+1	; 0x01
    1926:	fb 01       	movw	r30, r22
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	89 17       	cp	r24, r25
    192c:	09 f4       	brne	.+2      	; 0x1930 <_fpadd_parts+0x19c>
    192e:	45 c0       	rjmp	.+138    	; 0x19ba <_fpadd_parts+0x226>
    1930:	88 23       	and	r24, r24
    1932:	49 f0       	breq	.+18     	; 0x1946 <_fpadd_parts+0x1b2>
    1934:	d8 01       	movw	r26, r16
    1936:	c7 01       	movw	r24, r14
    1938:	82 1b       	sub	r24, r18
    193a:	93 0b       	sbc	r25, r19
    193c:	a4 0b       	sbc	r26, r20
    193e:	b5 0b       	sbc	r27, r21
    1940:	9c 01       	movw	r18, r24
    1942:	ad 01       	movw	r20, r26
    1944:	04 c0       	rjmp	.+8      	; 0x194e <_fpadd_parts+0x1ba>
    1946:	2e 19       	sub	r18, r14
    1948:	3f 09       	sbc	r19, r15
    194a:	40 0b       	sbc	r20, r16
    194c:	51 0b       	sbc	r21, r17
    194e:	57 fd       	sbrc	r21, 7
    1950:	04 c0       	rjmp	.+8      	; 0x195a <_fpadd_parts+0x1c6>
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	ca 82       	std	Y+2, r12	; 0x02
    1956:	db 82       	std	Y+3, r13	; 0x03
    1958:	0b c0       	rjmp	.+22     	; 0x1970 <_fpadd_parts+0x1dc>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	ca 82       	std	Y+2, r12	; 0x02
    1960:	db 82       	std	Y+3, r13	; 0x03
    1962:	50 95       	com	r21
    1964:	40 95       	com	r20
    1966:	30 95       	com	r19
    1968:	21 95       	neg	r18
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	4f 4f       	sbci	r20, 0xFF	; 255
    196e:	5f 4f       	sbci	r21, 0xFF	; 255
    1970:	2c 83       	std	Y+4, r18	; 0x04
    1972:	3d 83       	std	Y+5, r19	; 0x05
    1974:	4e 83       	std	Y+6, r20	; 0x06
    1976:	5f 83       	std	Y+7, r21	; 0x07
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <_fpadd_parts+0x200>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	8c 83       	std	Y+4, r24	; 0x04
    1984:	9d 83       	std	Y+5, r25	; 0x05
    1986:	ae 83       	std	Y+6, r26	; 0x06
    1988:	bf 83       	std	Y+7, r27	; 0x07
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	8a 83       	std	Y+2, r24	; 0x02
    1992:	9b 83       	std	Y+3, r25	; 0x03
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	ae 81       	ldd	r26, Y+6	; 0x06
    199a:	bf 81       	ldd	r27, Y+7	; 0x07
    199c:	9c 01       	movw	r18, r24
    199e:	ad 01       	movw	r20, r26
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	30 40       	sbci	r19, 0x00	; 0
    19a4:	40 40       	sbci	r20, 0x00	; 0
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	2f 3f       	cpi	r18, 0xFF	; 255
    19aa:	ef ef       	ldi	r30, 0xFF	; 255
    19ac:	3e 07       	cpc	r19, r30
    19ae:	ef ef       	ldi	r30, 0xFF	; 255
    19b0:	4e 07       	cpc	r20, r30
    19b2:	ef e3       	ldi	r30, 0x3F	; 63
    19b4:	5e 07       	cpc	r21, r30
    19b6:	08 f3       	brcs	.-62     	; 0x197a <_fpadd_parts+0x1e6>
    19b8:	0b c0       	rjmp	.+22     	; 0x19d0 <_fpadd_parts+0x23c>
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	ca 82       	std	Y+2, r12	; 0x02
    19be:	db 82       	std	Y+3, r13	; 0x03
    19c0:	2e 0d       	add	r18, r14
    19c2:	3f 1d       	adc	r19, r15
    19c4:	40 1f       	adc	r20, r16
    19c6:	51 1f       	adc	r21, r17
    19c8:	2c 83       	std	Y+4, r18	; 0x04
    19ca:	3d 83       	std	Y+5, r19	; 0x05
    19cc:	4e 83       	std	Y+6, r20	; 0x06
    19ce:	5f 83       	std	Y+7, r21	; 0x07
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	88 83       	st	Y, r24
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	4e 81       	ldd	r20, Y+6	; 0x06
    19da:	5f 81       	ldd	r21, Y+7	; 0x07
    19dc:	57 ff       	sbrs	r21, 7
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <_fpadd_parts+0x286>
    19e0:	da 01       	movw	r26, r20
    19e2:	c9 01       	movw	r24, r18
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	90 70       	andi	r25, 0x00	; 0
    19e8:	a0 70       	andi	r26, 0x00	; 0
    19ea:	b0 70       	andi	r27, 0x00	; 0
    19ec:	56 95       	lsr	r21
    19ee:	47 95       	ror	r20
    19f0:	37 95       	ror	r19
    19f2:	27 95       	ror	r18
    19f4:	82 2b       	or	r24, r18
    19f6:	93 2b       	or	r25, r19
    19f8:	a4 2b       	or	r26, r20
    19fa:	b5 2b       	or	r27, r21
    19fc:	8c 83       	std	Y+4, r24	; 0x04
    19fe:	9d 83       	std	Y+5, r25	; 0x05
    1a00:	ae 83       	std	Y+6, r26	; 0x06
    1a02:	bf 83       	std	Y+7, r27	; 0x07
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	9b 83       	std	Y+3, r25	; 0x03
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <_fpadd_parts+0x286>
    1a10:	ef e4       	ldi	r30, 0x4F	; 79
    1a12:	f0 e2       	ldi	r31, 0x20	; 32
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <_fpadd_parts+0x288>
    1a16:	fb 01       	movw	r30, r22
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <_fpadd_parts+0x288>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	cf 01       	movw	r24, r30
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	ee e0       	ldi	r30, 0x0E	; 14
    1a24:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x8>

00001a28 <__addsf3>:
    1a28:	a0 e2       	ldi	r26, 0x20	; 32
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ea e1       	ldi	r30, 0x1A	; 26
    1a2e:	fd e0       	ldi	r31, 0x0D	; 13
    1a30:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x18>
    1a34:	69 83       	std	Y+1, r22	; 0x01
    1a36:	7a 83       	std	Y+2, r23	; 0x02
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	2d 83       	std	Y+5, r18	; 0x05
    1a3e:	3e 83       	std	Y+6, r19	; 0x06
    1a40:	4f 83       	std	Y+7, r20	; 0x07
    1a42:	58 87       	std	Y+8, r21	; 0x08
    1a44:	89 e0       	ldi	r24, 0x09	; 9
    1a46:	e8 2e       	mov	r14, r24
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	ec 0e       	add	r14, r28
    1a4c:	fd 1e       	adc	r15, r29
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	b7 01       	movw	r22, r14
    1a54:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1a58:	8e 01       	movw	r16, r28
    1a5a:	0f 5e       	subi	r16, 0xEF	; 239
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	ce 01       	movw	r24, r28
    1a60:	05 96       	adiw	r24, 0x05	; 5
    1a62:	b8 01       	movw	r22, r16
    1a64:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1a68:	c7 01       	movw	r24, r14
    1a6a:	b8 01       	movw	r22, r16
    1a6c:	ae 01       	movw	r20, r28
    1a6e:	47 5e       	subi	r20, 0xE7	; 231
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_fpadd_parts>
    1a76:	0e 94 ce 10 	call	0x219c	; 0x219c <__pack_f>
    1a7a:	a0 96       	adiw	r28, 0x20	; 32
    1a7c:	e6 e0       	ldi	r30, 0x06	; 6
    1a7e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00001a82 <__subsf3>:
    1a82:	a0 e2       	ldi	r26, 0x20	; 32
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e7 e4       	ldi	r30, 0x47	; 71
    1a88:	fd e0       	ldi	r31, 0x0D	; 13
    1a8a:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x18>
    1a8e:	69 83       	std	Y+1, r22	; 0x01
    1a90:	7a 83       	std	Y+2, r23	; 0x02
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	2d 83       	std	Y+5, r18	; 0x05
    1a98:	3e 83       	std	Y+6, r19	; 0x06
    1a9a:	4f 83       	std	Y+7, r20	; 0x07
    1a9c:	58 87       	std	Y+8, r21	; 0x08
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	07 5f       	subi	r16, 0xF7	; 247
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1aae:	91 e1       	ldi	r25, 0x11	; 17
    1ab0:	e9 2e       	mov	r14, r25
    1ab2:	f1 2c       	mov	r15, r1
    1ab4:	ec 0e       	add	r14, r28
    1ab6:	fd 1e       	adc	r15, r29
    1ab8:	ce 01       	movw	r24, r28
    1aba:	05 96       	adiw	r24, 0x05	; 5
    1abc:	b7 01       	movw	r22, r14
    1abe:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	89 27       	eor	r24, r25
    1ac8:	8a 8b       	std	Y+18, r24	; 0x12
    1aca:	c8 01       	movw	r24, r16
    1acc:	b7 01       	movw	r22, r14
    1ace:	ae 01       	movw	r20, r28
    1ad0:	47 5e       	subi	r20, 0xE7	; 231
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_fpadd_parts>
    1ad8:	0e 94 ce 10 	call	0x219c	; 0x219c <__pack_f>
    1adc:	a0 96       	adiw	r28, 0x20	; 32
    1ade:	e6 e0       	ldi	r30, 0x06	; 6
    1ae0:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00001ae4 <__mulsf3>:
    1ae4:	a0 e2       	ldi	r26, 0x20	; 32
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e7       	ldi	r30, 0x78	; 120
    1aea:	fd e0       	ldi	r31, 0x0D	; 13
    1aec:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__prologue_saves__>
    1af0:	69 83       	std	Y+1, r22	; 0x01
    1af2:	7a 83       	std	Y+2, r23	; 0x02
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	2d 83       	std	Y+5, r18	; 0x05
    1afa:	3e 83       	std	Y+6, r19	; 0x06
    1afc:	4f 83       	std	Y+7, r20	; 0x07
    1afe:	58 87       	std	Y+8, r21	; 0x08
    1b00:	ce 01       	movw	r24, r28
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	be 01       	movw	r22, r28
    1b06:	67 5f       	subi	r22, 0xF7	; 247
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	05 96       	adiw	r24, 0x05	; 5
    1b12:	be 01       	movw	r22, r28
    1b14:	6f 5e       	subi	r22, 0xEF	; 239
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1b1c:	99 85       	ldd	r25, Y+9	; 0x09
    1b1e:	92 30       	cpi	r25, 0x02	; 2
    1b20:	78 f0       	brcs	.+30     	; 0x1b40 <__mulsf3+0x5c>
    1b22:	89 89       	ldd	r24, Y+17	; 0x11
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	c0 f0       	brcs	.+48     	; 0x1b58 <__mulsf3+0x74>
    1b28:	94 30       	cpi	r25, 0x04	; 4
    1b2a:	19 f4       	brne	.+6      	; 0x1b32 <__mulsf3+0x4e>
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	41 f4       	brne	.+16     	; 0x1b40 <__mulsf3+0x5c>
    1b30:	cb c0       	rjmp	.+406    	; 0x1cc8 <__mulsf3+0x1e4>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <__mulsf3+0x58>
    1b36:	92 30       	cpi	r25, 0x02	; 2
    1b38:	79 f4       	brne	.+30     	; 0x1b58 <__mulsf3+0x74>
    1b3a:	c6 c0       	rjmp	.+396    	; 0x1cc8 <__mulsf3+0x1e4>
    1b3c:	92 30       	cpi	r25, 0x02	; 2
    1b3e:	51 f4       	brne	.+20     	; 0x1b54 <__mulsf3+0x70>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b44:	9a 89       	ldd	r25, Y+18	; 0x12
    1b46:	29 17       	cp	r18, r25
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__mulsf3+0x68>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	8a 87       	std	Y+10, r24	; 0x0a
    1b4e:	ce 01       	movw	r24, r28
    1b50:	09 96       	adiw	r24, 0x09	; 9
    1b52:	bc c0       	rjmp	.+376    	; 0x1ccc <__mulsf3+0x1e8>
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	51 f4       	brne	.+20     	; 0x1b6c <__mulsf3+0x88>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5e:	29 17       	cp	r18, r25
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <__mulsf3+0x80>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	8a 8b       	std	Y+18, r24	; 0x12
    1b66:	ce 01       	movw	r24, r28
    1b68:	41 96       	adiw	r24, 0x11	; 17
    1b6a:	b0 c0       	rjmp	.+352    	; 0x1ccc <__mulsf3+0x1e8>
    1b6c:	6d 84       	ldd	r6, Y+13	; 0x0d
    1b6e:	7e 84       	ldd	r7, Y+14	; 0x0e
    1b70:	8f 84       	ldd	r8, Y+15	; 0x0f
    1b72:	98 88       	ldd	r9, Y+16	; 0x10
    1b74:	ed 88       	ldd	r14, Y+21	; 0x15
    1b76:	fe 88       	ldd	r15, Y+22	; 0x16
    1b78:	0f 89       	ldd	r16, Y+23	; 0x17
    1b7a:	18 8d       	ldd	r17, Y+24	; 0x18
    1b7c:	e0 e2       	ldi	r30, 0x20	; 32
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	dc 01       	movw	r26, r24
    1b86:	aa 24       	eor	r10, r10
    1b88:	bb 24       	eor	r11, r11
    1b8a:	65 01       	movw	r12, r10
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	b3 01       	movw	r22, r6
    1b94:	61 70       	andi	r22, 0x01	; 1
    1b96:	70 70       	andi	r23, 0x00	; 0
    1b98:	61 15       	cp	r22, r1
    1b9a:	71 05       	cpc	r23, r1
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <__mulsf3+0xee>
    1b9e:	2e 0d       	add	r18, r14
    1ba0:	3f 1d       	adc	r19, r15
    1ba2:	40 1f       	adc	r20, r16
    1ba4:	51 1f       	adc	r21, r17
    1ba6:	15 01       	movw	r2, r10
    1ba8:	26 01       	movw	r4, r12
    1baa:	28 0e       	add	r2, r24
    1bac:	39 1e       	adc	r3, r25
    1bae:	4a 1e       	adc	r4, r26
    1bb0:	5b 1e       	adc	r5, r27
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	2e 15       	cp	r18, r14
    1bbc:	3f 05       	cpc	r19, r15
    1bbe:	40 07       	cpc	r20, r16
    1bc0:	51 07       	cpc	r21, r17
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <__mulsf3+0xe6>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	dc 01       	movw	r26, r24
    1bca:	82 0d       	add	r24, r2
    1bcc:	93 1d       	adc	r25, r3
    1bce:	a4 1d       	adc	r26, r4
    1bd0:	b5 1d       	adc	r27, r5
    1bd2:	aa 0c       	add	r10, r10
    1bd4:	bb 1c       	adc	r11, r11
    1bd6:	cc 1c       	adc	r12, r12
    1bd8:	dd 1c       	adc	r13, r13
    1bda:	17 ff       	sbrs	r17, 7
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <__mulsf3+0x10c>
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	26 2e       	mov	r2, r22
    1be2:	31 2c       	mov	r3, r1
    1be4:	41 2c       	mov	r4, r1
    1be6:	51 2c       	mov	r5, r1
    1be8:	a2 28       	or	r10, r2
    1bea:	b3 28       	or	r11, r3
    1bec:	c4 28       	or	r12, r4
    1bee:	d5 28       	or	r13, r5
    1bf0:	31 97       	sbiw	r30, 0x01	; 1
    1bf2:	49 f0       	breq	.+18     	; 0x1c06 <__mulsf3+0x122>
    1bf4:	ee 0c       	add	r14, r14
    1bf6:	ff 1c       	adc	r15, r15
    1bf8:	00 1f       	adc	r16, r16
    1bfa:	11 1f       	adc	r17, r17
    1bfc:	96 94       	lsr	r9
    1bfe:	87 94       	ror	r8
    1c00:	77 94       	ror	r7
    1c02:	67 94       	ror	r6
    1c04:	c6 cf       	rjmp	.-116    	; 0x1b92 <__mulsf3+0xae>
    1c06:	6b 89       	ldd	r22, Y+19	; 0x13
    1c08:	7c 89       	ldd	r23, Y+20	; 0x14
    1c0a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c0c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c0e:	6e 0f       	add	r22, r30
    1c10:	7f 1f       	adc	r23, r31
    1c12:	6e 5f       	subi	r22, 0xFE	; 254
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	6b 8f       	std	Y+27, r22	; 0x1b
    1c18:	7c 8f       	std	Y+28, r23	; 0x1c
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c1e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c20:	e7 17       	cp	r30, r23
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <__mulsf3+0x142>
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	6a 8f       	std	Y+26, r22	; 0x1a
    1c28:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1c2a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1c2c:	10 c0       	rjmp	.+32     	; 0x1c4e <__mulsf3+0x16a>
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e1 70       	andi	r30, 0x01	; 1
    1c32:	f0 70       	andi	r31, 0x00	; 0
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <__mulsf3+0x15e>
    1c38:	56 95       	lsr	r21
    1c3a:	47 95       	ror	r20
    1c3c:	37 95       	ror	r19
    1c3e:	27 95       	ror	r18
    1c40:	50 68       	ori	r21, 0x80	; 128
    1c42:	b6 95       	lsr	r27
    1c44:	a7 95       	ror	r26
    1c46:	97 95       	ror	r25
    1c48:	87 95       	ror	r24
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	b7 fd       	sbrc	r27, 7
    1c50:	ee cf       	rjmp	.-36     	; 0x1c2e <__mulsf3+0x14a>
    1c52:	0c c0       	rjmp	.+24     	; 0x1c6c <__mulsf3+0x188>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	aa 1f       	adc	r26, r26
    1c5a:	bb 1f       	adc	r27, r27
    1c5c:	57 fd       	sbrc	r21, 7
    1c5e:	81 60       	ori	r24, 0x01	; 1
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	44 1f       	adc	r20, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	61 50       	subi	r22, 0x01	; 1
    1c6a:	70 40       	sbci	r23, 0x00	; 0
    1c6c:	80 30       	cpi	r24, 0x00	; 0
    1c6e:	e0 e0       	ldi	r30, 0x00	; 0
    1c70:	9e 07       	cpc	r25, r30
    1c72:	e0 e0       	ldi	r30, 0x00	; 0
    1c74:	ae 07       	cpc	r26, r30
    1c76:	e0 e4       	ldi	r30, 0x40	; 64
    1c78:	be 07       	cpc	r27, r30
    1c7a:	60 f3       	brcs	.-40     	; 0x1c54 <__mulsf3+0x170>
    1c7c:	6b 8f       	std	Y+27, r22	; 0x1b
    1c7e:	7c 8f       	std	Y+28, r23	; 0x1c
    1c80:	6f e7       	ldi	r22, 0x7F	; 127
    1c82:	e6 2e       	mov	r14, r22
    1c84:	f1 2c       	mov	r15, r1
    1c86:	01 2d       	mov	r16, r1
    1c88:	11 2d       	mov	r17, r1
    1c8a:	e8 22       	and	r14, r24
    1c8c:	f9 22       	and	r15, r25
    1c8e:	0a 23       	and	r16, r26
    1c90:	1b 23       	and	r17, r27
    1c92:	60 e4       	ldi	r22, 0x40	; 64
    1c94:	e6 16       	cp	r14, r22
    1c96:	f1 04       	cpc	r15, r1
    1c98:	01 05       	cpc	r16, r1
    1c9a:	11 05       	cpc	r17, r1
    1c9c:	61 f4       	brne	.+24     	; 0x1cb6 <__mulsf3+0x1d2>
    1c9e:	87 fd       	sbrc	r24, 7
    1ca0:	0a c0       	rjmp	.+20     	; 0x1cb6 <__mulsf3+0x1d2>
    1ca2:	21 15       	cp	r18, r1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	41 05       	cpc	r20, r1
    1ca8:	51 05       	cpc	r21, r1
    1caa:	29 f0       	breq	.+10     	; 0x1cb6 <__mulsf3+0x1d2>
    1cac:	80 5c       	subi	r24, 0xC0	; 192
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	af 4f       	sbci	r26, 0xFF	; 255
    1cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb4:	80 78       	andi	r24, 0x80	; 128
    1cb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cba:	af 8f       	std	Y+31, r26	; 0x1f
    1cbc:	b8 a3       	std	Y+32, r27	; 0x20
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	89 8f       	std	Y+25, r24	; 0x19
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	49 96       	adiw	r24, 0x19	; 25
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <__mulsf3+0x1e8>
    1cc8:	8f e4       	ldi	r24, 0x4F	; 79
    1cca:	90 e2       	ldi	r25, 0x20	; 32
    1ccc:	0e 94 ce 10 	call	0x219c	; 0x219c <__pack_f>
    1cd0:	a0 96       	adiw	r28, 0x20	; 32
    1cd2:	e2 e1       	ldi	r30, 0x12	; 18
    1cd4:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__>

00001cd8 <__divsf3>:
    1cd8:	a8 e1       	ldi	r26, 0x18	; 24
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e2 e7       	ldi	r30, 0x72	; 114
    1cde:	fe e0       	ldi	r31, 0x0E	; 14
    1ce0:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x10>
    1ce4:	69 83       	std	Y+1, r22	; 0x01
    1ce6:	7a 83       	std	Y+2, r23	; 0x02
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	2d 83       	std	Y+5, r18	; 0x05
    1cee:	3e 83       	std	Y+6, r19	; 0x06
    1cf0:	4f 83       	std	Y+7, r20	; 0x07
    1cf2:	58 87       	std	Y+8, r21	; 0x08
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	07 5f       	subi	r16, 0xF7	; 247
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	b8 01       	movw	r22, r16
    1d00:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1d04:	81 e1       	ldi	r24, 0x11	; 17
    1d06:	e8 2e       	mov	r14, r24
    1d08:	f1 2c       	mov	r15, r1
    1d0a:	ec 0e       	add	r14, r28
    1d0c:	fd 1e       	adc	r15, r29
    1d0e:	ce 01       	movw	r24, r28
    1d10:	05 96       	adiw	r24, 0x05	; 5
    1d12:	b7 01       	movw	r22, r14
    1d14:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1d18:	99 85       	ldd	r25, Y+9	; 0x09
    1d1a:	92 30       	cpi	r25, 0x02	; 2
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <__divsf3+0x48>
    1d1e:	83 c0       	rjmp	.+262    	; 0x1e26 <__divsf3+0x14e>
    1d20:	89 89       	ldd	r24, Y+17	; 0x11
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <__divsf3+0x50>
    1d26:	7b c0       	rjmp	.+246    	; 0x1e1e <__divsf3+0x146>
    1d28:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d2a:	3a 89       	ldd	r19, Y+18	; 0x12
    1d2c:	23 27       	eor	r18, r19
    1d2e:	2a 87       	std	Y+10, r18	; 0x0a
    1d30:	94 30       	cpi	r25, 0x04	; 4
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <__divsf3+0x60>
    1d34:	92 30       	cpi	r25, 0x02	; 2
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <__divsf3+0x68>
    1d38:	98 17       	cp	r25, r24
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <__divsf3+0x66>
    1d3c:	6c c0       	rjmp	.+216    	; 0x1e16 <__divsf3+0x13e>
    1d3e:	71 c0       	rjmp	.+226    	; 0x1e22 <__divsf3+0x14a>
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <__divsf3+0x7a>
    1d44:	1d 86       	std	Y+13, r1	; 0x0d
    1d46:	1e 86       	std	Y+14, r1	; 0x0e
    1d48:	1f 86       	std	Y+15, r1	; 0x0f
    1d4a:	18 8a       	std	Y+16, r1	; 0x10
    1d4c:	1b 86       	std	Y+11, r1	; 0x0b
    1d4e:	1c 86       	std	Y+12, r1	; 0x0c
    1d50:	6a c0       	rjmp	.+212    	; 0x1e26 <__divsf3+0x14e>
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	19 f4       	brne	.+6      	; 0x1d5c <__divsf3+0x84>
    1d56:	84 e0       	ldi	r24, 0x04	; 4
    1d58:	89 87       	std	Y+9, r24	; 0x09
    1d5a:	65 c0       	rjmp	.+202    	; 0x1e26 <__divsf3+0x14e>
    1d5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d60:	2b 89       	ldd	r18, Y+19	; 0x13
    1d62:	3c 89       	ldd	r19, Y+20	; 0x14
    1d64:	82 1b       	sub	r24, r18
    1d66:	93 0b       	sbc	r25, r19
    1d68:	8b 87       	std	Y+11, r24	; 0x0b
    1d6a:	9c 87       	std	Y+12, r25	; 0x0c
    1d6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d70:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d72:	58 89       	ldd	r21, Y+16	; 0x10
    1d74:	ed 88       	ldd	r14, Y+21	; 0x15
    1d76:	fe 88       	ldd	r15, Y+22	; 0x16
    1d78:	0f 89       	ldd	r16, Y+23	; 0x17
    1d7a:	18 8d       	ldd	r17, Y+24	; 0x18
    1d7c:	2e 15       	cp	r18, r14
    1d7e:	3f 05       	cpc	r19, r15
    1d80:	40 07       	cpc	r20, r16
    1d82:	51 07       	cpc	r21, r17
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <__divsf3+0xbc>
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	44 1f       	adc	r20, r20
    1d8c:	55 1f       	adc	r21, r21
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	8b 87       	std	Y+11, r24	; 0x0b
    1d92:	9c 87       	std	Y+12, r25	; 0x0c
    1d94:	6f e1       	ldi	r22, 0x1F	; 31
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	a1 2c       	mov	r10, r1
    1d9a:	b1 2c       	mov	r11, r1
    1d9c:	c1 2c       	mov	r12, r1
    1d9e:	a0 e4       	ldi	r26, 0x40	; 64
    1da0:	da 2e       	mov	r13, r26
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	dc 01       	movw	r26, r24
    1da8:	2e 15       	cp	r18, r14
    1daa:	3f 05       	cpc	r19, r15
    1dac:	40 07       	cpc	r20, r16
    1dae:	51 07       	cpc	r21, r17
    1db0:	40 f0       	brcs	.+16     	; 0x1dc2 <__divsf3+0xea>
    1db2:	8a 29       	or	r24, r10
    1db4:	9b 29       	or	r25, r11
    1db6:	ac 29       	or	r26, r12
    1db8:	bd 29       	or	r27, r13
    1dba:	2e 19       	sub	r18, r14
    1dbc:	3f 09       	sbc	r19, r15
    1dbe:	40 0b       	sbc	r20, r16
    1dc0:	51 0b       	sbc	r21, r17
    1dc2:	d6 94       	lsr	r13
    1dc4:	c7 94       	ror	r12
    1dc6:	b7 94       	ror	r11
    1dc8:	a7 94       	ror	r10
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	44 1f       	adc	r20, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	61 50       	subi	r22, 0x01	; 1
    1dd4:	70 40       	sbci	r23, 0x00	; 0
    1dd6:	41 f7       	brne	.-48     	; 0x1da8 <__divsf3+0xd0>
    1dd8:	6f e7       	ldi	r22, 0x7F	; 127
    1dda:	e6 2e       	mov	r14, r22
    1ddc:	f1 2c       	mov	r15, r1
    1dde:	01 2d       	mov	r16, r1
    1de0:	11 2d       	mov	r17, r1
    1de2:	e8 22       	and	r14, r24
    1de4:	f9 22       	and	r15, r25
    1de6:	0a 23       	and	r16, r26
    1de8:	1b 23       	and	r17, r27
    1dea:	60 e4       	ldi	r22, 0x40	; 64
    1dec:	e6 16       	cp	r14, r22
    1dee:	f1 04       	cpc	r15, r1
    1df0:	01 05       	cpc	r16, r1
    1df2:	11 05       	cpc	r17, r1
    1df4:	61 f4       	brne	.+24     	; 0x1e0e <__divsf3+0x136>
    1df6:	87 fd       	sbrc	r24, 7
    1df8:	0a c0       	rjmp	.+20     	; 0x1e0e <__divsf3+0x136>
    1dfa:	21 15       	cp	r18, r1
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	41 05       	cpc	r20, r1
    1e00:	51 05       	cpc	r21, r1
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <__divsf3+0x136>
    1e04:	80 5c       	subi	r24, 0xC0	; 192
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	af 4f       	sbci	r26, 0xFF	; 255
    1e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0c:	80 78       	andi	r24, 0x80	; 128
    1e0e:	8d 87       	std	Y+13, r24	; 0x0d
    1e10:	9e 87       	std	Y+14, r25	; 0x0e
    1e12:	af 87       	std	Y+15, r26	; 0x0f
    1e14:	b8 8b       	std	Y+16, r27	; 0x10
    1e16:	8e 01       	movw	r16, r28
    1e18:	07 5f       	subi	r16, 0xF7	; 247
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <__divsf3+0x14e>
    1e1e:	87 01       	movw	r16, r14
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <__divsf3+0x14e>
    1e22:	0f e4       	ldi	r16, 0x4F	; 79
    1e24:	10 e2       	ldi	r17, 0x20	; 32
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 ce 10 	call	0x219c	; 0x219c <__pack_f>
    1e2c:	68 96       	adiw	r28, 0x18	; 24
    1e2e:	ea e0       	ldi	r30, 0x0A	; 10
    1e30:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x10>

00001e34 <__gtsf2>:
    1e34:	a8 e1       	ldi	r26, 0x18	; 24
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e0 e2       	ldi	r30, 0x20	; 32
    1e3a:	ff e0       	ldi	r31, 0x0F	; 15
    1e3c:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x18>
    1e40:	69 83       	std	Y+1, r22	; 0x01
    1e42:	7a 83       	std	Y+2, r23	; 0x02
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	2d 83       	std	Y+5, r18	; 0x05
    1e4a:	3e 83       	std	Y+6, r19	; 0x06
    1e4c:	4f 83       	std	Y+7, r20	; 0x07
    1e4e:	58 87       	std	Y+8, r21	; 0x08
    1e50:	8e 01       	movw	r16, r28
    1e52:	07 5f       	subi	r16, 0xF7	; 247
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	b8 01       	movw	r22, r16
    1e5c:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1e60:	81 e1       	ldi	r24, 0x11	; 17
    1e62:	e8 2e       	mov	r14, r24
    1e64:	f1 2c       	mov	r15, r1
    1e66:	ec 0e       	add	r14, r28
    1e68:	fd 1e       	adc	r15, r29
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	05 96       	adiw	r24, 0x05	; 5
    1e6e:	b7 01       	movw	r22, r14
    1e70:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	40 f0       	brcs	.+16     	; 0x1e8a <__gtsf2+0x56>
    1e7a:	89 89       	ldd	r24, Y+17	; 0x11
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	28 f0       	brcs	.+10     	; 0x1e8a <__gtsf2+0x56>
    1e80:	c8 01       	movw	r24, r16
    1e82:	b7 01       	movw	r22, r14
    1e84:	0e 94 05 12 	call	0x240a	; 0x240a <__fpcmp_parts_f>
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <__gtsf2+0x58>
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	68 96       	adiw	r28, 0x18	; 24
    1e8e:	e6 e0       	ldi	r30, 0x06	; 6
    1e90:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00001e94 <__gesf2>:
    1e94:	a8 e1       	ldi	r26, 0x18	; 24
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e0 e5       	ldi	r30, 0x50	; 80
    1e9a:	ff e0       	ldi	r31, 0x0F	; 15
    1e9c:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x18>
    1ea0:	69 83       	std	Y+1, r22	; 0x01
    1ea2:	7a 83       	std	Y+2, r23	; 0x02
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	2d 83       	std	Y+5, r18	; 0x05
    1eaa:	3e 83       	std	Y+6, r19	; 0x06
    1eac:	4f 83       	std	Y+7, r20	; 0x07
    1eae:	58 87       	std	Y+8, r21	; 0x08
    1eb0:	8e 01       	movw	r16, r28
    1eb2:	07 5f       	subi	r16, 0xF7	; 247
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	b8 01       	movw	r22, r16
    1ebc:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1ec0:	81 e1       	ldi	r24, 0x11	; 17
    1ec2:	e8 2e       	mov	r14, r24
    1ec4:	f1 2c       	mov	r15, r1
    1ec6:	ec 0e       	add	r14, r28
    1ec8:	fd 1e       	adc	r15, r29
    1eca:	ce 01       	movw	r24, r28
    1ecc:	05 96       	adiw	r24, 0x05	; 5
    1ece:	b7 01       	movw	r22, r14
    1ed0:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	40 f0       	brcs	.+16     	; 0x1eea <__gesf2+0x56>
    1eda:	89 89       	ldd	r24, Y+17	; 0x11
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	28 f0       	brcs	.+10     	; 0x1eea <__gesf2+0x56>
    1ee0:	c8 01       	movw	r24, r16
    1ee2:	b7 01       	movw	r22, r14
    1ee4:	0e 94 05 12 	call	0x240a	; 0x240a <__fpcmp_parts_f>
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <__gesf2+0x58>
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	68 96       	adiw	r28, 0x18	; 24
    1eee:	e6 e0       	ldi	r30, 0x06	; 6
    1ef0:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00001ef4 <__ltsf2>:
    1ef4:	a8 e1       	ldi	r26, 0x18	; 24
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e0 e8       	ldi	r30, 0x80	; 128
    1efa:	ff e0       	ldi	r31, 0x0F	; 15
    1efc:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x18>
    1f00:	69 83       	std	Y+1, r22	; 0x01
    1f02:	7a 83       	std	Y+2, r23	; 0x02
    1f04:	8b 83       	std	Y+3, r24	; 0x03
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	2d 83       	std	Y+5, r18	; 0x05
    1f0a:	3e 83       	std	Y+6, r19	; 0x06
    1f0c:	4f 83       	std	Y+7, r20	; 0x07
    1f0e:	58 87       	std	Y+8, r21	; 0x08
    1f10:	8e 01       	movw	r16, r28
    1f12:	07 5f       	subi	r16, 0xF7	; 247
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	b8 01       	movw	r22, r16
    1f1c:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1f20:	81 e1       	ldi	r24, 0x11	; 17
    1f22:	e8 2e       	mov	r14, r24
    1f24:	f1 2c       	mov	r15, r1
    1f26:	ec 0e       	add	r14, r28
    1f28:	fd 1e       	adc	r15, r29
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	05 96       	adiw	r24, 0x05	; 5
    1f2e:	b7 01       	movw	r22, r14
    1f30:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	40 f0       	brcs	.+16     	; 0x1f4a <__ltsf2+0x56>
    1f3a:	89 89       	ldd	r24, Y+17	; 0x11
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	28 f0       	brcs	.+10     	; 0x1f4a <__ltsf2+0x56>
    1f40:	c8 01       	movw	r24, r16
    1f42:	b7 01       	movw	r22, r14
    1f44:	0e 94 05 12 	call	0x240a	; 0x240a <__fpcmp_parts_f>
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <__ltsf2+0x58>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	68 96       	adiw	r28, 0x18	; 24
    1f4e:	e6 e0       	ldi	r30, 0x06	; 6
    1f50:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00001f54 <__fixsfsi>:
    1f54:	ac e0       	ldi	r26, 0x0C	; 12
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x20>
    1f60:	69 83       	std	Y+1, r22	; 0x01
    1f62:	7a 83       	std	Y+2, r23	; 0x02
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	be 01       	movw	r22, r28
    1f6e:	6b 5f       	subi	r22, 0xFB	; 251
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	0e 94 9c 11 	call	0x2338	; 0x2338 <__unpack_f>
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	81 f1       	breq	.+96     	; 0x1fdc <__fixsfsi+0x88>
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	70 f1       	brcs	.+92     	; 0x1fdc <__fixsfsi+0x88>
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <__fixsfsi+0x38>
    1f84:	8e 81       	ldd	r24, Y+6	; 0x06
    1f86:	88 23       	and	r24, r24
    1f88:	69 f1       	breq	.+90     	; 0x1fe4 <__fixsfsi+0x90>
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <__fixsfsi+0x4c>
    1f8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f8e:	38 85       	ldd	r19, Y+8	; 0x08
    1f90:	37 fd       	sbrc	r19, 7
    1f92:	24 c0       	rjmp	.+72     	; 0x1fdc <__fixsfsi+0x88>
    1f94:	6e 81       	ldd	r22, Y+6	; 0x06
    1f96:	2f 31       	cpi	r18, 0x1F	; 31
    1f98:	31 05       	cpc	r19, r1
    1f9a:	3c f0       	brlt	.+14     	; 0x1faa <__fixsfsi+0x56>
    1f9c:	66 23       	and	r22, r22
    1f9e:	11 f1       	breq	.+68     	; 0x1fe4 <__fixsfsi+0x90>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e8       	ldi	r21, 0x80	; 128
    1fa8:	21 c0       	rjmp	.+66     	; 0x1fec <__fixsfsi+0x98>
    1faa:	8e e1       	ldi	r24, 0x1E	; 30
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	82 1b       	sub	r24, r18
    1fb0:	93 0b       	sbc	r25, r19
    1fb2:	29 85       	ldd	r18, Y+9	; 0x09
    1fb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fb6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fb8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <__fixsfsi+0x70>
    1fbc:	56 95       	lsr	r21
    1fbe:	47 95       	ror	r20
    1fc0:	37 95       	ror	r19
    1fc2:	27 95       	ror	r18
    1fc4:	8a 95       	dec	r24
    1fc6:	d2 f7       	brpl	.-12     	; 0x1fbc <__fixsfsi+0x68>
    1fc8:	66 23       	and	r22, r22
    1fca:	81 f0       	breq	.+32     	; 0x1fec <__fixsfsi+0x98>
    1fcc:	50 95       	com	r21
    1fce:	40 95       	com	r20
    1fd0:	30 95       	com	r19
    1fd2:	21 95       	neg	r18
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <__fixsfsi+0x98>
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <__fixsfsi+0x98>
    1fe4:	2f ef       	ldi	r18, 0xFF	; 255
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f ef       	ldi	r20, 0xFF	; 255
    1fea:	5f e7       	ldi	r21, 0x7F	; 127
    1fec:	b9 01       	movw	r22, r18
    1fee:	ca 01       	movw	r24, r20
    1ff0:	2c 96       	adiw	r28, 0x0c	; 12
    1ff2:	e2 e0       	ldi	r30, 0x02	; 2
    1ff4:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0x20>

00001ff8 <__floatunsisf>:
    1ff8:	a8 e0       	ldi	r26, 0x08	; 8
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e2 e0       	ldi	r30, 0x02	; 2
    1ffe:	f0 e1       	ldi	r31, 0x10	; 16
    2000:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__prologue_saves__+0x14>
    2004:	7b 01       	movw	r14, r22
    2006:	8c 01       	movw	r16, r24
    2008:	1a 82       	std	Y+2, r1	; 0x02
    200a:	61 15       	cp	r22, r1
    200c:	71 05       	cpc	r23, r1
    200e:	81 05       	cpc	r24, r1
    2010:	91 05       	cpc	r25, r1
    2012:	19 f4       	brne	.+6      	; 0x201a <__floatunsisf+0x22>
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	5f c0       	rjmp	.+190    	; 0x20d8 <__floatunsisf+0xe0>
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	8e e1       	ldi	r24, 0x1E	; 30
    2020:	c8 2e       	mov	r12, r24
    2022:	d1 2c       	mov	r13, r1
    2024:	cb 82       	std	Y+3, r12	; 0x03
    2026:	dc 82       	std	Y+4, r13	; 0x04
    2028:	ed 82       	std	Y+5, r14	; 0x05
    202a:	fe 82       	std	Y+6, r15	; 0x06
    202c:	0f 83       	std	Y+7, r16	; 0x07
    202e:	18 87       	std	Y+8, r17	; 0x08
    2030:	c8 01       	movw	r24, r16
    2032:	b7 01       	movw	r22, r14
    2034:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__clzsi2>
    2038:	fc 01       	movw	r30, r24
    203a:	31 97       	sbiw	r30, 0x01	; 1
    203c:	f7 ff       	sbrs	r31, 7
    203e:	3a c0       	rjmp	.+116    	; 0x20b4 <__floatunsisf+0xbc>
    2040:	aa 27       	eor	r26, r26
    2042:	bb 27       	eor	r27, r27
    2044:	ae 1b       	sub	r26, r30
    2046:	bf 0b       	sbc	r27, r31
    2048:	21 e0       	ldi	r18, 0x01	; 1
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	0a 2e       	mov	r0, r26
    2052:	04 c0       	rjmp	.+8      	; 0x205c <__floatunsisf+0x64>
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	44 1f       	adc	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	0a 94       	dec	r0
    205e:	d2 f7       	brpl	.-12     	; 0x2054 <__floatunsisf+0x5c>
    2060:	21 50       	subi	r18, 0x01	; 1
    2062:	30 40       	sbci	r19, 0x00	; 0
    2064:	40 40       	sbci	r20, 0x00	; 0
    2066:	50 40       	sbci	r21, 0x00	; 0
    2068:	2e 21       	and	r18, r14
    206a:	3f 21       	and	r19, r15
    206c:	40 23       	and	r20, r16
    206e:	51 23       	and	r21, r17
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	41 05       	cpc	r20, r1
    207e:	51 05       	cpc	r21, r1
    2080:	19 f4       	brne	.+6      	; 0x2088 <__floatunsisf+0x90>
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	cb 01       	movw	r24, r22
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <__floatunsisf+0x9a>
    208a:	16 95       	lsr	r17
    208c:	07 95       	ror	r16
    208e:	f7 94       	ror	r15
    2090:	e7 94       	ror	r14
    2092:	aa 95       	dec	r26
    2094:	d2 f7       	brpl	.-12     	; 0x208a <__floatunsisf+0x92>
    2096:	e6 2a       	or	r14, r22
    2098:	f7 2a       	or	r15, r23
    209a:	08 2b       	or	r16, r24
    209c:	19 2b       	or	r17, r25
    209e:	ed 82       	std	Y+5, r14	; 0x05
    20a0:	fe 82       	std	Y+6, r15	; 0x06
    20a2:	0f 83       	std	Y+7, r16	; 0x07
    20a4:	18 87       	std	Y+8, r17	; 0x08
    20a6:	8e e1       	ldi	r24, 0x1E	; 30
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	8e 1b       	sub	r24, r30
    20ac:	9f 0b       	sbc	r25, r31
    20ae:	8b 83       	std	Y+3, r24	; 0x03
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	12 c0       	rjmp	.+36     	; 0x20d8 <__floatunsisf+0xe0>
    20b4:	30 97       	sbiw	r30, 0x00	; 0
    20b6:	81 f0       	breq	.+32     	; 0x20d8 <__floatunsisf+0xe0>
    20b8:	0e 2e       	mov	r0, r30
    20ba:	04 c0       	rjmp	.+8      	; 0x20c4 <__floatunsisf+0xcc>
    20bc:	ee 0c       	add	r14, r14
    20be:	ff 1c       	adc	r15, r15
    20c0:	00 1f       	adc	r16, r16
    20c2:	11 1f       	adc	r17, r17
    20c4:	0a 94       	dec	r0
    20c6:	d2 f7       	brpl	.-12     	; 0x20bc <__floatunsisf+0xc4>
    20c8:	ed 82       	std	Y+5, r14	; 0x05
    20ca:	fe 82       	std	Y+6, r15	; 0x06
    20cc:	0f 83       	std	Y+7, r16	; 0x07
    20ce:	18 87       	std	Y+8, r17	; 0x08
    20d0:	ce 1a       	sub	r12, r30
    20d2:	df 0a       	sbc	r13, r31
    20d4:	cb 82       	std	Y+3, r12	; 0x03
    20d6:	dc 82       	std	Y+4, r13	; 0x04
    20d8:	ce 01       	movw	r24, r28
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	0e 94 ce 10 	call	0x219c	; 0x219c <__pack_f>
    20e0:	28 96       	adiw	r28, 0x08	; 8
    20e2:	e8 e0       	ldi	r30, 0x08	; 8
    20e4:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x14>

000020e8 <__clzsi2>:
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	7b 01       	movw	r14, r22
    20fa:	8c 01       	movw	r16, r24
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	e8 16       	cp	r14, r24
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	f8 06       	cpc	r15, r24
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	08 07       	cpc	r16, r24
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	18 07       	cpc	r17, r24
    210c:	58 f4       	brcc	.+22     	; 0x2124 <__clzsi2+0x3c>
    210e:	ef ef       	ldi	r30, 0xFF	; 255
    2110:	ee 16       	cp	r14, r30
    2112:	f1 04       	cpc	r15, r1
    2114:	01 05       	cpc	r16, r1
    2116:	11 05       	cpc	r17, r1
    2118:	09 f0       	breq	.+2      	; 0x211c <__clzsi2+0x34>
    211a:	90 f4       	brcc	.+36     	; 0x2140 <__clzsi2+0x58>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	dc 01       	movw	r26, r24
    2122:	17 c0       	rjmp	.+46     	; 0x2152 <__clzsi2+0x6a>
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	ef 16       	cp	r14, r31
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	ff 06       	cpc	r15, r31
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	0f 07       	cpc	r16, r31
    2130:	f1 e0       	ldi	r31, 0x01	; 1
    2132:	1f 07       	cpc	r17, r31
    2134:	50 f4       	brcc	.+20     	; 0x214a <__clzsi2+0x62>
    2136:	80 e1       	ldi	r24, 0x10	; 16
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	09 c0       	rjmp	.+18     	; 0x2152 <__clzsi2+0x6a>
    2140:	88 e0       	ldi	r24, 0x08	; 8
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <__clzsi2+0x6a>
    214a:	88 e1       	ldi	r24, 0x18	; 24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e0       	ldi	r26, 0x00	; 0
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	20 e2       	ldi	r18, 0x20	; 32
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	28 1b       	sub	r18, r24
    215c:	39 0b       	sbc	r19, r25
    215e:	4a 0b       	sbc	r20, r26
    2160:	5b 0b       	sbc	r21, r27
    2162:	57 01       	movw	r10, r14
    2164:	68 01       	movw	r12, r16
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__clzsi2+0x88>
    2168:	d6 94       	lsr	r13
    216a:	c7 94       	ror	r12
    216c:	b7 94       	ror	r11
    216e:	a7 94       	ror	r10
    2170:	8a 95       	dec	r24
    2172:	d2 f7       	brpl	.-12     	; 0x2168 <__clzsi2+0x80>
    2174:	d6 01       	movw	r26, r12
    2176:	c5 01       	movw	r24, r10
    2178:	89 5a       	subi	r24, 0xA9	; 169
    217a:	9f 4d       	sbci	r25, 0xDF	; 223
    217c:	fc 01       	movw	r30, r24
    217e:	80 81       	ld	r24, Z
    2180:	28 1b       	sub	r18, r24
    2182:	31 09       	sbc	r19, r1
    2184:	41 09       	sbc	r20, r1
    2186:	51 09       	sbc	r21, r1
    2188:	c9 01       	movw	r24, r18
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	df 90       	pop	r13
    2194:	cf 90       	pop	r12
    2196:	bf 90       	pop	r11
    2198:	af 90       	pop	r10
    219a:	08 95       	ret

0000219c <__pack_f>:
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	fc 01       	movw	r30, r24
    21aa:	24 81       	ldd	r18, Z+4	; 0x04
    21ac:	35 81       	ldd	r19, Z+5	; 0x05
    21ae:	46 81       	ldd	r20, Z+6	; 0x06
    21b0:	57 81       	ldd	r21, Z+7	; 0x07
    21b2:	61 81       	ldd	r22, Z+1	; 0x01
    21b4:	80 81       	ld	r24, Z
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	20 f4       	brcc	.+8      	; 0x21c2 <__pack_f+0x26>
    21ba:	40 61       	ori	r20, 0x10	; 16
    21bc:	ef ef       	ldi	r30, 0xFF	; 255
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	a3 c0       	rjmp	.+326    	; 0x2308 <__pack_f+0x16c>
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <__pack_f+0x2c>
    21c6:	9b c0       	rjmp	.+310    	; 0x22fe <__pack_f+0x162>
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	09 f4       	brne	.+2      	; 0x21ce <__pack_f+0x32>
    21cc:	92 c0       	rjmp	.+292    	; 0x22f2 <__pack_f+0x156>
    21ce:	21 15       	cp	r18, r1
    21d0:	31 05       	cpc	r19, r1
    21d2:	41 05       	cpc	r20, r1
    21d4:	51 05       	cpc	r21, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <__pack_f+0x3e>
    21d8:	8f c0       	rjmp	.+286    	; 0x22f8 <__pack_f+0x15c>
    21da:	02 80       	ldd	r0, Z+2	; 0x02
    21dc:	f3 81       	ldd	r31, Z+3	; 0x03
    21de:	e0 2d       	mov	r30, r0
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	e2 38       	cpi	r30, 0x82	; 130
    21e4:	f8 07       	cpc	r31, r24
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <__pack_f+0x4e>
    21e8:	5a c0       	rjmp	.+180    	; 0x229e <__pack_f+0x102>
    21ea:	c2 e8       	ldi	r28, 0x82	; 130
    21ec:	df ef       	ldi	r29, 0xFF	; 255
    21ee:	ce 1b       	sub	r28, r30
    21f0:	df 0b       	sbc	r29, r31
    21f2:	ca 31       	cpi	r28, 0x1A	; 26
    21f4:	d1 05       	cpc	r29, r1
    21f6:	6c f5       	brge	.+90     	; 0x2252 <__pack_f+0xb6>
    21f8:	79 01       	movw	r14, r18
    21fa:	8a 01       	movw	r16, r20
    21fc:	0c 2e       	mov	r0, r28
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <__pack_f+0x6c>
    2200:	16 95       	lsr	r17
    2202:	07 95       	ror	r16
    2204:	f7 94       	ror	r15
    2206:	e7 94       	ror	r14
    2208:	0a 94       	dec	r0
    220a:	d2 f7       	brpl	.-12     	; 0x2200 <__pack_f+0x64>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e0       	ldi	r26, 0x00	; 0
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	0c 2e       	mov	r0, r28
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <__pack_f+0x84>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	aa 1f       	adc	r26, r26
    221e:	bb 1f       	adc	r27, r27
    2220:	0a 94       	dec	r0
    2222:	d2 f7       	brpl	.-12     	; 0x2218 <__pack_f+0x7c>
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	a1 09       	sbc	r26, r1
    2228:	b1 09       	sbc	r27, r1
    222a:	82 23       	and	r24, r18
    222c:	93 23       	and	r25, r19
    222e:	a4 23       	and	r26, r20
    2230:	b5 23       	and	r27, r21
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	a1 05       	cpc	r26, r1
    223e:	b1 05       	cpc	r27, r1
    2240:	19 f4       	brne	.+6      	; 0x2248 <__pack_f+0xac>
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	a9 01       	movw	r20, r18
    2248:	2e 29       	or	r18, r14
    224a:	3f 29       	or	r19, r15
    224c:	40 2b       	or	r20, r16
    224e:	51 2b       	or	r21, r17
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <__pack_f+0xbc>
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	a9 01       	movw	r20, r18
    2258:	da 01       	movw	r26, r20
    225a:	c9 01       	movw	r24, r18
    225c:	8f 77       	andi	r24, 0x7F	; 127
    225e:	90 70       	andi	r25, 0x00	; 0
    2260:	a0 70       	andi	r26, 0x00	; 0
    2262:	b0 70       	andi	r27, 0x00	; 0
    2264:	80 34       	cpi	r24, 0x40	; 64
    2266:	91 05       	cpc	r25, r1
    2268:	a1 05       	cpc	r26, r1
    226a:	b1 05       	cpc	r27, r1
    226c:	39 f4       	brne	.+14     	; 0x227c <__pack_f+0xe0>
    226e:	27 ff       	sbrs	r18, 7
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <__pack_f+0xe8>
    2272:	20 5c       	subi	r18, 0xC0	; 192
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	4f 4f       	sbci	r20, 0xFF	; 255
    2278:	5f 4f       	sbci	r21, 0xFF	; 255
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <__pack_f+0xe8>
    227c:	21 5c       	subi	r18, 0xC1	; 193
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	4f 4f       	sbci	r20, 0xFF	; 255
    2282:	5f 4f       	sbci	r21, 0xFF	; 255
    2284:	e1 e0       	ldi	r30, 0x01	; 1
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	20 30       	cpi	r18, 0x00	; 0
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	38 07       	cpc	r19, r24
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	48 07       	cpc	r20, r24
    2292:	80 e4       	ldi	r24, 0x40	; 64
    2294:	58 07       	cpc	r21, r24
    2296:	28 f5       	brcc	.+74     	; 0x22e2 <__pack_f+0x146>
    2298:	e0 e0       	ldi	r30, 0x00	; 0
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	22 c0       	rjmp	.+68     	; 0x22e2 <__pack_f+0x146>
    229e:	e0 38       	cpi	r30, 0x80	; 128
    22a0:	f1 05       	cpc	r31, r1
    22a2:	6c f5       	brge	.+90     	; 0x22fe <__pack_f+0x162>
    22a4:	e1 58       	subi	r30, 0x81	; 129
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	da 01       	movw	r26, r20
    22aa:	c9 01       	movw	r24, r18
    22ac:	8f 77       	andi	r24, 0x7F	; 127
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	a0 70       	andi	r26, 0x00	; 0
    22b2:	b0 70       	andi	r27, 0x00	; 0
    22b4:	80 34       	cpi	r24, 0x40	; 64
    22b6:	91 05       	cpc	r25, r1
    22b8:	a1 05       	cpc	r26, r1
    22ba:	b1 05       	cpc	r27, r1
    22bc:	39 f4       	brne	.+14     	; 0x22cc <__pack_f+0x130>
    22be:	27 ff       	sbrs	r18, 7
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <__pack_f+0x138>
    22c2:	20 5c       	subi	r18, 0xC0	; 192
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	4f 4f       	sbci	r20, 0xFF	; 255
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ca:	04 c0       	rjmp	.+8      	; 0x22d4 <__pack_f+0x138>
    22cc:	21 5c       	subi	r18, 0xC1	; 193
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	4f 4f       	sbci	r20, 0xFF	; 255
    22d2:	5f 4f       	sbci	r21, 0xFF	; 255
    22d4:	57 ff       	sbrs	r21, 7
    22d6:	05 c0       	rjmp	.+10     	; 0x22e2 <__pack_f+0x146>
    22d8:	56 95       	lsr	r21
    22da:	47 95       	ror	r20
    22dc:	37 95       	ror	r19
    22de:	27 95       	ror	r18
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	87 e0       	ldi	r24, 0x07	; 7
    22e4:	56 95       	lsr	r21
    22e6:	47 95       	ror	r20
    22e8:	37 95       	ror	r19
    22ea:	27 95       	ror	r18
    22ec:	8a 95       	dec	r24
    22ee:	d1 f7       	brne	.-12     	; 0x22e4 <__pack_f+0x148>
    22f0:	0b c0       	rjmp	.+22     	; 0x2308 <__pack_f+0x16c>
    22f2:	e0 e0       	ldi	r30, 0x00	; 0
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__pack_f+0x166>
    22f8:	e0 e0       	ldi	r30, 0x00	; 0
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <__pack_f+0x16c>
    22fe:	ef ef       	ldi	r30, 0xFF	; 255
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	a9 01       	movw	r20, r18
    2308:	8e 2f       	mov	r24, r30
    230a:	87 95       	ror	r24
    230c:	88 27       	eor	r24, r24
    230e:	87 95       	ror	r24
    2310:	94 2f       	mov	r25, r20
    2312:	9f 77       	andi	r25, 0x7F	; 127
    2314:	67 95       	ror	r22
    2316:	66 27       	eor	r22, r22
    2318:	67 95       	ror	r22
    231a:	e6 95       	lsr	r30
    231c:	e2 2e       	mov	r14, r18
    231e:	a9 2f       	mov	r26, r25
    2320:	a8 2b       	or	r26, r24
    2322:	fe 2f       	mov	r31, r30
    2324:	f6 2b       	or	r31, r22
    2326:	62 2f       	mov	r22, r18
    2328:	73 2f       	mov	r23, r19
    232a:	8a 2f       	mov	r24, r26
    232c:	9f 2f       	mov	r25, r31
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	e6 e0       	ldi	r30, 0x06	; 6
    2334:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00002338 <__unpack_f>:
    2338:	dc 01       	movw	r26, r24
    233a:	fb 01       	movw	r30, r22
    233c:	2c 91       	ld	r18, X
    233e:	11 96       	adiw	r26, 0x01	; 1
    2340:	3c 91       	ld	r19, X
    2342:	11 97       	sbiw	r26, 0x01	; 1
    2344:	12 96       	adiw	r26, 0x02	; 2
    2346:	8c 91       	ld	r24, X
    2348:	12 97       	sbiw	r26, 0x02	; 2
    234a:	48 2f       	mov	r20, r24
    234c:	4f 77       	andi	r20, 0x7F	; 127
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	98 2f       	mov	r25, r24
    2352:	99 1f       	adc	r25, r25
    2354:	99 27       	eor	r25, r25
    2356:	99 1f       	adc	r25, r25
    2358:	13 96       	adiw	r26, 0x03	; 3
    235a:	6c 91       	ld	r22, X
    235c:	13 97       	sbiw	r26, 0x03	; 3
    235e:	86 2f       	mov	r24, r22
    2360:	88 0f       	add	r24, r24
    2362:	89 2b       	or	r24, r25
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	66 1f       	adc	r22, r22
    2368:	66 27       	eor	r22, r22
    236a:	66 1f       	adc	r22, r22
    236c:	61 83       	std	Z+1, r22	; 0x01
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	39 f5       	brne	.+78     	; 0x23c0 <__unpack_f+0x88>
    2372:	21 15       	cp	r18, r1
    2374:	31 05       	cpc	r19, r1
    2376:	41 05       	cpc	r20, r1
    2378:	51 05       	cpc	r21, r1
    237a:	11 f4       	brne	.+4      	; 0x2380 <__unpack_f+0x48>
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	29 c0       	rjmp	.+82     	; 0x23d2 <__unpack_f+0x9a>
    2380:	82 e8       	ldi	r24, 0x82	; 130
    2382:	9f ef       	ldi	r25, 0xFF	; 255
    2384:	82 83       	std	Z+2, r24	; 0x02
    2386:	93 83       	std	Z+3, r25	; 0x03
    2388:	67 e0       	ldi	r22, 0x07	; 7
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	44 1f       	adc	r20, r20
    2390:	55 1f       	adc	r21, r21
    2392:	6a 95       	dec	r22
    2394:	d1 f7       	brne	.-12     	; 0x238a <__unpack_f+0x52>
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	80 83       	st	Z, r24
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <__unpack_f+0x76>
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	44 1f       	adc	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	82 83       	std	Z+2, r24	; 0x02
    23ac:	93 83       	std	Z+3, r25	; 0x03
    23ae:	20 30       	cpi	r18, 0x00	; 0
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	38 07       	cpc	r19, r24
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	48 07       	cpc	r20, r24
    23b8:	80 e4       	ldi	r24, 0x40	; 64
    23ba:	58 07       	cpc	r21, r24
    23bc:	78 f3       	brcs	.-34     	; 0x239c <__unpack_f+0x64>
    23be:	20 c0       	rjmp	.+64     	; 0x2400 <__unpack_f+0xc8>
    23c0:	8f 3f       	cpi	r24, 0xFF	; 255
    23c2:	91 05       	cpc	r25, r1
    23c4:	79 f4       	brne	.+30     	; 0x23e4 <__unpack_f+0xac>
    23c6:	21 15       	cp	r18, r1
    23c8:	31 05       	cpc	r19, r1
    23ca:	41 05       	cpc	r20, r1
    23cc:	51 05       	cpc	r21, r1
    23ce:	19 f4       	brne	.+6      	; 0x23d6 <__unpack_f+0x9e>
    23d0:	84 e0       	ldi	r24, 0x04	; 4
    23d2:	80 83       	st	Z, r24
    23d4:	08 95       	ret
    23d6:	44 ff       	sbrs	r20, 4
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <__unpack_f+0xa8>
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 83       	st	Z, r24
    23de:	10 c0       	rjmp	.+32     	; 0x2400 <__unpack_f+0xc8>
    23e0:	10 82       	st	Z, r1
    23e2:	0e c0       	rjmp	.+28     	; 0x2400 <__unpack_f+0xc8>
    23e4:	8f 57       	subi	r24, 0x7F	; 127
    23e6:	90 40       	sbci	r25, 0x00	; 0
    23e8:	82 83       	std	Z+2, r24	; 0x02
    23ea:	93 83       	std	Z+3, r25	; 0x03
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	80 83       	st	Z, r24
    23f0:	87 e0       	ldi	r24, 0x07	; 7
    23f2:	22 0f       	add	r18, r18
    23f4:	33 1f       	adc	r19, r19
    23f6:	44 1f       	adc	r20, r20
    23f8:	55 1f       	adc	r21, r21
    23fa:	8a 95       	dec	r24
    23fc:	d1 f7       	brne	.-12     	; 0x23f2 <__unpack_f+0xba>
    23fe:	50 64       	ori	r21, 0x40	; 64
    2400:	24 83       	std	Z+4, r18	; 0x04
    2402:	35 83       	std	Z+5, r19	; 0x05
    2404:	46 83       	std	Z+6, r20	; 0x06
    2406:	57 83       	std	Z+7, r21	; 0x07
    2408:	08 95       	ret

0000240a <__fpcmp_parts_f>:
    240a:	fc 01       	movw	r30, r24
    240c:	db 01       	movw	r26, r22
    240e:	90 81       	ld	r25, Z
    2410:	92 30       	cpi	r25, 0x02	; 2
    2412:	08 f4       	brcc	.+2      	; 0x2416 <__fpcmp_parts_f+0xc>
    2414:	49 c0       	rjmp	.+146    	; 0x24a8 <__fpcmp_parts_f+0x9e>
    2416:	8c 91       	ld	r24, X
    2418:	82 30       	cpi	r24, 0x02	; 2
    241a:	08 f4       	brcc	.+2      	; 0x241e <__fpcmp_parts_f+0x14>
    241c:	45 c0       	rjmp	.+138    	; 0x24a8 <__fpcmp_parts_f+0x9e>
    241e:	94 30       	cpi	r25, 0x04	; 4
    2420:	51 f4       	brne	.+20     	; 0x2436 <__fpcmp_parts_f+0x2c>
    2422:	61 81       	ldd	r22, Z+1	; 0x01
    2424:	84 30       	cpi	r24, 0x04	; 4
    2426:	b1 f5       	brne	.+108    	; 0x2494 <__fpcmp_parts_f+0x8a>
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	2c 91       	ld	r18, X
    242c:	11 97       	sbiw	r26, 0x01	; 1
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	26 1b       	sub	r18, r22
    2432:	31 09       	sbc	r19, r1
    2434:	41 c0       	rjmp	.+130    	; 0x24b8 <__fpcmp_parts_f+0xae>
    2436:	84 30       	cpi	r24, 0x04	; 4
    2438:	21 f0       	breq	.+8      	; 0x2442 <__fpcmp_parts_f+0x38>
    243a:	92 30       	cpi	r25, 0x02	; 2
    243c:	41 f4       	brne	.+16     	; 0x244e <__fpcmp_parts_f+0x44>
    243e:	82 30       	cpi	r24, 0x02	; 2
    2440:	b1 f1       	breq	.+108    	; 0x24ae <__fpcmp_parts_f+0xa4>
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	8c 91       	ld	r24, X
    2446:	11 97       	sbiw	r26, 0x01	; 1
    2448:	88 23       	and	r24, r24
    244a:	a1 f1       	breq	.+104    	; 0x24b4 <__fpcmp_parts_f+0xaa>
    244c:	2d c0       	rjmp	.+90     	; 0x24a8 <__fpcmp_parts_f+0x9e>
    244e:	61 81       	ldd	r22, Z+1	; 0x01
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	01 f1       	breq	.+64     	; 0x2494 <__fpcmp_parts_f+0x8a>
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	8c 91       	ld	r24, X
    2458:	11 97       	sbiw	r26, 0x01	; 1
    245a:	68 17       	cp	r22, r24
    245c:	d9 f4       	brne	.+54     	; 0x2494 <__fpcmp_parts_f+0x8a>
    245e:	22 81       	ldd	r18, Z+2	; 0x02
    2460:	33 81       	ldd	r19, Z+3	; 0x03
    2462:	12 96       	adiw	r26, 0x02	; 2
    2464:	8d 91       	ld	r24, X+
    2466:	9c 91       	ld	r25, X
    2468:	13 97       	sbiw	r26, 0x03	; 3
    246a:	82 17       	cp	r24, r18
    246c:	93 07       	cpc	r25, r19
    246e:	94 f0       	brlt	.+36     	; 0x2494 <__fpcmp_parts_f+0x8a>
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	bc f0       	brlt	.+46     	; 0x24a4 <__fpcmp_parts_f+0x9a>
    2476:	24 81       	ldd	r18, Z+4	; 0x04
    2478:	35 81       	ldd	r19, Z+5	; 0x05
    247a:	46 81       	ldd	r20, Z+6	; 0x06
    247c:	57 81       	ldd	r21, Z+7	; 0x07
    247e:	14 96       	adiw	r26, 0x04	; 4
    2480:	8d 91       	ld	r24, X+
    2482:	9d 91       	ld	r25, X+
    2484:	0d 90       	ld	r0, X+
    2486:	bc 91       	ld	r27, X
    2488:	a0 2d       	mov	r26, r0
    248a:	82 17       	cp	r24, r18
    248c:	93 07       	cpc	r25, r19
    248e:	a4 07       	cpc	r26, r20
    2490:	b5 07       	cpc	r27, r21
    2492:	18 f4       	brcc	.+6      	; 0x249a <__fpcmp_parts_f+0x90>
    2494:	66 23       	and	r22, r22
    2496:	41 f0       	breq	.+16     	; 0x24a8 <__fpcmp_parts_f+0x9e>
    2498:	0d c0       	rjmp	.+26     	; 0x24b4 <__fpcmp_parts_f+0xaa>
    249a:	28 17       	cp	r18, r24
    249c:	39 07       	cpc	r19, r25
    249e:	4a 07       	cpc	r20, r26
    24a0:	5b 07       	cpc	r21, r27
    24a2:	28 f4       	brcc	.+10     	; 0x24ae <__fpcmp_parts_f+0xa4>
    24a4:	66 23       	and	r22, r22
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <__fpcmp_parts_f+0xaa>
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <__fpcmp_parts_f+0xae>
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <__fpcmp_parts_f+0xae>
    24b4:	2f ef       	ldi	r18, 0xFF	; 255
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	c9 01       	movw	r24, r18
    24ba:	08 95       	ret

000024bc <__mulsi3>:
    24bc:	62 9f       	mul	r22, r18
    24be:	d0 01       	movw	r26, r0
    24c0:	73 9f       	mul	r23, r19
    24c2:	f0 01       	movw	r30, r0
    24c4:	82 9f       	mul	r24, r18
    24c6:	e0 0d       	add	r30, r0
    24c8:	f1 1d       	adc	r31, r1
    24ca:	64 9f       	mul	r22, r20
    24cc:	e0 0d       	add	r30, r0
    24ce:	f1 1d       	adc	r31, r1
    24d0:	92 9f       	mul	r25, r18
    24d2:	f0 0d       	add	r31, r0
    24d4:	83 9f       	mul	r24, r19
    24d6:	f0 0d       	add	r31, r0
    24d8:	74 9f       	mul	r23, r20
    24da:	f0 0d       	add	r31, r0
    24dc:	65 9f       	mul	r22, r21
    24de:	f0 0d       	add	r31, r0
    24e0:	99 27       	eor	r25, r25
    24e2:	72 9f       	mul	r23, r18
    24e4:	b0 0d       	add	r27, r0
    24e6:	e1 1d       	adc	r30, r1
    24e8:	f9 1f       	adc	r31, r25
    24ea:	63 9f       	mul	r22, r19
    24ec:	b0 0d       	add	r27, r0
    24ee:	e1 1d       	adc	r30, r1
    24f0:	f9 1f       	adc	r31, r25
    24f2:	bd 01       	movw	r22, r26
    24f4:	cf 01       	movw	r24, r30
    24f6:	11 24       	eor	r1, r1
    24f8:	08 95       	ret

000024fa <__udivmodhi4>:
    24fa:	aa 1b       	sub	r26, r26
    24fc:	bb 1b       	sub	r27, r27
    24fe:	51 e1       	ldi	r21, 0x11	; 17
    2500:	07 c0       	rjmp	.+14     	; 0x2510 <__udivmodhi4_ep>

00002502 <__udivmodhi4_loop>:
    2502:	aa 1f       	adc	r26, r26
    2504:	bb 1f       	adc	r27, r27
    2506:	a6 17       	cp	r26, r22
    2508:	b7 07       	cpc	r27, r23
    250a:	10 f0       	brcs	.+4      	; 0x2510 <__udivmodhi4_ep>
    250c:	a6 1b       	sub	r26, r22
    250e:	b7 0b       	sbc	r27, r23

00002510 <__udivmodhi4_ep>:
    2510:	88 1f       	adc	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	5a 95       	dec	r21
    2516:	a9 f7       	brne	.-22     	; 0x2502 <__udivmodhi4_loop>
    2518:	80 95       	com	r24
    251a:	90 95       	com	r25
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	08 95       	ret

00002522 <__divmodhi4>:
    2522:	97 fb       	bst	r25, 7
    2524:	09 2e       	mov	r0, r25
    2526:	07 26       	eor	r0, r23
    2528:	0a d0       	rcall	.+20     	; 0x253e <__divmodhi4_neg1>
    252a:	77 fd       	sbrc	r23, 7
    252c:	04 d0       	rcall	.+8      	; 0x2536 <__divmodhi4_neg2>
    252e:	e5 df       	rcall	.-54     	; 0x24fa <__udivmodhi4>
    2530:	06 d0       	rcall	.+12     	; 0x253e <__divmodhi4_neg1>
    2532:	00 20       	and	r0, r0
    2534:	1a f4       	brpl	.+6      	; 0x253c <__divmodhi4_exit>

00002536 <__divmodhi4_neg2>:
    2536:	70 95       	com	r23
    2538:	61 95       	neg	r22
    253a:	7f 4f       	sbci	r23, 0xFF	; 255

0000253c <__divmodhi4_exit>:
    253c:	08 95       	ret

0000253e <__divmodhi4_neg1>:
    253e:	f6 f7       	brtc	.-4      	; 0x253c <__divmodhi4_exit>
    2540:	90 95       	com	r25
    2542:	81 95       	neg	r24
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	08 95       	ret

00002548 <__udivmodsi4>:
    2548:	a1 e2       	ldi	r26, 0x21	; 33
    254a:	1a 2e       	mov	r1, r26
    254c:	aa 1b       	sub	r26, r26
    254e:	bb 1b       	sub	r27, r27
    2550:	fd 01       	movw	r30, r26
    2552:	0d c0       	rjmp	.+26     	; 0x256e <__udivmodsi4_ep>

00002554 <__udivmodsi4_loop>:
    2554:	aa 1f       	adc	r26, r26
    2556:	bb 1f       	adc	r27, r27
    2558:	ee 1f       	adc	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	a2 17       	cp	r26, r18
    255e:	b3 07       	cpc	r27, r19
    2560:	e4 07       	cpc	r30, r20
    2562:	f5 07       	cpc	r31, r21
    2564:	20 f0       	brcs	.+8      	; 0x256e <__udivmodsi4_ep>
    2566:	a2 1b       	sub	r26, r18
    2568:	b3 0b       	sbc	r27, r19
    256a:	e4 0b       	sbc	r30, r20
    256c:	f5 0b       	sbc	r31, r21

0000256e <__udivmodsi4_ep>:
    256e:	66 1f       	adc	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	88 1f       	adc	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	1a 94       	dec	r1
    2578:	69 f7       	brne	.-38     	; 0x2554 <__udivmodsi4_loop>
    257a:	60 95       	com	r22
    257c:	70 95       	com	r23
    257e:	80 95       	com	r24
    2580:	90 95       	com	r25
    2582:	9b 01       	movw	r18, r22
    2584:	ac 01       	movw	r20, r24
    2586:	bd 01       	movw	r22, r26
    2588:	cf 01       	movw	r24, r30
    258a:	08 95       	ret

0000258c <__prologue_saves__>:
    258c:	2f 92       	push	r2
    258e:	3f 92       	push	r3
    2590:	4f 92       	push	r4
    2592:	5f 92       	push	r5
    2594:	6f 92       	push	r6
    2596:	7f 92       	push	r7
    2598:	8f 92       	push	r8
    259a:	9f 92       	push	r9
    259c:	af 92       	push	r10
    259e:	bf 92       	push	r11
    25a0:	cf 92       	push	r12
    25a2:	df 92       	push	r13
    25a4:	ef 92       	push	r14
    25a6:	ff 92       	push	r15
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	ca 1b       	sub	r28, r26
    25b6:	db 0b       	sbc	r29, r27
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	09 94       	ijmp

000025be <__epilogue_restores__>:
    25be:	2a 88       	ldd	r2, Y+18	; 0x12
    25c0:	39 88       	ldd	r3, Y+17	; 0x11
    25c2:	48 88       	ldd	r4, Y+16	; 0x10
    25c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    25cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    25d0:	b9 84       	ldd	r11, Y+9	; 0x09
    25d2:	c8 84       	ldd	r12, Y+8	; 0x08
    25d4:	df 80       	ldd	r13, Y+7	; 0x07
    25d6:	ee 80       	ldd	r14, Y+6	; 0x06
    25d8:	fd 80       	ldd	r15, Y+5	; 0x05
    25da:	0c 81       	ldd	r16, Y+4	; 0x04
    25dc:	1b 81       	ldd	r17, Y+3	; 0x03
    25de:	aa 81       	ldd	r26, Y+2	; 0x02
    25e0:	b9 81       	ldd	r27, Y+1	; 0x01
    25e2:	ce 0f       	add	r28, r30
    25e4:	d1 1d       	adc	r29, r1
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	ed 01       	movw	r28, r26
    25ec:	08 95       	ret

000025ee <_exit>:
    25ee:	f8 94       	cli

000025f0 <__stop_program>:
    25f0:	ff cf       	rjmp	.-2      	; 0x25f0 <__stop_program>
