
GnarpAVRSTUDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00802000  00002170  00002204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00802108  00802108  0000230c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003b7  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bee  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001184  00000000  00000000  00005b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f8e  00000000  00000000  00006d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00008c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008b7  00000000  00000000  00008f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cdd  00000000  00000000  000097eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000067c  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000ab44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	11 e2       	ldi	r17, 0x21	; 33
     186:	a8 e0       	ldi	r26, 0x08	; 8
     188:	b1 e2       	ldi	r27, 0x21	; 33
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a7 32       	cpi	r26, 0x27	; 39
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_copy_data>:
     194:	11 e2       	ldi	r17, 0x21	; 33
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e2       	ldi	r27, 0x20	; 32
     19a:	e0 e7       	ldi	r30, 0x70	; 112
     19c:	f1 e2       	ldi	r31, 0x21	; 33
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a8 30       	cpi	r26, 0x08	; 8
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>
     1aa:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <main>
     1ae:	0c 94 b6 10 	jmp	0x216c	; 0x216c <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <mcuStartup>:
	//needs to have URSEL set in order to write into this reg
//	UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);



void mcuStartup(){
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <mcuStartup+0x6>
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62

    //CLOCK AND PLL SETUP
	unsigned char XOSCTEST = 0;
     1c0:	19 82       	std	Y+1, r1	; 0x01
	unsigned char PLLMULTFACTOR;
	PLLMULTFACTOR = 0x02;		//Set the PLL Multiplication Factor to 2x.
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	8a 83       	std	Y+2, r24	; 0x02
	CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	fc 01       	movw	r30, r24
     1ce:	21 83       	std	Z+1, r18	; 0x01
	CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	24 e0       	ldi	r18, 0x04	; 4
     1d6:	fc 01       	movw	r30, r24
     1d8:	23 83       	std	Z+3, r18	; 0x03
	OSC.XOSCCTRL = 0x8B;
     1da:	80 e5       	ldi	r24, 0x50	; 80
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	2b e8       	ldi	r18, 0x8B	; 139
     1e0:	fc 01       	movw	r30, r24
     1e2:	22 83       	std	Z+2, r18	; 0x02
	OSC.CTRL = 0x08;			//Once XOOSCTEST equals 1, it will exit the do loop and enable the external oscillator.
     1e4:	80 e5       	ldi	r24, 0x50	; 80
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	28 e0       	ldi	r18, 0x08	; 8
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
	for (XOSCTEST = 0; XOSCTEST < 1; )
     1ee:	19 82       	std	Y+1, r1	; 0x01
     1f0:	09 c0       	rjmp	.+18     	; 0x204 <mcuStartup+0x4e>
		XOSCTEST = OSC.STATUS >> 3 &1;
     1f2:	80 e5       	ldi	r24, 0x50	; 80
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	fc 01       	movw	r30, r24
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	86 95       	lsr	r24
     1fc:	86 95       	lsr	r24
     1fe:	86 95       	lsr	r24
     200:	81 70       	andi	r24, 0x01	; 1
     202:	89 83       	std	Y+1, r24	; 0x01
	PLLMULTFACTOR = 0x02;		//Set the PLL Multiplication Factor to 2x.
	CLK.PSCTRL = 0x01;			//Set Prescaler to 1.
	CLK.RTCCTRL = 0x04;			//Set Real Time Clock Control to internal RCOSC but do not enable.
	OSC.XOSCCTRL = 0x8B;
	OSC.CTRL = 0x08;			//Once XOOSCTEST equals 1, it will exit the do loop and enable the external oscillator.
	for (XOSCTEST = 0; XOSCTEST < 1; )
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	88 23       	and	r24, r24
     208:	a1 f3       	breq	.-24     	; 0x1f2 <mcuStartup+0x3c>
		XOSCTEST = OSC.STATUS >> 3 &1;
	OSC.PLLCTRL = 0xC0 + PLLMULTFACTOR;	//Set the PLL to use the external crystal and set multiplication factor.
     20a:	80 e5       	ldi	r24, 0x50	; 80
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	2a 81       	ldd	r18, Y+2	; 0x02
     210:	20 54       	subi	r18, 0x40	; 64
     212:	fc 01       	movw	r30, r24
     214:	25 83       	std	Z+5, r18	; 0x05
	OSC.CTRL = 0x18;			//Enable the PLL, disable the External Clock.
     216:	80 e5       	ldi	r24, 0x50	; 80
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	28 e1       	ldi	r18, 0x18	; 24
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
	XOSCTEST = 0;
     220:	19 82       	std	Y+1, r1	; 0x01
	for (XOSCTEST = 0; XOSCTEST < 1; )
     222:	19 82       	std	Y+1, r1	; 0x01
     224:	08 c0       	rjmp	.+16     	; 0x236 <mcuStartup+0x80>
		XOSCTEST = OSC.STATUS >> 4 &1;
     226:	80 e5       	ldi	r24, 0x50	; 80
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	fc 01       	movw	r30, r24
     22c:	81 81       	ldd	r24, Z+1	; 0x01
     22e:	82 95       	swap	r24
     230:	8f 70       	andi	r24, 0x0F	; 15
     232:	81 70       	andi	r24, 0x01	; 1
     234:	89 83       	std	Y+1, r24	; 0x01
	for (XOSCTEST = 0; XOSCTEST < 1; )
		XOSCTEST = OSC.STATUS >> 3 &1;
	OSC.PLLCTRL = 0xC0 + PLLMULTFACTOR;	//Set the PLL to use the external crystal and set multiplication factor.
	OSC.CTRL = 0x18;			//Enable the PLL, disable the External Clock.
	XOSCTEST = 0;
	for (XOSCTEST = 0; XOSCTEST < 1; )
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	88 23       	and	r24, r24
     23a:	a9 f3       	breq	.-22     	; 0x226 <mcuStartup+0x70>
		XOSCTEST = OSC.STATUS >> 4 &1;
	CCP = 0xD8;					//Configuration Change Protection, write signature to change Clock to PLL.
     23c:	84 e3       	ldi	r24, 0x34	; 52
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 ed       	ldi	r18, 0xD8	; 216
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
	CLK.CTRL = 0x04;			//Set the Clock to PLL
     246:	80 e4       	ldi	r24, 0x40	; 64
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	24 e0       	ldi	r18, 0x04	; 4
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
		Sync Out		-	PORTE.0 (ASYNC Interrupt / OC0C?)

*/

    // I/O DIRECTION SETUP
    PORTA.DIR = 0x06;        //1 and 2 output
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	96 e0       	ldi	r25, 0x06	; 6
     254:	26 e0       	ldi	r18, 0x06	; 6
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
    PORTB.DIR = 0x00;        //No output
     25a:	80 e2       	ldi	r24, 0x20	; 32
     25c:	96 e0       	ldi	r25, 0x06	; 6
     25e:	fc 01       	movw	r30, r24
     260:	10 82       	st	Z, r1
    PORTC.DIR = 0xF8;        //4-7 output
     262:	80 e4       	ldi	r24, 0x40	; 64
     264:	96 e0       	ldi	r25, 0x06	; 6
     266:	28 ef       	ldi	r18, 0xF8	; 248
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
    PORTD.DIR = 0xBF;        //0-6, 8 output
     26c:	80 e6       	ldi	r24, 0x60	; 96
     26e:	96 e0       	ldi	r25, 0x06	; 6
     270:	2f eb       	ldi	r18, 0xBF	; 191
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
    PORTE.DIR = 0x01;
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	96 e0       	ldi	r25, 0x06	; 6
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18


    // USART SETUP
	cli();						//disable global interrupts
     280:	f8 94       	cli
	USARTD1.CTRLA = 0x27;		//enable RX interrupt as Medium Level, TX interrupt as Low Level, DRE as Hi Level
     282:	80 eb       	ldi	r24, 0xB0	; 176
     284:	99 e0       	ldi	r25, 0x09	; 9
     286:	27 e2       	ldi	r18, 0x27	; 39
     288:	fc 01       	movw	r30, r24
     28a:	23 83       	std	Z+3, r18	; 0x03
	USARTD1.CTRLB = 0x18;		//set RXEN and TXEN in CTRLB Register to enable USART reciever and transmitter
     28c:	80 eb       	ldi	r24, 0xB0	; 176
     28e:	99 e0       	ldi	r25, 0x09	; 9
     290:	28 e1       	ldi	r18, 0x18	; 24
     292:	fc 01       	movw	r30, r24
     294:	24 83       	std	Z+4, r18	; 0x04
	USARTD1.CTRLC = 0x03;		//Asynchronous, Parity disabled, Single stop bit, 8 bit character size
     296:	80 eb       	ldi	r24, 0xB0	; 176
     298:	99 e0       	ldi	r25, 0x09	; 9
     29a:	23 e0       	ldi	r18, 0x03	; 3
     29c:	fc 01       	movw	r30, r24
     29e:	25 83       	std	Z+5, r18	; 0x05
	USARTD1.BAUDCTRLA = 0x2F;	//BSEL = 47
     2a0:	80 eb       	ldi	r24, 0xB0	; 176
     2a2:	99 e0       	ldi	r25, 0x09	; 9
     2a4:	2f e2       	ldi	r18, 0x2F	; 47
     2a6:	fc 01       	movw	r30, r24
     2a8:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x00;	//BSCALE = 0
     2aa:	80 eb       	ldi	r24, 0xB0	; 176
     2ac:	99 e0       	ldi	r25, 0x09	; 9
     2ae:	fc 01       	movw	r30, r24
     2b0:	17 82       	std	Z+7, r1	; 0x07
	PMIC.CTRL |= 0x07;			//enable all levels on interrupts
     2b2:	80 ea       	ldi	r24, 0xA0	; 160
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	20 ea       	ldi	r18, 0xA0	; 160
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	f9 01       	movw	r30, r18
     2bc:	22 81       	ldd	r18, Z+2	; 0x02
     2be:	27 60       	ori	r18, 0x07	; 7
     2c0:	fc 01       	movw	r30, r24
     2c2:	22 83       	std	Z+2, r18	; 0x02
	sei();						//enable global interrupts
     2c4:	78 94       	sei

}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <testLED>:

void testLED() {
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	28 97       	sbiw	r28, 0x08	; 8
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	de bf       	out	0x3e, r29	; 62
	PORTC.DIR = 0x08;
     2de:	80 e4       	ldi	r24, 0x40	; 64
     2e0:	96 e0       	ldi	r25, 0x06	; 6
     2e2:	28 e0       	ldi	r18, 0x08	; 8
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18

	uint32_t n = 0x0FF0;
     2e8:	80 ef       	ldi	r24, 0xF0	; 240
     2ea:	9f e0       	ldi	r25, 0x0F	; 15
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	9a 83       	std	Y+2, r25	; 0x02
     2f4:	ab 83       	std	Y+3, r26	; 0x03
     2f6:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t i = 0;
     2f8:	1d 82       	std	Y+5, r1	; 0x05
     2fa:	1e 82       	std	Y+6, r1	; 0x06
     2fc:	1f 82       	std	Y+7, r1	; 0x07
     2fe:	18 86       	std	Y+8, r1	; 0x08
     300:	01 c0       	rjmp	.+2      	; 0x304 <testLED+0x34>
			n = 3*n/4;
		}

		if (n < 0x000F)
			n = 0x0FF0;
	}
     302:	00 00       	nop

	uint32_t n = 0x0FF0;
	uint32_t i = 0;

	while (1){
		if (i > n/2)
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	ab 81       	ldd	r26, Y+3	; 0x03
     30a:	bc 81       	ldd	r27, Y+4	; 0x04
     30c:	9c 01       	movw	r18, r24
     30e:	ad 01       	movw	r20, r26
     310:	56 95       	lsr	r21
     312:	47 95       	ror	r20
     314:	37 95       	ror	r19
     316:	27 95       	ror	r18
     318:	8d 81       	ldd	r24, Y+5	; 0x05
     31a:	9e 81       	ldd	r25, Y+6	; 0x06
     31c:	af 81       	ldd	r26, Y+7	; 0x07
     31e:	b8 85       	ldd	r27, Y+8	; 0x08
     320:	28 17       	cp	r18, r24
     322:	39 07       	cpc	r19, r25
     324:	4a 07       	cpc	r20, r26
     326:	5b 07       	cpc	r21, r27
     328:	30 f4       	brcc	.+12     	; 0x336 <testLED+0x66>
			PORTC.OUTSET = 0x08;
     32a:	80 e4       	ldi	r24, 0x40	; 64
     32c:	96 e0       	ldi	r25, 0x06	; 6
     32e:	28 e0       	ldi	r18, 0x08	; 8
     330:	fc 01       	movw	r30, r24
     332:	25 83       	std	Z+5, r18	; 0x05
     334:	05 c0       	rjmp	.+10     	; 0x340 <testLED+0x70>
		else
			PORTC.OUTCLR = 0x08;
     336:	80 e4       	ldi	r24, 0x40	; 64
     338:	96 e0       	ldi	r25, 0x06	; 6
     33a:	28 e0       	ldi	r18, 0x08	; 8
     33c:	fc 01       	movw	r30, r24
     33e:	26 83       	std	Z+6, r18	; 0x06

		i++;
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	af 81       	ldd	r26, Y+7	; 0x07
     346:	b8 85       	ldd	r27, Y+8	; 0x08
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	a1 1d       	adc	r26, r1
     34c:	b1 1d       	adc	r27, r1
     34e:	8d 83       	std	Y+5, r24	; 0x05
     350:	9e 83       	std	Y+6, r25	; 0x06
     352:	af 83       	std	Y+7, r26	; 0x07
     354:	b8 87       	std	Y+8, r27	; 0x08

		if (i > n){
     356:	2d 81       	ldd	r18, Y+5	; 0x05
     358:	3e 81       	ldd	r19, Y+6	; 0x06
     35a:	4f 81       	ldd	r20, Y+7	; 0x07
     35c:	58 85       	ldd	r21, Y+8	; 0x08
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	ab 81       	ldd	r26, Y+3	; 0x03
     364:	bc 81       	ldd	r27, Y+4	; 0x04
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	a4 07       	cpc	r26, r20
     36c:	b5 07       	cpc	r27, r21
     36e:	f0 f4       	brcc	.+60     	; 0x3ac <testLED+0xdc>
			i = 0;
     370:	1d 82       	std	Y+5, r1	; 0x05
     372:	1e 82       	std	Y+6, r1	; 0x06
     374:	1f 82       	std	Y+7, r1	; 0x07
     376:	18 86       	std	Y+8, r1	; 0x08
			n = 3*n/4;
     378:	29 81       	ldd	r18, Y+1	; 0x01
     37a:	3a 81       	ldd	r19, Y+2	; 0x02
     37c:	4b 81       	ldd	r20, Y+3	; 0x03
     37e:	5c 81       	ldd	r21, Y+4	; 0x04
     380:	da 01       	movw	r26, r20
     382:	c9 01       	movw	r24, r18
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	aa 1f       	adc	r26, r26
     38a:	bb 1f       	adc	r27, r27
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	a4 1f       	adc	r26, r20
     392:	b5 1f       	adc	r27, r21
     394:	b6 95       	lsr	r27
     396:	a7 95       	ror	r26
     398:	97 95       	ror	r25
     39a:	87 95       	ror	r24
     39c:	b6 95       	lsr	r27
     39e:	a7 95       	ror	r26
     3a0:	97 95       	ror	r25
     3a2:	87 95       	ror	r24
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	9a 83       	std	Y+2, r25	; 0x02
     3a8:	ab 83       	std	Y+3, r26	; 0x03
     3aa:	bc 83       	std	Y+4, r27	; 0x04
		}

		if (n < 0x000F)
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	ab 81       	ldd	r26, Y+3	; 0x03
     3b2:	bc 81       	ldd	r27, Y+4	; 0x04
     3b4:	8f 30       	cpi	r24, 0x0F	; 15
     3b6:	91 05       	cpc	r25, r1
     3b8:	a1 05       	cpc	r26, r1
     3ba:	b1 05       	cpc	r27, r1
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <testLED+0xf0>
     3be:	a1 cf       	rjmp	.-190    	; 0x302 <testLED+0x32>
			n = 0x0FF0;
     3c0:	80 ef       	ldi	r24, 0xF0	; 240
     3c2:	9f e0       	ldi	r25, 0x0F	; 15
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	ab 83       	std	Y+3, r26	; 0x03
     3ce:	bc 83       	std	Y+4, r27	; 0x04
	}
     3d0:	99 cf       	rjmp	.-206    	; 0x304 <testLED+0x34>

000003d2 <testLED_TOGGLESW>:
}

void testLED_TOGGLESW(){
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	28 97       	sbiw	r28, 0x08	; 8
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	de bf       	out	0x3e, r29	; 62
	PORTC.DIRSET = 0x08;
     3e0:	80 e4       	ldi	r24, 0x40	; 64
     3e2:	96 e0       	ldi	r25, 0x06	; 6
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	fc 01       	movw	r30, r24
     3e8:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRCLR = 0x08;
     3ea:	80 e8       	ldi	r24, 0x80	; 128
     3ec:	96 e0       	ldi	r25, 0x06	; 6
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	fc 01       	movw	r30, r24
     3f2:	22 83       	std	Z+2, r18	; 0x02

	uint32_t n;
	uint32_t i;

	while (1){
		n = 0xFFF0;
     3f4:	80 ef       	ldi	r24, 0xF0	; 240
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	a0 e0       	ldi	r26, 0x00	; 0
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	89 83       	std	Y+1, r24	; 0x01
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	ab 83       	std	Y+3, r26	; 0x03
     402:	bc 83       	std	Y+4, r27	; 0x04
		i = 0;
     404:	1d 82       	std	Y+5, r1	; 0x05
     406:	1e 82       	std	Y+6, r1	; 0x06
     408:	1f 82       	std	Y+7, r1	; 0x07
     40a:	18 86       	std	Y+8, r1	; 0x08
		PORTC.OUTSET = 0x08;
     40c:	80 e4       	ldi	r24, 0x40	; 64
     40e:	96 e0       	ldi	r25, 0x06	; 6
     410:	28 e0       	ldi	r18, 0x08	; 8
     412:	fc 01       	movw	r30, r24
     414:	25 83       	std	Z+5, r18	; 0x05

		while (PORTE.IN & 0x08){
     416:	65 c0       	rjmp	.+202    	; 0x4e2 <testLED_TOGGLESW+0x110>
			if (i > n/2)
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	ab 81       	ldd	r26, Y+3	; 0x03
     41e:	bc 81       	ldd	r27, Y+4	; 0x04
     420:	9c 01       	movw	r18, r24
     422:	ad 01       	movw	r20, r26
     424:	56 95       	lsr	r21
     426:	47 95       	ror	r20
     428:	37 95       	ror	r19
     42a:	27 95       	ror	r18
     42c:	8d 81       	ldd	r24, Y+5	; 0x05
     42e:	9e 81       	ldd	r25, Y+6	; 0x06
     430:	af 81       	ldd	r26, Y+7	; 0x07
     432:	b8 85       	ldd	r27, Y+8	; 0x08
     434:	28 17       	cp	r18, r24
     436:	39 07       	cpc	r19, r25
     438:	4a 07       	cpc	r20, r26
     43a:	5b 07       	cpc	r21, r27
     43c:	30 f4       	brcc	.+12     	; 0x44a <testLED_TOGGLESW+0x78>
				PORTC.OUTSET = 0x08;
     43e:	80 e4       	ldi	r24, 0x40	; 64
     440:	96 e0       	ldi	r25, 0x06	; 6
     442:	28 e0       	ldi	r18, 0x08	; 8
     444:	fc 01       	movw	r30, r24
     446:	25 83       	std	Z+5, r18	; 0x05
     448:	05 c0       	rjmp	.+10     	; 0x454 <testLED_TOGGLESW+0x82>
			else
				PORTC.OUTCLR = 0x08;
     44a:	80 e4       	ldi	r24, 0x40	; 64
     44c:	96 e0       	ldi	r25, 0x06	; 6
     44e:	28 e0       	ldi	r18, 0x08	; 8
     450:	fc 01       	movw	r30, r24
     452:	26 83       	std	Z+6, r18	; 0x06

			i++;
     454:	8d 81       	ldd	r24, Y+5	; 0x05
     456:	9e 81       	ldd	r25, Y+6	; 0x06
     458:	af 81       	ldd	r26, Y+7	; 0x07
     45a:	b8 85       	ldd	r27, Y+8	; 0x08
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	a1 1d       	adc	r26, r1
     460:	b1 1d       	adc	r27, r1
     462:	8d 83       	std	Y+5, r24	; 0x05
     464:	9e 83       	std	Y+6, r25	; 0x06
     466:	af 83       	std	Y+7, r26	; 0x07
     468:	b8 87       	std	Y+8, r27	; 0x08

			if (i > n){
     46a:	2d 81       	ldd	r18, Y+5	; 0x05
     46c:	3e 81       	ldd	r19, Y+6	; 0x06
     46e:	4f 81       	ldd	r20, Y+7	; 0x07
     470:	58 85       	ldd	r21, Y+8	; 0x08
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	ab 81       	ldd	r26, Y+3	; 0x03
     478:	bc 81       	ldd	r27, Y+4	; 0x04
     47a:	82 17       	cp	r24, r18
     47c:	93 07       	cpc	r25, r19
     47e:	a4 07       	cpc	r26, r20
     480:	b5 07       	cpc	r27, r21
     482:	f0 f4       	brcc	.+60     	; 0x4c0 <testLED_TOGGLESW+0xee>
				i = 0;
     484:	1d 82       	std	Y+5, r1	; 0x05
     486:	1e 82       	std	Y+6, r1	; 0x06
     488:	1f 82       	std	Y+7, r1	; 0x07
     48a:	18 86       	std	Y+8, r1	; 0x08
				n = 3*n/4;
     48c:	29 81       	ldd	r18, Y+1	; 0x01
     48e:	3a 81       	ldd	r19, Y+2	; 0x02
     490:	4b 81       	ldd	r20, Y+3	; 0x03
     492:	5c 81       	ldd	r21, Y+4	; 0x04
     494:	da 01       	movw	r26, r20
     496:	c9 01       	movw	r24, r18
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	aa 1f       	adc	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	a4 1f       	adc	r26, r20
     4a6:	b5 1f       	adc	r27, r21
     4a8:	b6 95       	lsr	r27
     4aa:	a7 95       	ror	r26
     4ac:	97 95       	ror	r25
     4ae:	87 95       	ror	r24
     4b0:	b6 95       	lsr	r27
     4b2:	a7 95       	ror	r26
     4b4:	97 95       	ror	r25
     4b6:	87 95       	ror	r24
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	ab 83       	std	Y+3, r26	; 0x03
     4be:	bc 83       	std	Y+4, r27	; 0x04
			}

			if (n < 0x000F)
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	ab 81       	ldd	r26, Y+3	; 0x03
     4c6:	bc 81       	ldd	r27, Y+4	; 0x04
     4c8:	8f 30       	cpi	r24, 0x0F	; 15
     4ca:	91 05       	cpc	r25, r1
     4cc:	a1 05       	cpc	r26, r1
     4ce:	b1 05       	cpc	r27, r1
     4d0:	40 f4       	brcc	.+16     	; 0x4e2 <testLED_TOGGLESW+0x110>
				n = 0xFFF0;
     4d2:	80 ef       	ldi	r24, 0xF0	; 240
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	a0 e0       	ldi	r26, 0x00	; 0
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	89 83       	std	Y+1, r24	; 0x01
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	ab 83       	std	Y+3, r26	; 0x03
     4e0:	bc 83       	std	Y+4, r27	; 0x04
	while (1){
		n = 0xFFF0;
		i = 0;
		PORTC.OUTSET = 0x08;

		while (PORTE.IN & 0x08){
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 85       	ldd	r24, Z+8	; 0x08
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	88 70       	andi	r24, 0x08	; 8
     4f0:	90 70       	andi	r25, 0x00	; 0
     4f2:	00 97       	sbiw	r24, 0x00	; 0
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <testLED_TOGGLESW+0x126>
     4f6:	90 cf       	rjmp	.-224    	; 0x418 <testLED_TOGGLESW+0x46>
			}

			if (n < 0x000F)
				n = 0xFFF0;
		}
	}
     4f8:	7d cf       	rjmp	.-262    	; 0x3f4 <testLED_TOGGLESW+0x22>

000004fa <testOUTTGL>:
}

void testOUTTGL() {
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	28 97       	sbiw	r28, 0x08	; 8
     504:	cd bf       	out	0x3d, r28	; 61
     506:	de bf       	out	0x3e, r29	; 62
	PORTC.DIRSET = 0x08;
     508:	80 e4       	ldi	r24, 0x40	; 64
     50a:	96 e0       	ldi	r25, 0x06	; 6
     50c:	28 e0       	ldi	r18, 0x08	; 8
     50e:	fc 01       	movw	r30, r24
     510:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRCLR = 0x08;
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	96 e0       	ldi	r25, 0x06	; 6
     516:	28 e0       	ldi	r18, 0x08	; 8
     518:	fc 01       	movw	r30, r24
     51a:	22 83       	std	Z+2, r18	; 0x02

	uint32_t n;
	uint32_t i = 0;
     51c:	1d 82       	std	Y+5, r1	; 0x05
     51e:	1e 82       	std	Y+6, r1	; 0x06
     520:	1f 82       	std	Y+7, r1	; 0x07
     522:	18 86       	std	Y+8, r1	; 0x08
     524:	01 c0       	rjmp	.+2      	; 0x528 <testOUTTGL+0x2e>
		i++;
		if (i > n){
			PORTC.OUTTGL = 0x08;
			i = 0;
		}
	}
     526:	00 00       	nop

	uint32_t n;
	uint32_t i = 0;

	while (1){
		if (PORTE.IN & 0x08)
     528:	80 e8       	ldi	r24, 0x80	; 128
     52a:	96 e0       	ldi	r25, 0x06	; 6
     52c:	fc 01       	movw	r30, r24
     52e:	80 85       	ldd	r24, Z+8	; 0x08
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	88 70       	andi	r24, 0x08	; 8
     536:	90 70       	andi	r25, 0x00	; 0
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	49 f0       	breq	.+18     	; 0x54e <testOUTTGL+0x54>
			n = 0x0EF0;
     53c:	80 ef       	ldi	r24, 0xF0	; 240
     53e:	9e e0       	ldi	r25, 0x0E	; 14
     540:	a0 e0       	ldi	r26, 0x00	; 0
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	ab 83       	std	Y+3, r26	; 0x03
     54a:	bc 83       	std	Y+4, r27	; 0x04
     54c:	08 c0       	rjmp	.+16     	; 0x55e <testOUTTGL+0x64>
		else
			n = 0x0900;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	9a 83       	std	Y+2, r25	; 0x02
     55a:	ab 83       	std	Y+3, r26	; 0x03
     55c:	bc 83       	std	Y+4, r27	; 0x04
		i++;
     55e:	8d 81       	ldd	r24, Y+5	; 0x05
     560:	9e 81       	ldd	r25, Y+6	; 0x06
     562:	af 81       	ldd	r26, Y+7	; 0x07
     564:	b8 85       	ldd	r27, Y+8	; 0x08
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	a1 1d       	adc	r26, r1
     56a:	b1 1d       	adc	r27, r1
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	9e 83       	std	Y+6, r25	; 0x06
     570:	af 83       	std	Y+7, r26	; 0x07
     572:	b8 87       	std	Y+8, r27	; 0x08
		if (i > n){
     574:	2d 81       	ldd	r18, Y+5	; 0x05
     576:	3e 81       	ldd	r19, Y+6	; 0x06
     578:	4f 81       	ldd	r20, Y+7	; 0x07
     57a:	58 85       	ldd	r21, Y+8	; 0x08
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	ab 81       	ldd	r26, Y+3	; 0x03
     582:	bc 81       	ldd	r27, Y+4	; 0x04
     584:	82 17       	cp	r24, r18
     586:	93 07       	cpc	r25, r19
     588:	a4 07       	cpc	r26, r20
     58a:	b5 07       	cpc	r27, r21
     58c:	60 f6       	brcc	.-104    	; 0x526 <testOUTTGL+0x2c>
			PORTC.OUTTGL = 0x08;
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	96 e0       	ldi	r25, 0x06	; 6
     592:	28 e0       	ldi	r18, 0x08	; 8
     594:	fc 01       	movw	r30, r24
     596:	27 83       	std	Z+7, r18	; 0x07
			i = 0;
     598:	1d 82       	std	Y+5, r1	; 0x05
     59a:	1e 82       	std	Y+6, r1	; 0x06
     59c:	1f 82       	std	Y+7, r1	; 0x07
     59e:	18 86       	std	Y+8, r1	; 0x08
		}
	}
     5a0:	c3 cf       	rjmp	.-122    	; 0x528 <testOUTTGL+0x2e>

000005a2 <testLEDfade>:
		if (n < 0x000F)
			n = 0x0FF0;
	}
}

void testLEDfade(){
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2c 97       	sbiw	r28, 0x0c	; 12
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	de bf       	out	0x3e, r29	; 62
	PORTC.DIRSET = 0x08;
     5b0:	80 e4       	ldi	r24, 0x40	; 64
     5b2:	96 e0       	ldi	r25, 0x06	; 6
     5b4:	28 e0       	ldi	r18, 0x08	; 8
     5b6:	fc 01       	movw	r30, r24
     5b8:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRCLR = 0x08;
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	96 e0       	ldi	r25, 0x06	; 6
     5be:	28 e0       	ldi	r18, 0x08	; 8
     5c0:	fc 01       	movw	r30, r24
     5c2:	22 83       	std	Z+2, r18	; 0x02

	uint32_t n = 100;
     5c4:	84 e6       	ldi	r24, 0x64	; 100
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	89 87       	std	Y+9, r24	; 0x09
     5ce:	9a 87       	std	Y+10, r25	; 0x0a
     5d0:	ab 87       	std	Y+11, r26	; 0x0b
     5d2:	bc 87       	std	Y+12, r27	; 0x0c
	uint32_t x = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	ab 83       	std	Y+3, r26	; 0x03
     5e2:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t i = 0;
     5e4:	1d 82       	std	Y+5, r1	; 0x05
     5e6:	1e 82       	std	Y+6, r1	; 0x06
     5e8:	1f 82       	std	Y+7, r1	; 0x07
     5ea:	18 86       	std	Y+8, r1	; 0x08
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <testLEDfade+0x4e>

		i++;
		if (i>n)
			i=0;

	}
     5ee:	00 00       	nop
	uint32_t n = 100;
	uint32_t x = 1;
	uint32_t i = 0;

	while(1){
		if (PORTE.IN & 0x08)
     5f0:	80 e8       	ldi	r24, 0x80	; 128
     5f2:	96 e0       	ldi	r25, 0x06	; 6
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 85       	ldd	r24, Z+8	; 0x08
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	88 70       	andi	r24, 0x08	; 8
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	49 f0       	breq	.+18     	; 0x616 <testLEDfade+0x74>
			x = n;
     604:	89 85       	ldd	r24, Y+9	; 0x09
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	ab 85       	ldd	r26, Y+11	; 0x0b
     60a:	bc 85       	ldd	r27, Y+12	; 0x0c
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	ab 83       	std	Y+3, r26	; 0x03
     612:	bc 83       	std	Y+4, r27	; 0x04
     614:	08 c0       	rjmp	.+16     	; 0x626 <testLEDfade+0x84>
		else
			x = 10;
     616:	8a e0       	ldi	r24, 0x0A	; 10
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	89 83       	std	Y+1, r24	; 0x01
     620:	9a 83       	std	Y+2, r25	; 0x02
     622:	ab 83       	std	Y+3, r26	; 0x03
     624:	bc 83       	std	Y+4, r27	; 0x04

		if (i <= x)
     626:	2d 81       	ldd	r18, Y+5	; 0x05
     628:	3e 81       	ldd	r19, Y+6	; 0x06
     62a:	4f 81       	ldd	r20, Y+7	; 0x07
     62c:	58 85       	ldd	r21, Y+8	; 0x08
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	ab 81       	ldd	r26, Y+3	; 0x03
     634:	bc 81       	ldd	r27, Y+4	; 0x04
     636:	82 17       	cp	r24, r18
     638:	93 07       	cpc	r25, r19
     63a:	a4 07       	cpc	r26, r20
     63c:	b5 07       	cpc	r27, r21
     63e:	30 f0       	brcs	.+12     	; 0x64c <testLEDfade+0xaa>
			PORTC.OUTCLR = 0x08;
     640:	80 e4       	ldi	r24, 0x40	; 64
     642:	96 e0       	ldi	r25, 0x06	; 6
     644:	28 e0       	ldi	r18, 0x08	; 8
     646:	fc 01       	movw	r30, r24
     648:	26 83       	std	Z+6, r18	; 0x06
     64a:	05 c0       	rjmp	.+10     	; 0x656 <testLEDfade+0xb4>
		else
			PORTC.OUTSET = 0x08;
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	96 e0       	ldi	r25, 0x06	; 6
     650:	28 e0       	ldi	r18, 0x08	; 8
     652:	fc 01       	movw	r30, r24
     654:	25 83       	std	Z+5, r18	; 0x05

		i++;
     656:	8d 81       	ldd	r24, Y+5	; 0x05
     658:	9e 81       	ldd	r25, Y+6	; 0x06
     65a:	af 81       	ldd	r26, Y+7	; 0x07
     65c:	b8 85       	ldd	r27, Y+8	; 0x08
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	a1 1d       	adc	r26, r1
     662:	b1 1d       	adc	r27, r1
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	9e 83       	std	Y+6, r25	; 0x06
     668:	af 83       	std	Y+7, r26	; 0x07
     66a:	b8 87       	std	Y+8, r27	; 0x08
		if (i>n)
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	3e 81       	ldd	r19, Y+6	; 0x06
     670:	4f 81       	ldd	r20, Y+7	; 0x07
     672:	58 85       	ldd	r21, Y+8	; 0x08
     674:	89 85       	ldd	r24, Y+9	; 0x09
     676:	9a 85       	ldd	r25, Y+10	; 0x0a
     678:	ab 85       	ldd	r26, Y+11	; 0x0b
     67a:	bc 85       	ldd	r27, Y+12	; 0x0c
     67c:	82 17       	cp	r24, r18
     67e:	93 07       	cpc	r25, r19
     680:	a4 07       	cpc	r26, r20
     682:	b5 07       	cpc	r27, r21
     684:	08 f0       	brcs	.+2      	; 0x688 <testLEDfade+0xe6>
     686:	b3 cf       	rjmp	.-154    	; 0x5ee <testLEDfade+0x4c>
			i=0;
     688:	1d 82       	std	Y+5, r1	; 0x05
     68a:	1e 82       	std	Y+6, r1	; 0x06
     68c:	1f 82       	std	Y+7, r1	; 0x07
     68e:	18 86       	std	Y+8, r1	; 0x08

	}
     690:	af cf       	rjmp	.-162    	; 0x5f0 <testLEDfade+0x4e>

00000692 <test7Seg>:



}

void test7Seg(){
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	68 97       	sbiw	r28, 0x18	; 24
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	de bf       	out	0x3e, r29	; 62
	PORTA.DIRSET = 0x06;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	96 e0       	ldi	r25, 0x06	; 6
     6a4:	26 e0       	ldi	r18, 0x06	; 6
     6a6:	fc 01       	movw	r30, r24
     6a8:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTSET = 0x06;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	96 e0       	ldi	r25, 0x06	; 6
     6ae:	26 e0       	ldi	r18, 0x06	; 6
     6b0:	fc 01       	movw	r30, r24
     6b2:	25 83       	std	Z+5, r18	; 0x05
	
	PORTC.DIRSET = 0xF8;
     6b4:	80 e4       	ldi	r24, 0x40	; 64
     6b6:	96 e0       	ldi	r25, 0x06	; 6
     6b8:	28 ef       	ldi	r18, 0xF8	; 248
     6ba:	fc 01       	movw	r30, r24
     6bc:	21 83       	std	Z+1, r18	; 0x01
	
	PORTD.DIRSET = 0xBF;
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	2f eb       	ldi	r18, 0xBF	; 191
     6c4:	fc 01       	movw	r30, r24
     6c6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = 0x38;
     6c8:	80 e6       	ldi	r24, 0x60	; 96
     6ca:	96 e0       	ldi	r25, 0x06	; 6
     6cc:	28 e3       	ldi	r18, 0x38	; 56
     6ce:	fc 01       	movw	r30, r24
     6d0:	25 83       	std	Z+5, r18	; 0x05
	PORTC.OUTSET = 0xF0;
     6d2:	80 e4       	ldi	r24, 0x40	; 64
     6d4:	96 e0       	ldi	r25, 0x06	; 6
     6d6:	20 ef       	ldi	r18, 0xF0	; 240
     6d8:	fc 01       	movw	r30, r24
     6da:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTCLR = 0x3F;
     6dc:	80 e6       	ldi	r24, 0x60	; 96
     6de:	96 e0       	ldi	r25, 0x06	; 6
     6e0:	2f e3       	ldi	r18, 0x3F	; 63
     6e2:	fc 01       	movw	r30, r24
     6e4:	26 83       	std	Z+6, r18	; 0x06
	
	PORTE.DIRCLR = 0x08;
     6e6:	80 e8       	ldi	r24, 0x80	; 128
     6e8:	96 e0       	ldi	r25, 0x06	; 6
     6ea:	28 e0       	ldi	r18, 0x08	; 8
     6ec:	fc 01       	movw	r30, r24
     6ee:	22 83       	std	Z+2, r18	; 0x02

	uint32_t tick = 0;
     6f0:	19 82       	std	Y+1, r1	; 0x01
     6f2:	1a 82       	std	Y+2, r1	; 0x02
     6f4:	1b 82       	std	Y+3, r1	; 0x03
     6f6:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t tickM = 0x008F;
     6f8:	8f e8       	ldi	r24, 0x8F	; 143
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	8d 8b       	std	Y+21, r24	; 0x15
     702:	9e 8b       	std	Y+22, r25	; 0x16
     704:	af 8b       	std	Y+23, r26	; 0x17
     706:	b8 8f       	std	Y+24, r27	; 0x18
	uint32_t i = 0;
     708:	1d 82       	std	Y+5, r1	; 0x05
     70a:	1e 82       	std	Y+6, r1	; 0x06
     70c:	1f 82       	std	Y+7, r1	; 0x07
     70e:	18 86       	std	Y+8, r1	; 0x08

	uint32_t LED1=0;
     710:	19 86       	std	Y+9, r1	; 0x09
     712:	1a 86       	std	Y+10, r1	; 0x0a
     714:	1b 86       	std	Y+11, r1	; 0x0b
     716:	1c 86       	std	Y+12, r1	; 0x0c
	uint32_t LED10=0;
     718:	1d 86       	std	Y+13, r1	; 0x0d
     71a:	1e 86       	std	Y+14, r1	; 0x0e
     71c:	1f 86       	std	Y+15, r1	; 0x0f
     71e:	18 8a       	std	Y+16, r1	; 0x10
	uint32_t LED100=0;
     720:	19 8a       	std	Y+17, r1	; 0x11
     722:	1a 8a       	std	Y+18, r1	; 0x12
     724:	1b 8a       	std	Y+19, r1	; 0x13
     726:	1c 8a       	std	Y+20, r1	; 0x14
     728:	07 c0       	rjmp	.+14     	; 0x738 <test7Seg+0xa6>
				}
			}				
				
		}		

	}
     72a:	00 00       	nop
     72c:	05 c0       	rjmp	.+10     	; 0x738 <test7Seg+0xa6>
     72e:	00 00       	nop
     730:	03 c0       	rjmp	.+6      	; 0x738 <test7Seg+0xa6>
     732:	00 00       	nop
     734:	01 c0       	rjmp	.+2      	; 0x738 <test7Seg+0xa6>
     736:	00 00       	nop
	uint32_t LED1=0;
	uint32_t LED10=0;
	uint32_t LED100=0;

	while(1){
		if (i >= (LED10*1+LED100*10))
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	9a 89       	ldd	r25, Y+18	; 0x12
     73c:	ab 89       	ldd	r26, Y+19	; 0x13
     73e:	bc 89       	ldd	r27, Y+20	; 0x14
     740:	2a e0       	ldi	r18, 0x0A	; 10
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	bc 01       	movw	r22, r24
     74a:	cd 01       	movw	r24, r26
     74c:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsi3>
     750:	9b 01       	movw	r18, r22
     752:	ac 01       	movw	r20, r24
     754:	8d 85       	ldd	r24, Y+13	; 0x0d
     756:	9e 85       	ldd	r25, Y+14	; 0x0e
     758:	af 85       	ldd	r26, Y+15	; 0x0f
     75a:	b8 89       	ldd	r27, Y+16	; 0x10
     75c:	28 0f       	add	r18, r24
     75e:	39 1f       	adc	r19, r25
     760:	4a 1f       	adc	r20, r26
     762:	5b 1f       	adc	r21, r27
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	9e 81       	ldd	r25, Y+6	; 0x06
     768:	af 81       	ldd	r26, Y+7	; 0x07
     76a:	b8 85       	ldd	r27, Y+8	; 0x08
     76c:	82 17       	cp	r24, r18
     76e:	93 07       	cpc	r25, r19
     770:	a4 07       	cpc	r26, r20
     772:	b5 07       	cpc	r27, r21
     774:	58 f0       	brcs	.+22     	; 0x78c <test7Seg+0xfa>
		{
			PORTC.OUTCLR = 0x08;
     776:	80 e4       	ldi	r24, 0x40	; 64
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	28 e0       	ldi	r18, 0x08	; 8
     77c:	fc 01       	movw	r30, r24
     77e:	26 83       	std	Z+6, r18	; 0x06
			PORTD.OUTCLR = 0x07;
     780:	80 e6       	ldi	r24, 0x60	; 96
     782:	96 e0       	ldi	r25, 0x06	; 6
     784:	27 e0       	ldi	r18, 0x07	; 7
     786:	fc 01       	movw	r30, r24
     788:	26 83       	std	Z+6, r18	; 0x06
     78a:	0a c0       	rjmp	.+20     	; 0x7a0 <test7Seg+0x10e>
		}			
		else
		{
			PORTC.OUTSET = 0x08;
     78c:	80 e4       	ldi	r24, 0x40	; 64
     78e:	96 e0       	ldi	r25, 0x06	; 6
     790:	28 e0       	ldi	r18, 0x08	; 8
     792:	fc 01       	movw	r30, r24
     794:	25 83       	std	Z+5, r18	; 0x05
			PORTD.OUTSET = 0x07;
     796:	80 e6       	ldi	r24, 0x60	; 96
     798:	96 e0       	ldi	r25, 0x06	; 6
     79a:	27 e0       	ldi	r18, 0x07	; 7
     79c:	fc 01       	movw	r30, r24
     79e:	25 83       	std	Z+5, r18	; 0x05
		}			
			
		PORTD.OUTCLR = 0x10;
     7a0:	80 e6       	ldi	r24, 0x60	; 96
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	20 e1       	ldi	r18, 0x10	; 16
     7a6:	fc 01       	movw	r30, r24
     7a8:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTCLR = 0xF0;
     7aa:	80 e4       	ldi	r24, 0x40	; 64
     7ac:	96 e0       	ldi	r25, 0x06	; 6
     7ae:	20 ef       	ldi	r18, 0xF0	; 240
     7b0:	fc 01       	movw	r30, r24
     7b2:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = LED100 << 4;
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	29 89       	ldd	r18, Y+17	; 0x11
     7ba:	22 95       	swap	r18
     7bc:	20 7f       	andi	r18, 0xF0	; 240
     7be:	fc 01       	movw	r30, r24
     7c0:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0x10;
     7c2:	80 e6       	ldi	r24, 0x60	; 96
     7c4:	96 e0       	ldi	r25, 0x06	; 6
     7c6:	20 e1       	ldi	r18, 0x10	; 16
     7c8:	fc 01       	movw	r30, r24
     7ca:	25 83       	std	Z+5, r18	; 0x05
		
		PORTD.OUTCLR = 0x08;
     7cc:	80 e6       	ldi	r24, 0x60	; 96
     7ce:	96 e0       	ldi	r25, 0x06	; 6
     7d0:	28 e0       	ldi	r18, 0x08	; 8
     7d2:	fc 01       	movw	r30, r24
     7d4:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTCLR = 0xF0;
     7d6:	80 e4       	ldi	r24, 0x40	; 64
     7d8:	96 e0       	ldi	r25, 0x06	; 6
     7da:	20 ef       	ldi	r18, 0xF0	; 240
     7dc:	fc 01       	movw	r30, r24
     7de:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = LED10 << 4;
     7e0:	80 e4       	ldi	r24, 0x40	; 64
     7e2:	96 e0       	ldi	r25, 0x06	; 6
     7e4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7e6:	22 95       	swap	r18
     7e8:	20 7f       	andi	r18, 0xF0	; 240
     7ea:	fc 01       	movw	r30, r24
     7ec:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0x08;
     7ee:	80 e6       	ldi	r24, 0x60	; 96
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	28 e0       	ldi	r18, 0x08	; 8
     7f4:	fc 01       	movw	r30, r24
     7f6:	25 83       	std	Z+5, r18	; 0x05
		
		PORTD.OUTCLR = 0x20;
     7f8:	80 e6       	ldi	r24, 0x60	; 96
     7fa:	96 e0       	ldi	r25, 0x06	; 6
     7fc:	20 e2       	ldi	r18, 0x20	; 32
     7fe:	fc 01       	movw	r30, r24
     800:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTCLR = 0xF0;
     802:	80 e4       	ldi	r24, 0x40	; 64
     804:	96 e0       	ldi	r25, 0x06	; 6
     806:	20 ef       	ldi	r18, 0xF0	; 240
     808:	fc 01       	movw	r30, r24
     80a:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = LED1 << 4;
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	96 e0       	ldi	r25, 0x06	; 6
     810:	29 85       	ldd	r18, Y+9	; 0x09
     812:	22 95       	swap	r18
     814:	20 7f       	andi	r18, 0xF0	; 240
     816:	fc 01       	movw	r30, r24
     818:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0x20;
     81a:	80 e6       	ldi	r24, 0x60	; 96
     81c:	96 e0       	ldi	r25, 0x06	; 6
     81e:	20 e2       	ldi	r18, 0x20	; 32
     820:	fc 01       	movw	r30, r24
     822:	25 83       	std	Z+5, r18	; 0x05

		i++;
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	9e 81       	ldd	r25, Y+6	; 0x06
     828:	af 81       	ldd	r26, Y+7	; 0x07
     82a:	b8 85       	ldd	r27, Y+8	; 0x08
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	a1 1d       	adc	r26, r1
     830:	b1 1d       	adc	r27, r1
     832:	8d 83       	std	Y+5, r24	; 0x05
     834:	9e 83       	std	Y+6, r25	; 0x06
     836:	af 83       	std	Y+7, r26	; 0x07
     838:	b8 87       	std	Y+8, r27	; 0x08
		if (i>99)
     83a:	8d 81       	ldd	r24, Y+5	; 0x05
     83c:	9e 81       	ldd	r25, Y+6	; 0x06
     83e:	af 81       	ldd	r26, Y+7	; 0x07
     840:	b8 85       	ldd	r27, Y+8	; 0x08
     842:	84 36       	cpi	r24, 0x64	; 100
     844:	91 05       	cpc	r25, r1
     846:	a1 05       	cpc	r26, r1
     848:	b1 05       	cpc	r27, r1
     84a:	20 f0       	brcs	.+8      	; 0x854 <test7Seg+0x1c2>
			i = 0;
     84c:	1d 82       	std	Y+5, r1	; 0x05
     84e:	1e 82       	std	Y+6, r1	; 0x06
     850:	1f 82       	std	Y+7, r1	; 0x07
     852:	18 86       	std	Y+8, r1	; 0x08
		
		tick++;
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	ab 81       	ldd	r26, Y+3	; 0x03
     85a:	bc 81       	ldd	r27, Y+4	; 0x04
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	a1 1d       	adc	r26, r1
     860:	b1 1d       	adc	r27, r1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	ab 83       	std	Y+3, r26	; 0x03
     868:	bc 83       	std	Y+4, r27	; 0x04
		if (tick>tickM)
     86a:	29 81       	ldd	r18, Y+1	; 0x01
     86c:	3a 81       	ldd	r19, Y+2	; 0x02
     86e:	4b 81       	ldd	r20, Y+3	; 0x03
     870:	5c 81       	ldd	r21, Y+4	; 0x04
     872:	8d 89       	ldd	r24, Y+21	; 0x15
     874:	9e 89       	ldd	r25, Y+22	; 0x16
     876:	af 89       	ldd	r26, Y+23	; 0x17
     878:	b8 8d       	ldd	r27, Y+24	; 0x18
     87a:	82 17       	cp	r24, r18
     87c:	93 07       	cpc	r25, r19
     87e:	a4 07       	cpc	r26, r20
     880:	b5 07       	cpc	r27, r21
     882:	08 f0       	brcs	.+2      	; 0x886 <test7Seg+0x1f4>
     884:	52 cf       	rjmp	.-348    	; 0x72a <test7Seg+0x98>
		{
			tick = 0;
     886:	19 82       	std	Y+1, r1	; 0x01
     888:	1a 82       	std	Y+2, r1	; 0x02
     88a:	1b 82       	std	Y+3, r1	; 0x03
     88c:	1c 82       	std	Y+4, r1	; 0x04
			LED1++;
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	ab 85       	ldd	r26, Y+11	; 0x0b
     894:	bc 85       	ldd	r27, Y+12	; 0x0c
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	a1 1d       	adc	r26, r1
     89a:	b1 1d       	adc	r27, r1
     89c:	89 87       	std	Y+9, r24	; 0x09
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	ab 87       	std	Y+11, r26	; 0x0b
     8a2:	bc 87       	std	Y+12, r27	; 0x0c
			if (LED1>9)
     8a4:	89 85       	ldd	r24, Y+9	; 0x09
     8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a8:	ab 85       	ldd	r26, Y+11	; 0x0b
     8aa:	bc 85       	ldd	r27, Y+12	; 0x0c
     8ac:	8a 30       	cpi	r24, 0x0A	; 10
     8ae:	91 05       	cpc	r25, r1
     8b0:	a1 05       	cpc	r26, r1
     8b2:	b1 05       	cpc	r27, r1
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <test7Seg+0x226>
     8b6:	3b cf       	rjmp	.-394    	; 0x72e <test7Seg+0x9c>
			{
				LED1 = 0;
     8b8:	19 86       	std	Y+9, r1	; 0x09
     8ba:	1a 86       	std	Y+10, r1	; 0x0a
     8bc:	1b 86       	std	Y+11, r1	; 0x0b
     8be:	1c 86       	std	Y+12, r1	; 0x0c
				LED10++;
     8c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c4:	af 85       	ldd	r26, Y+15	; 0x0f
     8c6:	b8 89       	ldd	r27, Y+16	; 0x10
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	a1 1d       	adc	r26, r1
     8cc:	b1 1d       	adc	r27, r1
     8ce:	8d 87       	std	Y+13, r24	; 0x0d
     8d0:	9e 87       	std	Y+14, r25	; 0x0e
     8d2:	af 87       	std	Y+15, r26	; 0x0f
     8d4:	b8 8b       	std	Y+16, r27	; 0x10
				if (LED10>9)
     8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	af 85       	ldd	r26, Y+15	; 0x0f
     8dc:	b8 89       	ldd	r27, Y+16	; 0x10
     8de:	8a 30       	cpi	r24, 0x0A	; 10
     8e0:	91 05       	cpc	r25, r1
     8e2:	a1 05       	cpc	r26, r1
     8e4:	b1 05       	cpc	r27, r1
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <test7Seg+0x258>
     8e8:	24 cf       	rjmp	.-440    	; 0x732 <test7Seg+0xa0>
				{
					LED10 = 0;
     8ea:	1d 86       	std	Y+13, r1	; 0x0d
     8ec:	1e 86       	std	Y+14, r1	; 0x0e
     8ee:	1f 86       	std	Y+15, r1	; 0x0f
     8f0:	18 8a       	std	Y+16, r1	; 0x10
					LED100++;
     8f2:	89 89       	ldd	r24, Y+17	; 0x11
     8f4:	9a 89       	ldd	r25, Y+18	; 0x12
     8f6:	ab 89       	ldd	r26, Y+19	; 0x13
     8f8:	bc 89       	ldd	r27, Y+20	; 0x14
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	a1 1d       	adc	r26, r1
     8fe:	b1 1d       	adc	r27, r1
     900:	89 8b       	std	Y+17, r24	; 0x11
     902:	9a 8b       	std	Y+18, r25	; 0x12
     904:	ab 8b       	std	Y+19, r26	; 0x13
     906:	bc 8b       	std	Y+20, r27	; 0x14
					if (LED100 > 9)
     908:	89 89       	ldd	r24, Y+17	; 0x11
     90a:	9a 89       	ldd	r25, Y+18	; 0x12
     90c:	ab 89       	ldd	r26, Y+19	; 0x13
     90e:	bc 89       	ldd	r27, Y+20	; 0x14
     910:	8a 30       	cpi	r24, 0x0A	; 10
     912:	91 05       	cpc	r25, r1
     914:	a1 05       	cpc	r26, r1
     916:	b1 05       	cpc	r27, r1
     918:	08 f4       	brcc	.+2      	; 0x91c <test7Seg+0x28a>
     91a:	0d cf       	rjmp	.-486    	; 0x736 <test7Seg+0xa4>
						LED100 = 0;
     91c:	19 8a       	std	Y+17, r1	; 0x11
     91e:	1a 8a       	std	Y+18, r1	; 0x12
     920:	1b 8a       	std	Y+19, r1	; 0x13
     922:	1c 8a       	std	Y+20, r1	; 0x14
				}
			}				
				
		}		

	}
     924:	09 cf       	rjmp	.-494    	; 0x738 <test7Seg+0xa6>

00000926 <testADC>:
}

void testADC(){
     926:	df 93       	push	r29
     928:	cf 93       	push	r28
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2c 97       	sbiw	r28, 0x0c	; 12
     930:	cd bf       	out	0x3d, r28	; 61
     932:	de bf       	out	0x3e, r29	; 62
	PORTA.DIRSET = 0x06;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	96 e0       	ldi	r25, 0x06	; 6
     938:	26 e0       	ldi	r18, 0x06	; 6
     93a:	fc 01       	movw	r30, r24
     93c:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRCLR = 0xF9;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	96 e0       	ldi	r25, 0x06	; 6
     942:	29 ef       	ldi	r18, 0xF9	; 249
     944:	fc 01       	movw	r30, r24
     946:	22 83       	std	Z+2, r18	; 0x02
	PORTA.OUTSET = 0x06;
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	96 e0       	ldi	r25, 0x06	; 6
     94c:	26 e0       	ldi	r18, 0x06	; 6
     94e:	fc 01       	movw	r30, r24
     950:	25 83       	std	Z+5, r18	; 0x05

	PORTC.DIRSET = 0xF8;
     952:	80 e4       	ldi	r24, 0x40	; 64
     954:	96 e0       	ldi	r25, 0x06	; 6
     956:	28 ef       	ldi	r18, 0xF8	; 248
     958:	fc 01       	movw	r30, r24
     95a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = 0xBF;
     95c:	80 e6       	ldi	r24, 0x60	; 96
     95e:	96 e0       	ldi	r25, 0x06	; 6
     960:	2f eb       	ldi	r18, 0xBF	; 191
     962:	fc 01       	movw	r30, r24
     964:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRCLR = 0x08;
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	96 e0       	ldi	r25, 0x06	; 6
     96a:	28 e0       	ldi	r18, 0x08	; 8
     96c:	fc 01       	movw	r30, r24
     96e:	22 83       	std	Z+2, r18	; 0x02
	
	PORTD.OUTCLR = 0xF0;
     970:	80 e6       	ldi	r24, 0x60	; 96
     972:	96 e0       	ldi	r25, 0x06	; 6
     974:	20 ef       	ldi	r18, 0xF0	; 240
     976:	fc 01       	movw	r30, r24
     978:	26 83       	std	Z+6, r18	; 0x06
	PORTC.OUTCLR = 0xF0;
     97a:	80 e4       	ldi	r24, 0x40	; 64
     97c:	96 e0       	ldi	r25, 0x06	; 6
     97e:	20 ef       	ldi	r18, 0xF0	; 240
     980:	fc 01       	movw	r30, r24
     982:	26 83       	std	Z+6, r18	; 0x06
	PORTC.OUTSET = 7 << 4;
     984:	80 e4       	ldi	r24, 0x40	; 64
     986:	96 e0       	ldi	r25, 0x06	; 6
     988:	20 e7       	ldi	r18, 0x70	; 112
     98a:	fc 01       	movw	r30, r24
     98c:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTSET = 0xF0;
     98e:	80 e6       	ldi	r24, 0x60	; 96
     990:	96 e0       	ldi	r25, 0x06	; 6
     992:	20 ef       	ldi	r18, 0xF0	; 240
     994:	fc 01       	movw	r30, r24
     996:	25 83       	std	Z+5, r18	; 0x05
	
	uint16_t i = 0;
     998:	19 82       	std	Y+1, r1	; 0x01
     99a:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t N = 0x09FF;
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	8b 83       	std	Y+3, r24	; 0x03
     9a2:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t result = 0;
     9a4:	1d 82       	std	Y+5, r1	; 0x05
     9a6:	1e 82       	std	Y+6, r1	; 0x06
	double	temp = 0;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	dc 01       	movw	r26, r24
     9ae:	8f 83       	std	Y+7, r24	; 0x07
     9b0:	98 87       	std	Y+8, r25	; 0x08
     9b2:	a9 87       	std	Y+9, r26	; 0x09
     9b4:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t LEDout = 0;
     9b6:	1b 86       	std	Y+11, r1	; 0x0b
     9b8:	1c 86       	std	Y+12, r1	; 0x0c

	ADCA.CTRLA 		= 0x00;	//disable ADC
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	fc 01       	movw	r30, r24
     9c0:	10 82       	st	Z, r1
	ADCA.CTRLB 		= 0x00;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	fc 01       	movw	r30, r24
     9c8:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL	= 0x20; //set PORTA reference voltage
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	20 e2       	ldi	r18, 0x20	; 32
     9d0:	fc 01       	movw	r30, r24
     9d2:	22 83       	std	Z+2, r18	; 0x02
	ADCA.EVCTRL		= 0x00;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	fc 01       	movw	r30, r24
     9da:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER	= 0x00;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	fc 01       	movw	r30, r24
     9e2:	14 82       	std	Z+4, r1	; 0x04
	ADCA.INTFLAGS	= 0x00;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	fc 01       	movw	r30, r24
     9ea:	16 82       	std	Z+6, r1	; 0x06
	ADCA.CTRLA		|= 0x01;	//enable ADC
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	32 e0       	ldi	r19, 0x02	; 2
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	21 60       	ori	r18, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18

	ADCA.CH0.CTRL	= 0x01;	//select external single-ended input
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	fc 01       	movw	r30, r24
     a06:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH0.MUXCTRL= 0x38;	//select pin 7
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	28 e3       	ldi	r18, 0x38	; 56
     a0e:	fc 01       	movw	r30, r24
     a10:	21 a3       	std	Z+33, r18	; 0x21
	ADCA.CH0.INTCTRL= 0x00;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	fc 01       	movw	r30, r24
     a18:	12 a2       	std	Z+34, r1	; 0x22
	
	while(1){
		ADCA.CH0.INTFLAGS |= 0x01;	//clear interrupt flag
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	32 e0       	ldi	r19, 0x02	; 2
     a22:	f9 01       	movw	r30, r18
     a24:	23 a1       	ldd	r18, Z+35	; 0x23
     a26:	21 60       	ori	r18, 0x01	; 1
     a28:	fc 01       	movw	r30, r24
     a2a:	23 a3       	std	Z+35, r18	; 0x23
		ADCA.CH0.CTRL	|=	0x80;	//start conversion
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	32 e0       	ldi	r19, 0x02	; 2
     a34:	f9 01       	movw	r30, r18
     a36:	20 a1       	ldd	r18, Z+32	; 0x20
     a38:	20 68       	ori	r18, 0x80	; 128
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 a3       	std	Z+32, r18	; 0x20
		
		PORTC.OUTSET = 0x08;
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	96 e0       	ldi	r25, 0x06	; 6
     a42:	28 e0       	ldi	r18, 0x08	; 8
     a44:	fc 01       	movw	r30, r24
     a46:	25 83       	std	Z+5, r18	; 0x05
		i=0;
     a48:	19 82       	std	Y+1, r1	; 0x01
     a4a:	1a 82       	std	Y+2, r1	; 0x02
		while(!(ADCA.CH0.INTFLAGS & 0x01)){
     a4c:	13 c0       	rjmp	.+38     	; 0xa74 <testADC+0x14e>
			i++;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	9a 83       	std	Y+2, r25	; 0x02
			if (i>N){
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	3a 81       	ldd	r19, Y+2	; 0x02
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	82 17       	cp	r24, r18
     a62:	93 07       	cpc	r25, r19
     a64:	38 f4       	brcc	.+14     	; 0xa74 <testADC+0x14e>
				i = 0;
     a66:	19 82       	std	Y+1, r1	; 0x01
     a68:	1a 82       	std	Y+2, r1	; 0x02
				PORTC.OUTTGL = 0x08;
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	96 e0       	ldi	r25, 0x06	; 6
     a6e:	28 e0       	ldi	r18, 0x08	; 8
     a70:	fc 01       	movw	r30, r24
     a72:	27 83       	std	Z+7, r18	; 0x07
		ADCA.CH0.INTFLAGS |= 0x01;	//clear interrupt flag
		ADCA.CH0.CTRL	|=	0x80;	//start conversion
		
		PORTC.OUTSET = 0x08;
		i=0;
		while(!(ADCA.CH0.INTFLAGS & 0x01)){
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	fc 01       	movw	r30, r24
     a7a:	83 a1       	ldd	r24, Z+35	; 0x23
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	81 70       	andi	r24, 0x01	; 1
     a82:	90 70       	andi	r25, 0x00	; 0
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	19 f3       	breq	.-58     	; 0xa4e <testADC+0x128>
			if (i>N){
				i = 0;
				PORTC.OUTTGL = 0x08;
			}
		}
		PORTC.OUTSET = 0x08;
     a88:	80 e4       	ldi	r24, 0x40	; 64
     a8a:	96 e0       	ldi	r25, 0x06	; 6
     a8c:	28 e0       	ldi	r18, 0x08	; 8
     a8e:	fc 01       	movw	r30, r24
     a90:	25 83       	std	Z+5, r18	; 0x05
		
		result = ADCA.CH0.RESL;
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	fc 01       	movw	r30, r24
     a98:	84 a1       	ldd	r24, Z+36	; 0x24
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	8d 83       	std	Y+5, r24	; 0x05
     aa0:	9e 83       	std	Y+6, r25	; 0x06
		result |= ADCA.CH0.RESH << 8;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	fc 01       	movw	r30, r24
     aa8:	85 a1       	ldd	r24, Z+37	; 0x25
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	98 2f       	mov	r25, r24
     ab0:	88 27       	eor	r24, r24
     ab2:	2d 81       	ldd	r18, Y+5	; 0x05
     ab4:	3e 81       	ldd	r19, Y+6	; 0x06
     ab6:	82 2b       	or	r24, r18
     ab8:	93 2b       	or	r25, r19
     aba:	8d 83       	std	Y+5, r24	; 0x05
     abc:	9e 83       	std	Y+6, r25	; 0x06
		
		temp = result*9.0;
     abe:	8d 81       	ldd	r24, Y+5	; 0x05
     ac0:	9e 81       	ldd	r25, Y+6	; 0x06
     ac2:	cc 01       	movw	r24, r24
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	bc 01       	movw	r22, r24
     aca:	cd 01       	movw	r24, r26
     acc:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__floatunsisf>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	bc 01       	movw	r22, r24
     ad6:	cd 01       	movw	r24, r26
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e1       	ldi	r20, 0x10	; 16
     ade:	51 e4       	ldi	r21, 0x41	; 65
     ae0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__mulsf3>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	8f 83       	std	Y+7, r24	; 0x07
     aea:	98 87       	std	Y+8, r25	; 0x08
     aec:	a9 87       	std	Y+9, r26	; 0x09
     aee:	ba 87       	std	Y+10, r27	; 0x0a
		temp = temp/0xFFF;
     af0:	6f 81       	ldd	r22, Y+7	; 0x07
     af2:	78 85       	ldd	r23, Y+8	; 0x08
     af4:	89 85       	ldd	r24, Y+9	; 0x09
     af6:	9a 85       	ldd	r25, Y+10	; 0x0a
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 ef       	ldi	r19, 0xF0	; 240
     afc:	4f e7       	ldi	r20, 0x7F	; 127
     afe:	55 e4       	ldi	r21, 0x45	; 69
     b00:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	8f 83       	std	Y+7, r24	; 0x07
     b0a:	98 87       	std	Y+8, r25	; 0x08
     b0c:	a9 87       	std	Y+9, r26	; 0x09
     b0e:	ba 87       	std	Y+10, r27	; 0x0a
		
		LEDout = (uint16_t)temp % 9;
     b10:	6f 81       	ldd	r22, Y+7	; 0x07
     b12:	78 85       	ldd	r23, Y+8	; 0x08
     b14:	89 85       	ldd	r24, Y+9	; 0x09
     b16:	9a 85       	ldd	r25, Y+10	; 0x0a
     b18:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	29 e0       	ldi	r18, 0x09	; 9
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	b9 01       	movw	r22, r18
     b26:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__udivmodhi4>
     b2a:	8b 87       	std	Y+11, r24	; 0x0b
     b2c:	9c 87       	std	Y+12, r25	; 0x0c
		
		PORTD.OUTCLR = 0xF0;
     b2e:	80 e6       	ldi	r24, 0x60	; 96
     b30:	96 e0       	ldi	r25, 0x06	; 6
     b32:	20 ef       	ldi	r18, 0xF0	; 240
     b34:	fc 01       	movw	r30, r24
     b36:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTCLR = 0xF0;
     b38:	80 e4       	ldi	r24, 0x40	; 64
     b3a:	96 e0       	ldi	r25, 0x06	; 6
     b3c:	20 ef       	ldi	r18, 0xF0	; 240
     b3e:	fc 01       	movw	r30, r24
     b40:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = LEDout << 4;
     b42:	80 e4       	ldi	r24, 0x40	; 64
     b44:	96 e0       	ldi	r25, 0x06	; 6
     b46:	2b 85       	ldd	r18, Y+11	; 0x0b
     b48:	22 95       	swap	r18
     b4a:	20 7f       	andi	r18, 0xF0	; 240
     b4c:	fc 01       	movw	r30, r24
     b4e:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0xF0;
     b50:	80 e6       	ldi	r24, 0x60	; 96
     b52:	96 e0       	ldi	r25, 0x06	; 6
     b54:	20 ef       	ldi	r18, 0xF0	; 240
     b56:	fc 01       	movw	r30, r24
     b58:	25 83       	std	Z+5, r18	; 0x05
		
		
		
	}
     b5a:	5f cf       	rjmp	.-322    	; 0xa1a <testADC+0xf4>

00000b5c <initPOT>:
	
}

void initPOT(){
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR	= 0xF9;		//ADC3:7 and VREF input
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	96 e0       	ldi	r25, 0x06	; 6
     b68:	29 ef       	ldi	r18, 0xF9	; 249
     b6a:	fc 01       	movw	r30, r24
     b6c:	22 83       	std	Z+2, r18	; 0x02

	ADCA.CTRLA 		= 0x00;		//disable ADC
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	fc 01       	movw	r30, r24
     b74:	10 82       	st	Z, r1
	ADCA.CTRLB 		= 0x00;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	fc 01       	movw	r30, r24
     b7c:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL	= 0x20;		//set PORTA reference voltage
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	20 e2       	ldi	r18, 0x20	; 32
     b84:	fc 01       	movw	r30, r24
     b86:	22 83       	std	Z+2, r18	; 0x02
	ADCA.EVCTRL		= 0x00;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	fc 01       	movw	r30, r24
     b8e:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER	= 0x00;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	fc 01       	movw	r30, r24
     b96:	14 82       	std	Z+4, r1	; 0x04
	ADCA.INTFLAGS	= 0x00;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	fc 01       	movw	r30, r24
     b9e:	16 82       	std	Z+6, r1	; 0x06
	ADCA.CTRLA		|= 0x01;	//enable ADC
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	32 e0       	ldi	r19, 0x02	; 2
     ba8:	f9 01       	movw	r30, r18
     baa:	20 81       	ld	r18, Z
     bac:	21 60       	ori	r18, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18

	ADCA.CH0.CTRL	= 0x01;		//select external single-ended input
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	fc 01       	movw	r30, r24
     bba:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH0.MUXCTRL= 0x00;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	fc 01       	movw	r30, r24
     bc2:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CH0.INTCTRL= 0x00;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	fc 01       	movw	r30, r24
     bca:	12 a2       	std	Z+34, r1	; 0x22
}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <runPOT>:

void runPOT(){
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	for(i = 0; i < 5; i++){
     bdc:	19 82       	std	Y+1, r1	; 0x01
     bde:	9a c0       	rjmp	.+308    	; 0xd14 <runPOT+0x142>
		ADCA.CH0.INTFLAGS	|= 0x01;			//clear interrupt flag
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	32 e0       	ldi	r19, 0x02	; 2
     be8:	f9 01       	movw	r30, r18
     bea:	23 a1       	ldd	r18, Z+35	; 0x23
     bec:	21 60       	ori	r18, 0x01	; 1
     bee:	fc 01       	movw	r30, r24
     bf0:	23 a3       	std	Z+35, r18	; 0x23
		ADCA.CH0.MUXCTRL	&= ~(0x07 << 3);	//clear pin select
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	32 e0       	ldi	r19, 0x02	; 2
     bfa:	f9 01       	movw	r30, r18
     bfc:	21 a1       	ldd	r18, Z+33	; 0x21
     bfe:	27 7c       	andi	r18, 0xC7	; 199
     c00:	fc 01       	movw	r30, r24
     c02:	21 a3       	std	Z+33, r18	; 0x21
		ADCA.CH0.MUXCTRL	|= ((i+3) << 3);		//set pin select to current input
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	32 e0       	ldi	r19, 0x02	; 2
     c0c:	f9 01       	movw	r30, r18
     c0e:	21 a1       	ldd	r18, Z+33	; 0x21
     c10:	42 2f       	mov	r20, r18
     c12:	29 81       	ldd	r18, Y+1	; 0x01
     c14:	22 2f       	mov	r18, r18
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	2d 5f       	subi	r18, 0xFD	; 253
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	22 0f       	add	r18, r18
     c26:	33 1f       	adc	r19, r19
     c28:	24 2b       	or	r18, r20
     c2a:	fc 01       	movw	r30, r24
     c2c:	21 a3       	std	Z+33, r18	; 0x21
		ADCA.CH0.CTRL		|=	0x80;			//start conversion
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	32 e0       	ldi	r19, 0x02	; 2
     c36:	f9 01       	movw	r30, r18
     c38:	20 a1       	ldd	r18, Z+32	; 0x20
     c3a:	20 68       	ori	r18, 0x80	; 128
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 a3       	std	Z+32, r18	; 0x20
		
		while(!(ADCA.CH0.INTFLAGS & 0x01)){}
     c40:	00 00       	nop
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	fc 01       	movw	r30, r24
     c48:	83 a1       	ldd	r24, Z+35	; 0x23
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	81 70       	andi	r24, 0x01	; 1
     c50:	90 70       	andi	r25, 0x00	; 0
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	b1 f3       	breq	.-20     	; 0xc42 <runPOT+0x70>
		
		i_POT[i] = ADCA.CH0.RESL;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	32 e0       	ldi	r19, 0x02	; 2
     c60:	f9 01       	movw	r30, r18
     c62:	24 a1       	ldd	r18, Z+36	; 0x24
     c64:	22 2f       	mov	r18, r18
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	83 5e       	subi	r24, 0xE3	; 227
     c6e:	9e 4d       	sbci	r25, 0xDE	; 222
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
     c74:	31 83       	std	Z+1, r19	; 0x01
		i_POT[i] |= ADCA.CH0.RESH << 8;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	29 81       	ldd	r18, Y+1	; 0x01
     c7e:	22 2f       	mov	r18, r18
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	23 5e       	subi	r18, 0xE3	; 227
     c88:	3e 4d       	sbci	r19, 0xDE	; 222
     c8a:	f9 01       	movw	r30, r18
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	32 e0       	ldi	r19, 0x02	; 2
     c94:	f9 01       	movw	r30, r18
     c96:	25 a1       	ldd	r18, Z+37	; 0x25
     c98:	22 2f       	mov	r18, r18
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	32 2f       	mov	r19, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	24 2b       	or	r18, r20
     ca2:	35 2b       	or	r19, r21
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	83 5e       	subi	r24, 0xE3	; 227
     caa:	9e 4d       	sbci	r25, 0xDE	; 222
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
     cb0:	31 83       	std	Z+1, r19	; 0x01
		
		if (i_POT[i] < POTMIN)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	83 5e       	subi	r24, 0xE3	; 227
     cbe:	9e 4d       	sbci	r25, 0xDE	; 222
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	80 3c       	cpi	r24, 0xC0	; 192
     cc8:	91 05       	cpc	r25, r1
     cca:	58 f4       	brcc	.+22     	; 0xce2 <runPOT+0x110>
			i_POT[i] = 0;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	83 5e       	subi	r24, 0xE3	; 227
     cd8:	9e 4d       	sbci	r25, 0xDE	; 222
     cda:	fc 01       	movw	r30, r24
     cdc:	10 82       	st	Z, r1
     cde:	11 82       	std	Z+1, r1	; 0x01
     ce0:	16 c0       	rjmp	.+44     	; 0xd0e <runPOT+0x13c>
		else
			i_POT[i] = i_POT[i] - POTMIN;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	22 2f       	mov	r18, r18
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	23 5e       	subi	r18, 0xE3	; 227
     cf4:	3e 4d       	sbci	r19, 0xDE	; 222
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	20 5c       	subi	r18, 0xC0	; 192
     cfe:	30 40       	sbci	r19, 0x00	; 0
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	83 5e       	subi	r24, 0xE3	; 227
     d06:	9e 4d       	sbci	r25, 0xDE	; 222
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18
     d0c:	31 83       	std	Z+1, r19	; 0x01
}

void runPOT(){
	uint8_t i;
	
	for(i = 0; i < 5; i++){
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	85 30       	cpi	r24, 0x05	; 5
     d18:	08 f4       	brcc	.+2      	; 0xd1c <runPOT+0x14a>
     d1a:	62 cf       	rjmp	.-316    	; 0xbe0 <runPOT+0xe>
			i_POT[i] = 0;
		else
			i_POT[i] = i_POT[i] - POTMIN;
	}
	
}
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <scalePOT>:

uint16_t scalePOT(uint8_t pot, uint16_t outmin, uint16_t outmax){
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	29 97       	sbiw	r28, 0x09	; 9
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	8d 83       	std	Y+5, r24	; 0x05
     d3c:	6e 83       	std	Y+6, r22	; 0x06
     d3e:	7f 83       	std	Y+7, r23	; 0x07
     d40:	48 87       	std	Y+8, r20	; 0x08
     d42:	59 87       	std	Y+9, r21	; 0x09
	//outmin: minimum value to output
	//outmax: maximum value to output
	
	double temp;
	
	temp = 1.0*i_POT[pot]/POTRANGE;
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	83 5e       	subi	r24, 0xE3	; 227
     d50:	9e 4d       	sbci	r25, 0xDE	; 222
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	cc 01       	movw	r24, r24
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__floatunsisf>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 ef       	ldi	r19, 0xF0	; 240
     d72:	43 e7       	ldi	r20, 0x73	; 115
     d74:	55 e4       	ldi	r21, 0x45	; 69
     d76:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	ab 83       	std	Y+3, r26	; 0x03
     d84:	bc 83       	std	Y+4, r27	; 0x04
	temp = temp*(outmax - outmin) + outmin;
     d86:	28 85       	ldd	r18, Y+8	; 0x08
     d88:	39 85       	ldd	r19, Y+9	; 0x09
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	a9 01       	movw	r20, r18
     d90:	48 1b       	sub	r20, r24
     d92:	59 0b       	sbc	r21, r25
     d94:	ca 01       	movw	r24, r20
     d96:	cc 01       	movw	r24, r24
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__floatunsisf>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	29 81       	ldd	r18, Y+1	; 0x01
     dae:	3a 81       	ldd	r19, Y+2	; 0x02
     db0:	4b 81       	ldd	r20, Y+3	; 0x03
     db2:	5c 81       	ldd	r21, Y+4	; 0x04
     db4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	7c 01       	movw	r14, r24
     dbe:	8d 01       	movw	r16, r26
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	cc 01       	movw	r24, r24
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__floatunsisf>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	c8 01       	movw	r24, r16
     dd8:	b7 01       	movw	r22, r14
     dda:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__addsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	ab 83       	std	Y+3, r26	; 0x03
     de8:	bc 83       	std	Y+4, r27	; 0x04
	
	return (uint16_t) temp;
     dea:	69 81       	ldd	r22, Y+1	; 0x01
     dec:	7a 81       	ldd	r23, Y+2	; 0x02
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
}
     dfa:	29 96       	adiw	r28, 0x09	; 9
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	08 95       	ret

00000e0e <initLED>:

void initLED(){
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	//initialize all LED outputs, set all as blank
	
	PORTA.DIRSET = 0x06;	//~LT and ~BL output
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	26 e0       	ldi	r18, 0x06	; 6
     e1c:	fc 01       	movw	r30, r24
     e1e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTSET = 0x06;	//~LT and ~BL high
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	96 e0       	ldi	r25, 0x06	; 6
     e24:	26 e0       	ldi	r18, 0x06	; 6
     e26:	fc 01       	movw	r30, r24
     e28:	25 83       	std	Z+5, r18	; 0x05
	
	PORTC.DIRSET = 0xF8;	//STATLED and LED0:3 output
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	96 e0       	ldi	r25, 0x06	; 6
     e2e:	28 ef       	ldi	r18, 0xF8	; 248
     e30:	fc 01       	movw	r30, r24
     e32:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = 0x3F;	//DSEL0:2 and DP0:2 output
     e34:	80 e6       	ldi	r24, 0x60	; 96
     e36:	96 e0       	ldi	r25, 0x06	; 6
     e38:	2f e3       	ldi	r18, 0x3F	; 63
     e3a:	fc 01       	movw	r30, r24
     e3c:	21 83       	std	Z+1, r18	; 0x01
	
	
	//All LEDs off
	PORTD.OUTSET = 0x38;	//DSEL0:2 high (arm all 7 segments)
     e3e:	80 e6       	ldi	r24, 0x60	; 96
     e40:	96 e0       	ldi	r25, 0x06	; 6
     e42:	28 e3       	ldi	r18, 0x38	; 56
     e44:	fc 01       	movw	r30, r24
     e46:	25 83       	std	Z+5, r18	; 0x05
	PORTC.OUTSET = 0xF0;	//LED0:3 high (blank all 7 segments)
     e48:	80 e4       	ldi	r24, 0x40	; 64
     e4a:	96 e0       	ldi	r25, 0x06	; 6
     e4c:	20 ef       	ldi	r18, 0xF0	; 240
     e4e:	fc 01       	movw	r30, r24
     e50:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTCLR = 0x38;	//DSEL0: low (disarm all 7 segments)
     e52:	80 e6       	ldi	r24, 0x60	; 96
     e54:	96 e0       	ldi	r25, 0x06	; 6
     e56:	28 e3       	ldi	r18, 0x38	; 56
     e58:	fc 01       	movw	r30, r24
     e5a:	26 83       	std	Z+6, r18	; 0x06
	
	PORTD.OUTCLR = 0x07;	//DP0:2 low (blank all dps)
     e5c:	80 e6       	ldi	r24, 0x60	; 96
     e5e:	96 e0       	ldi	r25, 0x06	; 6
     e60:	27 e0       	ldi	r18, 0x07	; 7
     e62:	fc 01       	movw	r30, r24
     e64:	26 83       	std	Z+6, r18	; 0x06
	PORTC.OUTSET = 0x08;	//STATLED high (blank statled)
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	96 e0       	ldi	r25, 0x06	; 6
     e6a:	28 e0       	ldi	r18, 0x08	; 8
     e6c:	fc 01       	movw	r30, r24
     e6e:	25 83       	std	Z+5, r18	; 0x05
}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <runLED>:

void runLED(){
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	27 97       	sbiw	r28, 0x07	; 7
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	de bf       	out	0x3e, r29	; 62
	//booleans and such convert to LED out
	bool DP[3] = {o_LEDDP0, o_LEDDP1, o_LEDDP2};
     e84:	20 91 11 21 	lds	r18, 0x2111
     e88:	90 91 12 21 	lds	r25, 0x2112
     e8c:	80 91 13 21 	lds	r24, 0x2113
     e90:	2d 83       	std	Y+5, r18	; 0x05
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8f 83       	std	Y+7, r24	; 0x07
	
	uint8_t i;
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
     e96:	80 91 1b 21 	lds	r24, 0x211B
     e9a:	90 91 1c 21 	lds	r25, 0x211C
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	9c 83       	std	Y+4, r25	; 0x04
	
	for (i=0 ; i<3 ; i++){
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	7e c0       	rjmp	.+252    	; 0xfa2 <runLED+0x12c>
		digit = threeDigits%10;					//extract lowest current digit of 7seg
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	2a e0       	ldi	r18, 0x0A	; 10
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__udivmodhi4>
     eb4:	8a 83       	std	Y+2, r24	; 0x02
		if (threeDigits==0 && (i>0))			//if the rest of the 7seg is zero, blank LEDS (except for 1st digit)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	29 f4       	brne	.+10     	; 0xec8 <runLED+0x52>
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	88 23       	and	r24, r24
     ec2:	11 f0       	breq	.+4      	; 0xec8 <runLED+0x52>
			digit = 10;
     ec4:	8a e0       	ldi	r24, 0x0A	; 10
     ec6:	8a 83       	std	Y+2, r24	; 0x02
			
		PORTD.OUTCLR = 0x08 << (i+2)%3;			//arm appropriate 7 segment		(CHANGE INDEX SCALING FOR NEXT REVISION)
     ec8:	20 e6       	ldi	r18, 0x60	; 96
     eca:	36 e0       	ldi	r19, 0x06	; 6
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 96       	adiw	r24, 0x02	; 2
     ed4:	43 e0       	ldi	r20, 0x03	; 3
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	ba 01       	movw	r22, r20
     eda:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__divmodhi4>
     ede:	ac 01       	movw	r20, r24
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	04 2e       	mov	r0, r20
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <runLED+0x76>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <runLED+0x72>
     ef0:	f9 01       	movw	r30, r18
     ef2:	86 83       	std	Z+6, r24	; 0x06
		PORTC.OUTCLR = 0xF0;					//clear digit select
     ef4:	80 e4       	ldi	r24, 0x40	; 64
     ef6:	96 e0       	ldi	r25, 0x06	; 6
     ef8:	20 ef       	ldi	r18, 0xF0	; 240
     efa:	fc 01       	movw	r30, r24
     efc:	26 83       	std	Z+6, r18	; 0x06
		PORTC.OUTSET = digit << 4;				//set digit select #
     efe:	80 e4       	ldi	r24, 0x40	; 64
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	2a 81       	ldd	r18, Y+2	; 0x02
     f04:	22 95       	swap	r18
     f06:	20 7f       	andi	r18, 0xF0	; 240
     f08:	fc 01       	movw	r30, r24
     f0a:	25 83       	std	Z+5, r18	; 0x05
		PORTD.OUTSET = 0x38;					//disarm all 7 segments
     f0c:	80 e6       	ldi	r24, 0x60	; 96
     f0e:	96 e0       	ldi	r25, 0x06	; 6
     f10:	28 e3       	ldi	r18, 0x38	; 56
     f12:	fc 01       	movw	r30, r24
     f14:	25 83       	std	Z+5, r18	; 0x05
		
		threeDigits = threeDigits/10;			//shift 7seg number down to next digit
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	2a e0       	ldi	r18, 0x0A	; 10
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	b9 01       	movw	r22, r18
     f20:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__udivmodhi4>
     f24:	9b 01       	movw	r18, r22
     f26:	2b 83       	std	Y+3, r18	; 0x03
     f28:	3c 83       	std	Y+4, r19	; 0x04
		
		if (DP[i])							//light appropriate decimal points  (CHANGE INDEX SCALING FOR NEXT REVISION)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9e 01       	movw	r18, r28
     f32:	2b 5f       	subi	r18, 0xFB	; 251
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	b9 f0       	breq	.+46     	; 0xf70 <runLED+0xfa>
			PORTD.OUTSET = 1 << (i+2)%3;
     f42:	20 e6       	ldi	r18, 0x60	; 96
     f44:	36 e0       	ldi	r19, 0x06	; 6
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 96       	adiw	r24, 0x02	; 2
     f4e:	43 e0       	ldi	r20, 0x03	; 3
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	ba 01       	movw	r22, r20
     f54:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__divmodhi4>
     f58:	ac 01       	movw	r20, r24
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	04 2e       	mov	r0, r20
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <runLED+0xf0>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <runLED+0xec>
     f6a:	f9 01       	movw	r30, r18
     f6c:	85 83       	std	Z+5, r24	; 0x05
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <runLED+0x126>
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
     f70:	20 e6       	ldi	r18, 0x60	; 96
     f72:	36 e0       	ldi	r19, 0x06	; 6
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 96       	adiw	r24, 0x02	; 2
     f7c:	43 e0       	ldi	r20, 0x03	; 3
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	ba 01       	movw	r22, r20
     f82:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__divmodhi4>
     f86:	ac 01       	movw	r20, r24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	04 2e       	mov	r0, r20
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <runLED+0x11e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <runLED+0x11a>
     f98:	f9 01       	movw	r30, r18
     f9a:	86 83       	std	Z+6, r24	; 0x06
	uint8_t digit;
	uint16_t threeDigits;
	
	threeDigits = o_LED7SEG;					//copy 7seg number
	
	for (i=0 ; i<3 ; i++){
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <runLED+0x134>
     fa8:	7e cf       	rjmp	.-260    	; 0xea6 <runLED+0x30>
			PORTD.OUTSET = 1 << (i+2)%3;
		else
			PORTD.OUTCLR = 1 << (i+2)%3;
	}
	
	if (o_LEDSTAT)								//light STATLED if necessary
     faa:	80 91 14 21 	lds	r24, 0x2114
     fae:	88 23       	and	r24, r24
     fb0:	31 f0       	breq	.+12     	; 0xfbe <runLED+0x148>
		PORTC.OUTCLR = 0x08;
     fb2:	80 e4       	ldi	r24, 0x40	; 64
     fb4:	96 e0       	ldi	r25, 0x06	; 6
     fb6:	28 e0       	ldi	r18, 0x08	; 8
     fb8:	fc 01       	movw	r30, r24
     fba:	26 83       	std	Z+6, r18	; 0x06
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <runLED+0x152>
	else
		PORTC.OUTSET = 0x08;
     fbe:	80 e4       	ldi	r24, 0x40	; 64
     fc0:	96 e0       	ldi	r25, 0x06	; 6
     fc2:	28 e0       	ldi	r18, 0x08	; 8
     fc4:	fc 01       	movw	r30, r24
     fc6:	25 83       	std	Z+5, r18	; 0x05
	
}
     fc8:	27 96       	adiw	r28, 0x07	; 7
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <initSW>:

void initSW(){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	PORTB.DIRCLR = 0x0C;				//SW8(push) and Encoder pushbutton input
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	96 e0       	ldi	r25, 0x06	; 6
     fe0:	2c e0       	ldi	r18, 0x0C	; 12
     fe2:	fc 01       	movw	r30, r24
     fe4:	22 83       	std	Z+2, r18	; 0x02
	PORTE.DIRCLR = 0x08;				//SW7(toggle) input
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	96 e0       	ldi	r25, 0x06	; 6
     fea:	28 e0       	ldi	r18, 0x08	; 8
     fec:	fc 01       	movw	r30, r24
     fee:	22 83       	std	Z+2, r18	; 0x02
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <runSW>:

void runSW(){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	//_i_SW	 = final ["]
	//_i_SWc[] = count for ["]
	
	uint8_t i;
	
	_i_SW1 = 0x00;									//capture current physical switch positions
    1000:	10 92 16 21 	sts	0x2116, r1
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	96 e0       	ldi	r25, 0x06	; 6
    1008:	fc 01       	movw	r30, r24
    100a:	80 85       	ldd	r24, Z+8	; 0x08
    100c:	98 2f       	mov	r25, r24
    100e:	96 95       	lsr	r25
    1010:	96 95       	lsr	r25
    1012:	96 95       	lsr	r25
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	99 23       	and	r25, r25
    1018:	09 f0       	breq	.+2      	; 0x101c <runSW+0x26>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 91 16 21 	lds	r25, 0x2116
    1020:	89 2b       	or	r24, r25
    1022:	80 93 16 21 	sts	0x2116, r24
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	96 e0       	ldi	r25, 0x06	; 6
    102a:	fc 01       	movw	r30, r24
    102c:	80 85       	ldd	r24, Z+8	; 0x08
    102e:	86 95       	lsr	r24
    1030:	86 95       	lsr	r24
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	81 70       	andi	r24, 0x01	; 1
    1038:	90 70       	andi	r25, 0x00	; 0
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	11 f4       	brne	.+4      	; 0x1042 <runSW+0x4c>
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <runSW+0x4e>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 91 16 21 	lds	r25, 0x2116
    1048:	89 2b       	or	r24, r25
    104a:	80 93 16 21 	sts	0x2116, r24
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	96 e0       	ldi	r25, 0x06	; 6
    1052:	fc 01       	movw	r30, r24
    1054:	80 85       	ldd	r24, Z+8	; 0x08
    1056:	86 95       	lsr	r24
    1058:	86 95       	lsr	r24
    105a:	86 95       	lsr	r24
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	81 70       	andi	r24, 0x01	; 1
    1062:	90 70       	andi	r25, 0x00	; 0
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	11 f4       	brne	.+4      	; 0x106c <runSW+0x76>
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	01 c0       	rjmp	.+2      	; 0x106e <runSW+0x78>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 91 16 21 	lds	r25, 0x2116
    1072:	89 2b       	or	r24, r25
    1074:	80 93 16 21 	sts	0x2116, r24
	
	for (i = 0; i < 3; i++){
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	6b c0       	rjmp	.+214    	; 0x1152 <runSW+0x15c>
		if (_i_SW1 >> i == _i_SW0 >> i)			//if switch didn't change
    107c:	80 91 16 21 	lds	r24, 0x2116
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	29 81       	ldd	r18, Y+1	; 0x01
    1086:	22 2f       	mov	r18, r18
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	ac 01       	movw	r20, r24
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <runSW+0x9c>
    108e:	55 95       	asr	r21
    1090:	47 95       	ror	r20
    1092:	2a 95       	dec	r18
    1094:	e2 f7       	brpl	.-8      	; 0x108e <runSW+0x98>
    1096:	9a 01       	movw	r18, r20
    1098:	80 91 15 21 	lds	r24, 0x2115
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	49 81       	ldd	r20, Y+1	; 0x01
    10a2:	44 2f       	mov	r20, r20
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	04 2e       	mov	r0, r20
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <runSW+0xb8>
    10aa:	95 95       	asr	r25
    10ac:	87 95       	ror	r24
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <runSW+0xb4>
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	71 f4       	brne	.+28     	; 0x10d4 <runSW+0xde>
			_i_SWc[i]++;							//increment count		
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 01       	movw	r18, r24
    10c0:	28 5e       	subi	r18, 0xE8	; 232
    10c2:	3e 4d       	sbci	r19, 0xDE	; 222
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	88 5e       	subi	r24, 0xE8	; 232
    10cc:	9e 4d       	sbci	r25, 0xDE	; 222
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 83       	st	Z, r18
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <runSW+0xec>
		else
			_i_SWc[i] = 0;							//else reset count			
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	88 5e       	subi	r24, 0xE8	; 232
    10dc:	9e 4d       	sbci	r25, 0xDE	; 222
    10de:	fc 01       	movw	r30, r24
    10e0:	10 82       	st	Z, r1
		if (_i_SWc[i] > DEBOUNCE){					//if count is over debounce value
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 5e       	subi	r24, 0xE8	; 232
    10ea:	9e 4d       	sbci	r25, 0xDE	; 222
    10ec:	fc 01       	movw	r30, r24
    10ee:	80 81       	ld	r24, Z
    10f0:	89 30       	cpi	r24, 0x09	; 9
    10f2:	60 f1       	brcs	.+88     	; 0x114c <runSW+0x156>
			_i_SW &= ~(1 << i);
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <runSW+0x10e>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	2a 95       	dec	r18
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <runSW+0x10a>
    1108:	98 2f       	mov	r25, r24
    110a:	90 95       	com	r25
    110c:	80 91 17 21 	lds	r24, 0x2117
    1110:	89 23       	and	r24, r25
    1112:	80 93 17 21 	sts	0x2117, r24
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <runSW+0x132>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <runSW+0x12e>
    112c:	98 2f       	mov	r25, r24
    112e:	80 91 16 21 	lds	r24, 0x2116
    1132:	98 23       	and	r25, r24
    1134:	80 91 17 21 	lds	r24, 0x2117
    1138:	89 2b       	or	r24, r25
    113a:	80 93 17 21 	sts	0x2117, r24
			_i_SWc[i] = 0;							//and reset count
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	88 5e       	subi	r24, 0xE8	; 232
    1146:	9e 4d       	sbci	r25, 0xDE	; 222
    1148:	fc 01       	movw	r30, r24
    114a:	10 82       	st	Z, r1
	_i_SW1 = 0x00;									//capture current physical switch positions
	_i_SW1 |= !(PORTE.IN >> 3) & 0x01;
	_i_SW1 |= !((PORTB.IN >> 2) & 0x01) << 1;
	_i_SW1 |= !((PORTB.IN >> 3) & 0x01) << 2;
	
	for (i = 0; i < 3; i++){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	83 30       	cpi	r24, 0x03	; 3
    1156:	08 f4       	brcc	.+2      	; 0x115a <runSW+0x164>
    1158:	91 cf       	rjmp	.-222    	; 0x107c <runSW+0x86>
			_i_SW |= _i_SW1 & (1 << i);				//set final switch to current position
			_i_SWc[i] = 0;							//and reset count
		}
	}	
	
	_i_SW0 = _i_SW1;								//set last switch position to current switch position
    115a:	80 91 16 21 	lds	r24, 0x2116
    115e:	80 93 15 21 	sts	0x2115, r24
	
	//set booleans
	
	if (_i_SW & 0x01){			//if toggle IS on
    1162:	80 91 17 21 	lds	r24, 0x2117
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	88 23       	and	r24, r24
    1170:	81 f0       	breq	.+32     	; 0x1192 <runSW+0x19c>
		i_SWTOGoff = 0;				//not a new off
    1172:	10 92 10 21 	sts	0x2110, r1
		if (i_SWTOGstate)			//if toggle WAS on
    1176:	80 91 0e 21 	lds	r24, 0x210E
    117a:	88 23       	and	r24, r24
    117c:	19 f0       	breq	.+6      	; 0x1184 <runSW+0x18e>
			i_SWTOGon = 0;				//not a new on
    117e:	10 92 0f 21 	sts	0x210F, r1
    1182:	03 c0       	rjmp	.+6      	; 0x118a <runSW+0x194>
		else							//else (toggle WAS off)
			i_SWTOGon = 1;				//new on
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 0f 21 	sts	0x210F, r24
		i_SWTOGstate = 1;		//set current value
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 0e 21 	sts	0x210E, r24
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <runSW+0x1b8>
	}		
	else{						//if toggle IS off
		i_SWTOGon = 0;				//not a new on
    1192:	10 92 0f 21 	sts	0x210F, r1
		if (i_SWTOGstate)			//if toggle WAS on
    1196:	80 91 0e 21 	lds	r24, 0x210E
    119a:	88 23       	and	r24, r24
    119c:	21 f0       	breq	.+8      	; 0x11a6 <runSW+0x1b0>
			i_SWTOGoff = 1;				//new off
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 10 21 	sts	0x2110, r24
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <runSW+0x1b4>
		else
			i_SWTOGoff = 0;
    11a6:	10 92 10 21 	sts	0x2110, r1
		i_SWTOGstate = 0;
    11aa:	10 92 0e 21 	sts	0x210E, r1
	}		
	
	if (_i_SW & 0x02){		
    11ae:	80 91 17 21 	lds	r24, 0x2117
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	82 70       	andi	r24, 0x02	; 2
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	81 f0       	breq	.+32     	; 0x11de <runSW+0x1e8>
		i_SWPUSHoff = 0;		
    11be:	10 92 0a 21 	sts	0x210A, r1
		if (i_SWPUSHstate)		
    11c2:	80 91 08 21 	lds	r24, 0x2108
    11c6:	88 23       	and	r24, r24
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <runSW+0x1da>
			i_SWPUSHon = 0;		
    11ca:	10 92 09 21 	sts	0x2109, r1
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <runSW+0x1e0>
		else						
			i_SWPUSHon = 1;				
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 09 21 	sts	0x2109, r24
		i_SWPUSHstate = 1;		
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 08 21 	sts	0x2108, r24
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <runSW+0x204>
	}		
	else{						
		i_SWPUSHon = 0;				
    11de:	10 92 09 21 	sts	0x2109, r1
		if (i_SWPUSHstate)			
    11e2:	80 91 08 21 	lds	r24, 0x2108
    11e6:	88 23       	and	r24, r24
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <runSW+0x1fc>
			i_SWPUSHoff = 1;		
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 0a 21 	sts	0x210A, r24
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <runSW+0x200>
		else
			i_SWPUSHoff = 0;
    11f2:	10 92 0a 21 	sts	0x210A, r1
		i_SWPUSHstate = 0;
    11f6:	10 92 08 21 	sts	0x2108, r1
	}
	
	if (_i_SW & 0x04){		
    11fa:	80 91 17 21 	lds	r24, 0x2117
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	84 70       	andi	r24, 0x04	; 4
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	81 f0       	breq	.+32     	; 0x122a <runSW+0x234>
		i_SWENCoff = 0;		
    120a:	10 92 0d 21 	sts	0x210D, r1
		if (i_SWENCstate)		
    120e:	80 91 0b 21 	lds	r24, 0x210B
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <runSW+0x226>
			i_SWENCon = 0;		
    1216:	10 92 0c 21 	sts	0x210C, r1
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <runSW+0x22c>
		else						
			i_SWENCon = 1;				
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 0c 21 	sts	0x210C, r24
		i_SWENCstate = 1;		
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 0b 21 	sts	0x210B, r24
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <runSW+0x250>
	}		
	else{						
		i_SWENCon = 0;				
    122a:	10 92 0c 21 	sts	0x210C, r1
		if (i_SWENCstate)			
    122e:	80 91 0b 21 	lds	r24, 0x210B
    1232:	88 23       	and	r24, r24
    1234:	21 f0       	breq	.+8      	; 0x123e <runSW+0x248>
			i_SWENCoff = 1;		
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 0d 21 	sts	0x210D, r24
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <runSW+0x24c>
		else
			i_SWENCoff = 0;
    123e:	10 92 0d 21 	sts	0x210D, r1
		i_SWENCstate = 0;
    1242:	10 92 0b 21 	sts	0x210B, r1
	}		
	
	
}
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <test_switches_and_LEDs>:

void test_switches_and_LEDs(){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	initLED();
    1256:	0e 94 07 07 	call	0xe0e	; 0xe0e <initLED>
	initSW();
    125a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <initSW>
	
	o_LED7SEG = 500;
    125e:	84 ef       	ldi	r24, 0xF4	; 244
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	80 93 1b 21 	sts	0x211B, r24
    1266:	90 93 1c 21 	sts	0x211C, r25
	
	while(1){
		runSW();
    126a:	0e 94 fb 07 	call	0xff6	; 0xff6 <runSW>
		
		o_LEDDP0 = i_SWENCstate;
    126e:	80 91 0b 21 	lds	r24, 0x210B
    1272:	80 93 11 21 	sts	0x2111, r24
		o_LEDDP1 = i_SWPUSHstate;
    1276:	80 91 08 21 	lds	r24, 0x2108
    127a:	80 93 12 21 	sts	0x2112, r24
		o_LEDDP2 = i_SWTOGstate;
    127e:	80 91 0e 21 	lds	r24, 0x210E
    1282:	80 93 13 21 	sts	0x2113, r24
		
		if (i_SWTOGstate){
    1286:	80 91 0e 21 	lds	r24, 0x210E
    128a:	88 23       	and	r24, r24
    128c:	d9 f0       	breq	.+54     	; 0x12c4 <test_switches_and_LEDs+0x76>
			if (i_SWPUSHon)
    128e:	80 91 09 21 	lds	r24, 0x2109
    1292:	88 23       	and	r24, r24
    1294:	49 f0       	breq	.+18     	; 0x12a8 <test_switches_and_LEDs+0x5a>
				o_LED7SEG += 10;
    1296:	80 91 1b 21 	lds	r24, 0x211B
    129a:	90 91 1c 21 	lds	r25, 0x211C
    129e:	0a 96       	adiw	r24, 0x0a	; 10
    12a0:	80 93 1b 21 	sts	0x211B, r24
    12a4:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCon)
    12a8:	80 91 0c 21 	lds	r24, 0x210C
    12ac:	88 23       	and	r24, r24
    12ae:	21 f1       	breq	.+72     	; 0x12f8 <test_switches_and_LEDs+0xaa>
				o_LED7SEG += 1;
    12b0:	80 91 1b 21 	lds	r24, 0x211B
    12b4:	90 91 1c 21 	lds	r25, 0x211C
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	80 93 1b 21 	sts	0x211B, r24
    12be:	90 93 1c 21 	sts	0x211C, r25
    12c2:	1a c0       	rjmp	.+52     	; 0x12f8 <test_switches_and_LEDs+0xaa>
		}
		else{
			if (i_SWPUSHoff)
    12c4:	80 91 0a 21 	lds	r24, 0x210A
    12c8:	88 23       	and	r24, r24
    12ca:	49 f0       	breq	.+18     	; 0x12de <test_switches_and_LEDs+0x90>
				o_LED7SEG += -10;
    12cc:	80 91 1b 21 	lds	r24, 0x211B
    12d0:	90 91 1c 21 	lds	r25, 0x211C
    12d4:	0a 97       	sbiw	r24, 0x0a	; 10
    12d6:	80 93 1b 21 	sts	0x211B, r24
    12da:	90 93 1c 21 	sts	0x211C, r25
			if (i_SWENCoff)
    12de:	80 91 0d 21 	lds	r24, 0x210D
    12e2:	88 23       	and	r24, r24
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <test_switches_and_LEDs+0xaa>
				o_LED7SEG += -1;
    12e6:	80 91 1b 21 	lds	r24, 0x211B
    12ea:	90 91 1c 21 	lds	r25, 0x211C
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	80 93 1b 21 	sts	0x211B, r24
    12f4:	90 93 1c 21 	sts	0x211C, r25
		}
		
		if (o_LED7SEG > 999)
    12f8:	80 91 1b 21 	lds	r24, 0x211B
    12fc:	90 91 1c 21 	lds	r25, 0x211C
    1300:	23 e0       	ldi	r18, 0x03	; 3
    1302:	88 3e       	cpi	r24, 0xE8	; 232
    1304:	92 07       	cpc	r25, r18
    1306:	20 f0       	brcs	.+8      	; 0x1310 <test_switches_and_LEDs+0xc2>
			o_LED7SEG = 0;
    1308:	10 92 1b 21 	sts	0x211B, r1
    130c:	10 92 1c 21 	sts	0x211C, r1
		
		if (o_LED7SEG < 1)
    1310:	80 91 1b 21 	lds	r24, 0x211B
    1314:	90 91 1c 21 	lds	r25, 0x211C
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	31 f4       	brne	.+12     	; 0x1328 <test_switches_and_LEDs+0xda>
			o_LED7SEG = 999; 
    131c:	87 ee       	ldi	r24, 0xE7	; 231
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	80 93 1b 21 	sts	0x211B, r24
    1324:	90 93 1c 21 	sts	0x211C, r25
		
		runLED();
    1328:	0e 94 3b 07 	call	0xe76	; 0xe76 <runLED>
	}
    132c:	9e cf       	rjmp	.-196    	; 0x126a <test_switches_and_LEDs+0x1c>

0000132e <test_pots>:
}

void test_pots(){
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	initLED();
    133c:	0e 94 07 07 	call	0xe0e	; 0xe0e <initLED>
	initSW();
    1340:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <initSW>
	initPOT();
    1344:	0e 94 ae 05 	call	0xb5c	; 0xb5c <initPOT>
	
	uint8_t selPOT = 0;
    1348:	19 82       	std	Y+1, r1	; 0x01
	double temp;
	
	while(1){
	runSW();
    134a:	0e 94 fb 07 	call	0xff6	; 0xff6 <runSW>
	runPOT();
    134e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <runPOT>
	
	
	o_LED7SEG = 100*(selPOT+1) + scalePOT(selPOT, 0, 7);
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	ac 01       	movw	r20, r24
    135a:	4f 5f       	subi	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	24 e6       	ldi	r18, 0x64	; 100
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	42 9f       	mul	r20, r18
    1364:	c0 01       	movw	r24, r0
    1366:	43 9f       	mul	r20, r19
    1368:	90 0d       	add	r25, r0
    136a:	52 9f       	mul	r21, r18
    136c:	90 0d       	add	r25, r0
    136e:	11 24       	eor	r1, r1
    1370:	8c 01       	movw	r16, r24
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	47 e0       	ldi	r20, 0x07	; 7
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	0e 94 92 06 	call	0xd24	; 0xd24 <scalePOT>
    1380:	80 0f       	add	r24, r16
    1382:	91 1f       	adc	r25, r17
    1384:	80 93 1b 21 	sts	0x211B, r24
    1388:	90 93 1c 21 	sts	0x211C, r25
			
	if(i_SWENCon){
    138c:	80 91 0c 21 	lds	r24, 0x210C
    1390:	88 23       	and	r24, r24
    1392:	39 f0       	breq	.+14     	; 0x13a2 <test_pots+0x74>
		selPOT++;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	89 83       	std	Y+1, r24	; 0x01
		if (selPOT>4)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	85 30       	cpi	r24, 0x05	; 5
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <test_pots+0x74>
			selPOT = 0;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	runLED();
    13a2:	0e 94 3b 07 	call	0xe76	; 0xe76 <runLED>
	
	}	
    13a6:	d1 cf       	rjmp	.-94     	; 0x134a <test_pots+0x1c>

000013a8 <main>:
}

int main(void) {
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62

	test_pots();
    13b0:	0e 94 97 09 	call	0x132e	; 0x132e <test_pots>


	return 0;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <__fixunssfsi>:
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	7b 01       	movw	r14, r22
    13c8:	8c 01       	movw	r16, r24
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	5f e4       	ldi	r21, 0x4F	; 79
    13d2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__gesf2>
    13d6:	87 fd       	sbrc	r24, 7
    13d8:	11 c0       	rjmp	.+34     	; 0x13fc <__fixunssfsi+0x3e>
    13da:	c8 01       	movw	r24, r16
    13dc:	b7 01       	movw	r22, r14
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	5f e4       	ldi	r21, 0x4F	; 79
    13e6:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
    13ea:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	20 50       	subi	r18, 0x00	; 0
    13f4:	30 40       	sbci	r19, 0x00	; 0
    13f6:	40 40       	sbci	r20, 0x00	; 0
    13f8:	50 48       	sbci	r21, 0x80	; 128
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <__fixunssfsi+0x4a>
    13fc:	c8 01       	movw	r24, r16
    13fe:	b7 01       	movw	r22, r14
    1400:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	b9 01       	movw	r22, r18
    140a:	ca 01       	movw	r24, r20
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	08 95       	ret

00001416 <_fpadd_parts>:
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e1 e1       	ldi	r30, 0x11	; 17
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x8>
    1422:	fc 01       	movw	r30, r24
    1424:	ea 01       	movw	r28, r20
    1426:	80 81       	ld	r24, Z
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	08 f4       	brcc	.+2      	; 0x142e <_fpadd_parts+0x18>
    142c:	38 c1       	rjmp	.+624    	; 0x169e <_fpadd_parts+0x288>
    142e:	db 01       	movw	r26, r22
    1430:	9c 91       	ld	r25, X
    1432:	92 30       	cpi	r25, 0x02	; 2
    1434:	08 f4       	brcc	.+2      	; 0x1438 <_fpadd_parts+0x22>
    1436:	30 c1       	rjmp	.+608    	; 0x1698 <_fpadd_parts+0x282>
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	59 f4       	brne	.+22     	; 0x1452 <_fpadd_parts+0x3c>
    143c:	94 30       	cpi	r25, 0x04	; 4
    143e:	09 f0       	breq	.+2      	; 0x1442 <_fpadd_parts+0x2c>
    1440:	2e c1       	rjmp	.+604    	; 0x169e <_fpadd_parts+0x288>
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	8c 91       	ld	r24, X
    1448:	11 97       	sbiw	r26, 0x01	; 1
    144a:	98 17       	cp	r25, r24
    144c:	09 f0       	breq	.+2      	; 0x1450 <_fpadd_parts+0x3a>
    144e:	21 c1       	rjmp	.+578    	; 0x1692 <_fpadd_parts+0x27c>
    1450:	26 c1       	rjmp	.+588    	; 0x169e <_fpadd_parts+0x288>
    1452:	94 30       	cpi	r25, 0x04	; 4
    1454:	09 f4       	brne	.+2      	; 0x1458 <_fpadd_parts+0x42>
    1456:	20 c1       	rjmp	.+576    	; 0x1698 <_fpadd_parts+0x282>
    1458:	92 30       	cpi	r25, 0x02	; 2
    145a:	b1 f4       	brne	.+44     	; 0x1488 <_fpadd_parts+0x72>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	09 f0       	breq	.+2      	; 0x1462 <_fpadd_parts+0x4c>
    1460:	1e c1       	rjmp	.+572    	; 0x169e <_fpadd_parts+0x288>
    1462:	ca 01       	movw	r24, r20
    1464:	af 01       	movw	r20, r30
    1466:	28 e0       	ldi	r18, 0x08	; 8
    1468:	da 01       	movw	r26, r20
    146a:	0d 90       	ld	r0, X+
    146c:	ad 01       	movw	r20, r26
    146e:	dc 01       	movw	r26, r24
    1470:	0d 92       	st	X+, r0
    1472:	cd 01       	movw	r24, r26
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	c1 f7       	brne	.-16     	; 0x1468 <_fpadd_parts+0x52>
    1478:	db 01       	movw	r26, r22
    147a:	11 96       	adiw	r26, 0x01	; 1
    147c:	8c 91       	ld	r24, X
    147e:	11 97       	sbiw	r26, 0x01	; 1
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	89 23       	and	r24, r25
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	0a c1       	rjmp	.+532    	; 0x169c <_fpadd_parts+0x286>
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	09 f4       	brne	.+2      	; 0x148e <_fpadd_parts+0x78>
    148c:	05 c1       	rjmp	.+522    	; 0x1698 <_fpadd_parts+0x282>
    148e:	c2 80       	ldd	r12, Z+2	; 0x02
    1490:	d3 80       	ldd	r13, Z+3	; 0x03
    1492:	db 01       	movw	r26, r22
    1494:	12 96       	adiw	r26, 0x02	; 2
    1496:	6d 90       	ld	r6, X+
    1498:	7c 90       	ld	r7, X
    149a:	13 97       	sbiw	r26, 0x03	; 3
    149c:	24 81       	ldd	r18, Z+4	; 0x04
    149e:	35 81       	ldd	r19, Z+5	; 0x05
    14a0:	46 81       	ldd	r20, Z+6	; 0x06
    14a2:	57 81       	ldd	r21, Z+7	; 0x07
    14a4:	14 96       	adiw	r26, 0x04	; 4
    14a6:	ed 90       	ld	r14, X+
    14a8:	fd 90       	ld	r15, X+
    14aa:	0d 91       	ld	r16, X+
    14ac:	1c 91       	ld	r17, X
    14ae:	17 97       	sbiw	r26, 0x07	; 7
    14b0:	c6 01       	movw	r24, r12
    14b2:	86 19       	sub	r24, r6
    14b4:	97 09       	sbc	r25, r7
    14b6:	5c 01       	movw	r10, r24
    14b8:	97 ff       	sbrs	r25, 7
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <_fpadd_parts+0xae>
    14bc:	aa 24       	eor	r10, r10
    14be:	bb 24       	eor	r11, r11
    14c0:	a8 1a       	sub	r10, r24
    14c2:	b9 0a       	sbc	r11, r25
    14c4:	b0 e2       	ldi	r27, 0x20	; 32
    14c6:	ab 16       	cp	r10, r27
    14c8:	b1 04       	cpc	r11, r1
    14ca:	0c f0       	brlt	.+2      	; 0x14ce <_fpadd_parts+0xb8>
    14cc:	61 c0       	rjmp	.+194    	; 0x1590 <_fpadd_parts+0x17a>
    14ce:	18 16       	cp	r1, r24
    14d0:	19 06       	cpc	r1, r25
    14d2:	6c f5       	brge	.+90     	; 0x152e <_fpadd_parts+0x118>
    14d4:	37 01       	movw	r6, r14
    14d6:	48 01       	movw	r8, r16
    14d8:	0a 2c       	mov	r0, r10
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <_fpadd_parts+0xce>
    14dc:	96 94       	lsr	r9
    14de:	87 94       	ror	r8
    14e0:	77 94       	ror	r7
    14e2:	67 94       	ror	r6
    14e4:	0a 94       	dec	r0
    14e6:	d2 f7       	brpl	.-12     	; 0x14dc <_fpadd_parts+0xc6>
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	0a 2c       	mov	r0, r10
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <_fpadd_parts+0xe6>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	aa 1f       	adc	r26, r26
    14fa:	bb 1f       	adc	r27, r27
    14fc:	0a 94       	dec	r0
    14fe:	d2 f7       	brpl	.-12     	; 0x14f4 <_fpadd_parts+0xde>
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	8e 21       	and	r24, r14
    1508:	9f 21       	and	r25, r15
    150a:	a0 23       	and	r26, r16
    150c:	b1 23       	and	r27, r17
    150e:	ee 24       	eor	r14, r14
    1510:	ff 24       	eor	r15, r15
    1512:	87 01       	movw	r16, r14
    1514:	e3 94       	inc	r14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	a1 05       	cpc	r26, r1
    151a:	b1 05       	cpc	r27, r1
    151c:	19 f4       	brne	.+6      	; 0x1524 <_fpadd_parts+0x10e>
    151e:	ee 24       	eor	r14, r14
    1520:	ff 24       	eor	r15, r15
    1522:	87 01       	movw	r16, r14
    1524:	e6 28       	or	r14, r6
    1526:	f7 28       	or	r15, r7
    1528:	08 29       	or	r16, r8
    152a:	19 29       	or	r17, r9
    152c:	3c c0       	rjmp	.+120    	; 0x15a6 <_fpadd_parts+0x190>
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	d1 f1       	breq	.+116    	; 0x15a6 <_fpadd_parts+0x190>
    1532:	ca 0c       	add	r12, r10
    1534:	db 1c       	adc	r13, r11
    1536:	39 01       	movw	r6, r18
    1538:	4a 01       	movw	r8, r20
    153a:	0a 2c       	mov	r0, r10
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <_fpadd_parts+0x130>
    153e:	96 94       	lsr	r9
    1540:	87 94       	ror	r8
    1542:	77 94       	ror	r7
    1544:	67 94       	ror	r6
    1546:	0a 94       	dec	r0
    1548:	d2 f7       	brpl	.-12     	; 0x153e <_fpadd_parts+0x128>
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	0a 2c       	mov	r0, r10
    1554:	04 c0       	rjmp	.+8      	; 0x155e <_fpadd_parts+0x148>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	aa 1f       	adc	r26, r26
    155c:	bb 1f       	adc	r27, r27
    155e:	0a 94       	dec	r0
    1560:	d2 f7       	brpl	.-12     	; 0x1556 <_fpadd_parts+0x140>
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	a1 09       	sbc	r26, r1
    1566:	b1 09       	sbc	r27, r1
    1568:	82 23       	and	r24, r18
    156a:	93 23       	and	r25, r19
    156c:	a4 23       	and	r26, r20
    156e:	b5 23       	and	r27, r21
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	a1 05       	cpc	r26, r1
    157c:	b1 05       	cpc	r27, r1
    157e:	19 f4       	brne	.+6      	; 0x1586 <_fpadd_parts+0x170>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	26 29       	or	r18, r6
    1588:	37 29       	or	r19, r7
    158a:	48 29       	or	r20, r8
    158c:	59 29       	or	r21, r9
    158e:	0b c0       	rjmp	.+22     	; 0x15a6 <_fpadd_parts+0x190>
    1590:	6c 14       	cp	r6, r12
    1592:	7d 04       	cpc	r7, r13
    1594:	24 f4       	brge	.+8      	; 0x159e <_fpadd_parts+0x188>
    1596:	ee 24       	eor	r14, r14
    1598:	ff 24       	eor	r15, r15
    159a:	87 01       	movw	r16, r14
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <_fpadd_parts+0x190>
    159e:	63 01       	movw	r12, r6
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	81 81       	ldd	r24, Z+1	; 0x01
    15a8:	fb 01       	movw	r30, r22
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	89 17       	cp	r24, r25
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_fpadd_parts+0x19c>
    15b0:	45 c0       	rjmp	.+138    	; 0x163c <_fpadd_parts+0x226>
    15b2:	88 23       	and	r24, r24
    15b4:	49 f0       	breq	.+18     	; 0x15c8 <_fpadd_parts+0x1b2>
    15b6:	d8 01       	movw	r26, r16
    15b8:	c7 01       	movw	r24, r14
    15ba:	82 1b       	sub	r24, r18
    15bc:	93 0b       	sbc	r25, r19
    15be:	a4 0b       	sbc	r26, r20
    15c0:	b5 0b       	sbc	r27, r21
    15c2:	9c 01       	movw	r18, r24
    15c4:	ad 01       	movw	r20, r26
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <_fpadd_parts+0x1ba>
    15c8:	2e 19       	sub	r18, r14
    15ca:	3f 09       	sbc	r19, r15
    15cc:	40 0b       	sbc	r20, r16
    15ce:	51 0b       	sbc	r21, r17
    15d0:	57 fd       	sbrc	r21, 7
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <_fpadd_parts+0x1c6>
    15d4:	19 82       	std	Y+1, r1	; 0x01
    15d6:	ca 82       	std	Y+2, r12	; 0x02
    15d8:	db 82       	std	Y+3, r13	; 0x03
    15da:	0b c0       	rjmp	.+22     	; 0x15f2 <_fpadd_parts+0x1dc>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	ca 82       	std	Y+2, r12	; 0x02
    15e2:	db 82       	std	Y+3, r13	; 0x03
    15e4:	50 95       	com	r21
    15e6:	40 95       	com	r20
    15e8:	30 95       	com	r19
    15ea:	21 95       	neg	r18
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	4f 4f       	sbci	r20, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	3d 83       	std	Y+5, r19	; 0x05
    15f6:	4e 83       	std	Y+6, r20	; 0x06
    15f8:	5f 83       	std	Y+7, r21	; 0x07
    15fa:	0d c0       	rjmp	.+26     	; 0x1616 <_fpadd_parts+0x200>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	8c 83       	std	Y+4, r24	; 0x04
    1606:	9d 83       	std	Y+5, r25	; 0x05
    1608:	ae 83       	std	Y+6, r26	; 0x06
    160a:	bf 83       	std	Y+7, r27	; 0x07
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	8a 83       	std	Y+2, r24	; 0x02
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	ae 81       	ldd	r26, Y+6	; 0x06
    161c:	bf 81       	ldd	r27, Y+7	; 0x07
    161e:	9c 01       	movw	r18, r24
    1620:	ad 01       	movw	r20, r26
    1622:	21 50       	subi	r18, 0x01	; 1
    1624:	30 40       	sbci	r19, 0x00	; 0
    1626:	40 40       	sbci	r20, 0x00	; 0
    1628:	50 40       	sbci	r21, 0x00	; 0
    162a:	2f 3f       	cpi	r18, 0xFF	; 255
    162c:	ef ef       	ldi	r30, 0xFF	; 255
    162e:	3e 07       	cpc	r19, r30
    1630:	ef ef       	ldi	r30, 0xFF	; 255
    1632:	4e 07       	cpc	r20, r30
    1634:	ef e3       	ldi	r30, 0x3F	; 63
    1636:	5e 07       	cpc	r21, r30
    1638:	08 f3       	brcs	.-62     	; 0x15fc <_fpadd_parts+0x1e6>
    163a:	0b c0       	rjmp	.+22     	; 0x1652 <_fpadd_parts+0x23c>
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	ca 82       	std	Y+2, r12	; 0x02
    1640:	db 82       	std	Y+3, r13	; 0x03
    1642:	2e 0d       	add	r18, r14
    1644:	3f 1d       	adc	r19, r15
    1646:	40 1f       	adc	r20, r16
    1648:	51 1f       	adc	r21, r17
    164a:	2c 83       	std	Y+4, r18	; 0x04
    164c:	3d 83       	std	Y+5, r19	; 0x05
    164e:	4e 83       	std	Y+6, r20	; 0x06
    1650:	5f 83       	std	Y+7, r21	; 0x07
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	88 83       	st	Y, r24
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	4e 81       	ldd	r20, Y+6	; 0x06
    165c:	5f 81       	ldd	r21, Y+7	; 0x07
    165e:	57 ff       	sbrs	r21, 7
    1660:	1d c0       	rjmp	.+58     	; 0x169c <_fpadd_parts+0x286>
    1662:	da 01       	movw	r26, r20
    1664:	c9 01       	movw	r24, r18
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	90 70       	andi	r25, 0x00	; 0
    166a:	a0 70       	andi	r26, 0x00	; 0
    166c:	b0 70       	andi	r27, 0x00	; 0
    166e:	56 95       	lsr	r21
    1670:	47 95       	ror	r20
    1672:	37 95       	ror	r19
    1674:	27 95       	ror	r18
    1676:	82 2b       	or	r24, r18
    1678:	93 2b       	or	r25, r19
    167a:	a4 2b       	or	r26, r20
    167c:	b5 2b       	or	r27, r21
    167e:	8c 83       	std	Y+4, r24	; 0x04
    1680:	9d 83       	std	Y+5, r25	; 0x05
    1682:	ae 83       	std	Y+6, r26	; 0x06
    1684:	bf 83       	std	Y+7, r27	; 0x07
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	9b 83       	std	Y+3, r25	; 0x03
    1690:	05 c0       	rjmp	.+10     	; 0x169c <_fpadd_parts+0x286>
    1692:	e0 e0       	ldi	r30, 0x00	; 0
    1694:	f0 e2       	ldi	r31, 0x20	; 32
    1696:	03 c0       	rjmp	.+6      	; 0x169e <_fpadd_parts+0x288>
    1698:	fb 01       	movw	r30, r22
    169a:	01 c0       	rjmp	.+2      	; 0x169e <_fpadd_parts+0x288>
    169c:	fe 01       	movw	r30, r28
    169e:	cf 01       	movw	r24, r30
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	ee e0       	ldi	r30, 0x0E	; 14
    16a6:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x8>

000016aa <__addsf3>:
    16aa:	a0 e2       	ldi	r26, 0x20	; 32
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	fb e0       	ldi	r31, 0x0B	; 11
    16b2:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__+0x18>
    16b6:	69 83       	std	Y+1, r22	; 0x01
    16b8:	7a 83       	std	Y+2, r23	; 0x02
    16ba:	8b 83       	std	Y+3, r24	; 0x03
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	2d 83       	std	Y+5, r18	; 0x05
    16c0:	3e 83       	std	Y+6, r19	; 0x06
    16c2:	4f 83       	std	Y+7, r20	; 0x07
    16c4:	58 87       	std	Y+8, r21	; 0x08
    16c6:	89 e0       	ldi	r24, 0x09	; 9
    16c8:	e8 2e       	mov	r14, r24
    16ca:	f1 2c       	mov	r15, r1
    16cc:	ec 0e       	add	r14, r28
    16ce:	fd 1e       	adc	r15, r29
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	b7 01       	movw	r22, r14
    16d6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    16da:	8e 01       	movw	r16, r28
    16dc:	0f 5e       	subi	r16, 0xEF	; 239
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	ce 01       	movw	r24, r28
    16e2:	05 96       	adiw	r24, 0x05	; 5
    16e4:	b8 01       	movw	r22, r16
    16e6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    16ea:	c7 01       	movw	r24, r14
    16ec:	b8 01       	movw	r22, r16
    16ee:	ae 01       	movw	r20, r28
    16f0:	47 5e       	subi	r20, 0xE7	; 231
    16f2:	5f 4f       	sbci	r21, 0xFF	; 255
    16f4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_fpadd_parts>
    16f8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    16fc:	a0 96       	adiw	r28, 0x20	; 32
    16fe:	e6 e0       	ldi	r30, 0x06	; 6
    1700:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

00001704 <__subsf3>:
    1704:	a0 e2       	ldi	r26, 0x20	; 32
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e8       	ldi	r30, 0x88	; 136
    170a:	fb e0       	ldi	r31, 0x0B	; 11
    170c:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__+0x18>
    1710:	69 83       	std	Y+1, r22	; 0x01
    1712:	7a 83       	std	Y+2, r23	; 0x02
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	2d 83       	std	Y+5, r18	; 0x05
    171a:	3e 83       	std	Y+6, r19	; 0x06
    171c:	4f 83       	std	Y+7, r20	; 0x07
    171e:	58 87       	std	Y+8, r21	; 0x08
    1720:	8e 01       	movw	r16, r28
    1722:	07 5f       	subi	r16, 0xF7	; 247
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	ce 01       	movw	r24, r28
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	b8 01       	movw	r22, r16
    172c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1730:	91 e1       	ldi	r25, 0x11	; 17
    1732:	e9 2e       	mov	r14, r25
    1734:	f1 2c       	mov	r15, r1
    1736:	ec 0e       	add	r14, r28
    1738:	fd 1e       	adc	r15, r29
    173a:	ce 01       	movw	r24, r28
    173c:	05 96       	adiw	r24, 0x05	; 5
    173e:	b7 01       	movw	r22, r14
    1740:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1744:	8a 89       	ldd	r24, Y+18	; 0x12
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	89 27       	eor	r24, r25
    174a:	8a 8b       	std	Y+18, r24	; 0x12
    174c:	c8 01       	movw	r24, r16
    174e:	b7 01       	movw	r22, r14
    1750:	ae 01       	movw	r20, r28
    1752:	47 5e       	subi	r20, 0xE7	; 231
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_fpadd_parts>
    175a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    175e:	a0 96       	adiw	r28, 0x20	; 32
    1760:	e6 e0       	ldi	r30, 0x06	; 6
    1762:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

00001766 <__mulsf3>:
    1766:	a0 e2       	ldi	r26, 0x20	; 32
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e9 eb       	ldi	r30, 0xB9	; 185
    176c:	fb e0       	ldi	r31, 0x0B	; 11
    176e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__>
    1772:	69 83       	std	Y+1, r22	; 0x01
    1774:	7a 83       	std	Y+2, r23	; 0x02
    1776:	8b 83       	std	Y+3, r24	; 0x03
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	2d 83       	std	Y+5, r18	; 0x05
    177c:	3e 83       	std	Y+6, r19	; 0x06
    177e:	4f 83       	std	Y+7, r20	; 0x07
    1780:	58 87       	std	Y+8, r21	; 0x08
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	be 01       	movw	r22, r28
    1788:	67 5f       	subi	r22, 0xF7	; 247
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1790:	ce 01       	movw	r24, r28
    1792:	05 96       	adiw	r24, 0x05	; 5
    1794:	be 01       	movw	r22, r28
    1796:	6f 5e       	subi	r22, 0xEF	; 239
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    179e:	99 85       	ldd	r25, Y+9	; 0x09
    17a0:	92 30       	cpi	r25, 0x02	; 2
    17a2:	78 f0       	brcs	.+30     	; 0x17c2 <__mulsf3+0x5c>
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	c0 f0       	brcs	.+48     	; 0x17da <__mulsf3+0x74>
    17aa:	94 30       	cpi	r25, 0x04	; 4
    17ac:	19 f4       	brne	.+6      	; 0x17b4 <__mulsf3+0x4e>
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <__mulsf3+0x5c>
    17b2:	cb c0       	rjmp	.+406    	; 0x194a <__mulsf3+0x1e4>
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	19 f4       	brne	.+6      	; 0x17be <__mulsf3+0x58>
    17b8:	92 30       	cpi	r25, 0x02	; 2
    17ba:	79 f4       	brne	.+30     	; 0x17da <__mulsf3+0x74>
    17bc:	c6 c0       	rjmp	.+396    	; 0x194a <__mulsf3+0x1e4>
    17be:	92 30       	cpi	r25, 0x02	; 2
    17c0:	51 f4       	brne	.+20     	; 0x17d6 <__mulsf3+0x70>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c6:	9a 89       	ldd	r25, Y+18	; 0x12
    17c8:	29 17       	cp	r18, r25
    17ca:	09 f4       	brne	.+2      	; 0x17ce <__mulsf3+0x68>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	8a 87       	std	Y+10, r24	; 0x0a
    17d0:	ce 01       	movw	r24, r28
    17d2:	09 96       	adiw	r24, 0x09	; 9
    17d4:	bc c0       	rjmp	.+376    	; 0x194e <__mulsf3+0x1e8>
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	51 f4       	brne	.+20     	; 0x17ee <__mulsf3+0x88>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    17de:	9a 89       	ldd	r25, Y+18	; 0x12
    17e0:	29 17       	cp	r18, r25
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <__mulsf3+0x80>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	8a 8b       	std	Y+18, r24	; 0x12
    17e8:	ce 01       	movw	r24, r28
    17ea:	41 96       	adiw	r24, 0x11	; 17
    17ec:	b0 c0       	rjmp	.+352    	; 0x194e <__mulsf3+0x1e8>
    17ee:	6d 84       	ldd	r6, Y+13	; 0x0d
    17f0:	7e 84       	ldd	r7, Y+14	; 0x0e
    17f2:	8f 84       	ldd	r8, Y+15	; 0x0f
    17f4:	98 88       	ldd	r9, Y+16	; 0x10
    17f6:	ed 88       	ldd	r14, Y+21	; 0x15
    17f8:	fe 88       	ldd	r15, Y+22	; 0x16
    17fa:	0f 89       	ldd	r16, Y+23	; 0x17
    17fc:	18 8d       	ldd	r17, Y+24	; 0x18
    17fe:	e0 e2       	ldi	r30, 0x20	; 32
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	dc 01       	movw	r26, r24
    1808:	aa 24       	eor	r10, r10
    180a:	bb 24       	eor	r11, r11
    180c:	65 01       	movw	r12, r10
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	b3 01       	movw	r22, r6
    1816:	61 70       	andi	r22, 0x01	; 1
    1818:	70 70       	andi	r23, 0x00	; 0
    181a:	61 15       	cp	r22, r1
    181c:	71 05       	cpc	r23, r1
    181e:	d1 f0       	breq	.+52     	; 0x1854 <__mulsf3+0xee>
    1820:	2e 0d       	add	r18, r14
    1822:	3f 1d       	adc	r19, r15
    1824:	40 1f       	adc	r20, r16
    1826:	51 1f       	adc	r21, r17
    1828:	15 01       	movw	r2, r10
    182a:	26 01       	movw	r4, r12
    182c:	28 0e       	add	r2, r24
    182e:	39 1e       	adc	r3, r25
    1830:	4a 1e       	adc	r4, r26
    1832:	5b 1e       	adc	r5, r27
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	2e 15       	cp	r18, r14
    183e:	3f 05       	cpc	r19, r15
    1840:	40 07       	cpc	r20, r16
    1842:	51 07       	cpc	r21, r17
    1844:	18 f0       	brcs	.+6      	; 0x184c <__mulsf3+0xe6>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	dc 01       	movw	r26, r24
    184c:	82 0d       	add	r24, r2
    184e:	93 1d       	adc	r25, r3
    1850:	a4 1d       	adc	r26, r4
    1852:	b5 1d       	adc	r27, r5
    1854:	aa 0c       	add	r10, r10
    1856:	bb 1c       	adc	r11, r11
    1858:	cc 1c       	adc	r12, r12
    185a:	dd 1c       	adc	r13, r13
    185c:	17 ff       	sbrs	r17, 7
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <__mulsf3+0x10c>
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	26 2e       	mov	r2, r22
    1864:	31 2c       	mov	r3, r1
    1866:	41 2c       	mov	r4, r1
    1868:	51 2c       	mov	r5, r1
    186a:	a2 28       	or	r10, r2
    186c:	b3 28       	or	r11, r3
    186e:	c4 28       	or	r12, r4
    1870:	d5 28       	or	r13, r5
    1872:	31 97       	sbiw	r30, 0x01	; 1
    1874:	49 f0       	breq	.+18     	; 0x1888 <__mulsf3+0x122>
    1876:	ee 0c       	add	r14, r14
    1878:	ff 1c       	adc	r15, r15
    187a:	00 1f       	adc	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	96 94       	lsr	r9
    1880:	87 94       	ror	r8
    1882:	77 94       	ror	r7
    1884:	67 94       	ror	r6
    1886:	c6 cf       	rjmp	.-116    	; 0x1814 <__mulsf3+0xae>
    1888:	6b 89       	ldd	r22, Y+19	; 0x13
    188a:	7c 89       	ldd	r23, Y+20	; 0x14
    188c:	eb 85       	ldd	r30, Y+11	; 0x0b
    188e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1890:	6e 0f       	add	r22, r30
    1892:	7f 1f       	adc	r23, r31
    1894:	6e 5f       	subi	r22, 0xFE	; 254
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	6b 8f       	std	Y+27, r22	; 0x1b
    189a:	7c 8f       	std	Y+28, r23	; 0x1c
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	ea 85       	ldd	r30, Y+10	; 0x0a
    18a0:	7a 89       	ldd	r23, Y+18	; 0x12
    18a2:	e7 17       	cp	r30, r23
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <__mulsf3+0x142>
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	6a 8f       	std	Y+26, r22	; 0x1a
    18aa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    18ac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    18ae:	10 c0       	rjmp	.+32     	; 0x18d0 <__mulsf3+0x16a>
    18b0:	fc 01       	movw	r30, r24
    18b2:	e1 70       	andi	r30, 0x01	; 1
    18b4:	f0 70       	andi	r31, 0x00	; 0
    18b6:	30 97       	sbiw	r30, 0x00	; 0
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <__mulsf3+0x15e>
    18ba:	56 95       	lsr	r21
    18bc:	47 95       	ror	r20
    18be:	37 95       	ror	r19
    18c0:	27 95       	ror	r18
    18c2:	50 68       	ori	r21, 0x80	; 128
    18c4:	b6 95       	lsr	r27
    18c6:	a7 95       	ror	r26
    18c8:	97 95       	ror	r25
    18ca:	87 95       	ror	r24
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	b7 fd       	sbrc	r27, 7
    18d2:	ee cf       	rjmp	.-36     	; 0x18b0 <__mulsf3+0x14a>
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <__mulsf3+0x188>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	aa 1f       	adc	r26, r26
    18dc:	bb 1f       	adc	r27, r27
    18de:	57 fd       	sbrc	r21, 7
    18e0:	81 60       	ori	r24, 0x01	; 1
    18e2:	22 0f       	add	r18, r18
    18e4:	33 1f       	adc	r19, r19
    18e6:	44 1f       	adc	r20, r20
    18e8:	55 1f       	adc	r21, r21
    18ea:	61 50       	subi	r22, 0x01	; 1
    18ec:	70 40       	sbci	r23, 0x00	; 0
    18ee:	80 30       	cpi	r24, 0x00	; 0
    18f0:	e0 e0       	ldi	r30, 0x00	; 0
    18f2:	9e 07       	cpc	r25, r30
    18f4:	e0 e0       	ldi	r30, 0x00	; 0
    18f6:	ae 07       	cpc	r26, r30
    18f8:	e0 e4       	ldi	r30, 0x40	; 64
    18fa:	be 07       	cpc	r27, r30
    18fc:	60 f3       	brcs	.-40     	; 0x18d6 <__mulsf3+0x170>
    18fe:	6b 8f       	std	Y+27, r22	; 0x1b
    1900:	7c 8f       	std	Y+28, r23	; 0x1c
    1902:	6f e7       	ldi	r22, 0x7F	; 127
    1904:	e6 2e       	mov	r14, r22
    1906:	f1 2c       	mov	r15, r1
    1908:	01 2d       	mov	r16, r1
    190a:	11 2d       	mov	r17, r1
    190c:	e8 22       	and	r14, r24
    190e:	f9 22       	and	r15, r25
    1910:	0a 23       	and	r16, r26
    1912:	1b 23       	and	r17, r27
    1914:	60 e4       	ldi	r22, 0x40	; 64
    1916:	e6 16       	cp	r14, r22
    1918:	f1 04       	cpc	r15, r1
    191a:	01 05       	cpc	r16, r1
    191c:	11 05       	cpc	r17, r1
    191e:	61 f4       	brne	.+24     	; 0x1938 <__mulsf3+0x1d2>
    1920:	87 fd       	sbrc	r24, 7
    1922:	0a c0       	rjmp	.+20     	; 0x1938 <__mulsf3+0x1d2>
    1924:	21 15       	cp	r18, r1
    1926:	31 05       	cpc	r19, r1
    1928:	41 05       	cpc	r20, r1
    192a:	51 05       	cpc	r21, r1
    192c:	29 f0       	breq	.+10     	; 0x1938 <__mulsf3+0x1d2>
    192e:	80 5c       	subi	r24, 0xC0	; 192
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	af 4f       	sbci	r26, 0xFF	; 255
    1934:	bf 4f       	sbci	r27, 0xFF	; 255
    1936:	80 78       	andi	r24, 0x80	; 128
    1938:	8d 8f       	std	Y+29, r24	; 0x1d
    193a:	9e 8f       	std	Y+30, r25	; 0x1e
    193c:	af 8f       	std	Y+31, r26	; 0x1f
    193e:	b8 a3       	std	Y+32, r27	; 0x20
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	ce 01       	movw	r24, r28
    1946:	49 96       	adiw	r24, 0x19	; 25
    1948:	02 c0       	rjmp	.+4      	; 0x194e <__mulsf3+0x1e8>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e2       	ldi	r25, 0x20	; 32
    194e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1952:	a0 96       	adiw	r28, 0x20	; 32
    1954:	e2 e1       	ldi	r30, 0x12	; 18
    1956:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__epilogue_restores__>

0000195a <__divsf3>:
    195a:	a8 e1       	ldi	r26, 0x18	; 24
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e3 eb       	ldi	r30, 0xB3	; 179
    1960:	fc e0       	ldi	r31, 0x0C	; 12
    1962:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__prologue_saves__+0x10>
    1966:	69 83       	std	Y+1, r22	; 0x01
    1968:	7a 83       	std	Y+2, r23	; 0x02
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	2d 83       	std	Y+5, r18	; 0x05
    1970:	3e 83       	std	Y+6, r19	; 0x06
    1972:	4f 83       	std	Y+7, r20	; 0x07
    1974:	58 87       	std	Y+8, r21	; 0x08
    1976:	8e 01       	movw	r16, r28
    1978:	07 5f       	subi	r16, 0xF7	; 247
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	b8 01       	movw	r22, r16
    1982:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1986:	81 e1       	ldi	r24, 0x11	; 17
    1988:	e8 2e       	mov	r14, r24
    198a:	f1 2c       	mov	r15, r1
    198c:	ec 0e       	add	r14, r28
    198e:	fd 1e       	adc	r15, r29
    1990:	ce 01       	movw	r24, r28
    1992:	05 96       	adiw	r24, 0x05	; 5
    1994:	b7 01       	movw	r22, r14
    1996:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    199a:	99 85       	ldd	r25, Y+9	; 0x09
    199c:	92 30       	cpi	r25, 0x02	; 2
    199e:	08 f4       	brcc	.+2      	; 0x19a2 <__divsf3+0x48>
    19a0:	83 c0       	rjmp	.+262    	; 0x1aa8 <__divsf3+0x14e>
    19a2:	89 89       	ldd	r24, Y+17	; 0x11
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <__divsf3+0x50>
    19a8:	7b c0       	rjmp	.+246    	; 0x1aa0 <__divsf3+0x146>
    19aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    19ac:	3a 89       	ldd	r19, Y+18	; 0x12
    19ae:	23 27       	eor	r18, r19
    19b0:	2a 87       	std	Y+10, r18	; 0x0a
    19b2:	94 30       	cpi	r25, 0x04	; 4
    19b4:	11 f0       	breq	.+4      	; 0x19ba <__divsf3+0x60>
    19b6:	92 30       	cpi	r25, 0x02	; 2
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <__divsf3+0x68>
    19ba:	98 17       	cp	r25, r24
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <__divsf3+0x66>
    19be:	6c c0       	rjmp	.+216    	; 0x1a98 <__divsf3+0x13e>
    19c0:	71 c0       	rjmp	.+226    	; 0x1aa4 <__divsf3+0x14a>
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	39 f4       	brne	.+14     	; 0x19d4 <__divsf3+0x7a>
    19c6:	1d 86       	std	Y+13, r1	; 0x0d
    19c8:	1e 86       	std	Y+14, r1	; 0x0e
    19ca:	1f 86       	std	Y+15, r1	; 0x0f
    19cc:	18 8a       	std	Y+16, r1	; 0x10
    19ce:	1b 86       	std	Y+11, r1	; 0x0b
    19d0:	1c 86       	std	Y+12, r1	; 0x0c
    19d2:	6a c0       	rjmp	.+212    	; 0x1aa8 <__divsf3+0x14e>
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	19 f4       	brne	.+6      	; 0x19de <__divsf3+0x84>
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	89 87       	std	Y+9, r24	; 0x09
    19dc:	65 c0       	rjmp	.+202    	; 0x1aa8 <__divsf3+0x14e>
    19de:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e2:	2b 89       	ldd	r18, Y+19	; 0x13
    19e4:	3c 89       	ldd	r19, Y+20	; 0x14
    19e6:	82 1b       	sub	r24, r18
    19e8:	93 0b       	sbc	r25, r19
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
    19ec:	9c 87       	std	Y+12, r25	; 0x0c
    19ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    19f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    19f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    19f4:	58 89       	ldd	r21, Y+16	; 0x10
    19f6:	ed 88       	ldd	r14, Y+21	; 0x15
    19f8:	fe 88       	ldd	r15, Y+22	; 0x16
    19fa:	0f 89       	ldd	r16, Y+23	; 0x17
    19fc:	18 8d       	ldd	r17, Y+24	; 0x18
    19fe:	2e 15       	cp	r18, r14
    1a00:	3f 05       	cpc	r19, r15
    1a02:	40 07       	cpc	r20, r16
    1a04:	51 07       	cpc	r21, r17
    1a06:	38 f4       	brcc	.+14     	; 0x1a16 <__divsf3+0xbc>
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	8b 87       	std	Y+11, r24	; 0x0b
    1a14:	9c 87       	std	Y+12, r25	; 0x0c
    1a16:	6f e1       	ldi	r22, 0x1F	; 31
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	a1 2c       	mov	r10, r1
    1a1c:	b1 2c       	mov	r11, r1
    1a1e:	c1 2c       	mov	r12, r1
    1a20:	a0 e4       	ldi	r26, 0x40	; 64
    1a22:	da 2e       	mov	r13, r26
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	dc 01       	movw	r26, r24
    1a2a:	2e 15       	cp	r18, r14
    1a2c:	3f 05       	cpc	r19, r15
    1a2e:	40 07       	cpc	r20, r16
    1a30:	51 07       	cpc	r21, r17
    1a32:	40 f0       	brcs	.+16     	; 0x1a44 <__divsf3+0xea>
    1a34:	8a 29       	or	r24, r10
    1a36:	9b 29       	or	r25, r11
    1a38:	ac 29       	or	r26, r12
    1a3a:	bd 29       	or	r27, r13
    1a3c:	2e 19       	sub	r18, r14
    1a3e:	3f 09       	sbc	r19, r15
    1a40:	40 0b       	sbc	r20, r16
    1a42:	51 0b       	sbc	r21, r17
    1a44:	d6 94       	lsr	r13
    1a46:	c7 94       	ror	r12
    1a48:	b7 94       	ror	r11
    1a4a:	a7 94       	ror	r10
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	61 50       	subi	r22, 0x01	; 1
    1a56:	70 40       	sbci	r23, 0x00	; 0
    1a58:	41 f7       	brne	.-48     	; 0x1a2a <__divsf3+0xd0>
    1a5a:	6f e7       	ldi	r22, 0x7F	; 127
    1a5c:	e6 2e       	mov	r14, r22
    1a5e:	f1 2c       	mov	r15, r1
    1a60:	01 2d       	mov	r16, r1
    1a62:	11 2d       	mov	r17, r1
    1a64:	e8 22       	and	r14, r24
    1a66:	f9 22       	and	r15, r25
    1a68:	0a 23       	and	r16, r26
    1a6a:	1b 23       	and	r17, r27
    1a6c:	60 e4       	ldi	r22, 0x40	; 64
    1a6e:	e6 16       	cp	r14, r22
    1a70:	f1 04       	cpc	r15, r1
    1a72:	01 05       	cpc	r16, r1
    1a74:	11 05       	cpc	r17, r1
    1a76:	61 f4       	brne	.+24     	; 0x1a90 <__divsf3+0x136>
    1a78:	87 fd       	sbrc	r24, 7
    1a7a:	0a c0       	rjmp	.+20     	; 0x1a90 <__divsf3+0x136>
    1a7c:	21 15       	cp	r18, r1
    1a7e:	31 05       	cpc	r19, r1
    1a80:	41 05       	cpc	r20, r1
    1a82:	51 05       	cpc	r21, r1
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <__divsf3+0x136>
    1a86:	80 5c       	subi	r24, 0xC0	; 192
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	af 4f       	sbci	r26, 0xFF	; 255
    1a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8e:	80 78       	andi	r24, 0x80	; 128
    1a90:	8d 87       	std	Y+13, r24	; 0x0d
    1a92:	9e 87       	std	Y+14, r25	; 0x0e
    1a94:	af 87       	std	Y+15, r26	; 0x0f
    1a96:	b8 8b       	std	Y+16, r27	; 0x10
    1a98:	8e 01       	movw	r16, r28
    1a9a:	07 5f       	subi	r16, 0xF7	; 247
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <__divsf3+0x14e>
    1aa0:	87 01       	movw	r16, r14
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <__divsf3+0x14e>
    1aa4:	00 e0       	ldi	r16, 0x00	; 0
    1aa6:	10 e2       	ldi	r17, 0x20	; 32
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1aae:	68 96       	adiw	r28, 0x18	; 24
    1ab0:	ea e0       	ldi	r30, 0x0A	; 10
    1ab2:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__+0x10>

00001ab6 <__gesf2>:
    1ab6:	a8 e1       	ldi	r26, 0x18	; 24
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e1 e6       	ldi	r30, 0x61	; 97
    1abc:	fd e0       	ldi	r31, 0x0D	; 13
    1abe:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__+0x18>
    1ac2:	69 83       	std	Y+1, r22	; 0x01
    1ac4:	7a 83       	std	Y+2, r23	; 0x02
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	2d 83       	std	Y+5, r18	; 0x05
    1acc:	3e 83       	std	Y+6, r19	; 0x06
    1ace:	4f 83       	std	Y+7, r20	; 0x07
    1ad0:	58 87       	std	Y+8, r21	; 0x08
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	07 5f       	subi	r16, 0xF7	; 247
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	b8 01       	movw	r22, r16
    1ade:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1ae2:	81 e1       	ldi	r24, 0x11	; 17
    1ae4:	e8 2e       	mov	r14, r24
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	ec 0e       	add	r14, r28
    1aea:	fd 1e       	adc	r15, r29
    1aec:	ce 01       	movw	r24, r28
    1aee:	05 96       	adiw	r24, 0x05	; 5
    1af0:	b7 01       	movw	r22, r14
    1af2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	40 f0       	brcs	.+16     	; 0x1b0c <__gesf2+0x56>
    1afc:	89 89       	ldd	r24, Y+17	; 0x11
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <__gesf2+0x56>
    1b02:	c8 01       	movw	r24, r16
    1b04:	b7 01       	movw	r22, r14
    1b06:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__fpcmp_parts_f>
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <__gesf2+0x58>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	68 96       	adiw	r28, 0x18	; 24
    1b10:	e6 e0       	ldi	r30, 0x06	; 6
    1b12:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

00001b16 <__fixsfsi>:
    1b16:	ac e0       	ldi	r26, 0x0C	; 12
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e9       	ldi	r30, 0x91	; 145
    1b1c:	fd e0       	ldi	r31, 0x0D	; 13
    1b1e:	0c 94 95 10 	jmp	0x212a	; 0x212a <__prologue_saves__+0x20>
    1b22:	69 83       	std	Y+1, r22	; 0x01
    1b24:	7a 83       	std	Y+2, r23	; 0x02
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	be 01       	movw	r22, r28
    1b30:	6b 5f       	subi	r22, 0xFB	; 251
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__unpack_f>
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	81 f1       	breq	.+96     	; 0x1b9e <__fixsfsi+0x88>
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	70 f1       	brcs	.+92     	; 0x1b9e <__fixsfsi+0x88>
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <__fixsfsi+0x38>
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	88 23       	and	r24, r24
    1b4a:	69 f1       	breq	.+90     	; 0x1ba6 <__fixsfsi+0x90>
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <__fixsfsi+0x4c>
    1b4e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b50:	38 85       	ldd	r19, Y+8	; 0x08
    1b52:	37 fd       	sbrc	r19, 7
    1b54:	24 c0       	rjmp	.+72     	; 0x1b9e <__fixsfsi+0x88>
    1b56:	6e 81       	ldd	r22, Y+6	; 0x06
    1b58:	2f 31       	cpi	r18, 0x1F	; 31
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	3c f0       	brlt	.+14     	; 0x1b6c <__fixsfsi+0x56>
    1b5e:	66 23       	and	r22, r22
    1b60:	11 f1       	breq	.+68     	; 0x1ba6 <__fixsfsi+0x90>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e8       	ldi	r21, 0x80	; 128
    1b6a:	21 c0       	rjmp	.+66     	; 0x1bae <__fixsfsi+0x98>
    1b6c:	8e e1       	ldi	r24, 0x1E	; 30
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	82 1b       	sub	r24, r18
    1b72:	93 0b       	sbc	r25, r19
    1b74:	29 85       	ldd	r18, Y+9	; 0x09
    1b76:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b78:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__fixsfsi+0x70>
    1b7e:	56 95       	lsr	r21
    1b80:	47 95       	ror	r20
    1b82:	37 95       	ror	r19
    1b84:	27 95       	ror	r18
    1b86:	8a 95       	dec	r24
    1b88:	d2 f7       	brpl	.-12     	; 0x1b7e <__fixsfsi+0x68>
    1b8a:	66 23       	and	r22, r22
    1b8c:	81 f0       	breq	.+32     	; 0x1bae <__fixsfsi+0x98>
    1b8e:	50 95       	com	r21
    1b90:	40 95       	com	r20
    1b92:	30 95       	com	r19
    1b94:	21 95       	neg	r18
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	08 c0       	rjmp	.+16     	; 0x1bae <__fixsfsi+0x98>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	a9 01       	movw	r20, r18
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <__fixsfsi+0x98>
    1ba6:	2f ef       	ldi	r18, 0xFF	; 255
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f ef       	ldi	r20, 0xFF	; 255
    1bac:	5f e7       	ldi	r21, 0x7F	; 127
    1bae:	b9 01       	movw	r22, r18
    1bb0:	ca 01       	movw	r24, r20
    1bb2:	2c 96       	adiw	r28, 0x0c	; 12
    1bb4:	e2 e0       	ldi	r30, 0x02	; 2
    1bb6:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x20>

00001bba <__floatunsisf>:
    1bba:	a8 e0       	ldi	r26, 0x08	; 8
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e3 ee       	ldi	r30, 0xE3	; 227
    1bc0:	fd e0       	ldi	r31, 0x0D	; 13
    1bc2:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x14>
    1bc6:	7b 01       	movw	r14, r22
    1bc8:	8c 01       	movw	r16, r24
    1bca:	1a 82       	std	Y+2, r1	; 0x02
    1bcc:	61 15       	cp	r22, r1
    1bce:	71 05       	cpc	r23, r1
    1bd0:	81 05       	cpc	r24, r1
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	19 f4       	brne	.+6      	; 0x1bdc <__floatunsisf+0x22>
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	5f c0       	rjmp	.+190    	; 0x1c9a <__floatunsisf+0xe0>
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	8e e1       	ldi	r24, 0x1E	; 30
    1be2:	c8 2e       	mov	r12, r24
    1be4:	d1 2c       	mov	r13, r1
    1be6:	cb 82       	std	Y+3, r12	; 0x03
    1be8:	dc 82       	std	Y+4, r13	; 0x04
    1bea:	ed 82       	std	Y+5, r14	; 0x05
    1bec:	fe 82       	std	Y+6, r15	; 0x06
    1bee:	0f 83       	std	Y+7, r16	; 0x07
    1bf0:	18 87       	std	Y+8, r17	; 0x08
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__clzsi2>
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	31 97       	sbiw	r30, 0x01	; 1
    1bfe:	f7 ff       	sbrs	r31, 7
    1c00:	3a c0       	rjmp	.+116    	; 0x1c76 <__floatunsisf+0xbc>
    1c02:	aa 27       	eor	r26, r26
    1c04:	bb 27       	eor	r27, r27
    1c06:	ae 1b       	sub	r26, r30
    1c08:	bf 0b       	sbc	r27, r31
    1c0a:	21 e0       	ldi	r18, 0x01	; 1
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	0a 2e       	mov	r0, r26
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <__floatunsisf+0x64>
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	44 1f       	adc	r20, r20
    1c1c:	55 1f       	adc	r21, r21
    1c1e:	0a 94       	dec	r0
    1c20:	d2 f7       	brpl	.-12     	; 0x1c16 <__floatunsisf+0x5c>
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	30 40       	sbci	r19, 0x00	; 0
    1c26:	40 40       	sbci	r20, 0x00	; 0
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	2e 21       	and	r18, r14
    1c2c:	3f 21       	and	r19, r15
    1c2e:	40 23       	and	r20, r16
    1c30:	51 23       	and	r21, r17
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	21 15       	cp	r18, r1
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	41 05       	cpc	r20, r1
    1c40:	51 05       	cpc	r21, r1
    1c42:	19 f4       	brne	.+6      	; 0x1c4a <__floatunsisf+0x90>
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	cb 01       	movw	r24, r22
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <__floatunsisf+0x9a>
    1c4c:	16 95       	lsr	r17
    1c4e:	07 95       	ror	r16
    1c50:	f7 94       	ror	r15
    1c52:	e7 94       	ror	r14
    1c54:	aa 95       	dec	r26
    1c56:	d2 f7       	brpl	.-12     	; 0x1c4c <__floatunsisf+0x92>
    1c58:	e6 2a       	or	r14, r22
    1c5a:	f7 2a       	or	r15, r23
    1c5c:	08 2b       	or	r16, r24
    1c5e:	19 2b       	or	r17, r25
    1c60:	ed 82       	std	Y+5, r14	; 0x05
    1c62:	fe 82       	std	Y+6, r15	; 0x06
    1c64:	0f 83       	std	Y+7, r16	; 0x07
    1c66:	18 87       	std	Y+8, r17	; 0x08
    1c68:	8e e1       	ldi	r24, 0x1E	; 30
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	8e 1b       	sub	r24, r30
    1c6e:	9f 0b       	sbc	r25, r31
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	12 c0       	rjmp	.+36     	; 0x1c9a <__floatunsisf+0xe0>
    1c76:	30 97       	sbiw	r30, 0x00	; 0
    1c78:	81 f0       	breq	.+32     	; 0x1c9a <__floatunsisf+0xe0>
    1c7a:	0e 2e       	mov	r0, r30
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <__floatunsisf+0xcc>
    1c7e:	ee 0c       	add	r14, r14
    1c80:	ff 1c       	adc	r15, r15
    1c82:	00 1f       	adc	r16, r16
    1c84:	11 1f       	adc	r17, r17
    1c86:	0a 94       	dec	r0
    1c88:	d2 f7       	brpl	.-12     	; 0x1c7e <__floatunsisf+0xc4>
    1c8a:	ed 82       	std	Y+5, r14	; 0x05
    1c8c:	fe 82       	std	Y+6, r15	; 0x06
    1c8e:	0f 83       	std	Y+7, r16	; 0x07
    1c90:	18 87       	std	Y+8, r17	; 0x08
    1c92:	ce 1a       	sub	r12, r30
    1c94:	df 0a       	sbc	r13, r31
    1c96:	cb 82       	std	Y+3, r12	; 0x03
    1c98:	dc 82       	std	Y+4, r13	; 0x04
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1ca2:	28 96       	adiw	r28, 0x08	; 8
    1ca4:	e8 e0       	ldi	r30, 0x08	; 8
    1ca6:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x14>

00001caa <__clzsi2>:
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	7b 01       	movw	r14, r22
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	e8 16       	cp	r14, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	f8 06       	cpc	r15, r24
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	08 07       	cpc	r16, r24
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	18 07       	cpc	r17, r24
    1cce:	58 f4       	brcc	.+22     	; 0x1ce6 <__clzsi2+0x3c>
    1cd0:	ef ef       	ldi	r30, 0xFF	; 255
    1cd2:	ee 16       	cp	r14, r30
    1cd4:	f1 04       	cpc	r15, r1
    1cd6:	01 05       	cpc	r16, r1
    1cd8:	11 05       	cpc	r17, r1
    1cda:	09 f0       	breq	.+2      	; 0x1cde <__clzsi2+0x34>
    1cdc:	90 f4       	brcc	.+36     	; 0x1d02 <__clzsi2+0x58>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <__clzsi2+0x6a>
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ef 16       	cp	r14, r31
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	ff 06       	cpc	r15, r31
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	0f 07       	cpc	r16, r31
    1cf2:	f1 e0       	ldi	r31, 0x01	; 1
    1cf4:	1f 07       	cpc	r17, r31
    1cf6:	50 f4       	brcc	.+20     	; 0x1d0c <__clzsi2+0x62>
    1cf8:	80 e1       	ldi	r24, 0x10	; 16
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <__clzsi2+0x6a>
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__clzsi2+0x6a>
    1d0c:	88 e1       	ldi	r24, 0x18	; 24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	20 e2       	ldi	r18, 0x20	; 32
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	28 1b       	sub	r18, r24
    1d1e:	39 0b       	sbc	r19, r25
    1d20:	4a 0b       	sbc	r20, r26
    1d22:	5b 0b       	sbc	r21, r27
    1d24:	57 01       	movw	r10, r14
    1d26:	68 01       	movw	r12, r16
    1d28:	04 c0       	rjmp	.+8      	; 0x1d32 <__clzsi2+0x88>
    1d2a:	d6 94       	lsr	r13
    1d2c:	c7 94       	ror	r12
    1d2e:	b7 94       	ror	r11
    1d30:	a7 94       	ror	r10
    1d32:	8a 95       	dec	r24
    1d34:	d2 f7       	brpl	.-12     	; 0x1d2a <__clzsi2+0x80>
    1d36:	d6 01       	movw	r26, r12
    1d38:	c5 01       	movw	r24, r10
    1d3a:	88 5f       	subi	r24, 0xF8	; 248
    1d3c:	9f 4d       	sbci	r25, 0xDF	; 223
    1d3e:	fc 01       	movw	r30, r24
    1d40:	80 81       	ld	r24, Z
    1d42:	28 1b       	sub	r18, r24
    1d44:	31 09       	sbc	r19, r1
    1d46:	41 09       	sbc	r20, r1
    1d48:	51 09       	sbc	r21, r1
    1d4a:	c9 01       	movw	r24, r18
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	08 95       	ret

00001d5e <__pack_f>:
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	24 81       	ldd	r18, Z+4	; 0x04
    1d6e:	35 81       	ldd	r19, Z+5	; 0x05
    1d70:	46 81       	ldd	r20, Z+6	; 0x06
    1d72:	57 81       	ldd	r21, Z+7	; 0x07
    1d74:	61 81       	ldd	r22, Z+1	; 0x01
    1d76:	80 81       	ld	r24, Z
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	20 f4       	brcc	.+8      	; 0x1d84 <__pack_f+0x26>
    1d7c:	40 61       	ori	r20, 0x10	; 16
    1d7e:	ef ef       	ldi	r30, 0xFF	; 255
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	a3 c0       	rjmp	.+326    	; 0x1eca <__pack_f+0x16c>
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <__pack_f+0x2c>
    1d88:	9b c0       	rjmp	.+310    	; 0x1ec0 <__pack_f+0x162>
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <__pack_f+0x32>
    1d8e:	92 c0       	rjmp	.+292    	; 0x1eb4 <__pack_f+0x156>
    1d90:	21 15       	cp	r18, r1
    1d92:	31 05       	cpc	r19, r1
    1d94:	41 05       	cpc	r20, r1
    1d96:	51 05       	cpc	r21, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <__pack_f+0x3e>
    1d9a:	8f c0       	rjmp	.+286    	; 0x1eba <__pack_f+0x15c>
    1d9c:	02 80       	ldd	r0, Z+2	; 0x02
    1d9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1da0:	e0 2d       	mov	r30, r0
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	e2 38       	cpi	r30, 0x82	; 130
    1da6:	f8 07       	cpc	r31, r24
    1da8:	0c f0       	brlt	.+2      	; 0x1dac <__pack_f+0x4e>
    1daa:	5a c0       	rjmp	.+180    	; 0x1e60 <__pack_f+0x102>
    1dac:	c2 e8       	ldi	r28, 0x82	; 130
    1dae:	df ef       	ldi	r29, 0xFF	; 255
    1db0:	ce 1b       	sub	r28, r30
    1db2:	df 0b       	sbc	r29, r31
    1db4:	ca 31       	cpi	r28, 0x1A	; 26
    1db6:	d1 05       	cpc	r29, r1
    1db8:	6c f5       	brge	.+90     	; 0x1e14 <__pack_f+0xb6>
    1dba:	79 01       	movw	r14, r18
    1dbc:	8a 01       	movw	r16, r20
    1dbe:	0c 2e       	mov	r0, r28
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <__pack_f+0x6c>
    1dc2:	16 95       	lsr	r17
    1dc4:	07 95       	ror	r16
    1dc6:	f7 94       	ror	r15
    1dc8:	e7 94       	ror	r14
    1dca:	0a 94       	dec	r0
    1dcc:	d2 f7       	brpl	.-12     	; 0x1dc2 <__pack_f+0x64>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	0c 2e       	mov	r0, r28
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <__pack_f+0x84>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	aa 1f       	adc	r26, r26
    1de0:	bb 1f       	adc	r27, r27
    1de2:	0a 94       	dec	r0
    1de4:	d2 f7       	brpl	.-12     	; 0x1dda <__pack_f+0x7c>
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	a1 09       	sbc	r26, r1
    1dea:	b1 09       	sbc	r27, r1
    1dec:	82 23       	and	r24, r18
    1dee:	93 23       	and	r25, r19
    1df0:	a4 23       	and	r26, r20
    1df2:	b5 23       	and	r27, r21
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	a1 05       	cpc	r26, r1
    1e00:	b1 05       	cpc	r27, r1
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <__pack_f+0xac>
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	2e 29       	or	r18, r14
    1e0c:	3f 29       	or	r19, r15
    1e0e:	40 2b       	or	r20, r16
    1e10:	51 2b       	or	r21, r17
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <__pack_f+0xbc>
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	da 01       	movw	r26, r20
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	8f 77       	andi	r24, 0x7F	; 127
    1e20:	90 70       	andi	r25, 0x00	; 0
    1e22:	a0 70       	andi	r26, 0x00	; 0
    1e24:	b0 70       	andi	r27, 0x00	; 0
    1e26:	80 34       	cpi	r24, 0x40	; 64
    1e28:	91 05       	cpc	r25, r1
    1e2a:	a1 05       	cpc	r26, r1
    1e2c:	b1 05       	cpc	r27, r1
    1e2e:	39 f4       	brne	.+14     	; 0x1e3e <__pack_f+0xe0>
    1e30:	27 ff       	sbrs	r18, 7
    1e32:	09 c0       	rjmp	.+18     	; 0x1e46 <__pack_f+0xe8>
    1e34:	20 5c       	subi	r18, 0xC0	; 192
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	4f 4f       	sbci	r20, 0xFF	; 255
    1e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <__pack_f+0xe8>
    1e3e:	21 5c       	subi	r18, 0xC1	; 193
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	4f 4f       	sbci	r20, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	e1 e0       	ldi	r30, 0x01	; 1
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	20 30       	cpi	r18, 0x00	; 0
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	38 07       	cpc	r19, r24
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	48 07       	cpc	r20, r24
    1e54:	80 e4       	ldi	r24, 0x40	; 64
    1e56:	58 07       	cpc	r21, r24
    1e58:	28 f5       	brcc	.+74     	; 0x1ea4 <__pack_f+0x146>
    1e5a:	e0 e0       	ldi	r30, 0x00	; 0
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	22 c0       	rjmp	.+68     	; 0x1ea4 <__pack_f+0x146>
    1e60:	e0 38       	cpi	r30, 0x80	; 128
    1e62:	f1 05       	cpc	r31, r1
    1e64:	6c f5       	brge	.+90     	; 0x1ec0 <__pack_f+0x162>
    1e66:	e1 58       	subi	r30, 0x81	; 129
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	da 01       	movw	r26, r20
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	8f 77       	andi	r24, 0x7F	; 127
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	a0 70       	andi	r26, 0x00	; 0
    1e74:	b0 70       	andi	r27, 0x00	; 0
    1e76:	80 34       	cpi	r24, 0x40	; 64
    1e78:	91 05       	cpc	r25, r1
    1e7a:	a1 05       	cpc	r26, r1
    1e7c:	b1 05       	cpc	r27, r1
    1e7e:	39 f4       	brne	.+14     	; 0x1e8e <__pack_f+0x130>
    1e80:	27 ff       	sbrs	r18, 7
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <__pack_f+0x138>
    1e84:	20 5c       	subi	r18, 0xC0	; 192
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	4f 4f       	sbci	r20, 0xFF	; 255
    1e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <__pack_f+0x138>
    1e8e:	21 5c       	subi	r18, 0xC1	; 193
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	4f 4f       	sbci	r20, 0xFF	; 255
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	57 ff       	sbrs	r21, 7
    1e98:	05 c0       	rjmp	.+10     	; 0x1ea4 <__pack_f+0x146>
    1e9a:	56 95       	lsr	r21
    1e9c:	47 95       	ror	r20
    1e9e:	37 95       	ror	r19
    1ea0:	27 95       	ror	r18
    1ea2:	31 96       	adiw	r30, 0x01	; 1
    1ea4:	87 e0       	ldi	r24, 0x07	; 7
    1ea6:	56 95       	lsr	r21
    1ea8:	47 95       	ror	r20
    1eaa:	37 95       	ror	r19
    1eac:	27 95       	ror	r18
    1eae:	8a 95       	dec	r24
    1eb0:	d1 f7       	brne	.-12     	; 0x1ea6 <__pack_f+0x148>
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <__pack_f+0x16c>
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <__pack_f+0x166>
    1eba:	e0 e0       	ldi	r30, 0x00	; 0
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <__pack_f+0x16c>
    1ec0:	ef ef       	ldi	r30, 0xFF	; 255
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	8e 2f       	mov	r24, r30
    1ecc:	87 95       	ror	r24
    1ece:	88 27       	eor	r24, r24
    1ed0:	87 95       	ror	r24
    1ed2:	94 2f       	mov	r25, r20
    1ed4:	9f 77       	andi	r25, 0x7F	; 127
    1ed6:	67 95       	ror	r22
    1ed8:	66 27       	eor	r22, r22
    1eda:	67 95       	ror	r22
    1edc:	e6 95       	lsr	r30
    1ede:	e2 2e       	mov	r14, r18
    1ee0:	a9 2f       	mov	r26, r25
    1ee2:	a8 2b       	or	r26, r24
    1ee4:	fe 2f       	mov	r31, r30
    1ee6:	f6 2b       	or	r31, r22
    1ee8:	62 2f       	mov	r22, r18
    1eea:	73 2f       	mov	r23, r19
    1eec:	8a 2f       	mov	r24, r26
    1eee:	9f 2f       	mov	r25, r31
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	e6 e0       	ldi	r30, 0x06	; 6
    1ef6:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

00001efa <__unpack_f>:
    1efa:	dc 01       	movw	r26, r24
    1efc:	fb 01       	movw	r30, r22
    1efe:	2c 91       	ld	r18, X
    1f00:	11 96       	adiw	r26, 0x01	; 1
    1f02:	3c 91       	ld	r19, X
    1f04:	11 97       	sbiw	r26, 0x01	; 1
    1f06:	12 96       	adiw	r26, 0x02	; 2
    1f08:	8c 91       	ld	r24, X
    1f0a:	12 97       	sbiw	r26, 0x02	; 2
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	4f 77       	andi	r20, 0x7F	; 127
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	98 2f       	mov	r25, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	99 27       	eor	r25, r25
    1f18:	99 1f       	adc	r25, r25
    1f1a:	13 96       	adiw	r26, 0x03	; 3
    1f1c:	6c 91       	ld	r22, X
    1f1e:	13 97       	sbiw	r26, 0x03	; 3
    1f20:	86 2f       	mov	r24, r22
    1f22:	88 0f       	add	r24, r24
    1f24:	89 2b       	or	r24, r25
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	66 1f       	adc	r22, r22
    1f2a:	66 27       	eor	r22, r22
    1f2c:	66 1f       	adc	r22, r22
    1f2e:	61 83       	std	Z+1, r22	; 0x01
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	39 f5       	brne	.+78     	; 0x1f82 <__unpack_f+0x88>
    1f34:	21 15       	cp	r18, r1
    1f36:	31 05       	cpc	r19, r1
    1f38:	41 05       	cpc	r20, r1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <__unpack_f+0x48>
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	29 c0       	rjmp	.+82     	; 0x1f94 <__unpack_f+0x9a>
    1f42:	82 e8       	ldi	r24, 0x82	; 130
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	82 83       	std	Z+2, r24	; 0x02
    1f48:	93 83       	std	Z+3, r25	; 0x03
    1f4a:	67 e0       	ldi	r22, 0x07	; 7
    1f4c:	22 0f       	add	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	44 1f       	adc	r20, r20
    1f52:	55 1f       	adc	r21, r21
    1f54:	6a 95       	dec	r22
    1f56:	d1 f7       	brne	.-12     	; 0x1f4c <__unpack_f+0x52>
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	80 83       	st	Z, r24
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <__unpack_f+0x76>
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	44 1f       	adc	r20, r20
    1f64:	55 1f       	adc	r21, r21
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	82 83       	std	Z+2, r24	; 0x02
    1f6e:	93 83       	std	Z+3, r25	; 0x03
    1f70:	20 30       	cpi	r18, 0x00	; 0
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	38 07       	cpc	r19, r24
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	48 07       	cpc	r20, r24
    1f7a:	80 e4       	ldi	r24, 0x40	; 64
    1f7c:	58 07       	cpc	r21, r24
    1f7e:	78 f3       	brcs	.-34     	; 0x1f5e <__unpack_f+0x64>
    1f80:	20 c0       	rjmp	.+64     	; 0x1fc2 <__unpack_f+0xc8>
    1f82:	8f 3f       	cpi	r24, 0xFF	; 255
    1f84:	91 05       	cpc	r25, r1
    1f86:	79 f4       	brne	.+30     	; 0x1fa6 <__unpack_f+0xac>
    1f88:	21 15       	cp	r18, r1
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	41 05       	cpc	r20, r1
    1f8e:	51 05       	cpc	r21, r1
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <__unpack_f+0x9e>
    1f92:	84 e0       	ldi	r24, 0x04	; 4
    1f94:	80 83       	st	Z, r24
    1f96:	08 95       	ret
    1f98:	44 ff       	sbrs	r20, 4
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <__unpack_f+0xa8>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 83       	st	Z, r24
    1fa0:	10 c0       	rjmp	.+32     	; 0x1fc2 <__unpack_f+0xc8>
    1fa2:	10 82       	st	Z, r1
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <__unpack_f+0xc8>
    1fa6:	8f 57       	subi	r24, 0x7F	; 127
    1fa8:	90 40       	sbci	r25, 0x00	; 0
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	93 83       	std	Z+3, r25	; 0x03
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	80 83       	st	Z, r24
    1fb2:	87 e0       	ldi	r24, 0x07	; 7
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	44 1f       	adc	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	8a 95       	dec	r24
    1fbe:	d1 f7       	brne	.-12     	; 0x1fb4 <__unpack_f+0xba>
    1fc0:	50 64       	ori	r21, 0x40	; 64
    1fc2:	24 83       	std	Z+4, r18	; 0x04
    1fc4:	35 83       	std	Z+5, r19	; 0x05
    1fc6:	46 83       	std	Z+6, r20	; 0x06
    1fc8:	57 83       	std	Z+7, r21	; 0x07
    1fca:	08 95       	ret

00001fcc <__fpcmp_parts_f>:
    1fcc:	fc 01       	movw	r30, r24
    1fce:	db 01       	movw	r26, r22
    1fd0:	90 81       	ld	r25, Z
    1fd2:	92 30       	cpi	r25, 0x02	; 2
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <__fpcmp_parts_f+0xc>
    1fd6:	49 c0       	rjmp	.+146    	; 0x206a <__fpcmp_parts_f+0x9e>
    1fd8:	8c 91       	ld	r24, X
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	08 f4       	brcc	.+2      	; 0x1fe0 <__fpcmp_parts_f+0x14>
    1fde:	45 c0       	rjmp	.+138    	; 0x206a <__fpcmp_parts_f+0x9e>
    1fe0:	94 30       	cpi	r25, 0x04	; 4
    1fe2:	51 f4       	brne	.+20     	; 0x1ff8 <__fpcmp_parts_f+0x2c>
    1fe4:	61 81       	ldd	r22, Z+1	; 0x01
    1fe6:	84 30       	cpi	r24, 0x04	; 4
    1fe8:	b1 f5       	brne	.+108    	; 0x2056 <__fpcmp_parts_f+0x8a>
    1fea:	11 96       	adiw	r26, 0x01	; 1
    1fec:	2c 91       	ld	r18, X
    1fee:	11 97       	sbiw	r26, 0x01	; 1
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	26 1b       	sub	r18, r22
    1ff4:	31 09       	sbc	r19, r1
    1ff6:	41 c0       	rjmp	.+130    	; 0x207a <__fpcmp_parts_f+0xae>
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	21 f0       	breq	.+8      	; 0x2004 <__fpcmp_parts_f+0x38>
    1ffc:	92 30       	cpi	r25, 0x02	; 2
    1ffe:	41 f4       	brne	.+16     	; 0x2010 <__fpcmp_parts_f+0x44>
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	b1 f1       	breq	.+108    	; 0x2070 <__fpcmp_parts_f+0xa4>
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	8c 91       	ld	r24, X
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	88 23       	and	r24, r24
    200c:	a1 f1       	breq	.+104    	; 0x2076 <__fpcmp_parts_f+0xaa>
    200e:	2d c0       	rjmp	.+90     	; 0x206a <__fpcmp_parts_f+0x9e>
    2010:	61 81       	ldd	r22, Z+1	; 0x01
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	01 f1       	breq	.+64     	; 0x2056 <__fpcmp_parts_f+0x8a>
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	8c 91       	ld	r24, X
    201a:	11 97       	sbiw	r26, 0x01	; 1
    201c:	68 17       	cp	r22, r24
    201e:	d9 f4       	brne	.+54     	; 0x2056 <__fpcmp_parts_f+0x8a>
    2020:	22 81       	ldd	r18, Z+2	; 0x02
    2022:	33 81       	ldd	r19, Z+3	; 0x03
    2024:	12 96       	adiw	r26, 0x02	; 2
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	13 97       	sbiw	r26, 0x03	; 3
    202c:	82 17       	cp	r24, r18
    202e:	93 07       	cpc	r25, r19
    2030:	94 f0       	brlt	.+36     	; 0x2056 <__fpcmp_parts_f+0x8a>
    2032:	28 17       	cp	r18, r24
    2034:	39 07       	cpc	r19, r25
    2036:	bc f0       	brlt	.+46     	; 0x2066 <__fpcmp_parts_f+0x9a>
    2038:	24 81       	ldd	r18, Z+4	; 0x04
    203a:	35 81       	ldd	r19, Z+5	; 0x05
    203c:	46 81       	ldd	r20, Z+6	; 0x06
    203e:	57 81       	ldd	r21, Z+7	; 0x07
    2040:	14 96       	adiw	r26, 0x04	; 4
    2042:	8d 91       	ld	r24, X+
    2044:	9d 91       	ld	r25, X+
    2046:	0d 90       	ld	r0, X+
    2048:	bc 91       	ld	r27, X
    204a:	a0 2d       	mov	r26, r0
    204c:	82 17       	cp	r24, r18
    204e:	93 07       	cpc	r25, r19
    2050:	a4 07       	cpc	r26, r20
    2052:	b5 07       	cpc	r27, r21
    2054:	18 f4       	brcc	.+6      	; 0x205c <__fpcmp_parts_f+0x90>
    2056:	66 23       	and	r22, r22
    2058:	41 f0       	breq	.+16     	; 0x206a <__fpcmp_parts_f+0x9e>
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <__fpcmp_parts_f+0xaa>
    205c:	28 17       	cp	r18, r24
    205e:	39 07       	cpc	r19, r25
    2060:	4a 07       	cpc	r20, r26
    2062:	5b 07       	cpc	r21, r27
    2064:	28 f4       	brcc	.+10     	; 0x2070 <__fpcmp_parts_f+0xa4>
    2066:	66 23       	and	r22, r22
    2068:	31 f0       	breq	.+12     	; 0x2076 <__fpcmp_parts_f+0xaa>
    206a:	21 e0       	ldi	r18, 0x01	; 1
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	05 c0       	rjmp	.+10     	; 0x207a <__fpcmp_parts_f+0xae>
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	02 c0       	rjmp	.+4      	; 0x207a <__fpcmp_parts_f+0xae>
    2076:	2f ef       	ldi	r18, 0xFF	; 255
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	c9 01       	movw	r24, r18
    207c:	08 95       	ret

0000207e <__mulsi3>:
    207e:	62 9f       	mul	r22, r18
    2080:	d0 01       	movw	r26, r0
    2082:	73 9f       	mul	r23, r19
    2084:	f0 01       	movw	r30, r0
    2086:	82 9f       	mul	r24, r18
    2088:	e0 0d       	add	r30, r0
    208a:	f1 1d       	adc	r31, r1
    208c:	64 9f       	mul	r22, r20
    208e:	e0 0d       	add	r30, r0
    2090:	f1 1d       	adc	r31, r1
    2092:	92 9f       	mul	r25, r18
    2094:	f0 0d       	add	r31, r0
    2096:	83 9f       	mul	r24, r19
    2098:	f0 0d       	add	r31, r0
    209a:	74 9f       	mul	r23, r20
    209c:	f0 0d       	add	r31, r0
    209e:	65 9f       	mul	r22, r21
    20a0:	f0 0d       	add	r31, r0
    20a2:	99 27       	eor	r25, r25
    20a4:	72 9f       	mul	r23, r18
    20a6:	b0 0d       	add	r27, r0
    20a8:	e1 1d       	adc	r30, r1
    20aa:	f9 1f       	adc	r31, r25
    20ac:	63 9f       	mul	r22, r19
    20ae:	b0 0d       	add	r27, r0
    20b0:	e1 1d       	adc	r30, r1
    20b2:	f9 1f       	adc	r31, r25
    20b4:	bd 01       	movw	r22, r26
    20b6:	cf 01       	movw	r24, r30
    20b8:	11 24       	eor	r1, r1
    20ba:	08 95       	ret

000020bc <__udivmodhi4>:
    20bc:	aa 1b       	sub	r26, r26
    20be:	bb 1b       	sub	r27, r27
    20c0:	51 e1       	ldi	r21, 0x11	; 17
    20c2:	07 c0       	rjmp	.+14     	; 0x20d2 <__udivmodhi4_ep>

000020c4 <__udivmodhi4_loop>:
    20c4:	aa 1f       	adc	r26, r26
    20c6:	bb 1f       	adc	r27, r27
    20c8:	a6 17       	cp	r26, r22
    20ca:	b7 07       	cpc	r27, r23
    20cc:	10 f0       	brcs	.+4      	; 0x20d2 <__udivmodhi4_ep>
    20ce:	a6 1b       	sub	r26, r22
    20d0:	b7 0b       	sbc	r27, r23

000020d2 <__udivmodhi4_ep>:
    20d2:	88 1f       	adc	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	5a 95       	dec	r21
    20d8:	a9 f7       	brne	.-22     	; 0x20c4 <__udivmodhi4_loop>
    20da:	80 95       	com	r24
    20dc:	90 95       	com	r25
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	08 95       	ret

000020e4 <__divmodhi4>:
    20e4:	97 fb       	bst	r25, 7
    20e6:	09 2e       	mov	r0, r25
    20e8:	07 26       	eor	r0, r23
    20ea:	0a d0       	rcall	.+20     	; 0x2100 <__divmodhi4_neg1>
    20ec:	77 fd       	sbrc	r23, 7
    20ee:	04 d0       	rcall	.+8      	; 0x20f8 <__divmodhi4_neg2>
    20f0:	e5 df       	rcall	.-54     	; 0x20bc <__udivmodhi4>
    20f2:	06 d0       	rcall	.+12     	; 0x2100 <__divmodhi4_neg1>
    20f4:	00 20       	and	r0, r0
    20f6:	1a f4       	brpl	.+6      	; 0x20fe <__divmodhi4_exit>

000020f8 <__divmodhi4_neg2>:
    20f8:	70 95       	com	r23
    20fa:	61 95       	neg	r22
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255

000020fe <__divmodhi4_exit>:
    20fe:	08 95       	ret

00002100 <__divmodhi4_neg1>:
    2100:	f6 f7       	brtc	.-4      	; 0x20fe <__divmodhi4_exit>
    2102:	90 95       	com	r25
    2104:	81 95       	neg	r24
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	08 95       	ret

0000210a <__prologue_saves__>:
    210a:	2f 92       	push	r2
    210c:	3f 92       	push	r3
    210e:	4f 92       	push	r4
    2110:	5f 92       	push	r5
    2112:	6f 92       	push	r6
    2114:	7f 92       	push	r7
    2116:	8f 92       	push	r8
    2118:	9f 92       	push	r9
    211a:	af 92       	push	r10
    211c:	bf 92       	push	r11
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	ca 1b       	sub	r28, r26
    2134:	db 0b       	sbc	r29, r27
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	09 94       	ijmp

0000213c <__epilogue_restores__>:
    213c:	2a 88       	ldd	r2, Y+18	; 0x12
    213e:	39 88       	ldd	r3, Y+17	; 0x11
    2140:	48 88       	ldd	r4, Y+16	; 0x10
    2142:	5f 84       	ldd	r5, Y+15	; 0x0f
    2144:	6e 84       	ldd	r6, Y+14	; 0x0e
    2146:	7d 84       	ldd	r7, Y+13	; 0x0d
    2148:	8c 84       	ldd	r8, Y+12	; 0x0c
    214a:	9b 84       	ldd	r9, Y+11	; 0x0b
    214c:	aa 84       	ldd	r10, Y+10	; 0x0a
    214e:	b9 84       	ldd	r11, Y+9	; 0x09
    2150:	c8 84       	ldd	r12, Y+8	; 0x08
    2152:	df 80       	ldd	r13, Y+7	; 0x07
    2154:	ee 80       	ldd	r14, Y+6	; 0x06
    2156:	fd 80       	ldd	r15, Y+5	; 0x05
    2158:	0c 81       	ldd	r16, Y+4	; 0x04
    215a:	1b 81       	ldd	r17, Y+3	; 0x03
    215c:	aa 81       	ldd	r26, Y+2	; 0x02
    215e:	b9 81       	ldd	r27, Y+1	; 0x01
    2160:	ce 0f       	add	r28, r30
    2162:	d1 1d       	adc	r29, r1
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	ed 01       	movw	r28, r26
    216a:	08 95       	ret

0000216c <_exit>:
    216c:	f8 94       	cli

0000216e <__stop_program>:
    216e:	ff cf       	rjmp	.-2      	; 0x216e <__stop_program>
